//----------------------------------------------------------------------------//
// Generated by LegUp High-Level Synthesis Tool Version 4.0 (http://legup.org)
// Compiled: Sun Jul 26 12:56:54 2015
// University of Toronto
// For research and academic purposes only. Commercial use is prohibited.
// Please send bugs to: legup@eecg.toronto.edu
// Date: Sun Mar 31 09:16:10 2019
//----------------------------------------------------------------------------//

`define MEMORY_CONTROLLER_ADDR_SIZE 32
`define MEMORY_CONTROLLER_DATA_SIZE 64
// Number of RAM elements: 28
`define MEMORY_CONTROLLER_TAG_SIZE 9
// @dec_del_bph = internal global [6 x i32] zeroinitializer, align 4
`define TAG_g_dec_del_bph `MEMORY_CONTROLLER_TAG_SIZE'd3
`define TAG_g_dec_del_bph_a {`TAG_g_dec_del_bph, 23'd192}
// @dec_del_bpl = internal global [6 x i32] zeroinitializer, align 4
`define TAG_g_dec_del_bpl `MEMORY_CONTROLLER_TAG_SIZE'd3
`define TAG_g_dec_del_bpl_a {`TAG_g_dec_del_bpl, 23'd128}
// @dec_del_dhx = internal global [6 x i32] zeroinitializer, align 4
`define TAG_g_dec_del_dhx `MEMORY_CONTROLLER_TAG_SIZE'd3
`define TAG_g_dec_del_dhx_a {`TAG_g_dec_del_dhx, 23'd224}
// @dec_del_dltx = internal global [6 x i32] zeroinitializer, align 4
`define TAG_g_dec_del_dltx `MEMORY_CONTROLLER_TAG_SIZE'd3
`define TAG_g_dec_del_dltx_a {`TAG_g_dec_del_dltx, 23'd160}
// @delay_bph = internal global [6 x i32] zeroinitializer, align 4
`define TAG_g_delay_bph `MEMORY_CONTROLLER_TAG_SIZE'd3
`define TAG_g_delay_bph_a {`TAG_g_delay_bph, 23'd64}
// @delay_bpl = internal global [6 x i32] zeroinitializer, align 4
`define TAG_g_delay_bpl `MEMORY_CONTROLLER_TAG_SIZE'd3
`define TAG_g_delay_bpl_a {`TAG_g_delay_bpl, 23'd0}
// @delay_dhx = internal global [6 x i32] zeroinitializer, align 4
`define TAG_g_delay_dhx `MEMORY_CONTROLLER_TAG_SIZE'd3
`define TAG_g_delay_dhx_a {`TAG_g_delay_dhx, 23'd96}
// @delay_dltx = internal global [6 x i32] zeroinitializer, align 4
`define TAG_g_delay_dltx `MEMORY_CONTROLLER_TAG_SIZE'd3
`define TAG_g_delay_dltx_a {`TAG_g_delay_dltx, 23'd32}
// @quant26bt_neg = internal unnamed_addr constant [31 x i32] [i32 63, i32 62, i32 31, i32 30, i32 29, i32 28, i32 27, i32 26, i32 25, i32 24, i32 23, i32 22, i32 21, i32 20, i32 19, i32 18, i32 17, i32 ...
`define TAG_g_quant26bt_neg `MEMORY_CONTROLLER_TAG_SIZE'd2
`define TAG_g_quant26bt_neg_a {`TAG_g_quant26bt_neg, 23'd128}
// @quant26bt_pos = internal unnamed_addr constant [31 x i32] [i32 61, i32 60, i32 59, i32 58, i32 57, i32 56, i32 55, i32 54, i32 53, i32 52, i32 51, i32 50, i32 49, i32 48, i32 47, i32 46, i32 45, i32 ...
`define TAG_g_quant26bt_pos `MEMORY_CONTROLLER_TAG_SIZE'd2
`define TAG_g_quant26bt_pos_a {`TAG_g_quant26bt_pos, 23'd0}

// Turn off warning 'ignoring unsupported system task'
// altera message_off 10175

`timescale 1 ns / 1 ns
module top
	(
		clk,
		reset,
		start,
		finish,
		waitrequest,
		return_val
	);
input clk;
input reset;
input start;
output wire finish;
input waitrequest;
output wire [31:0] return_val;
wire memory_controller_waitrequest;
wire memory_controller_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
wire memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
wire [1:0] memory_controller_size_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;

wire memory_controller_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
wire memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
wire [1:0] memory_controller_size_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;

/* synthesis translate_off */
assign memory_controller_waitrequest = waitrequest;
/* synthesis translate_on */

memory_controller memory_controller_inst (
	.clk( clk ),
	.memory_controller_enable_a( memory_controller_enable_a ),
	.memory_controller_enable_b( memory_controller_enable_b ),
	.memory_controller_address_a( memory_controller_address_a ),
	.memory_controller_address_b( memory_controller_address_b ),
	.memory_controller_write_enable_a( memory_controller_write_enable_a ),
	.memory_controller_write_enable_b( memory_controller_write_enable_b ),
	.memory_controller_in_a( memory_controller_in_a ),
	.memory_controller_in_b( memory_controller_in_b ),
	.memory_controller_size_a( memory_controller_size_a ),
	.memory_controller_size_b( memory_controller_size_b ),
	.memory_controller_waitrequest( memory_controller_waitrequest ),
	.memory_controller_out_reg_a( memory_controller_out_a ),
	.memory_controller_out_reg_b( memory_controller_out_b )
);

main main_inst(
	.clk( clk ),
	.clk2x( clk2x ),
	.clk1x_follower( clk1x_follower ),
	.reset( reset ),
	.start( start ),
	.finish( finish ),
	.return_val( return_val ),
	.memory_controller_waitrequest(memory_controller_waitrequest),
	.memory_controller_enable_a(memory_controller_enable_a),
	.memory_controller_address_a(memory_controller_address_a),
	.memory_controller_write_enable_a(memory_controller_write_enable_a),
	.memory_controller_in_a(memory_controller_in_a),
	.memory_controller_size_a(memory_controller_size_a),
	.memory_controller_out_a(memory_controller_out_a),
	.memory_controller_enable_b(memory_controller_enable_b),
	.memory_controller_address_b(memory_controller_address_b),
	.memory_controller_write_enable_b(memory_controller_write_enable_b),
	.memory_controller_in_b(memory_controller_in_b),
	.memory_controller_size_b(memory_controller_size_b),
	.memory_controller_out_b(memory_controller_out_b)
);

endmodule

`timescale 1 ns / 1 ns
module memory_controller
(
	clk,
	memory_controller_address_a,
	memory_controller_address_b,
	memory_controller_enable_a,
	memory_controller_enable_b,
	memory_controller_write_enable_a,
	memory_controller_write_enable_b,
	memory_controller_in_a,
	memory_controller_in_b,
	memory_controller_size_a,
	memory_controller_size_b,
	memory_controller_waitrequest,
	memory_controller_out_reg_a,
	memory_controller_out_reg_b
);

parameter latency = 2;

parameter ram_latency = latency-1;

integer j;

input clk;
input memory_controller_waitrequest;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
input memory_controller_enable_a;
input memory_controller_write_enable_a;
input [64-1:0] memory_controller_in_a;
input [1:0] memory_controller_size_a;
output reg [64-1:0] memory_controller_out_reg_a;
reg [64-1:0] memory_controller_out_prev_a;
reg [64-1:0] memory_controller_out_a;

reg memory_controller_enable_reg_a;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
input memory_controller_enable_b;
input memory_controller_write_enable_b;
input [64-1:0] memory_controller_in_b;
input [1:0] memory_controller_size_b;
output reg [64-1:0] memory_controller_out_reg_b;
reg [64-1:0] memory_controller_out_prev_b;
reg [64-1:0] memory_controller_out_b;

reg memory_controller_enable_reg_b;

reg [5:0] rom_32_address_a;
reg [5:0] rom_32_address_b;
reg rom_32_write_enable_a;
reg rom_32_write_enable_b;
reg [31:0] rom_32_in_a;
reg [31:0] rom_32_in_b;
wire [31:0] rom_32_out_a;
wire [31:0] rom_32_out_b;

// @quant26bt_pos = internal unnamed_addr constant [31 x i32] [i32 61, i32 60, i32 59, i32 58, i32 57, i32 56, i32 55, i32 54, i32 53, i32 52, i32 51, i32 50, i32 49, i32 48, i32 47, i32 46, i32 45, i32 ...
rom_dual_port rom_32 (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( rom_32_address_a ),
	.address_b( rom_32_address_b ),
	.q_a( rom_32_out_a ),
	.q_b( rom_32_out_b)
);
defparam rom_32.width_a = 32;
defparam rom_32.width_b = 32;
defparam rom_32.widthad_a = 6;
defparam rom_32.widthad_b = 6;
defparam rom_32.numwords_a = 63;
defparam rom_32.numwords_b = 63;
defparam rom_32.latency = ram_latency;
defparam rom_32.init_file = "rom_32.mif";

reg [5:0] ram_32_address_a;
reg [5:0] ram_32_address_b;
reg ram_32_write_enable_a;
reg ram_32_write_enable_b;
reg [31:0] ram_32_in_a;
reg [31:0] ram_32_in_b;
wire [31:0] ram_32_out_a;
wire [31:0] ram_32_out_b;

// @delay_bpl = internal global [6 x i32] zeroinitializer, align 4
ram_dual_port ram_32 (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( ram_32_address_a ),
	.address_b( ram_32_address_b ),
	.wren_a( ram_32_write_enable_a ),
	.wren_b( ram_32_write_enable_b ),
	.data_a( ram_32_in_a ),
	.data_b( ram_32_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( ram_32_out_a ),
	.q_b( ram_32_out_b)
);
defparam ram_32.width_a = 32;
defparam ram_32.width_b = 32;
defparam ram_32.widthad_a = 6;
defparam ram_32.widthad_b = 6;
defparam ram_32.width_be_a = 1;
defparam ram_32.width_be_b = 1;
defparam ram_32.numwords_a = 62;
defparam ram_32.numwords_b = 62;
defparam ram_32.latency = ram_latency;
defparam ram_32.init_file = "ram_32.mif";
wire [`MEMORY_CONTROLLER_TAG_SIZE-1:0] tag_a;
assign tag_a = memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:`MEMORY_CONTROLLER_ADDR_SIZE-`MEMORY_CONTROLLER_TAG_SIZE];
always @(*)
if (memory_controller_enable_a & (tag_a == 0))
begin
   $display("Error: Null pointer exception! Are you trying to read from a local ram? Use: 'set_memory_global <ram_name>' To debug this error try: 'set_parameter PRINT_STATES 1'");
   $finish;
end
reg [2:0] prevAddr_a;
reg [1:0] prevSize_a;
reg [2:0] prevSize_a_and;

always @(posedge clk)
if (!memory_controller_waitrequest)
begin
	prevAddr_a <= memory_controller_address_a[2:0];
	prevSize_a <= memory_controller_size_a;
end
wire [`MEMORY_CONTROLLER_TAG_SIZE-1:0] tag_b;
assign tag_b = memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:`MEMORY_CONTROLLER_ADDR_SIZE-`MEMORY_CONTROLLER_TAG_SIZE];
always @(*)
if (memory_controller_enable_b & (tag_b == 0))
begin
   $display("Error: Null pointer exception! Are you trying to read from a local ram? Use: 'set_memory_global <ram_name>' To debug this error try: 'set_parameter PRINT_STATES 1'");
   $finish;
end
reg [2:0] prevAddr_b;
reg [1:0] prevSize_b;
reg [2:0] prevSize_b_and;

always @(posedge clk)
if (!memory_controller_waitrequest)
begin
	prevAddr_b <= memory_controller_address_b[2:0];
	prevSize_b <= memory_controller_size_b;
end

reg [2:0] select_not_struct_a;

wire select_rom_32_a;
assign select_rom_32_a = (tag_a == 2);
reg [ram_latency:0] select_rom_32_reg_a;
wire [31:0] memory_controller_rom_32_out_a;
assign memory_controller_rom_32_out_a = {32{ select_rom_32_reg_a[ram_latency]}} & rom_32_out_a;

wire select_ram_32_a;
assign select_ram_32_a = (tag_a == 3);
reg [ram_latency:0] select_ram_32_reg_a;
wire [31:0] memory_controller_ram_32_out_a;
assign memory_controller_ram_32_out_a = {32{ select_ram_32_reg_a[ram_latency]}} & ram_32_out_a;

always @(*)
begin
	rom_32_address_a = memory_controller_address_a [6-1+2:2] & {6{select_rom_32_a}};
	rom_32_write_enable_a = memory_controller_write_enable_a & select_rom_32_a;
	rom_32_in_a [32-1:0] = memory_controller_in_a[32-1:0];

	ram_32_address_a = memory_controller_address_a [6-1+2:2] & {6{select_ram_32_a}};
	ram_32_write_enable_a = memory_controller_write_enable_a & select_ram_32_a;
	ram_32_in_a [32-1:0] = memory_controller_in_a[32-1:0];

end
always @(*)
begin
	select_not_struct_a [2:0] = 3'b0 | {2{select_rom_32_reg_a[ram_latency]}} | {2{select_ram_32_reg_a[ram_latency]}};
	if (prevAddr_a[2:0] & select_not_struct_a[2:0] != 0 && memory_controller_enable_a)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end

	prevSize_a_and[0] = prevSize_a[1] | prevSize_a[0];
	prevSize_a_and[1] = prevSize_a[1];
	prevSize_a_and[2] = prevSize_a[1] & prevSize_a[0];
	if ((prevAddr_a & prevSize_a_and) != 0 && memory_controller_enable_a)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end
	memory_controller_out_prev_a = memory_controller_out_reg_a & { 64{!memory_controller_enable_reg_a}};
	memory_controller_out_a = 1'b0 | memory_controller_out_prev_a | memory_controller_rom_32_out_a | memory_controller_ram_32_out_a;
end

always @(posedge clk)
if (!memory_controller_waitrequest)
begin
memory_controller_out_reg_a <= memory_controller_out_a;
memory_controller_enable_reg_a <= memory_controller_enable_a;
end

always @(posedge clk)
if (!memory_controller_waitrequest)
for (j = 0; j < ram_latency; j=j+1)
begin
select_rom_32_reg_a[j+1] <= select_rom_32_reg_a[j];
select_rom_32_reg_a[j+1] <= select_rom_32_reg_a[j];
select_ram_32_reg_a[j+1] <= select_ram_32_reg_a[j];
select_ram_32_reg_a[j+1] <= select_ram_32_reg_a[j];
select_ram_32_reg_a[j+1] <= select_ram_32_reg_a[j];
select_ram_32_reg_a[j+1] <= select_ram_32_reg_a[j];
select_ram_32_reg_a[j+1] <= select_ram_32_reg_a[j];
select_ram_32_reg_a[j+1] <= select_ram_32_reg_a[j];
select_ram_32_reg_a[j+1] <= select_ram_32_reg_a[j];
select_ram_32_reg_a[j+1] <= select_ram_32_reg_a[j];
end
always @(*)
begin
select_rom_32_reg_a[0] <= select_rom_32_a;
select_rom_32_reg_a[0] <= select_rom_32_a;
select_ram_32_reg_a[0] <= select_ram_32_a;
select_ram_32_reg_a[0] <= select_ram_32_a;
select_ram_32_reg_a[0] <= select_ram_32_a;
select_ram_32_reg_a[0] <= select_ram_32_a;
select_ram_32_reg_a[0] <= select_ram_32_a;
select_ram_32_reg_a[0] <= select_ram_32_a;
select_ram_32_reg_a[0] <= select_ram_32_a;
select_ram_32_reg_a[0] <= select_ram_32_a;
end

reg [2:0] select_not_struct_b;

wire select_rom_32_b;
assign select_rom_32_b = (tag_b == 2);
reg [ram_latency:0] select_rom_32_reg_b;
wire [31:0] memory_controller_rom_32_out_b;
assign memory_controller_rom_32_out_b = {32{ select_rom_32_reg_b[ram_latency]}} & rom_32_out_b;

wire select_ram_32_b;
assign select_ram_32_b = (tag_b == 3);
reg [ram_latency:0] select_ram_32_reg_b;
wire [31:0] memory_controller_ram_32_out_b;
assign memory_controller_ram_32_out_b = {32{ select_ram_32_reg_b[ram_latency]}} & ram_32_out_b;

always @(*)
begin
	rom_32_address_b = memory_controller_address_b [6-1+2:2] & {6{select_rom_32_b}};
	rom_32_write_enable_b = memory_controller_write_enable_b & select_rom_32_b;
	rom_32_in_b [32-1:0] = memory_controller_in_b[32-1:0];

	ram_32_address_b = memory_controller_address_b [6-1+2:2] & {6{select_ram_32_b}};
	ram_32_write_enable_b = memory_controller_write_enable_b & select_ram_32_b;
	ram_32_in_b [32-1:0] = memory_controller_in_b[32-1:0];

end
always @(*)
begin
	select_not_struct_b [2:0] = 3'b0 | {2{select_rom_32_reg_b[ram_latency]}} | {2{select_ram_32_reg_b[ram_latency]}};
	if (prevAddr_b[2:0] & select_not_struct_b[2:0] != 0 && memory_controller_enable_b)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end

	prevSize_b_and[0] = prevSize_b[1] | prevSize_b[0];
	prevSize_b_and[1] = prevSize_b[1];
	prevSize_b_and[2] = prevSize_b[1] & prevSize_b[0];
	if ((prevAddr_b & prevSize_b_and) != 0 && memory_controller_enable_b)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end
	memory_controller_out_prev_b = memory_controller_out_reg_b & { 64{!memory_controller_enable_reg_b}};
	memory_controller_out_b = 1'b0 | memory_controller_out_prev_b | memory_controller_rom_32_out_b | memory_controller_ram_32_out_b;
end

always @(posedge clk)
if (!memory_controller_waitrequest)
begin
memory_controller_out_reg_b <= memory_controller_out_b;
memory_controller_enable_reg_b <= memory_controller_enable_b;
end

always @(posedge clk)
if (!memory_controller_waitrequest)
for (j = 0; j < ram_latency; j=j+1)
begin
select_rom_32_reg_b[j+1] <= select_rom_32_reg_b[j];
select_rom_32_reg_b[j+1] <= select_rom_32_reg_b[j];
select_ram_32_reg_b[j+1] <= select_ram_32_reg_b[j];
select_ram_32_reg_b[j+1] <= select_ram_32_reg_b[j];
select_ram_32_reg_b[j+1] <= select_ram_32_reg_b[j];
select_ram_32_reg_b[j+1] <= select_ram_32_reg_b[j];
select_ram_32_reg_b[j+1] <= select_ram_32_reg_b[j];
select_ram_32_reg_b[j+1] <= select_ram_32_reg_b[j];
select_ram_32_reg_b[j+1] <= select_ram_32_reg_b[j];
select_ram_32_reg_b[j+1] <= select_ram_32_reg_b[j];
end
always @(*)
begin
select_rom_32_reg_b[0] <= select_rom_32_b;
select_rom_32_reg_b[0] <= select_rom_32_b;
select_ram_32_reg_b[0] <= select_ram_32_b;
select_ram_32_reg_b[0] <= select_ram_32_b;
select_ram_32_reg_b[0] <= select_ram_32_b;
select_ram_32_reg_b[0] <= select_ram_32_b;
select_ram_32_reg_b[0] <= select_ram_32_b;
select_ram_32_reg_b[0] <= select_ram_32_b;
select_ram_32_reg_b[0] <= select_ram_32_b;
select_ram_32_reg_b[0] <= select_ram_32_b;
end

endmodule 

`timescale 1 ns / 1 ns
module legup_memset_4_i64
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_waitrequest,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	arg_m,
	arg_c1,
	arg_n
);

parameter [3:0] LEGUP_0 = 4'd0;
parameter [3:0] LEGUP_F_legup_memset_4_i64_BB__0_1 = 4'd1;
parameter [3:0] LEGUP_F_legup_memset_4_i64_BB__0_2 = 4'd2;
parameter [3:0] LEGUP_F_legup_memset_4_i64_BB__0_3 = 4'd3;
parameter [3:0] LEGUP_F_legup_memset_4_i64_BB__0_4 = 4'd4;
parameter [3:0] LEGUP_F_legup_memset_4_i64_BB__0_5 = 4'd5;
parameter [3:0] LEGUP_F_legup_memset_4_i64_BB__0_6 = 4'd6;
parameter [3:0] LEGUP_F_legup_memset_4_i64_BB__0_7 = 4'd7;
parameter [3:0] LEGUP_F_legup_memset_4_i64_BB__0_8 = 4'd8;
parameter [3:0] LEGUP_F_legup_memset_4_i64_BB__18_9 = 4'd9;
parameter [3:0] LEGUP_F_legup_memset_4_i64_BB__18_10 = 4'd10;
parameter [3:0] LEGUP_F_legup_memset_4_i64_BB__18_11 = 4'd11;
parameter [3:0] LEGUP_F_legup_memset_4_i64_BB__22_12 = 4'd12;
parameter [3:0] LEGUP_F_legup_memset_4_i64_BB__22_13 = 4'd13;
parameter [3:0] LEGUP_F_legup_memset_4_i64_BB__22_14 = 4'd14;
parameter [3:0] LEGUP_F_legup_memset_4_i64_BB__26_15 = 4'd15;
parameter [8:0] tag_offset = 9'd0;
parameter [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tag_addr_offset = {tag_offset, 23'd0};

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
input  memory_controller_waitrequest;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] arg_m;
input [7:0] arg_c1;
input [63:0] arg_n;
reg [3:0] cur_state;
reg [3:0] next_state;
reg [7:0] legup_memset_4_i64_0_4;
reg [7:0] legup_memset_4_i64_0_4_reg;
reg [31:0] legup_memset_4_i64_0_5;
reg [31:0] legup_memset_4_i64_0_5_reg;
reg [31:0] legup_memset_4_i64_0_6;
reg [31:0] legup_memset_4_i64_0_6_reg;
reg [31:0] legup_memset_4_i64_0_7;
reg [31:0] legup_memset_4_i64_0_7_reg;
reg [31:0] legup_memset_4_i64_0_8;
reg [31:0] legup_memset_4_i64_0_8_reg;
reg [31:0] legup_memset_4_i64_0_9;
reg [31:0] legup_memset_4_i64_0_9_reg;
reg [31:0] legup_memset_4_i64_0_10;
reg [31:0] legup_memset_4_i64_0_10_reg;
reg [31:0] legup_memset_4_i64_0_11;
reg [31:0] legup_memset_4_i64_0_11_reg;
reg [31:0] legup_memset_4_i64_0_12;
reg [31:0] legup_memset_4_i64_0_12_reg;
reg [31:0] legup_memset_4_i64_0_13;
reg [31:0] legup_memset_4_i64_0_13_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] legup_memset_4_i64_0_14;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] legup_memset_4_i64_0_14_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] legup_memset_4_i64_0_15;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] legup_memset_4_i64_0_15_reg;
reg [63:0] legup_memset_4_i64_0_16;
reg [63:0] legup_memset_4_i64_0_16_reg;
reg [63:0] legup_memset_4_i64_0_17;
reg [63:0] legup_memset_4_i64_0_17_reg;
reg [63:0] legup_memset_4_i64_18_19;
reg [63:0] legup_memset_4_i64_18_19_reg;
reg [63:0] legup_memset_4_i64_18_20;
reg [63:0] legup_memset_4_i64_18_20_reg;
reg  legup_memset_4_i64_18_21;
reg  legup_memset_4_i64_18_21_reg;
reg [31:0] legup_memset_4_i64_22_23;
reg [31:0] legup_memset_4_i64_22_23_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] legup_memset_4_i64_22_24;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] legup_memset_4_i64_22_24_reg;
reg [31:0] legup_memset_4_i64_22_gep_int;
reg [31:0] legup_memset_4_i64_22_gep_int_reg;
reg [31:0] legup_memset_4_i64_22_gep;
reg [31:0] legup_memset_4_i64_22_gep_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] legup_memset_4_i64_22_25;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] legup_memset_4_i64_22_25_reg;
wire [3:0] qq4_code4_table_address_a;
wire  qq4_code4_table_write_enable_a;
wire [31:0] qq4_code4_table_in_a;
wire [31:0] qq4_code4_table_out_a;
wire [3:0] qq4_code4_table_address_b;
wire  qq4_code4_table_write_enable_b;
wire [31:0] qq4_code4_table_in_b;
wire [31:0] qq4_code4_table_out_b;
wire [5:0] qq6_code6_table_address_a;
wire  qq6_code6_table_write_enable_a;
wire [31:0] qq6_code6_table_in_a;
wire [31:0] qq6_code6_table_out_a;
wire [5:0] qq6_code6_table_address_b;
wire  qq6_code6_table_write_enable_b;
wire [31:0] qq6_code6_table_in_b;
wire [31:0] qq6_code6_table_out_b;
wire [3:0] wl_code_table_address_a;
wire  wl_code_table_write_enable_a;
wire [31:0] wl_code_table_in_a;
wire [31:0] wl_code_table_out_a;
wire [3:0] wl_code_table_address_b;
wire  wl_code_table_write_enable_b;
wire [31:0] wl_code_table_in_b;
wire [31:0] wl_code_table_out_b;
wire [4:0] ilb_table_address_a;
wire  ilb_table_write_enable_a;
wire [31:0] ilb_table_in_a;
wire [31:0] ilb_table_out_a;
wire [4:0] ilb_table_address_b;
wire  ilb_table_write_enable_b;
wire [31:0] ilb_table_in_b;
wire [31:0] ilb_table_out_b;
wire [4:0] decis_levl_address_a;
wire  decis_levl_write_enable_a;
wire [31:0] decis_levl_in_a;
wire [31:0] decis_levl_out_a;
wire [4:0] decis_levl_address_b;
wire  decis_levl_write_enable_b;
wire [31:0] decis_levl_in_b;
wire [31:0] decis_levl_out_b;
wire [4:0] rom_32_address_a;
wire  rom_32_write_enable_a;
wire [31:0] rom_32_in_a;
wire [31:0] rom_32_out_a;
wire [4:0] rom_32_address_b;
wire  rom_32_write_enable_b;
wire [31:0] rom_32_in_b;
wire [31:0] rom_32_out_b;
wire [1:0] qq2_code2_table_address_a;
wire  qq2_code2_table_write_enable_a;
wire [31:0] qq2_code2_table_in_a;
wire [31:0] qq2_code2_table_out_a;
wire [1:0] qq2_code2_table_address_b;
wire  qq2_code2_table_write_enable_b;
wire [31:0] qq2_code2_table_in_b;
wire [31:0] qq2_code2_table_out_b;
wire [1:0] wh_code_table_address_a;
wire  wh_code_table_write_enable_a;
wire [31:0] wh_code_table_in_a;
wire [31:0] wh_code_table_out_a;
wire [1:0] wh_code_table_address_b;
wire  wh_code_table_write_enable_b;
wire [31:0] wh_code_table_in_b;
wire [31:0] wh_code_table_out_b;
wire [4:0] tqmf_address_a;
wire  tqmf_write_enable_a;
wire [31:0] tqmf_in_a;
wire [31:0] tqmf_out_a;
wire [4:0] tqmf_address_b;
wire  tqmf_write_enable_b;
wire [31:0] tqmf_in_b;
wire [31:0] tqmf_out_b;
wire [2:0] ram_32_address_a;
wire  ram_32_write_enable_a;
wire [31:0] ram_32_in_a;
wire [31:0] ram_32_out_a;
wire [2:0] ram_32_address_b;
wire  ram_32_write_enable_b;
wire [31:0] ram_32_in_b;
wire [31:0] ram_32_out_b;
wire [6:0] test_data_address_a;
wire  test_data_write_enable_a;
wire [31:0] test_data_in_a;
wire [31:0] test_data_out_a;
wire [6:0] test_data_address_b;
wire  test_data_write_enable_b;
wire [31:0] test_data_in_b;
wire [31:0] test_data_out_b;
wire [6:0] test_compressed_address_a;
wire  test_compressed_write_enable_a;
wire [31:0] test_compressed_in_a;
wire [31:0] test_compressed_out_a;
wire [6:0] test_compressed_address_b;
wire  test_compressed_write_enable_b;
wire [31:0] test_compressed_in_b;
wire [31:0] test_compressed_out_b;
wire [6:0] test_result_address_a;
wire  test_result_write_enable_a;
wire [31:0] test_result_in_a;
wire [31:0] test_result_out_a;
wire [6:0] test_result_address_b;
wire  test_result_write_enable_b;
wire [31:0] test_result_in_b;
wire [31:0] test_result_out_b;
wire [6:0] compressed_address_a;
wire  compressed_write_enable_a;
wire [31:0] compressed_in_a;
wire [31:0] compressed_out_a;
wire [6:0] compressed_address_b;
wire  compressed_write_enable_b;
wire [31:0] compressed_in_b;
wire [31:0] compressed_out_b;
wire [6:0] result_address_a;
wire  result_write_enable_a;
wire [31:0] result_in_a;
wire [31:0] result_out_a;
wire [6:0] result_address_b;
wire  result_write_enable_b;
wire [31:0] result_in_b;
wire [31:0] result_out_b;
reg  legup_memset_4_i64_0_1_address_a;
reg  legup_memset_4_i64_0_1_write_enable_a;
reg [31:0] legup_memset_4_i64_0_1_in_a;
wire [31:0] legup_memset_4_i64_0_1_out_a;
wire  legup_memset_4_i64_0_1_address_b;
wire  legup_memset_4_i64_0_1_write_enable_b;
wire [31:0] legup_memset_4_i64_0_1_in_b;
wire [31:0] legup_memset_4_i64_0_1_out_b;
reg  legup_memset_4_i64_0_2_address_a;
reg  legup_memset_4_i64_0_2_write_enable_a;
reg [7:0] legup_memset_4_i64_0_2_in_a;
wire [7:0] legup_memset_4_i64_0_2_out_a;
wire  legup_memset_4_i64_0_2_address_b;
wire  legup_memset_4_i64_0_2_write_enable_b;
wire [7:0] legup_memset_4_i64_0_2_in_b;
wire [7:0] legup_memset_4_i64_0_2_out_b;
reg  legup_memset_4_i64_0_3_address_a;
reg  legup_memset_4_i64_0_3_write_enable_a;
reg [63:0] legup_memset_4_i64_0_3_in_a;
wire [63:0] legup_memset_4_i64_0_3_out_a;
wire  legup_memset_4_i64_0_3_address_b;
wire  legup_memset_4_i64_0_3_write_enable_b;
wire [63:0] legup_memset_4_i64_0_3_in_b;
wire [63:0] legup_memset_4_i64_0_3_out_b;
reg  legup_memset_4_i64_0_c_address_a;
reg  legup_memset_4_i64_0_c_write_enable_a;
reg [31:0] legup_memset_4_i64_0_c_in_a;
wire [31:0] legup_memset_4_i64_0_c_out_a;
reg  legup_memset_4_i64_0_c_address_b;
reg  legup_memset_4_i64_0_c_write_enable_b;
wire [31:0] legup_memset_4_i64_0_c_in_b;
wire [31:0] legup_memset_4_i64_0_c_out_b;
reg  legup_memset_4_i64_0_s_address_a;
reg  legup_memset_4_i64_0_s_write_enable_a;
reg [31:0] legup_memset_4_i64_0_s_in_a;
wire [31:0] legup_memset_4_i64_0_s_out_a;
reg  legup_memset_4_i64_0_s_address_b;
reg  legup_memset_4_i64_0_s_write_enable_b;
reg [31:0] legup_memset_4_i64_0_s_in_b;
wire [31:0] legup_memset_4_i64_0_s_out_b;
reg [63:0] legup_memset_4_i64_signed_add_64_0_op0;
reg [63:0] legup_memset_4_i64_signed_add_64_0_op1;
reg [63:0] legup_memset_4_i64_signed_add_64_0;
reg [31:0] legup_memset_4_i64_signed_add_32_0_op0;
reg [31:0] legup_memset_4_i64_signed_add_32_0_op1;
reg [31:0] legup_memset_4_i64_signed_add_32_0;

// Local Rams


//   %1 = alloca i8*, align 4
ram_dual_port legup_memset_4_i64_0_1 (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( legup_memset_4_i64_0_1_address_a ),
	.address_b( legup_memset_4_i64_0_1_address_b ),
	.wren_a( legup_memset_4_i64_0_1_write_enable_a ),
	.wren_b( legup_memset_4_i64_0_1_write_enable_b ),
	.data_a( legup_memset_4_i64_0_1_in_a ),
	.data_b( legup_memset_4_i64_0_1_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( legup_memset_4_i64_0_1_out_a ),
	.q_b( legup_memset_4_i64_0_1_out_b)
);
defparam legup_memset_4_i64_0_1.width_a = 32;
defparam legup_memset_4_i64_0_1.width_b = 32;
defparam legup_memset_4_i64_0_1.widthad_a = 1;
defparam legup_memset_4_i64_0_1.widthad_b = 1;
defparam legup_memset_4_i64_0_1.width_be_a = 1;
defparam legup_memset_4_i64_0_1.width_be_b = 1;
defparam legup_memset_4_i64_0_1.numwords_a = 1;
defparam legup_memset_4_i64_0_1.numwords_b = 1;
defparam legup_memset_4_i64_0_1.latency = 1;


//   %2 = alloca i8, align 1
ram_dual_port legup_memset_4_i64_0_2 (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( legup_memset_4_i64_0_2_address_a ),
	.address_b( legup_memset_4_i64_0_2_address_b ),
	.wren_a( legup_memset_4_i64_0_2_write_enable_a ),
	.wren_b( legup_memset_4_i64_0_2_write_enable_b ),
	.data_a( legup_memset_4_i64_0_2_in_a ),
	.data_b( legup_memset_4_i64_0_2_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( legup_memset_4_i64_0_2_out_a ),
	.q_b( legup_memset_4_i64_0_2_out_b)
);
defparam legup_memset_4_i64_0_2.width_a = 8;
defparam legup_memset_4_i64_0_2.width_b = 8;
defparam legup_memset_4_i64_0_2.widthad_a = 1;
defparam legup_memset_4_i64_0_2.widthad_b = 1;
defparam legup_memset_4_i64_0_2.width_be_a = 1;
defparam legup_memset_4_i64_0_2.width_be_b = 1;
defparam legup_memset_4_i64_0_2.numwords_a = 1;
defparam legup_memset_4_i64_0_2.numwords_b = 1;
defparam legup_memset_4_i64_0_2.latency = 1;


//   %3 = alloca i64, align 8
ram_dual_port legup_memset_4_i64_0_3 (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( legup_memset_4_i64_0_3_address_a ),
	.address_b( legup_memset_4_i64_0_3_address_b ),
	.wren_a( legup_memset_4_i64_0_3_write_enable_a ),
	.wren_b( legup_memset_4_i64_0_3_write_enable_b ),
	.data_a( legup_memset_4_i64_0_3_in_a ),
	.data_b( legup_memset_4_i64_0_3_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( legup_memset_4_i64_0_3_out_a ),
	.q_b( legup_memset_4_i64_0_3_out_b)
);
defparam legup_memset_4_i64_0_3.width_a = 64;
defparam legup_memset_4_i64_0_3.width_b = 64;
defparam legup_memset_4_i64_0_3.widthad_a = 1;
defparam legup_memset_4_i64_0_3.widthad_b = 1;
defparam legup_memset_4_i64_0_3.width_be_a = 1;
defparam legup_memset_4_i64_0_3.width_be_b = 1;
defparam legup_memset_4_i64_0_3.numwords_a = 1;
defparam legup_memset_4_i64_0_3.numwords_b = 1;
defparam legup_memset_4_i64_0_3.latency = 1;


//   %c = alloca i32, align 4
ram_dual_port legup_memset_4_i64_0_c (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( legup_memset_4_i64_0_c_address_a ),
	.address_b( legup_memset_4_i64_0_c_address_b ),
	.wren_a( legup_memset_4_i64_0_c_write_enable_a ),
	.wren_b( legup_memset_4_i64_0_c_write_enable_b ),
	.data_a( legup_memset_4_i64_0_c_in_a ),
	.data_b( legup_memset_4_i64_0_c_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( legup_memset_4_i64_0_c_out_a ),
	.q_b( legup_memset_4_i64_0_c_out_b)
);
defparam legup_memset_4_i64_0_c.width_a = 32;
defparam legup_memset_4_i64_0_c.width_b = 32;
defparam legup_memset_4_i64_0_c.widthad_a = 1;
defparam legup_memset_4_i64_0_c.widthad_b = 1;
defparam legup_memset_4_i64_0_c.width_be_a = 1;
defparam legup_memset_4_i64_0_c.width_be_b = 1;
defparam legup_memset_4_i64_0_c.numwords_a = 1;
defparam legup_memset_4_i64_0_c.numwords_b = 1;
defparam legup_memset_4_i64_0_c.latency = 1;


//   %s = alloca i32*, align 4
ram_dual_port legup_memset_4_i64_0_s (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( legup_memset_4_i64_0_s_address_a ),
	.address_b( legup_memset_4_i64_0_s_address_b ),
	.wren_a( legup_memset_4_i64_0_s_write_enable_a ),
	.wren_b( legup_memset_4_i64_0_s_write_enable_b ),
	.data_a( legup_memset_4_i64_0_s_in_a ),
	.data_b( legup_memset_4_i64_0_s_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( legup_memset_4_i64_0_s_out_a ),
	.q_b( legup_memset_4_i64_0_s_out_b)
);
defparam legup_memset_4_i64_0_s.width_a = 32;
defparam legup_memset_4_i64_0_s.width_b = 32;
defparam legup_memset_4_i64_0_s.widthad_a = 1;
defparam legup_memset_4_i64_0_s.widthad_b = 1;
defparam legup_memset_4_i64_0_s.width_be_a = 1;
defparam legup_memset_4_i64_0_s.width_be_b = 1;
defparam legup_memset_4_i64_0_s.numwords_a = 1;
defparam legup_memset_4_i64_0_s.numwords_b = 1;
defparam legup_memset_4_i64_0_s.latency = 1;


always @(posedge clk) begin
if (reset == 1'b1)
	cur_state <= LEGUP_0;
else if (memory_controller_waitrequest == 1'd1)
	cur_state <= cur_state;
else
	cur_state <= next_state;
end

always @(*)
begin
next_state = cur_state;
case(cur_state)  // synthesis parallel_case  
LEGUP_0:
	if ((start == 1'd1))
		next_state = LEGUP_F_legup_memset_4_i64_BB__0_1;
LEGUP_F_legup_memset_4_i64_BB__0_1:
		next_state = LEGUP_F_legup_memset_4_i64_BB__0_2;
LEGUP_F_legup_memset_4_i64_BB__0_2:
		next_state = LEGUP_F_legup_memset_4_i64_BB__0_3;
LEGUP_F_legup_memset_4_i64_BB__0_3:
		next_state = LEGUP_F_legup_memset_4_i64_BB__0_4;
LEGUP_F_legup_memset_4_i64_BB__0_4:
		next_state = LEGUP_F_legup_memset_4_i64_BB__0_5;
LEGUP_F_legup_memset_4_i64_BB__0_5:
		next_state = LEGUP_F_legup_memset_4_i64_BB__0_6;
LEGUP_F_legup_memset_4_i64_BB__0_6:
		next_state = LEGUP_F_legup_memset_4_i64_BB__0_7;
LEGUP_F_legup_memset_4_i64_BB__0_7:
		next_state = LEGUP_F_legup_memset_4_i64_BB__0_8;
LEGUP_F_legup_memset_4_i64_BB__0_8:
		next_state = LEGUP_F_legup_memset_4_i64_BB__18_9;
LEGUP_F_legup_memset_4_i64_BB__18_10:
		next_state = LEGUP_F_legup_memset_4_i64_BB__18_11;
LEGUP_F_legup_memset_4_i64_BB__18_11:
	if ((legup_memset_4_i64_18_21_reg == 1'd1))
		next_state = LEGUP_F_legup_memset_4_i64_BB__22_12;
	else if ((legup_memset_4_i64_18_21_reg == 1'd0))
		next_state = LEGUP_F_legup_memset_4_i64_BB__26_15;
LEGUP_F_legup_memset_4_i64_BB__18_9:
		next_state = LEGUP_F_legup_memset_4_i64_BB__18_10;
LEGUP_F_legup_memset_4_i64_BB__22_12:
		next_state = LEGUP_F_legup_memset_4_i64_BB__22_13;
LEGUP_F_legup_memset_4_i64_BB__22_13:
		next_state = LEGUP_F_legup_memset_4_i64_BB__22_14;
LEGUP_F_legup_memset_4_i64_BB__22_14:
		next_state = LEGUP_F_legup_memset_4_i64_BB__18_9;
LEGUP_F_legup_memset_4_i64_BB__26_15:
		next_state = LEGUP_0;
default:
	next_state = cur_state;
endcase

end
always @(*) begin
	/* legup_memset_4_i64: %0*/
	/*   %4 = load i8* %2, align 1*/
		legup_memset_4_i64_0_4 = legup_memset_4_i64_0_2_out_a;
end
always @(posedge clk) begin
	/* legup_memset_4_i64: %0*/
	/*   %4 = load i8* %2, align 1*/
	if ((cur_state == LEGUP_F_legup_memset_4_i64_BB__0_3)) begin
		legup_memset_4_i64_0_4_reg <= legup_memset_4_i64_0_4;
		if (start == 1'b0 && ^(legup_memset_4_i64_0_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_memset_4_i64_0_4_reg"); $finish; end
	end
end
always @(*) begin
	/* legup_memset_4_i64: %0*/
	/*   %5 = zext i8 %4 to i32*/
		legup_memset_4_i64_0_5 = legup_memset_4_i64_0_4;
end
always @(posedge clk) begin
	/* legup_memset_4_i64: %0*/
	/*   %5 = zext i8 %4 to i32*/
	if ((cur_state == LEGUP_F_legup_memset_4_i64_BB__0_3)) begin
		legup_memset_4_i64_0_5_reg <= legup_memset_4_i64_0_5;
		if (start == 1'b0 && ^(legup_memset_4_i64_0_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_memset_4_i64_0_5_reg"); $finish; end
	end
end
always @(*) begin
	/* legup_memset_4_i64: %0*/
	/*   %6 = load i32* %c, align 4*/
		legup_memset_4_i64_0_6 = legup_memset_4_i64_0_c_out_a;
end
always @(posedge clk) begin
	/* legup_memset_4_i64: %0*/
	/*   %6 = load i32* %c, align 4*/
	if ((cur_state == LEGUP_F_legup_memset_4_i64_BB__0_5)) begin
		legup_memset_4_i64_0_6_reg <= legup_memset_4_i64_0_6;
		if (start == 1'b0 && ^(legup_memset_4_i64_0_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_memset_4_i64_0_6_reg"); $finish; end
	end
end
always @(*) begin
	/* legup_memset_4_i64: %0*/
	/*   %7 = shl i32 %6, 8*/
		legup_memset_4_i64_0_7 = (legup_memset_4_i64_0_6 <<< (32'd8 % 32));
end
always @(posedge clk) begin
	/* legup_memset_4_i64: %0*/
	/*   %7 = shl i32 %6, 8*/
	if ((cur_state == LEGUP_F_legup_memset_4_i64_BB__0_5)) begin
		legup_memset_4_i64_0_7_reg <= legup_memset_4_i64_0_7;
		if (start == 1'b0 && ^(legup_memset_4_i64_0_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_memset_4_i64_0_7_reg"); $finish; end
	end
end
always @(*) begin
	/* legup_memset_4_i64: %0*/
	/*   %8 = load i32* %c, align 4*/
		legup_memset_4_i64_0_8 = legup_memset_4_i64_0_c_out_b;
end
always @(posedge clk) begin
	/* legup_memset_4_i64: %0*/
	/*   %8 = load i32* %c, align 4*/
	if ((cur_state == LEGUP_F_legup_memset_4_i64_BB__0_5)) begin
		legup_memset_4_i64_0_8_reg <= legup_memset_4_i64_0_8;
		if (start == 1'b0 && ^(legup_memset_4_i64_0_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_memset_4_i64_0_8_reg"); $finish; end
	end
end
always @(*) begin
	/* legup_memset_4_i64: %0*/
	/*   %9 = or i32 %8, %7*/
		legup_memset_4_i64_0_9 = (legup_memset_4_i64_0_8 | legup_memset_4_i64_0_7);
end
always @(posedge clk) begin
	/* legup_memset_4_i64: %0*/
	/*   %9 = or i32 %8, %7*/
	if ((cur_state == LEGUP_F_legup_memset_4_i64_BB__0_5)) begin
		legup_memset_4_i64_0_9_reg <= legup_memset_4_i64_0_9;
		if (start == 1'b0 && ^(legup_memset_4_i64_0_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_memset_4_i64_0_9_reg"); $finish; end
	end
end
always @(*) begin
	/* legup_memset_4_i64: %0*/
	/*   %10 = load i32* %c, align 4*/
		legup_memset_4_i64_0_10 = legup_memset_4_i64_0_c_out_a;
end
always @(posedge clk) begin
	/* legup_memset_4_i64: %0*/
	/*   %10 = load i32* %c, align 4*/
	if ((cur_state == LEGUP_F_legup_memset_4_i64_BB__0_7)) begin
		legup_memset_4_i64_0_10_reg <= legup_memset_4_i64_0_10;
		if (start == 1'b0 && ^(legup_memset_4_i64_0_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_memset_4_i64_0_10_reg"); $finish; end
	end
end
always @(*) begin
	/* legup_memset_4_i64: %0*/
	/*   %11 = shl i32 %10, 16*/
		legup_memset_4_i64_0_11 = (legup_memset_4_i64_0_10 <<< (32'd16 % 32));
end
always @(posedge clk) begin
	/* legup_memset_4_i64: %0*/
	/*   %11 = shl i32 %10, 16*/
	if ((cur_state == LEGUP_F_legup_memset_4_i64_BB__0_7)) begin
		legup_memset_4_i64_0_11_reg <= legup_memset_4_i64_0_11;
		if (start == 1'b0 && ^(legup_memset_4_i64_0_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_memset_4_i64_0_11_reg"); $finish; end
	end
end
always @(*) begin
	/* legup_memset_4_i64: %0*/
	/*   %12 = load i32* %c, align 4*/
		legup_memset_4_i64_0_12 = legup_memset_4_i64_0_c_out_b;
end
always @(posedge clk) begin
	/* legup_memset_4_i64: %0*/
	/*   %12 = load i32* %c, align 4*/
	if ((cur_state == LEGUP_F_legup_memset_4_i64_BB__0_7)) begin
		legup_memset_4_i64_0_12_reg <= legup_memset_4_i64_0_12;
		if (start == 1'b0 && ^(legup_memset_4_i64_0_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_memset_4_i64_0_12_reg"); $finish; end
	end
end
always @(*) begin
	/* legup_memset_4_i64: %0*/
	/*   %13 = or i32 %12, %11*/
		legup_memset_4_i64_0_13 = (legup_memset_4_i64_0_12 | legup_memset_4_i64_0_11);
end
always @(posedge clk) begin
	/* legup_memset_4_i64: %0*/
	/*   %13 = or i32 %12, %11*/
	if ((cur_state == LEGUP_F_legup_memset_4_i64_BB__0_7)) begin
		legup_memset_4_i64_0_13_reg <= legup_memset_4_i64_0_13;
		if (start == 1'b0 && ^(legup_memset_4_i64_0_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_memset_4_i64_0_13_reg"); $finish; end
	end
end
always @(*) begin
	/* legup_memset_4_i64: %0*/
	/*   %14 = load i8** %1, align 4*/
		legup_memset_4_i64_0_14 = legup_memset_4_i64_0_1_out_a;
end
always @(posedge clk) begin
	/* legup_memset_4_i64: %0*/
	/*   %14 = load i8** %1, align 4*/
	if ((cur_state == LEGUP_F_legup_memset_4_i64_BB__0_3)) begin
		legup_memset_4_i64_0_14_reg <= legup_memset_4_i64_0_14;
		if (start == 1'b0 && ^(legup_memset_4_i64_0_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_memset_4_i64_0_14_reg"); $finish; end
	end
end
always @(*) begin
	/* legup_memset_4_i64: %0*/
	/*   %15 = bitcast i8* %14 to i32**/
		legup_memset_4_i64_0_15 = legup_memset_4_i64_0_14;
end
always @(posedge clk) begin
	/* legup_memset_4_i64: %0*/
	/*   %15 = bitcast i8* %14 to i32**/
	if ((cur_state == LEGUP_F_legup_memset_4_i64_BB__0_3)) begin
		legup_memset_4_i64_0_15_reg <= legup_memset_4_i64_0_15;
		if (start == 1'b0 && ^(legup_memset_4_i64_0_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_memset_4_i64_0_15_reg"); $finish; end
	end
end
always @(*) begin
	/* legup_memset_4_i64: %0*/
	/*   %16 = load i64* %3, align 8*/
		legup_memset_4_i64_0_16 = legup_memset_4_i64_0_3_out_a;
end
always @(posedge clk) begin
	/* legup_memset_4_i64: %0*/
	/*   %16 = load i64* %3, align 8*/
	if ((cur_state == LEGUP_F_legup_memset_4_i64_BB__0_3)) begin
		legup_memset_4_i64_0_16_reg <= legup_memset_4_i64_0_16;
		if (start == 1'b0 && ^(legup_memset_4_i64_0_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_memset_4_i64_0_16_reg"); $finish; end
	end
end
always @(*) begin
	/* legup_memset_4_i64: %0*/
	/*   %17 = lshr i64 %16, 2*/
		legup_memset_4_i64_0_17 = (legup_memset_4_i64_0_16 >>> (64'd2 % 64'd64));
end
always @(posedge clk) begin
	/* legup_memset_4_i64: %0*/
	/*   %17 = lshr i64 %16, 2*/
	if ((cur_state == LEGUP_F_legup_memset_4_i64_BB__0_3)) begin
		legup_memset_4_i64_0_17_reg <= legup_memset_4_i64_0_17;
		if (start == 1'b0 && ^(legup_memset_4_i64_0_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_memset_4_i64_0_17_reg"); $finish; end
	end
end
always @(*) begin
	/* legup_memset_4_i64: %18*/
	/*   %19 = load i64* %3, align 8*/
		legup_memset_4_i64_18_19 = legup_memset_4_i64_0_3_out_a;
end
always @(posedge clk) begin
	/* legup_memset_4_i64: %18*/
	/*   %19 = load i64* %3, align 8*/
	if ((cur_state == LEGUP_F_legup_memset_4_i64_BB__18_10)) begin
		legup_memset_4_i64_18_19_reg <= legup_memset_4_i64_18_19;
		if (start == 1'b0 && ^(legup_memset_4_i64_18_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_memset_4_i64_18_19_reg"); $finish; end
	end
end
always @(*) begin
	/* legup_memset_4_i64: %18*/
	/*   %20 = add i64 %19, -1*/
		legup_memset_4_i64_18_20 = legup_memset_4_i64_signed_add_64_0;
end
always @(posedge clk) begin
	/* legup_memset_4_i64: %18*/
	/*   %20 = add i64 %19, -1*/
	if ((cur_state == LEGUP_F_legup_memset_4_i64_BB__18_10)) begin
		legup_memset_4_i64_18_20_reg <= legup_memset_4_i64_18_20;
		if (start == 1'b0 && ^(legup_memset_4_i64_18_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_memset_4_i64_18_20_reg"); $finish; end
	end
end
always @(*) begin
	/* legup_memset_4_i64: %18*/
	/*   %21 = icmp ne i64 %19, 0*/
		legup_memset_4_i64_18_21 = (legup_memset_4_i64_18_19 != 64'd0);
end
always @(posedge clk) begin
	/* legup_memset_4_i64: %18*/
	/*   %21 = icmp ne i64 %19, 0*/
	if ((cur_state == LEGUP_F_legup_memset_4_i64_BB__18_10)) begin
		legup_memset_4_i64_18_21_reg <= legup_memset_4_i64_18_21;
		if (start == 1'b0 && ^(legup_memset_4_i64_18_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_memset_4_i64_18_21_reg"); $finish; end
	end
end
always @(*) begin
	/* legup_memset_4_i64: %22*/
	/*   %23 = load i32* %c, align 4*/
		legup_memset_4_i64_22_23 = legup_memset_4_i64_0_c_out_a;
end
always @(posedge clk) begin
	/* legup_memset_4_i64: %22*/
	/*   %23 = load i32* %c, align 4*/
	if ((cur_state == LEGUP_F_legup_memset_4_i64_BB__22_13)) begin
		legup_memset_4_i64_22_23_reg <= legup_memset_4_i64_22_23;
		if (start == 1'b0 && ^(legup_memset_4_i64_22_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_memset_4_i64_22_23_reg"); $finish; end
	end
end
always @(*) begin
	/* legup_memset_4_i64: %22*/
	/*   %24 = load i32** %s, align 4*/
		legup_memset_4_i64_22_24 = legup_memset_4_i64_0_s_out_a;
end
always @(posedge clk) begin
	/* legup_memset_4_i64: %22*/
	/*   %24 = load i32** %s, align 4*/
	if ((cur_state == LEGUP_F_legup_memset_4_i64_BB__22_13)) begin
		legup_memset_4_i64_22_24_reg <= legup_memset_4_i64_22_24;
		if (start == 1'b0 && ^(legup_memset_4_i64_22_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_memset_4_i64_22_24_reg"); $finish; end
	end
end
always @(*) begin
	/* legup_memset_4_i64: %22*/
	/*   %gep_int = ptrtoint i32* %24 to i32*/
		legup_memset_4_i64_22_gep_int = legup_memset_4_i64_22_24;
end
always @(posedge clk) begin
	/* legup_memset_4_i64: %22*/
	/*   %gep_int = ptrtoint i32* %24 to i32*/
	if ((cur_state == LEGUP_F_legup_memset_4_i64_BB__22_13)) begin
		legup_memset_4_i64_22_gep_int_reg <= legup_memset_4_i64_22_gep_int;
		if (start == 1'b0 && ^(legup_memset_4_i64_22_gep_int) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_memset_4_i64_22_gep_int_reg"); $finish; end
	end
end
always @(*) begin
	/* legup_memset_4_i64: %22*/
	/*   %gep = add i32 %gep_int, 4*/
		legup_memset_4_i64_22_gep = legup_memset_4_i64_signed_add_32_0;
end
always @(posedge clk) begin
	/* legup_memset_4_i64: %22*/
	/*   %gep = add i32 %gep_int, 4*/
	if ((cur_state == LEGUP_F_legup_memset_4_i64_BB__22_13)) begin
		legup_memset_4_i64_22_gep_reg <= legup_memset_4_i64_22_gep;
		if (start == 1'b0 && ^(legup_memset_4_i64_22_gep) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_memset_4_i64_22_gep_reg"); $finish; end
	end
end
always @(*) begin
	/* legup_memset_4_i64: %22*/
	/*   %25 = inttoptr i32 %gep to i32**/
		legup_memset_4_i64_22_25 = legup_memset_4_i64_22_gep;
end
always @(posedge clk) begin
	/* legup_memset_4_i64: %22*/
	/*   %25 = inttoptr i32 %gep to i32**/
	if ((cur_state == LEGUP_F_legup_memset_4_i64_BB__22_13)) begin
		legup_memset_4_i64_22_25_reg <= legup_memset_4_i64_22_25;
		if (start == 1'b0 && ^(legup_memset_4_i64_22_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_memset_4_i64_22_25_reg"); $finish; end
	end
end
always @(*) begin
	legup_memset_4_i64_0_1_address_a = 1'd0;
	/* legup_memset_4_i64: %0*/
	/*   store i8* %m, i8** %1, align 4*/
	if ((cur_state == LEGUP_F_legup_memset_4_i64_BB__0_1)) begin
		legup_memset_4_i64_0_1_address_a = (1'd0 >>> 3'd2);
	end
	/* legup_memset_4_i64: %0*/
	/*   %14 = load i8** %1, align 4*/
	if ((cur_state == LEGUP_F_legup_memset_4_i64_BB__0_2)) begin
		legup_memset_4_i64_0_1_address_a = (1'd0 >>> 3'd2);
	end
end
always @(*) begin
	legup_memset_4_i64_0_1_write_enable_a = 1'd0;
	/* legup_memset_4_i64: %0*/
	/*   store i8* %m, i8** %1, align 4*/
	if ((cur_state == LEGUP_F_legup_memset_4_i64_BB__0_1)) begin
		legup_memset_4_i64_0_1_write_enable_a = 1'd1;
	end
	/* legup_memset_4_i64: %0*/
	/*   %14 = load i8** %1, align 4*/
	if ((cur_state == LEGUP_F_legup_memset_4_i64_BB__0_2)) begin
		legup_memset_4_i64_0_1_write_enable_a = 1'd0;
	end
end
always @(*) begin
	legup_memset_4_i64_0_1_in_a = 1'd0;
	/* legup_memset_4_i64: %0*/
	/*   store i8* %m, i8** %1, align 4*/
	if ((cur_state == LEGUP_F_legup_memset_4_i64_BB__0_1)) begin
		legup_memset_4_i64_0_1_in_a = arg_m;
	end
end
always @(*) begin
	legup_memset_4_i64_0_2_address_a = 1'd0;
	/* legup_memset_4_i64: %0*/
	/*   store i8 %c1, i8* %2, align 1*/
	if ((cur_state == LEGUP_F_legup_memset_4_i64_BB__0_1)) begin
		legup_memset_4_i64_0_2_address_a = (1'd0 >>> 3'd0);
	end
	/* legup_memset_4_i64: %0*/
	/*   %4 = load i8* %2, align 1*/
	if ((cur_state == LEGUP_F_legup_memset_4_i64_BB__0_2)) begin
		legup_memset_4_i64_0_2_address_a = (1'd0 >>> 3'd0);
	end
end
always @(*) begin
	legup_memset_4_i64_0_2_write_enable_a = 1'd0;
	/* legup_memset_4_i64: %0*/
	/*   store i8 %c1, i8* %2, align 1*/
	if ((cur_state == LEGUP_F_legup_memset_4_i64_BB__0_1)) begin
		legup_memset_4_i64_0_2_write_enable_a = 1'd1;
	end
	/* legup_memset_4_i64: %0*/
	/*   %4 = load i8* %2, align 1*/
	if ((cur_state == LEGUP_F_legup_memset_4_i64_BB__0_2)) begin
		legup_memset_4_i64_0_2_write_enable_a = 1'd0;
	end
end
always @(*) begin
	legup_memset_4_i64_0_2_in_a = 1'd0;
	/* legup_memset_4_i64: %0*/
	/*   store i8 %c1, i8* %2, align 1*/
	if ((cur_state == LEGUP_F_legup_memset_4_i64_BB__0_1)) begin
		legup_memset_4_i64_0_2_in_a = arg_c1;
	end
end
always @(*) begin
	legup_memset_4_i64_0_3_address_a = 1'd0;
	/* legup_memset_4_i64: %0*/
	/*   store i64 %n, i64* %3, align 8*/
	if ((cur_state == LEGUP_F_legup_memset_4_i64_BB__0_1)) begin
		legup_memset_4_i64_0_3_address_a = (1'd0 >>> 3'd3);
	end
	/* legup_memset_4_i64: %0*/
	/*   %16 = load i64* %3, align 8*/
	if ((cur_state == LEGUP_F_legup_memset_4_i64_BB__0_2)) begin
		legup_memset_4_i64_0_3_address_a = (1'd0 >>> 3'd3);
	end
	/* legup_memset_4_i64: %0*/
	/*   store i64 %17, i64* %3, align 8*/
	if ((cur_state == LEGUP_F_legup_memset_4_i64_BB__0_3)) begin
		legup_memset_4_i64_0_3_address_a = (1'd0 >>> 3'd3);
	end
	/* legup_memset_4_i64: %18*/
	/*   %19 = load i64* %3, align 8*/
	if ((cur_state == LEGUP_F_legup_memset_4_i64_BB__18_9)) begin
		legup_memset_4_i64_0_3_address_a = (1'd0 >>> 3'd3);
	end
	/* legup_memset_4_i64: %18*/
	/*   store i64 %20, i64* %3, align 8*/
	if ((cur_state == LEGUP_F_legup_memset_4_i64_BB__18_10)) begin
		legup_memset_4_i64_0_3_address_a = (1'd0 >>> 3'd3);
	end
end
always @(*) begin
	legup_memset_4_i64_0_3_write_enable_a = 1'd0;
	/* legup_memset_4_i64: %0*/
	/*   store i64 %n, i64* %3, align 8*/
	if ((cur_state == LEGUP_F_legup_memset_4_i64_BB__0_1)) begin
		legup_memset_4_i64_0_3_write_enable_a = 1'd1;
	end
	/* legup_memset_4_i64: %0*/
	/*   %16 = load i64* %3, align 8*/
	if ((cur_state == LEGUP_F_legup_memset_4_i64_BB__0_2)) begin
		legup_memset_4_i64_0_3_write_enable_a = 1'd0;
	end
	/* legup_memset_4_i64: %0*/
	/*   store i64 %17, i64* %3, align 8*/
	if ((cur_state == LEGUP_F_legup_memset_4_i64_BB__0_3)) begin
		legup_memset_4_i64_0_3_write_enable_a = 1'd1;
	end
	/* legup_memset_4_i64: %18*/
	/*   %19 = load i64* %3, align 8*/
	if ((cur_state == LEGUP_F_legup_memset_4_i64_BB__18_9)) begin
		legup_memset_4_i64_0_3_write_enable_a = 1'd0;
	end
	/* legup_memset_4_i64: %18*/
	/*   store i64 %20, i64* %3, align 8*/
	if ((cur_state == LEGUP_F_legup_memset_4_i64_BB__18_10)) begin
		legup_memset_4_i64_0_3_write_enable_a = 1'd1;
	end
end
always @(*) begin
	legup_memset_4_i64_0_3_in_a = 1'd0;
	/* legup_memset_4_i64: %0*/
	/*   store i64 %n, i64* %3, align 8*/
	if ((cur_state == LEGUP_F_legup_memset_4_i64_BB__0_1)) begin
		legup_memset_4_i64_0_3_in_a = arg_n;
	end
	/* legup_memset_4_i64: %0*/
	/*   store i64 %17, i64* %3, align 8*/
	if ((cur_state == LEGUP_F_legup_memset_4_i64_BB__0_3)) begin
		legup_memset_4_i64_0_3_in_a = legup_memset_4_i64_0_17;
	end
	/* legup_memset_4_i64: %18*/
	/*   store i64 %20, i64* %3, align 8*/
	if ((cur_state == LEGUP_F_legup_memset_4_i64_BB__18_10)) begin
		legup_memset_4_i64_0_3_in_a = legup_memset_4_i64_18_20;
	end
end
always @(*) begin
	legup_memset_4_i64_0_c_address_a = 1'd0;
	/* legup_memset_4_i64: %0*/
	/*   store i32 %5, i32* %c, align 4*/
	if ((cur_state == LEGUP_F_legup_memset_4_i64_BB__0_3)) begin
		legup_memset_4_i64_0_c_address_a = (1'd0 >>> 3'd2);
	end
	/* legup_memset_4_i64: %0*/
	/*   %6 = load i32* %c, align 4*/
	if ((cur_state == LEGUP_F_legup_memset_4_i64_BB__0_4)) begin
		legup_memset_4_i64_0_c_address_a = (1'd0 >>> 3'd2);
	end
	/* legup_memset_4_i64: %0*/
	/*   store i32 %9, i32* %c, align 4*/
	if ((cur_state == LEGUP_F_legup_memset_4_i64_BB__0_5)) begin
		legup_memset_4_i64_0_c_address_a = (1'd0 >>> 3'd2);
	end
	/* legup_memset_4_i64: %0*/
	/*   %10 = load i32* %c, align 4*/
	if ((cur_state == LEGUP_F_legup_memset_4_i64_BB__0_6)) begin
		legup_memset_4_i64_0_c_address_a = (1'd0 >>> 3'd2);
	end
	/* legup_memset_4_i64: %0*/
	/*   store i32 %13, i32* %c, align 4*/
	if ((cur_state == LEGUP_F_legup_memset_4_i64_BB__0_7)) begin
		legup_memset_4_i64_0_c_address_a = (1'd0 >>> 3'd2);
	end
	/* legup_memset_4_i64: %22*/
	/*   %23 = load i32* %c, align 4*/
	if ((cur_state == LEGUP_F_legup_memset_4_i64_BB__22_12)) begin
		legup_memset_4_i64_0_c_address_a = (1'd0 >>> 3'd2);
	end
end
always @(*) begin
	legup_memset_4_i64_0_c_write_enable_a = 1'd0;
	/* legup_memset_4_i64: %0*/
	/*   store i32 %5, i32* %c, align 4*/
	if ((cur_state == LEGUP_F_legup_memset_4_i64_BB__0_3)) begin
		legup_memset_4_i64_0_c_write_enable_a = 1'd1;
	end
	/* legup_memset_4_i64: %0*/
	/*   %6 = load i32* %c, align 4*/
	if ((cur_state == LEGUP_F_legup_memset_4_i64_BB__0_4)) begin
		legup_memset_4_i64_0_c_write_enable_a = 1'd0;
	end
	/* legup_memset_4_i64: %0*/
	/*   store i32 %9, i32* %c, align 4*/
	if ((cur_state == LEGUP_F_legup_memset_4_i64_BB__0_5)) begin
		legup_memset_4_i64_0_c_write_enable_a = 1'd1;
	end
	/* legup_memset_4_i64: %0*/
	/*   %10 = load i32* %c, align 4*/
	if ((cur_state == LEGUP_F_legup_memset_4_i64_BB__0_6)) begin
		legup_memset_4_i64_0_c_write_enable_a = 1'd0;
	end
	/* legup_memset_4_i64: %0*/
	/*   store i32 %13, i32* %c, align 4*/
	if ((cur_state == LEGUP_F_legup_memset_4_i64_BB__0_7)) begin
		legup_memset_4_i64_0_c_write_enable_a = 1'd1;
	end
	/* legup_memset_4_i64: %22*/
	/*   %23 = load i32* %c, align 4*/
	if ((cur_state == LEGUP_F_legup_memset_4_i64_BB__22_12)) begin
		legup_memset_4_i64_0_c_write_enable_a = 1'd0;
	end
end
always @(*) begin
	legup_memset_4_i64_0_c_in_a = 1'd0;
	/* legup_memset_4_i64: %0*/
	/*   store i32 %5, i32* %c, align 4*/
	if ((cur_state == LEGUP_F_legup_memset_4_i64_BB__0_3)) begin
		legup_memset_4_i64_0_c_in_a = legup_memset_4_i64_0_5;
	end
	/* legup_memset_4_i64: %0*/
	/*   store i32 %9, i32* %c, align 4*/
	if ((cur_state == LEGUP_F_legup_memset_4_i64_BB__0_5)) begin
		legup_memset_4_i64_0_c_in_a = legup_memset_4_i64_0_9;
	end
	/* legup_memset_4_i64: %0*/
	/*   store i32 %13, i32* %c, align 4*/
	if ((cur_state == LEGUP_F_legup_memset_4_i64_BB__0_7)) begin
		legup_memset_4_i64_0_c_in_a = legup_memset_4_i64_0_13;
	end
end
always @(*) begin
	legup_memset_4_i64_0_c_address_b = 1'd0;
	/* legup_memset_4_i64: %0*/
	/*   %8 = load i32* %c, align 4*/
	if ((cur_state == LEGUP_F_legup_memset_4_i64_BB__0_4)) begin
		legup_memset_4_i64_0_c_address_b = (1'd0 >>> 3'd2);
	end
	/* legup_memset_4_i64: %0*/
	/*   %12 = load i32* %c, align 4*/
	if ((cur_state == LEGUP_F_legup_memset_4_i64_BB__0_6)) begin
		legup_memset_4_i64_0_c_address_b = (1'd0 >>> 3'd2);
	end
end
always @(*) begin
	legup_memset_4_i64_0_c_write_enable_b = 1'd0;
	/* legup_memset_4_i64: %0*/
	/*   %8 = load i32* %c, align 4*/
	if ((cur_state == LEGUP_F_legup_memset_4_i64_BB__0_4)) begin
		legup_memset_4_i64_0_c_write_enable_b = 1'd0;
	end
	/* legup_memset_4_i64: %0*/
	/*   %12 = load i32* %c, align 4*/
	if ((cur_state == LEGUP_F_legup_memset_4_i64_BB__0_6)) begin
		legup_memset_4_i64_0_c_write_enable_b = 1'd0;
	end
end
always @(*) begin
	legup_memset_4_i64_0_s_address_a = 1'd0;
	/* legup_memset_4_i64: %0*/
	/*   store i32* %15, i32** %s, align 4*/
	if ((cur_state == LEGUP_F_legup_memset_4_i64_BB__0_3)) begin
		legup_memset_4_i64_0_s_address_a = (1'd0 >>> 3'd2);
	end
	/* legup_memset_4_i64: %22*/
	/*   %24 = load i32** %s, align 4*/
	if ((cur_state == LEGUP_F_legup_memset_4_i64_BB__22_12)) begin
		legup_memset_4_i64_0_s_address_a = (1'd0 >>> 3'd2);
	end
	/* legup_memset_4_i64: %22*/
	/*   store i32 %23, i32* %24, align 4*/
	if ((cur_state == LEGUP_F_legup_memset_4_i64_BB__22_13)) begin
		legup_memset_4_i64_0_s_address_a = (legup_memset_4_i64_22_24 >>> 3'd2);
	end
end
always @(*) begin
	legup_memset_4_i64_0_s_write_enable_a = 1'd0;
	/* legup_memset_4_i64: %0*/
	/*   store i32* %15, i32** %s, align 4*/
	if ((cur_state == LEGUP_F_legup_memset_4_i64_BB__0_3)) begin
		legup_memset_4_i64_0_s_write_enable_a = 1'd1;
	end
	/* legup_memset_4_i64: %22*/
	/*   %24 = load i32** %s, align 4*/
	if ((cur_state == LEGUP_F_legup_memset_4_i64_BB__22_12)) begin
		legup_memset_4_i64_0_s_write_enable_a = 1'd0;
	end
	/* legup_memset_4_i64: %22*/
	/*   store i32 %23, i32* %24, align 4*/
	if ((cur_state == LEGUP_F_legup_memset_4_i64_BB__22_13)) begin
		legup_memset_4_i64_0_s_write_enable_a = 1'd1;
	end
end
always @(*) begin
	legup_memset_4_i64_0_s_in_a = 1'd0;
	/* legup_memset_4_i64: %0*/
	/*   store i32* %15, i32** %s, align 4*/
	if ((cur_state == LEGUP_F_legup_memset_4_i64_BB__0_3)) begin
		legup_memset_4_i64_0_s_in_a = legup_memset_4_i64_0_15;
	end
	/* legup_memset_4_i64: %22*/
	/*   store i32 %23, i32* %24, align 4*/
	if ((cur_state == LEGUP_F_legup_memset_4_i64_BB__22_13)) begin
		legup_memset_4_i64_0_s_in_a = legup_memset_4_i64_22_23;
	end
end
always @(*) begin
	legup_memset_4_i64_0_s_address_b = 1'd0;
	/* legup_memset_4_i64: %22*/
	/*   store i32* %25, i32** %s, align 4*/
	if ((cur_state == LEGUP_F_legup_memset_4_i64_BB__22_13)) begin
		legup_memset_4_i64_0_s_address_b = (1'd0 >>> 3'd2);
	end
end
always @(*) begin
	legup_memset_4_i64_0_s_write_enable_b = 1'd0;
	/* legup_memset_4_i64: %22*/
	/*   store i32* %25, i32** %s, align 4*/
	if ((cur_state == LEGUP_F_legup_memset_4_i64_BB__22_13)) begin
		legup_memset_4_i64_0_s_write_enable_b = 1'd1;
	end
end
always @(*) begin
	legup_memset_4_i64_0_s_in_b = 1'd0;
	/* legup_memset_4_i64: %22*/
	/*   store i32* %25, i32** %s, align 4*/
	if ((cur_state == LEGUP_F_legup_memset_4_i64_BB__22_13)) begin
		legup_memset_4_i64_0_s_in_b = legup_memset_4_i64_22_25;
	end
end
always @(*) begin
	/* legup_memset_4_i64: %18*/
	/*   %20 = add i64 %19, -1*/
		legup_memset_4_i64_signed_add_64_0_op0 = legup_memset_4_i64_18_19;
end
always @(*) begin
	/* legup_memset_4_i64: %18*/
	/*   %20 = add i64 %19, -1*/
if (reset) begin legup_memset_4_i64_signed_add_64_0_op1 = 0; end
		legup_memset_4_i64_signed_add_64_0_op1 = -64'd1;
end
always @(*) begin
	legup_memset_4_i64_signed_add_64_0 = (legup_memset_4_i64_signed_add_64_0_op0 + legup_memset_4_i64_signed_add_64_0_op1);
end
always @(*) begin
	/* legup_memset_4_i64: %22*/
	/*   %gep = add i32 %gep_int, 4*/
		legup_memset_4_i64_signed_add_32_0_op0 = legup_memset_4_i64_22_gep_int;
end
always @(*) begin
	/* legup_memset_4_i64: %22*/
	/*   %gep = add i32 %gep_int, 4*/
if (reset) begin legup_memset_4_i64_signed_add_32_0_op1 = 0; end
		legup_memset_4_i64_signed_add_32_0_op1 = 32'd4;
end
always @(*) begin
	legup_memset_4_i64_signed_add_32_0 = (legup_memset_4_i64_signed_add_32_0_op0 + legup_memset_4_i64_signed_add_32_0_op1);
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		finish <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
	/* legup_memset_4_i64: %26*/
	/*   ret void*/
	if ((cur_state == LEGUP_F_legup_memset_4_i64_BB__26_15)) begin
		finish <= (memory_controller_waitrequest == 1'd0);
		if (start == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
end
always @(*) begin
	memory_controller_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_address_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_write_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_size_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_address_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_write_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_size_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_b = 1'd0;
	end
end

endmodule 
`timescale 1 ns / 1 ns
module main
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_waitrequest,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	return_val
);

parameter [7:0] LEGUP_0 = 8'd0;
parameter [7:0] LEGUP_F_main_BB__0_1 = 8'd1;
parameter [7:0] LEGUP_F_main_BB__0_2 = 8'd2;
parameter [7:0] LEGUP_F_main_BB__0_3 = 8'd3;
parameter [7:0] LEGUP_F_main_BB__0_4 = 8'd4;
parameter [7:0] LEGUP_F_main_BB__0_5 = 8'd5;
parameter [7:0] LEGUP_F_main_BB__0_6 = 8'd6;
parameter [7:0] LEGUP_F_main_BB__0_7 = 8'd7;
parameter [7:0] LEGUP_F_main_BB__0_8 = 8'd8;
parameter [7:0] LEGUP_F_main_BB__0_9 = 8'd9;
parameter [7:0] LEGUP_F_main_BB__0_10 = 8'd10;
parameter [7:0] LEGUP_F_main_BB__0_11 = 8'd11;
parameter [7:0] LEGUP_F_main_BB__0_12 = 8'd12;
parameter [7:0] LEGUP_F_main_BB__0_13 = 8'd13;
parameter [7:0] LEGUP_F_main_BB__0_14 = 8'd14;
parameter [7:0] LEGUP_F_main_BB__0_15 = 8'd15;
parameter [7:0] LEGUP_F_main_BB__0_16 = 8'd16;
parameter [7:0] LEGUP_F_main_BB__0_17 = 8'd17;
parameter [7:0] LEGUP_F_main_BB__0_18 = 8'd18;
parameter [7:0] LEGUP_F_main_BB__0_19 = 8'd19;
parameter [7:0] LEGUP_F_main_BB__0_20 = 8'd20;
parameter [7:0] LEGUP_F_main_BB__0_21 = 8'd21;
parameter [7:0] LEGUP_F_main_BB__0_22 = 8'd22;
parameter [7:0] LEGUP_F_main_BB__0_23 = 8'd23;
parameter [7:0] LEGUP_F_main_BB__0_24 = 8'd24;
parameter [7:0] LEGUP_F_main_BB__0_25 = 8'd25;
parameter [7:0] LEGUP_F_main_BB__0_27 = 8'd27;
parameter [7:0] LEGUP_F_main_BB__1_28 = 8'd28;
parameter [7:0] LEGUP_F_main_BB__1_29 = 8'd29;
parameter [7:0] LEGUP_F_main_BB__1_30 = 8'd30;
parameter [7:0] LEGUP_F_main_BB__1_31 = 8'd31;
parameter [7:0] LEGUP_F_main_BB__1_32 = 8'd32;
parameter [7:0] LEGUP_F_main_BB__1_33 = 8'd33;
parameter [7:0] LEGUP_F_main_BB__1_34 = 8'd34;
parameter [7:0] LEGUP_F_main_BB__1_35 = 8'd35;
parameter [7:0] LEGUP_F_main_BB__1_36 = 8'd36;
parameter [7:0] LEGUP_F_main_BB__1_37 = 8'd37;
parameter [7:0] LEGUP_F_main_BB__1_38 = 8'd38;
parameter [7:0] LEGUP_F_main_BB__1_39 = 8'd39;
parameter [7:0] LEGUP_F_main_BB__1_40 = 8'd40;
parameter [7:0] LEGUP_F_main_BB__1_41 = 8'd41;
parameter [7:0] LEGUP_F_main_BB__1_42 = 8'd42;
parameter [7:0] LEGUP_F_main_BB__96_43 = 8'd43;
parameter [7:0] LEGUP_F_main_BB__98_44 = 8'd44;
parameter [7:0] LEGUP_F_main_BB__98_45 = 8'd45;
parameter [7:0] LEGUP_F_main_BB__98_46 = 8'd46;
parameter [7:0] LEGUP_F_main_BB__98_47 = 8'd47;
parameter [7:0] LEGUP_F_main_BB_quantlexiti_48 = 8'd48;
parameter [7:0] LEGUP_F_main_BB_quantlexiti_49 = 8'd49;
parameter [7:0] LEGUP_F_main_BB_quantlexiti_50 = 8'd50;
parameter [7:0] LEGUP_F_main_BB_quantlexiti_51 = 8'd51;
parameter [7:0] LEGUP_F_main_BB_quantlexiti_52 = 8'd52;
parameter [7:0] LEGUP_F_main_BB_quantlexiti_53 = 8'd53;
parameter [7:0] LEGUP_F_main_BB_quantlexiti_54 = 8'd54;
parameter [7:0] LEGUP_F_main_BB_quantlexiti_55 = 8'd55;
parameter [7:0] LEGUP_F_main_BB_quantlexiti_56 = 8'd56;
parameter [7:0] LEGUP_F_main_BB_quantlexiti_58 = 8'd58;
parameter [7:0] LEGUP_F_main_BB_quantlexiti_59 = 8'd59;
parameter [7:0] LEGUP_F_main_BB_quantlexiti_60 = 8'd60;
parameter [7:0] LEGUP_F_main_BB_quantlexiti_61 = 8'd61;
parameter [7:0] LEGUP_F_main_BB_quantlexiti_62 = 8'd62;
parameter [7:0] LEGUP_F_main_BB_quantlexiti_63 = 8'd63;
parameter [7:0] LEGUP_F_main_BB_quantlexiti_64 = 8'd64;
parameter [7:0] LEGUP_F_main_BB_quantlexiti_65 = 8'd65;
parameter [7:0] LEGUP_F_main_BB_quantlexiti_66 = 8'd66;
parameter [7:0] LEGUP_F_main_BB_quantlexiti_67 = 8'd67;
parameter [7:0] LEGUP_F_main_BB_quantlexiti_68 = 8'd68;
parameter [7:0] LEGUP_F_main_BB_quantlexiti_69 = 8'd69;
parameter [7:0] LEGUP_F_main_BB_quantlexiti_70 = 8'd70;
parameter [7:0] LEGUP_F_main_BB_quantlexiti_71 = 8'd71;
parameter [7:0] LEGUP_F_main_BB_quantlexiti_72 = 8'd72;
parameter [7:0] LEGUP_F_main_BB_quantlexiti_73 = 8'd73;
parameter [7:0] LEGUP_F_main_BB_quantlexiti_74 = 8'd74;
parameter [7:0] LEGUP_F_main_BB_quantlexiti_75 = 8'd75;
parameter [7:0] LEGUP_F_main_BB_quantlexiti_76 = 8'd76;
parameter [7:0] LEGUP_F_main_BB_quantlexiti_77 = 8'd77;
parameter [7:0] LEGUP_F_main_BB_quantlexiti_79 = 8'd79;
parameter [7:0] LEGUP_F_main_BB_quantlexiti_80 = 8'd80;
parameter [7:0] LEGUP_F_main_BB_quantlexiti_81 = 8'd81;
parameter [7:0] LEGUP_F_main_BB_quantlexiti_82 = 8'd82;
parameter [7:0] LEGUP_F_main_BB_quantlexiti_83 = 8'd83;
parameter [7:0] LEGUP_F_main_BB_quantlexiti_84 = 8'd84;
parameter [7:0] LEGUP_F_main_BB_encodeexit_crit_edge_85 = 8'd85;
parameter [7:0] LEGUP_F_main_BB_encodeexit_crit_edge_86 = 8'd86;
parameter [7:0] LEGUP_F_main_BB_encodeexit_crit_edge_87 = 8'd87;
parameter [7:0] LEGUP_F_main_BB_encodeexit_crit_edge_88 = 8'd88;
parameter [7:0] LEGUP_F_main_BB_encodeexit_crit_edge_89 = 8'd89;
parameter [7:0] LEGUP_F_main_BB_encodeexit_crit_edge_90 = 8'd90;
parameter [7:0] LEGUP_F_main_BB_encodeexit_crit_edge_91 = 8'd91;
parameter [7:0] LEGUP_F_main_BB_encodeexit_crit_edge_92 = 8'd92;
parameter [7:0] LEGUP_F_main_BB_encodeexit_crit_edge_93 = 8'd93;
parameter [7:0] LEGUP_F_main_BB_encodeexit_crit_edge_94 = 8'd94;
parameter [7:0] LEGUP_F_main_BB_encodeexit_crit_edge_95 = 8'd95;
parameter [7:0] LEGUP_F_main_BB_encodeexit_crit_edge_96 = 8'd96;
parameter [7:0] LEGUP_F_main_BB_encodeexit_crit_edge_97 = 8'd97;
parameter [7:0] LEGUP_F_main_BB_preheaderipreheader_98 = 8'd98;
parameter [7:0] LEGUP_F_main_BB_preheaderipreheader_99 = 8'd99;
parameter [7:0] LEGUP_F_main_BB_preheaderipreheader_100 = 8'd100;
parameter [7:0] LEGUP_F_main_BB_preheaderi_101 = 8'd101;
parameter [7:0] LEGUP_F_main_BB_preheaderi_102 = 8'd102;
parameter [7:0] LEGUP_F_main_BB_preheaderi_103 = 8'd103;
parameter [7:0] LEGUP_F_main_BB_preheaderi_104 = 8'd104;
parameter [7:0] LEGUP_F_main_BB_preheaderi_105 = 8'd105;
parameter [7:0] LEGUP_F_main_BB_preheaderi_106 = 8'd106;
parameter [7:0] LEGUP_F_main_BB_preheaderi_107 = 8'd107;
parameter [7:0] LEGUP_F_main_BB_preheaderi_108 = 8'd108;
parameter [7:0] LEGUP_F_main_BB_preheaderi_109 = 8'd109;
parameter [7:0] LEGUP_F_main_BB_preheaderi_110 = 8'd110;
parameter [7:0] LEGUP_F_main_BB_preheaderi_111 = 8'd111;
parameter [7:0] LEGUP_F_main_BB_preheaderi_112 = 8'd112;
parameter [7:0] LEGUP_F_main_BB_preheaderi_113 = 8'd113;
parameter [7:0] LEGUP_F_main_BB_preheaderi_114 = 8'd114;
parameter [7:0] LEGUP_F_main_BB_preheaderi_115 = 8'd115;
parameter [7:0] LEGUP_F_main_BB_preheaderi_116 = 8'd116;
parameter [7:0] LEGUP_F_main_BB_preheaderi_117 = 8'd117;
parameter [7:0] LEGUP_F_main_BB_preheaderi_118 = 8'd118;
parameter [7:0] LEGUP_F_main_BB_preheaderi_119 = 8'd119;
parameter [7:0] LEGUP_F_main_BB_preheaderi_120 = 8'd120;
parameter [7:0] LEGUP_F_main_BB_preheaderi_121 = 8'd121;
parameter [7:0] LEGUP_F_main_BB_preheaderi_122 = 8'd122;
parameter [7:0] LEGUP_F_main_BB_preheaderi_123 = 8'd123;
parameter [7:0] LEGUP_F_main_BB_preheaderi_124 = 8'd124;
parameter [7:0] LEGUP_F_main_BB_preheaderi_125 = 8'd125;
parameter [7:0] LEGUP_F_main_BB_preheaderi_126 = 8'd126;
parameter [7:0] LEGUP_F_main_BB_preheaderi_127 = 8'd127;
parameter [7:0] LEGUP_F_main_BB_preheaderi_128 = 8'd128;
parameter [7:0] LEGUP_F_main_BB_preheaderi_129 = 8'd129;
parameter [7:0] LEGUP_F_main_BB_preheaderi_130 = 8'd130;
parameter [7:0] LEGUP_F_main_BB_preheaderi_131 = 8'd131;
parameter [7:0] LEGUP_F_main_BB_preheaderi_132 = 8'd132;
parameter [7:0] LEGUP_F_main_BB_preheaderi_133 = 8'd133;
parameter [7:0] LEGUP_F_main_BB_preheaderi_134 = 8'd134;
parameter [7:0] LEGUP_F_main_BB_preheaderi_135 = 8'd135;
parameter [7:0] LEGUP_F_main_BB_preheaderi_136 = 8'd136;
parameter [7:0] LEGUP_F_main_BB_preheaderi_137 = 8'd137;
parameter [7:0] LEGUP_F_main_BB_preheaderi_138 = 8'd138;
parameter [7:0] LEGUP_F_main_BB_preheaderi_139 = 8'd139;
parameter [7:0] LEGUP_F_main_BB_preheaderi_140 = 8'd140;
parameter [7:0] LEGUP_F_main_BB_preheaderi_142 = 8'd142;
parameter [7:0] LEGUP_F_main_BB_preheaderi_143 = 8'd143;
parameter [7:0] LEGUP_F_main_BB_preheaderi_144 = 8'd144;
parameter [7:0] LEGUP_F_main_BB_preheaderi_145 = 8'd145;
parameter [7:0] LEGUP_F_main_BB_preheaderi_146 = 8'd146;
parameter [7:0] LEGUP_F_main_BB_preheaderi_147 = 8'd147;
parameter [7:0] LEGUP_F_main_BB_preheaderi_148 = 8'd148;
parameter [7:0] LEGUP_F_main_BB_preheaderi_149 = 8'd149;
parameter [7:0] LEGUP_F_main_BB_preheaderi_150 = 8'd150;
parameter [7:0] LEGUP_F_main_BB_preheaderi_151 = 8'd151;
parameter [7:0] LEGUP_F_main_BB_preheaderi_152 = 8'd152;
parameter [7:0] LEGUP_F_main_BB_preheaderi_153 = 8'd153;
parameter [7:0] LEGUP_F_main_BB_preheaderi_154 = 8'd154;
parameter [7:0] LEGUP_F_main_BB_preheaderi_156 = 8'd156;
parameter [7:0] LEGUP_F_main_BB_preheaderi_157 = 8'd157;
parameter [7:0] LEGUP_F_main_BB_preheaderi_158 = 8'd158;
parameter [7:0] LEGUP_F_main_BB_preheaderi_159 = 8'd159;
parameter [7:0] LEGUP_F_main_BB_adpcm_mainexit_160 = 8'd160;
parameter [7:0] LEGUP_F_main_BB_adpcm_mainexit_161 = 8'd161;
parameter [7:0] LEGUP_F_main_BB_adpcm_mainexit_162 = 8'd162;
parameter [7:0] LEGUP_F_main_BB_preheader_163 = 8'd163;
parameter [7:0] LEGUP_F_main_BB_preheader_164 = 8'd164;
parameter [7:0] LEGUP_F_main_BB_preheader_165 = 8'd165;
parameter [7:0] LEGUP_F_main_BB__525_166 = 8'd166;
parameter [7:0] LEGUP_F_main_BB__528_167 = 8'd167;
parameter [7:0] LEGUP_F_main_BB__530_168 = 8'd168;
parameter [7:0] LEGUP_F_main_BB__532_169 = 8'd169;
parameter [8:0] tag_offset = 9'd0;
parameter [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tag_addr_offset = {tag_offset, 23'd0};
parameter [7:0] LEGUP_function_call_26 = 8'd26;
parameter [7:0] LEGUP_function_call_57 = 8'd57;
parameter [7:0] LEGUP_function_call_78 = 8'd78;
parameter [7:0] LEGUP_function_call_141 = 8'd141;
parameter [7:0] LEGUP_function_call_155 = 8'd155;

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
input  memory_controller_waitrequest;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
output reg [31:0] return_val;
reg [7:0] cur_state;
reg [7:0] next_state;
reg [31:0] main_1_2;
reg [31:0] main_1_2_reg;
reg [31:0] main_1_3;
reg [31:0] main_1_3_reg;
reg [31:0] main_1_4;
reg [31:0] main_1_4_reg;
reg [31:0] main_1_5;
reg [31:0] main_1_5_reg;
reg [31:0] main_1_6;
reg [31:0] main_1_6_reg;
reg [31:0] main_1_7;
reg [31:0] main_1_7_reg;
reg [31:0] main_1_8;
reg [31:0] main_1_8_reg;
reg [31:0] main_1_9;
reg [31:0] main_1_9_reg;
reg [31:0] main_1_10;
reg [31:0] main_1_10_reg;
reg [31:0] main_1_11;
reg [31:0] main_1_11_reg;
reg [31:0] main_1_12;
reg [31:0] main_1_12_reg;
reg [31:0] main_1_13;
reg [31:0] main_1_13_reg;
reg [31:0] main_1_14;
reg [31:0] main_1_14_reg;
reg [31:0] main_1_15;
reg [31:0] main_1_15_reg;
reg [31:0] main_1_16;
reg [31:0] main_1_16_reg;
reg [31:0] main_1_17;
reg [31:0] main_1_17_reg;
reg [31:0] main_1_18;
reg [31:0] main_1_18_reg;
reg [31:0] main_1_19;
reg [31:0] main_1_19_reg;
reg [31:0] main_1_20;
reg [31:0] main_1_20_reg;
reg [31:0] main_1_21;
reg [31:0] main_1_21_reg;
reg [31:0] main_1_22;
reg [31:0] main_1_22_reg;
reg [31:0] main_1_23;
reg [31:0] main_1_23_reg;
reg [31:0] main_1_24;
reg [31:0] main_1_24_reg;
reg [31:0] main_1_25;
reg [31:0] main_1_25_reg;
reg [31:0] main_1_26;
reg [31:0] main_1_26_reg;
reg [31:0] main_1_27;
reg [31:0] main_1_27_reg;
reg [31:0] main_1_28;
reg [31:0] main_1_28_reg;
reg [31:0] main_1_29;
reg [31:0] main_1_29_reg;
reg [31:0] main_1_30;
reg [31:0] main_1_30_reg;
reg [31:0] main_1_31;
reg [31:0] main_1_31_reg;
reg [31:0] main_1_32;
reg [31:0] main_1_32_reg;
reg [31:0] main_1_33;
reg [31:0] main_1_33_reg;
reg [31:0] main_1_34;
reg [31:0] main_1_34_reg;
reg [31:0] main_1_35;
reg [31:0] main_1_35_reg;
reg [31:0] main_1_36;
reg [31:0] main_1_36_reg;
reg [31:0] main_1_ph20;
reg [31:0] main_1_ph20_reg;
reg [31:0] main_1_ph10;
reg [31:0] main_1_ph10_reg;
reg [31:0] main_1_nbh0;
reg [31:0] main_1_nbh0_reg;
reg [31:0] main_1_deth0;
reg [31:0] main_1_deth0_reg;
reg [31:0] main_1_ah20;
reg [31:0] main_1_ah20_reg;
reg [31:0] main_1_rh20;
reg [31:0] main_1_rh20_reg;
reg [31:0] main_1_ah10;
reg [31:0] main_1_ah10_reg;
reg [31:0] main_1_rh10;
reg [31:0] main_1_rh10_reg;
reg [31:0] main_1_plt20;
reg [31:0] main_1_plt20_reg;
reg [31:0] main_1_plt10;
reg [31:0] main_1_plt10_reg;
reg [31:0] main_1_nbl0;
reg [31:0] main_1_nbl0_reg;
reg [31:0] main_1_detl0;
reg [31:0] main_1_detl0_reg;
reg [31:0] main_1_al20;
reg [31:0] main_1_al20_reg;
reg [31:0] main_1_rlt20;
reg [31:0] main_1_rlt20_reg;
reg [31:0] main_1_al10;
reg [31:0] main_1_al10_reg;
reg [31:0] main_1_rlt10;
reg [31:0] main_1_rlt10_reg;
reg [31:0] main_1_i02i;
reg [31:0] main_1_i02i_reg;
reg [31:0] main_1_gep_int;
reg [31:0] main_1_gep_int_reg;
reg [31:0] main_1_gep_array;
reg [31:0] main_1_gep_array_reg;
reg [31:0] main_1_gep;
reg [31:0] main_1_gep_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_37;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_37_reg;
reg [31:0] main_1_38;
reg [31:0] main_1_38_reg;
reg [31:0] main_1_39;
reg [31:0] main_1_39_reg;
reg [31:0] main_1_gep_int1;
reg [31:0] main_1_gep_int1_reg;
reg [31:0] main_1_gep_array2;
reg [31:0] main_1_gep_array2_reg;
reg [31:0] main_1_gep3;
reg [31:0] main_1_gep3_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_40;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_40_reg;
reg [31:0] main_1_41;
reg [31:0] main_1_41_reg;
reg [31:0] main_1_42;
reg [31:0] main_1_42_reg;
reg [31:0] main_1_43;
reg [31:0] main_1_43_reg;
reg [31:0] main_1_44;
reg [31:0] main_1_44_reg;
reg [31:0] main_1_45;
reg [31:0] main_1_45_reg;
reg [31:0] main_1_46;
reg [31:0] main_1_46_reg;
reg [31:0] main_1_47;
reg [31:0] main_1_47_reg;
reg [31:0] main_1_48;
reg [31:0] main_1_48_reg;
reg [31:0] main_1_49;
reg [31:0] main_1_49_reg;
reg [31:0] main_1_50;
reg [31:0] main_1_50_reg;
reg [31:0] main_1_51;
reg [31:0] main_1_51_reg;
reg [31:0] main_1_52;
reg [31:0] main_1_52_reg;
reg [31:0] main_1_53;
reg [31:0] main_1_53_reg;
reg [31:0] main_1_54;
reg [31:0] main_1_54_reg;
reg [31:0] main_1_55;
reg [31:0] main_1_55_reg;
reg [31:0] main_1_56;
reg [31:0] main_1_56_reg;
reg [31:0] main_1_57;
reg [31:0] main_1_57_reg;
reg [31:0] main_1_58;
reg [31:0] main_1_58_reg;
reg [31:0] main_1_59;
reg [31:0] main_1_59_reg;
reg [31:0] main_1_60;
reg [31:0] main_1_60_reg;
reg [31:0] main_1_61;
reg [31:0] main_1_61_reg;
reg [31:0] main_1_62;
reg [31:0] main_1_62_reg;
reg [31:0] main_1_63;
reg [31:0] main_1_63_reg;
reg [31:0] main_1_64;
reg [31:0] main_1_64_reg;
reg [31:0] main_1_65;
reg [31:0] main_1_65_reg;
reg [31:0] main_1_66;
reg [31:0] main_1_66_reg;
reg [31:0] main_1_67;
reg [31:0] main_1_67_reg;
reg [31:0] main_1_68;
reg [31:0] main_1_68_reg;
reg [31:0] main_1_69;
reg [31:0] main_1_69_reg;
reg [31:0] main_1_70;
reg [31:0] main_1_70_reg;
reg [31:0] main_1_71;
reg [31:0] main_1_71_reg;
reg [31:0] main_1_72;
reg [31:0] main_1_72_reg;
reg [31:0] main_1_73;
reg [31:0] main_1_73_reg;
reg [31:0] main_1_74;
reg [31:0] main_1_74_reg;
reg [31:0] main_1_75;
reg [31:0] main_1_75_reg;
reg [31:0] main_1_76;
reg [31:0] main_1_76_reg;
reg [31:0] main_1_77;
reg [31:0] main_1_77_reg;
reg [31:0] main_1_78;
reg [31:0] main_1_78_reg;
reg [31:0] main_1_79;
reg [31:0] main_1_79_reg;
reg [31:0] main_1_80;
reg [31:0] main_1_80_reg;
reg [31:0] main_1_81;
reg [31:0] main_1_81_reg;
reg [31:0] main_1_82;
reg [31:0] main_1_82_reg;
reg [31:0] main_1_83;
reg [31:0] main_1_83_reg;
reg [31:0] main_1_84;
reg [31:0] main_1_84_reg;
reg [31:0] main_1_85;
reg [31:0] main_1_85_reg;
reg [31:0] main_1_86;
reg [31:0] main_1_86_reg;
reg [31:0] main_1_87;
reg [31:0] main_1_87_reg;
reg [31:0] main_1_88;
reg [31:0] main_1_88_reg;
reg [31:0] main_1_89;
reg [31:0] main_1_89_reg;
reg [31:0] main_1_90;
reg [31:0] main_1_90_reg;
reg [31:0] main_1_91;
reg [31:0] main_1_91_reg;
reg [31:0] main_1_92;
reg [31:0] main_1_92_reg;
reg [31:0] main_1_93;
reg [31:0] main_1_93_reg;
reg  main_1_94;
reg  main_1_94_reg;
reg [31:0] main_1_95;
reg [31:0] main_1_95_reg;
reg [31:0] main_1_m0iii;
reg [31:0] main_1_m0iii_reg;
reg  main_96_97;
reg  main_96_97_reg;
reg [31:0] main_98_mil01ii;
reg [31:0] main_98_mil01ii_reg;
reg [31:0] main_98_gep_int4;
reg [31:0] main_98_gep_int4_reg;
reg [31:0] main_98_gep_array5;
reg [31:0] main_98_gep_array5_reg;
reg [31:0] main_98_gep6;
reg [31:0] main_98_gep6_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_98_99;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_98_99_reg;
reg [31:0] main_98_100;
reg [31:0] main_98_100_reg;
reg [31:0] main_98_101;
reg [31:0] main_98_101_reg;
reg [31:0] main_98_102;
reg [31:0] main_98_102_reg;
reg  main_98_103;
reg  main_98_103_reg;
reg [31:0] main_98_104;
reg [31:0] main_98_104_reg;
reg [31:0] main_quantlexiti_mil0lcssaii;
reg [31:0] main_quantlexiti_mil0lcssaii_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_quantlexiti_quant26bt_posquant26bt_negii;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_quantlexiti_quant26bt_posquant26bt_negii_reg;
reg [31:0] main_quantlexiti_gep_int7;
reg [31:0] main_quantlexiti_gep_int7_reg;
reg [31:0] main_quantlexiti_gep_array8;
reg [31:0] main_quantlexiti_gep_array8_reg;
reg [31:0] main_quantlexiti_gep9;
reg [31:0] main_quantlexiti_gep9_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_quantlexiti_ril0inii;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_quantlexiti_ril0inii_reg;
reg [31:0] main_quantlexiti_ril0ii;
reg [31:0] main_quantlexiti_ril0ii_reg;
reg [31:0] main_quantlexiti_105;
reg [31:0] main_quantlexiti_105_reg;
reg [31:0] main_quantlexiti_gep_int10;
reg [31:0] main_quantlexiti_gep_int10_reg;
reg [31:0] main_quantlexiti_gep_array11;
reg [31:0] main_quantlexiti_gep_array11_reg;
reg [31:0] main_quantlexiti_gep12;
reg [31:0] main_quantlexiti_gep12_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_quantlexiti_106;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_quantlexiti_106_reg;
reg [31:0] main_quantlexiti_107;
reg [31:0] main_quantlexiti_107_reg;
reg [31:0] main_quantlexiti_108;
reg [31:0] main_quantlexiti_108_reg;
reg [31:0] main_quantlexiti_109;
reg [31:0] main_quantlexiti_109_reg;
reg [31:0] main_quantlexiti_110;
reg [31:0] main_quantlexiti_110_reg;
reg [31:0] main_quantlexiti_111;
reg [31:0] main_quantlexiti_111_reg;
reg [31:0] main_quantlexiti_gep_int13;
reg [31:0] main_quantlexiti_gep_int13_reg;
reg [31:0] main_quantlexiti_gep_array14;
reg [31:0] main_quantlexiti_gep_array14_reg;
reg [31:0] main_quantlexiti_gep15;
reg [31:0] main_quantlexiti_gep15_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_quantlexiti_112;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_quantlexiti_112_reg;
reg [31:0] main_quantlexiti_113;
reg [31:0] main_quantlexiti_113_reg;
reg [31:0] main_quantlexiti_114;
reg [31:0] main_quantlexiti_114_reg;
reg  main_quantlexiti_115;
reg  main_quantlexiti_115_reg;
reg [31:0] main_quantlexiti_i11i;
reg [31:0] main_quantlexiti_i11i_reg;
reg  main_quantlexiti_116;
reg  main_quantlexiti_116_reg;
reg [31:0] main_quantlexiti_i12i;
reg [31:0] main_quantlexiti_i12i_reg;
reg [31:0] main_quantlexiti_117;
reg [31:0] main_quantlexiti_117_reg;
reg [31:0] main_quantlexiti_118;
reg [31:0] main_quantlexiti_118_reg;
reg [31:0] main_quantlexiti_119;
reg [31:0] main_quantlexiti_119_reg;
reg [31:0] main_quantlexiti_gep_int16;
reg [31:0] main_quantlexiti_gep_int16_reg;
reg [31:0] main_quantlexiti_gep_array17;
reg [31:0] main_quantlexiti_gep_array17_reg;
reg [31:0] main_quantlexiti_gep18;
reg [31:0] main_quantlexiti_gep18_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_quantlexiti_120;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_quantlexiti_120_reg;
reg [31:0] main_quantlexiti_121;
reg [31:0] main_quantlexiti_121_reg;
reg [31:0] main_quantlexiti_122;
reg [31:0] main_quantlexiti_122_reg;
reg [31:0] main_quantlexiti_123;
reg [31:0] main_quantlexiti_123_reg;
reg [31:0] main_quantlexiti_124;
reg [31:0] main_quantlexiti_124_reg;
reg [31:0] main_quantlexiti_125;
reg [31:0] main_quantlexiti_125_reg;
reg [31:0] main_quantlexiti_126;
reg [31:0] main_quantlexiti_126_reg;
reg [31:0] main_quantlexiti_127;
reg [31:0] main_quantlexiti_127_reg;
reg  main_quantlexiti_128;
reg  main_quantlexiti_128_reg;
reg [31:0] main_quantlexiti_129;
reg [31:0] main_quantlexiti_129_reg;
reg [31:0] main_quantlexiti_1i7i;
reg [31:0] main_quantlexiti_1i7i_reg;
reg [31:0] main_quantlexiti_130;
reg [31:0] main_quantlexiti_130_reg;
reg [31:0] main_quantlexiti_131;
reg [31:0] main_quantlexiti_131_reg;
reg [31:0] main_quantlexiti_132;
reg [31:0] main_quantlexiti_132_reg;
reg [31:0] main_quantlexiti_133;
reg [31:0] main_quantlexiti_133_reg;
reg [31:0] main_quantlexiti_134;
reg [31:0] main_quantlexiti_134_reg;
reg [31:0] main_quantlexiti_135;
reg [31:0] main_quantlexiti_135_reg;
reg [31:0] main_quantlexiti_136;
reg [31:0] main_quantlexiti_136_reg;
reg [31:0] main_quantlexiti_wd40i8i;
reg [31:0] main_quantlexiti_wd40i8i_reg;
reg [31:0] main_quantlexiti_137;
reg [31:0] main_quantlexiti_137_reg;
reg  main_quantlexiti_138;
reg  main_quantlexiti_138_reg;
reg [31:0] main_quantlexiti_i9i;
reg [31:0] main_quantlexiti_i9i_reg;
reg  main_quantlexiti_139;
reg  main_quantlexiti_139_reg;
reg [31:0] main_quantlexiti_i10i;
reg [31:0] main_quantlexiti_i10i_reg;
reg [31:0] main_quantlexiti_140;
reg [31:0] main_quantlexiti_140_reg;
reg [31:0] main_quantlexiti_141;
reg [31:0] main_quantlexiti_141_reg;
reg [31:0] main_quantlexiti_142;
reg [31:0] main_quantlexiti_142_reg;
reg [31:0] main_quantlexiti_143;
reg [31:0] main_quantlexiti_143_reg;
reg [31:0] main_quantlexiti_144;
reg [31:0] main_quantlexiti_144_reg;
reg [31:0] main_quantlexiti_apl10i4i;
reg [31:0] main_quantlexiti_apl10i4i_reg;
reg [31:0] main_quantlexiti_145;
reg [31:0] main_quantlexiti_145_reg;
reg  main_quantlexiti_146;
reg  main_quantlexiti_146_reg;
reg [31:0] main_quantlexiti_apl10i5i;
reg [31:0] main_quantlexiti_apl10i5i_reg;
reg [31:0] main_quantlexiti_147;
reg [31:0] main_quantlexiti_147_reg;
reg  main_quantlexiti_148;
reg  main_quantlexiti_148_reg;
reg [31:0] main_quantlexiti_apl12i6i;
reg [31:0] main_quantlexiti_apl12i6i_reg;
reg [31:0] main_quantlexiti_149;
reg [31:0] main_quantlexiti_149_reg;
reg [31:0] main_quantlexiti_150;
reg [31:0] main_quantlexiti_150_reg;
reg [31:0] main_quantlexiti_151;
reg [31:0] main_quantlexiti_151_reg;
reg [31:0] main_quantlexiti_152;
reg [31:0] main_quantlexiti_152_reg;
reg [31:0] main_quantlexiti_153;
reg [31:0] main_quantlexiti_153_reg;
reg [31:0] main_quantlexiti_154;
reg [31:0] main_quantlexiti_154_reg;
reg [31:0] main_quantlexiti_155;
reg [31:0] main_quantlexiti_155_reg;
reg [31:0] main_quantlexiti_156;
reg [31:0] main_quantlexiti_156_reg;
reg [31:0] main_quantlexiti_157;
reg [31:0] main_quantlexiti_157_reg;
reg [31:0] main_quantlexiti_158;
reg [31:0] main_quantlexiti_158_reg;
reg [31:0] main_quantlexiti_159;
reg [31:0] main_quantlexiti_159_reg;
reg [31:0] main_quantlexiti_160;
reg [31:0] main_quantlexiti_160_reg;
reg [31:0] main_quantlexiti_161;
reg [31:0] main_quantlexiti_161_reg;
reg [31:0] main_quantlexiti_162;
reg [31:0] main_quantlexiti_162_reg;
reg [31:0] main_quantlexiti_163;
reg [31:0] main_quantlexiti_163_reg;
reg [31:0] main_quantlexiti_164;
reg [31:0] main_quantlexiti_164_reg;
reg [31:0] main_quantlexiti_165;
reg [31:0] main_quantlexiti_165_reg;
reg [31:0] main_quantlexiti_166;
reg [31:0] main_quantlexiti_166_reg;
reg [31:0] main_quantlexiti_167;
reg [31:0] main_quantlexiti_167_reg;
reg [31:0] main_quantlexiti_168;
reg [31:0] main_quantlexiti_168_reg;
reg [31:0] main_quantlexiti_169;
reg [31:0] main_quantlexiti_169_reg;
reg [31:0] main_quantlexiti_170;
reg [31:0] main_quantlexiti_170_reg;
reg [31:0] main_quantlexiti_171;
reg [31:0] main_quantlexiti_171_reg;
reg [31:0] main_quantlexiti_172;
reg [31:0] main_quantlexiti_172_reg;
reg [31:0] main_quantlexiti_173;
reg [31:0] main_quantlexiti_173_reg;
reg [31:0] main_quantlexiti_174;
reg [31:0] main_quantlexiti_174_reg;
reg [31:0] main_quantlexiti_175;
reg [31:0] main_quantlexiti_175_reg;
reg [31:0] main_quantlexiti_176;
reg [31:0] main_quantlexiti_176_reg;
reg [31:0] main_quantlexiti_177;
reg [31:0] main_quantlexiti_177_reg;
reg [31:0] main_quantlexiti_178;
reg [31:0] main_quantlexiti_178_reg;
reg [31:0] main_quantlexiti_179;
reg [31:0] main_quantlexiti_179_reg;
reg [31:0] main_quantlexiti_180;
reg [31:0] main_quantlexiti_180_reg;
reg [31:0] main_quantlexiti_181;
reg [31:0] main_quantlexiti_181_reg;
reg [31:0] main_quantlexiti_182;
reg [31:0] main_quantlexiti_182_reg;
reg [31:0] main_quantlexiti_183;
reg [31:0] main_quantlexiti_183_reg;
reg [31:0] main_quantlexiti_184;
reg [31:0] main_quantlexiti_184_reg;
reg [31:0] main_quantlexiti_185;
reg [31:0] main_quantlexiti_185_reg;
reg [31:0] main_quantlexiti_186;
reg [31:0] main_quantlexiti_186_reg;
reg [31:0] main_quantlexiti_187;
reg [31:0] main_quantlexiti_187_reg;
reg [31:0] main_quantlexiti_188;
reg [31:0] main_quantlexiti_188_reg;
reg [31:0] main_quantlexiti_189;
reg [31:0] main_quantlexiti_189_reg;
reg [31:0] main_quantlexiti_190;
reg [31:0] main_quantlexiti_190_reg;
reg [31:0] main_quantlexiti_191;
reg [31:0] main_quantlexiti_191_reg;
reg [31:0] main_quantlexiti_192;
reg [31:0] main_quantlexiti_192_reg;
reg [31:0] main_quantlexiti_193;
reg [31:0] main_quantlexiti_193_reg;
reg [31:0] main_quantlexiti_194;
reg [31:0] main_quantlexiti_194_reg;
reg [31:0] main_quantlexiti_195;
reg [31:0] main_quantlexiti_195_reg;
reg [31:0] main_quantlexiti_196;
reg [31:0] main_quantlexiti_196_reg;
reg [31:0] main_quantlexiti_197;
reg [31:0] main_quantlexiti_197_reg;
reg [31:0] main_quantlexiti_198;
reg [31:0] main_quantlexiti_198_reg;
reg [31:0] main_quantlexiti_199;
reg [31:0] main_quantlexiti_199_reg;
reg [31:0] main_quantlexiti_200;
reg [31:0] main_quantlexiti_200_reg;
reg [31:0] main_quantlexiti_201;
reg [31:0] main_quantlexiti_201_reg;
reg [31:0] main_quantlexiti_202;
reg [31:0] main_quantlexiti_202_reg;
reg [31:0] main_quantlexiti_203;
reg [31:0] main_quantlexiti_203_reg;
reg  main_quantlexiti_204;
reg  main_quantlexiti_204_reg;
reg [31:0] main_quantlexiti_205;
reg [31:0] main_quantlexiti_205_reg;
reg [31:0] main_quantlexiti_m0i3i;
reg [31:0] main_quantlexiti_m0i3i_reg;
reg  main_quantlexiti_206;
reg  main_quantlexiti_206_reg;
reg [31:0] main_quantlexiti_207;
reg [31:0] main_quantlexiti_207_reg;
reg [31:0] main_quantlexiti_;
reg [31:0] main_quantlexiti__reg;
reg [31:0] main_quantlexiti_208;
reg [31:0] main_quantlexiti_208_reg;
reg  main_quantlexiti_209;
reg  main_quantlexiti_209_reg;
reg [31:0] main_quantlexiti_210;
reg [31:0] main_quantlexiti_210_reg;
reg [31:0] main_quantlexiti_ih1;
reg [31:0] main_quantlexiti_ih1_reg;
reg [31:0] main_quantlexiti_gep_int19;
reg [31:0] main_quantlexiti_gep_int19_reg;
reg [31:0] main_quantlexiti_gep_array20;
reg [31:0] main_quantlexiti_gep_array20_reg;
reg [31:0] main_quantlexiti_gep21;
reg [31:0] main_quantlexiti_gep21_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_quantlexiti_211;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_quantlexiti_211_reg;
reg [31:0] main_quantlexiti_212;
reg [31:0] main_quantlexiti_212_reg;
reg [31:0] main_quantlexiti_213;
reg [31:0] main_quantlexiti_213_reg;
reg [31:0] main_quantlexiti_214;
reg [31:0] main_quantlexiti_214_reg;
reg [31:0] main_quantlexiti_215;
reg [31:0] main_quantlexiti_215_reg;
reg [31:0] main_quantlexiti_216;
reg [31:0] main_quantlexiti_216_reg;
reg [31:0] main_quantlexiti_gep_int22;
reg [31:0] main_quantlexiti_gep_int22_reg;
reg [31:0] main_quantlexiti_gep_array23;
reg [31:0] main_quantlexiti_gep_array23_reg;
reg [31:0] main_quantlexiti_gep24;
reg [31:0] main_quantlexiti_gep24_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_quantlexiti_217;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_quantlexiti_217_reg;
reg [31:0] main_quantlexiti_218;
reg [31:0] main_quantlexiti_218_reg;
reg [31:0] main_quantlexiti_219;
reg [31:0] main_quantlexiti_219_reg;
reg  main_quantlexiti_220;
reg  main_quantlexiti_220_reg;
reg [31:0] main_quantlexiti_i1i1;
reg [31:0] main_quantlexiti_i1i1_reg;
reg  main_quantlexiti_221;
reg  main_quantlexiti_221_reg;
reg [31:0] main_quantlexiti_i2i2;
reg [31:0] main_quantlexiti_i2i2_reg;
reg [31:0] main_quantlexiti_222;
reg [31:0] main_quantlexiti_222_reg;
reg [31:0] main_quantlexiti_223;
reg [31:0] main_quantlexiti_223_reg;
reg [31:0] main_quantlexiti_224;
reg [31:0] main_quantlexiti_224_reg;
reg [31:0] main_quantlexiti_gep_int25;
reg [31:0] main_quantlexiti_gep_int25_reg;
reg [31:0] main_quantlexiti_gep_array26;
reg [31:0] main_quantlexiti_gep_array26_reg;
reg [31:0] main_quantlexiti_gep27;
reg [31:0] main_quantlexiti_gep27_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_quantlexiti_225;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_quantlexiti_225_reg;
reg [31:0] main_quantlexiti_226;
reg [31:0] main_quantlexiti_226_reg;
reg [31:0] main_quantlexiti_227;
reg [31:0] main_quantlexiti_227_reg;
reg [31:0] main_quantlexiti_228;
reg [31:0] main_quantlexiti_228_reg;
reg [31:0] main_quantlexiti_229;
reg [31:0] main_quantlexiti_229_reg;
reg [31:0] main_quantlexiti_230;
reg [31:0] main_quantlexiti_230_reg;
reg [31:0] main_quantlexiti_231;
reg [31:0] main_quantlexiti_231_reg;
reg [31:0] main_quantlexiti_232;
reg [31:0] main_quantlexiti_232_reg;
reg  main_quantlexiti_233;
reg  main_quantlexiti_233_reg;
reg [31:0] main_quantlexiti_234;
reg [31:0] main_quantlexiti_234_reg;
reg [31:0] main_quantlexiti_1ii3;
reg [31:0] main_quantlexiti_1ii3_reg;
reg [31:0] main_quantlexiti_235;
reg [31:0] main_quantlexiti_235_reg;
reg [31:0] main_quantlexiti_236;
reg [31:0] main_quantlexiti_236_reg;
reg [31:0] main_quantlexiti_237;
reg [31:0] main_quantlexiti_237_reg;
reg [31:0] main_quantlexiti_238;
reg [31:0] main_quantlexiti_238_reg;
reg [31:0] main_quantlexiti_239;
reg [31:0] main_quantlexiti_239_reg;
reg [31:0] main_quantlexiti_240;
reg [31:0] main_quantlexiti_240_reg;
reg [31:0] main_quantlexiti_241;
reg [31:0] main_quantlexiti_241_reg;
reg [31:0] main_quantlexiti_wd40ii4;
reg [31:0] main_quantlexiti_wd40ii4_reg;
reg [31:0] main_quantlexiti_242;
reg [31:0] main_quantlexiti_242_reg;
reg  main_quantlexiti_243;
reg  main_quantlexiti_243_reg;
reg [31:0] main_quantlexiti_ii5;
reg [31:0] main_quantlexiti_ii5_reg;
reg  main_quantlexiti_244;
reg  main_quantlexiti_244_reg;
reg [31:0] main_quantlexiti_ii6;
reg [31:0] main_quantlexiti_ii6_reg;
reg [31:0] main_quantlexiti_245;
reg [31:0] main_quantlexiti_245_reg;
reg [31:0] main_quantlexiti_246;
reg [31:0] main_quantlexiti_246_reg;
reg [31:0] main_quantlexiti_247;
reg [31:0] main_quantlexiti_247_reg;
reg [31:0] main_quantlexiti_248;
reg [31:0] main_quantlexiti_248_reg;
reg [31:0] main_quantlexiti_249;
reg [31:0] main_quantlexiti_249_reg;
reg [31:0] main_quantlexiti_apl10ii7;
reg [31:0] main_quantlexiti_apl10ii7_reg;
reg [31:0] main_quantlexiti_250;
reg [31:0] main_quantlexiti_250_reg;
reg  main_quantlexiti_251;
reg  main_quantlexiti_251_reg;
reg [31:0] main_quantlexiti_apl10ii8;
reg [31:0] main_quantlexiti_apl10ii8_reg;
reg [31:0] main_quantlexiti_252;
reg [31:0] main_quantlexiti_252_reg;
reg  main_quantlexiti_253;
reg  main_quantlexiti_253_reg;
reg [31:0] main_quantlexiti_apl12ii9;
reg [31:0] main_quantlexiti_apl12ii9_reg;
reg [31:0] main_quantlexiti_254;
reg [31:0] main_quantlexiti_254_reg;
reg [31:0] main_quantlexiti_255;
reg [31:0] main_quantlexiti_255_reg;
reg [31:0] main_quantlexiti_256;
reg [31:0] main_quantlexiti_256_reg;
reg [31:0] main_quantlexiti_257;
reg [31:0] main_quantlexiti_257_reg;
reg [31:0] main_quantlexiti_gep_int28;
reg [31:0] main_quantlexiti_gep_int28_reg;
reg [31:0] main_quantlexiti_gep_array29;
reg [31:0] main_quantlexiti_gep_array29_reg;
reg [31:0] main_quantlexiti_gep30;
reg [31:0] main_quantlexiti_gep30_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_quantlexiti_258;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_quantlexiti_258_reg;
reg [31:0] main_quantlexiti_259;
reg [31:0] main_quantlexiti_259_reg;
reg  main_quantlexiti_260;
reg  main_quantlexiti_260_reg;
reg [31:0] main_encodeexit_crit_edge_pre;
reg [31:0] main_encodeexit_crit_edge_pre_reg;
reg [31:0] main_encodeexit_crit_edge_pre16;
reg [31:0] main_encodeexit_crit_edge_pre16_reg;
reg [31:0] main_encodeexit_crit_edge_pre17;
reg [31:0] main_encodeexit_crit_edge_pre17_reg;
reg [31:0] main_encodeexit_crit_edge_pre18;
reg [31:0] main_encodeexit_crit_edge_pre18_reg;
reg [31:0] main_encodeexit_crit_edge_pre19;
reg [31:0] main_encodeexit_crit_edge_pre19_reg;
reg [31:0] main_encodeexit_crit_edge_pre20;
reg [31:0] main_encodeexit_crit_edge_pre20_reg;
reg [31:0] main_encodeexit_crit_edge_pre21;
reg [31:0] main_encodeexit_crit_edge_pre21_reg;
reg [31:0] main_encodeexit_crit_edge_pre22;
reg [31:0] main_encodeexit_crit_edge_pre22_reg;
reg [31:0] main_encodeexit_crit_edge_pre23;
reg [31:0] main_encodeexit_crit_edge_pre23_reg;
reg [31:0] main_encodeexit_crit_edge_pre24;
reg [31:0] main_encodeexit_crit_edge_pre24_reg;
reg [31:0] main_encodeexit_crit_edge_pre25;
reg [31:0] main_encodeexit_crit_edge_pre25_reg;
reg [31:0] main_encodeexit_crit_edge_pre26;
reg [31:0] main_encodeexit_crit_edge_pre26_reg;
reg [31:0] main_encodeexit_crit_edge_pre27;
reg [31:0] main_encodeexit_crit_edge_pre27_reg;
reg [31:0] main_encodeexit_crit_edge_pre28;
reg [31:0] main_encodeexit_crit_edge_pre28_reg;
reg [31:0] main_encodeexit_crit_edge_pre29;
reg [31:0] main_encodeexit_crit_edge_pre29_reg;
reg [31:0] main_encodeexit_crit_edge_pre30;
reg [31:0] main_encodeexit_crit_edge_pre30_reg;
reg [31:0] main_encodeexit_crit_edge_pre31;
reg [31:0] main_encodeexit_crit_edge_pre31_reg;
reg [31:0] main_encodeexit_crit_edge_pre32;
reg [31:0] main_encodeexit_crit_edge_pre32_reg;
reg [31:0] main_encodeexit_crit_edge_pre33;
reg [31:0] main_encodeexit_crit_edge_pre33_reg;
reg [31:0] main_encodeexit_crit_edge_pre34;
reg [31:0] main_encodeexit_crit_edge_pre34_reg;
reg [31:0] main_encodeexit_crit_edge_pre35;
reg [31:0] main_encodeexit_crit_edge_pre35_reg;
reg [31:0] main_encodeexit_crit_edge_pre36;
reg [31:0] main_encodeexit_crit_edge_pre36_reg;
reg [31:0] main_encodeexit_crit_edge_pre37;
reg [31:0] main_encodeexit_crit_edge_pre37_reg;
reg [31:0] main_encodeexit_crit_edge_pre38;
reg [31:0] main_encodeexit_crit_edge_pre38_reg;
reg [31:0] main_encodeexit_crit_edge_pre39;
reg [31:0] main_encodeexit_crit_edge_pre39_reg;
reg [31:0] main_encodeexit_crit_edge_pre40;
reg [31:0] main_encodeexit_crit_edge_pre40_reg;
reg [31:0] main_encodeexit_crit_edge_pre41;
reg [31:0] main_encodeexit_crit_edge_pre41_reg;
reg [31:0] main_encodeexit_crit_edge_pre42;
reg [31:0] main_encodeexit_crit_edge_pre42_reg;
reg [31:0] main_encodeexit_crit_edge_pre43;
reg [31:0] main_encodeexit_crit_edge_pre43_reg;
reg [31:0] main_encodeexit_crit_edge_pre44;
reg [31:0] main_encodeexit_crit_edge_pre44_reg;
reg [31:0] main_encodeexit_crit_edge_pre45;
reg [31:0] main_encodeexit_crit_edge_pre45_reg;
reg [31:0] main_encodeexit_crit_edge_pre46;
reg [31:0] main_encodeexit_crit_edge_pre46_reg;
reg [31:0] main_encodeexit_crit_edge_pre47;
reg [31:0] main_encodeexit_crit_edge_pre47_reg;
reg [31:0] main_encodeexit_crit_edge_pre48;
reg [31:0] main_encodeexit_crit_edge_pre48_reg;
reg [31:0] main_encodeexit_crit_edge_pre49;
reg [31:0] main_encodeexit_crit_edge_pre49_reg;
reg [31:0] main_preheaderipreheader_ril0iilcssa;
reg [31:0] main_preheaderipreheader_ril0iilcssa_reg;
reg [31:0] main_preheaderipreheader_gep_int31;
reg [31:0] main_preheaderipreheader_gep_int31_reg;
reg [31:0] main_preheaderipreheader_gep_array32;
reg [31:0] main_preheaderipreheader_gep_array32_reg;
reg [31:0] main_preheaderipreheader_gep33;
reg [31:0] main_preheaderipreheader_gep33_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderipreheader_261;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderipreheader_261_reg;
reg [31:0] main_preheaderipreheader_262;
reg [31:0] main_preheaderipreheader_262_reg;
reg [31:0] main_preheaderi_accumd100;
reg [31:0] main_preheaderi_accumd100_reg;
reg [31:0] main_preheaderi_accumd90;
reg [31:0] main_preheaderi_accumd90_reg;
reg [31:0] main_preheaderi_accumd80;
reg [31:0] main_preheaderi_accumd80_reg;
reg [31:0] main_preheaderi_accumd70;
reg [31:0] main_preheaderi_accumd70_reg;
reg [31:0] main_preheaderi_accumd60;
reg [31:0] main_preheaderi_accumd60_reg;
reg [31:0] main_preheaderi_accumd50;
reg [31:0] main_preheaderi_accumd50_reg;
reg [31:0] main_preheaderi_accumd40;
reg [31:0] main_preheaderi_accumd40_reg;
reg [31:0] main_preheaderi_accumd30;
reg [31:0] main_preheaderi_accumd30_reg;
reg [31:0] main_preheaderi_accumd20;
reg [31:0] main_preheaderi_accumd20_reg;
reg [31:0] main_preheaderi_accumd10;
reg [31:0] main_preheaderi_accumd10_reg;
reg [31:0] main_preheaderi_accumd00;
reg [31:0] main_preheaderi_accumd00_reg;
reg [31:0] main_preheaderi_accumc100;
reg [31:0] main_preheaderi_accumc100_reg;
reg [31:0] main_preheaderi_accumc90;
reg [31:0] main_preheaderi_accumc90_reg;
reg [31:0] main_preheaderi_accumc80;
reg [31:0] main_preheaderi_accumc80_reg;
reg [31:0] main_preheaderi_accumc70;
reg [31:0] main_preheaderi_accumc70_reg;
reg [31:0] main_preheaderi_accumc60;
reg [31:0] main_preheaderi_accumc60_reg;
reg [31:0] main_preheaderi_accumc50;
reg [31:0] main_preheaderi_accumc50_reg;
reg [31:0] main_preheaderi_accumc40;
reg [31:0] main_preheaderi_accumc40_reg;
reg [31:0] main_preheaderi_accumc30;
reg [31:0] main_preheaderi_accumc30_reg;
reg [31:0] main_preheaderi_accumc20;
reg [31:0] main_preheaderi_accumc20_reg;
reg [31:0] main_preheaderi_accumc10;
reg [31:0] main_preheaderi_accumc10_reg;
reg [31:0] main_preheaderi_accumc00;
reg [31:0] main_preheaderi_accumc00_reg;
reg [31:0] main_preheaderi_dec_ph20;
reg [31:0] main_preheaderi_dec_ph20_reg;
reg [31:0] main_preheaderi_dec_ph10;
reg [31:0] main_preheaderi_dec_ph10_reg;
reg [31:0] main_preheaderi_dec_nbh0;
reg [31:0] main_preheaderi_dec_nbh0_reg;
reg [31:0] main_preheaderi_dec_deth0;
reg [31:0] main_preheaderi_dec_deth0_reg;
reg [31:0] main_preheaderi_dec_ah20;
reg [31:0] main_preheaderi_dec_ah20_reg;
reg [31:0] main_preheaderi_dec_rh20;
reg [31:0] main_preheaderi_dec_rh20_reg;
reg [31:0] main_preheaderi_dec_ah10;
reg [31:0] main_preheaderi_dec_ah10_reg;
reg [31:0] main_preheaderi_dec_rh10;
reg [31:0] main_preheaderi_dec_rh10_reg;
reg [31:0] main_preheaderi_dec_plt20;
reg [31:0] main_preheaderi_dec_plt20_reg;
reg [31:0] main_preheaderi_dec_plt10;
reg [31:0] main_preheaderi_dec_plt10_reg;
reg [31:0] main_preheaderi_dec_nbl0;
reg [31:0] main_preheaderi_dec_nbl0_reg;
reg [31:0] main_preheaderi_dec_detl0;
reg [31:0] main_preheaderi_dec_detl0_reg;
reg [31:0] main_preheaderi_dec_al20;
reg [31:0] main_preheaderi_dec_al20_reg;
reg [31:0] main_preheaderi_dec_rlt20;
reg [31:0] main_preheaderi_dec_rlt20_reg;
reg [31:0] main_preheaderi_dec_al10;
reg [31:0] main_preheaderi_dec_al10_reg;
reg [31:0] main_preheaderi_dec_rlt10;
reg [31:0] main_preheaderi_dec_rlt10_reg;
reg [31:0] main_preheaderi_i11i;
reg [31:0] main_preheaderi_i11i_reg;
reg [31:0] main_preheaderi_263;
reg [31:0] main_preheaderi_263_reg;
reg [31:0] main_preheaderi_gep_int34;
reg [31:0] main_preheaderi_gep_int34_reg;
reg [31:0] main_preheaderi_gep_array35;
reg [31:0] main_preheaderi_gep_array35_reg;
reg [31:0] main_preheaderi_gep36;
reg [31:0] main_preheaderi_gep36_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderi_264;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderi_264_reg;
reg [31:0] main_preheaderi_265;
reg [31:0] main_preheaderi_265_reg;
reg [31:0] main_preheaderi_266;
reg [31:0] main_preheaderi_266_reg;
reg [31:0] main_preheaderi_267;
reg [31:0] main_preheaderi_267_reg;
reg [31:0] main_preheaderi_268;
reg [31:0] main_preheaderi_268_reg;
reg [31:0] main_preheaderi_269;
reg [31:0] main_preheaderi_269_reg;
reg [31:0] main_preheaderi_270;
reg [31:0] main_preheaderi_270_reg;
reg [31:0] main_preheaderi_271;
reg [31:0] main_preheaderi_271_reg;
reg [31:0] main_preheaderi_272;
reg [31:0] main_preheaderi_272_reg;
reg [31:0] main_preheaderi_273;
reg [31:0] main_preheaderi_273_reg;
reg [31:0] main_preheaderi_274;
reg [31:0] main_preheaderi_274_reg;
reg [31:0] main_preheaderi_275;
reg [31:0] main_preheaderi_275_reg;
reg [31:0] main_preheaderi_276;
reg [31:0] main_preheaderi_276_reg;
reg [31:0] main_preheaderi_277;
reg [31:0] main_preheaderi_277_reg;
reg [31:0] main_preheaderi_278;
reg [31:0] main_preheaderi_278_reg;
reg [31:0] main_preheaderi_279;
reg [31:0] main_preheaderi_279_reg;
reg [31:0] main_preheaderi_280;
reg [31:0] main_preheaderi_280_reg;
reg [31:0] main_preheaderi_281;
reg [31:0] main_preheaderi_281_reg;
reg [31:0] main_preheaderi_282;
reg [31:0] main_preheaderi_282_reg;
reg [31:0] main_preheaderi_283;
reg [31:0] main_preheaderi_283_reg;
reg [31:0] main_preheaderi_284;
reg [31:0] main_preheaderi_284_reg;
reg [31:0] main_preheaderi_285;
reg [31:0] main_preheaderi_285_reg;
reg [31:0] main_preheaderi_286;
reg [31:0] main_preheaderi_286_reg;
reg [31:0] main_preheaderi_287;
reg [31:0] main_preheaderi_287_reg;
reg [31:0] main_preheaderi_288;
reg [31:0] main_preheaderi_288_reg;
reg [31:0] main_preheaderi_289;
reg [31:0] main_preheaderi_289_reg;
reg [31:0] main_preheaderi_290;
reg [31:0] main_preheaderi_290_reg;
reg [31:0] main_preheaderi_291;
reg [31:0] main_preheaderi_291_reg;
reg [31:0] main_preheaderi_292;
reg [31:0] main_preheaderi_292_reg;
reg [31:0] main_preheaderi_293;
reg [31:0] main_preheaderi_293_reg;
reg [31:0] main_preheaderi_294;
reg [31:0] main_preheaderi_294_reg;
reg [31:0] main_preheaderi_295;
reg [31:0] main_preheaderi_295_reg;
reg [31:0] main_preheaderi_296;
reg [31:0] main_preheaderi_296_reg;
reg [31:0] main_preheaderi_297;
reg [31:0] main_preheaderi_297_reg;
reg [31:0] main_preheaderi_298;
reg [31:0] main_preheaderi_298_reg;
reg [31:0] main_preheaderi_299;
reg [31:0] main_preheaderi_299_reg;
reg [31:0] main_preheaderi_300;
reg [31:0] main_preheaderi_300_reg;
reg [31:0] main_preheaderi_301;
reg [31:0] main_preheaderi_301_reg;
reg [31:0] main_preheaderi_302;
reg [31:0] main_preheaderi_302_reg;
reg [31:0] main_preheaderi_303;
reg [31:0] main_preheaderi_303_reg;
reg [31:0] main_preheaderi_304;
reg [31:0] main_preheaderi_304_reg;
reg [31:0] main_preheaderi_305;
reg [31:0] main_preheaderi_305_reg;
reg [31:0] main_preheaderi_306;
reg [31:0] main_preheaderi_306_reg;
reg [31:0] main_preheaderi_307;
reg [31:0] main_preheaderi_307_reg;
reg [31:0] main_preheaderi_308;
reg [31:0] main_preheaderi_308_reg;
reg [31:0] main_preheaderi_309;
reg [31:0] main_preheaderi_309_reg;
reg [31:0] main_preheaderi_310;
reg [31:0] main_preheaderi_310_reg;
reg [31:0] main_preheaderi_311;
reg [31:0] main_preheaderi_311_reg;
reg [31:0] main_preheaderi_312;
reg [31:0] main_preheaderi_312_reg;
reg [31:0] main_preheaderi_313;
reg [31:0] main_preheaderi_313_reg;
reg [31:0] main_preheaderi_314;
reg [31:0] main_preheaderi_314_reg;
reg [31:0] main_preheaderi_315;
reg [31:0] main_preheaderi_315_reg;
reg [31:0] main_preheaderi_316;
reg [31:0] main_preheaderi_316_reg;
reg [31:0] main_preheaderi_gep_int37;
reg [31:0] main_preheaderi_gep_int37_reg;
reg [31:0] main_preheaderi_gep_array38;
reg [31:0] main_preheaderi_gep_array38_reg;
reg [31:0] main_preheaderi_gep39;
reg [31:0] main_preheaderi_gep39_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderi_317;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderi_317_reg;
reg [31:0] main_preheaderi_318;
reg [31:0] main_preheaderi_318_reg;
reg [31:0] main_preheaderi_319;
reg [31:0] main_preheaderi_319_reg;
reg [31:0] main_preheaderi_320;
reg [31:0] main_preheaderi_320_reg;
reg [31:0] main_preheaderi_321;
reg [31:0] main_preheaderi_321_reg;
reg [31:0] main_preheaderi_322;
reg [31:0] main_preheaderi_322_reg;
reg [31:0] main_preheaderi_323;
reg [31:0] main_preheaderi_323_reg;
reg [31:0] main_preheaderi_324;
reg [31:0] main_preheaderi_324_reg;
reg [31:0] main_preheaderi_325;
reg [31:0] main_preheaderi_325_reg;
reg [31:0] main_preheaderi_gep_int40;
reg [31:0] main_preheaderi_gep_int40_reg;
reg [31:0] main_preheaderi_gep_array41;
reg [31:0] main_preheaderi_gep_array41_reg;
reg [31:0] main_preheaderi_gep42;
reg [31:0] main_preheaderi_gep42_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderi_326;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderi_326_reg;
reg [31:0] main_preheaderi_327;
reg [31:0] main_preheaderi_327_reg;
reg [31:0] main_preheaderi_328;
reg [31:0] main_preheaderi_328_reg;
reg  main_preheaderi_329;
reg  main_preheaderi_329_reg;
reg [31:0] main_preheaderi_i10i;
reg [31:0] main_preheaderi_i10i_reg;
reg  main_preheaderi_330;
reg  main_preheaderi_330_reg;
reg [31:0] main_preheaderi_i11i_var0;
reg [31:0] main_preheaderi_i11i_var0_reg;
reg [31:0] main_preheaderi_331;
reg [31:0] main_preheaderi_331_reg;
reg [31:0] main_preheaderi_332;
reg [31:0] main_preheaderi_332_reg;
reg [31:0] main_preheaderi_333;
reg [31:0] main_preheaderi_333_reg;
reg [31:0] main_preheaderi_gep_int43;
reg [31:0] main_preheaderi_gep_int43_reg;
reg [31:0] main_preheaderi_gep_array44;
reg [31:0] main_preheaderi_gep_array44_reg;
reg [31:0] main_preheaderi_gep45;
reg [31:0] main_preheaderi_gep45_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderi_334;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderi_334_reg;
reg [31:0] main_preheaderi_335;
reg [31:0] main_preheaderi_335_reg;
reg [31:0] main_preheaderi_336;
reg [31:0] main_preheaderi_336_reg;
reg [31:0] main_preheaderi_337;
reg [31:0] main_preheaderi_337_reg;
reg [31:0] main_preheaderi_338;
reg [31:0] main_preheaderi_338_reg;
reg [31:0] main_preheaderi_339;
reg [31:0] main_preheaderi_339_reg;
reg [31:0] main_preheaderi_340;
reg [31:0] main_preheaderi_340_reg;
reg [31:0] main_preheaderi_341;
reg [31:0] main_preheaderi_341_reg;
reg  main_preheaderi_342;
reg  main_preheaderi_342_reg;
reg [31:0] main_preheaderi_343;
reg [31:0] main_preheaderi_343_reg;
reg [31:0] main_preheaderi_1i6i;
reg [31:0] main_preheaderi_1i6i_reg;
reg [31:0] main_preheaderi_344;
reg [31:0] main_preheaderi_344_reg;
reg [31:0] main_preheaderi_345;
reg [31:0] main_preheaderi_345_reg;
reg [31:0] main_preheaderi_346;
reg [31:0] main_preheaderi_346_reg;
reg [31:0] main_preheaderi_347;
reg [31:0] main_preheaderi_347_reg;
reg [31:0] main_preheaderi_348;
reg [31:0] main_preheaderi_348_reg;
reg [31:0] main_preheaderi_349;
reg [31:0] main_preheaderi_349_reg;
reg [31:0] main_preheaderi_350;
reg [31:0] main_preheaderi_350_reg;
reg [31:0] main_preheaderi_wd40i7i;
reg [31:0] main_preheaderi_wd40i7i_reg;
reg [31:0] main_preheaderi_351;
reg [31:0] main_preheaderi_351_reg;
reg  main_preheaderi_352;
reg  main_preheaderi_352_reg;
reg [31:0] main_preheaderi_i8i;
reg [31:0] main_preheaderi_i8i_reg;
reg  main_preheaderi_353;
reg  main_preheaderi_353_reg;
reg [31:0] main_preheaderi_i9i;
reg [31:0] main_preheaderi_i9i_reg;
reg [31:0] main_preheaderi_354;
reg [31:0] main_preheaderi_354_reg;
reg [31:0] main_preheaderi_355;
reg [31:0] main_preheaderi_355_reg;
reg [31:0] main_preheaderi_356;
reg [31:0] main_preheaderi_356_reg;
reg [31:0] main_preheaderi_357;
reg [31:0] main_preheaderi_357_reg;
reg [31:0] main_preheaderi_358;
reg [31:0] main_preheaderi_358_reg;
reg [31:0] main_preheaderi_apl10i3i;
reg [31:0] main_preheaderi_apl10i3i_reg;
reg [31:0] main_preheaderi_359;
reg [31:0] main_preheaderi_359_reg;
reg  main_preheaderi_360;
reg  main_preheaderi_360_reg;
reg [31:0] main_preheaderi_apl10i4i;
reg [31:0] main_preheaderi_apl10i4i_reg;
reg [31:0] main_preheaderi_361;
reg [31:0] main_preheaderi_361_reg;
reg  main_preheaderi_362;
reg  main_preheaderi_362_reg;
reg [31:0] main_preheaderi_apl12i5i;
reg [31:0] main_preheaderi_apl12i5i_reg;
reg [31:0] main_preheaderi_363;
reg [31:0] main_preheaderi_363_reg;
reg [31:0] main_preheaderi_364;
reg [31:0] main_preheaderi_364_reg;
reg [31:0] main_preheaderi_365;
reg [31:0] main_preheaderi_365_reg;
reg [31:0] main_preheaderi_366;
reg [31:0] main_preheaderi_366_reg;
reg [31:0] main_preheaderi_367;
reg [31:0] main_preheaderi_367_reg;
reg [31:0] main_preheaderi_368;
reg [31:0] main_preheaderi_368_reg;
reg [31:0] main_preheaderi_369;
reg [31:0] main_preheaderi_369_reg;
reg [31:0] main_preheaderi_370;
reg [31:0] main_preheaderi_370_reg;
reg [31:0] main_preheaderi_371;
reg [31:0] main_preheaderi_371_reg;
reg [31:0] main_preheaderi_372;
reg [31:0] main_preheaderi_372_reg;
reg [31:0] main_preheaderi_373;
reg [31:0] main_preheaderi_373_reg;
reg [31:0] main_preheaderi_374;
reg [31:0] main_preheaderi_374_reg;
reg [31:0] main_preheaderi_375;
reg [31:0] main_preheaderi_375_reg;
reg [31:0] main_preheaderi_376;
reg [31:0] main_preheaderi_376_reg;
reg [31:0] main_preheaderi_377;
reg [31:0] main_preheaderi_377_reg;
reg [31:0] main_preheaderi_378;
reg [31:0] main_preheaderi_378_reg;
reg [31:0] main_preheaderi_379;
reg [31:0] main_preheaderi_379_reg;
reg [31:0] main_preheaderi_380;
reg [31:0] main_preheaderi_380_reg;
reg [31:0] main_preheaderi_381;
reg [31:0] main_preheaderi_381_reg;
reg [31:0] main_preheaderi_382;
reg [31:0] main_preheaderi_382_reg;
reg [31:0] main_preheaderi_383;
reg [31:0] main_preheaderi_383_reg;
reg [31:0] main_preheaderi_384;
reg [31:0] main_preheaderi_384_reg;
reg [31:0] main_preheaderi_385;
reg [31:0] main_preheaderi_385_reg;
reg [31:0] main_preheaderi_386;
reg [31:0] main_preheaderi_386_reg;
reg [31:0] main_preheaderi_387;
reg [31:0] main_preheaderi_387_reg;
reg [31:0] main_preheaderi_388;
reg [31:0] main_preheaderi_388_reg;
reg [31:0] main_preheaderi_389;
reg [31:0] main_preheaderi_389_reg;
reg [31:0] main_preheaderi_390;
reg [31:0] main_preheaderi_390_reg;
reg [31:0] main_preheaderi_391;
reg [31:0] main_preheaderi_391_reg;
reg [31:0] main_preheaderi_392;
reg [31:0] main_preheaderi_392_reg;
reg [31:0] main_preheaderi_393;
reg [31:0] main_preheaderi_393_reg;
reg [31:0] main_preheaderi_394;
reg [31:0] main_preheaderi_394_reg;
reg [31:0] main_preheaderi_395;
reg [31:0] main_preheaderi_395_reg;
reg [31:0] main_preheaderi_396;
reg [31:0] main_preheaderi_396_reg;
reg [31:0] main_preheaderi_397;
reg [31:0] main_preheaderi_397_reg;
reg [31:0] main_preheaderi_398;
reg [31:0] main_preheaderi_398_reg;
reg [31:0] main_preheaderi_399;
reg [31:0] main_preheaderi_399_reg;
reg [31:0] main_preheaderi_400;
reg [31:0] main_preheaderi_400_reg;
reg [31:0] main_preheaderi_401;
reg [31:0] main_preheaderi_401_reg;
reg [31:0] main_preheaderi_402;
reg [31:0] main_preheaderi_402_reg;
reg [31:0] main_preheaderi_403;
reg [31:0] main_preheaderi_403_reg;
reg [31:0] main_preheaderi_404;
reg [31:0] main_preheaderi_404_reg;
reg [31:0] main_preheaderi_405;
reg [31:0] main_preheaderi_405_reg;
reg [31:0] main_preheaderi_406;
reg [31:0] main_preheaderi_406_reg;
reg [31:0] main_preheaderi_407;
reg [31:0] main_preheaderi_407_reg;
reg [31:0] main_preheaderi_408;
reg [31:0] main_preheaderi_408_reg;
reg [31:0] main_preheaderi_409;
reg [31:0] main_preheaderi_409_reg;
reg [31:0] main_preheaderi_410;
reg [31:0] main_preheaderi_410_reg;
reg [31:0] main_preheaderi_411;
reg [31:0] main_preheaderi_411_reg;
reg [31:0] main_preheaderi_gep_int46;
reg [31:0] main_preheaderi_gep_int46_reg;
reg [31:0] main_preheaderi_gep_array47;
reg [31:0] main_preheaderi_gep_array47_reg;
reg [31:0] main_preheaderi_gep48;
reg [31:0] main_preheaderi_gep48_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderi_412;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderi_412_reg;
reg [31:0] main_preheaderi_413;
reg [31:0] main_preheaderi_413_reg;
reg [31:0] main_preheaderi_414;
reg [31:0] main_preheaderi_414_reg;
reg [31:0] main_preheaderi_415;
reg [31:0] main_preheaderi_415_reg;
reg [31:0] main_preheaderi_416;
reg [31:0] main_preheaderi_416_reg;
reg [31:0] main_preheaderi_417;
reg [31:0] main_preheaderi_417_reg;
reg [31:0] main_preheaderi_gep_int49;
reg [31:0] main_preheaderi_gep_int49_reg;
reg [31:0] main_preheaderi_gep_array50;
reg [31:0] main_preheaderi_gep_array50_reg;
reg [31:0] main_preheaderi_gep51;
reg [31:0] main_preheaderi_gep51_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderi_418;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderi_418_reg;
reg [31:0] main_preheaderi_419;
reg [31:0] main_preheaderi_419_reg;
reg [31:0] main_preheaderi_420;
reg [31:0] main_preheaderi_420_reg;
reg  main_preheaderi_421;
reg  main_preheaderi_421_reg;
reg [31:0] main_preheaderi_i1i;
reg [31:0] main_preheaderi_i1i_reg;
reg  main_preheaderi_422;
reg  main_preheaderi_422_reg;
reg [31:0] main_preheaderi_i2i;
reg [31:0] main_preheaderi_i2i_reg;
reg [31:0] main_preheaderi_423;
reg [31:0] main_preheaderi_423_reg;
reg [31:0] main_preheaderi_424;
reg [31:0] main_preheaderi_424_reg;
reg [31:0] main_preheaderi_425;
reg [31:0] main_preheaderi_425_reg;
reg [31:0] main_preheaderi_gep_int52;
reg [31:0] main_preheaderi_gep_int52_reg;
reg [31:0] main_preheaderi_gep_array53;
reg [31:0] main_preheaderi_gep_array53_reg;
reg [31:0] main_preheaderi_gep54;
reg [31:0] main_preheaderi_gep54_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderi_426;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderi_426_reg;
reg [31:0] main_preheaderi_427;
reg [31:0] main_preheaderi_427_reg;
reg [31:0] main_preheaderi_428;
reg [31:0] main_preheaderi_428_reg;
reg [31:0] main_preheaderi_429;
reg [31:0] main_preheaderi_429_reg;
reg [31:0] main_preheaderi_430;
reg [31:0] main_preheaderi_430_reg;
reg [31:0] main_preheaderi_431;
reg [31:0] main_preheaderi_431_reg;
reg [31:0] main_preheaderi_432;
reg [31:0] main_preheaderi_432_reg;
reg [31:0] main_preheaderi_433;
reg [31:0] main_preheaderi_433_reg;
reg  main_preheaderi_434;
reg  main_preheaderi_434_reg;
reg [31:0] main_preheaderi_435;
reg [31:0] main_preheaderi_435_reg;
reg [31:0] main_preheaderi_1ii;
reg [31:0] main_preheaderi_1ii_reg;
reg [31:0] main_preheaderi_436;
reg [31:0] main_preheaderi_436_reg;
reg [31:0] main_preheaderi_437;
reg [31:0] main_preheaderi_437_reg;
reg [31:0] main_preheaderi_438;
reg [31:0] main_preheaderi_438_reg;
reg [31:0] main_preheaderi_439;
reg [31:0] main_preheaderi_439_reg;
reg [31:0] main_preheaderi_440;
reg [31:0] main_preheaderi_440_reg;
reg [31:0] main_preheaderi_441;
reg [31:0] main_preheaderi_441_reg;
reg [31:0] main_preheaderi_442;
reg [31:0] main_preheaderi_442_reg;
reg [31:0] main_preheaderi_wd40ii;
reg [31:0] main_preheaderi_wd40ii_reg;
reg [31:0] main_preheaderi_443;
reg [31:0] main_preheaderi_443_reg;
reg  main_preheaderi_444;
reg  main_preheaderi_444_reg;
reg [31:0] main_preheaderi_ii;
reg [31:0] main_preheaderi_ii_reg;
reg  main_preheaderi_445;
reg  main_preheaderi_445_reg;
reg [31:0] main_preheaderi_ii_var1;
reg [31:0] main_preheaderi_ii_var1_reg;
reg [31:0] main_preheaderi_446;
reg [31:0] main_preheaderi_446_reg;
reg [31:0] main_preheaderi_447;
reg [31:0] main_preheaderi_447_reg;
reg [31:0] main_preheaderi_448;
reg [31:0] main_preheaderi_448_reg;
reg [31:0] main_preheaderi_449;
reg [31:0] main_preheaderi_449_reg;
reg [31:0] main_preheaderi_450;
reg [31:0] main_preheaderi_450_reg;
reg [31:0] main_preheaderi_apl10ii;
reg [31:0] main_preheaderi_apl10ii_reg;
reg [31:0] main_preheaderi_451;
reg [31:0] main_preheaderi_451_reg;
reg  main_preheaderi_452;
reg  main_preheaderi_452_reg;
reg [31:0] main_preheaderi_apl10ii_var2;
reg [31:0] main_preheaderi_apl10ii_var2_reg;
reg [31:0] main_preheaderi_453;
reg [31:0] main_preheaderi_453_reg;
reg  main_preheaderi_454;
reg  main_preheaderi_454_reg;
reg [31:0] main_preheaderi_apl12ii;
reg [31:0] main_preheaderi_apl12ii_reg;
reg [31:0] main_preheaderi_455;
reg [31:0] main_preheaderi_455_reg;
reg [31:0] main_preheaderi_456;
reg [31:0] main_preheaderi_456_reg;
reg [31:0] main_preheaderi_457;
reg [31:0] main_preheaderi_457_reg;
reg [31:0] main_preheaderi_458;
reg [31:0] main_preheaderi_458_reg;
reg [31:0] main_preheaderi_459;
reg [31:0] main_preheaderi_459_reg;
reg [31:0] main_preheaderi_460;
reg [31:0] main_preheaderi_460_reg;
reg [31:0] main_preheaderi_461;
reg [31:0] main_preheaderi_461_reg;
reg [31:0] main_preheaderi_462;
reg [31:0] main_preheaderi_462_reg;
reg [31:0] main_preheaderi_463;
reg [31:0] main_preheaderi_463_reg;
reg [31:0] main_preheaderi_464;
reg [31:0] main_preheaderi_464_reg;
reg [31:0] main_preheaderi_465;
reg [31:0] main_preheaderi_465_reg;
reg [31:0] main_preheaderi_466;
reg [31:0] main_preheaderi_466_reg;
reg [31:0] main_preheaderi_467;
reg [31:0] main_preheaderi_467_reg;
reg [31:0] main_preheaderi_468;
reg [31:0] main_preheaderi_468_reg;
reg [31:0] main_preheaderi_469;
reg [31:0] main_preheaderi_469_reg;
reg [31:0] main_preheaderi_470;
reg [31:0] main_preheaderi_470_reg;
reg [31:0] main_preheaderi_471;
reg [31:0] main_preheaderi_471_reg;
reg [31:0] main_preheaderi_472;
reg [31:0] main_preheaderi_472_reg;
reg [31:0] main_preheaderi_473;
reg [31:0] main_preheaderi_473_reg;
reg [31:0] main_preheaderi_474;
reg [31:0] main_preheaderi_474_reg;
reg [31:0] main_preheaderi_475;
reg [31:0] main_preheaderi_475_reg;
reg [31:0] main_preheaderi_476;
reg [31:0] main_preheaderi_476_reg;
reg [31:0] main_preheaderi_477;
reg [31:0] main_preheaderi_477_reg;
reg [31:0] main_preheaderi_478;
reg [31:0] main_preheaderi_478_reg;
reg [31:0] main_preheaderi_479;
reg [31:0] main_preheaderi_479_reg;
reg [31:0] main_preheaderi_480;
reg [31:0] main_preheaderi_480_reg;
reg [31:0] main_preheaderi_481;
reg [31:0] main_preheaderi_481_reg;
reg [31:0] main_preheaderi_482;
reg [31:0] main_preheaderi_482_reg;
reg [31:0] main_preheaderi_483;
reg [31:0] main_preheaderi_483_reg;
reg [31:0] main_preheaderi_484;
reg [31:0] main_preheaderi_484_reg;
reg [31:0] main_preheaderi_485;
reg [31:0] main_preheaderi_485_reg;
reg [31:0] main_preheaderi_486;
reg [31:0] main_preheaderi_486_reg;
reg [31:0] main_preheaderi_487;
reg [31:0] main_preheaderi_487_reg;
reg [31:0] main_preheaderi_488;
reg [31:0] main_preheaderi_488_reg;
reg [31:0] main_preheaderi_489;
reg [31:0] main_preheaderi_489_reg;
reg [31:0] main_preheaderi_490;
reg [31:0] main_preheaderi_490_reg;
reg [31:0] main_preheaderi_491;
reg [31:0] main_preheaderi_491_reg;
reg [31:0] main_preheaderi_492;
reg [31:0] main_preheaderi_492_reg;
reg [31:0] main_preheaderi_493;
reg [31:0] main_preheaderi_493_reg;
reg [31:0] main_preheaderi_494;
reg [31:0] main_preheaderi_494_reg;
reg [31:0] main_preheaderi_495;
reg [31:0] main_preheaderi_495_reg;
reg [31:0] main_preheaderi_496;
reg [31:0] main_preheaderi_496_reg;
reg [31:0] main_preheaderi_497;
reg [31:0] main_preheaderi_497_reg;
reg [31:0] main_preheaderi_498;
reg [31:0] main_preheaderi_498_reg;
reg [31:0] main_preheaderi_499;
reg [31:0] main_preheaderi_499_reg;
reg [31:0] main_preheaderi_500;
reg [31:0] main_preheaderi_500_reg;
reg [31:0] main_preheaderi_501;
reg [31:0] main_preheaderi_501_reg;
reg [31:0] main_preheaderi_502;
reg [31:0] main_preheaderi_502_reg;
reg [31:0] main_preheaderi_503;
reg [31:0] main_preheaderi_503_reg;
reg [31:0] main_preheaderi_504;
reg [31:0] main_preheaderi_504_reg;
reg [31:0] main_preheaderi_505;
reg [31:0] main_preheaderi_505_reg;
reg [31:0] main_preheaderi_gep_int55;
reg [31:0] main_preheaderi_gep_int55_reg;
reg [31:0] main_preheaderi_gep_array56;
reg [31:0] main_preheaderi_gep_array56_reg;
reg [31:0] main_preheaderi_gep57;
reg [31:0] main_preheaderi_gep57_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderi_506;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderi_506_reg;
reg [31:0] main_preheaderi_507;
reg [31:0] main_preheaderi_507_reg;
reg [31:0] main_preheaderi_gep_int58;
reg [31:0] main_preheaderi_gep_int58_reg;
reg [31:0] main_preheaderi_gep_array59;
reg [31:0] main_preheaderi_gep_array59_reg;
reg [31:0] main_preheaderi_gep60;
reg [31:0] main_preheaderi_gep60_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderi_508;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderi_508_reg;
reg [31:0] main_preheaderi_509;
reg [31:0] main_preheaderi_509_reg;
reg  main_preheaderi_510;
reg  main_preheaderi_510_reg;
reg [31:0] main_adpcm_mainexit_main_result04;
reg [31:0] main_adpcm_mainexit_main_result04_reg;
reg [31:0] main_adpcm_mainexit_i03;
reg [31:0] main_adpcm_mainexit_i03_reg;
reg [31:0] main_adpcm_mainexit_gep_int61;
reg [31:0] main_adpcm_mainexit_gep_int61_reg;
reg [31:0] main_adpcm_mainexit_gep_array62;
reg [31:0] main_adpcm_mainexit_gep_array62_reg;
reg [31:0] main_adpcm_mainexit_gep63;
reg [31:0] main_adpcm_mainexit_gep63_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_adpcm_mainexit_511;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_adpcm_mainexit_511_reg;
reg [31:0] main_adpcm_mainexit_512;
reg [31:0] main_adpcm_mainexit_512_reg;
reg [31:0] main_adpcm_mainexit_gep_int64;
reg [31:0] main_adpcm_mainexit_gep_int64_reg;
reg [31:0] main_adpcm_mainexit_gep_array65;
reg [31:0] main_adpcm_mainexit_gep_array65_reg;
reg [31:0] main_adpcm_mainexit_gep66;
reg [31:0] main_adpcm_mainexit_gep66_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_adpcm_mainexit_513;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_adpcm_mainexit_513_reg;
reg [31:0] main_adpcm_mainexit_514;
reg [31:0] main_adpcm_mainexit_514_reg;
reg  main_adpcm_mainexit_515;
reg  main_adpcm_mainexit_515_reg;
reg [31:0] main_adpcm_mainexit_516;
reg [31:0] main_adpcm_mainexit_516_reg;
reg [31:0] main_adpcm_mainexit_main_result0;
reg [31:0] main_adpcm_mainexit_main_result0_reg;
reg [31:0] main_adpcm_mainexit_517;
reg [31:0] main_adpcm_mainexit_517_reg;
reg  main_adpcm_mainexit_exitcond5;
reg  main_adpcm_mainexit_exitcond5_reg;
reg [31:0] main_preheader_main_result22;
reg [31:0] main_preheader_main_result22_reg;
reg [31:0] main_preheader_i11;
reg [31:0] main_preheader_i11_reg;
reg [31:0] main_preheader_gep_int67;
reg [31:0] main_preheader_gep_int67_reg;
reg [31:0] main_preheader_gep_array68;
reg [31:0] main_preheader_gep_array68_reg;
reg [31:0] main_preheader_gep69;
reg [31:0] main_preheader_gep69_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader_518;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader_518_reg;
reg [31:0] main_preheader_519;
reg [31:0] main_preheader_519_reg;
reg [31:0] main_preheader_gep_int70;
reg [31:0] main_preheader_gep_int70_reg;
reg [31:0] main_preheader_gep_array71;
reg [31:0] main_preheader_gep_array71_reg;
reg [31:0] main_preheader_gep72;
reg [31:0] main_preheader_gep72_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader_520;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader_520_reg;
reg [31:0] main_preheader_521;
reg [31:0] main_preheader_521_reg;
reg  main_preheader_522;
reg  main_preheader_522_reg;
reg [31:0] main_preheader_523;
reg [31:0] main_preheader_523_reg;
reg [31:0] main_preheader_main_result2;
reg [31:0] main_preheader_main_result2_reg;
reg [31:0] main_preheader_524;
reg [31:0] main_preheader_524_reg;
reg  main_preheader_exitcond;
reg  main_preheader_exitcond_reg;
reg [31:0] main_525_main_result2lcssa;
reg [31:0] main_525_main_result2lcssa_reg;
reg  main_525_527;
reg  main_525_527_reg;
reg [3:0] qq4_code4_table_address_a;
reg  qq4_code4_table_write_enable_a;
wire [31:0] qq4_code4_table_in_a;
wire [31:0] qq4_code4_table_out_a;
wire [3:0] qq4_code4_table_address_b;
wire  qq4_code4_table_write_enable_b;
wire [31:0] qq4_code4_table_in_b;
wire [31:0] qq4_code4_table_out_b;
reg [5:0] qq6_code6_table_address_a;
reg  qq6_code6_table_write_enable_a;
wire [31:0] qq6_code6_table_in_a;
wire [31:0] qq6_code6_table_out_a;
wire [5:0] qq6_code6_table_address_b;
wire  qq6_code6_table_write_enable_b;
wire [31:0] qq6_code6_table_in_b;
wire [31:0] qq6_code6_table_out_b;
reg [3:0] wl_code_table_address_a;
reg  wl_code_table_write_enable_a;
wire [31:0] wl_code_table_in_a;
wire [31:0] wl_code_table_out_a;
wire [3:0] wl_code_table_address_b;
wire  wl_code_table_write_enable_b;
wire [31:0] wl_code_table_in_b;
wire [31:0] wl_code_table_out_b;
reg [4:0] ilb_table_address_a;
reg  ilb_table_write_enable_a;
wire [31:0] ilb_table_in_a;
wire [31:0] ilb_table_out_a;
wire [4:0] ilb_table_address_b;
wire  ilb_table_write_enable_b;
wire [31:0] ilb_table_in_b;
wire [31:0] ilb_table_out_b;
reg [4:0] decis_levl_address_a;
reg  decis_levl_write_enable_a;
wire [31:0] decis_levl_in_a;
wire [31:0] decis_levl_out_a;
wire [4:0] decis_levl_address_b;
wire  decis_levl_write_enable_b;
wire [31:0] decis_levl_in_b;
wire [31:0] decis_levl_out_b;
wire [4:0] rom_32_address_a;
wire  rom_32_write_enable_a;
wire [31:0] rom_32_in_a;
wire [31:0] rom_32_out_a;
wire [4:0] rom_32_address_b;
wire  rom_32_write_enable_b;
wire [31:0] rom_32_in_b;
wire [31:0] rom_32_out_b;
reg [1:0] qq2_code2_table_address_a;
reg  qq2_code2_table_write_enable_a;
wire [31:0] qq2_code2_table_in_a;
wire [31:0] qq2_code2_table_out_a;
wire [1:0] qq2_code2_table_address_b;
wire  qq2_code2_table_write_enable_b;
wire [31:0] qq2_code2_table_in_b;
wire [31:0] qq2_code2_table_out_b;
reg [1:0] wh_code_table_address_a;
reg  wh_code_table_write_enable_a;
wire [31:0] wh_code_table_in_a;
wire [31:0] wh_code_table_out_a;
wire [1:0] wh_code_table_address_b;
wire  wh_code_table_write_enable_b;
wire [31:0] wh_code_table_in_b;
wire [31:0] wh_code_table_out_b;
reg [4:0] tqmf_address_a;
reg  tqmf_write_enable_a;
reg [31:0] tqmf_in_a;
wire [31:0] tqmf_out_a;
reg [4:0] tqmf_address_b;
reg  tqmf_write_enable_b;
reg [31:0] tqmf_in_b;
wire [31:0] tqmf_out_b;
wire [2:0] ram_32_address_a;
wire  ram_32_write_enable_a;
wire [31:0] ram_32_in_a;
wire [31:0] ram_32_out_a;
wire [2:0] ram_32_address_b;
wire  ram_32_write_enable_b;
wire [31:0] ram_32_in_b;
wire [31:0] ram_32_out_b;
reg [6:0] test_data_address_a;
reg  test_data_write_enable_a;
wire [31:0] test_data_in_a;
wire [31:0] test_data_out_a;
reg [6:0] test_data_address_b;
reg  test_data_write_enable_b;
wire [31:0] test_data_in_b;
wire [31:0] test_data_out_b;
reg [6:0] test_compressed_address_a;
reg  test_compressed_write_enable_a;
wire [31:0] test_compressed_in_a;
wire [31:0] test_compressed_out_a;
wire [6:0] test_compressed_address_b;
wire  test_compressed_write_enable_b;
wire [31:0] test_compressed_in_b;
wire [31:0] test_compressed_out_b;
reg [6:0] test_result_address_a;
reg  test_result_write_enable_a;
wire [31:0] test_result_in_a;
wire [31:0] test_result_out_a;
wire [6:0] test_result_address_b;
wire  test_result_write_enable_b;
wire [31:0] test_result_in_b;
wire [31:0] test_result_out_b;
reg [6:0] compressed_address_a;
reg  compressed_write_enable_a;
reg [31:0] compressed_in_a;
wire [31:0] compressed_out_a;
wire [6:0] compressed_address_b;
wire  compressed_write_enable_b;
wire [31:0] compressed_in_b;
wire [31:0] compressed_out_b;
reg [6:0] result_address_a;
reg  result_write_enable_a;
reg [31:0] result_in_a;
wire [31:0] result_out_a;
wire [6:0] result_address_b;
wire  result_write_enable_b;
wire [31:0] result_in_b;
wire [31:0] result_out_b;
wire  legup_memset_4_i64_0_1_address_a;
wire  legup_memset_4_i64_0_1_write_enable_a;
wire [31:0] legup_memset_4_i64_0_1_in_a;
wire [31:0] legup_memset_4_i64_0_1_out_a;
wire  legup_memset_4_i64_0_1_address_b;
wire  legup_memset_4_i64_0_1_write_enable_b;
wire [31:0] legup_memset_4_i64_0_1_in_b;
wire [31:0] legup_memset_4_i64_0_1_out_b;
wire  legup_memset_4_i64_0_2_address_a;
wire  legup_memset_4_i64_0_2_write_enable_a;
wire [7:0] legup_memset_4_i64_0_2_in_a;
wire [7:0] legup_memset_4_i64_0_2_out_a;
wire  legup_memset_4_i64_0_2_address_b;
wire  legup_memset_4_i64_0_2_write_enable_b;
wire [7:0] legup_memset_4_i64_0_2_in_b;
wire [7:0] legup_memset_4_i64_0_2_out_b;
wire  legup_memset_4_i64_0_3_address_a;
wire  legup_memset_4_i64_0_3_write_enable_a;
wire [63:0] legup_memset_4_i64_0_3_in_a;
wire [63:0] legup_memset_4_i64_0_3_out_a;
wire  legup_memset_4_i64_0_3_address_b;
wire  legup_memset_4_i64_0_3_write_enable_b;
wire [63:0] legup_memset_4_i64_0_3_in_b;
wire [63:0] legup_memset_4_i64_0_3_out_b;
wire  legup_memset_4_i64_0_c_address_a;
wire  legup_memset_4_i64_0_c_write_enable_a;
wire [31:0] legup_memset_4_i64_0_c_in_a;
wire [31:0] legup_memset_4_i64_0_c_out_a;
wire  legup_memset_4_i64_0_c_address_b;
wire  legup_memset_4_i64_0_c_write_enable_b;
wire [31:0] legup_memset_4_i64_0_c_in_b;
wire [31:0] legup_memset_4_i64_0_c_out_b;
wire  legup_memset_4_i64_0_s_address_a;
wire  legup_memset_4_i64_0_s_write_enable_a;
wire [31:0] legup_memset_4_i64_0_s_in_a;
wire [31:0] legup_memset_4_i64_0_s_out_a;
wire  legup_memset_4_i64_0_s_address_b;
wire  legup_memset_4_i64_0_s_write_enable_b;
wire [31:0] legup_memset_4_i64_0_s_in_b;
wire [31:0] legup_memset_4_i64_0_s_out_b;
reg  legup_memset_4_i64_start;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] legup_memset_4_i64_arg_m;
reg [7:0] legup_memset_4_i64_arg_c1;
reg [63:0] legup_memset_4_i64_arg_n;
wire  legup_memset_4_i64_memory_controller_enable_a;
wire  legup_memset_4_i64_memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] legup_memset_4_i64_memory_controller_address_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] legup_memset_4_i64_memory_controller_in_a;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] legup_memset_4_i64_memory_controller_out_a;
wire [1:0] legup_memset_4_i64_memory_controller_size_a;
wire  legup_memset_4_i64_memory_controller_enable_b;
wire  legup_memset_4_i64_memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] legup_memset_4_i64_memory_controller_address_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] legup_memset_4_i64_memory_controller_in_b;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] legup_memset_4_i64_memory_controller_out_b;
wire [1:0] legup_memset_4_i64_memory_controller_size_b;
reg  legup_memset_4_i64_memory_controller_waitrequest;
reg  legup_memset_4_i64_finish_final;
reg  legup_memset_4_i64_finish_reg;
wire  legup_memset_4_i64_finish;
reg  legup_function_call;
wire [15:0] legup_pthreadpoll_threadID;
wire [15:0] legup_pthreadpoll_functionID;
reg  upzero_start;
reg [31:0] upzero_arg_dlt;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] upzero_arg_dlti;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] upzero_arg_bli;
reg  upzero_finish_final;
reg  upzero_finish_reg;
wire  upzero_finish;
reg [31:0] main_signed_multiply_32_9_op0;
reg [31:0] main_signed_multiply_32_9_op1;
reg  lpm_mult_main_1_86_en;
reg [31:0] main_1_86_stage0_reg;
reg [31:0] main_signed_multiply_32_9;
reg [31:0] main_signed_add_32_1_op0;
reg [31:0] main_signed_add_32_1_op1;
reg [31:0] main_signed_add_32_1;
reg [31:0] main_signed_multiply_32_4_op0;
reg [31:0] main_signed_multiply_32_4_op1;
reg  lpm_mult_main_1_89_en;
reg [31:0] main_1_89_stage0_reg;
reg [31:0] main_signed_multiply_32_4;
reg [31:0] main_signed_add_32_0_op0;
reg [31:0] main_signed_add_32_0_op1;
reg [31:0] main_signed_add_32_0;
reg [31:0] main_signed_subtract_32_0_op0;
reg [31:0] main_signed_subtract_32_0_op1;
reg [31:0] main_signed_subtract_32_0;
reg [31:0] main_signed_subtract_32_1_op0;
reg [31:0] main_signed_subtract_32_1_op1;
reg [31:0] main_signed_subtract_32_1;
reg [31:0] main_signed_divide_32_0_op0;
reg [31:0] main_signed_divide_32_0_op1;
wire [31:0] lpm_divide_main_preheaderi_263_temp_out;
wire [31:0] main_preheaderi_263_unused;
reg  lpm_divide_main_preheaderi_263_en;
reg [31:0] lpm_divide_main_preheaderi_263_out;
reg [31:0] main_signed_divide_32_0;
reg [31:0] main_signed_add_32_2_op0;
reg [31:0] main_signed_add_32_2_op1;
reg [31:0] main_signed_add_32_2;
reg [31:0] main_signed_multiply_32_1_op0;
reg [31:0] main_signed_multiply_32_1_op1;
reg  lpm_mult_main_preheaderi_321_en;
reg [31:0] main_preheaderi_321_stage0_reg;
reg [31:0] main_signed_multiply_32_1;
reg [31:0] main_signed_add_32_8_op0;
reg [31:0] main_signed_add_32_8_op1;
reg [31:0] main_signed_add_32_8;
reg [31:0] main_signed_multiply_32_2_op0;
reg [31:0] main_signed_multiply_32_2_op1;
reg  lpm_mult_main_preheaderi_324_en;
reg [31:0] main_preheaderi_324_stage0_reg;
reg [31:0] main_signed_multiply_32_2;
reg [31:0] main_signed_multiply_32_7_op0;
reg [31:0] main_signed_multiply_32_7_op1;
reg  lpm_mult_main_preheaderi_345_en;
reg [31:0] main_preheaderi_345_stage0_reg;
reg [31:0] main_signed_multiply_32_7;
reg [31:0] main_signed_multiply_32_0_op0;
reg [31:0] main_signed_multiply_32_0_op1;
reg  lpm_mult_main_1_42_en;
reg [31:0] main_1_42_stage0_reg;
reg [31:0] main_signed_multiply_32_0;
reg [31:0] main_signed_multiply_32_3_op0;
reg [31:0] main_signed_multiply_32_3_op1;
reg  lpm_mult_main_1_45_en;
reg [31:0] main_1_45_stage0_reg;
reg [31:0] main_signed_multiply_32_3;
reg [31:0] main_signed_multiply_32_6_op0;
reg [31:0] main_signed_multiply_32_6_op1;
reg  lpm_mult_main_quantlexiti_140_en;
reg [31:0] main_quantlexiti_140_stage0_reg;
reg [31:0] main_signed_multiply_32_6;
reg [31:0] main_signed_add_32_3_op0;
reg [31:0] main_signed_add_32_3_op1;
reg [31:0] main_signed_add_32_3;
reg [31:0] main_signed_add_32_4_op0;
reg [31:0] main_signed_add_32_4_op1;
reg [31:0] main_signed_add_32_4;
reg [31:0] main_signed_multiply_32_5_op0;
reg [31:0] main_signed_multiply_32_5_op1;
reg  lpm_mult_main_1_53_en;
reg [31:0] main_1_53_stage0_reg;
reg [31:0] main_signed_multiply_32_5;
reg [31:0] main_signed_add_32_5_op0;
reg [31:0] main_signed_add_32_5_op1;
reg [31:0] main_signed_add_32_5;
reg [31:0] main_signed_add_32_6_op0;
reg [31:0] main_signed_add_32_6_op1;
reg [31:0] main_signed_add_32_6;
reg [31:0] main_signed_add_32_7_op0;
reg [31:0] main_signed_add_32_7_op1;
reg [31:0] main_signed_add_32_7;
reg [31:0] main_signed_multiply_32_8_op0;
reg [31:0] main_signed_multiply_32_8_op1;
reg  lpm_mult_main_1_59_en;
reg [31:0] main_1_59_stage0_reg;
reg [31:0] main_signed_multiply_32_8;
reg [31:0] main_signed_multiply_32_27_op0;
reg [31:0] main_signed_multiply_32_27_op1;
reg  lpm_mult_main_quantlexiti_240_en;
reg [31:0] main_quantlexiti_240_stage0_reg;
reg [31:0] main_signed_multiply_32_27;
reg [31:0] main_signed_multiply_32_28_op0;
reg [31:0] main_signed_multiply_32_28_op1;
reg  lpm_mult_main_quantlexiti_245_en;
reg [31:0] main_quantlexiti_245_stage0_reg;
reg [31:0] main_signed_multiply_32_28;
reg [31:0] main_signed_multiply_32_10_op0;
reg [31:0] main_signed_multiply_32_10_op1;
reg  lpm_mult_main_preheaderi_462_en;
reg [31:0] main_preheaderi_462_stage0_reg;
reg [31:0] main_signed_multiply_32_10;
reg [31:0] main_signed_multiply_32_11_op0;
reg [31:0] main_signed_multiply_32_11_op1;
reg  lpm_mult_main_preheaderi_464_en;
reg [31:0] main_preheaderi_464_stage0_reg;
reg [31:0] main_signed_multiply_32_11;
reg [31:0] main_signed_multiply_32_12_op0;
reg [31:0] main_signed_multiply_32_12_op1;
reg  lpm_mult_main_preheaderi_466_en;
reg [31:0] main_preheaderi_466_stage0_reg;
reg [31:0] main_signed_multiply_32_12;
reg [31:0] main_signed_multiply_32_13_op0;
reg [31:0] main_signed_multiply_32_13_op1;
reg  lpm_mult_main_preheaderi_470_en;
reg [31:0] main_preheaderi_470_stage0_reg;
reg [31:0] main_signed_multiply_32_13;
reg [31:0] main_signed_multiply_32_14_op0;
reg [31:0] main_signed_multiply_32_14_op1;
reg  lpm_mult_main_preheaderi_472_en;
reg [31:0] main_preheaderi_472_stage0_reg;
reg [31:0] main_signed_multiply_32_14;
reg [31:0] main_signed_add_32_9_op0;
reg [31:0] main_signed_add_32_9_op1;
reg [31:0] main_signed_add_32_9;
reg [31:0] main_signed_multiply_32_15_op0;
reg [31:0] main_signed_multiply_32_15_op1;
reg  lpm_mult_main_preheaderi_474_en;
reg [31:0] main_preheaderi_474_stage0_reg;
reg [31:0] main_signed_multiply_32_15;
reg [31:0] main_signed_add_32_10_op0;
reg [31:0] main_signed_add_32_10_op1;
reg [31:0] main_signed_add_32_10;
reg [31:0] main_signed_multiply_32_16_op0;
reg [31:0] main_signed_multiply_32_16_op1;
reg  lpm_mult_main_preheaderi_476_en;
reg [31:0] main_preheaderi_476_stage0_reg;
reg [31:0] main_signed_multiply_32_16;
reg [31:0] main_signed_add_32_11_op0;
reg [31:0] main_signed_add_32_11_op1;
reg [31:0] main_signed_add_32_11;
reg [31:0] main_signed_multiply_32_17_op0;
reg [31:0] main_signed_multiply_32_17_op1;
reg  lpm_mult_main_preheaderi_478_en;
reg [31:0] main_preheaderi_478_stage0_reg;
reg [31:0] main_signed_multiply_32_17;
reg [31:0] main_signed_add_32_12_op0;
reg [31:0] main_signed_add_32_12_op1;
reg [31:0] main_signed_add_32_12;
reg [31:0] main_signed_multiply_32_18_op0;
reg [31:0] main_signed_multiply_32_18_op1;
reg  lpm_mult_main_preheaderi_480_en;
reg [31:0] main_preheaderi_480_stage0_reg;
reg [31:0] main_signed_multiply_32_18;
reg [31:0] main_signed_add_32_13_op0;
reg [31:0] main_signed_add_32_13_op1;
reg [31:0] main_signed_add_32_13;
reg [31:0] main_signed_multiply_32_19_op0;
reg [31:0] main_signed_multiply_32_19_op1;
reg  lpm_mult_main_preheaderi_482_en;
reg [31:0] main_preheaderi_482_stage0_reg;
reg [31:0] main_signed_multiply_32_19;
reg [31:0] main_signed_add_32_14_op0;
reg [31:0] main_signed_add_32_14_op1;
reg [31:0] main_signed_add_32_14;
reg [31:0] main_signed_multiply_32_20_op0;
reg [31:0] main_signed_multiply_32_20_op1;
reg  lpm_mult_main_preheaderi_484_en;
reg [31:0] main_preheaderi_484_stage0_reg;
reg [31:0] main_signed_multiply_32_20;
reg [31:0] main_signed_add_32_15_op0;
reg [31:0] main_signed_add_32_15_op1;
reg [31:0] main_signed_add_32_15;
reg [31:0] main_signed_multiply_32_21_op0;
reg [31:0] main_signed_multiply_32_21_op1;
reg  lpm_mult_main_preheaderi_486_en;
reg [31:0] main_preheaderi_486_stage0_reg;
reg [31:0] main_signed_multiply_32_21;
reg [31:0] main_signed_add_32_16_op0;
reg [31:0] main_signed_add_32_16_op1;
reg [31:0] main_signed_add_32_16;
reg [31:0] main_signed_multiply_32_22_op0;
reg [31:0] main_signed_multiply_32_22_op1;
reg  lpm_mult_main_preheaderi_488_en;
reg [31:0] main_preheaderi_488_stage0_reg;
reg [31:0] main_signed_multiply_32_22;
reg [31:0] main_signed_add_32_17_op0;
reg [31:0] main_signed_add_32_17_op1;
reg [31:0] main_signed_add_32_17;
reg [31:0] main_signed_add_32_18_op0;
reg [31:0] main_signed_add_32_18_op1;
reg [31:0] main_signed_add_32_18;
reg [31:0] main_signed_multiply_32_23_op0;
reg [31:0] main_signed_multiply_32_23_op1;
reg  lpm_mult_main_preheaderi_492_en;
reg [31:0] main_preheaderi_492_stage0_reg;
reg [31:0] main_signed_multiply_32_23;
reg [31:0] main_signed_multiply_32_24_op0;
reg [31:0] main_signed_multiply_32_24_op1;
reg  lpm_mult_main_preheaderi_494_en;
reg [31:0] main_preheaderi_494_stage0_reg;
reg [31:0] main_signed_multiply_32_24;
reg [31:0] main_signed_multiply_32_25_op0;
reg [31:0] main_signed_multiply_32_25_op1;
reg  lpm_mult_main_preheaderi_496_en;
reg [31:0] main_preheaderi_496_stage0_reg;
reg [31:0] main_signed_multiply_32_25;
reg [31:0] main_signed_multiply_32_26_op0;
reg [31:0] main_signed_multiply_32_26_op1;
reg  lpm_mult_main_preheaderi_498_en;
reg [31:0] main_preheaderi_498_stage0_reg;
reg [31:0] main_signed_multiply_32_26;
reg  lpm_mult_main_1_43_en;
reg  lpm_mult_main_1_44_en;
reg  lpm_mult_main_1_52_en;
reg  lpm_mult_main_1_55_en;
reg  lpm_mult_main_1_57_en;
reg  lpm_mult_main_1_62_en;
reg  lpm_mult_main_1_92_en;
reg  lpm_mult_main_98_101_en;
reg  lpm_mult_main_quantlexiti_110_en;
reg  lpm_mult_main_quantlexiti_135_en;
reg  lpm_mult_main_quantlexiti_195_en;
reg  lpm_mult_main_quantlexiti_202_en;
reg  lpm_mult_main_quantlexiti_215_en;
reg  lpm_divide_main_quantlexiti_257_en;
reg  lpm_mult_main_quantlexiti_108_en;
reg  lpm_mult_main_quantlexiti_127_en;
reg  lpm_mult_main_quantlexiti_131_en;
reg  lpm_mult_main_quantlexiti_152_en;
reg  lpm_mult_main_quantlexiti_155_en;
reg  lpm_mult_main_quantlexiti_159_en;
reg  lpm_mult_main_quantlexiti_163_en;
reg  lpm_mult_main_quantlexiti_167_en;
reg  lpm_mult_main_quantlexiti_171_en;
reg  lpm_mult_main_quantlexiti_213_en;
reg  lpm_mult_main_quantlexiti_232_en;
reg  lpm_mult_main_quantlexiti_236_en;
reg  lpm_mult_main_preheaderi_313_en;
reg  lpm_mult_main_preheaderi_349_en;
reg  lpm_mult_main_preheaderi_354_en;
reg  lpm_mult_main_preheaderi_409_en;
reg  lpm_mult_main_preheaderi_416_en;
reg  lpm_mult_main_preheaderi_441_en;
reg  lpm_mult_main_preheaderi_446_en;
reg  lpm_mult_main_preheaderi_460_en;
reg  lpm_mult_main_preheaderi_500_en;
reg  lpm_mult_main_preheaderi_502_en;
reg  lpm_mult_main_preheaderi_270_en;
reg  lpm_mult_main_preheaderi_273_en;
reg  lpm_mult_main_preheaderi_277_en;
reg  lpm_mult_main_preheaderi_281_en;
reg  lpm_mult_main_preheaderi_285_en;
reg  lpm_mult_main_preheaderi_289_en;
reg  lpm_mult_main_preheaderi_319_en;
reg  lpm_mult_main_preheaderi_341_en;
reg  lpm_mult_main_preheaderi_414_en;
reg  lpm_mult_main_preheaderi_366_en;
reg  lpm_mult_main_preheaderi_369_en;
reg  lpm_mult_main_preheaderi_373_en;
reg  lpm_mult_main_preheaderi_377_en;
reg  lpm_mult_main_preheaderi_381_en;
reg  lpm_mult_main_preheaderi_385_en;
reg  lpm_mult_main_preheaderi_433_en;
reg  lpm_mult_main_preheaderi_437_en;
reg  lpm_mult_main_preheaderi_458_en;
reg  lpm_mult_main_preheaderi_459_en;

/*   %263 = sdiv i32 %i.11.i, 2*/
lpm_divide lpm_divide_main_preheaderi_263 (
	.quotient (lpm_divide_main_preheaderi_263_temp_out),
	.remain (main_preheaderi_263_unused),
	.clock (clk),
	.aclr (0),
	.clken (lpm_divide_main_preheaderi_263_en),
	.numer (main_signed_divide_32_0_op0),
	.denom (main_signed_divide_32_0_op1)
);

defparam
	lpm_divide_main_preheaderi_263.lpm_pipeline = 32,
	lpm_divide_main_preheaderi_263.lpm_widthn = 32,
	lpm_divide_main_preheaderi_263.lpm_widthd = 32,
	lpm_divide_main_preheaderi_263.lpm_drepresentation = "SIGNED",
	lpm_divide_main_preheaderi_263.lpm_nrepresentation = "SIGNED",
	lpm_divide_main_preheaderi_263.lpm_hint = "LPM_REMAINDERPOSITIVE=FALSE";


legup_memset_4_i64 legup_memset_4_i64 (
	.memory_controller_waitrequest (memory_controller_waitrequest),
	.memory_controller_enable_a (legup_memset_4_i64_memory_controller_enable_a),
	.memory_controller_address_a (legup_memset_4_i64_memory_controller_address_a),
	.memory_controller_write_enable_a (legup_memset_4_i64_memory_controller_write_enable_a),
	.memory_controller_in_a (legup_memset_4_i64_memory_controller_in_a),
	.memory_controller_size_a (legup_memset_4_i64_memory_controller_size_a),
	.memory_controller_out_a (memory_controller_out_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.memory_controller_enable_b (legup_memset_4_i64_memory_controller_enable_b),
	.memory_controller_address_b (legup_memset_4_i64_memory_controller_address_b),
	.memory_controller_write_enable_b (legup_memset_4_i64_memory_controller_write_enable_b),
	.memory_controller_in_b (legup_memset_4_i64_memory_controller_in_b),
	.memory_controller_size_b (legup_memset_4_i64_memory_controller_size_b),
	.memory_controller_out_b (memory_controller_out_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (legup_memset_4_i64_start),
	.finish (legup_memset_4_i64_finish),
	.arg_m (legup_memset_4_i64_arg_m),
	.arg_c1 (legup_memset_4_i64_arg_c1),
	.arg_n (legup_memset_4_i64_arg_n)
);

defparam
	legup_memset_4_i64.tag_offset = tag_offset;


upzero upzero (
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (upzero_start),
	.finish (upzero_finish),
	.arg_dlt (upzero_arg_dlt),
	.arg_dlti (upzero_arg_dlti),
	.arg_bli (upzero_arg_bli)
);

defparam
	upzero.tag_offset = tag_offset;

// Local Rams


// @qq4_code4_table = internal unnamed_addr constant [16 x i32] [i32 0, i32 -20456, i32 -12896, i32 -8968, i32 -6288, i32 -4240, i32 -2584, i32 -1200, i32 20456, i32 12896, i32 8968, i32 6288, i32 4240, ...
rom_dual_port qq4_code4_table (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( qq4_code4_table_address_a ),
	.address_b( qq4_code4_table_address_b ),
	.q_a( qq4_code4_table_out_a ),
	.q_b( qq4_code4_table_out_b)
);
defparam qq4_code4_table.width_a = 32;
defparam qq4_code4_table.width_b = 32;
defparam qq4_code4_table.widthad_a = 4;
defparam qq4_code4_table.widthad_b = 4;
defparam qq4_code4_table.numwords_a = 16;
defparam qq4_code4_table.numwords_b = 16;
defparam qq4_code4_table.latency = 1;
defparam qq4_code4_table.init_file = "qq4_code4_table.mif";


// @qq6_code6_table = internal unnamed_addr constant [64 x i32] [i32 -136, i32 -136, i32 -136, i32 -136, i32 -24808, i32 -21904, i32 -19008, i32 -16704, i32 -14984, i32 -13512, i32 -12280, i32 -11192, i3...
rom_dual_port qq6_code6_table (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( qq6_code6_table_address_a ),
	.address_b( qq6_code6_table_address_b ),
	.q_a( qq6_code6_table_out_a ),
	.q_b( qq6_code6_table_out_b)
);
defparam qq6_code6_table.width_a = 32;
defparam qq6_code6_table.width_b = 32;
defparam qq6_code6_table.widthad_a = 6;
defparam qq6_code6_table.widthad_b = 6;
defparam qq6_code6_table.numwords_a = 64;
defparam qq6_code6_table.numwords_b = 64;
defparam qq6_code6_table.latency = 1;
defparam qq6_code6_table.init_file = "qq6_code6_table.mif";


// @wl_code_table = internal unnamed_addr constant [16 x i32] [i32 -60, i32 3042, i32 1198, i32 538, i32 334, i32 172, i32 58, i32 -30, i32 3042, i32 1198, i32 538, i32 334, i32 172, i32 58, i32 -30, i32...
rom_dual_port wl_code_table (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( wl_code_table_address_a ),
	.address_b( wl_code_table_address_b ),
	.q_a( wl_code_table_out_a ),
	.q_b( wl_code_table_out_b)
);
defparam wl_code_table.width_a = 32;
defparam wl_code_table.width_b = 32;
defparam wl_code_table.widthad_a = 4;
defparam wl_code_table.widthad_b = 4;
defparam wl_code_table.numwords_a = 16;
defparam wl_code_table.numwords_b = 16;
defparam wl_code_table.latency = 1;
defparam wl_code_table.init_file = "wl_code_table.mif";


// @ilb_table = internal unnamed_addr constant [32 x i32] [i32 2048, i32 2093, i32 2139, i32 2186, i32 2233, i32 2282, i32 2332, i32 2383, i32 2435, i32 2489, i32 2543, i32 2599, i32 2656, i32 2714, i32 ...
rom_dual_port ilb_table (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( ilb_table_address_a ),
	.address_b( ilb_table_address_b ),
	.q_a( ilb_table_out_a ),
	.q_b( ilb_table_out_b)
);
defparam ilb_table.width_a = 32;
defparam ilb_table.width_b = 32;
defparam ilb_table.widthad_a = 5;
defparam ilb_table.widthad_b = 5;
defparam ilb_table.numwords_a = 32;
defparam ilb_table.numwords_b = 32;
defparam ilb_table.latency = 1;
defparam ilb_table.init_file = "ilb_table.mif";


// @decis_levl = internal unnamed_addr constant [30 x i32] [i32 280, i32 576, i32 880, i32 1200, i32 1520, i32 1864, i32 2208, i32 2584, i32 2960, i32 3376, i32 3784, i32 4240, i32 4696, i32 5200, i32 57...
rom_dual_port decis_levl (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( decis_levl_address_a ),
	.address_b( decis_levl_address_b ),
	.q_a( decis_levl_out_a ),
	.q_b( decis_levl_out_b)
);
defparam decis_levl.width_a = 32;
defparam decis_levl.width_b = 32;
defparam decis_levl.widthad_a = 5;
defparam decis_levl.widthad_b = 5;
defparam decis_levl.numwords_a = 30;
defparam decis_levl.numwords_b = 30;
defparam decis_levl.latency = 1;
defparam decis_levl.init_file = "decis_levl.mif";


// @qq2_code2_table = internal unnamed_addr constant [4 x i32] [i32 -7408, i32 -1616, i32 7408, i32 1616], align 4
rom_dual_port qq2_code2_table (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( qq2_code2_table_address_a ),
	.address_b( qq2_code2_table_address_b ),
	.q_a( qq2_code2_table_out_a ),
	.q_b( qq2_code2_table_out_b)
);
defparam qq2_code2_table.width_a = 32;
defparam qq2_code2_table.width_b = 32;
defparam qq2_code2_table.widthad_a = 2;
defparam qq2_code2_table.widthad_b = 2;
defparam qq2_code2_table.numwords_a = 4;
defparam qq2_code2_table.numwords_b = 4;
defparam qq2_code2_table.latency = 1;
defparam qq2_code2_table.init_file = "qq2_code2_table.mif";


// @wh_code_table = internal unnamed_addr constant [4 x i32] [i32 798, i32 -214, i32 798, i32 -214], align 4
rom_dual_port wh_code_table (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( wh_code_table_address_a ),
	.address_b( wh_code_table_address_b ),
	.q_a( wh_code_table_out_a ),
	.q_b( wh_code_table_out_b)
);
defparam wh_code_table.width_a = 32;
defparam wh_code_table.width_b = 32;
defparam wh_code_table.widthad_a = 2;
defparam wh_code_table.widthad_b = 2;
defparam wh_code_table.numwords_a = 4;
defparam wh_code_table.numwords_b = 4;
defparam wh_code_table.latency = 1;
defparam wh_code_table.init_file = "wh_code_table.mif";


// @tqmf = internal unnamed_addr global [24 x i32] zeroinitializer, align 4
ram_dual_port tqmf (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( tqmf_address_a ),
	.address_b( tqmf_address_b ),
	.wren_a( tqmf_write_enable_a ),
	.wren_b( tqmf_write_enable_b ),
	.data_a( tqmf_in_a ),
	.data_b( tqmf_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( tqmf_out_a ),
	.q_b( tqmf_out_b)
);
defparam tqmf.width_a = 32;
defparam tqmf.width_b = 32;
defparam tqmf.widthad_a = 5;
defparam tqmf.widthad_b = 5;
defparam tqmf.width_be_a = 1;
defparam tqmf.width_be_b = 1;
defparam tqmf.numwords_a = 24;
defparam tqmf.numwords_b = 24;
defparam tqmf.latency = 1;
defparam tqmf.init_file = "tqmf.mif";


// @test_data = internal unnamed_addr constant [100 x i32] [i32 68, i32 68, i32 68, i32 68, i32 68, i32 68, i32 68, i32 68, i32 68, i32 68, i32 68, i32 68, i32 68, i32 68, i32 68, i32 68, i32 68, i32 67,...
rom_dual_port test_data (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( test_data_address_a ),
	.address_b( test_data_address_b ),
	.q_a( test_data_out_a ),
	.q_b( test_data_out_b)
);
defparam test_data.width_a = 32;
defparam test_data.width_b = 32;
defparam test_data.widthad_a = 7;
defparam test_data.widthad_b = 7;
defparam test_data.numwords_a = 100;
defparam test_data.numwords_b = 100;
defparam test_data.latency = 1;
defparam test_data.init_file = "test_data.mif";


// @test_compressed = internal unnamed_addr constant [100 x i32] [i32 253, i32 222, i32 119, i32 186, i32 244, i32 146, i32 32, i32 160, i32 236, i32 237, i32 238, i32 240, i32 241, i32 241, i32 242, i32...
rom_dual_port test_compressed (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( test_compressed_address_a ),
	.address_b( test_compressed_address_b ),
	.q_a( test_compressed_out_a ),
	.q_b( test_compressed_out_b)
);
defparam test_compressed.width_a = 32;
defparam test_compressed.width_b = 32;
defparam test_compressed.widthad_a = 7;
defparam test_compressed.widthad_b = 7;
defparam test_compressed.numwords_a = 100;
defparam test_compressed.numwords_b = 100;
defparam test_compressed.latency = 1;
defparam test_compressed.init_file = "test_compressed.mif";


// @test_result = internal unnamed_addr constant [100 x i32] [i32 0, i32 -1, i32 -1, i32 0, i32 0, i32 -1, i32 0, i32 0, i32 -1, i32 -1, i32 0, i32 0, i32 1, i32 1, i32 0, i32 -2, i32 -1, i32 -2, i32 0, ...
rom_dual_port test_result (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( test_result_address_a ),
	.address_b( test_result_address_b ),
	.q_a( test_result_out_a ),
	.q_b( test_result_out_b)
);
defparam test_result.width_a = 32;
defparam test_result.width_b = 32;
defparam test_result.widthad_a = 7;
defparam test_result.widthad_b = 7;
defparam test_result.numwords_a = 100;
defparam test_result.numwords_b = 100;
defparam test_result.latency = 1;
defparam test_result.init_file = "test_result.mif";


// @compressed = internal unnamed_addr global [100 x i32] zeroinitializer, align 4
ram_dual_port compressed (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( compressed_address_a ),
	.address_b( compressed_address_b ),
	.wren_a( compressed_write_enable_a ),
	.wren_b( compressed_write_enable_b ),
	.data_a( compressed_in_a ),
	.data_b( compressed_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( compressed_out_a ),
	.q_b( compressed_out_b)
);
defparam compressed.width_a = 32;
defparam compressed.width_b = 32;
defparam compressed.widthad_a = 7;
defparam compressed.widthad_b = 7;
defparam compressed.width_be_a = 1;
defparam compressed.width_be_b = 1;
defparam compressed.numwords_a = 100;
defparam compressed.numwords_b = 100;
defparam compressed.latency = 1;
defparam compressed.init_file = "compressed.mif";


// @result = internal unnamed_addr global [100 x i32] zeroinitializer, align 4
ram_dual_port result (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( result_address_a ),
	.address_b( result_address_b ),
	.wren_a( result_write_enable_a ),
	.wren_b( result_write_enable_b ),
	.data_a( result_in_a ),
	.data_b( result_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( result_out_a ),
	.q_b( result_out_b)
);
defparam result.width_a = 32;
defparam result.width_b = 32;
defparam result.widthad_a = 7;
defparam result.widthad_b = 7;
defparam result.width_be_a = 1;
defparam result.width_be_b = 1;
defparam result.numwords_a = 100;
defparam result.numwords_b = 100;
defparam result.latency = 1;
defparam result.init_file = "result.mif";


/* Unsynthesizable Statements */
always @(posedge clk)
	if (!memory_controller_waitrequest) begin
	/* main: %525*/
	/*   %526 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([12 x i8]* @.str, i32 0, i32 0), i32 %.main_result.2.lcssa) #3*/
	if ((cur_state == LEGUP_F_main_BB__525_166)) begin
		$write("Result: %d\n", $signed(main_525_main_result2lcssa_reg));
		// to fix quartus warning
		if (reset == 1'b0 && ^(main_525_main_result2lcssa_reg) === 1'bX) finish <= 0;
	end
	/* main: %528*/
	/*   %529 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([14 x i8]* @.str1, i32 0, i32 0)) #3*/
	if ((cur_state == LEGUP_F_main_BB__528_167)) begin
		$write("RESULT: PASS\n");
	end
	/* main: %530*/
	/*   %531 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([14 x i8]* @.str2, i32 0, i32 0)) #3*/
	if ((cur_state == LEGUP_F_main_BB__530_168)) begin
		$write("RESULT: FAIL\n");
	end
end
always @(posedge clk) begin
if (reset == 1'b1)
	cur_state <= LEGUP_0;
else if (memory_controller_waitrequest == 1'd1)
	cur_state <= cur_state;
else
	cur_state <= next_state;
end

always @(*)
begin
next_state = cur_state;
case(cur_state)  // synthesis parallel_case  
LEGUP_0:
	if ((start == 1'd1))
		next_state = LEGUP_F_main_BB__0_1;
LEGUP_F_main_BB__0_1:
		next_state = LEGUP_F_main_BB__0_2;
LEGUP_F_main_BB__0_10:
		next_state = LEGUP_F_main_BB__0_11;
LEGUP_F_main_BB__0_11:
		next_state = LEGUP_F_main_BB__0_12;
LEGUP_F_main_BB__0_12:
		next_state = LEGUP_F_main_BB__0_13;
LEGUP_F_main_BB__0_13:
		next_state = LEGUP_F_main_BB__0_14;
LEGUP_F_main_BB__0_14:
		next_state = LEGUP_F_main_BB__0_15;
LEGUP_F_main_BB__0_15:
		next_state = LEGUP_F_main_BB__0_16;
LEGUP_F_main_BB__0_16:
		next_state = LEGUP_F_main_BB__0_17;
LEGUP_F_main_BB__0_17:
		next_state = LEGUP_F_main_BB__0_18;
LEGUP_F_main_BB__0_18:
		next_state = LEGUP_F_main_BB__0_19;
LEGUP_F_main_BB__0_19:
		next_state = LEGUP_F_main_BB__0_20;
LEGUP_F_main_BB__0_2:
		next_state = LEGUP_F_main_BB__0_3;
LEGUP_F_main_BB__0_20:
		next_state = LEGUP_F_main_BB__0_21;
LEGUP_F_main_BB__0_21:
		next_state = LEGUP_F_main_BB__0_22;
LEGUP_F_main_BB__0_22:
		next_state = LEGUP_F_main_BB__0_23;
LEGUP_F_main_BB__0_23:
		next_state = LEGUP_F_main_BB__0_24;
LEGUP_F_main_BB__0_24:
		next_state = LEGUP_F_main_BB__0_25;
LEGUP_F_main_BB__0_25:
		next_state = LEGUP_function_call_26;
LEGUP_F_main_BB__0_27:
		next_state = LEGUP_F_main_BB__1_28;
LEGUP_F_main_BB__0_3:
		next_state = LEGUP_F_main_BB__0_4;
LEGUP_F_main_BB__0_4:
		next_state = LEGUP_F_main_BB__0_5;
LEGUP_F_main_BB__0_5:
		next_state = LEGUP_F_main_BB__0_6;
LEGUP_F_main_BB__0_6:
		next_state = LEGUP_F_main_BB__0_7;
LEGUP_F_main_BB__0_7:
		next_state = LEGUP_F_main_BB__0_8;
LEGUP_F_main_BB__0_8:
		next_state = LEGUP_F_main_BB__0_9;
LEGUP_F_main_BB__0_9:
		next_state = LEGUP_F_main_BB__0_10;
LEGUP_F_main_BB__1_28:
		next_state = LEGUP_F_main_BB__1_29;
LEGUP_F_main_BB__1_29:
		next_state = LEGUP_F_main_BB__1_30;
LEGUP_F_main_BB__1_30:
		next_state = LEGUP_F_main_BB__1_31;
LEGUP_F_main_BB__1_31:
		next_state = LEGUP_F_main_BB__1_32;
LEGUP_F_main_BB__1_32:
		next_state = LEGUP_F_main_BB__1_33;
LEGUP_F_main_BB__1_33:
		next_state = LEGUP_F_main_BB__1_34;
LEGUP_F_main_BB__1_34:
		next_state = LEGUP_F_main_BB__1_35;
LEGUP_F_main_BB__1_35:
		next_state = LEGUP_F_main_BB__1_36;
LEGUP_F_main_BB__1_36:
		next_state = LEGUP_F_main_BB__1_37;
LEGUP_F_main_BB__1_37:
		next_state = LEGUP_F_main_BB__1_38;
LEGUP_F_main_BB__1_38:
		next_state = LEGUP_F_main_BB__1_39;
LEGUP_F_main_BB__1_39:
		next_state = LEGUP_F_main_BB__1_40;
LEGUP_F_main_BB__1_40:
		next_state = LEGUP_F_main_BB__1_41;
LEGUP_F_main_BB__1_41:
		next_state = LEGUP_F_main_BB__1_42;
LEGUP_F_main_BB__1_42:
		next_state = LEGUP_F_main_BB__98_44;
LEGUP_F_main_BB__525_166:
	if ((main_525_527 == 1'd1))
		next_state = LEGUP_F_main_BB__528_167;
	else if ((main_525_527 == 0))
		next_state = LEGUP_F_main_BB__530_168;
LEGUP_F_main_BB__528_167:
		next_state = LEGUP_F_main_BB__532_169;
LEGUP_F_main_BB__530_168:
		next_state = LEGUP_F_main_BB__532_169;
LEGUP_F_main_BB__532_169:
		next_state = LEGUP_0;
LEGUP_F_main_BB__96_43:
	if ((main_96_97 == 1'd1))
		next_state = LEGUP_F_main_BB__98_44;
	else if ((main_96_97 == 0))
		next_state = LEGUP_F_main_BB_quantlexiti_48;
LEGUP_F_main_BB__98_44:
		next_state = LEGUP_F_main_BB__98_45;
LEGUP_F_main_BB__98_45:
		next_state = LEGUP_F_main_BB__98_46;
LEGUP_F_main_BB__98_46:
		next_state = LEGUP_F_main_BB__98_47;
LEGUP_F_main_BB__98_47:
	if ((main_98_103 == 1'd1))
		next_state = LEGUP_F_main_BB__96_43;
	else if ((main_98_103 == 0))
		next_state = LEGUP_F_main_BB_quantlexiti_48;
LEGUP_F_main_BB_adpcm_mainexit_160:
		next_state = LEGUP_F_main_BB_adpcm_mainexit_161;
LEGUP_F_main_BB_adpcm_mainexit_161:
		next_state = LEGUP_F_main_BB_adpcm_mainexit_162;
LEGUP_F_main_BB_adpcm_mainexit_162:
	if ((main_adpcm_mainexit_exitcond5_reg == 1'd1))
		next_state = LEGUP_F_main_BB_preheader_163;
	else if ((main_adpcm_mainexit_exitcond5_reg == 0))
		next_state = LEGUP_F_main_BB_adpcm_mainexit_160;
LEGUP_F_main_BB_encodeexit_crit_edge_85:
		next_state = LEGUP_F_main_BB_encodeexit_crit_edge_86;
LEGUP_F_main_BB_encodeexit_crit_edge_86:
		next_state = LEGUP_F_main_BB_encodeexit_crit_edge_87;
LEGUP_F_main_BB_encodeexit_crit_edge_87:
		next_state = LEGUP_F_main_BB_encodeexit_crit_edge_88;
LEGUP_F_main_BB_encodeexit_crit_edge_88:
		next_state = LEGUP_F_main_BB_encodeexit_crit_edge_89;
LEGUP_F_main_BB_encodeexit_crit_edge_89:
		next_state = LEGUP_F_main_BB_encodeexit_crit_edge_90;
LEGUP_F_main_BB_encodeexit_crit_edge_90:
		next_state = LEGUP_F_main_BB_encodeexit_crit_edge_91;
LEGUP_F_main_BB_encodeexit_crit_edge_91:
		next_state = LEGUP_F_main_BB_encodeexit_crit_edge_92;
LEGUP_F_main_BB_encodeexit_crit_edge_92:
		next_state = LEGUP_F_main_BB_encodeexit_crit_edge_93;
LEGUP_F_main_BB_encodeexit_crit_edge_93:
		next_state = LEGUP_F_main_BB_encodeexit_crit_edge_94;
LEGUP_F_main_BB_encodeexit_crit_edge_94:
		next_state = LEGUP_F_main_BB_encodeexit_crit_edge_95;
LEGUP_F_main_BB_encodeexit_crit_edge_95:
		next_state = LEGUP_F_main_BB_encodeexit_crit_edge_96;
LEGUP_F_main_BB_encodeexit_crit_edge_96:
		next_state = LEGUP_F_main_BB_encodeexit_crit_edge_97;
LEGUP_F_main_BB_encodeexit_crit_edge_97:
		next_state = LEGUP_F_main_BB__1_28;
LEGUP_F_main_BB_preheader_163:
		next_state = LEGUP_F_main_BB_preheader_164;
LEGUP_F_main_BB_preheader_164:
		next_state = LEGUP_F_main_BB_preheader_165;
LEGUP_F_main_BB_preheader_165:
	if ((main_preheader_exitcond_reg == 1'd1))
		next_state = LEGUP_F_main_BB__525_166;
	else if ((main_preheader_exitcond_reg == 0))
		next_state = LEGUP_F_main_BB_preheader_163;
LEGUP_F_main_BB_preheaderi_101:
		next_state = LEGUP_F_main_BB_preheaderi_102;
LEGUP_F_main_BB_preheaderi_102:
		next_state = LEGUP_F_main_BB_preheaderi_103;
LEGUP_F_main_BB_preheaderi_103:
		next_state = LEGUP_F_main_BB_preheaderi_104;
LEGUP_F_main_BB_preheaderi_104:
		next_state = LEGUP_F_main_BB_preheaderi_105;
LEGUP_F_main_BB_preheaderi_105:
		next_state = LEGUP_F_main_BB_preheaderi_106;
LEGUP_F_main_BB_preheaderi_106:
		next_state = LEGUP_F_main_BB_preheaderi_107;
LEGUP_F_main_BB_preheaderi_107:
		next_state = LEGUP_F_main_BB_preheaderi_108;
LEGUP_F_main_BB_preheaderi_108:
		next_state = LEGUP_F_main_BB_preheaderi_109;
LEGUP_F_main_BB_preheaderi_109:
		next_state = LEGUP_F_main_BB_preheaderi_110;
LEGUP_F_main_BB_preheaderi_110:
		next_state = LEGUP_F_main_BB_preheaderi_111;
LEGUP_F_main_BB_preheaderi_111:
		next_state = LEGUP_F_main_BB_preheaderi_112;
LEGUP_F_main_BB_preheaderi_112:
		next_state = LEGUP_F_main_BB_preheaderi_113;
LEGUP_F_main_BB_preheaderi_113:
		next_state = LEGUP_F_main_BB_preheaderi_114;
LEGUP_F_main_BB_preheaderi_114:
		next_state = LEGUP_F_main_BB_preheaderi_115;
LEGUP_F_main_BB_preheaderi_115:
		next_state = LEGUP_F_main_BB_preheaderi_116;
LEGUP_F_main_BB_preheaderi_116:
		next_state = LEGUP_F_main_BB_preheaderi_117;
LEGUP_F_main_BB_preheaderi_117:
		next_state = LEGUP_F_main_BB_preheaderi_118;
LEGUP_F_main_BB_preheaderi_118:
		next_state = LEGUP_F_main_BB_preheaderi_119;
LEGUP_F_main_BB_preheaderi_119:
		next_state = LEGUP_F_main_BB_preheaderi_120;
LEGUP_F_main_BB_preheaderi_120:
		next_state = LEGUP_F_main_BB_preheaderi_121;
LEGUP_F_main_BB_preheaderi_121:
		next_state = LEGUP_F_main_BB_preheaderi_122;
LEGUP_F_main_BB_preheaderi_122:
		next_state = LEGUP_F_main_BB_preheaderi_123;
LEGUP_F_main_BB_preheaderi_123:
		next_state = LEGUP_F_main_BB_preheaderi_124;
LEGUP_F_main_BB_preheaderi_124:
		next_state = LEGUP_F_main_BB_preheaderi_125;
LEGUP_F_main_BB_preheaderi_125:
		next_state = LEGUP_F_main_BB_preheaderi_126;
LEGUP_F_main_BB_preheaderi_126:
		next_state = LEGUP_F_main_BB_preheaderi_127;
LEGUP_F_main_BB_preheaderi_127:
		next_state = LEGUP_F_main_BB_preheaderi_128;
LEGUP_F_main_BB_preheaderi_128:
		next_state = LEGUP_F_main_BB_preheaderi_129;
LEGUP_F_main_BB_preheaderi_129:
		next_state = LEGUP_F_main_BB_preheaderi_130;
LEGUP_F_main_BB_preheaderi_130:
		next_state = LEGUP_F_main_BB_preheaderi_131;
LEGUP_F_main_BB_preheaderi_131:
		next_state = LEGUP_F_main_BB_preheaderi_132;
LEGUP_F_main_BB_preheaderi_132:
		next_state = LEGUP_F_main_BB_preheaderi_133;
LEGUP_F_main_BB_preheaderi_133:
		next_state = LEGUP_F_main_BB_preheaderi_134;
LEGUP_F_main_BB_preheaderi_134:
		next_state = LEGUP_F_main_BB_preheaderi_135;
LEGUP_F_main_BB_preheaderi_135:
		next_state = LEGUP_F_main_BB_preheaderi_136;
LEGUP_F_main_BB_preheaderi_136:
		next_state = LEGUP_F_main_BB_preheaderi_137;
LEGUP_F_main_BB_preheaderi_137:
		next_state = LEGUP_F_main_BB_preheaderi_138;
LEGUP_F_main_BB_preheaderi_138:
		next_state = LEGUP_F_main_BB_preheaderi_139;
LEGUP_F_main_BB_preheaderi_139:
		next_state = LEGUP_F_main_BB_preheaderi_140;
LEGUP_F_main_BB_preheaderi_140:
		next_state = LEGUP_function_call_141;
LEGUP_F_main_BB_preheaderi_142:
		next_state = LEGUP_F_main_BB_preheaderi_143;
LEGUP_F_main_BB_preheaderi_143:
		next_state = LEGUP_F_main_BB_preheaderi_144;
LEGUP_F_main_BB_preheaderi_144:
		next_state = LEGUP_F_main_BB_preheaderi_145;
LEGUP_F_main_BB_preheaderi_145:
		next_state = LEGUP_F_main_BB_preheaderi_146;
LEGUP_F_main_BB_preheaderi_146:
		next_state = LEGUP_F_main_BB_preheaderi_147;
LEGUP_F_main_BB_preheaderi_147:
		next_state = LEGUP_F_main_BB_preheaderi_148;
LEGUP_F_main_BB_preheaderi_148:
		next_state = LEGUP_F_main_BB_preheaderi_149;
LEGUP_F_main_BB_preheaderi_149:
		next_state = LEGUP_F_main_BB_preheaderi_150;
LEGUP_F_main_BB_preheaderi_150:
		next_state = LEGUP_F_main_BB_preheaderi_151;
LEGUP_F_main_BB_preheaderi_151:
		next_state = LEGUP_F_main_BB_preheaderi_152;
LEGUP_F_main_BB_preheaderi_152:
		next_state = LEGUP_F_main_BB_preheaderi_153;
LEGUP_F_main_BB_preheaderi_153:
		next_state = LEGUP_F_main_BB_preheaderi_154;
LEGUP_F_main_BB_preheaderi_154:
		next_state = LEGUP_function_call_155;
LEGUP_F_main_BB_preheaderi_156:
		next_state = LEGUP_F_main_BB_preheaderi_157;
LEGUP_F_main_BB_preheaderi_157:
		next_state = LEGUP_F_main_BB_preheaderi_158;
LEGUP_F_main_BB_preheaderi_158:
		next_state = LEGUP_F_main_BB_preheaderi_159;
LEGUP_F_main_BB_preheaderi_159:
	if ((main_preheaderi_510_reg == 1'd1))
		next_state = LEGUP_F_main_BB_preheaderi_101;
	else if ((main_preheaderi_510_reg == 0))
		next_state = LEGUP_F_main_BB_adpcm_mainexit_160;
LEGUP_F_main_BB_preheaderipreheader_100:
		next_state = LEGUP_F_main_BB_preheaderi_101;
LEGUP_F_main_BB_preheaderipreheader_98:
		next_state = LEGUP_F_main_BB_preheaderipreheader_99;
LEGUP_F_main_BB_preheaderipreheader_99:
		next_state = LEGUP_F_main_BB_preheaderipreheader_100;
LEGUP_F_main_BB_quantlexiti_48:
		next_state = LEGUP_F_main_BB_quantlexiti_49;
LEGUP_F_main_BB_quantlexiti_49:
		next_state = LEGUP_F_main_BB_quantlexiti_50;
LEGUP_F_main_BB_quantlexiti_50:
		next_state = LEGUP_F_main_BB_quantlexiti_51;
LEGUP_F_main_BB_quantlexiti_51:
		next_state = LEGUP_F_main_BB_quantlexiti_52;
LEGUP_F_main_BB_quantlexiti_52:
		next_state = LEGUP_F_main_BB_quantlexiti_53;
LEGUP_F_main_BB_quantlexiti_53:
		next_state = LEGUP_F_main_BB_quantlexiti_54;
LEGUP_F_main_BB_quantlexiti_54:
		next_state = LEGUP_F_main_BB_quantlexiti_55;
LEGUP_F_main_BB_quantlexiti_55:
		next_state = LEGUP_F_main_BB_quantlexiti_56;
LEGUP_F_main_BB_quantlexiti_56:
		next_state = LEGUP_function_call_57;
LEGUP_F_main_BB_quantlexiti_58:
		next_state = LEGUP_F_main_BB_quantlexiti_59;
LEGUP_F_main_BB_quantlexiti_59:
		next_state = LEGUP_F_main_BB_quantlexiti_60;
LEGUP_F_main_BB_quantlexiti_60:
		next_state = LEGUP_F_main_BB_quantlexiti_61;
LEGUP_F_main_BB_quantlexiti_61:
		next_state = LEGUP_F_main_BB_quantlexiti_62;
LEGUP_F_main_BB_quantlexiti_62:
		next_state = LEGUP_F_main_BB_quantlexiti_63;
LEGUP_F_main_BB_quantlexiti_63:
		next_state = LEGUP_F_main_BB_quantlexiti_64;
LEGUP_F_main_BB_quantlexiti_64:
		next_state = LEGUP_F_main_BB_quantlexiti_65;
LEGUP_F_main_BB_quantlexiti_65:
		next_state = LEGUP_F_main_BB_quantlexiti_66;
LEGUP_F_main_BB_quantlexiti_66:
		next_state = LEGUP_F_main_BB_quantlexiti_67;
LEGUP_F_main_BB_quantlexiti_67:
		next_state = LEGUP_F_main_BB_quantlexiti_68;
LEGUP_F_main_BB_quantlexiti_68:
		next_state = LEGUP_F_main_BB_quantlexiti_69;
LEGUP_F_main_BB_quantlexiti_69:
		next_state = LEGUP_F_main_BB_quantlexiti_70;
LEGUP_F_main_BB_quantlexiti_70:
		next_state = LEGUP_F_main_BB_quantlexiti_71;
LEGUP_F_main_BB_quantlexiti_71:
		next_state = LEGUP_F_main_BB_quantlexiti_72;
LEGUP_F_main_BB_quantlexiti_72:
		next_state = LEGUP_F_main_BB_quantlexiti_73;
LEGUP_F_main_BB_quantlexiti_73:
		next_state = LEGUP_F_main_BB_quantlexiti_74;
LEGUP_F_main_BB_quantlexiti_74:
		next_state = LEGUP_F_main_BB_quantlexiti_75;
LEGUP_F_main_BB_quantlexiti_75:
		next_state = LEGUP_F_main_BB_quantlexiti_76;
LEGUP_F_main_BB_quantlexiti_76:
		next_state = LEGUP_F_main_BB_quantlexiti_77;
LEGUP_F_main_BB_quantlexiti_77:
		next_state = LEGUP_function_call_78;
LEGUP_F_main_BB_quantlexiti_79:
		next_state = LEGUP_F_main_BB_quantlexiti_80;
LEGUP_F_main_BB_quantlexiti_80:
		next_state = LEGUP_F_main_BB_quantlexiti_81;
LEGUP_F_main_BB_quantlexiti_81:
		next_state = LEGUP_F_main_BB_quantlexiti_82;
LEGUP_F_main_BB_quantlexiti_82:
		next_state = LEGUP_F_main_BB_quantlexiti_83;
LEGUP_F_main_BB_quantlexiti_83:
		next_state = LEGUP_F_main_BB_quantlexiti_84;
LEGUP_F_main_BB_quantlexiti_84:
	if ((main_quantlexiti_260_reg == 1'd1))
		next_state = LEGUP_F_main_BB_encodeexit_crit_edge_85;
	else if ((main_quantlexiti_260_reg == 0))
		next_state = LEGUP_F_main_BB_preheaderipreheader_98;
LEGUP_function_call_141:
	if ((upzero_finish_final == 1'd1))
		next_state = LEGUP_F_main_BB_preheaderi_142;
LEGUP_function_call_155:
	if ((upzero_finish_final == 1'd1))
		next_state = LEGUP_F_main_BB_preheaderi_156;
LEGUP_function_call_26:
	if ((legup_memset_4_i64_finish_final == 1'd1))
		next_state = LEGUP_F_main_BB__0_27;
LEGUP_function_call_57:
	if ((upzero_finish_final == 1'd1))
		next_state = LEGUP_F_main_BB_quantlexiti_58;
LEGUP_function_call_78:
	if ((upzero_finish_final == 1'd1))
		next_state = LEGUP_F_main_BB_quantlexiti_79;
default:
	next_state = cur_state;
endcase

end
always @(*) begin
	/* main: %1*/
	/*   %2 = phi i32 [ 0, %0 ], [ %.pre49, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB__0_27) & (memory_controller_waitrequest == 0))) begin
		main_1_2 = 32'd0;
	end
	/* main: %1*/
	/*   %2 = phi i32 [ 0, %0 ], [ %.pre49, %encode.exit._crit_edge ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_97) & (memory_controller_waitrequest == 0))) */ begin
		main_1_2 = main_encodeexit_crit_edge_pre49_reg;
	end
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %2 = phi i32 [ 0, %0 ], [ %.pre49, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB__0_27) & (memory_controller_waitrequest == 0))) begin
		main_1_2_reg <= main_1_2;
		if (start == 1'b0 && ^(main_1_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_2_reg"); $finish; end
	end
	/* main: %1*/
	/*   %2 = phi i32 [ 0, %0 ], [ %.pre49, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_97) & (memory_controller_waitrequest == 0))) begin
		main_1_2_reg <= main_1_2;
		if (start == 1'b0 && ^(main_1_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_2_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %3 = phi i32 [ 0, %0 ], [ %.pre48, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB__0_27) & (memory_controller_waitrequest == 0))) begin
		main_1_3 = 32'd0;
	end
	/* main: %1*/
	/*   %3 = phi i32 [ 0, %0 ], [ %.pre48, %encode.exit._crit_edge ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_97) & (memory_controller_waitrequest == 0))) */ begin
		main_1_3 = main_encodeexit_crit_edge_pre48_reg;
	end
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %3 = phi i32 [ 0, %0 ], [ %.pre48, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB__0_27) & (memory_controller_waitrequest == 0))) begin
		main_1_3_reg <= main_1_3;
		if (start == 1'b0 && ^(main_1_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_3_reg"); $finish; end
	end
	/* main: %1*/
	/*   %3 = phi i32 [ 0, %0 ], [ %.pre48, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_97) & (memory_controller_waitrequest == 0))) begin
		main_1_3_reg <= main_1_3;
		if (start == 1'b0 && ^(main_1_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_3_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %4 = phi i32 [ 0, %0 ], [ %.pre47, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB__0_27) & (memory_controller_waitrequest == 0))) begin
		main_1_4 = 32'd0;
	end
	/* main: %1*/
	/*   %4 = phi i32 [ 0, %0 ], [ %.pre47, %encode.exit._crit_edge ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_97) & (memory_controller_waitrequest == 0))) */ begin
		main_1_4 = main_encodeexit_crit_edge_pre47_reg;
	end
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %4 = phi i32 [ 0, %0 ], [ %.pre47, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB__0_27) & (memory_controller_waitrequest == 0))) begin
		main_1_4_reg <= main_1_4;
		if (start == 1'b0 && ^(main_1_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_4_reg"); $finish; end
	end
	/* main: %1*/
	/*   %4 = phi i32 [ 0, %0 ], [ %.pre47, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_97) & (memory_controller_waitrequest == 0))) begin
		main_1_4_reg <= main_1_4;
		if (start == 1'b0 && ^(main_1_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_4_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %5 = phi i32 [ 0, %0 ], [ %.pre46, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB__0_27) & (memory_controller_waitrequest == 0))) begin
		main_1_5 = 32'd0;
	end
	/* main: %1*/
	/*   %5 = phi i32 [ 0, %0 ], [ %.pre46, %encode.exit._crit_edge ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_97) & (memory_controller_waitrequest == 0))) */ begin
		main_1_5 = main_encodeexit_crit_edge_pre46_reg;
	end
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %5 = phi i32 [ 0, %0 ], [ %.pre46, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB__0_27) & (memory_controller_waitrequest == 0))) begin
		main_1_5_reg <= main_1_5;
		if (start == 1'b0 && ^(main_1_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_5_reg"); $finish; end
	end
	/* main: %1*/
	/*   %5 = phi i32 [ 0, %0 ], [ %.pre46, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_97) & (memory_controller_waitrequest == 0))) begin
		main_1_5_reg <= main_1_5;
		if (start == 1'b0 && ^(main_1_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_5_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %6 = phi i32 [ 0, %0 ], [ %.pre45, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB__0_27) & (memory_controller_waitrequest == 0))) begin
		main_1_6 = 32'd0;
	end
	/* main: %1*/
	/*   %6 = phi i32 [ 0, %0 ], [ %.pre45, %encode.exit._crit_edge ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_97) & (memory_controller_waitrequest == 0))) */ begin
		main_1_6 = main_encodeexit_crit_edge_pre45_reg;
	end
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %6 = phi i32 [ 0, %0 ], [ %.pre45, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB__0_27) & (memory_controller_waitrequest == 0))) begin
		main_1_6_reg <= main_1_6;
		if (start == 1'b0 && ^(main_1_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_6_reg"); $finish; end
	end
	/* main: %1*/
	/*   %6 = phi i32 [ 0, %0 ], [ %.pre45, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_97) & (memory_controller_waitrequest == 0))) begin
		main_1_6_reg <= main_1_6;
		if (start == 1'b0 && ^(main_1_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_6_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %7 = phi i32 [ 0, %0 ], [ %.pre44, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB__0_27) & (memory_controller_waitrequest == 0))) begin
		main_1_7 = 32'd0;
	end
	/* main: %1*/
	/*   %7 = phi i32 [ 0, %0 ], [ %.pre44, %encode.exit._crit_edge ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_97) & (memory_controller_waitrequest == 0))) */ begin
		main_1_7 = main_encodeexit_crit_edge_pre44_reg;
	end
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %7 = phi i32 [ 0, %0 ], [ %.pre44, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB__0_27) & (memory_controller_waitrequest == 0))) begin
		main_1_7_reg <= main_1_7;
		if (start == 1'b0 && ^(main_1_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_7_reg"); $finish; end
	end
	/* main: %1*/
	/*   %7 = phi i32 [ 0, %0 ], [ %.pre44, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_97) & (memory_controller_waitrequest == 0))) begin
		main_1_7_reg <= main_1_7;
		if (start == 1'b0 && ^(main_1_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_7_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %8 = phi i32 [ 0, %0 ], [ %.pre43, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB__0_27) & (memory_controller_waitrequest == 0))) begin
		main_1_8 = 32'd0;
	end
	/* main: %1*/
	/*   %8 = phi i32 [ 0, %0 ], [ %.pre43, %encode.exit._crit_edge ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_97) & (memory_controller_waitrequest == 0))) */ begin
		main_1_8 = main_encodeexit_crit_edge_pre43_reg;
	end
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %8 = phi i32 [ 0, %0 ], [ %.pre43, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB__0_27) & (memory_controller_waitrequest == 0))) begin
		main_1_8_reg <= main_1_8;
		if (start == 1'b0 && ^(main_1_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_8_reg"); $finish; end
	end
	/* main: %1*/
	/*   %8 = phi i32 [ 0, %0 ], [ %.pre43, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_97) & (memory_controller_waitrequest == 0))) begin
		main_1_8_reg <= main_1_8;
		if (start == 1'b0 && ^(main_1_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_8_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %9 = phi i32 [ 0, %0 ], [ %.pre42, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB__0_27) & (memory_controller_waitrequest == 0))) begin
		main_1_9 = 32'd0;
	end
	/* main: %1*/
	/*   %9 = phi i32 [ 0, %0 ], [ %.pre42, %encode.exit._crit_edge ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_97) & (memory_controller_waitrequest == 0))) */ begin
		main_1_9 = main_encodeexit_crit_edge_pre42_reg;
	end
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %9 = phi i32 [ 0, %0 ], [ %.pre42, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB__0_27) & (memory_controller_waitrequest == 0))) begin
		main_1_9_reg <= main_1_9;
		if (start == 1'b0 && ^(main_1_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_9_reg"); $finish; end
	end
	/* main: %1*/
	/*   %9 = phi i32 [ 0, %0 ], [ %.pre42, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_97) & (memory_controller_waitrequest == 0))) begin
		main_1_9_reg <= main_1_9;
		if (start == 1'b0 && ^(main_1_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_9_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %10 = phi i32 [ 0, %0 ], [ %.pre41, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB__0_27) & (memory_controller_waitrequest == 0))) begin
		main_1_10 = 32'd0;
	end
	/* main: %1*/
	/*   %10 = phi i32 [ 0, %0 ], [ %.pre41, %encode.exit._crit_edge ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_97) & (memory_controller_waitrequest == 0))) */ begin
		main_1_10 = main_encodeexit_crit_edge_pre41_reg;
	end
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %10 = phi i32 [ 0, %0 ], [ %.pre41, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB__0_27) & (memory_controller_waitrequest == 0))) begin
		main_1_10_reg <= main_1_10;
		if (start == 1'b0 && ^(main_1_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_10_reg"); $finish; end
	end
	/* main: %1*/
	/*   %10 = phi i32 [ 0, %0 ], [ %.pre41, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_97) & (memory_controller_waitrequest == 0))) begin
		main_1_10_reg <= main_1_10;
		if (start == 1'b0 && ^(main_1_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_10_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %11 = phi i32 [ 0, %0 ], [ %.pre40, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB__0_27) & (memory_controller_waitrequest == 0))) begin
		main_1_11 = 32'd0;
	end
	/* main: %1*/
	/*   %11 = phi i32 [ 0, %0 ], [ %.pre40, %encode.exit._crit_edge ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_97) & (memory_controller_waitrequest == 0))) */ begin
		main_1_11 = main_encodeexit_crit_edge_pre40_reg;
	end
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %11 = phi i32 [ 0, %0 ], [ %.pre40, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB__0_27) & (memory_controller_waitrequest == 0))) begin
		main_1_11_reg <= main_1_11;
		if (start == 1'b0 && ^(main_1_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_11_reg"); $finish; end
	end
	/* main: %1*/
	/*   %11 = phi i32 [ 0, %0 ], [ %.pre40, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_97) & (memory_controller_waitrequest == 0))) begin
		main_1_11_reg <= main_1_11;
		if (start == 1'b0 && ^(main_1_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_11_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %12 = phi i32 [ 0, %0 ], [ %.pre39, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB__0_27) & (memory_controller_waitrequest == 0))) begin
		main_1_12 = 32'd0;
	end
	/* main: %1*/
	/*   %12 = phi i32 [ 0, %0 ], [ %.pre39, %encode.exit._crit_edge ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_97) & (memory_controller_waitrequest == 0))) */ begin
		main_1_12 = main_encodeexit_crit_edge_pre39_reg;
	end
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %12 = phi i32 [ 0, %0 ], [ %.pre39, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB__0_27) & (memory_controller_waitrequest == 0))) begin
		main_1_12_reg <= main_1_12;
		if (start == 1'b0 && ^(main_1_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_12_reg"); $finish; end
	end
	/* main: %1*/
	/*   %12 = phi i32 [ 0, %0 ], [ %.pre39, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_97) & (memory_controller_waitrequest == 0))) begin
		main_1_12_reg <= main_1_12;
		if (start == 1'b0 && ^(main_1_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_12_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %13 = phi i32 [ 0, %0 ], [ %.pre38, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB__0_27) & (memory_controller_waitrequest == 0))) begin
		main_1_13 = 32'd0;
	end
	/* main: %1*/
	/*   %13 = phi i32 [ 0, %0 ], [ %.pre38, %encode.exit._crit_edge ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_97) & (memory_controller_waitrequest == 0))) */ begin
		main_1_13 = main_encodeexit_crit_edge_pre38;
	end
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %13 = phi i32 [ 0, %0 ], [ %.pre38, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB__0_27) & (memory_controller_waitrequest == 0))) begin
		main_1_13_reg <= main_1_13;
		if (start == 1'b0 && ^(main_1_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_13_reg"); $finish; end
	end
	/* main: %1*/
	/*   %13 = phi i32 [ 0, %0 ], [ %.pre38, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_97) & (memory_controller_waitrequest == 0))) begin
		main_1_13_reg <= main_1_13;
		if (start == 1'b0 && ^(main_1_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_13_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %14 = phi i32 [ 0, %0 ], [ %.pre37, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB__0_27) & (memory_controller_waitrequest == 0))) begin
		main_1_14 = 32'd0;
	end
	/* main: %1*/
	/*   %14 = phi i32 [ 0, %0 ], [ %.pre37, %encode.exit._crit_edge ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_97) & (memory_controller_waitrequest == 0))) */ begin
		main_1_14 = main_encodeexit_crit_edge_pre37;
	end
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %14 = phi i32 [ 0, %0 ], [ %.pre37, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB__0_27) & (memory_controller_waitrequest == 0))) begin
		main_1_14_reg <= main_1_14;
		if (start == 1'b0 && ^(main_1_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_14_reg"); $finish; end
	end
	/* main: %1*/
	/*   %14 = phi i32 [ 0, %0 ], [ %.pre37, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_97) & (memory_controller_waitrequest == 0))) begin
		main_1_14_reg <= main_1_14;
		if (start == 1'b0 && ^(main_1_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_14_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %15 = phi i32 [ 0, %0 ], [ %.pre36, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB__0_27) & (memory_controller_waitrequest == 0))) begin
		main_1_15 = 32'd0;
	end
	/* main: %1*/
	/*   %15 = phi i32 [ 0, %0 ], [ %.pre36, %encode.exit._crit_edge ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_97) & (memory_controller_waitrequest == 0))) */ begin
		main_1_15 = main_encodeexit_crit_edge_pre36_reg;
	end
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %15 = phi i32 [ 0, %0 ], [ %.pre36, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB__0_27) & (memory_controller_waitrequest == 0))) begin
		main_1_15_reg <= main_1_15;
		if (start == 1'b0 && ^(main_1_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_15_reg"); $finish; end
	end
	/* main: %1*/
	/*   %15 = phi i32 [ 0, %0 ], [ %.pre36, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_97) & (memory_controller_waitrequest == 0))) begin
		main_1_15_reg <= main_1_15;
		if (start == 1'b0 && ^(main_1_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_15_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %16 = phi i32 [ 0, %0 ], [ %.pre35, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB__0_27) & (memory_controller_waitrequest == 0))) begin
		main_1_16 = 32'd0;
	end
	/* main: %1*/
	/*   %16 = phi i32 [ 0, %0 ], [ %.pre35, %encode.exit._crit_edge ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_97) & (memory_controller_waitrequest == 0))) */ begin
		main_1_16 = main_encodeexit_crit_edge_pre35_reg;
	end
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %16 = phi i32 [ 0, %0 ], [ %.pre35, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB__0_27) & (memory_controller_waitrequest == 0))) begin
		main_1_16_reg <= main_1_16;
		if (start == 1'b0 && ^(main_1_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_16_reg"); $finish; end
	end
	/* main: %1*/
	/*   %16 = phi i32 [ 0, %0 ], [ %.pre35, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_97) & (memory_controller_waitrequest == 0))) begin
		main_1_16_reg <= main_1_16;
		if (start == 1'b0 && ^(main_1_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_16_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %17 = phi i32 [ 0, %0 ], [ %.pre34, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB__0_27) & (memory_controller_waitrequest == 0))) begin
		main_1_17 = 32'd0;
	end
	/* main: %1*/
	/*   %17 = phi i32 [ 0, %0 ], [ %.pre34, %encode.exit._crit_edge ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_97) & (memory_controller_waitrequest == 0))) */ begin
		main_1_17 = main_encodeexit_crit_edge_pre34_reg;
	end
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %17 = phi i32 [ 0, %0 ], [ %.pre34, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB__0_27) & (memory_controller_waitrequest == 0))) begin
		main_1_17_reg <= main_1_17;
		if (start == 1'b0 && ^(main_1_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_17_reg"); $finish; end
	end
	/* main: %1*/
	/*   %17 = phi i32 [ 0, %0 ], [ %.pre34, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_97) & (memory_controller_waitrequest == 0))) begin
		main_1_17_reg <= main_1_17;
		if (start == 1'b0 && ^(main_1_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_17_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %18 = phi i32 [ 0, %0 ], [ %.pre33, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB__0_27) & (memory_controller_waitrequest == 0))) begin
		main_1_18 = 32'd0;
	end
	/* main: %1*/
	/*   %18 = phi i32 [ 0, %0 ], [ %.pre33, %encode.exit._crit_edge ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_97) & (memory_controller_waitrequest == 0))) */ begin
		main_1_18 = main_encodeexit_crit_edge_pre33_reg;
	end
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %18 = phi i32 [ 0, %0 ], [ %.pre33, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB__0_27) & (memory_controller_waitrequest == 0))) begin
		main_1_18_reg <= main_1_18;
		if (start == 1'b0 && ^(main_1_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_18_reg"); $finish; end
	end
	/* main: %1*/
	/*   %18 = phi i32 [ 0, %0 ], [ %.pre33, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_97) & (memory_controller_waitrequest == 0))) begin
		main_1_18_reg <= main_1_18;
		if (start == 1'b0 && ^(main_1_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_18_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %19 = phi i32 [ 0, %0 ], [ %.pre32, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB__0_27) & (memory_controller_waitrequest == 0))) begin
		main_1_19 = 32'd0;
	end
	/* main: %1*/
	/*   %19 = phi i32 [ 0, %0 ], [ %.pre32, %encode.exit._crit_edge ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_97) & (memory_controller_waitrequest == 0))) */ begin
		main_1_19 = main_encodeexit_crit_edge_pre32_reg;
	end
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %19 = phi i32 [ 0, %0 ], [ %.pre32, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB__0_27) & (memory_controller_waitrequest == 0))) begin
		main_1_19_reg <= main_1_19;
		if (start == 1'b0 && ^(main_1_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_19_reg"); $finish; end
	end
	/* main: %1*/
	/*   %19 = phi i32 [ 0, %0 ], [ %.pre32, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_97) & (memory_controller_waitrequest == 0))) begin
		main_1_19_reg <= main_1_19;
		if (start == 1'b0 && ^(main_1_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_19_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %20 = phi i32 [ 0, %0 ], [ %.pre31, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB__0_27) & (memory_controller_waitrequest == 0))) begin
		main_1_20 = 32'd0;
	end
	/* main: %1*/
	/*   %20 = phi i32 [ 0, %0 ], [ %.pre31, %encode.exit._crit_edge ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_97) & (memory_controller_waitrequest == 0))) */ begin
		main_1_20 = main_encodeexit_crit_edge_pre31_reg;
	end
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %20 = phi i32 [ 0, %0 ], [ %.pre31, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB__0_27) & (memory_controller_waitrequest == 0))) begin
		main_1_20_reg <= main_1_20;
		if (start == 1'b0 && ^(main_1_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_20_reg"); $finish; end
	end
	/* main: %1*/
	/*   %20 = phi i32 [ 0, %0 ], [ %.pre31, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_97) & (memory_controller_waitrequest == 0))) begin
		main_1_20_reg <= main_1_20;
		if (start == 1'b0 && ^(main_1_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_20_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %21 = phi i32 [ 0, %0 ], [ %.pre30, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB__0_27) & (memory_controller_waitrequest == 0))) begin
		main_1_21 = 32'd0;
	end
	/* main: %1*/
	/*   %21 = phi i32 [ 0, %0 ], [ %.pre30, %encode.exit._crit_edge ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_97) & (memory_controller_waitrequest == 0))) */ begin
		main_1_21 = main_encodeexit_crit_edge_pre30_reg;
	end
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %21 = phi i32 [ 0, %0 ], [ %.pre30, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB__0_27) & (memory_controller_waitrequest == 0))) begin
		main_1_21_reg <= main_1_21;
		if (start == 1'b0 && ^(main_1_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_21_reg"); $finish; end
	end
	/* main: %1*/
	/*   %21 = phi i32 [ 0, %0 ], [ %.pre30, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_97) & (memory_controller_waitrequest == 0))) begin
		main_1_21_reg <= main_1_21;
		if (start == 1'b0 && ^(main_1_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_21_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %22 = phi i32 [ 0, %0 ], [ %.pre29, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB__0_27) & (memory_controller_waitrequest == 0))) begin
		main_1_22 = 32'd0;
	end
	/* main: %1*/
	/*   %22 = phi i32 [ 0, %0 ], [ %.pre29, %encode.exit._crit_edge ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_97) & (memory_controller_waitrequest == 0))) */ begin
		main_1_22 = main_encodeexit_crit_edge_pre29_reg;
	end
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %22 = phi i32 [ 0, %0 ], [ %.pre29, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB__0_27) & (memory_controller_waitrequest == 0))) begin
		main_1_22_reg <= main_1_22;
		if (start == 1'b0 && ^(main_1_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_22_reg"); $finish; end
	end
	/* main: %1*/
	/*   %22 = phi i32 [ 0, %0 ], [ %.pre29, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_97) & (memory_controller_waitrequest == 0))) begin
		main_1_22_reg <= main_1_22;
		if (start == 1'b0 && ^(main_1_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_22_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %23 = phi i32 [ 0, %0 ], [ %.pre28, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB__0_27) & (memory_controller_waitrequest == 0))) begin
		main_1_23 = 32'd0;
	end
	/* main: %1*/
	/*   %23 = phi i32 [ 0, %0 ], [ %.pre28, %encode.exit._crit_edge ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_97) & (memory_controller_waitrequest == 0))) */ begin
		main_1_23 = main_encodeexit_crit_edge_pre28_reg;
	end
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %23 = phi i32 [ 0, %0 ], [ %.pre28, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB__0_27) & (memory_controller_waitrequest == 0))) begin
		main_1_23_reg <= main_1_23;
		if (start == 1'b0 && ^(main_1_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_23_reg"); $finish; end
	end
	/* main: %1*/
	/*   %23 = phi i32 [ 0, %0 ], [ %.pre28, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_97) & (memory_controller_waitrequest == 0))) begin
		main_1_23_reg <= main_1_23;
		if (start == 1'b0 && ^(main_1_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_23_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %24 = phi i32 [ 0, %0 ], [ %.pre27, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB__0_27) & (memory_controller_waitrequest == 0))) begin
		main_1_24 = 32'd0;
	end
	/* main: %1*/
	/*   %24 = phi i32 [ 0, %0 ], [ %.pre27, %encode.exit._crit_edge ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_97) & (memory_controller_waitrequest == 0))) */ begin
		main_1_24 = main_encodeexit_crit_edge_pre27_reg;
	end
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %24 = phi i32 [ 0, %0 ], [ %.pre27, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB__0_27) & (memory_controller_waitrequest == 0))) begin
		main_1_24_reg <= main_1_24;
		if (start == 1'b0 && ^(main_1_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_24_reg"); $finish; end
	end
	/* main: %1*/
	/*   %24 = phi i32 [ 0, %0 ], [ %.pre27, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_97) & (memory_controller_waitrequest == 0))) begin
		main_1_24_reg <= main_1_24;
		if (start == 1'b0 && ^(main_1_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_24_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %25 = phi i32 [ 0, %0 ], [ %.pre26, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB__0_27) & (memory_controller_waitrequest == 0))) begin
		main_1_25 = 32'd0;
	end
	/* main: %1*/
	/*   %25 = phi i32 [ 0, %0 ], [ %.pre26, %encode.exit._crit_edge ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_97) & (memory_controller_waitrequest == 0))) */ begin
		main_1_25 = main_encodeexit_crit_edge_pre26_reg;
	end
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %25 = phi i32 [ 0, %0 ], [ %.pre26, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB__0_27) & (memory_controller_waitrequest == 0))) begin
		main_1_25_reg <= main_1_25;
		if (start == 1'b0 && ^(main_1_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_25_reg"); $finish; end
	end
	/* main: %1*/
	/*   %25 = phi i32 [ 0, %0 ], [ %.pre26, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_97) & (memory_controller_waitrequest == 0))) begin
		main_1_25_reg <= main_1_25;
		if (start == 1'b0 && ^(main_1_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_25_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %26 = phi i32 [ 0, %0 ], [ %.pre25, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB__0_27) & (memory_controller_waitrequest == 0))) begin
		main_1_26 = 32'd0;
	end
	/* main: %1*/
	/*   %26 = phi i32 [ 0, %0 ], [ %.pre25, %encode.exit._crit_edge ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_97) & (memory_controller_waitrequest == 0))) */ begin
		main_1_26 = main_encodeexit_crit_edge_pre25_reg;
	end
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %26 = phi i32 [ 0, %0 ], [ %.pre25, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB__0_27) & (memory_controller_waitrequest == 0))) begin
		main_1_26_reg <= main_1_26;
		if (start == 1'b0 && ^(main_1_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_26_reg"); $finish; end
	end
	/* main: %1*/
	/*   %26 = phi i32 [ 0, %0 ], [ %.pre25, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_97) & (memory_controller_waitrequest == 0))) begin
		main_1_26_reg <= main_1_26;
		if (start == 1'b0 && ^(main_1_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_26_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %27 = phi i32 [ 0, %0 ], [ %.pre24, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB__0_27) & (memory_controller_waitrequest == 0))) begin
		main_1_27 = 32'd0;
	end
	/* main: %1*/
	/*   %27 = phi i32 [ 0, %0 ], [ %.pre24, %encode.exit._crit_edge ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_97) & (memory_controller_waitrequest == 0))) */ begin
		main_1_27 = main_encodeexit_crit_edge_pre24_reg;
	end
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %27 = phi i32 [ 0, %0 ], [ %.pre24, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB__0_27) & (memory_controller_waitrequest == 0))) begin
		main_1_27_reg <= main_1_27;
		if (start == 1'b0 && ^(main_1_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_27_reg"); $finish; end
	end
	/* main: %1*/
	/*   %27 = phi i32 [ 0, %0 ], [ %.pre24, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_97) & (memory_controller_waitrequest == 0))) begin
		main_1_27_reg <= main_1_27;
		if (start == 1'b0 && ^(main_1_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_27_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %28 = phi i32 [ 0, %0 ], [ %.pre23, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB__0_27) & (memory_controller_waitrequest == 0))) begin
		main_1_28 = 32'd0;
	end
	/* main: %1*/
	/*   %28 = phi i32 [ 0, %0 ], [ %.pre23, %encode.exit._crit_edge ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_97) & (memory_controller_waitrequest == 0))) */ begin
		main_1_28 = main_encodeexit_crit_edge_pre23_reg;
	end
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %28 = phi i32 [ 0, %0 ], [ %.pre23, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB__0_27) & (memory_controller_waitrequest == 0))) begin
		main_1_28_reg <= main_1_28;
		if (start == 1'b0 && ^(main_1_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_28_reg"); $finish; end
	end
	/* main: %1*/
	/*   %28 = phi i32 [ 0, %0 ], [ %.pre23, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_97) & (memory_controller_waitrequest == 0))) begin
		main_1_28_reg <= main_1_28;
		if (start == 1'b0 && ^(main_1_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_28_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %29 = phi i32 [ 0, %0 ], [ %.pre22, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB__0_27) & (memory_controller_waitrequest == 0))) begin
		main_1_29 = 32'd0;
	end
	/* main: %1*/
	/*   %29 = phi i32 [ 0, %0 ], [ %.pre22, %encode.exit._crit_edge ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_97) & (memory_controller_waitrequest == 0))) */ begin
		main_1_29 = main_encodeexit_crit_edge_pre22_reg;
	end
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %29 = phi i32 [ 0, %0 ], [ %.pre22, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB__0_27) & (memory_controller_waitrequest == 0))) begin
		main_1_29_reg <= main_1_29;
		if (start == 1'b0 && ^(main_1_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_29_reg"); $finish; end
	end
	/* main: %1*/
	/*   %29 = phi i32 [ 0, %0 ], [ %.pre22, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_97) & (memory_controller_waitrequest == 0))) begin
		main_1_29_reg <= main_1_29;
		if (start == 1'b0 && ^(main_1_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_29_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %30 = phi i32 [ 0, %0 ], [ %.pre21, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB__0_27) & (memory_controller_waitrequest == 0))) begin
		main_1_30 = 32'd0;
	end
	/* main: %1*/
	/*   %30 = phi i32 [ 0, %0 ], [ %.pre21, %encode.exit._crit_edge ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_97) & (memory_controller_waitrequest == 0))) */ begin
		main_1_30 = main_encodeexit_crit_edge_pre21_reg;
	end
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %30 = phi i32 [ 0, %0 ], [ %.pre21, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB__0_27) & (memory_controller_waitrequest == 0))) begin
		main_1_30_reg <= main_1_30;
		if (start == 1'b0 && ^(main_1_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_30_reg"); $finish; end
	end
	/* main: %1*/
	/*   %30 = phi i32 [ 0, %0 ], [ %.pre21, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_97) & (memory_controller_waitrequest == 0))) begin
		main_1_30_reg <= main_1_30;
		if (start == 1'b0 && ^(main_1_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_30_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %31 = phi i32 [ 0, %0 ], [ %.pre20, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB__0_27) & (memory_controller_waitrequest == 0))) begin
		main_1_31 = 32'd0;
	end
	/* main: %1*/
	/*   %31 = phi i32 [ 0, %0 ], [ %.pre20, %encode.exit._crit_edge ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_97) & (memory_controller_waitrequest == 0))) */ begin
		main_1_31 = main_encodeexit_crit_edge_pre20_reg;
	end
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %31 = phi i32 [ 0, %0 ], [ %.pre20, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB__0_27) & (memory_controller_waitrequest == 0))) begin
		main_1_31_reg <= main_1_31;
		if (start == 1'b0 && ^(main_1_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_31_reg"); $finish; end
	end
	/* main: %1*/
	/*   %31 = phi i32 [ 0, %0 ], [ %.pre20, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_97) & (memory_controller_waitrequest == 0))) begin
		main_1_31_reg <= main_1_31;
		if (start == 1'b0 && ^(main_1_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_31_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %32 = phi i32 [ 0, %0 ], [ %.pre19, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB__0_27) & (memory_controller_waitrequest == 0))) begin
		main_1_32 = 32'd0;
	end
	/* main: %1*/
	/*   %32 = phi i32 [ 0, %0 ], [ %.pre19, %encode.exit._crit_edge ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_97) & (memory_controller_waitrequest == 0))) */ begin
		main_1_32 = main_encodeexit_crit_edge_pre19_reg;
	end
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %32 = phi i32 [ 0, %0 ], [ %.pre19, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB__0_27) & (memory_controller_waitrequest == 0))) begin
		main_1_32_reg <= main_1_32;
		if (start == 1'b0 && ^(main_1_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_32_reg"); $finish; end
	end
	/* main: %1*/
	/*   %32 = phi i32 [ 0, %0 ], [ %.pre19, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_97) & (memory_controller_waitrequest == 0))) begin
		main_1_32_reg <= main_1_32;
		if (start == 1'b0 && ^(main_1_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_32_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %33 = phi i32 [ 0, %0 ], [ %.pre18, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB__0_27) & (memory_controller_waitrequest == 0))) begin
		main_1_33 = 32'd0;
	end
	/* main: %1*/
	/*   %33 = phi i32 [ 0, %0 ], [ %.pre18, %encode.exit._crit_edge ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_97) & (memory_controller_waitrequest == 0))) */ begin
		main_1_33 = main_encodeexit_crit_edge_pre18_reg;
	end
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %33 = phi i32 [ 0, %0 ], [ %.pre18, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB__0_27) & (memory_controller_waitrequest == 0))) begin
		main_1_33_reg <= main_1_33;
		if (start == 1'b0 && ^(main_1_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_33_reg"); $finish; end
	end
	/* main: %1*/
	/*   %33 = phi i32 [ 0, %0 ], [ %.pre18, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_97) & (memory_controller_waitrequest == 0))) begin
		main_1_33_reg <= main_1_33;
		if (start == 1'b0 && ^(main_1_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_33_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %34 = phi i32 [ 0, %0 ], [ %.pre17, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB__0_27) & (memory_controller_waitrequest == 0))) begin
		main_1_34 = 32'd0;
	end
	/* main: %1*/
	/*   %34 = phi i32 [ 0, %0 ], [ %.pre17, %encode.exit._crit_edge ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_97) & (memory_controller_waitrequest == 0))) */ begin
		main_1_34 = main_encodeexit_crit_edge_pre17_reg;
	end
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %34 = phi i32 [ 0, %0 ], [ %.pre17, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB__0_27) & (memory_controller_waitrequest == 0))) begin
		main_1_34_reg <= main_1_34;
		if (start == 1'b0 && ^(main_1_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_34_reg"); $finish; end
	end
	/* main: %1*/
	/*   %34 = phi i32 [ 0, %0 ], [ %.pre17, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_97) & (memory_controller_waitrequest == 0))) begin
		main_1_34_reg <= main_1_34;
		if (start == 1'b0 && ^(main_1_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_34_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %35 = phi i32 [ 0, %0 ], [ %.pre16, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB__0_27) & (memory_controller_waitrequest == 0))) begin
		main_1_35 = 32'd0;
	end
	/* main: %1*/
	/*   %35 = phi i32 [ 0, %0 ], [ %.pre16, %encode.exit._crit_edge ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_97) & (memory_controller_waitrequest == 0))) */ begin
		main_1_35 = main_encodeexit_crit_edge_pre16_reg;
	end
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %35 = phi i32 [ 0, %0 ], [ %.pre16, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB__0_27) & (memory_controller_waitrequest == 0))) begin
		main_1_35_reg <= main_1_35;
		if (start == 1'b0 && ^(main_1_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_35_reg"); $finish; end
	end
	/* main: %1*/
	/*   %35 = phi i32 [ 0, %0 ], [ %.pre16, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_97) & (memory_controller_waitrequest == 0))) begin
		main_1_35_reg <= main_1_35;
		if (start == 1'b0 && ^(main_1_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_35_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %36 = phi i32 [ 0, %0 ], [ %.pre, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB__0_27) & (memory_controller_waitrequest == 0))) begin
		main_1_36 = 32'd0;
	end
	/* main: %1*/
	/*   %36 = phi i32 [ 0, %0 ], [ %.pre, %encode.exit._crit_edge ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_97) & (memory_controller_waitrequest == 0))) */ begin
		main_1_36 = main_encodeexit_crit_edge_pre_reg;
	end
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %36 = phi i32 [ 0, %0 ], [ %.pre, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB__0_27) & (memory_controller_waitrequest == 0))) begin
		main_1_36_reg <= main_1_36;
		if (start == 1'b0 && ^(main_1_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_36_reg"); $finish; end
	end
	/* main: %1*/
	/*   %36 = phi i32 [ 0, %0 ], [ %.pre, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_97) & (memory_controller_waitrequest == 0))) begin
		main_1_36_reg <= main_1_36;
		if (start == 1'b0 && ^(main_1_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_36_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %ph2.0 = phi i32 [ 0, %0 ], [ %ph1.0, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB__0_27) & (memory_controller_waitrequest == 0))) begin
		main_1_ph20 = 32'd0;
	end
	/* main: %1*/
	/*   %ph2.0 = phi i32 [ 0, %0 ], [ %ph1.0, %encode.exit._crit_edge ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_97) & (memory_controller_waitrequest == 0))) */ begin
		main_1_ph20 = main_1_ph10_reg;
	end
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %ph2.0 = phi i32 [ 0, %0 ], [ %ph1.0, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB__0_27) & (memory_controller_waitrequest == 0))) begin
		main_1_ph20_reg <= main_1_ph20;
		if (start == 1'b0 && ^(main_1_ph20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_ph20_reg"); $finish; end
	end
	/* main: %1*/
	/*   %ph2.0 = phi i32 [ 0, %0 ], [ %ph1.0, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_97) & (memory_controller_waitrequest == 0))) begin
		main_1_ph20_reg <= main_1_ph20;
		if (start == 1'b0 && ^(main_1_ph20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_ph20_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %ph1.0 = phi i32 [ 0, %0 ], [ %230, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB__0_27) & (memory_controller_waitrequest == 0))) begin
		main_1_ph10 = 32'd0;
	end
	/* main: %1*/
	/*   %ph1.0 = phi i32 [ 0, %0 ], [ %230, %encode.exit._crit_edge ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_97) & (memory_controller_waitrequest == 0))) */ begin
		main_1_ph10 = main_quantlexiti_230_reg;
	end
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %ph1.0 = phi i32 [ 0, %0 ], [ %230, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB__0_27) & (memory_controller_waitrequest == 0))) begin
		main_1_ph10_reg <= main_1_ph10;
		if (start == 1'b0 && ^(main_1_ph10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_ph10_reg"); $finish; end
	end
	/* main: %1*/
	/*   %ph1.0 = phi i32 [ 0, %0 ], [ %230, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_97) & (memory_controller_waitrequest == 0))) begin
		main_1_ph10_reg <= main_1_ph10;
		if (start == 1'b0 && ^(main_1_ph10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_ph10_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %nbh.0 = phi i32 [ 0, %0 ], [ %...i2.i2, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB__0_27) & (memory_controller_waitrequest == 0))) begin
		main_1_nbh0 = 32'd0;
	end
	/* main: %1*/
	/*   %nbh.0 = phi i32 [ 0, %0 ], [ %...i2.i2, %encode.exit._crit_edge ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_97) & (memory_controller_waitrequest == 0))) */ begin
		main_1_nbh0 = main_quantlexiti_i2i2_reg;
	end
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %nbh.0 = phi i32 [ 0, %0 ], [ %...i2.i2, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB__0_27) & (memory_controller_waitrequest == 0))) begin
		main_1_nbh0_reg <= main_1_nbh0;
		if (start == 1'b0 && ^(main_1_nbh0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_nbh0_reg"); $finish; end
	end
	/* main: %1*/
	/*   %nbh.0 = phi i32 [ 0, %0 ], [ %...i2.i2, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_97) & (memory_controller_waitrequest == 0))) begin
		main_1_nbh0_reg <= main_1_nbh0;
		if (start == 1'b0 && ^(main_1_nbh0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_nbh0_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %deth.0 = phi i32 [ 8, %0 ], [ %229, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB__0_27) & (memory_controller_waitrequest == 0))) begin
		main_1_deth0 = 32'd8;
	end
	/* main: %1*/
	/*   %deth.0 = phi i32 [ 8, %0 ], [ %229, %encode.exit._crit_edge ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_97) & (memory_controller_waitrequest == 0))) */ begin
		main_1_deth0 = main_quantlexiti_229_reg;
	end
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %deth.0 = phi i32 [ 8, %0 ], [ %229, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB__0_27) & (memory_controller_waitrequest == 0))) begin
		main_1_deth0_reg <= main_1_deth0;
		if (start == 1'b0 && ^(main_1_deth0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_deth0_reg"); $finish; end
	end
	/* main: %1*/
	/*   %deth.0 = phi i32 [ 8, %0 ], [ %229, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_97) & (memory_controller_waitrequest == 0))) begin
		main_1_deth0_reg <= main_1_deth0;
		if (start == 1'b0 && ^(main_1_deth0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_deth0_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %ah2.0 = phi i32 [ 0, %0 ], [ %...i.i6, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB__0_27) & (memory_controller_waitrequest == 0))) begin
		main_1_ah20 = 32'd0;
	end
	/* main: %1*/
	/*   %ah2.0 = phi i32 [ 0, %0 ], [ %...i.i6, %encode.exit._crit_edge ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_97) & (memory_controller_waitrequest == 0))) */ begin
		main_1_ah20 = main_quantlexiti_ii6_reg;
	end
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %ah2.0 = phi i32 [ 0, %0 ], [ %...i.i6, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB__0_27) & (memory_controller_waitrequest == 0))) begin
		main_1_ah20_reg <= main_1_ah20;
		if (start == 1'b0 && ^(main_1_ah20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_ah20_reg"); $finish; end
	end
	/* main: %1*/
	/*   %ah2.0 = phi i32 [ 0, %0 ], [ %...i.i6, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_97) & (memory_controller_waitrequest == 0))) begin
		main_1_ah20_reg <= main_1_ah20;
		if (start == 1'b0 && ^(main_1_ah20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_ah20_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %rh2.0 = phi i32 [ 0, %0 ], [ %rh1.0, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB__0_27) & (memory_controller_waitrequest == 0))) begin
		main_1_rh20 = 32'd0;
	end
	/* main: %1*/
	/*   %rh2.0 = phi i32 [ 0, %0 ], [ %rh1.0, %encode.exit._crit_edge ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_97) & (memory_controller_waitrequest == 0))) */ begin
		main_1_rh20 = main_1_rh10_reg;
	end
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %rh2.0 = phi i32 [ 0, %0 ], [ %rh1.0, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB__0_27) & (memory_controller_waitrequest == 0))) begin
		main_1_rh20_reg <= main_1_rh20;
		if (start == 1'b0 && ^(main_1_rh20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_rh20_reg"); $finish; end
	end
	/* main: %1*/
	/*   %rh2.0 = phi i32 [ 0, %0 ], [ %rh1.0, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_97) & (memory_controller_waitrequest == 0))) begin
		main_1_rh20_reg <= main_1_rh20;
		if (start == 1'b0 && ^(main_1_rh20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_rh20_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %ah1.0 = phi i32 [ 0, %0 ], [ %apl1.2.i.i9, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB__0_27) & (memory_controller_waitrequest == 0))) begin
		main_1_ah10 = 32'd0;
	end
	/* main: %1*/
	/*   %ah1.0 = phi i32 [ 0, %0 ], [ %apl1.2.i.i9, %encode.exit._crit_edge ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_97) & (memory_controller_waitrequest == 0))) */ begin
		main_1_ah10 = main_quantlexiti_apl12ii9_reg;
	end
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %ah1.0 = phi i32 [ 0, %0 ], [ %apl1.2.i.i9, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB__0_27) & (memory_controller_waitrequest == 0))) begin
		main_1_ah10_reg <= main_1_ah10;
		if (start == 1'b0 && ^(main_1_ah10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_ah10_reg"); $finish; end
	end
	/* main: %1*/
	/*   %ah1.0 = phi i32 [ 0, %0 ], [ %apl1.2.i.i9, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_97) & (memory_controller_waitrequest == 0))) begin
		main_1_ah10_reg <= main_1_ah10;
		if (start == 1'b0 && ^(main_1_ah10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_ah10_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %rh1.0 = phi i32 [ 0, %0 ], [ %254, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB__0_27) & (memory_controller_waitrequest == 0))) begin
		main_1_rh10 = 32'd0;
	end
	/* main: %1*/
	/*   %rh1.0 = phi i32 [ 0, %0 ], [ %254, %encode.exit._crit_edge ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_97) & (memory_controller_waitrequest == 0))) */ begin
		main_1_rh10 = main_quantlexiti_254_reg;
	end
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %rh1.0 = phi i32 [ 0, %0 ], [ %254, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB__0_27) & (memory_controller_waitrequest == 0))) begin
		main_1_rh10_reg <= main_1_rh10;
		if (start == 1'b0 && ^(main_1_rh10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_rh10_reg"); $finish; end
	end
	/* main: %1*/
	/*   %rh1.0 = phi i32 [ 0, %0 ], [ %254, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_97) & (memory_controller_waitrequest == 0))) begin
		main_1_rh10_reg <= main_1_rh10;
		if (start == 1'b0 && ^(main_1_rh10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_rh10_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %plt2.0 = phi i32 [ 0, %0 ], [ %plt1.0, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB__0_27) & (memory_controller_waitrequest == 0))) begin
		main_1_plt20 = 32'd0;
	end
	/* main: %1*/
	/*   %plt2.0 = phi i32 [ 0, %0 ], [ %plt1.0, %encode.exit._crit_edge ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_97) & (memory_controller_waitrequest == 0))) */ begin
		main_1_plt20 = main_1_plt10_reg;
	end
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %plt2.0 = phi i32 [ 0, %0 ], [ %plt1.0, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB__0_27) & (memory_controller_waitrequest == 0))) begin
		main_1_plt20_reg <= main_1_plt20;
		if (start == 1'b0 && ^(main_1_plt20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_plt20_reg"); $finish; end
	end
	/* main: %1*/
	/*   %plt2.0 = phi i32 [ 0, %0 ], [ %plt1.0, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_97) & (memory_controller_waitrequest == 0))) begin
		main_1_plt20_reg <= main_1_plt20;
		if (start == 1'b0 && ^(main_1_plt20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_plt20_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %plt1.0 = phi i32 [ 0, %0 ], [ %125, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB__0_27) & (memory_controller_waitrequest == 0))) begin
		main_1_plt10 = 32'd0;
	end
	/* main: %1*/
	/*   %plt1.0 = phi i32 [ 0, %0 ], [ %125, %encode.exit._crit_edge ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_97) & (memory_controller_waitrequest == 0))) */ begin
		main_1_plt10 = main_quantlexiti_125_reg;
	end
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %plt1.0 = phi i32 [ 0, %0 ], [ %125, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB__0_27) & (memory_controller_waitrequest == 0))) begin
		main_1_plt10_reg <= main_1_plt10;
		if (start == 1'b0 && ^(main_1_plt10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_plt10_reg"); $finish; end
	end
	/* main: %1*/
	/*   %plt1.0 = phi i32 [ 0, %0 ], [ %125, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_97) & (memory_controller_waitrequest == 0))) begin
		main_1_plt10_reg <= main_1_plt10;
		if (start == 1'b0 && ^(main_1_plt10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_plt10_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %nbl.0 = phi i32 [ 0, %0 ], [ %...i12.i, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB__0_27) & (memory_controller_waitrequest == 0))) begin
		main_1_nbl0 = 32'd0;
	end
	/* main: %1*/
	/*   %nbl.0 = phi i32 [ 0, %0 ], [ %...i12.i, %encode.exit._crit_edge ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_97) & (memory_controller_waitrequest == 0))) */ begin
		main_1_nbl0 = main_quantlexiti_i12i_reg;
	end
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %nbl.0 = phi i32 [ 0, %0 ], [ %...i12.i, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB__0_27) & (memory_controller_waitrequest == 0))) begin
		main_1_nbl0_reg <= main_1_nbl0;
		if (start == 1'b0 && ^(main_1_nbl0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_nbl0_reg"); $finish; end
	end
	/* main: %1*/
	/*   %nbl.0 = phi i32 [ 0, %0 ], [ %...i12.i, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_97) & (memory_controller_waitrequest == 0))) begin
		main_1_nbl0_reg <= main_1_nbl0;
		if (start == 1'b0 && ^(main_1_nbl0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_nbl0_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %detl.0 = phi i32 [ 32, %0 ], [ %124, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB__0_27) & (memory_controller_waitrequest == 0))) begin
		main_1_detl0 = 32'd32;
	end
	/* main: %1*/
	/*   %detl.0 = phi i32 [ 32, %0 ], [ %124, %encode.exit._crit_edge ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_97) & (memory_controller_waitrequest == 0))) */ begin
		main_1_detl0 = main_quantlexiti_124_reg;
	end
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %detl.0 = phi i32 [ 32, %0 ], [ %124, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB__0_27) & (memory_controller_waitrequest == 0))) begin
		main_1_detl0_reg <= main_1_detl0;
		if (start == 1'b0 && ^(main_1_detl0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_detl0_reg"); $finish; end
	end
	/* main: %1*/
	/*   %detl.0 = phi i32 [ 32, %0 ], [ %124, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_97) & (memory_controller_waitrequest == 0))) begin
		main_1_detl0_reg <= main_1_detl0;
		if (start == 1'b0 && ^(main_1_detl0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_detl0_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %al2.0 = phi i32 [ 0, %0 ], [ %...i10.i, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB__0_27) & (memory_controller_waitrequest == 0))) begin
		main_1_al20 = 32'd0;
	end
	/* main: %1*/
	/*   %al2.0 = phi i32 [ 0, %0 ], [ %...i10.i, %encode.exit._crit_edge ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_97) & (memory_controller_waitrequest == 0))) */ begin
		main_1_al20 = main_quantlexiti_i10i_reg;
	end
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %al2.0 = phi i32 [ 0, %0 ], [ %...i10.i, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB__0_27) & (memory_controller_waitrequest == 0))) begin
		main_1_al20_reg <= main_1_al20;
		if (start == 1'b0 && ^(main_1_al20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_al20_reg"); $finish; end
	end
	/* main: %1*/
	/*   %al2.0 = phi i32 [ 0, %0 ], [ %...i10.i, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_97) & (memory_controller_waitrequest == 0))) begin
		main_1_al20_reg <= main_1_al20;
		if (start == 1'b0 && ^(main_1_al20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_al20_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %rlt2.0 = phi i32 [ 0, %0 ], [ %rlt1.0, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB__0_27) & (memory_controller_waitrequest == 0))) begin
		main_1_rlt20 = 32'd0;
	end
	/* main: %1*/
	/*   %rlt2.0 = phi i32 [ 0, %0 ], [ %rlt1.0, %encode.exit._crit_edge ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_97) & (memory_controller_waitrequest == 0))) */ begin
		main_1_rlt20 = main_1_rlt10_reg;
	end
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %rlt2.0 = phi i32 [ 0, %0 ], [ %rlt1.0, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB__0_27) & (memory_controller_waitrequest == 0))) begin
		main_1_rlt20_reg <= main_1_rlt20;
		if (start == 1'b0 && ^(main_1_rlt20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_rlt20_reg"); $finish; end
	end
	/* main: %1*/
	/*   %rlt2.0 = phi i32 [ 0, %0 ], [ %rlt1.0, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_97) & (memory_controller_waitrequest == 0))) begin
		main_1_rlt20_reg <= main_1_rlt20;
		if (start == 1'b0 && ^(main_1_rlt20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_rlt20_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %al1.0 = phi i32 [ 0, %0 ], [ %apl1.2.i6.i, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB__0_27) & (memory_controller_waitrequest == 0))) begin
		main_1_al10 = 32'd0;
	end
	/* main: %1*/
	/*   %al1.0 = phi i32 [ 0, %0 ], [ %apl1.2.i6.i, %encode.exit._crit_edge ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_97) & (memory_controller_waitrequest == 0))) */ begin
		main_1_al10 = main_quantlexiti_apl12i6i_reg;
	end
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %al1.0 = phi i32 [ 0, %0 ], [ %apl1.2.i6.i, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB__0_27) & (memory_controller_waitrequest == 0))) begin
		main_1_al10_reg <= main_1_al10;
		if (start == 1'b0 && ^(main_1_al10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_al10_reg"); $finish; end
	end
	/* main: %1*/
	/*   %al1.0 = phi i32 [ 0, %0 ], [ %apl1.2.i6.i, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_97) & (memory_controller_waitrequest == 0))) begin
		main_1_al10_reg <= main_1_al10;
		if (start == 1'b0 && ^(main_1_al10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_al10_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %rlt1.0 = phi i32 [ 0, %0 ], [ %149, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB__0_27) & (memory_controller_waitrequest == 0))) begin
		main_1_rlt10 = 32'd0;
	end
	/* main: %1*/
	/*   %rlt1.0 = phi i32 [ 0, %0 ], [ %149, %encode.exit._crit_edge ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_97) & (memory_controller_waitrequest == 0))) */ begin
		main_1_rlt10 = main_quantlexiti_149_reg;
	end
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %rlt1.0 = phi i32 [ 0, %0 ], [ %149, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB__0_27) & (memory_controller_waitrequest == 0))) begin
		main_1_rlt10_reg <= main_1_rlt10;
		if (start == 1'b0 && ^(main_1_rlt10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_rlt10_reg"); $finish; end
	end
	/* main: %1*/
	/*   %rlt1.0 = phi i32 [ 0, %0 ], [ %149, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_97) & (memory_controller_waitrequest == 0))) begin
		main_1_rlt10_reg <= main_1_rlt10;
		if (start == 1'b0 && ^(main_1_rlt10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_rlt10_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %i.02.i = phi i32 [ 0, %0 ], [ %259, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB__0_27) & (memory_controller_waitrequest == 0))) begin
		main_1_i02i = 32'd0;
	end
	/* main: %1*/
	/*   %i.02.i = phi i32 [ 0, %0 ], [ %259, %encode.exit._crit_edge ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_97) & (memory_controller_waitrequest == 0))) */ begin
		main_1_i02i = main_quantlexiti_259_reg;
	end
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %i.02.i = phi i32 [ 0, %0 ], [ %259, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB__0_27) & (memory_controller_waitrequest == 0))) begin
		main_1_i02i_reg <= main_1_i02i;
		if (start == 1'b0 && ^(main_1_i02i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_i02i_reg"); $finish; end
	end
	/* main: %1*/
	/*   %i.02.i = phi i32 [ 0, %0 ], [ %259, %encode.exit._crit_edge ]*/
	if (((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_97) & (memory_controller_waitrequest == 0))) begin
		main_1_i02i_reg <= main_1_i02i;
		if (start == 1'b0 && ^(main_1_i02i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_i02i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %gep_int = ptrtoint [100 x i32]* @test_data to i32*/
if (reset) begin main_1_gep_int = 0; end
		main_1_gep_int = 0;
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %gep_int = ptrtoint [100 x i32]* @test_data to i32*/
	if ((cur_state == LEGUP_F_main_BB__1_28)) begin
		main_1_gep_int_reg <= main_1_gep_int;
		if (start == 1'b0 && ^(main_1_gep_int) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_gep_int_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %gep_array = mul i32 %i.02.i, 4*/
		main_1_gep_array = (main_1_i02i_reg * 32'd4);
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %gep_array = mul i32 %i.02.i, 4*/
	if ((cur_state == LEGUP_F_main_BB__1_28)) begin
		main_1_gep_array_reg <= main_1_gep_array;
		if (start == 1'b0 && ^(main_1_gep_array) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_gep_array_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %gep = add i32 %gep_int, %gep_array*/
		main_1_gep = main_signed_add_32_0;
end
always @(*) begin
/* main: %1*/
/*   %gep = add i32 %gep_int, %gep_array*/
	main_1_gep_reg = main_1_90_reg;
end
always @(*) begin
	/* main: %1*/
	/*   %37 = inttoptr i32 %gep to i32**/
		main_1_37 = main_1_gep;
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %37 = inttoptr i32 %gep to i32**/
	if ((cur_state == LEGUP_F_main_BB__1_29)) begin
		main_1_37_reg <= main_1_37;
		if (start == 1'b0 && ^(main_1_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_37_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %38 = load i32* %37, align 4, !tbaa !1*/
		main_1_38 = test_data_out_a;
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %38 = load i32* %37, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_30)) begin
		main_1_38_reg <= main_1_38;
		if (start == 1'b0 && ^(main_1_38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_38_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %39 = or i32 %i.02.i, 1*/
		main_1_39 = (main_1_i02i_reg | 32'd1);
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %39 = or i32 %i.02.i, 1*/
	if ((cur_state == LEGUP_F_main_BB__1_28)) begin
		main_1_39_reg <= main_1_39;
		if (start == 1'b0 && ^(main_1_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_39_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %gep_int1 = ptrtoint [100 x i32]* @test_data to i32*/
if (reset) begin main_1_gep_int1 = 0; end
		main_1_gep_int1 = 0;
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %gep_int1 = ptrtoint [100 x i32]* @test_data to i32*/
	if ((cur_state == LEGUP_F_main_BB__1_28)) begin
		main_1_gep_int1_reg <= main_1_gep_int1;
		if (start == 1'b0 && ^(main_1_gep_int1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_gep_int1_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %gep_array2 = mul i32 %39, 4*/
		main_1_gep_array2 = (main_1_39 * 32'd4);
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %gep_array2 = mul i32 %39, 4*/
	if ((cur_state == LEGUP_F_main_BB__1_28)) begin
		main_1_gep_array2_reg <= main_1_gep_array2;
		if (start == 1'b0 && ^(main_1_gep_array2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_gep_array2_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %gep3 = add i32 %gep_int1, %gep_array2*/
		main_1_gep3 = main_signed_add_32_1;
end
always @(*) begin
/* main: %1*/
/*   %gep3 = add i32 %gep_int1, %gep_array2*/
	main_1_gep3_reg = main_1_88_reg;
end
always @(*) begin
	/* main: %1*/
	/*   %40 = inttoptr i32 %gep3 to i32**/
		main_1_40 = main_1_gep3;
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %40 = inttoptr i32 %gep3 to i32**/
	if ((cur_state == LEGUP_F_main_BB__1_29)) begin
		main_1_40_reg <= main_1_40;
		if (start == 1'b0 && ^(main_1_40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_40_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %41 = load i32* %40, align 4, !tbaa !1*/
		main_1_41 = test_data_out_b;
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %41 = load i32* %40, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_30)) begin
		main_1_41_reg <= main_1_41;
		if (start == 1'b0 && ^(main_1_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_41_reg"); $finish; end
	end
end
always @(*) begin
	main_1_42 = main_signed_multiply_32_0;
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %42 = mul nsw i32 %35, 212*/
	if ((cur_state == LEGUP_F_main_BB__1_29)) begin
		main_1_42_reg <= main_1_42;
		if (start == 1'b0 && ^(main_1_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_42_reg"); $finish; end
	end
	/* main: %1*/
	/*   %42 = mul nsw i32 %35, 212*/
	if ((cur_state == LEGUP_F_main_BB__1_29)) begin
		main_1_42_reg <= main_1_42;
		if (start == 1'b0 && ^(main_1_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_42_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %313 = mul nsw i32 %312, %dec_al2.0*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_102)) begin
		main_1_42_reg <= main_preheaderi_313;
		if (start == 1'b0 && ^(main_preheaderi_313) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_42_reg"); $finish; end
	end
end
always @(*) begin
	main_1_43 = main_signed_multiply_32_1;
end
always @(*) begin
/* main: %1*/
/*   %43 = mul nsw i32 %34, -44*/
	main_1_43_reg = main_preheaderi_321_reg;
end
always @(*) begin
	main_1_44 = main_signed_multiply_32_2;
end
always @(*) begin
/* main: %1*/
/*   %44 = mul nsw i32 %33, -44*/
	main_1_44_reg = main_preheaderi_324_reg;
end
always @(*) begin
	main_1_45 = main_signed_multiply_32_3;
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %45 = mul nsw i32 %32, 12*/
	if ((cur_state == LEGUP_F_main_BB__1_29)) begin
		main_1_45_reg <= main_1_45;
		if (start == 1'b0 && ^(main_1_45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_45_reg"); $finish; end
	end
	/* main: %1*/
	/*   %45 = mul nsw i32 %32, 12*/
	if ((cur_state == LEGUP_F_main_BB__1_29)) begin
		main_1_45_reg <= main_1_45;
		if (start == 1'b0 && ^(main_1_45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_45_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %349 = mul nsw i32 %dec_al2.0, 127*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_102)) begin
		main_1_45_reg <= main_preheaderi_349;
		if (start == 1'b0 && ^(main_preheaderi_349) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_45_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %46 = add nsw i32 %43, %42*/
		main_1_46 = main_signed_add_32_2;
end
always @(*) begin
/* main: %1*/
/*   %46 = add nsw i32 %43, %42*/
	main_1_46_reg = main_preheaderi_315_reg;
end
always @(*) begin
	/* main: %1*/
	/*   %47 = add nsw i32 %45, %44*/
		main_1_47 = main_signed_add_32_3;
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %47 = add nsw i32 %45, %44*/
	if ((cur_state == LEGUP_F_main_BB__1_29)) begin
		main_1_47_reg <= main_1_47;
		if (start == 1'b0 && ^(main_1_47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_47_reg"); $finish; end
	end
	/* main: %quantl.exit.i*/
	/*   %207 = add nsw i32 %200, 2*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_70)) begin
		main_1_47_reg <= main_quantlexiti_207;
		if (start == 1'b0 && ^(main_quantlexiti_207) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_47_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %461 = add nsw i32 %460, %458*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_156)) begin
		main_1_47_reg <= main_preheaderi_461;
		if (start == 1'b0 && ^(main_preheaderi_461) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_47_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %501 = add nsw i32 %500, %497*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_157)) begin
		main_1_47_reg <= main_preheaderi_501;
		if (start == 1'b0 && ^(main_preheaderi_501) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_47_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %48 = add nsw i32 %47, %46*/
		main_1_48 = main_signed_add_32_4;
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %48 = add nsw i32 %47, %46*/
	if ((cur_state == LEGUP_F_main_BB__1_29)) begin
		main_1_48_reg <= main_1_48;
		if (start == 1'b0 && ^(main_1_48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_48_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %463 = add nsw i32 %462, %459*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_156)) begin
		main_1_48_reg <= main_preheaderi_463;
		if (start == 1'b0 && ^(main_preheaderi_463) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_48_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %503 = add nsw i32 %502, %499*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_157)) begin
		main_1_48_reg <= main_preheaderi_503;
		if (start == 1'b0 && ^(main_preheaderi_503) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_48_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %49 = ashr i32 %48, 15*/
		main_1_49 = ($signed(main_1_48) >>> 32'd15);
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %49 = ashr i32 %48, 15*/
	if ((cur_state == LEGUP_F_main_BB__1_29)) begin
		main_1_49_reg <= main_1_49;
		if (start == 1'b0 && ^(main_1_49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_49_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %50 = sub nsw i32 %46, %47*/
		main_1_50 = main_signed_subtract_32_0;
end
always @(*) begin
/* main: %1*/
/*   %50 = sub nsw i32 %46, %47*/
	main_1_50_reg = main_1_91_reg;
end
always @(*) begin
	/* main: %1*/
	/*   %51 = ashr i32 %50, 15*/
		main_1_51 = ($signed(main_1_50) >>> 32'd15);
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %51 = ashr i32 %50, 15*/
	if ((cur_state == LEGUP_F_main_BB__1_29)) begin
		main_1_51_reg <= main_1_51;
		if (start == 1'b0 && ^(main_1_51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_51_reg"); $finish; end
	end
end
always @(*) begin
	main_1_52 = main_signed_multiply_32_4;
end
always @(*) begin
/* main: %1*/
/*   %52 = mul nsw i32 %11, %12*/
	main_1_52_reg = main_1_89_reg;
end
always @(*) begin
	main_1_53 = main_signed_multiply_32_5;
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %53 = mul nsw i32 %9, %10*/
	if ((cur_state == LEGUP_F_main_BB__1_29)) begin
		main_1_53_reg <= main_1_53;
		if (start == 1'b0 && ^(main_1_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_53_reg"); $finish; end
	end
	/* main: %1*/
	/*   %53 = mul nsw i32 %9, %10*/
	if ((cur_state == LEGUP_F_main_BB__1_29)) begin
		main_1_53_reg <= main_1_53;
		if (start == 1'b0 && ^(main_1_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_53_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %409 = mul nsw i32 %408, %dec_ah2.0*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_102)) begin
		main_1_53_reg <= main_preheaderi_409;
		if (start == 1'b0 && ^(main_preheaderi_409) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_53_reg"); $finish; end
	end
	/* main: %quantl.exit.i*/
	/*   %135 = mul nsw i32 %al2.0, 127*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_49)) begin
		main_1_53_reg <= main_quantlexiti_135;
		if (start == 1'b0 && ^(main_quantlexiti_135) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_53_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %458 = mul nsw i32 %456, 12*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_156)) begin
		main_1_53_reg <= main_preheaderi_458;
		if (start == 1'b0 && ^(main_preheaderi_458) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_53_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %54 = add nsw i32 %53, %52*/
		main_1_54 = main_signed_add_32_5;
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %54 = add nsw i32 %53, %52*/
	if ((cur_state == LEGUP_F_main_BB__1_29)) begin
		main_1_54_reg <= main_1_54;
		if (start == 1'b0 && ^(main_1_54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_54_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %465 = add nsw i32 %464, %461*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_156)) begin
		main_1_54_reg <= main_preheaderi_465;
		if (start == 1'b0 && ^(main_preheaderi_465) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_54_reg"); $finish; end
	end
end
always @(*) begin
	main_1_55 = main_signed_multiply_32_6;
end
always @(*) begin
/* main: %1*/
/*   %55 = mul nsw i32 %7, %8*/
	main_1_55_reg = main_quantlexiti_140_reg;
end
always @(*) begin
	/* main: %1*/
	/*   %56 = add nsw i32 %54, %55*/
		main_1_56 = main_signed_add_32_6;
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %56 = add nsw i32 %54, %55*/
	if ((cur_state == LEGUP_F_main_BB__1_29)) begin
		main_1_56_reg <= main_1_56;
		if (start == 1'b0 && ^(main_1_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_56_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %467 = add nsw i32 %466, %463*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_156)) begin
		main_1_56_reg <= main_preheaderi_467;
		if (start == 1'b0 && ^(main_preheaderi_467) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_56_reg"); $finish; end
	end
end
always @(*) begin
	main_1_57 = main_signed_multiply_32_7;
end
always @(*) begin
/* main: %1*/
/*   %57 = mul nsw i32 %5, %6*/
	main_1_57_reg = main_preheaderi_345_reg;
end
always @(*) begin
	/* main: %1*/
	/*   %58 = add nsw i32 %56, %57*/
		main_1_58 = main_signed_add_32_7;
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %58 = add nsw i32 %56, %57*/
	if ((cur_state == LEGUP_F_main_BB__1_29)) begin
		main_1_58_reg <= main_1_58;
		if (start == 1'b0 && ^(main_1_58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_58_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %469 = add nsw i32 %468, %465*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_156)) begin
		main_1_58_reg <= main_preheaderi_469;
		if (start == 1'b0 && ^(main_preheaderi_469) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_58_reg"); $finish; end
	end
end
always @(*) begin
	main_1_59 = main_signed_multiply_32_8;
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %59 = mul nsw i32 %3, %4*/
	if ((cur_state == LEGUP_F_main_BB__1_29)) begin
		main_1_59_reg <= main_1_59;
		if (start == 1'b0 && ^(main_1_59) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_59_reg"); $finish; end
	end
	/* main: %1*/
	/*   %59 = mul nsw i32 %3, %4*/
	if ((cur_state == LEGUP_F_main_BB__1_29)) begin
		main_1_59_reg <= main_1_59;
		if (start == 1'b0 && ^(main_1_59) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_59_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %446 = mul nsw i32 %dec_ah1.0, 255*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_102)) begin
		main_1_59_reg <= main_preheaderi_446;
		if (start == 1'b0 && ^(main_preheaderi_446) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_59_reg"); $finish; end
	end
	/* main: %quantl.exit.i*/
	/*   %202 = mul nsw i32 %deth.0, 564*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_49)) begin
		main_1_59_reg <= main_quantlexiti_202;
		if (start == 1'b0 && ^(main_quantlexiti_202) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_59_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %60 = add nsw i32 %58, %59*/
		main_1_60 = main_signed_add_32_8;
end
always @(*) begin
/* main: %1*/
/*   %60 = add nsw i32 %58, %59*/
	main_1_60_reg = main_preheaderi_323_reg;
end
always @(*) begin
	/* main: %1*/
	/*   %61 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 5), align 4, !tbaa !1*/
		main_1_61 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %61 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_30)) begin
		main_1_61_reg <= main_1_61;
		if (start == 1'b0 && ^(main_1_61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_61_reg"); $finish; end
	end
end
always @(*) begin
	main_1_62 = main_signed_multiply_32_4;
end
always @(*) begin
/* main: %1*/
/*   %62 = mul nsw i32 %61, %2*/
	main_1_62_reg = main_1_89_reg;
end
always @(*) begin
	/* main: %1*/
	/*   %63 = add nsw i32 %60, %62*/
		main_1_63 = main_signed_add_32_8;
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %63 = add nsw i32 %60, %62*/
	if ((cur_state == LEGUP_F_main_BB__1_31)) begin
		main_1_63_reg <= main_1_63;
		if (start == 1'b0 && ^(main_1_63) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_63_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %apl1.0.i3.i = add nsw i32 %358, %357*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_139)) begin
		main_1_63_reg <= main_preheaderi_apl10i3i;
		if (start == 1'b0 && ^(main_preheaderi_apl10i3i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_63_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %gep51 = add i32 %gep_int49, %gep_array50*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_136)) begin
		main_1_63_reg <= main_preheaderi_gep51;
		if (start == 1'b0 && ^(main_preheaderi_gep51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_63_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %64 = load i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 1, i32 0), align 4, !tbaa !1*/
		main_1_64 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %64 = load i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 1, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_30)) begin
		main_1_64_reg <= main_1_64;
		if (start == 1'b0 && ^(main_1_64) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_64_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %65 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 1, i32 0), align 4, !tbaa !1*/
		main_1_65 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %65 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 1, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_31)) begin
		main_1_65_reg <= main_1_65;
		if (start == 1'b0 && ^(main_1_65) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_65_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %66 = add i32 %63, %64*/
		main_1_66 = main_signed_add_32_0;
end
always @(*) begin
/* main: %1*/
/*   %66 = add i32 %63, %64*/
	main_1_66_reg = main_1_90_reg;
end
always @(*) begin
	/* main: %1*/
	/*   %67 = add i32 %66, %65*/
		main_1_67 = main_signed_add_32_1;
end
always @(*) begin
/* main: %1*/
/*   %67 = add i32 %66, %65*/
	main_1_67_reg = main_1_88_reg;
end
always @(*) begin
	/* main: %1*/
	/*   %68 = load i32* getelementptr ([6 x i32]* @delay_bpl, i32 1, i32 1), align 4, !tbaa !1*/
		main_1_68 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %68 = load i32* getelementptr ([6 x i32]* @delay_bpl, i32 1, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_31)) begin
		main_1_68_reg <= main_1_68;
		if (start == 1'b0 && ^(main_1_68) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_68_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %69 = load i32* getelementptr ([6 x i32]* @delay_dltx, i32 1, i32 1), align 4, !tbaa !1*/
		main_1_69 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %69 = load i32* getelementptr ([6 x i32]* @delay_dltx, i32 1, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_32)) begin
		main_1_69_reg <= main_1_69;
		if (start == 1'b0 && ^(main_1_69) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_69_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %70 = add i32 %67, %68*/
		main_1_70 = main_signed_add_32_2;
end
always @(*) begin
/* main: %1*/
/*   %70 = add i32 %67, %68*/
	main_1_70_reg = main_preheaderi_315_reg;
end
always @(*) begin
	/* main: %1*/
	/*   %71 = add i32 %70, %69*/
		main_1_71 = main_signed_add_32_0;
end
always @(*) begin
/* main: %1*/
/*   %71 = add i32 %70, %69*/
	main_1_71_reg = main_1_90_reg;
end
always @(*) begin
	/* main: %1*/
	/*   %72 = load i32* getelementptr ([6 x i32]* @delay_bpl, i32 1, i32 2), align 4, !tbaa !1*/
		main_1_72 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %72 = load i32* getelementptr ([6 x i32]* @delay_bpl, i32 1, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_32)) begin
		main_1_72_reg <= main_1_72;
		if (start == 1'b0 && ^(main_1_72) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_72_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %73 = load i32* getelementptr ([6 x i32]* @delay_dltx, i32 1, i32 2), align 4, !tbaa !1*/
		main_1_73 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %73 = load i32* getelementptr ([6 x i32]* @delay_dltx, i32 1, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_33)) begin
		main_1_73_reg <= main_1_73;
		if (start == 1'b0 && ^(main_1_73) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_73_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %74 = add i32 %71, %72*/
		main_1_74 = main_signed_add_32_1;
end
always @(*) begin
/* main: %1*/
/*   %74 = add i32 %71, %72*/
	main_1_74_reg = main_1_88_reg;
end
always @(*) begin
	/* main: %1*/
	/*   %75 = add i32 %74, %73*/
		main_1_75 = main_signed_add_32_0;
end
always @(*) begin
/* main: %1*/
/*   %75 = add i32 %74, %73*/
	main_1_75_reg = main_1_90_reg;
end
always @(*) begin
	/* main: %1*/
	/*   %76 = load i32* getelementptr ([6 x i32]* @delay_bpl, i32 1, i32 3), align 4, !tbaa !1*/
		main_1_76 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %76 = load i32* getelementptr ([6 x i32]* @delay_bpl, i32 1, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_33)) begin
		main_1_76_reg <= main_1_76;
		if (start == 1'b0 && ^(main_1_76) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_76_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %77 = load i32* getelementptr ([6 x i32]* @delay_dltx, i32 1, i32 3), align 4, !tbaa !1*/
		main_1_77 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %77 = load i32* getelementptr ([6 x i32]* @delay_dltx, i32 1, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_34)) begin
		main_1_77_reg <= main_1_77;
		if (start == 1'b0 && ^(main_1_77) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_77_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %78 = add i32 %75, %76*/
		main_1_78 = main_signed_add_32_1;
end
always @(*) begin
/* main: %1*/
/*   %78 = add i32 %75, %76*/
	main_1_78_reg = main_quantlexiti_144_reg;
end
always @(*) begin
	/* main: %1*/
	/*   %79 = add i32 %78, %77*/
		main_1_79 = main_signed_add_32_0;
end
always @(*) begin
/* main: %1*/
/*   %79 = add i32 %78, %77*/
	main_1_79_reg = main_98_gep6_reg;
end
always @(*) begin
	/* main: %1*/
	/*   %80 = load i32* getelementptr ([6 x i32]* @delay_bpl, i32 1, i32 4), align 4, !tbaa !1*/
		main_1_80 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %80 = load i32* getelementptr ([6 x i32]* @delay_bpl, i32 1, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_34)) begin
		main_1_80_reg <= main_1_80;
		if (start == 1'b0 && ^(main_1_80) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_80_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %81 = load i32* getelementptr ([6 x i32]* @delay_dltx, i32 1, i32 4), align 4, !tbaa !1*/
		main_1_81 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %81 = load i32* getelementptr ([6 x i32]* @delay_dltx, i32 1, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_35)) begin
		main_1_81_reg <= main_1_81;
		if (start == 1'b0 && ^(main_1_81) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_81_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %82 = add i32 %79, %80*/
		main_1_82 = main_signed_add_32_1;
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %82 = add i32 %79, %80*/
	if ((cur_state == LEGUP_F_main_BB__1_34)) begin
		main_1_82_reg <= main_1_82;
		if (start == 1'b0 && ^(main_1_82) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_82_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %450 = add nsw i32 %447, 192*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_102)) begin
		main_1_82_reg <= main_preheaderi_450;
		if (start == 1'b0 && ^(main_preheaderi_450) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_82_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %83 = add i32 %82, %81*/
		main_1_83 = main_signed_add_32_0;
end
always @(*) begin
/* main: %1*/
/*   %83 = add i32 %82, %81*/
	main_1_83_reg = main_98_gep6_reg;
end
always @(*) begin
	/* main: %1*/
	/*   %84 = ashr i32 %83, 14*/
		main_1_84 = ($signed(main_1_83) >>> 32'd14);
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %84 = ashr i32 %83, 14*/
	if ((cur_state == LEGUP_F_main_BB__1_35)) begin
		main_1_84_reg <= main_1_84;
		if (start == 1'b0 && ^(main_1_84) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_84_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %85 = shl i32 %rlt2.0, 1*/
		main_1_85 = (main_1_rlt20_reg <<< (32'd1 % 32));
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %85 = shl i32 %rlt2.0, 1*/
	if ((cur_state == LEGUP_F_main_BB__1_28)) begin
		main_1_85_reg <= main_1_85;
		if (start == 1'b0 && ^(main_1_85) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_85_reg"); $finish; end
	end
end
always @(*) begin
	main_1_86 = main_signed_multiply_32_9;
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %86 = mul nsw i32 %85, %al2.0*/
	if ((cur_state == LEGUP_F_main_BB__1_29)) begin
		main_1_86_reg <= main_1_86;
		if (start == 1'b0 && ^(main_1_86) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_86_reg"); $finish; end
	end
	/* main: %1*/
	/*   %86 = mul nsw i32 %85, %al2.0*/
	if ((cur_state == LEGUP_F_main_BB__1_29)) begin
		main_1_86_reg <= main_1_86;
		if (start == 1'b0 && ^(main_1_86) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_86_reg"); $finish; end
	end
	/* main: %quantl.exit.i*/
	/*   %215 = mul nsw i32 %nbh.0, 127*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_49)) begin
		main_1_86_reg <= main_quantlexiti_215;
		if (start == 1'b0 && ^(main_quantlexiti_215) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_86_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %460 = mul nsw i32 %accumc.0.0, -44*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_102)) begin
		main_1_86_reg <= main_preheaderi_460;
		if (start == 1'b0 && ^(main_preheaderi_460) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_86_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %87 = ashr i32 %86, 15*/
		main_1_87 = ($signed(main_1_86) >>> 32'd15);
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %87 = ashr i32 %86, 15*/
	if ((cur_state == LEGUP_F_main_BB__1_29)) begin
		main_1_87_reg <= main_1_87;
		if (start == 1'b0 && ^(main_1_87) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_87_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %88 = add nsw i32 %87, %84*/
		main_1_88 = main_signed_add_32_1;
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %88 = add nsw i32 %87, %84*/
	if ((cur_state == LEGUP_F_main_BB__1_35)) begin
		main_1_88_reg <= main_1_88;
		if (start == 1'b0 && ^(main_1_88) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_88_reg"); $finish; end
	end
	/* main: %quantl.exit.i*/
	/*   %gep15 = add i32 %gep_int13, %gep_array14*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_52)) begin
		main_1_88_reg <= main_quantlexiti_gep15;
		if (start == 1'b0 && ^(main_quantlexiti_gep15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_88_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %gep42 = add i32 %gep_int40, %gep_array41*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_136)) begin
		main_1_88_reg <= main_preheaderi_gep42;
		if (start == 1'b0 && ^(main_preheaderi_gep42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_88_reg"); $finish; end
	end
	/* main: %1*/
	/*   %gep3 = add i32 %gep_int1, %gep_array2*/
	if ((cur_state == LEGUP_F_main_BB__1_29)) begin
		main_1_88_reg <= main_1_gep3;
		if (start == 1'b0 && ^(main_1_gep3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_88_reg"); $finish; end
	end
	/* main: %1*/
	/*   %67 = add i32 %66, %65*/
	if ((cur_state == LEGUP_F_main_BB__1_31)) begin
		main_1_88_reg <= main_1_67;
		if (start == 1'b0 && ^(main_1_67) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_88_reg"); $finish; end
	end
	/* main: %1*/
	/*   %74 = add i32 %71, %72*/
	if ((cur_state == LEGUP_F_main_BB__1_32)) begin
		main_1_88_reg <= main_1_74;
		if (start == 1'b0 && ^(main_1_74) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_88_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %389 = add i32 %386, %387*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_150)) begin
		main_1_88_reg <= main_preheaderi_389;
		if (start == 1'b0 && ^(main_preheaderi_389) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_88_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %394 = add i32 %393, %392*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_151)) begin
		main_1_88_reg <= main_preheaderi_394;
		if (start == 1'b0 && ^(main_preheaderi_394) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_88_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %402 = add i32 %401, %400*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_153)) begin
		main_1_88_reg <= main_preheaderi_402;
		if (start == 1'b0 && ^(main_preheaderi_402) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_88_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %443 = add nsw i32 %wd4.0.i.i, %440*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_156)) begin
		main_1_88_reg <= main_preheaderi_443;
		if (start == 1'b0 && ^(main_preheaderi_443) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_88_reg"); $finish; end
	end
	/* main: %quantl.exit.i*/
	/*   %wd4.0.i8.i = add nsw i32 %130, %136*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_55)) begin
		main_1_88_reg <= main_quantlexiti_wd40i8i;
		if (start == 1'b0 && ^(main_quantlexiti_wd40i8i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_88_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %293 = add i32 %290, %291*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_109)) begin
		main_1_88_reg <= main_preheaderi_293;
		if (start == 1'b0 && ^(main_preheaderi_293) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_88_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %298 = add i32 %297, %296*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_110)) begin
		main_1_88_reg <= main_preheaderi_298;
		if (start == 1'b0 && ^(main_preheaderi_298) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_88_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %306 = add i32 %305, %304*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_112)) begin
		main_1_88_reg <= main_preheaderi_306;
		if (start == 1'b0 && ^(main_preheaderi_306) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_88_reg"); $finish; end
	end
	/* main: %quantl.exit.i*/
	/*   %175 = add i32 %172, %173*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_66)) begin
		main_1_88_reg <= main_quantlexiti_175;
		if (start == 1'b0 && ^(main_quantlexiti_175) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_88_reg"); $finish; end
	end
	/* main: %quantl.exit.i*/
	/*   %180 = add i32 %179, %178*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_67)) begin
		main_1_88_reg <= main_quantlexiti_180;
		if (start == 1'b0 && ^(main_quantlexiti_180) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_88_reg"); $finish; end
	end
	/* main: %quantl.exit.i*/
	/*   %188 = add i32 %187, %186*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_69)) begin
		main_1_88_reg <= main_quantlexiti_188;
		if (start == 1'b0 && ^(main_quantlexiti_188) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_88_reg"); $finish; end
	end
	/* main: %quantl.exit.i*/
	/*   %gep24 = add i32 %gep_int22, %gep_array23*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_73)) begin
		main_1_88_reg <= main_quantlexiti_gep24;
		if (start == 1'b0 && ^(main_quantlexiti_gep24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_88_reg"); $finish; end
	end
	/* main: %quantl.exit.i*/
	/*   %wd4.0.i.i4 = add nsw i32 %235, %241*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_76)) begin
		main_1_88_reg <= main_quantlexiti_wd40ii4;
		if (start == 1'b0 && ^(main_quantlexiti_wd40ii4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_88_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %wd4.0.i7.i = add nsw i32 %344, %350*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_139)) begin
		main_1_88_reg <= main_preheaderi_wd40i7i;
		if (start == 1'b0 && ^(main_preheaderi_wd40i7i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_88_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %495 = add nsw i32 %494, %491*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_157)) begin
		main_1_88_reg <= main_preheaderi_495;
		if (start == 1'b0 && ^(main_preheaderi_495) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_88_reg"); $finish; end
	end
	/* main: %adpcm_main.exit*/
	/*   %gep66 = add i32 %gep_int64, %gep_array65*/
	if ((cur_state == LEGUP_F_main_BB_adpcm_mainexit_161)) begin
		main_1_88_reg <= main_adpcm_mainexit_gep66;
		if (start == 1'b0 && ^(main_adpcm_mainexit_gep66) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_88_reg"); $finish; end
	end
	/* main: %.preheader*/
	/*   %gep72 = add i32 %gep_int70, %gep_array71*/
	if ((cur_state == LEGUP_F_main_BB_preheader_164)) begin
		main_1_88_reg <= main_preheader_gep72;
		if (start == 1'b0 && ^(main_preheader_gep72) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_88_reg"); $finish; end
	end
end
always @(*) begin
	main_1_89 = main_signed_multiply_32_4;
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %89 = mul nsw i32 %87, %84*/
	if ((cur_state == LEGUP_F_main_BB__1_36)) begin
		main_1_89_reg <= main_1_89;
		if (start == 1'b0 && ^(main_1_89) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_89_reg"); $finish; end
	end
	/* main: %1*/
	/*   %89 = mul nsw i32 %87, %84*/
	if ((cur_state == LEGUP_F_main_BB__1_36)) begin
		main_1_89_reg <= main_1_89;
		if (start == 1'b0 && ^(main_1_89) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_89_reg"); $finish; end
	end
	/* main: %1*/
	/*   %92 = mul nsw i32 %90, %49*/
	if ((cur_state == LEGUP_F_main_BB__1_37)) begin
		main_1_89_reg <= main_1_92;
		if (start == 1'b0 && ^(main_1_92) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_89_reg"); $finish; end
	end
	/* main: %98*/
	/*   %101 = mul nsw i32 %100, %detl.0*/
	if ((cur_state == LEGUP_F_main_BB__98_47)) begin
		main_1_89_reg <= main_98_101;
		if (start == 1'b0 && ^(main_98_101) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_89_reg"); $finish; end
	end
	/* main: %quantl.exit.i*/
	/*   %108 = mul nsw i32 %107, %detl.0*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_54)) begin
		main_1_89_reg <= main_quantlexiti_108;
		if (start == 1'b0 && ^(main_quantlexiti_108) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_89_reg"); $finish; end
	end
	/* main: %quantl.exit.i*/
	/*   %110 = mul nsw i32 %nbl.0, 127*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_49)) begin
		main_1_89_reg <= main_quantlexiti_110;
		if (start == 1'b0 && ^(main_quantlexiti_110) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_89_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %270 = mul nsw i32 %269, %268*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_104)) begin
		main_1_89_reg <= main_preheaderi_270;
		if (start == 1'b0 && ^(main_preheaderi_270) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_89_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %277 = mul nsw i32 %276, %275*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_106)) begin
		main_1_89_reg <= main_preheaderi_277;
		if (start == 1'b0 && ^(main_preheaderi_277) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_89_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %281 = mul nsw i32 %280, %279*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_107)) begin
		main_1_89_reg <= main_preheaderi_281;
		if (start == 1'b0 && ^(main_preheaderi_281) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_89_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %319 = mul nsw i32 %318, %dec_detl.0*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_138)) begin
		main_1_89_reg <= main_preheaderi_319;
		if (start == 1'b0 && ^(main_preheaderi_319) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_89_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %341 = mul nsw i32 %dec_plt1.0, %339*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_139)) begin
		main_1_89_reg <= main_preheaderi_341;
		if (start == 1'b0 && ^(main_preheaderi_341) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_89_reg"); $finish; end
	end
	/* main: %1*/
	/*   %52 = mul nsw i32 %11, %12*/
	if ((cur_state == LEGUP_F_main_BB__1_29)) begin
		main_1_89_reg <= main_1_52;
		if (start == 1'b0 && ^(main_1_52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_89_reg"); $finish; end
	end
	/* main: %1*/
	/*   %62 = mul nsw i32 %61, %2*/
	if ((cur_state == LEGUP_F_main_BB__1_31)) begin
		main_1_89_reg <= main_1_62;
		if (start == 1'b0 && ^(main_1_62) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_89_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %366 = mul nsw i32 %365, %364*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_145)) begin
		main_1_89_reg <= main_preheaderi_366;
		if (start == 1'b0 && ^(main_preheaderi_366) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_89_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %373 = mul nsw i32 %372, %371*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_147)) begin
		main_1_89_reg <= main_preheaderi_373;
		if (start == 1'b0 && ^(main_preheaderi_373) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_89_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %377 = mul nsw i32 %376, %375*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_148)) begin
		main_1_89_reg <= main_preheaderi_377;
		if (start == 1'b0 && ^(main_preheaderi_377) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_89_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %381 = mul nsw i32 %380, %379*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_149)) begin
		main_1_89_reg <= main_preheaderi_381;
		if (start == 1'b0 && ^(main_preheaderi_381) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_89_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %385 = mul nsw i32 %384, %383*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_150)) begin
		main_1_89_reg <= main_preheaderi_385;
		if (start == 1'b0 && ^(main_preheaderi_385) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_89_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %414 = mul nsw i32 %413, %dec_deth.0*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_144)) begin
		main_1_89_reg <= main_preheaderi_414;
		if (start == 1'b0 && ^(main_preheaderi_414) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_89_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %433 = mul nsw i32 %dec_ph1.0, %431*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_156)) begin
		main_1_89_reg <= main_preheaderi_433;
		if (start == 1'b0 && ^(main_preheaderi_433) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_89_reg"); $finish; end
	end
	/* main: %quantl.exit.i*/
	/*   %127 = mul nsw i32 %plt1.0, %125*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_55)) begin
		main_1_89_reg <= main_quantlexiti_127;
		if (start == 1'b0 && ^(main_quantlexiti_127) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_89_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %285 = mul nsw i32 %284, %283*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_108)) begin
		main_1_89_reg <= main_preheaderi_285;
		if (start == 1'b0 && ^(main_preheaderi_285) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_89_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %289 = mul nsw i32 %288, %287*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_109)) begin
		main_1_89_reg <= main_preheaderi_289;
		if (start == 1'b0 && ^(main_preheaderi_289) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_89_reg"); $finish; end
	end
	/* main: %quantl.exit.i*/
	/*   %152 = mul nsw i32 %151, %150*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_61)) begin
		main_1_89_reg <= main_quantlexiti_152;
		if (start == 1'b0 && ^(main_quantlexiti_152) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_89_reg"); $finish; end
	end
	/* main: %quantl.exit.i*/
	/*   %159 = mul nsw i32 %158, %157*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_63)) begin
		main_1_89_reg <= main_quantlexiti_159;
		if (start == 1'b0 && ^(main_quantlexiti_159) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_89_reg"); $finish; end
	end
	/* main: %quantl.exit.i*/
	/*   %163 = mul nsw i32 %162, %161*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_64)) begin
		main_1_89_reg <= main_quantlexiti_163;
		if (start == 1'b0 && ^(main_quantlexiti_163) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_89_reg"); $finish; end
	end
	/* main: %quantl.exit.i*/
	/*   %167 = mul nsw i32 %166, %165*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_65)) begin
		main_1_89_reg <= main_quantlexiti_167;
		if (start == 1'b0 && ^(main_quantlexiti_167) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_89_reg"); $finish; end
	end
	/* main: %quantl.exit.i*/
	/*   %171 = mul nsw i32 %170, %169*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_66)) begin
		main_1_89_reg <= main_quantlexiti_171;
		if (start == 1'b0 && ^(main_quantlexiti_171) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_89_reg"); $finish; end
	end
	/* main: %quantl.exit.i*/
	/*   %213 = mul nsw i32 %212, %deth.0*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_75)) begin
		main_1_89_reg <= main_quantlexiti_213;
		if (start == 1'b0 && ^(main_quantlexiti_213) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_89_reg"); $finish; end
	end
	/* main: %quantl.exit.i*/
	/*   %232 = mul nsw i32 %ph1.0, %230*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_76)) begin
		main_1_89_reg <= main_quantlexiti_232;
		if (start == 1'b0 && ^(main_quantlexiti_232) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_89_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %354 = mul nsw i32 %dec_al1.0, 255*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_102)) begin
		main_1_89_reg <= main_preheaderi_354;
		if (start == 1'b0 && ^(main_preheaderi_354) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_89_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %90 = add nsw i32 %88, %89*/
		main_1_90 = main_signed_add_32_0;
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %90 = add nsw i32 %88, %89*/
	if ((cur_state == LEGUP_F_main_BB__1_36)) begin
		main_1_90_reg <= main_1_90;
		if (start == 1'b0 && ^(main_1_90) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_90_reg"); $finish; end
	end
	/* main: %.preheader.i.preheader*/
	/*   %gep33 = add i32 %gep_int31, %gep_array32*/
	if ((cur_state == LEGUP_F_main_BB_preheaderipreheader_99)) begin
		main_1_90_reg <= main_preheaderipreheader_gep33;
		if (start == 1'b0 && ^(main_preheaderipreheader_gep33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_90_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %gep36 = add i32 %gep_int34, %gep_array35*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_134)) begin
		main_1_90_reg <= main_preheaderi_gep36;
		if (start == 1'b0 && ^(main_preheaderi_gep36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_90_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %274 = add nsw i32 %273, %270*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_105)) begin
		main_1_90_reg <= main_preheaderi_274;
		if (start == 1'b0 && ^(main_preheaderi_274) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_90_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %282 = add nsw i32 %278, %281*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_107)) begin
		main_1_90_reg <= main_preheaderi_282;
		if (start == 1'b0 && ^(main_preheaderi_282) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_90_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %gep39 = add i32 %gep_int37, %gep_array38*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_136)) begin
		main_1_90_reg <= main_preheaderi_gep39;
		if (start == 1'b0 && ^(main_preheaderi_gep39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_90_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %328 = add nsw i32 %325, %327*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_137)) begin
		main_1_90_reg <= main_preheaderi_328;
		if (start == 1'b0 && ^(main_preheaderi_328) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_90_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %gep45 = add i32 %gep_int43, %gep_array44*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_139)) begin
		main_1_90_reg <= main_preheaderi_gep45;
		if (start == 1'b0 && ^(main_preheaderi_gep45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_90_reg"); $finish; end
	end
	/* main: %1*/
	/*   %gep = add i32 %gep_int, %gep_array*/
	if ((cur_state == LEGUP_F_main_BB__1_29)) begin
		main_1_90_reg <= main_1_gep;
		if (start == 1'b0 && ^(main_1_gep) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_90_reg"); $finish; end
	end
	/* main: %1*/
	/*   %66 = add i32 %63, %64*/
	if ((cur_state == LEGUP_F_main_BB__1_31)) begin
		main_1_90_reg <= main_1_66;
		if (start == 1'b0 && ^(main_1_66) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_90_reg"); $finish; end
	end
	/* main: %1*/
	/*   %71 = add i32 %70, %69*/
	if ((cur_state == LEGUP_F_main_BB__1_32)) begin
		main_1_90_reg <= main_1_71;
		if (start == 1'b0 && ^(main_1_71) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_90_reg"); $finish; end
	end
	/* main: %1*/
	/*   %75 = add i32 %74, %73*/
	if ((cur_state == LEGUP_F_main_BB__1_33)) begin
		main_1_90_reg <= main_1_75;
		if (start == 1'b0 && ^(main_1_75) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_90_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %370 = add nsw i32 %369, %366*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_146)) begin
		main_1_90_reg <= main_preheaderi_370;
		if (start == 1'b0 && ^(main_preheaderi_370) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_90_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %378 = add nsw i32 %374, %377*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_148)) begin
		main_1_90_reg <= main_preheaderi_378;
		if (start == 1'b0 && ^(main_preheaderi_378) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_90_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %386 = add nsw i32 %382, %385*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_150)) begin
		main_1_90_reg <= main_preheaderi_386;
		if (start == 1'b0 && ^(main_preheaderi_386) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_90_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %393 = add i32 %390, %391*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_151)) begin
		main_1_90_reg <= main_preheaderi_393;
		if (start == 1'b0 && ^(main_preheaderi_393) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_90_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %397 = add i32 %394, %395*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_152)) begin
		main_1_90_reg <= main_preheaderi_397;
		if (start == 1'b0 && ^(main_preheaderi_397) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_90_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %401 = add i32 %398, %399*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_153)) begin
		main_1_90_reg <= main_preheaderi_401;
		if (start == 1'b0 && ^(main_preheaderi_401) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_90_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %405 = add i32 %402, %403*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_154)) begin
		main_1_90_reg <= main_preheaderi_405;
		if (start == 1'b0 && ^(main_preheaderi_405) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_90_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %420 = add nsw i32 %417, %419*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_143)) begin
		main_1_90_reg <= main_preheaderi_420;
		if (start == 1'b0 && ^(main_preheaderi_420) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_90_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %gep54 = add i32 %gep_int52, %gep_array53*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_145)) begin
		main_1_90_reg <= main_preheaderi_gep54;
		if (start == 1'b0 && ^(main_preheaderi_gep54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_90_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %wd4.0.i.i = add nsw i32 %436, %442*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_156)) begin
		main_1_90_reg <= main_preheaderi_wd40ii;
		if (start == 1'b0 && ^(main_preheaderi_wd40ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_90_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %290 = add nsw i32 %286, %289*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_109)) begin
		main_1_90_reg <= main_preheaderi_290;
		if (start == 1'b0 && ^(main_preheaderi_290) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_90_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %297 = add i32 %294, %295*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_110)) begin
		main_1_90_reg <= main_preheaderi_297;
		if (start == 1'b0 && ^(main_preheaderi_297) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_90_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %301 = add i32 %298, %299*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_111)) begin
		main_1_90_reg <= main_preheaderi_301;
		if (start == 1'b0 && ^(main_preheaderi_301) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_90_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %305 = add i32 %302, %303*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_112)) begin
		main_1_90_reg <= main_preheaderi_305;
		if (start == 1'b0 && ^(main_preheaderi_305) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_90_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %309 = add i32 %306, %307*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_113)) begin
		main_1_90_reg <= main_preheaderi_309;
		if (start == 1'b0 && ^(main_preheaderi_309) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_90_reg"); $finish; end
	end
	/* main: %quantl.exit.i*/
	/*   %156 = add nsw i32 %155, %152*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_62)) begin
		main_1_90_reg <= main_quantlexiti_156;
		if (start == 1'b0 && ^(main_quantlexiti_156) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_90_reg"); $finish; end
	end
	/* main: %quantl.exit.i*/
	/*   %164 = add nsw i32 %160, %163*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_64)) begin
		main_1_90_reg <= main_quantlexiti_164;
		if (start == 1'b0 && ^(main_quantlexiti_164) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_90_reg"); $finish; end
	end
	/* main: %quantl.exit.i*/
	/*   %172 = add nsw i32 %168, %171*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_66)) begin
		main_1_90_reg <= main_quantlexiti_172;
		if (start == 1'b0 && ^(main_quantlexiti_172) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_90_reg"); $finish; end
	end
	/* main: %quantl.exit.i*/
	/*   %179 = add i32 %176, %177*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_67)) begin
		main_1_90_reg <= main_quantlexiti_179;
		if (start == 1'b0 && ^(main_quantlexiti_179) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_90_reg"); $finish; end
	end
	/* main: %quantl.exit.i*/
	/*   %183 = add i32 %180, %181*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_68)) begin
		main_1_90_reg <= main_quantlexiti_183;
		if (start == 1'b0 && ^(main_quantlexiti_183) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_90_reg"); $finish; end
	end
	/* main: %quantl.exit.i*/
	/*   %187 = add i32 %184, %185*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_69)) begin
		main_1_90_reg <= main_quantlexiti_187;
		if (start == 1'b0 && ^(main_quantlexiti_187) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_90_reg"); $finish; end
	end
	/* main: %quantl.exit.i*/
	/*   %191 = add i32 %188, %189*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_70)) begin
		main_1_90_reg <= main_quantlexiti_191;
		if (start == 1'b0 && ^(main_quantlexiti_191) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_90_reg"); $finish; end
	end
	/* main: %quantl.exit.i*/
	/*   %210 = add nsw i32 %., -2*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_71)) begin
		main_1_90_reg <= main_quantlexiti_210;
		if (start == 1'b0 && ^(main_quantlexiti_210) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_90_reg"); $finish; end
	end
	/* main: %quantl.exit.i*/
	/*   %gep21 = add i32 %gep_int19, %gep_array20*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_73)) begin
		main_1_90_reg <= main_quantlexiti_gep21;
		if (start == 1'b0 && ^(main_quantlexiti_gep21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_90_reg"); $finish; end
	end
	/* main: %quantl.exit.i*/
	/*   %219 = add nsw i32 %216, %218*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_74)) begin
		main_1_90_reg <= main_quantlexiti_219;
		if (start == 1'b0 && ^(main_quantlexiti_219) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_90_reg"); $finish; end
	end
	/* main: %quantl.exit.i*/
	/*   %gep27 = add i32 %gep_int25, %gep_array26*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_76)) begin
		main_1_90_reg <= main_quantlexiti_gep27;
		if (start == 1'b0 && ^(main_quantlexiti_gep27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_90_reg"); $finish; end
	end
	/* main: %quantl.exit.i*/
	/*   %gep30 = add i32 %gep_int28, %gep_array29*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_83)) begin
		main_1_90_reg <= main_quantlexiti_gep30;
		if (start == 1'b0 && ^(main_quantlexiti_gep30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_90_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %493 = add nsw i32 %492, %489*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_157)) begin
		main_1_90_reg <= main_preheaderi_493;
		if (start == 1'b0 && ^(main_preheaderi_493) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_90_reg"); $finish; end
	end
	/* main: %adpcm_main.exit*/
	/*   %gep63 = add i32 %gep_int61, %gep_array62*/
	if ((cur_state == LEGUP_F_main_BB_adpcm_mainexit_161)) begin
		main_1_90_reg <= main_adpcm_mainexit_gep63;
		if (start == 1'b0 && ^(main_adpcm_mainexit_gep63) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_90_reg"); $finish; end
	end
	/* main: %.preheader*/
	/*   %gep69 = add i32 %gep_int67, %gep_array68*/
	if ((cur_state == LEGUP_F_main_BB_preheader_164)) begin
		main_1_90_reg <= main_preheader_gep69;
		if (start == 1'b0 && ^(main_preheader_gep69) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_90_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %91 = sub nsw i32 %49, %90*/
		main_1_91 = main_signed_subtract_32_0;
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %91 = sub nsw i32 %49, %90*/
	if ((cur_state == LEGUP_F_main_BB__1_36)) begin
		main_1_91_reg <= main_1_91;
		if (start == 1'b0 && ^(main_1_91) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_91_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %336 = sub i32 9, %333*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_137)) begin
		main_1_91_reg <= main_preheaderi_336;
		if (start == 1'b0 && ^(main_preheaderi_336) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_91_reg"); $finish; end
	end
	/* main: %quantl.exit.i*/
	/*   %145 = sub nsw i32 15360, %...i10.i*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_56)) begin
		main_1_91_reg <= main_quantlexiti_145;
		if (start == 1'b0 && ^(main_quantlexiti_145) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_91_reg"); $finish; end
	end
	/* main: %1*/
	/*   %50 = sub nsw i32 %46, %47*/
	if ((cur_state == LEGUP_F_main_BB__1_29)) begin
		main_1_91_reg <= main_1_50;
		if (start == 1'b0 && ^(main_1_50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_91_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %428 = sub i32 11, %425*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_143)) begin
		main_1_91_reg <= main_preheaderi_428;
		if (start == 1'b0 && ^(main_preheaderi_428) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_91_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %451 = sub nsw i32 15360, %...i.i*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_157)) begin
		main_1_91_reg <= main_preheaderi_451;
		if (start == 1'b0 && ^(main_preheaderi_451) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_91_reg"); $finish; end
	end
	/* main: %quantl.exit.i*/
	/*   %129 = sub nsw i32 0, %126*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_48)) begin
		main_1_91_reg <= main_quantlexiti_129;
		if (start == 1'b0 && ^(main_quantlexiti_129) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_91_reg"); $finish; end
	end
	/* main: %quantl.exit.i*/
	/*   %198 = sub nsw i32 %51, %197*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_70)) begin
		main_1_91_reg <= main_quantlexiti_198;
		if (start == 1'b0 && ^(main_quantlexiti_198) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_91_reg"); $finish; end
	end
	/* main: %quantl.exit.i*/
	/*   %227 = sub i32 11, %224*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_74)) begin
		main_1_91_reg <= main_quantlexiti_227;
		if (start == 1'b0 && ^(main_quantlexiti_227) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_91_reg"); $finish; end
	end
end
always @(*) begin
	main_1_92 = main_signed_multiply_32_4;
end
always @(*) begin
/* main: %1*/
/*   %92 = mul nsw i32 %90, %49*/
	main_1_92_reg = main_1_89_reg;
end
always @(*) begin
	/* main: %1*/
	/*   %93 = sub i32 %91, %92*/
		main_1_93 = main_signed_subtract_32_0;
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %93 = sub i32 %91, %92*/
	if ((cur_state == LEGUP_F_main_BB__1_37)) begin
		main_1_93_reg <= main_1_93;
		if (start == 1'b0 && ^(main_1_93) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_93_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %343 = sub nsw i32 0, %340*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_101)) begin
		main_1_93_reg <= main_preheaderi_343;
		if (start == 1'b0 && ^(main_preheaderi_343) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_93_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %359 = sub nsw i32 15360, %...i9.i*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_140)) begin
		main_1_93_reg <= main_preheaderi_359;
		if (start == 1'b0 && ^(main_preheaderi_359) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_93_reg"); $finish; end
	end
	/* main: %quantl.exit.i*/
	/*   %122 = sub i32 9, %119*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_53)) begin
		main_1_93_reg <= main_quantlexiti_122;
		if (start == 1'b0 && ^(main_quantlexiti_122) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_93_reg"); $finish; end
	end
	/* main: %quantl.exit.i*/
	/*   %250 = sub nsw i32 15360, %...i.i6*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_77)) begin
		main_1_93_reg <= main_quantlexiti_250;
		if (start == 1'b0 && ^(main_quantlexiti_250) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_93_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %94 = icmp sgt i32 %93, -1*/
		main_1_94 = ($signed(main_1_93) > $signed(-32'd1));
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %94 = icmp sgt i32 %93, -1*/
	if ((cur_state == LEGUP_F_main_BB__1_37)) begin
		main_1_94_reg <= main_1_94;
		if (start == 1'b0 && ^(main_1_94) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_94_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %95 = sub nsw i32 0, %93*/
		main_1_95 = main_signed_subtract_32_1;
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %95 = sub nsw i32 0, %93*/
	if ((cur_state == LEGUP_F_main_BB__1_37)) begin
		main_1_95_reg <= main_1_95;
		if (start == 1'b0 && ^(main_1_95) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_95_reg"); $finish; end
	end
	/* main: %quantl.exit.i*/
	/*   %147 = sub nsw i32 0, %145*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_56)) begin
		main_1_95_reg <= main_quantlexiti_147;
		if (start == 1'b0 && ^(main_quantlexiti_147) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_95_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %361 = sub nsw i32 0, %359*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_140)) begin
		main_1_95_reg <= main_preheaderi_361;
		if (start == 1'b0 && ^(main_preheaderi_361) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_95_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %453 = sub nsw i32 0, %451*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_157)) begin
		main_1_95_reg <= main_preheaderi_453;
		if (start == 1'b0 && ^(main_preheaderi_453) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_95_reg"); $finish; end
	end
	/* main: %quantl.exit.i*/
	/*   %205 = sub nsw i32 0, %198*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_70)) begin
		main_1_95_reg <= main_quantlexiti_205;
		if (start == 1'b0 && ^(main_quantlexiti_205) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_95_reg"); $finish; end
	end
	/* main: %quantl.exit.i*/
	/*   %252 = sub nsw i32 0, %250*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_77)) begin
		main_1_95_reg <= main_quantlexiti_252;
		if (start == 1'b0 && ^(main_quantlexiti_252) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_95_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %m.0.i.i.i = select i1 %94, i32 %93, i32 %95*/
		main_1_m0iii = (main_1_94 ? main_1_93 : main_1_95);
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %m.0.i.i.i = select i1 %94, i32 %93, i32 %95*/
	if ((cur_state == LEGUP_F_main_BB__1_37)) begin
		main_1_m0iii_reg <= main_1_m0iii;
		if (start == 1'b0 && ^(main_1_m0iii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_m0iii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %96*/
	/*   %97 = icmp slt i32 %104, 30*/
		main_96_97 = ($signed(main_98_104_reg) < $signed(32'd30));
end
always @(posedge clk) begin
	/* main: %96*/
	/*   %97 = icmp slt i32 %104, 30*/
	if ((cur_state == LEGUP_F_main_BB__96_43)) begin
		main_96_97_reg <= main_96_97;
		if (start == 1'b0 && ^(main_96_97) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_96_97_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %98*/
	/*   %mil.01.i.i = phi i32 [ 0, %1 ], [ %104, %96 ]*/
	if (((cur_state == LEGUP_F_main_BB__1_42) & (memory_controller_waitrequest == 0))) begin
		main_98_mil01ii = 32'd0;
	end
	/* main: %98*/
	/*   %mil.01.i.i = phi i32 [ 0, %1 ], [ %104, %96 ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__96_43) & (memory_controller_waitrequest == 0)) & (main_96_97 == 1'd1))) */ begin
		main_98_mil01ii = main_98_104_reg;
	end
end
always @(posedge clk) begin
	/* main: %98*/
	/*   %mil.01.i.i = phi i32 [ 0, %1 ], [ %104, %96 ]*/
	if (((cur_state == LEGUP_F_main_BB__1_42) & (memory_controller_waitrequest == 0))) begin
		main_98_mil01ii_reg <= main_98_mil01ii;
		if (start == 1'b0 && ^(main_98_mil01ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_98_mil01ii_reg"); $finish; end
	end
	/* main: %98*/
	/*   %mil.01.i.i = phi i32 [ 0, %1 ], [ %104, %96 ]*/
	if ((((cur_state == LEGUP_F_main_BB__96_43) & (memory_controller_waitrequest == 0)) & (main_96_97 == 1'd1))) begin
		main_98_mil01ii_reg <= main_98_mil01ii;
		if (start == 1'b0 && ^(main_98_mil01ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_98_mil01ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %98*/
	/*   %gep_int4 = ptrtoint [30 x i32]* @decis_levl to i32*/
if (reset) begin main_98_gep_int4 = 0; end
		main_98_gep_int4 = 0;
end
always @(posedge clk) begin
	/* main: %98*/
	/*   %gep_int4 = ptrtoint [30 x i32]* @decis_levl to i32*/
	if ((cur_state == LEGUP_F_main_BB__98_44)) begin
		main_98_gep_int4_reg <= main_98_gep_int4;
		if (start == 1'b0 && ^(main_98_gep_int4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_98_gep_int4_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %98*/
	/*   %gep_array5 = mul i32 %mil.01.i.i, 4*/
		main_98_gep_array5 = (main_98_mil01ii_reg * 32'd4);
end
always @(posedge clk) begin
	/* main: %98*/
	/*   %gep_array5 = mul i32 %mil.01.i.i, 4*/
	if ((cur_state == LEGUP_F_main_BB__98_44)) begin
		main_98_gep_array5_reg <= main_98_gep_array5;
		if (start == 1'b0 && ^(main_98_gep_array5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_98_gep_array5_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %98*/
	/*   %gep6 = add i32 %gep_int4, %gep_array5*/
		main_98_gep6 = main_signed_add_32_0;
end
always @(posedge clk) begin
	/* main: %98*/
	/*   %gep6 = add i32 %gep_int4, %gep_array5*/
	if ((cur_state == LEGUP_F_main_BB__98_45)) begin
		main_98_gep6_reg <= main_98_gep6;
		if (start == 1'b0 && ^(main_98_gep6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_98_gep6_reg"); $finish; end
	end
	/* main: %quantl.exit.i*/
	/*   %gep9 = add i32 %gep_int7, %gep_array8*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_49)) begin
		main_98_gep6_reg <= main_quantlexiti_gep9;
		if (start == 1'b0 && ^(main_quantlexiti_gep9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_98_gep6_reg"); $finish; end
	end
	/* main: %quantl.exit.i*/
	/*   %gep12 = add i32 %gep_int10, %gep_array11*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_52)) begin
		main_98_gep6_reg <= main_quantlexiti_gep12;
		if (start == 1'b0 && ^(main_quantlexiti_gep12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_98_gep6_reg"); $finish; end
	end
	/* main: %quantl.exit.i*/
	/*   %114 = add nsw i32 %111, %113*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_53)) begin
		main_98_gep6_reg <= main_quantlexiti_114;
		if (start == 1'b0 && ^(main_quantlexiti_114) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_98_gep6_reg"); $finish; end
	end
	/* main: %quantl.exit.i*/
	/*   %gep18 = add i32 %gep_int16, %gep_array17*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_55)) begin
		main_98_gep6_reg <= main_quantlexiti_gep18;
		if (start == 1'b0 && ^(main_quantlexiti_gep18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_98_gep6_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %278 = add nsw i32 %274, %277*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_106)) begin
		main_98_gep6_reg <= main_preheaderi_278;
		if (start == 1'b0 && ^(main_preheaderi_278) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_98_gep6_reg"); $finish; end
	end
	/* main: %1*/
	/*   %79 = add i32 %78, %77*/
	if ((cur_state == LEGUP_F_main_BB__1_34)) begin
		main_98_gep6_reg <= main_1_79;
		if (start == 1'b0 && ^(main_1_79) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_98_gep6_reg"); $finish; end
	end
	/* main: %1*/
	/*   %83 = add i32 %82, %81*/
	if ((cur_state == LEGUP_F_main_BB__1_35)) begin
		main_98_gep6_reg <= main_1_83;
		if (start == 1'b0 && ^(main_1_83) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_98_gep6_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %374 = add nsw i32 %370, %373*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_147)) begin
		main_98_gep6_reg <= main_preheaderi_374;
		if (start == 1'b0 && ^(main_preheaderi_374) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_98_gep6_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %382 = add nsw i32 %378, %381*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_149)) begin
		main_98_gep6_reg <= main_preheaderi_382;
		if (start == 1'b0 && ^(main_preheaderi_382) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_98_gep6_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %286 = add nsw i32 %282, %285*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_108)) begin
		main_98_gep6_reg <= main_preheaderi_286;
		if (start == 1'b0 && ^(main_preheaderi_286) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_98_gep6_reg"); $finish; end
	end
	/* main: %quantl.exit.i*/
	/*   %160 = add nsw i32 %156, %159*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_63)) begin
		main_98_gep6_reg <= main_quantlexiti_160;
		if (start == 1'b0 && ^(main_quantlexiti_160) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_98_gep6_reg"); $finish; end
	end
	/* main: %quantl.exit.i*/
	/*   %168 = add nsw i32 %164, %167*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_65)) begin
		main_98_gep6_reg <= main_quantlexiti_168;
		if (start == 1'b0 && ^(main_quantlexiti_168) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_98_gep6_reg"); $finish; end
	end
	/* main: %.preheader*/
	/*   %.main_result.2 = add nsw i32 %523, %main_result.22*/
	if ((cur_state == LEGUP_F_main_BB_preheader_165)) begin
		main_98_gep6_reg <= main_preheader_main_result2;
		if (start == 1'b0 && ^(main_preheader_main_result2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_98_gep6_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %98*/
	/*   %99 = inttoptr i32 %gep6 to i32**/
		main_98_99 = main_98_gep6;
end
always @(posedge clk) begin
	/* main: %98*/
	/*   %99 = inttoptr i32 %gep6 to i32**/
	if ((cur_state == LEGUP_F_main_BB__98_45)) begin
		main_98_99_reg <= main_98_99;
		if (start == 1'b0 && ^(main_98_99) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_98_99_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %98*/
	/*   %100 = load i32* %99, align 4, !tbaa !1*/
		main_98_100 = decis_levl_out_a;
end
always @(posedge clk) begin
	/* main: %98*/
	/*   %100 = load i32* %99, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__98_46)) begin
		main_98_100_reg <= main_98_100;
		if (start == 1'b0 && ^(main_98_100) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_98_100_reg"); $finish; end
	end
end
always @(*) begin
	main_98_101 = main_signed_multiply_32_4;
end
always @(*) begin
/* main: %98*/
/*   %101 = mul nsw i32 %100, %detl.0*/
	main_98_101_reg = main_1_89_reg;
end
always @(*) begin
	/* main: %98*/
	/*   %102 = ashr i32 %101, 15*/
		main_98_102 = ($signed(main_98_101) >>> 32'd15);
end
always @(posedge clk) begin
	/* main: %98*/
	/*   %102 = ashr i32 %101, 15*/
	if ((cur_state == LEGUP_F_main_BB__98_47)) begin
		main_98_102_reg <= main_98_102;
		if (start == 1'b0 && ^(main_98_102) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_98_102_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %98*/
	/*   %103 = icmp sgt i32 %m.0.i.i.i, %102*/
		main_98_103 = ($signed(main_1_m0iii_reg) > $signed(main_98_102));
end
always @(posedge clk) begin
	/* main: %98*/
	/*   %103 = icmp sgt i32 %m.0.i.i.i, %102*/
	if ((cur_state == LEGUP_F_main_BB__98_47)) begin
		main_98_103_reg <= main_98_103;
		if (start == 1'b0 && ^(main_98_103) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_98_103_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %98*/
	/*   %104 = add nsw i32 %mil.01.i.i, 1*/
		main_98_104 = main_signed_add_32_0;
end
always @(posedge clk) begin
	/* main: %98*/
	/*   %104 = add nsw i32 %mil.01.i.i, 1*/
	if ((cur_state == LEGUP_F_main_BB__98_44)) begin
		main_98_104_reg <= main_98_104;
		if (start == 1'b0 && ^(main_98_104) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_98_104_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %358 = add nsw i32 %355, 192*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_102)) begin
		main_98_104_reg <= main_preheaderi_358;
		if (start == 1'b0 && ^(main_preheaderi_358) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_98_104_reg"); $finish; end
	end
	/* main: %.preheader*/
	/*   %524 = add nsw i32 %i.11, 1*/
	if ((cur_state == LEGUP_F_main_BB_preheader_163)) begin
		main_98_104_reg <= main_preheader_524;
		if (start == 1'b0 && ^(main_preheader_524) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_98_104_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %mil.0.lcssa.i.i = phi i32 [ %mil.01.i.i, %98 ], [ %104, %96 ]*/
	if ((((cur_state == LEGUP_F_main_BB__96_43) & (memory_controller_waitrequest == 0)) & (main_96_97 == 0))) begin
		main_quantlexiti_mil0lcssaii = main_98_104_reg;
	end
	/* main: %quantl.exit.i*/
	/*   %mil.0.lcssa.i.i = phi i32 [ %mil.01.i.i, %98 ], [ %104, %96 ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__98_47) & (memory_controller_waitrequest == 0)) & (main_98_103 == 0))) */ begin
		main_quantlexiti_mil0lcssaii = main_98_mil01ii_reg;
	end
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %mil.0.lcssa.i.i = phi i32 [ %mil.01.i.i, %98 ], [ %104, %96 ]*/
	if ((((cur_state == LEGUP_F_main_BB__96_43) & (memory_controller_waitrequest == 0)) & (main_96_97 == 0))) begin
		main_quantlexiti_mil0lcssaii_reg <= main_quantlexiti_mil0lcssaii;
		if (start == 1'b0 && ^(main_quantlexiti_mil0lcssaii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_mil0lcssaii_reg"); $finish; end
	end
	/* main: %quantl.exit.i*/
	/*   %mil.0.lcssa.i.i = phi i32 [ %mil.01.i.i, %98 ], [ %104, %96 ]*/
	if ((((cur_state == LEGUP_F_main_BB__98_47) & (memory_controller_waitrequest == 0)) & (main_98_103 == 0))) begin
		main_quantlexiti_mil0lcssaii_reg <= main_quantlexiti_mil0lcssaii;
		if (start == 1'b0 && ^(main_quantlexiti_mil0lcssaii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_mil0lcssaii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %quant26bt_pos.quant26bt_neg.i.i = select i1 %94, [31 x i32]* @quant26bt_pos, [31 x i32]* @quant26bt_neg*/
		main_quantlexiti_quant26bt_posquant26bt_negii = (main_1_94_reg ? `TAG_g_quant26bt_pos_a : `TAG_g_quant26bt_neg_a);
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %quant26bt_pos.quant26bt_neg.i.i = select i1 %94, [31 x i32]* @quant26bt_pos, [31 x i32]* @quant26bt_neg*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_48)) begin
		main_quantlexiti_quant26bt_posquant26bt_negii_reg <= main_quantlexiti_quant26bt_posquant26bt_negii;
		if (start == 1'b0 && ^(main_quantlexiti_quant26bt_posquant26bt_negii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_quant26bt_posquant26bt_negii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %gep_int7 = ptrtoint [31 x i32]* %quant26bt_pos.quant26bt_neg.i.i to i32*/
		main_quantlexiti_gep_int7 = main_quantlexiti_quant26bt_posquant26bt_negii;
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %gep_int7 = ptrtoint [31 x i32]* %quant26bt_pos.quant26bt_neg.i.i to i32*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_48)) begin
		main_quantlexiti_gep_int7_reg <= main_quantlexiti_gep_int7;
		if (start == 1'b0 && ^(main_quantlexiti_gep_int7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_gep_int7_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %gep_array8 = mul i32 %mil.0.lcssa.i.i, 4*/
		main_quantlexiti_gep_array8 = (main_quantlexiti_mil0lcssaii_reg * 32'd4);
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %gep_array8 = mul i32 %mil.0.lcssa.i.i, 4*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_48)) begin
		main_quantlexiti_gep_array8_reg <= main_quantlexiti_gep_array8;
		if (start == 1'b0 && ^(main_quantlexiti_gep_array8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_gep_array8_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %gep9 = add i32 %gep_int7, %gep_array8*/
		main_quantlexiti_gep9 = main_signed_add_32_0;
end
always @(*) begin
/* main: %quantl.exit.i*/
/*   %gep9 = add i32 %gep_int7, %gep_array8*/
	main_quantlexiti_gep9_reg = main_98_gep6_reg;
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %ril.0.in.i.i = inttoptr i32 %gep9 to i32**/
		main_quantlexiti_ril0inii = main_quantlexiti_gep9;
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %ril.0.in.i.i = inttoptr i32 %gep9 to i32**/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_49)) begin
		main_quantlexiti_ril0inii_reg <= main_quantlexiti_ril0inii;
		if (start == 1'b0 && ^(main_quantlexiti_ril0inii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_ril0inii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %ril.0.i.i = load i32* %ril.0.in.i.i, align 4*/
		main_quantlexiti_ril0ii = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %ril.0.i.i = load i32* %ril.0.in.i.i, align 4*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_51)) begin
		main_quantlexiti_ril0ii_reg <= main_quantlexiti_ril0ii;
		if (start == 1'b0 && ^(main_quantlexiti_ril0ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_ril0ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %105 = ashr i32 %ril.0.i.i, 2*/
		main_quantlexiti_105 = ($signed(main_quantlexiti_ril0ii) >>> 32'd2);
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %105 = ashr i32 %ril.0.i.i, 2*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_51)) begin
		main_quantlexiti_105_reg <= main_quantlexiti_105;
		if (start == 1'b0 && ^(main_quantlexiti_105) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_105_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %gep_int10 = ptrtoint [16 x i32]* @qq4_code4_table to i32*/
if (reset) begin main_quantlexiti_gep_int10 = 0; end
		main_quantlexiti_gep_int10 = 0;
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %gep_int10 = ptrtoint [16 x i32]* @qq4_code4_table to i32*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_48)) begin
		main_quantlexiti_gep_int10_reg <= main_quantlexiti_gep_int10;
		if (start == 1'b0 && ^(main_quantlexiti_gep_int10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_gep_int10_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %gep_array11 = mul i32 %105, 4*/
		main_quantlexiti_gep_array11 = (main_quantlexiti_105 * 32'd4);
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %gep_array11 = mul i32 %105, 4*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_51)) begin
		main_quantlexiti_gep_array11_reg <= main_quantlexiti_gep_array11;
		if (start == 1'b0 && ^(main_quantlexiti_gep_array11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_gep_array11_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %gep12 = add i32 %gep_int10, %gep_array11*/
		main_quantlexiti_gep12 = main_signed_add_32_0;
end
always @(*) begin
/* main: %quantl.exit.i*/
/*   %gep12 = add i32 %gep_int10, %gep_array11*/
	main_quantlexiti_gep12_reg = main_98_gep6_reg;
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %106 = inttoptr i32 %gep12 to i32**/
		main_quantlexiti_106 = main_quantlexiti_gep12;
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %106 = inttoptr i32 %gep12 to i32**/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_52)) begin
		main_quantlexiti_106_reg <= main_quantlexiti_106;
		if (start == 1'b0 && ^(main_quantlexiti_106) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_106_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %107 = load i32* %106, align 4, !tbaa !1*/
		main_quantlexiti_107 = qq4_code4_table_out_a;
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %107 = load i32* %106, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_53)) begin
		main_quantlexiti_107_reg <= main_quantlexiti_107;
		if (start == 1'b0 && ^(main_quantlexiti_107) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_107_reg"); $finish; end
	end
end
always @(*) begin
	main_quantlexiti_108 = main_signed_multiply_32_4;
end
always @(*) begin
/* main: %quantl.exit.i*/
/*   %108 = mul nsw i32 %107, %detl.0*/
	main_quantlexiti_108_reg = main_1_89_reg;
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %109 = ashr i32 %108, 15*/
		main_quantlexiti_109 = ($signed(main_quantlexiti_108) >>> 32'd15);
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %109 = ashr i32 %108, 15*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_54)) begin
		main_quantlexiti_109_reg <= main_quantlexiti_109;
		if (start == 1'b0 && ^(main_quantlexiti_109) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_109_reg"); $finish; end
	end
end
always @(*) begin
	main_quantlexiti_110 = main_signed_multiply_32_4;
end
always @(*) begin
/* main: %quantl.exit.i*/
/*   %110 = mul nsw i32 %nbl.0, 127*/
	main_quantlexiti_110_reg = main_1_89_reg;
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %111 = ashr i32 %110, 7*/
		main_quantlexiti_111 = ($signed(main_quantlexiti_110) >>> 32'd7);
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %111 = ashr i32 %110, 7*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_49)) begin
		main_quantlexiti_111_reg <= main_quantlexiti_111;
		if (start == 1'b0 && ^(main_quantlexiti_111) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_111_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %gep_int13 = ptrtoint [16 x i32]* @wl_code_table to i32*/
if (reset) begin main_quantlexiti_gep_int13 = 0; end
		main_quantlexiti_gep_int13 = 0;
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %gep_int13 = ptrtoint [16 x i32]* @wl_code_table to i32*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_48)) begin
		main_quantlexiti_gep_int13_reg <= main_quantlexiti_gep_int13;
		if (start == 1'b0 && ^(main_quantlexiti_gep_int13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_gep_int13_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %gep_array14 = mul i32 %105, 4*/
		main_quantlexiti_gep_array14 = (main_quantlexiti_105 * 32'd4);
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %gep_array14 = mul i32 %105, 4*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_51)) begin
		main_quantlexiti_gep_array14_reg <= main_quantlexiti_gep_array14;
		if (start == 1'b0 && ^(main_quantlexiti_gep_array14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_gep_array14_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %gep15 = add i32 %gep_int13, %gep_array14*/
		main_quantlexiti_gep15 = main_signed_add_32_1;
end
always @(*) begin
/* main: %quantl.exit.i*/
/*   %gep15 = add i32 %gep_int13, %gep_array14*/
	main_quantlexiti_gep15_reg = main_1_88_reg;
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %112 = inttoptr i32 %gep15 to i32**/
		main_quantlexiti_112 = main_quantlexiti_gep15;
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %112 = inttoptr i32 %gep15 to i32**/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_52)) begin
		main_quantlexiti_112_reg <= main_quantlexiti_112;
		if (start == 1'b0 && ^(main_quantlexiti_112) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_112_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %113 = load i32* %112, align 4, !tbaa !1*/
		main_quantlexiti_113 = wl_code_table_out_a;
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %113 = load i32* %112, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_53)) begin
		main_quantlexiti_113_reg <= main_quantlexiti_113;
		if (start == 1'b0 && ^(main_quantlexiti_113) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_113_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %114 = add nsw i32 %111, %113*/
		main_quantlexiti_114 = main_signed_add_32_0;
end
always @(*) begin
/* main: %quantl.exit.i*/
/*   %114 = add nsw i32 %111, %113*/
	main_quantlexiti_114_reg = main_98_gep6_reg;
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %115 = icmp slt i32 %114, 0*/
		main_quantlexiti_115 = ($signed(main_quantlexiti_114) < $signed(32'd0));
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %115 = icmp slt i32 %114, 0*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_53)) begin
		main_quantlexiti_115_reg <= main_quantlexiti_115;
		if (start == 1'b0 && ^(main_quantlexiti_115) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_115_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %..i11.i = select i1 %115, i32 0, i32 %114*/
		main_quantlexiti_i11i = (main_quantlexiti_115 ? 32'd0 : main_quantlexiti_114);
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %..i11.i = select i1 %115, i32 0, i32 %114*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_53)) begin
		main_quantlexiti_i11i_reg <= main_quantlexiti_i11i;
		if (start == 1'b0 && ^(main_quantlexiti_i11i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_i11i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %116 = icmp sgt i32 %..i11.i, 18432*/
		main_quantlexiti_116 = ($signed(main_quantlexiti_i11i) > $signed(32'd18432));
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %116 = icmp sgt i32 %..i11.i, 18432*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_53)) begin
		main_quantlexiti_116_reg <= main_quantlexiti_116;
		if (start == 1'b0 && ^(main_quantlexiti_116) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_116_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %...i12.i = select i1 %116, i32 18432, i32 %..i11.i*/
		main_quantlexiti_i12i = (main_quantlexiti_116 ? 32'd18432 : main_quantlexiti_i11i);
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %...i12.i = select i1 %116, i32 18432, i32 %..i11.i*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_53)) begin
		main_quantlexiti_i12i_reg <= main_quantlexiti_i12i;
		if (start == 1'b0 && ^(main_quantlexiti_i12i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_i12i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %117 = lshr i32 %...i12.i, 6*/
		main_quantlexiti_117 = (main_quantlexiti_i12i >>> (32'd6 % 32));
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %117 = lshr i32 %...i12.i, 6*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_53)) begin
		main_quantlexiti_117_reg <= main_quantlexiti_117;
		if (start == 1'b0 && ^(main_quantlexiti_117) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_117_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %118 = and i32 %117, 31*/
		main_quantlexiti_118 = (main_quantlexiti_117 & 32'd31);
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %118 = and i32 %117, 31*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_53)) begin
		main_quantlexiti_118_reg <= main_quantlexiti_118;
		if (start == 1'b0 && ^(main_quantlexiti_118) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_118_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %119 = ashr i32 %...i12.i, 11*/
		main_quantlexiti_119 = ($signed(main_quantlexiti_i12i) >>> 32'd11);
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %119 = ashr i32 %...i12.i, 11*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_53)) begin
		main_quantlexiti_119_reg <= main_quantlexiti_119;
		if (start == 1'b0 && ^(main_quantlexiti_119) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_119_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %gep_int16 = ptrtoint [32 x i32]* @ilb_table to i32*/
if (reset) begin main_quantlexiti_gep_int16 = 0; end
		main_quantlexiti_gep_int16 = 0;
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %gep_int16 = ptrtoint [32 x i32]* @ilb_table to i32*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_48)) begin
		main_quantlexiti_gep_int16_reg <= main_quantlexiti_gep_int16;
		if (start == 1'b0 && ^(main_quantlexiti_gep_int16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_gep_int16_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %gep_array17 = mul i32 %118, 4*/
		main_quantlexiti_gep_array17 = (main_quantlexiti_118_reg * 32'd4);
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %gep_array17 = mul i32 %118, 4*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_54)) begin
		main_quantlexiti_gep_array17_reg <= main_quantlexiti_gep_array17;
		if (start == 1'b0 && ^(main_quantlexiti_gep_array17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_gep_array17_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %gep18 = add i32 %gep_int16, %gep_array17*/
		main_quantlexiti_gep18 = main_signed_add_32_0;
end
always @(*) begin
/* main: %quantl.exit.i*/
/*   %gep18 = add i32 %gep_int16, %gep_array17*/
	main_quantlexiti_gep18_reg = main_98_gep6_reg;
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %120 = inttoptr i32 %gep18 to i32**/
		main_quantlexiti_120 = main_quantlexiti_gep18;
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %120 = inttoptr i32 %gep18 to i32**/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_55)) begin
		main_quantlexiti_120_reg <= main_quantlexiti_120;
		if (start == 1'b0 && ^(main_quantlexiti_120) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_120_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %121 = load i32* %120, align 4, !tbaa !1*/
		main_quantlexiti_121 = ilb_table_out_a;
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %121 = load i32* %120, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_56)) begin
		main_quantlexiti_121_reg <= main_quantlexiti_121;
		if (start == 1'b0 && ^(main_quantlexiti_121) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_121_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %122 = sub i32 9, %119*/
		main_quantlexiti_122 = main_signed_subtract_32_0;
end
always @(*) begin
/* main: %quantl.exit.i*/
/*   %122 = sub i32 9, %119*/
	main_quantlexiti_122_reg = main_1_93_reg;
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %123 = ashr i32 %121, %122*/
		main_quantlexiti_123 = ($signed(main_quantlexiti_121) >>> main_quantlexiti_122_reg);
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %123 = ashr i32 %121, %122*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_56)) begin
		main_quantlexiti_123_reg <= main_quantlexiti_123;
		if (start == 1'b0 && ^(main_quantlexiti_123) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_123_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %124 = shl i32 %123, 3*/
		main_quantlexiti_124 = (main_quantlexiti_123 <<< (32'd3 % 32));
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %124 = shl i32 %123, 3*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_56)) begin
		main_quantlexiti_124_reg <= main_quantlexiti_124;
		if (start == 1'b0 && ^(main_quantlexiti_124) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_124_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %125 = add nsw i32 %84, %109*/
		main_quantlexiti_125 = main_signed_add_32_1;
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %125 = add nsw i32 %84, %109*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_54)) begin
		main_quantlexiti_125_reg <= main_quantlexiti_125;
		if (start == 1'b0 && ^(main_quantlexiti_125) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_125_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %126 = shl nsw i32 %al1.0, 2*/
		main_quantlexiti_126 = (main_1_al10_reg <<< (32'd2 % 32));
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %126 = shl nsw i32 %al1.0, 2*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_48)) begin
		main_quantlexiti_126_reg <= main_quantlexiti_126;
		if (start == 1'b0 && ^(main_quantlexiti_126) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_126_reg"); $finish; end
	end
end
always @(*) begin
	main_quantlexiti_127 = main_signed_multiply_32_4;
end
always @(*) begin
/* main: %quantl.exit.i*/
/*   %127 = mul nsw i32 %plt1.0, %125*/
	main_quantlexiti_127_reg = main_1_89_reg;
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %128 = icmp sgt i32 %127, -1*/
		main_quantlexiti_128 = ($signed(main_quantlexiti_127) > $signed(-32'd1));
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %128 = icmp sgt i32 %127, -1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_55)) begin
		main_quantlexiti_128_reg <= main_quantlexiti_128;
		if (start == 1'b0 && ^(main_quantlexiti_128) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_128_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %129 = sub nsw i32 0, %126*/
		main_quantlexiti_129 = main_signed_subtract_32_0;
end
always @(*) begin
/* main: %quantl.exit.i*/
/*   %129 = sub nsw i32 0, %126*/
	main_quantlexiti_129_reg = main_1_91_reg;
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %.1.i7.i = select i1 %128, i32 %129, i32 %126*/
		main_quantlexiti_1i7i = (main_quantlexiti_128 ? main_quantlexiti_129_reg : main_quantlexiti_126_reg);
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %.1.i7.i = select i1 %128, i32 %129, i32 %126*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_55)) begin
		main_quantlexiti_1i7i_reg <= main_quantlexiti_1i7i;
		if (start == 1'b0 && ^(main_quantlexiti_1i7i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_1i7i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %130 = ashr i32 %.1.i7.i, 7*/
		main_quantlexiti_130 = ($signed(main_quantlexiti_1i7i) >>> 32'd7);
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %130 = ashr i32 %.1.i7.i, 7*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_55)) begin
		main_quantlexiti_130_reg <= main_quantlexiti_130;
		if (start == 1'b0 && ^(main_quantlexiti_130) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_130_reg"); $finish; end
	end
end
always @(*) begin
	main_quantlexiti_131 = main_signed_multiply_32_7;
end
always @(*) begin
/* main: %quantl.exit.i*/
/*   %131 = mul nsw i32 %plt2.0, %125*/
	main_quantlexiti_131_reg = main_preheaderi_345_reg;
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %132 = ashr i32 %131, 31*/
		main_quantlexiti_132 = ($signed(main_quantlexiti_131) >>> 32'd31);
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %132 = ashr i32 %131, 31*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_55)) begin
		main_quantlexiti_132_reg <= main_quantlexiti_132;
		if (start == 1'b0 && ^(main_quantlexiti_132) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_132_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %133 = and i32 %132, -256*/
		main_quantlexiti_133 = (main_quantlexiti_132 & -32'd256);
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %133 = and i32 %132, -256*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_55)) begin
		main_quantlexiti_133_reg <= main_quantlexiti_133;
		if (start == 1'b0 && ^(main_quantlexiti_133) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_133_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %134 = or i32 %133, 128*/
		main_quantlexiti_134 = (main_quantlexiti_133 | 32'd128);
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %134 = or i32 %133, 128*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_55)) begin
		main_quantlexiti_134_reg <= main_quantlexiti_134;
		if (start == 1'b0 && ^(main_quantlexiti_134) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_134_reg"); $finish; end
	end
end
always @(*) begin
	main_quantlexiti_135 = main_signed_multiply_32_5;
end
always @(*) begin
/* main: %quantl.exit.i*/
/*   %135 = mul nsw i32 %al2.0, 127*/
	main_quantlexiti_135_reg = main_1_53_reg;
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %136 = ashr i32 %135, 7*/
		main_quantlexiti_136 = ($signed(main_quantlexiti_135) >>> 32'd7);
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %136 = ashr i32 %135, 7*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_49)) begin
		main_quantlexiti_136_reg <= main_quantlexiti_136;
		if (start == 1'b0 && ^(main_quantlexiti_136) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_136_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %wd4.0.i8.i = add nsw i32 %130, %136*/
		main_quantlexiti_wd40i8i = main_signed_add_32_1;
end
always @(*) begin
/* main: %quantl.exit.i*/
/*   %wd4.0.i8.i = add nsw i32 %130, %136*/
	main_quantlexiti_wd40i8i_reg = main_1_88_reg;
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %137 = add nsw i32 %wd4.0.i8.i, %134*/
		main_quantlexiti_137 = main_signed_add_32_2;
end
always @(*) begin
/* main: %quantl.exit.i*/
/*   %137 = add nsw i32 %wd4.0.i8.i, %134*/
	main_quantlexiti_137_reg = main_preheaderi_315_reg;
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %138 = icmp sgt i32 %137, 12288*/
		main_quantlexiti_138 = ($signed(main_quantlexiti_137) > $signed(32'd12288));
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %138 = icmp sgt i32 %137, 12288*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_55)) begin
		main_quantlexiti_138_reg <= main_quantlexiti_138;
		if (start == 1'b0 && ^(main_quantlexiti_138) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_138_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %..i9.i = select i1 %138, i32 12288, i32 %137*/
		main_quantlexiti_i9i = (main_quantlexiti_138 ? 32'd12288 : main_quantlexiti_137);
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %..i9.i = select i1 %138, i32 12288, i32 %137*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_55)) begin
		main_quantlexiti_i9i_reg <= main_quantlexiti_i9i;
		if (start == 1'b0 && ^(main_quantlexiti_i9i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_i9i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %139 = icmp slt i32 %..i9.i, -12288*/
		main_quantlexiti_139 = ($signed(main_quantlexiti_i9i_reg) < $signed(-32'd12288));
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %139 = icmp slt i32 %..i9.i, -12288*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_56)) begin
		main_quantlexiti_139_reg <= main_quantlexiti_139;
		if (start == 1'b0 && ^(main_quantlexiti_139) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_139_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %...i10.i = select i1 %139, i32 -12288, i32 %..i9.i*/
		main_quantlexiti_i10i = (main_quantlexiti_139 ? -32'd12288 : main_quantlexiti_i9i_reg);
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %...i10.i = select i1 %139, i32 -12288, i32 %..i9.i*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_56)) begin
		main_quantlexiti_i10i_reg <= main_quantlexiti_i10i;
		if (start == 1'b0 && ^(main_quantlexiti_i10i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_i10i_reg"); $finish; end
	end
end
always @(*) begin
	main_quantlexiti_140 = main_signed_multiply_32_6;
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %140 = mul nsw i32 %al1.0, 255*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_49)) begin
		main_quantlexiti_140_reg <= main_quantlexiti_140;
		if (start == 1'b0 && ^(main_quantlexiti_140) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_140_reg"); $finish; end
	end
	/* main: %quantl.exit.i*/
	/*   %140 = mul nsw i32 %al1.0, 255*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_49)) begin
		main_quantlexiti_140_reg <= main_quantlexiti_140;
		if (start == 1'b0 && ^(main_quantlexiti_140) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_140_reg"); $finish; end
	end
	/* main: %1*/
	/*   %55 = mul nsw i32 %7, %8*/
	if ((cur_state == LEGUP_F_main_BB__1_29)) begin
		main_quantlexiti_140_reg <= main_1_55;
		if (start == 1'b0 && ^(main_1_55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_140_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %416 = mul nsw i32 %dec_nbh.0, 127*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_102)) begin
		main_quantlexiti_140_reg <= main_preheaderi_416;
		if (start == 1'b0 && ^(main_preheaderi_416) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_140_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %459 = mul nsw i32 %457, -44*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_156)) begin
		main_quantlexiti_140_reg <= main_preheaderi_459;
		if (start == 1'b0 && ^(main_preheaderi_459) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_140_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %141 = ashr i32 %140, 8*/
		main_quantlexiti_141 = ($signed(main_quantlexiti_140) >>> 32'd8);
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %141 = ashr i32 %140, 8*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_49)) begin
		main_quantlexiti_141_reg <= main_quantlexiti_141;
		if (start == 1'b0 && ^(main_quantlexiti_141) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_141_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %142 = ashr i32 %127, 31*/
		main_quantlexiti_142 = ($signed(main_quantlexiti_127) >>> 32'd31);
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %142 = ashr i32 %127, 31*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_55)) begin
		main_quantlexiti_142_reg <= main_quantlexiti_142;
		if (start == 1'b0 && ^(main_quantlexiti_142) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_142_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %143 = and i32 %142, -384*/
		main_quantlexiti_143 = (main_quantlexiti_142 & -32'd384);
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %143 = and i32 %142, -384*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_55)) begin
		main_quantlexiti_143_reg <= main_quantlexiti_143;
		if (start == 1'b0 && ^(main_quantlexiti_143) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_143_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %144 = add nsw i32 %141, 192*/
		main_quantlexiti_144 = main_signed_add_32_1;
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %144 = add nsw i32 %141, 192*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_49)) begin
		main_quantlexiti_144_reg <= main_quantlexiti_144;
		if (start == 1'b0 && ^(main_quantlexiti_144) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_144_reg"); $finish; end
	end
	/* main: %1*/
	/*   %78 = add i32 %75, %76*/
	if ((cur_state == LEGUP_F_main_BB__1_33)) begin
		main_quantlexiti_144_reg <= main_1_78;
		if (start == 1'b0 && ^(main_1_78) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_144_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %398 = add i32 %397, %396*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_152)) begin
		main_quantlexiti_144_reg <= main_preheaderi_398;
		if (start == 1'b0 && ^(main_preheaderi_398) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_144_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %406 = add i32 %405, %404*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_154)) begin
		main_quantlexiti_144_reg <= main_preheaderi_406;
		if (start == 1'b0 && ^(main_preheaderi_406) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_144_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %302 = add i32 %301, %300*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_111)) begin
		main_quantlexiti_144_reg <= main_preheaderi_302;
		if (start == 1'b0 && ^(main_preheaderi_302) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_144_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %310 = add i32 %309, %308*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_113)) begin
		main_quantlexiti_144_reg <= main_preheaderi_310;
		if (start == 1'b0 && ^(main_preheaderi_310) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_144_reg"); $finish; end
	end
	/* main: %quantl.exit.i*/
	/*   %184 = add i32 %183, %182*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_68)) begin
		main_quantlexiti_144_reg <= main_quantlexiti_184;
		if (start == 1'b0 && ^(main_quantlexiti_184) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_144_reg"); $finish; end
	end
	/* main: %quantl.exit.i*/
	/*   %192 = add i32 %191, %190*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_70)) begin
		main_quantlexiti_144_reg <= main_quantlexiti_192;
		if (start == 1'b0 && ^(main_quantlexiti_192) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_144_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %apl1.0.i4.i = add nsw i32 %144, %143*/
		main_quantlexiti_apl10i4i = main_signed_add_32_8;
end
always @(*) begin
/* main: %quantl.exit.i*/
/*   %apl1.0.i4.i = add nsw i32 %144, %143*/
	main_quantlexiti_apl10i4i_reg = main_preheaderi_323_reg;
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %145 = sub nsw i32 15360, %...i10.i*/
		main_quantlexiti_145 = main_signed_subtract_32_0;
end
always @(*) begin
/* main: %quantl.exit.i*/
/*   %145 = sub nsw i32 15360, %...i10.i*/
	main_quantlexiti_145_reg = main_1_91_reg;
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %146 = icmp sgt i32 %apl1.0.i4.i, %145*/
		main_quantlexiti_146 = ($signed(main_quantlexiti_apl10i4i_reg) > $signed(main_quantlexiti_145));
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %146 = icmp sgt i32 %apl1.0.i4.i, %145*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_56)) begin
		main_quantlexiti_146_reg <= main_quantlexiti_146;
		if (start == 1'b0 && ^(main_quantlexiti_146) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_146_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %.apl1.0.i5.i = select i1 %146, i32 %145, i32 %apl1.0.i4.i*/
		main_quantlexiti_apl10i5i = (main_quantlexiti_146 ? main_quantlexiti_145 : main_quantlexiti_apl10i4i_reg);
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %.apl1.0.i5.i = select i1 %146, i32 %145, i32 %apl1.0.i4.i*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_56)) begin
		main_quantlexiti_apl10i5i_reg <= main_quantlexiti_apl10i5i;
		if (start == 1'b0 && ^(main_quantlexiti_apl10i5i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_apl10i5i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %147 = sub nsw i32 0, %145*/
		main_quantlexiti_147 = main_signed_subtract_32_1;
end
always @(*) begin
/* main: %quantl.exit.i*/
/*   %147 = sub nsw i32 0, %145*/
	main_quantlexiti_147_reg = main_1_95_reg;
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %148 = icmp slt i32 %.apl1.0.i5.i, %147*/
		main_quantlexiti_148 = ($signed(main_quantlexiti_apl10i5i_reg) < $signed(main_quantlexiti_147_reg));
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %148 = icmp slt i32 %.apl1.0.i5.i, %147*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_58)) begin
		main_quantlexiti_148_reg <= main_quantlexiti_148;
		if (start == 1'b0 && ^(main_quantlexiti_148) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_148_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %apl1.2.i6.i = select i1 %148, i32 %147, i32 %.apl1.0.i5.i*/
		main_quantlexiti_apl12i6i = (main_quantlexiti_148 ? main_quantlexiti_147_reg : main_quantlexiti_apl10i5i_reg);
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %apl1.2.i6.i = select i1 %148, i32 %147, i32 %.apl1.0.i5.i*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_58)) begin
		main_quantlexiti_apl12i6i_reg <= main_quantlexiti_apl12i6i;
		if (start == 1'b0 && ^(main_quantlexiti_apl12i6i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_apl12i6i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %149 = add nsw i32 %109, %90*/
		main_quantlexiti_149 = main_signed_add_32_0;
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %149 = add nsw i32 %109, %90*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_54)) begin
		main_quantlexiti_149_reg <= main_quantlexiti_149;
		if (start == 1'b0 && ^(main_quantlexiti_149) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_149_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %150 = load i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 0), align 4, !tbaa !1*/
		main_quantlexiti_150 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %150 = load i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_60)) begin
		main_quantlexiti_150_reg <= main_quantlexiti_150;
		if (start == 1'b0 && ^(main_quantlexiti_150) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_150_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %151 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 0), align 4, !tbaa !1*/
		main_quantlexiti_151 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %151 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_60)) begin
		main_quantlexiti_151_reg <= main_quantlexiti_151;
		if (start == 1'b0 && ^(main_quantlexiti_151) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_151_reg"); $finish; end
	end
end
always @(*) begin
	main_quantlexiti_152 = main_signed_multiply_32_4;
end
always @(*) begin
/* main: %quantl.exit.i*/
/*   %152 = mul nsw i32 %151, %150*/
	main_quantlexiti_152_reg = main_1_89_reg;
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %153 = load i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 1), align 4, !tbaa !1*/
		main_quantlexiti_153 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %153 = load i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_61)) begin
		main_quantlexiti_153_reg <= main_quantlexiti_153;
		if (start == 1'b0 && ^(main_quantlexiti_153) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_153_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %154 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 1), align 4, !tbaa !1*/
		main_quantlexiti_154 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %154 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_61)) begin
		main_quantlexiti_154_reg <= main_quantlexiti_154;
		if (start == 1'b0 && ^(main_quantlexiti_154) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_154_reg"); $finish; end
	end
end
always @(*) begin
	main_quantlexiti_155 = main_signed_multiply_32_4;
end
always @(*) begin
/* main: %quantl.exit.i*/
/*   %155 = mul nsw i32 %154, %153*/
	main_quantlexiti_155_reg = main_preheaderi_273_reg;
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %156 = add nsw i32 %155, %152*/
		main_quantlexiti_156 = main_signed_add_32_0;
end
always @(*) begin
/* main: %quantl.exit.i*/
/*   %156 = add nsw i32 %155, %152*/
	main_quantlexiti_156_reg = main_1_90_reg;
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %157 = load i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 2), align 4, !tbaa !1*/
		main_quantlexiti_157 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %157 = load i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_62)) begin
		main_quantlexiti_157_reg <= main_quantlexiti_157;
		if (start == 1'b0 && ^(main_quantlexiti_157) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_157_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %158 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 2), align 4, !tbaa !1*/
		main_quantlexiti_158 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %158 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_62)) begin
		main_quantlexiti_158_reg <= main_quantlexiti_158;
		if (start == 1'b0 && ^(main_quantlexiti_158) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_158_reg"); $finish; end
	end
end
always @(*) begin
	main_quantlexiti_159 = main_signed_multiply_32_4;
end
always @(*) begin
/* main: %quantl.exit.i*/
/*   %159 = mul nsw i32 %158, %157*/
	main_quantlexiti_159_reg = main_1_89_reg;
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %160 = add nsw i32 %156, %159*/
		main_quantlexiti_160 = main_signed_add_32_0;
end
always @(*) begin
/* main: %quantl.exit.i*/
/*   %160 = add nsw i32 %156, %159*/
	main_quantlexiti_160_reg = main_98_gep6_reg;
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %161 = load i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 3), align 4, !tbaa !1*/
		main_quantlexiti_161 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %161 = load i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_63)) begin
		main_quantlexiti_161_reg <= main_quantlexiti_161;
		if (start == 1'b0 && ^(main_quantlexiti_161) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_161_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %162 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 3), align 4, !tbaa !1*/
		main_quantlexiti_162 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %162 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_63)) begin
		main_quantlexiti_162_reg <= main_quantlexiti_162;
		if (start == 1'b0 && ^(main_quantlexiti_162) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_162_reg"); $finish; end
	end
end
always @(*) begin
	main_quantlexiti_163 = main_signed_multiply_32_4;
end
always @(*) begin
/* main: %quantl.exit.i*/
/*   %163 = mul nsw i32 %162, %161*/
	main_quantlexiti_163_reg = main_1_89_reg;
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %164 = add nsw i32 %160, %163*/
		main_quantlexiti_164 = main_signed_add_32_0;
end
always @(*) begin
/* main: %quantl.exit.i*/
/*   %164 = add nsw i32 %160, %163*/
	main_quantlexiti_164_reg = main_1_90_reg;
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %165 = load i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 4), align 4, !tbaa !1*/
		main_quantlexiti_165 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %165 = load i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_64)) begin
		main_quantlexiti_165_reg <= main_quantlexiti_165;
		if (start == 1'b0 && ^(main_quantlexiti_165) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_165_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %166 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 4), align 4, !tbaa !1*/
		main_quantlexiti_166 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %166 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_64)) begin
		main_quantlexiti_166_reg <= main_quantlexiti_166;
		if (start == 1'b0 && ^(main_quantlexiti_166) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_166_reg"); $finish; end
	end
end
always @(*) begin
	main_quantlexiti_167 = main_signed_multiply_32_4;
end
always @(*) begin
/* main: %quantl.exit.i*/
/*   %167 = mul nsw i32 %166, %165*/
	main_quantlexiti_167_reg = main_1_89_reg;
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %168 = add nsw i32 %164, %167*/
		main_quantlexiti_168 = main_signed_add_32_0;
end
always @(*) begin
/* main: %quantl.exit.i*/
/*   %168 = add nsw i32 %164, %167*/
	main_quantlexiti_168_reg = main_98_gep6_reg;
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %169 = load i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 5), align 4, !tbaa !1*/
		main_quantlexiti_169 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %169 = load i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_65)) begin
		main_quantlexiti_169_reg <= main_quantlexiti_169;
		if (start == 1'b0 && ^(main_quantlexiti_169) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_169_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %170 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 5), align 4, !tbaa !1*/
		main_quantlexiti_170 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %170 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_65)) begin
		main_quantlexiti_170_reg <= main_quantlexiti_170;
		if (start == 1'b0 && ^(main_quantlexiti_170) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_170_reg"); $finish; end
	end
end
always @(*) begin
	main_quantlexiti_171 = main_signed_multiply_32_4;
end
always @(*) begin
/* main: %quantl.exit.i*/
/*   %171 = mul nsw i32 %170, %169*/
	main_quantlexiti_171_reg = main_1_89_reg;
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %172 = add nsw i32 %168, %171*/
		main_quantlexiti_172 = main_signed_add_32_0;
end
always @(*) begin
/* main: %quantl.exit.i*/
/*   %172 = add nsw i32 %168, %171*/
	main_quantlexiti_172_reg = main_1_90_reg;
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %173 = load i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 1, i32 0), align 4, !tbaa !1*/
		main_quantlexiti_173 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %173 = load i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 1, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_66)) begin
		main_quantlexiti_173_reg <= main_quantlexiti_173;
		if (start == 1'b0 && ^(main_quantlexiti_173) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_173_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %174 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 1, i32 0), align 4, !tbaa !1*/
		main_quantlexiti_174 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %174 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 1, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_66)) begin
		main_quantlexiti_174_reg <= main_quantlexiti_174;
		if (start == 1'b0 && ^(main_quantlexiti_174) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_174_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %175 = add i32 %172, %173*/
		main_quantlexiti_175 = main_signed_add_32_1;
end
always @(*) begin
/* main: %quantl.exit.i*/
/*   %175 = add i32 %172, %173*/
	main_quantlexiti_175_reg = main_1_88_reg;
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %176 = add i32 %175, %174*/
		main_quantlexiti_176 = main_signed_add_32_2;
end
always @(*) begin
/* main: %quantl.exit.i*/
/*   %176 = add i32 %175, %174*/
	main_quantlexiti_176_reg = main_preheaderi_315_reg;
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %177 = load i32* getelementptr ([6 x i32]* @delay_bph, i32 1, i32 1), align 4, !tbaa !1*/
		main_quantlexiti_177 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %177 = load i32* getelementptr ([6 x i32]* @delay_bph, i32 1, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_67)) begin
		main_quantlexiti_177_reg <= main_quantlexiti_177;
		if (start == 1'b0 && ^(main_quantlexiti_177) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_177_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %178 = load i32* getelementptr ([6 x i32]* @delay_dhx, i32 1, i32 1), align 4, !tbaa !1*/
		main_quantlexiti_178 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %178 = load i32* getelementptr ([6 x i32]* @delay_dhx, i32 1, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_67)) begin
		main_quantlexiti_178_reg <= main_quantlexiti_178;
		if (start == 1'b0 && ^(main_quantlexiti_178) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_178_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %179 = add i32 %176, %177*/
		main_quantlexiti_179 = main_signed_add_32_0;
end
always @(*) begin
/* main: %quantl.exit.i*/
/*   %179 = add i32 %176, %177*/
	main_quantlexiti_179_reg = main_1_90_reg;
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %180 = add i32 %179, %178*/
		main_quantlexiti_180 = main_signed_add_32_1;
end
always @(*) begin
/* main: %quantl.exit.i*/
/*   %180 = add i32 %179, %178*/
	main_quantlexiti_180_reg = main_1_88_reg;
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %181 = load i32* getelementptr ([6 x i32]* @delay_bph, i32 1, i32 2), align 4, !tbaa !1*/
		main_quantlexiti_181 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %181 = load i32* getelementptr ([6 x i32]* @delay_bph, i32 1, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_68)) begin
		main_quantlexiti_181_reg <= main_quantlexiti_181;
		if (start == 1'b0 && ^(main_quantlexiti_181) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_181_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %182 = load i32* getelementptr ([6 x i32]* @delay_dhx, i32 1, i32 2), align 4, !tbaa !1*/
		main_quantlexiti_182 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %182 = load i32* getelementptr ([6 x i32]* @delay_dhx, i32 1, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_68)) begin
		main_quantlexiti_182_reg <= main_quantlexiti_182;
		if (start == 1'b0 && ^(main_quantlexiti_182) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_182_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %183 = add i32 %180, %181*/
		main_quantlexiti_183 = main_signed_add_32_0;
end
always @(*) begin
/* main: %quantl.exit.i*/
/*   %183 = add i32 %180, %181*/
	main_quantlexiti_183_reg = main_1_90_reg;
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %184 = add i32 %183, %182*/
		main_quantlexiti_184 = main_signed_add_32_1;
end
always @(*) begin
/* main: %quantl.exit.i*/
/*   %184 = add i32 %183, %182*/
	main_quantlexiti_184_reg = main_quantlexiti_144_reg;
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %185 = load i32* getelementptr ([6 x i32]* @delay_bph, i32 1, i32 3), align 4, !tbaa !1*/
		main_quantlexiti_185 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %185 = load i32* getelementptr ([6 x i32]* @delay_bph, i32 1, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_69)) begin
		main_quantlexiti_185_reg <= main_quantlexiti_185;
		if (start == 1'b0 && ^(main_quantlexiti_185) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_185_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %186 = load i32* getelementptr ([6 x i32]* @delay_dhx, i32 1, i32 3), align 4, !tbaa !1*/
		main_quantlexiti_186 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %186 = load i32* getelementptr ([6 x i32]* @delay_dhx, i32 1, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_69)) begin
		main_quantlexiti_186_reg <= main_quantlexiti_186;
		if (start == 1'b0 && ^(main_quantlexiti_186) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_186_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %187 = add i32 %184, %185*/
		main_quantlexiti_187 = main_signed_add_32_0;
end
always @(*) begin
/* main: %quantl.exit.i*/
/*   %187 = add i32 %184, %185*/
	main_quantlexiti_187_reg = main_1_90_reg;
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %188 = add i32 %187, %186*/
		main_quantlexiti_188 = main_signed_add_32_1;
end
always @(*) begin
/* main: %quantl.exit.i*/
/*   %188 = add i32 %187, %186*/
	main_quantlexiti_188_reg = main_1_88_reg;
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %189 = load i32* getelementptr ([6 x i32]* @delay_bph, i32 1, i32 4), align 4, !tbaa !1*/
		main_quantlexiti_189 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %189 = load i32* getelementptr ([6 x i32]* @delay_bph, i32 1, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_70)) begin
		main_quantlexiti_189_reg <= main_quantlexiti_189;
		if (start == 1'b0 && ^(main_quantlexiti_189) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_189_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %190 = load i32* getelementptr ([6 x i32]* @delay_dhx, i32 1, i32 4), align 4, !tbaa !1*/
		main_quantlexiti_190 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %190 = load i32* getelementptr ([6 x i32]* @delay_dhx, i32 1, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_70)) begin
		main_quantlexiti_190_reg <= main_quantlexiti_190;
		if (start == 1'b0 && ^(main_quantlexiti_190) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_190_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %191 = add i32 %188, %189*/
		main_quantlexiti_191 = main_signed_add_32_0;
end
always @(*) begin
/* main: %quantl.exit.i*/
/*   %191 = add i32 %188, %189*/
	main_quantlexiti_191_reg = main_1_90_reg;
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %192 = add i32 %191, %190*/
		main_quantlexiti_192 = main_signed_add_32_1;
end
always @(*) begin
/* main: %quantl.exit.i*/
/*   %192 = add i32 %191, %190*/
	main_quantlexiti_192_reg = main_quantlexiti_144_reg;
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %193 = ashr i32 %192, 14*/
		main_quantlexiti_193 = ($signed(main_quantlexiti_192) >>> 32'd14);
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %193 = ashr i32 %192, 14*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_70)) begin
		main_quantlexiti_193_reg <= main_quantlexiti_193;
		if (start == 1'b0 && ^(main_quantlexiti_193) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_193_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %194 = shl i32 %rh2.0, 1*/
		main_quantlexiti_194 = (main_1_rh20_reg <<< (32'd1 % 32));
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %194 = shl i32 %rh2.0, 1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_48)) begin
		main_quantlexiti_194_reg <= main_quantlexiti_194;
		if (start == 1'b0 && ^(main_quantlexiti_194) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_194_reg"); $finish; end
	end
end
always @(*) begin
	main_quantlexiti_195 = main_signed_multiply_32_7;
end
always @(*) begin
/* main: %quantl.exit.i*/
/*   %195 = mul nsw i32 %194, %ah2.0*/
	main_quantlexiti_195_reg = main_preheaderi_345_reg;
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %196 = ashr i32 %195, 15*/
		main_quantlexiti_196 = ($signed(main_quantlexiti_195) >>> 32'd15);
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %196 = ashr i32 %195, 15*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_49)) begin
		main_quantlexiti_196_reg <= main_quantlexiti_196;
		if (start == 1'b0 && ^(main_quantlexiti_196) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_196_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %197 = add nsw i32 %196, %193*/
		main_quantlexiti_197 = main_signed_add_32_2;
end
always @(*) begin
/* main: %quantl.exit.i*/
/*   %197 = add nsw i32 %196, %193*/
	main_quantlexiti_197_reg = main_preheaderi_315_reg;
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %198 = sub nsw i32 %51, %197*/
		main_quantlexiti_198 = main_signed_subtract_32_0;
end
always @(*) begin
/* main: %quantl.exit.i*/
/*   %198 = sub nsw i32 %51, %197*/
	main_quantlexiti_198_reg = main_1_91_reg;
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %199 = ashr i32 %198, 31*/
		main_quantlexiti_199 = ($signed(main_quantlexiti_198) >>> 32'd31);
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %199 = ashr i32 %198, 31*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_70)) begin
		main_quantlexiti_199_reg <= main_quantlexiti_199;
		if (start == 1'b0 && ^(main_quantlexiti_199) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_199_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %200 = and i32 %199, -2*/
		main_quantlexiti_200 = (main_quantlexiti_199 & -32'd2);
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %200 = and i32 %199, -2*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_70)) begin
		main_quantlexiti_200_reg <= main_quantlexiti_200;
		if (start == 1'b0 && ^(main_quantlexiti_200) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_200_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %201 = add nsw i32 %200, 3*/
		main_quantlexiti_201 = main_signed_add_32_8;
end
always @(*) begin
/* main: %quantl.exit.i*/
/*   %201 = add nsw i32 %200, 3*/
	main_quantlexiti_201_reg = main_preheaderi_323_reg;
end
always @(*) begin
	main_quantlexiti_202 = main_signed_multiply_32_8;
end
always @(*) begin
/* main: %quantl.exit.i*/
/*   %202 = mul nsw i32 %deth.0, 564*/
	main_quantlexiti_202_reg = main_1_59_reg;
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %203 = ashr i32 %202, 12*/
		main_quantlexiti_203 = ($signed(main_quantlexiti_202) >>> 32'd12);
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %203 = ashr i32 %202, 12*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_49)) begin
		main_quantlexiti_203_reg <= main_quantlexiti_203;
		if (start == 1'b0 && ^(main_quantlexiti_203) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_203_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %204 = icmp sgt i32 %198, -1*/
		main_quantlexiti_204 = ($signed(main_quantlexiti_198) > $signed(-32'd1));
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %204 = icmp sgt i32 %198, -1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_70)) begin
		main_quantlexiti_204_reg <= main_quantlexiti_204;
		if (start == 1'b0 && ^(main_quantlexiti_204) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_204_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %205 = sub nsw i32 0, %198*/
		main_quantlexiti_205 = main_signed_subtract_32_1;
end
always @(*) begin
/* main: %quantl.exit.i*/
/*   %205 = sub nsw i32 0, %198*/
	main_quantlexiti_205_reg = main_1_95_reg;
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %m.0.i3.i = select i1 %204, i32 %198, i32 %205*/
		main_quantlexiti_m0i3i = (main_quantlexiti_204 ? main_quantlexiti_198 : main_quantlexiti_205);
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %m.0.i3.i = select i1 %204, i32 %198, i32 %205*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_70)) begin
		main_quantlexiti_m0i3i_reg <= main_quantlexiti_m0i3i;
		if (start == 1'b0 && ^(main_quantlexiti_m0i3i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_m0i3i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %206 = icmp sgt i32 %m.0.i3.i, %203*/
		main_quantlexiti_206 = ($signed(main_quantlexiti_m0i3i_reg) > $signed(main_quantlexiti_203_reg));
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %206 = icmp sgt i32 %m.0.i3.i, %203*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_71)) begin
		main_quantlexiti_206_reg <= main_quantlexiti_206;
		if (start == 1'b0 && ^(main_quantlexiti_206) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_206_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %207 = add nsw i32 %200, 2*/
		main_quantlexiti_207 = main_signed_add_32_3;
end
always @(*) begin
/* main: %quantl.exit.i*/
/*   %207 = add nsw i32 %200, 2*/
	main_quantlexiti_207_reg = main_1_47_reg;
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %. = select i1 %206, i32 %207, i32 %201*/
		main_quantlexiti_ = (main_quantlexiti_206 ? main_quantlexiti_207_reg : main_quantlexiti_201_reg);
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %. = select i1 %206, i32 %207, i32 %201*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_71)) begin
		main_quantlexiti__reg <= main_quantlexiti_;
		if (start == 1'b0 && ^(main_quantlexiti_) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti__reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %208 = shl nsw i32 %203, 1*/
		main_quantlexiti_208 = (main_quantlexiti_203 <<< (32'd1 % 32));
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %208 = shl nsw i32 %203, 1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_49)) begin
		main_quantlexiti_208_reg <= main_quantlexiti_208;
		if (start == 1'b0 && ^(main_quantlexiti_208) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_208_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %209 = icmp sgt i32 %m.0.i3.i, %208*/
		main_quantlexiti_209 = ($signed(main_quantlexiti_m0i3i_reg) > $signed(main_quantlexiti_208_reg));
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %209 = icmp sgt i32 %m.0.i3.i, %208*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_71)) begin
		main_quantlexiti_209_reg <= main_quantlexiti_209;
		if (start == 1'b0 && ^(main_quantlexiti_209) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_209_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %210 = add nsw i32 %., -2*/
		main_quantlexiti_210 = main_signed_add_32_0;
end
always @(*) begin
/* main: %quantl.exit.i*/
/*   %210 = add nsw i32 %., -2*/
	main_quantlexiti_210_reg = main_1_90_reg;
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %ih.1 = select i1 %209, i32 %210, i32 %.*/
		main_quantlexiti_ih1 = (main_quantlexiti_209 ? main_quantlexiti_210 : main_quantlexiti_);
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %ih.1 = select i1 %209, i32 %210, i32 %.*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_71)) begin
		main_quantlexiti_ih1_reg <= main_quantlexiti_ih1;
		if (start == 1'b0 && ^(main_quantlexiti_ih1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_ih1_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %gep_int19 = ptrtoint [4 x i32]* @qq2_code2_table to i32*/
if (reset) begin main_quantlexiti_gep_int19 = 0; end
		main_quantlexiti_gep_int19 = 0;
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %gep_int19 = ptrtoint [4 x i32]* @qq2_code2_table to i32*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_48)) begin
		main_quantlexiti_gep_int19_reg <= main_quantlexiti_gep_int19;
		if (start == 1'b0 && ^(main_quantlexiti_gep_int19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_gep_int19_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %gep_array20 = mul i32 %ih.1, 4*/
		main_quantlexiti_gep_array20 = (main_quantlexiti_ih1_reg * 32'd4);
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %gep_array20 = mul i32 %ih.1, 4*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_72)) begin
		main_quantlexiti_gep_array20_reg <= main_quantlexiti_gep_array20;
		if (start == 1'b0 && ^(main_quantlexiti_gep_array20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_gep_array20_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %gep21 = add i32 %gep_int19, %gep_array20*/
		main_quantlexiti_gep21 = main_signed_add_32_0;
end
always @(*) begin
/* main: %quantl.exit.i*/
/*   %gep21 = add i32 %gep_int19, %gep_array20*/
	main_quantlexiti_gep21_reg = main_1_90_reg;
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %211 = inttoptr i32 %gep21 to i32**/
		main_quantlexiti_211 = main_quantlexiti_gep21;
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %211 = inttoptr i32 %gep21 to i32**/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_73)) begin
		main_quantlexiti_211_reg <= main_quantlexiti_211;
		if (start == 1'b0 && ^(main_quantlexiti_211) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_211_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %212 = load i32* %211, align 4, !tbaa !1*/
		main_quantlexiti_212 = qq2_code2_table_out_a;
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %212 = load i32* %211, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_74)) begin
		main_quantlexiti_212_reg <= main_quantlexiti_212;
		if (start == 1'b0 && ^(main_quantlexiti_212) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_212_reg"); $finish; end
	end
end
always @(*) begin
	main_quantlexiti_213 = main_signed_multiply_32_4;
end
always @(*) begin
/* main: %quantl.exit.i*/
/*   %213 = mul nsw i32 %212, %deth.0*/
	main_quantlexiti_213_reg = main_1_89_reg;
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %214 = ashr i32 %213, 15*/
		main_quantlexiti_214 = ($signed(main_quantlexiti_213) >>> 32'd15);
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %214 = ashr i32 %213, 15*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_75)) begin
		main_quantlexiti_214_reg <= main_quantlexiti_214;
		if (start == 1'b0 && ^(main_quantlexiti_214) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_214_reg"); $finish; end
	end
end
always @(*) begin
	main_quantlexiti_215 = main_signed_multiply_32_9;
end
always @(*) begin
/* main: %quantl.exit.i*/
/*   %215 = mul nsw i32 %nbh.0, 127*/
	main_quantlexiti_215_reg = main_1_86_reg;
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %216 = ashr i32 %215, 7*/
		main_quantlexiti_216 = ($signed(main_quantlexiti_215) >>> 32'd7);
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %216 = ashr i32 %215, 7*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_49)) begin
		main_quantlexiti_216_reg <= main_quantlexiti_216;
		if (start == 1'b0 && ^(main_quantlexiti_216) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_216_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %gep_int22 = ptrtoint [4 x i32]* @wh_code_table to i32*/
if (reset) begin main_quantlexiti_gep_int22 = 0; end
		main_quantlexiti_gep_int22 = 0;
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %gep_int22 = ptrtoint [4 x i32]* @wh_code_table to i32*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_48)) begin
		main_quantlexiti_gep_int22_reg <= main_quantlexiti_gep_int22;
		if (start == 1'b0 && ^(main_quantlexiti_gep_int22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_gep_int22_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %gep_array23 = mul i32 %ih.1, 4*/
		main_quantlexiti_gep_array23 = (main_quantlexiti_ih1_reg * 32'd4);
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %gep_array23 = mul i32 %ih.1, 4*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_72)) begin
		main_quantlexiti_gep_array23_reg <= main_quantlexiti_gep_array23;
		if (start == 1'b0 && ^(main_quantlexiti_gep_array23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_gep_array23_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %gep24 = add i32 %gep_int22, %gep_array23*/
		main_quantlexiti_gep24 = main_signed_add_32_1;
end
always @(*) begin
/* main: %quantl.exit.i*/
/*   %gep24 = add i32 %gep_int22, %gep_array23*/
	main_quantlexiti_gep24_reg = main_1_88_reg;
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %217 = inttoptr i32 %gep24 to i32**/
		main_quantlexiti_217 = main_quantlexiti_gep24;
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %217 = inttoptr i32 %gep24 to i32**/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_73)) begin
		main_quantlexiti_217_reg <= main_quantlexiti_217;
		if (start == 1'b0 && ^(main_quantlexiti_217) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_217_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %218 = load i32* %217, align 4, !tbaa !1*/
		main_quantlexiti_218 = wh_code_table_out_a;
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %218 = load i32* %217, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_74)) begin
		main_quantlexiti_218_reg <= main_quantlexiti_218;
		if (start == 1'b0 && ^(main_quantlexiti_218) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_218_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %219 = add nsw i32 %216, %218*/
		main_quantlexiti_219 = main_signed_add_32_0;
end
always @(*) begin
/* main: %quantl.exit.i*/
/*   %219 = add nsw i32 %216, %218*/
	main_quantlexiti_219_reg = main_1_90_reg;
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %220 = icmp slt i32 %219, 0*/
		main_quantlexiti_220 = ($signed(main_quantlexiti_219) < $signed(32'd0));
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %220 = icmp slt i32 %219, 0*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_74)) begin
		main_quantlexiti_220_reg <= main_quantlexiti_220;
		if (start == 1'b0 && ^(main_quantlexiti_220) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_220_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %..i1.i1 = select i1 %220, i32 0, i32 %219*/
		main_quantlexiti_i1i1 = (main_quantlexiti_220 ? 32'd0 : main_quantlexiti_219);
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %..i1.i1 = select i1 %220, i32 0, i32 %219*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_74)) begin
		main_quantlexiti_i1i1_reg <= main_quantlexiti_i1i1;
		if (start == 1'b0 && ^(main_quantlexiti_i1i1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_i1i1_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %221 = icmp sgt i32 %..i1.i1, 22528*/
		main_quantlexiti_221 = ($signed(main_quantlexiti_i1i1) > $signed(32'd22528));
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %221 = icmp sgt i32 %..i1.i1, 22528*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_74)) begin
		main_quantlexiti_221_reg <= main_quantlexiti_221;
		if (start == 1'b0 && ^(main_quantlexiti_221) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_221_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %...i2.i2 = select i1 %221, i32 22528, i32 %..i1.i1*/
		main_quantlexiti_i2i2 = (main_quantlexiti_221 ? 32'd22528 : main_quantlexiti_i1i1);
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %...i2.i2 = select i1 %221, i32 22528, i32 %..i1.i1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_74)) begin
		main_quantlexiti_i2i2_reg <= main_quantlexiti_i2i2;
		if (start == 1'b0 && ^(main_quantlexiti_i2i2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_i2i2_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %222 = lshr i32 %...i2.i2, 6*/
		main_quantlexiti_222 = (main_quantlexiti_i2i2 >>> (32'd6 % 32));
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %222 = lshr i32 %...i2.i2, 6*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_74)) begin
		main_quantlexiti_222_reg <= main_quantlexiti_222;
		if (start == 1'b0 && ^(main_quantlexiti_222) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_222_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %223 = and i32 %222, 31*/
		main_quantlexiti_223 = (main_quantlexiti_222 & 32'd31);
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %223 = and i32 %222, 31*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_74)) begin
		main_quantlexiti_223_reg <= main_quantlexiti_223;
		if (start == 1'b0 && ^(main_quantlexiti_223) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_223_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %224 = ashr i32 %...i2.i2, 11*/
		main_quantlexiti_224 = ($signed(main_quantlexiti_i2i2) >>> 32'd11);
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %224 = ashr i32 %...i2.i2, 11*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_74)) begin
		main_quantlexiti_224_reg <= main_quantlexiti_224;
		if (start == 1'b0 && ^(main_quantlexiti_224) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_224_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %gep_int25 = ptrtoint [32 x i32]* @ilb_table to i32*/
if (reset) begin main_quantlexiti_gep_int25 = 0; end
		main_quantlexiti_gep_int25 = 0;
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %gep_int25 = ptrtoint [32 x i32]* @ilb_table to i32*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_48)) begin
		main_quantlexiti_gep_int25_reg <= main_quantlexiti_gep_int25;
		if (start == 1'b0 && ^(main_quantlexiti_gep_int25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_gep_int25_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %gep_array26 = mul i32 %223, 4*/
		main_quantlexiti_gep_array26 = (main_quantlexiti_223_reg * 32'd4);
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %gep_array26 = mul i32 %223, 4*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_75)) begin
		main_quantlexiti_gep_array26_reg <= main_quantlexiti_gep_array26;
		if (start == 1'b0 && ^(main_quantlexiti_gep_array26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_gep_array26_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %gep27 = add i32 %gep_int25, %gep_array26*/
		main_quantlexiti_gep27 = main_signed_add_32_0;
end
always @(*) begin
/* main: %quantl.exit.i*/
/*   %gep27 = add i32 %gep_int25, %gep_array26*/
	main_quantlexiti_gep27_reg = main_1_90_reg;
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %225 = inttoptr i32 %gep27 to i32**/
		main_quantlexiti_225 = main_quantlexiti_gep27;
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %225 = inttoptr i32 %gep27 to i32**/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_76)) begin
		main_quantlexiti_225_reg <= main_quantlexiti_225;
		if (start == 1'b0 && ^(main_quantlexiti_225) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_225_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %226 = load i32* %225, align 4, !tbaa !1*/
		main_quantlexiti_226 = ilb_table_out_a;
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %226 = load i32* %225, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_77)) begin
		main_quantlexiti_226_reg <= main_quantlexiti_226;
		if (start == 1'b0 && ^(main_quantlexiti_226) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_226_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %227 = sub i32 11, %224*/
		main_quantlexiti_227 = main_signed_subtract_32_0;
end
always @(*) begin
/* main: %quantl.exit.i*/
/*   %227 = sub i32 11, %224*/
	main_quantlexiti_227_reg = main_1_91_reg;
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %228 = ashr i32 %226, %227*/
		main_quantlexiti_228 = ($signed(main_quantlexiti_226) >>> main_quantlexiti_227_reg);
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %228 = ashr i32 %226, %227*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_77)) begin
		main_quantlexiti_228_reg <= main_quantlexiti_228;
		if (start == 1'b0 && ^(main_quantlexiti_228) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_228_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %229 = shl i32 %228, 3*/
		main_quantlexiti_229 = (main_quantlexiti_228 <<< (32'd3 % 32));
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %229 = shl i32 %228, 3*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_77)) begin
		main_quantlexiti_229_reg <= main_quantlexiti_229;
		if (start == 1'b0 && ^(main_quantlexiti_229) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_229_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %230 = add nsw i32 %193, %214*/
		main_quantlexiti_230 = main_signed_add_32_1;
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %230 = add nsw i32 %193, %214*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_75)) begin
		main_quantlexiti_230_reg <= main_quantlexiti_230;
		if (start == 1'b0 && ^(main_quantlexiti_230) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_230_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %231 = shl nsw i32 %ah1.0, 2*/
		main_quantlexiti_231 = (main_1_ah10_reg <<< (32'd2 % 32));
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %231 = shl nsw i32 %ah1.0, 2*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_48)) begin
		main_quantlexiti_231_reg <= main_quantlexiti_231;
		if (start == 1'b0 && ^(main_quantlexiti_231) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_231_reg"); $finish; end
	end
end
always @(*) begin
	main_quantlexiti_232 = main_signed_multiply_32_4;
end
always @(*) begin
/* main: %quantl.exit.i*/
/*   %232 = mul nsw i32 %ph1.0, %230*/
	main_quantlexiti_232_reg = main_1_89_reg;
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %233 = icmp sgt i32 %232, -1*/
		main_quantlexiti_233 = ($signed(main_quantlexiti_232) > $signed(-32'd1));
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %233 = icmp sgt i32 %232, -1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_76)) begin
		main_quantlexiti_233_reg <= main_quantlexiti_233;
		if (start == 1'b0 && ^(main_quantlexiti_233) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_233_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %234 = sub nsw i32 0, %231*/
		main_quantlexiti_234 = main_signed_subtract_32_1;
end
always @(*) begin
/* main: %quantl.exit.i*/
/*   %234 = sub nsw i32 0, %231*/
	main_quantlexiti_234_reg = main_preheaderi_435_reg;
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %.1.i.i3 = select i1 %233, i32 %234, i32 %231*/
		main_quantlexiti_1ii3 = (main_quantlexiti_233 ? main_quantlexiti_234_reg : main_quantlexiti_231_reg);
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %.1.i.i3 = select i1 %233, i32 %234, i32 %231*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_76)) begin
		main_quantlexiti_1ii3_reg <= main_quantlexiti_1ii3;
		if (start == 1'b0 && ^(main_quantlexiti_1ii3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_1ii3_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %235 = ashr i32 %.1.i.i3, 7*/
		main_quantlexiti_235 = ($signed(main_quantlexiti_1ii3) >>> 32'd7);
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %235 = ashr i32 %.1.i.i3, 7*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_76)) begin
		main_quantlexiti_235_reg <= main_quantlexiti_235;
		if (start == 1'b0 && ^(main_quantlexiti_235) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_235_reg"); $finish; end
	end
end
always @(*) begin
	main_quantlexiti_236 = main_signed_multiply_32_7;
end
always @(*) begin
/* main: %quantl.exit.i*/
/*   %236 = mul nsw i32 %ph2.0, %230*/
	main_quantlexiti_236_reg = main_preheaderi_345_reg;
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %237 = ashr i32 %236, 31*/
		main_quantlexiti_237 = ($signed(main_quantlexiti_236) >>> 32'd31);
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %237 = ashr i32 %236, 31*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_76)) begin
		main_quantlexiti_237_reg <= main_quantlexiti_237;
		if (start == 1'b0 && ^(main_quantlexiti_237) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_237_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %238 = and i32 %237, -256*/
		main_quantlexiti_238 = (main_quantlexiti_237 & -32'd256);
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %238 = and i32 %237, -256*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_76)) begin
		main_quantlexiti_238_reg <= main_quantlexiti_238;
		if (start == 1'b0 && ^(main_quantlexiti_238) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_238_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %239 = or i32 %238, 128*/
		main_quantlexiti_239 = (main_quantlexiti_238 | 32'd128);
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %239 = or i32 %238, 128*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_76)) begin
		main_quantlexiti_239_reg <= main_quantlexiti_239;
		if (start == 1'b0 && ^(main_quantlexiti_239) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_239_reg"); $finish; end
	end
end
always @(*) begin
	main_quantlexiti_240 = main_signed_multiply_32_27;
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %240 = mul nsw i32 %ah2.0, 127*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_49)) begin
		main_quantlexiti_240_reg <= main_quantlexiti_240;
		if (start == 1'b0 && ^(main_quantlexiti_240) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_240_reg"); $finish; end
	end
	/* main: %quantl.exit.i*/
	/*   %240 = mul nsw i32 %ah2.0, 127*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_49)) begin
		main_quantlexiti_240_reg <= main_quantlexiti_240;
		if (start == 1'b0 && ^(main_quantlexiti_240) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_240_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %500 = mul nsw i32 %accumc.10.0, -44*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_102)) begin
		main_quantlexiti_240_reg <= main_preheaderi_500;
		if (start == 1'b0 && ^(main_preheaderi_500) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_240_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %241 = ashr i32 %240, 7*/
		main_quantlexiti_241 = ($signed(main_quantlexiti_240) >>> 32'd7);
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %241 = ashr i32 %240, 7*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_49)) begin
		main_quantlexiti_241_reg <= main_quantlexiti_241;
		if (start == 1'b0 && ^(main_quantlexiti_241) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_241_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %wd4.0.i.i4 = add nsw i32 %235, %241*/
		main_quantlexiti_wd40ii4 = main_signed_add_32_1;
end
always @(*) begin
/* main: %quantl.exit.i*/
/*   %wd4.0.i.i4 = add nsw i32 %235, %241*/
	main_quantlexiti_wd40ii4_reg = main_1_88_reg;
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %242 = add nsw i32 %wd4.0.i.i4, %239*/
		main_quantlexiti_242 = main_signed_add_32_2;
end
always @(*) begin
/* main: %quantl.exit.i*/
/*   %242 = add nsw i32 %wd4.0.i.i4, %239*/
	main_quantlexiti_242_reg = main_preheaderi_315_reg;
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %243 = icmp sgt i32 %242, 12288*/
		main_quantlexiti_243 = ($signed(main_quantlexiti_242) > $signed(32'd12288));
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %243 = icmp sgt i32 %242, 12288*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_76)) begin
		main_quantlexiti_243_reg <= main_quantlexiti_243;
		if (start == 1'b0 && ^(main_quantlexiti_243) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_243_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %..i.i5 = select i1 %243, i32 12288, i32 %242*/
		main_quantlexiti_ii5 = (main_quantlexiti_243 ? 32'd12288 : main_quantlexiti_242);
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %..i.i5 = select i1 %243, i32 12288, i32 %242*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_76)) begin
		main_quantlexiti_ii5_reg <= main_quantlexiti_ii5;
		if (start == 1'b0 && ^(main_quantlexiti_ii5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_ii5_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %244 = icmp slt i32 %..i.i5, -12288*/
		main_quantlexiti_244 = ($signed(main_quantlexiti_ii5_reg) < $signed(-32'd12288));
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %244 = icmp slt i32 %..i.i5, -12288*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_77)) begin
		main_quantlexiti_244_reg <= main_quantlexiti_244;
		if (start == 1'b0 && ^(main_quantlexiti_244) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_244_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %...i.i6 = select i1 %244, i32 -12288, i32 %..i.i5*/
		main_quantlexiti_ii6 = (main_quantlexiti_244 ? -32'd12288 : main_quantlexiti_ii5_reg);
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %...i.i6 = select i1 %244, i32 -12288, i32 %..i.i5*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_77)) begin
		main_quantlexiti_ii6_reg <= main_quantlexiti_ii6;
		if (start == 1'b0 && ^(main_quantlexiti_ii6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_ii6_reg"); $finish; end
	end
end
always @(*) begin
	main_quantlexiti_245 = main_signed_multiply_32_28;
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %245 = mul nsw i32 %ah1.0, 255*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_49)) begin
		main_quantlexiti_245_reg <= main_quantlexiti_245;
		if (start == 1'b0 && ^(main_quantlexiti_245) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_245_reg"); $finish; end
	end
	/* main: %quantl.exit.i*/
	/*   %245 = mul nsw i32 %ah1.0, 255*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_49)) begin
		main_quantlexiti_245_reg <= main_quantlexiti_245;
		if (start == 1'b0 && ^(main_quantlexiti_245) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_245_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %502 = mul nsw i32 %accumd.10.0, 12*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_102)) begin
		main_quantlexiti_245_reg <= main_preheaderi_502;
		if (start == 1'b0 && ^(main_preheaderi_502) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_245_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %246 = ashr i32 %245, 8*/
		main_quantlexiti_246 = ($signed(main_quantlexiti_245) >>> 32'd8);
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %246 = ashr i32 %245, 8*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_49)) begin
		main_quantlexiti_246_reg <= main_quantlexiti_246;
		if (start == 1'b0 && ^(main_quantlexiti_246) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_246_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %247 = ashr i32 %232, 31*/
		main_quantlexiti_247 = ($signed(main_quantlexiti_232) >>> 32'd31);
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %247 = ashr i32 %232, 31*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_76)) begin
		main_quantlexiti_247_reg <= main_quantlexiti_247;
		if (start == 1'b0 && ^(main_quantlexiti_247) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_247_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %248 = and i32 %247, -384*/
		main_quantlexiti_248 = (main_quantlexiti_247 & -32'd384);
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %248 = and i32 %247, -384*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_76)) begin
		main_quantlexiti_248_reg <= main_quantlexiti_248;
		if (start == 1'b0 && ^(main_quantlexiti_248) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_248_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %249 = add nsw i32 %246, 192*/
		main_quantlexiti_249 = main_signed_add_32_2;
end
always @(*) begin
/* main: %quantl.exit.i*/
/*   %249 = add nsw i32 %246, 192*/
	main_quantlexiti_249_reg = main_preheaderi_gep48_reg;
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %apl1.0.i.i7 = add nsw i32 %249, %248*/
		main_quantlexiti_apl10ii7 = main_signed_add_32_8;
end
always @(*) begin
/* main: %quantl.exit.i*/
/*   %apl1.0.i.i7 = add nsw i32 %249, %248*/
	main_quantlexiti_apl10ii7_reg = main_preheaderi_323_reg;
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %250 = sub nsw i32 15360, %...i.i6*/
		main_quantlexiti_250 = main_signed_subtract_32_0;
end
always @(*) begin
/* main: %quantl.exit.i*/
/*   %250 = sub nsw i32 15360, %...i.i6*/
	main_quantlexiti_250_reg = main_1_93_reg;
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %251 = icmp sgt i32 %apl1.0.i.i7, %250*/
		main_quantlexiti_251 = ($signed(main_quantlexiti_apl10ii7_reg) > $signed(main_quantlexiti_250));
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %251 = icmp sgt i32 %apl1.0.i.i7, %250*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_77)) begin
		main_quantlexiti_251_reg <= main_quantlexiti_251;
		if (start == 1'b0 && ^(main_quantlexiti_251) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_251_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %.apl1.0.i.i8 = select i1 %251, i32 %250, i32 %apl1.0.i.i7*/
		main_quantlexiti_apl10ii8 = (main_quantlexiti_251 ? main_quantlexiti_250 : main_quantlexiti_apl10ii7_reg);
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %.apl1.0.i.i8 = select i1 %251, i32 %250, i32 %apl1.0.i.i7*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_77)) begin
		main_quantlexiti_apl10ii8_reg <= main_quantlexiti_apl10ii8;
		if (start == 1'b0 && ^(main_quantlexiti_apl10ii8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_apl10ii8_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %252 = sub nsw i32 0, %250*/
		main_quantlexiti_252 = main_signed_subtract_32_1;
end
always @(*) begin
/* main: %quantl.exit.i*/
/*   %252 = sub nsw i32 0, %250*/
	main_quantlexiti_252_reg = main_1_95_reg;
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %253 = icmp slt i32 %.apl1.0.i.i8, %252*/
		main_quantlexiti_253 = ($signed(main_quantlexiti_apl10ii8_reg) < $signed(main_quantlexiti_252_reg));
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %253 = icmp slt i32 %.apl1.0.i.i8, %252*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_79)) begin
		main_quantlexiti_253_reg <= main_quantlexiti_253;
		if (start == 1'b0 && ^(main_quantlexiti_253) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_253_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %apl1.2.i.i9 = select i1 %253, i32 %252, i32 %.apl1.0.i.i8*/
		main_quantlexiti_apl12ii9 = (main_quantlexiti_253 ? main_quantlexiti_252_reg : main_quantlexiti_apl10ii8_reg);
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %apl1.2.i.i9 = select i1 %253, i32 %252, i32 %.apl1.0.i.i8*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_79)) begin
		main_quantlexiti_apl12ii9_reg <= main_quantlexiti_apl12ii9;
		if (start == 1'b0 && ^(main_quantlexiti_apl12ii9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_apl12ii9_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %254 = add nsw i32 %214, %197*/
		main_quantlexiti_254 = main_signed_add_32_0;
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %254 = add nsw i32 %214, %197*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_75)) begin
		main_quantlexiti_254_reg <= main_quantlexiti_254;
		if (start == 1'b0 && ^(main_quantlexiti_254) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_254_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %255 = shl i32 %ih.1, 6*/
		main_quantlexiti_255 = (main_quantlexiti_ih1 <<< (32'd6 % 32));
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %255 = shl i32 %ih.1, 6*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_71)) begin
		main_quantlexiti_255_reg <= main_quantlexiti_255;
		if (start == 1'b0 && ^(main_quantlexiti_255) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_255_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %256 = or i32 %255, %ril.0.i.i*/
		main_quantlexiti_256 = (main_quantlexiti_255 | main_quantlexiti_ril0ii_reg);
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %256 = or i32 %255, %ril.0.i.i*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_71)) begin
		main_quantlexiti_256_reg <= main_quantlexiti_256;
		if (start == 1'b0 && ^(main_quantlexiti_256) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_256_reg"); $finish; end
	end
end
always @(*) begin
	main_quantlexiti_257 = main_signed_divide_32_0;
end
always @(*) begin
/* main: %quantl.exit.i*/
/*   %257 = sdiv i32 %i.02.i, 2*/
	main_quantlexiti_257_reg = main_preheaderi_263_reg;
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %gep_int28 = ptrtoint [100 x i32]* @compressed to i32*/
if (reset) begin main_quantlexiti_gep_int28 = 0; end
		main_quantlexiti_gep_int28 = 0;
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %gep_int28 = ptrtoint [100 x i32]* @compressed to i32*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_48)) begin
		main_quantlexiti_gep_int28_reg <= main_quantlexiti_gep_int28;
		if (start == 1'b0 && ^(main_quantlexiti_gep_int28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_gep_int28_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %gep_array29 = mul i32 %257, 4*/
		main_quantlexiti_gep_array29 = (main_quantlexiti_257 * 32'd4);
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %gep_array29 = mul i32 %257, 4*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_82)) begin
		main_quantlexiti_gep_array29_reg <= main_quantlexiti_gep_array29;
		if (start == 1'b0 && ^(main_quantlexiti_gep_array29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_gep_array29_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %gep30 = add i32 %gep_int28, %gep_array29*/
		main_quantlexiti_gep30 = main_signed_add_32_0;
end
always @(*) begin
/* main: %quantl.exit.i*/
/*   %gep30 = add i32 %gep_int28, %gep_array29*/
	main_quantlexiti_gep30_reg = main_1_90_reg;
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %258 = inttoptr i32 %gep30 to i32**/
		main_quantlexiti_258 = main_quantlexiti_gep30;
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %258 = inttoptr i32 %gep30 to i32**/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_83)) begin
		main_quantlexiti_258_reg <= main_quantlexiti_258;
		if (start == 1'b0 && ^(main_quantlexiti_258) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_258_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %259 = add nsw i32 %i.02.i, 2*/
		main_quantlexiti_259 = main_signed_add_32_0;
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %259 = add nsw i32 %i.02.i, 2*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_48)) begin
		main_quantlexiti_259_reg <= main_quantlexiti_259;
		if (start == 1'b0 && ^(main_quantlexiti_259) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_259_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %260 = icmp slt i32 %259, 100*/
		main_quantlexiti_260 = ($signed(main_quantlexiti_259) < $signed(32'd100));
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %260 = icmp slt i32 %259, 100*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_48)) begin
		main_quantlexiti_260_reg <= main_quantlexiti_260;
		if (start == 1'b0 && ^(main_quantlexiti_260) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexiti_260_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %encode.exit._crit_edge*/
	/*   %.pre = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 2), align 4, !tbaa !1*/
		main_encodeexit_crit_edge_pre = tqmf_out_a;
end
always @(posedge clk) begin
	/* main: %encode.exit._crit_edge*/
	/*   %.pre = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_86)) begin
		main_encodeexit_crit_edge_pre_reg <= main_encodeexit_crit_edge_pre;
		if (start == 1'b0 && ^(main_encodeexit_crit_edge_pre) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_encodeexit_crit_edge_pre_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %encode.exit._crit_edge*/
	/*   %.pre16 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 20), align 4, !tbaa !1*/
		main_encodeexit_crit_edge_pre16 = tqmf_out_b;
end
always @(posedge clk) begin
	/* main: %encode.exit._crit_edge*/
	/*   %.pre16 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 20), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_86)) begin
		main_encodeexit_crit_edge_pre16_reg <= main_encodeexit_crit_edge_pre16;
		if (start == 1'b0 && ^(main_encodeexit_crit_edge_pre16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_encodeexit_crit_edge_pre16_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %encode.exit._crit_edge*/
	/*   %.pre17 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 22), align 4, !tbaa !1*/
		main_encodeexit_crit_edge_pre17 = tqmf_out_a;
end
always @(posedge clk) begin
	/* main: %encode.exit._crit_edge*/
	/*   %.pre17 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 22), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_87)) begin
		main_encodeexit_crit_edge_pre17_reg <= main_encodeexit_crit_edge_pre17;
		if (start == 1'b0 && ^(main_encodeexit_crit_edge_pre17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_encodeexit_crit_edge_pre17_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %encode.exit._crit_edge*/
	/*   %.pre18 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 21), align 4, !tbaa !1*/
		main_encodeexit_crit_edge_pre18 = tqmf_out_b;
end
always @(posedge clk) begin
	/* main: %encode.exit._crit_edge*/
	/*   %.pre18 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 21), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_87)) begin
		main_encodeexit_crit_edge_pre18_reg <= main_encodeexit_crit_edge_pre18;
		if (start == 1'b0 && ^(main_encodeexit_crit_edge_pre18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_encodeexit_crit_edge_pre18_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %encode.exit._crit_edge*/
	/*   %.pre19 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 23), align 4, !tbaa !1*/
		main_encodeexit_crit_edge_pre19 = tqmf_out_a;
end
always @(posedge clk) begin
	/* main: %encode.exit._crit_edge*/
	/*   %.pre19 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 23), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_88)) begin
		main_encodeexit_crit_edge_pre19_reg <= main_encodeexit_crit_edge_pre19;
		if (start == 1'b0 && ^(main_encodeexit_crit_edge_pre19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_encodeexit_crit_edge_pre19_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %encode.exit._crit_edge*/
	/*   %.pre20 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 19), align 4, !tbaa !1*/
		main_encodeexit_crit_edge_pre20 = tqmf_out_b;
end
always @(posedge clk) begin
	/* main: %encode.exit._crit_edge*/
	/*   %.pre20 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 19), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_88)) begin
		main_encodeexit_crit_edge_pre20_reg <= main_encodeexit_crit_edge_pre20;
		if (start == 1'b0 && ^(main_encodeexit_crit_edge_pre20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_encodeexit_crit_edge_pre20_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %encode.exit._crit_edge*/
	/*   %.pre21 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 18), align 4, !tbaa !1*/
		main_encodeexit_crit_edge_pre21 = tqmf_out_a;
end
always @(posedge clk) begin
	/* main: %encode.exit._crit_edge*/
	/*   %.pre21 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 18), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_89)) begin
		main_encodeexit_crit_edge_pre21_reg <= main_encodeexit_crit_edge_pre21;
		if (start == 1'b0 && ^(main_encodeexit_crit_edge_pre21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_encodeexit_crit_edge_pre21_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %encode.exit._crit_edge*/
	/*   %.pre22 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 17), align 4, !tbaa !1*/
		main_encodeexit_crit_edge_pre22 = tqmf_out_b;
end
always @(posedge clk) begin
	/* main: %encode.exit._crit_edge*/
	/*   %.pre22 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 17), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_89)) begin
		main_encodeexit_crit_edge_pre22_reg <= main_encodeexit_crit_edge_pre22;
		if (start == 1'b0 && ^(main_encodeexit_crit_edge_pre22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_encodeexit_crit_edge_pre22_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %encode.exit._crit_edge*/
	/*   %.pre23 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 16), align 4, !tbaa !1*/
		main_encodeexit_crit_edge_pre23 = tqmf_out_a;
end
always @(posedge clk) begin
	/* main: %encode.exit._crit_edge*/
	/*   %.pre23 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 16), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_90)) begin
		main_encodeexit_crit_edge_pre23_reg <= main_encodeexit_crit_edge_pre23;
		if (start == 1'b0 && ^(main_encodeexit_crit_edge_pre23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_encodeexit_crit_edge_pre23_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %encode.exit._crit_edge*/
	/*   %.pre24 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 15), align 4, !tbaa !1*/
		main_encodeexit_crit_edge_pre24 = tqmf_out_b;
end
always @(posedge clk) begin
	/* main: %encode.exit._crit_edge*/
	/*   %.pre24 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 15), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_90)) begin
		main_encodeexit_crit_edge_pre24_reg <= main_encodeexit_crit_edge_pre24;
		if (start == 1'b0 && ^(main_encodeexit_crit_edge_pre24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_encodeexit_crit_edge_pre24_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %encode.exit._crit_edge*/
	/*   %.pre25 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 14), align 4, !tbaa !1*/
		main_encodeexit_crit_edge_pre25 = tqmf_out_a;
end
always @(posedge clk) begin
	/* main: %encode.exit._crit_edge*/
	/*   %.pre25 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 14), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_91)) begin
		main_encodeexit_crit_edge_pre25_reg <= main_encodeexit_crit_edge_pre25;
		if (start == 1'b0 && ^(main_encodeexit_crit_edge_pre25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_encodeexit_crit_edge_pre25_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %encode.exit._crit_edge*/
	/*   %.pre26 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 13), align 4, !tbaa !1*/
		main_encodeexit_crit_edge_pre26 = tqmf_out_b;
end
always @(posedge clk) begin
	/* main: %encode.exit._crit_edge*/
	/*   %.pre26 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 13), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_91)) begin
		main_encodeexit_crit_edge_pre26_reg <= main_encodeexit_crit_edge_pre26;
		if (start == 1'b0 && ^(main_encodeexit_crit_edge_pre26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_encodeexit_crit_edge_pre26_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %encode.exit._crit_edge*/
	/*   %.pre27 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 12), align 4, !tbaa !1*/
		main_encodeexit_crit_edge_pre27 = tqmf_out_a;
end
always @(posedge clk) begin
	/* main: %encode.exit._crit_edge*/
	/*   %.pre27 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 12), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_92)) begin
		main_encodeexit_crit_edge_pre27_reg <= main_encodeexit_crit_edge_pre27;
		if (start == 1'b0 && ^(main_encodeexit_crit_edge_pre27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_encodeexit_crit_edge_pre27_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %encode.exit._crit_edge*/
	/*   %.pre28 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 11), align 4, !tbaa !1*/
		main_encodeexit_crit_edge_pre28 = tqmf_out_b;
end
always @(posedge clk) begin
	/* main: %encode.exit._crit_edge*/
	/*   %.pre28 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 11), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_92)) begin
		main_encodeexit_crit_edge_pre28_reg <= main_encodeexit_crit_edge_pre28;
		if (start == 1'b0 && ^(main_encodeexit_crit_edge_pre28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_encodeexit_crit_edge_pre28_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %encode.exit._crit_edge*/
	/*   %.pre29 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 10), align 4, !tbaa !1*/
		main_encodeexit_crit_edge_pre29 = tqmf_out_a;
end
always @(posedge clk) begin
	/* main: %encode.exit._crit_edge*/
	/*   %.pre29 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 10), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_93)) begin
		main_encodeexit_crit_edge_pre29_reg <= main_encodeexit_crit_edge_pre29;
		if (start == 1'b0 && ^(main_encodeexit_crit_edge_pre29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_encodeexit_crit_edge_pre29_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %encode.exit._crit_edge*/
	/*   %.pre30 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 9), align 4, !tbaa !1*/
		main_encodeexit_crit_edge_pre30 = tqmf_out_b;
end
always @(posedge clk) begin
	/* main: %encode.exit._crit_edge*/
	/*   %.pre30 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 9), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_93)) begin
		main_encodeexit_crit_edge_pre30_reg <= main_encodeexit_crit_edge_pre30;
		if (start == 1'b0 && ^(main_encodeexit_crit_edge_pre30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_encodeexit_crit_edge_pre30_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %encode.exit._crit_edge*/
	/*   %.pre31 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 8), align 4, !tbaa !1*/
		main_encodeexit_crit_edge_pre31 = tqmf_out_a;
end
always @(posedge clk) begin
	/* main: %encode.exit._crit_edge*/
	/*   %.pre31 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 8), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_94)) begin
		main_encodeexit_crit_edge_pre31_reg <= main_encodeexit_crit_edge_pre31;
		if (start == 1'b0 && ^(main_encodeexit_crit_edge_pre31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_encodeexit_crit_edge_pre31_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %encode.exit._crit_edge*/
	/*   %.pre32 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 7), align 4, !tbaa !1*/
		main_encodeexit_crit_edge_pre32 = tqmf_out_b;
end
always @(posedge clk) begin
	/* main: %encode.exit._crit_edge*/
	/*   %.pre32 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_94)) begin
		main_encodeexit_crit_edge_pre32_reg <= main_encodeexit_crit_edge_pre32;
		if (start == 1'b0 && ^(main_encodeexit_crit_edge_pre32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_encodeexit_crit_edge_pre32_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %encode.exit._crit_edge*/
	/*   %.pre33 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 6), align 4, !tbaa !1*/
		main_encodeexit_crit_edge_pre33 = tqmf_out_a;
end
always @(posedge clk) begin
	/* main: %encode.exit._crit_edge*/
	/*   %.pre33 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 6), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_95)) begin
		main_encodeexit_crit_edge_pre33_reg <= main_encodeexit_crit_edge_pre33;
		if (start == 1'b0 && ^(main_encodeexit_crit_edge_pre33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_encodeexit_crit_edge_pre33_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %encode.exit._crit_edge*/
	/*   %.pre34 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 5), align 4, !tbaa !1*/
		main_encodeexit_crit_edge_pre34 = tqmf_out_b;
end
always @(posedge clk) begin
	/* main: %encode.exit._crit_edge*/
	/*   %.pre34 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_95)) begin
		main_encodeexit_crit_edge_pre34_reg <= main_encodeexit_crit_edge_pre34;
		if (start == 1'b0 && ^(main_encodeexit_crit_edge_pre34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_encodeexit_crit_edge_pre34_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %encode.exit._crit_edge*/
	/*   %.pre35 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 4), align 4, !tbaa !1*/
		main_encodeexit_crit_edge_pre35 = tqmf_out_a;
end
always @(posedge clk) begin
	/* main: %encode.exit._crit_edge*/
	/*   %.pre35 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_96)) begin
		main_encodeexit_crit_edge_pre35_reg <= main_encodeexit_crit_edge_pre35;
		if (start == 1'b0 && ^(main_encodeexit_crit_edge_pre35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_encodeexit_crit_edge_pre35_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %encode.exit._crit_edge*/
	/*   %.pre36 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 3), align 4, !tbaa !1*/
		main_encodeexit_crit_edge_pre36 = tqmf_out_b;
end
always @(posedge clk) begin
	/* main: %encode.exit._crit_edge*/
	/*   %.pre36 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_96)) begin
		main_encodeexit_crit_edge_pre36_reg <= main_encodeexit_crit_edge_pre36;
		if (start == 1'b0 && ^(main_encodeexit_crit_edge_pre36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_encodeexit_crit_edge_pre36_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %encode.exit._crit_edge*/
	/*   %.pre37 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 1), align 4, !tbaa !1*/
		main_encodeexit_crit_edge_pre37 = tqmf_out_a;
end
always @(posedge clk) begin
	/* main: %encode.exit._crit_edge*/
	/*   %.pre37 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_97)) begin
		main_encodeexit_crit_edge_pre37_reg <= main_encodeexit_crit_edge_pre37;
		if (start == 1'b0 && ^(main_encodeexit_crit_edge_pre37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_encodeexit_crit_edge_pre37_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %encode.exit._crit_edge*/
	/*   %.pre38 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 0), align 4, !tbaa !1*/
		main_encodeexit_crit_edge_pre38 = tqmf_out_b;
end
always @(posedge clk) begin
	/* main: %encode.exit._crit_edge*/
	/*   %.pre38 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_97)) begin
		main_encodeexit_crit_edge_pre38_reg <= main_encodeexit_crit_edge_pre38;
		if (start == 1'b0 && ^(main_encodeexit_crit_edge_pre38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_encodeexit_crit_edge_pre38_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %encode.exit._crit_edge*/
	/*   %.pre39 = load i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 0), align 4, !tbaa !1*/
		main_encodeexit_crit_edge_pre39 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %encode.exit._crit_edge*/
	/*   %.pre39 = load i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_87)) begin
		main_encodeexit_crit_edge_pre39_reg <= main_encodeexit_crit_edge_pre39;
		if (start == 1'b0 && ^(main_encodeexit_crit_edge_pre39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_encodeexit_crit_edge_pre39_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %encode.exit._crit_edge*/
	/*   %.pre40 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 0), align 4, !tbaa !1*/
		main_encodeexit_crit_edge_pre40 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %encode.exit._crit_edge*/
	/*   %.pre40 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_87)) begin
		main_encodeexit_crit_edge_pre40_reg <= main_encodeexit_crit_edge_pre40;
		if (start == 1'b0 && ^(main_encodeexit_crit_edge_pre40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_encodeexit_crit_edge_pre40_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %encode.exit._crit_edge*/
	/*   %.pre41 = load i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 1), align 4, !tbaa !1*/
		main_encodeexit_crit_edge_pre41 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %encode.exit._crit_edge*/
	/*   %.pre41 = load i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_88)) begin
		main_encodeexit_crit_edge_pre41_reg <= main_encodeexit_crit_edge_pre41;
		if (start == 1'b0 && ^(main_encodeexit_crit_edge_pre41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_encodeexit_crit_edge_pre41_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %encode.exit._crit_edge*/
	/*   %.pre42 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 1), align 4, !tbaa !1*/
		main_encodeexit_crit_edge_pre42 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %encode.exit._crit_edge*/
	/*   %.pre42 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_88)) begin
		main_encodeexit_crit_edge_pre42_reg <= main_encodeexit_crit_edge_pre42;
		if (start == 1'b0 && ^(main_encodeexit_crit_edge_pre42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_encodeexit_crit_edge_pre42_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %encode.exit._crit_edge*/
	/*   %.pre43 = load i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 2), align 4, !tbaa !1*/
		main_encodeexit_crit_edge_pre43 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %encode.exit._crit_edge*/
	/*   %.pre43 = load i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_89)) begin
		main_encodeexit_crit_edge_pre43_reg <= main_encodeexit_crit_edge_pre43;
		if (start == 1'b0 && ^(main_encodeexit_crit_edge_pre43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_encodeexit_crit_edge_pre43_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %encode.exit._crit_edge*/
	/*   %.pre44 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 2), align 4, !tbaa !1*/
		main_encodeexit_crit_edge_pre44 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %encode.exit._crit_edge*/
	/*   %.pre44 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_89)) begin
		main_encodeexit_crit_edge_pre44_reg <= main_encodeexit_crit_edge_pre44;
		if (start == 1'b0 && ^(main_encodeexit_crit_edge_pre44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_encodeexit_crit_edge_pre44_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %encode.exit._crit_edge*/
	/*   %.pre45 = load i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 3), align 4, !tbaa !1*/
		main_encodeexit_crit_edge_pre45 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %encode.exit._crit_edge*/
	/*   %.pre45 = load i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_90)) begin
		main_encodeexit_crit_edge_pre45_reg <= main_encodeexit_crit_edge_pre45;
		if (start == 1'b0 && ^(main_encodeexit_crit_edge_pre45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_encodeexit_crit_edge_pre45_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %encode.exit._crit_edge*/
	/*   %.pre46 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 3), align 4, !tbaa !1*/
		main_encodeexit_crit_edge_pre46 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %encode.exit._crit_edge*/
	/*   %.pre46 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_90)) begin
		main_encodeexit_crit_edge_pre46_reg <= main_encodeexit_crit_edge_pre46;
		if (start == 1'b0 && ^(main_encodeexit_crit_edge_pre46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_encodeexit_crit_edge_pre46_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %encode.exit._crit_edge*/
	/*   %.pre47 = load i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 4), align 4, !tbaa !1*/
		main_encodeexit_crit_edge_pre47 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %encode.exit._crit_edge*/
	/*   %.pre47 = load i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_91)) begin
		main_encodeexit_crit_edge_pre47_reg <= main_encodeexit_crit_edge_pre47;
		if (start == 1'b0 && ^(main_encodeexit_crit_edge_pre47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_encodeexit_crit_edge_pre47_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %encode.exit._crit_edge*/
	/*   %.pre48 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 4), align 4, !tbaa !1*/
		main_encodeexit_crit_edge_pre48 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %encode.exit._crit_edge*/
	/*   %.pre48 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_91)) begin
		main_encodeexit_crit_edge_pre48_reg <= main_encodeexit_crit_edge_pre48;
		if (start == 1'b0 && ^(main_encodeexit_crit_edge_pre48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_encodeexit_crit_edge_pre48_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %encode.exit._crit_edge*/
	/*   %.pre49 = load i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 5), align 4, !tbaa !1*/
		main_encodeexit_crit_edge_pre49 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %encode.exit._crit_edge*/
	/*   %.pre49 = load i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_92)) begin
		main_encodeexit_crit_edge_pre49_reg <= main_encodeexit_crit_edge_pre49;
		if (start == 1'b0 && ^(main_encodeexit_crit_edge_pre49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_encodeexit_crit_edge_pre49_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i.preheader*/
	/*   %ril.0.i.i.lcssa = phi i32 [ %ril.0.i.i, %quantl.exit.i ]*/
		main_preheaderipreheader_ril0iilcssa = main_quantlexiti_ril0ii_reg;
end
always @(posedge clk) begin
	/* main: %.preheader.i.preheader*/
	/*   %ril.0.i.i.lcssa = phi i32 [ %ril.0.i.i, %quantl.exit.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_quantlexiti_84) & (memory_controller_waitrequest == 0)) & (main_quantlexiti_260_reg == 0))) begin
		main_preheaderipreheader_ril0iilcssa_reg <= main_preheaderipreheader_ril0iilcssa;
		if (start == 1'b0 && ^(main_preheaderipreheader_ril0iilcssa) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderipreheader_ril0iilcssa_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i.preheader*/
	/*   %gep_int31 = ptrtoint [64 x i32]* @qq6_code6_table to i32*/
if (reset) begin main_preheaderipreheader_gep_int31 = 0; end
		main_preheaderipreheader_gep_int31 = 0;
end
always @(posedge clk) begin
	/* main: %.preheader.i.preheader*/
	/*   %gep_int31 = ptrtoint [64 x i32]* @qq6_code6_table to i32*/
	if ((cur_state == LEGUP_F_main_BB_preheaderipreheader_98)) begin
		main_preheaderipreheader_gep_int31_reg <= main_preheaderipreheader_gep_int31;
		if (start == 1'b0 && ^(main_preheaderipreheader_gep_int31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderipreheader_gep_int31_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i.preheader*/
	/*   %gep_array32 = mul i32 %ril.0.i.i.lcssa, 4*/
		main_preheaderipreheader_gep_array32 = (main_preheaderipreheader_ril0iilcssa_reg * 32'd4);
end
always @(posedge clk) begin
	/* main: %.preheader.i.preheader*/
	/*   %gep_array32 = mul i32 %ril.0.i.i.lcssa, 4*/
	if ((cur_state == LEGUP_F_main_BB_preheaderipreheader_98)) begin
		main_preheaderipreheader_gep_array32_reg <= main_preheaderipreheader_gep_array32;
		if (start == 1'b0 && ^(main_preheaderipreheader_gep_array32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderipreheader_gep_array32_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i.preheader*/
	/*   %gep33 = add i32 %gep_int31, %gep_array32*/
		main_preheaderipreheader_gep33 = main_signed_add_32_0;
end
always @(*) begin
/* main: %.preheader.i.preheader*/
/*   %gep33 = add i32 %gep_int31, %gep_array32*/
	main_preheaderipreheader_gep33_reg = main_1_90_reg;
end
always @(*) begin
	/* main: %.preheader.i.preheader*/
	/*   %261 = inttoptr i32 %gep33 to i32**/
		main_preheaderipreheader_261 = main_preheaderipreheader_gep33;
end
always @(posedge clk) begin
	/* main: %.preheader.i.preheader*/
	/*   %261 = inttoptr i32 %gep33 to i32**/
	if ((cur_state == LEGUP_F_main_BB_preheaderipreheader_99)) begin
		main_preheaderipreheader_261_reg <= main_preheaderipreheader_261;
		if (start == 1'b0 && ^(main_preheaderipreheader_261) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderipreheader_261_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i.preheader*/
	/*   %262 = load i32* %261, align 4, !tbaa !1*/
		main_preheaderipreheader_262 = qq6_code6_table_out_a;
end
always @(posedge clk) begin
	/* main: %.preheader.i.preheader*/
	/*   %262 = load i32* %261, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderipreheader_100)) begin
		main_preheaderipreheader_262_reg <= main_preheaderipreheader_262;
		if (start == 1'b0 && ^(main_preheaderipreheader_262) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderipreheader_262_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %accumd.10.0 = phi i32 [ %accumd.9.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderipreheader_100) & (memory_controller_waitrequest == 0))) begin
		main_preheaderi_accumd100 = 32'd0;
	end
	/* main: %.preheader.i*/
	/*   %accumd.10.0 = phi i32 [ %accumd.9.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_preheaderi_159) & (memory_controller_waitrequest == 0)) & (main_preheaderi_510_reg == 1'd1))) */ begin
		main_preheaderi_accumd100 = main_preheaderi_accumd90_reg;
	end
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %accumd.10.0 = phi i32 [ %accumd.9.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderipreheader_100) & (memory_controller_waitrequest == 0))) begin
		main_preheaderi_accumd100_reg <= main_preheaderi_accumd100;
		if (start == 1'b0 && ^(main_preheaderi_accumd100) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_accumd100_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %accumd.10.0 = phi i32 [ %accumd.9.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if ((((cur_state == LEGUP_F_main_BB_preheaderi_159) & (memory_controller_waitrequest == 0)) & (main_preheaderi_510_reg == 1'd1))) begin
		main_preheaderi_accumd100_reg <= main_preheaderi_accumd100;
		if (start == 1'b0 && ^(main_preheaderi_accumd100) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_accumd100_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %accumd.9.0 = phi i32 [ %accumd.8.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderipreheader_100) & (memory_controller_waitrequest == 0))) begin
		main_preheaderi_accumd90 = 32'd0;
	end
	/* main: %.preheader.i*/
	/*   %accumd.9.0 = phi i32 [ %accumd.8.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_preheaderi_159) & (memory_controller_waitrequest == 0)) & (main_preheaderi_510_reg == 1'd1))) */ begin
		main_preheaderi_accumd90 = main_preheaderi_accumd80_reg;
	end
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %accumd.9.0 = phi i32 [ %accumd.8.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderipreheader_100) & (memory_controller_waitrequest == 0))) begin
		main_preheaderi_accumd90_reg <= main_preheaderi_accumd90;
		if (start == 1'b0 && ^(main_preheaderi_accumd90) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_accumd90_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %accumd.9.0 = phi i32 [ %accumd.8.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if ((((cur_state == LEGUP_F_main_BB_preheaderi_159) & (memory_controller_waitrequest == 0)) & (main_preheaderi_510_reg == 1'd1))) begin
		main_preheaderi_accumd90_reg <= main_preheaderi_accumd90;
		if (start == 1'b0 && ^(main_preheaderi_accumd90) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_accumd90_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %accumd.8.0 = phi i32 [ %accumd.7.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderipreheader_100) & (memory_controller_waitrequest == 0))) begin
		main_preheaderi_accumd80 = 32'd0;
	end
	/* main: %.preheader.i*/
	/*   %accumd.8.0 = phi i32 [ %accumd.7.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_preheaderi_159) & (memory_controller_waitrequest == 0)) & (main_preheaderi_510_reg == 1'd1))) */ begin
		main_preheaderi_accumd80 = main_preheaderi_accumd70_reg;
	end
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %accumd.8.0 = phi i32 [ %accumd.7.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderipreheader_100) & (memory_controller_waitrequest == 0))) begin
		main_preheaderi_accumd80_reg <= main_preheaderi_accumd80;
		if (start == 1'b0 && ^(main_preheaderi_accumd80) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_accumd80_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %accumd.8.0 = phi i32 [ %accumd.7.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if ((((cur_state == LEGUP_F_main_BB_preheaderi_159) & (memory_controller_waitrequest == 0)) & (main_preheaderi_510_reg == 1'd1))) begin
		main_preheaderi_accumd80_reg <= main_preheaderi_accumd80;
		if (start == 1'b0 && ^(main_preheaderi_accumd80) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_accumd80_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %accumd.7.0 = phi i32 [ %accumd.6.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderipreheader_100) & (memory_controller_waitrequest == 0))) begin
		main_preheaderi_accumd70 = 32'd0;
	end
	/* main: %.preheader.i*/
	/*   %accumd.7.0 = phi i32 [ %accumd.6.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_preheaderi_159) & (memory_controller_waitrequest == 0)) & (main_preheaderi_510_reg == 1'd1))) */ begin
		main_preheaderi_accumd70 = main_preheaderi_accumd60_reg;
	end
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %accumd.7.0 = phi i32 [ %accumd.6.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderipreheader_100) & (memory_controller_waitrequest == 0))) begin
		main_preheaderi_accumd70_reg <= main_preheaderi_accumd70;
		if (start == 1'b0 && ^(main_preheaderi_accumd70) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_accumd70_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %accumd.7.0 = phi i32 [ %accumd.6.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if ((((cur_state == LEGUP_F_main_BB_preheaderi_159) & (memory_controller_waitrequest == 0)) & (main_preheaderi_510_reg == 1'd1))) begin
		main_preheaderi_accumd70_reg <= main_preheaderi_accumd70;
		if (start == 1'b0 && ^(main_preheaderi_accumd70) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_accumd70_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %accumd.6.0 = phi i32 [ %accumd.5.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderipreheader_100) & (memory_controller_waitrequest == 0))) begin
		main_preheaderi_accumd60 = 32'd0;
	end
	/* main: %.preheader.i*/
	/*   %accumd.6.0 = phi i32 [ %accumd.5.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_preheaderi_159) & (memory_controller_waitrequest == 0)) & (main_preheaderi_510_reg == 1'd1))) */ begin
		main_preheaderi_accumd60 = main_preheaderi_accumd50_reg;
	end
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %accumd.6.0 = phi i32 [ %accumd.5.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderipreheader_100) & (memory_controller_waitrequest == 0))) begin
		main_preheaderi_accumd60_reg <= main_preheaderi_accumd60;
		if (start == 1'b0 && ^(main_preheaderi_accumd60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_accumd60_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %accumd.6.0 = phi i32 [ %accumd.5.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if ((((cur_state == LEGUP_F_main_BB_preheaderi_159) & (memory_controller_waitrequest == 0)) & (main_preheaderi_510_reg == 1'd1))) begin
		main_preheaderi_accumd60_reg <= main_preheaderi_accumd60;
		if (start == 1'b0 && ^(main_preheaderi_accumd60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_accumd60_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %accumd.5.0 = phi i32 [ %accumd.4.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderipreheader_100) & (memory_controller_waitrequest == 0))) begin
		main_preheaderi_accumd50 = 32'd0;
	end
	/* main: %.preheader.i*/
	/*   %accumd.5.0 = phi i32 [ %accumd.4.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_preheaderi_159) & (memory_controller_waitrequest == 0)) & (main_preheaderi_510_reg == 1'd1))) */ begin
		main_preheaderi_accumd50 = main_preheaderi_accumd40_reg;
	end
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %accumd.5.0 = phi i32 [ %accumd.4.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderipreheader_100) & (memory_controller_waitrequest == 0))) begin
		main_preheaderi_accumd50_reg <= main_preheaderi_accumd50;
		if (start == 1'b0 && ^(main_preheaderi_accumd50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_accumd50_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %accumd.5.0 = phi i32 [ %accumd.4.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if ((((cur_state == LEGUP_F_main_BB_preheaderi_159) & (memory_controller_waitrequest == 0)) & (main_preheaderi_510_reg == 1'd1))) begin
		main_preheaderi_accumd50_reg <= main_preheaderi_accumd50;
		if (start == 1'b0 && ^(main_preheaderi_accumd50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_accumd50_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %accumd.4.0 = phi i32 [ %accumd.3.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderipreheader_100) & (memory_controller_waitrequest == 0))) begin
		main_preheaderi_accumd40 = 32'd0;
	end
	/* main: %.preheader.i*/
	/*   %accumd.4.0 = phi i32 [ %accumd.3.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_preheaderi_159) & (memory_controller_waitrequest == 0)) & (main_preheaderi_510_reg == 1'd1))) */ begin
		main_preheaderi_accumd40 = main_preheaderi_accumd30_reg;
	end
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %accumd.4.0 = phi i32 [ %accumd.3.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderipreheader_100) & (memory_controller_waitrequest == 0))) begin
		main_preheaderi_accumd40_reg <= main_preheaderi_accumd40;
		if (start == 1'b0 && ^(main_preheaderi_accumd40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_accumd40_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %accumd.4.0 = phi i32 [ %accumd.3.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if ((((cur_state == LEGUP_F_main_BB_preheaderi_159) & (memory_controller_waitrequest == 0)) & (main_preheaderi_510_reg == 1'd1))) begin
		main_preheaderi_accumd40_reg <= main_preheaderi_accumd40;
		if (start == 1'b0 && ^(main_preheaderi_accumd40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_accumd40_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %accumd.3.0 = phi i32 [ %accumd.2.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderipreheader_100) & (memory_controller_waitrequest == 0))) begin
		main_preheaderi_accumd30 = 32'd0;
	end
	/* main: %.preheader.i*/
	/*   %accumd.3.0 = phi i32 [ %accumd.2.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_preheaderi_159) & (memory_controller_waitrequest == 0)) & (main_preheaderi_510_reg == 1'd1))) */ begin
		main_preheaderi_accumd30 = main_preheaderi_accumd20_reg;
	end
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %accumd.3.0 = phi i32 [ %accumd.2.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderipreheader_100) & (memory_controller_waitrequest == 0))) begin
		main_preheaderi_accumd30_reg <= main_preheaderi_accumd30;
		if (start == 1'b0 && ^(main_preheaderi_accumd30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_accumd30_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %accumd.3.0 = phi i32 [ %accumd.2.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if ((((cur_state == LEGUP_F_main_BB_preheaderi_159) & (memory_controller_waitrequest == 0)) & (main_preheaderi_510_reg == 1'd1))) begin
		main_preheaderi_accumd30_reg <= main_preheaderi_accumd30;
		if (start == 1'b0 && ^(main_preheaderi_accumd30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_accumd30_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %accumd.2.0 = phi i32 [ %accumd.1.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderipreheader_100) & (memory_controller_waitrequest == 0))) begin
		main_preheaderi_accumd20 = 32'd0;
	end
	/* main: %.preheader.i*/
	/*   %accumd.2.0 = phi i32 [ %accumd.1.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_preheaderi_159) & (memory_controller_waitrequest == 0)) & (main_preheaderi_510_reg == 1'd1))) */ begin
		main_preheaderi_accumd20 = main_preheaderi_accumd10_reg;
	end
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %accumd.2.0 = phi i32 [ %accumd.1.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderipreheader_100) & (memory_controller_waitrequest == 0))) begin
		main_preheaderi_accumd20_reg <= main_preheaderi_accumd20;
		if (start == 1'b0 && ^(main_preheaderi_accumd20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_accumd20_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %accumd.2.0 = phi i32 [ %accumd.1.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if ((((cur_state == LEGUP_F_main_BB_preheaderi_159) & (memory_controller_waitrequest == 0)) & (main_preheaderi_510_reg == 1'd1))) begin
		main_preheaderi_accumd20_reg <= main_preheaderi_accumd20;
		if (start == 1'b0 && ^(main_preheaderi_accumd20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_accumd20_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %accumd.1.0 = phi i32 [ %accumd.0.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderipreheader_100) & (memory_controller_waitrequest == 0))) begin
		main_preheaderi_accumd10 = 32'd0;
	end
	/* main: %.preheader.i*/
	/*   %accumd.1.0 = phi i32 [ %accumd.0.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_preheaderi_159) & (memory_controller_waitrequest == 0)) & (main_preheaderi_510_reg == 1'd1))) */ begin
		main_preheaderi_accumd10 = main_preheaderi_accumd00_reg;
	end
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %accumd.1.0 = phi i32 [ %accumd.0.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderipreheader_100) & (memory_controller_waitrequest == 0))) begin
		main_preheaderi_accumd10_reg <= main_preheaderi_accumd10;
		if (start == 1'b0 && ^(main_preheaderi_accumd10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_accumd10_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %accumd.1.0 = phi i32 [ %accumd.0.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if ((((cur_state == LEGUP_F_main_BB_preheaderi_159) & (memory_controller_waitrequest == 0)) & (main_preheaderi_510_reg == 1'd1))) begin
		main_preheaderi_accumd10_reg <= main_preheaderi_accumd10;
		if (start == 1'b0 && ^(main_preheaderi_accumd10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_accumd10_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %accumd.0.0 = phi i32 [ %457, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderipreheader_100) & (memory_controller_waitrequest == 0))) begin
		main_preheaderi_accumd00 = 32'd0;
	end
	/* main: %.preheader.i*/
	/*   %accumd.0.0 = phi i32 [ %457, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_preheaderi_159) & (memory_controller_waitrequest == 0)) & (main_preheaderi_510_reg == 1'd1))) */ begin
		main_preheaderi_accumd00 = main_preheaderi_457_reg;
	end
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %accumd.0.0 = phi i32 [ %457, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderipreheader_100) & (memory_controller_waitrequest == 0))) begin
		main_preheaderi_accumd00_reg <= main_preheaderi_accumd00;
		if (start == 1'b0 && ^(main_preheaderi_accumd00) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_accumd00_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %accumd.0.0 = phi i32 [ %457, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if ((((cur_state == LEGUP_F_main_BB_preheaderi_159) & (memory_controller_waitrequest == 0)) & (main_preheaderi_510_reg == 1'd1))) begin
		main_preheaderi_accumd00_reg <= main_preheaderi_accumd00;
		if (start == 1'b0 && ^(main_preheaderi_accumd00) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_accumd00_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %accumc.10.0 = phi i32 [ %accumc.9.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderipreheader_100) & (memory_controller_waitrequest == 0))) begin
		main_preheaderi_accumc100 = 32'd0;
	end
	/* main: %.preheader.i*/
	/*   %accumc.10.0 = phi i32 [ %accumc.9.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_preheaderi_159) & (memory_controller_waitrequest == 0)) & (main_preheaderi_510_reg == 1'd1))) */ begin
		main_preheaderi_accumc100 = main_preheaderi_accumc90_reg;
	end
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %accumc.10.0 = phi i32 [ %accumc.9.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderipreheader_100) & (memory_controller_waitrequest == 0))) begin
		main_preheaderi_accumc100_reg <= main_preheaderi_accumc100;
		if (start == 1'b0 && ^(main_preheaderi_accumc100) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_accumc100_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %accumc.10.0 = phi i32 [ %accumc.9.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if ((((cur_state == LEGUP_F_main_BB_preheaderi_159) & (memory_controller_waitrequest == 0)) & (main_preheaderi_510_reg == 1'd1))) begin
		main_preheaderi_accumc100_reg <= main_preheaderi_accumc100;
		if (start == 1'b0 && ^(main_preheaderi_accumc100) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_accumc100_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %accumc.9.0 = phi i32 [ %accumc.8.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderipreheader_100) & (memory_controller_waitrequest == 0))) begin
		main_preheaderi_accumc90 = 32'd0;
	end
	/* main: %.preheader.i*/
	/*   %accumc.9.0 = phi i32 [ %accumc.8.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_preheaderi_159) & (memory_controller_waitrequest == 0)) & (main_preheaderi_510_reg == 1'd1))) */ begin
		main_preheaderi_accumc90 = main_preheaderi_accumc80_reg;
	end
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %accumc.9.0 = phi i32 [ %accumc.8.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderipreheader_100) & (memory_controller_waitrequest == 0))) begin
		main_preheaderi_accumc90_reg <= main_preheaderi_accumc90;
		if (start == 1'b0 && ^(main_preheaderi_accumc90) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_accumc90_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %accumc.9.0 = phi i32 [ %accumc.8.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if ((((cur_state == LEGUP_F_main_BB_preheaderi_159) & (memory_controller_waitrequest == 0)) & (main_preheaderi_510_reg == 1'd1))) begin
		main_preheaderi_accumc90_reg <= main_preheaderi_accumc90;
		if (start == 1'b0 && ^(main_preheaderi_accumc90) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_accumc90_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %accumc.8.0 = phi i32 [ %accumc.7.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderipreheader_100) & (memory_controller_waitrequest == 0))) begin
		main_preheaderi_accumc80 = 32'd0;
	end
	/* main: %.preheader.i*/
	/*   %accumc.8.0 = phi i32 [ %accumc.7.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_preheaderi_159) & (memory_controller_waitrequest == 0)) & (main_preheaderi_510_reg == 1'd1))) */ begin
		main_preheaderi_accumc80 = main_preheaderi_accumc70_reg;
	end
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %accumc.8.0 = phi i32 [ %accumc.7.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderipreheader_100) & (memory_controller_waitrequest == 0))) begin
		main_preheaderi_accumc80_reg <= main_preheaderi_accumc80;
		if (start == 1'b0 && ^(main_preheaderi_accumc80) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_accumc80_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %accumc.8.0 = phi i32 [ %accumc.7.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if ((((cur_state == LEGUP_F_main_BB_preheaderi_159) & (memory_controller_waitrequest == 0)) & (main_preheaderi_510_reg == 1'd1))) begin
		main_preheaderi_accumc80_reg <= main_preheaderi_accumc80;
		if (start == 1'b0 && ^(main_preheaderi_accumc80) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_accumc80_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %accumc.7.0 = phi i32 [ %accumc.6.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderipreheader_100) & (memory_controller_waitrequest == 0))) begin
		main_preheaderi_accumc70 = 32'd0;
	end
	/* main: %.preheader.i*/
	/*   %accumc.7.0 = phi i32 [ %accumc.6.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_preheaderi_159) & (memory_controller_waitrequest == 0)) & (main_preheaderi_510_reg == 1'd1))) */ begin
		main_preheaderi_accumc70 = main_preheaderi_accumc60_reg;
	end
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %accumc.7.0 = phi i32 [ %accumc.6.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderipreheader_100) & (memory_controller_waitrequest == 0))) begin
		main_preheaderi_accumc70_reg <= main_preheaderi_accumc70;
		if (start == 1'b0 && ^(main_preheaderi_accumc70) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_accumc70_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %accumc.7.0 = phi i32 [ %accumc.6.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if ((((cur_state == LEGUP_F_main_BB_preheaderi_159) & (memory_controller_waitrequest == 0)) & (main_preheaderi_510_reg == 1'd1))) begin
		main_preheaderi_accumc70_reg <= main_preheaderi_accumc70;
		if (start == 1'b0 && ^(main_preheaderi_accumc70) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_accumc70_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %accumc.6.0 = phi i32 [ %accumc.5.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderipreheader_100) & (memory_controller_waitrequest == 0))) begin
		main_preheaderi_accumc60 = 32'd0;
	end
	/* main: %.preheader.i*/
	/*   %accumc.6.0 = phi i32 [ %accumc.5.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_preheaderi_159) & (memory_controller_waitrequest == 0)) & (main_preheaderi_510_reg == 1'd1))) */ begin
		main_preheaderi_accumc60 = main_preheaderi_accumc50_reg;
	end
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %accumc.6.0 = phi i32 [ %accumc.5.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderipreheader_100) & (memory_controller_waitrequest == 0))) begin
		main_preheaderi_accumc60_reg <= main_preheaderi_accumc60;
		if (start == 1'b0 && ^(main_preheaderi_accumc60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_accumc60_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %accumc.6.0 = phi i32 [ %accumc.5.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if ((((cur_state == LEGUP_F_main_BB_preheaderi_159) & (memory_controller_waitrequest == 0)) & (main_preheaderi_510_reg == 1'd1))) begin
		main_preheaderi_accumc60_reg <= main_preheaderi_accumc60;
		if (start == 1'b0 && ^(main_preheaderi_accumc60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_accumc60_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %accumc.5.0 = phi i32 [ %accumc.4.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderipreheader_100) & (memory_controller_waitrequest == 0))) begin
		main_preheaderi_accumc50 = 32'd0;
	end
	/* main: %.preheader.i*/
	/*   %accumc.5.0 = phi i32 [ %accumc.4.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_preheaderi_159) & (memory_controller_waitrequest == 0)) & (main_preheaderi_510_reg == 1'd1))) */ begin
		main_preheaderi_accumc50 = main_preheaderi_accumc40_reg;
	end
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %accumc.5.0 = phi i32 [ %accumc.4.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderipreheader_100) & (memory_controller_waitrequest == 0))) begin
		main_preheaderi_accumc50_reg <= main_preheaderi_accumc50;
		if (start == 1'b0 && ^(main_preheaderi_accumc50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_accumc50_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %accumc.5.0 = phi i32 [ %accumc.4.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if ((((cur_state == LEGUP_F_main_BB_preheaderi_159) & (memory_controller_waitrequest == 0)) & (main_preheaderi_510_reg == 1'd1))) begin
		main_preheaderi_accumc50_reg <= main_preheaderi_accumc50;
		if (start == 1'b0 && ^(main_preheaderi_accumc50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_accumc50_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %accumc.4.0 = phi i32 [ %accumc.3.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderipreheader_100) & (memory_controller_waitrequest == 0))) begin
		main_preheaderi_accumc40 = 32'd0;
	end
	/* main: %.preheader.i*/
	/*   %accumc.4.0 = phi i32 [ %accumc.3.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_preheaderi_159) & (memory_controller_waitrequest == 0)) & (main_preheaderi_510_reg == 1'd1))) */ begin
		main_preheaderi_accumc40 = main_preheaderi_accumc30_reg;
	end
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %accumc.4.0 = phi i32 [ %accumc.3.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderipreheader_100) & (memory_controller_waitrequest == 0))) begin
		main_preheaderi_accumc40_reg <= main_preheaderi_accumc40;
		if (start == 1'b0 && ^(main_preheaderi_accumc40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_accumc40_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %accumc.4.0 = phi i32 [ %accumc.3.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if ((((cur_state == LEGUP_F_main_BB_preheaderi_159) & (memory_controller_waitrequest == 0)) & (main_preheaderi_510_reg == 1'd1))) begin
		main_preheaderi_accumc40_reg <= main_preheaderi_accumc40;
		if (start == 1'b0 && ^(main_preheaderi_accumc40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_accumc40_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %accumc.3.0 = phi i32 [ %accumc.2.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderipreheader_100) & (memory_controller_waitrequest == 0))) begin
		main_preheaderi_accumc30 = 32'd0;
	end
	/* main: %.preheader.i*/
	/*   %accumc.3.0 = phi i32 [ %accumc.2.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_preheaderi_159) & (memory_controller_waitrequest == 0)) & (main_preheaderi_510_reg == 1'd1))) */ begin
		main_preheaderi_accumc30 = main_preheaderi_accumc20_reg;
	end
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %accumc.3.0 = phi i32 [ %accumc.2.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderipreheader_100) & (memory_controller_waitrequest == 0))) begin
		main_preheaderi_accumc30_reg <= main_preheaderi_accumc30;
		if (start == 1'b0 && ^(main_preheaderi_accumc30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_accumc30_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %accumc.3.0 = phi i32 [ %accumc.2.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if ((((cur_state == LEGUP_F_main_BB_preheaderi_159) & (memory_controller_waitrequest == 0)) & (main_preheaderi_510_reg == 1'd1))) begin
		main_preheaderi_accumc30_reg <= main_preheaderi_accumc30;
		if (start == 1'b0 && ^(main_preheaderi_accumc30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_accumc30_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %accumc.2.0 = phi i32 [ %accumc.1.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderipreheader_100) & (memory_controller_waitrequest == 0))) begin
		main_preheaderi_accumc20 = 32'd0;
	end
	/* main: %.preheader.i*/
	/*   %accumc.2.0 = phi i32 [ %accumc.1.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_preheaderi_159) & (memory_controller_waitrequest == 0)) & (main_preheaderi_510_reg == 1'd1))) */ begin
		main_preheaderi_accumc20 = main_preheaderi_accumc10_reg;
	end
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %accumc.2.0 = phi i32 [ %accumc.1.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderipreheader_100) & (memory_controller_waitrequest == 0))) begin
		main_preheaderi_accumc20_reg <= main_preheaderi_accumc20;
		if (start == 1'b0 && ^(main_preheaderi_accumc20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_accumc20_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %accumc.2.0 = phi i32 [ %accumc.1.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if ((((cur_state == LEGUP_F_main_BB_preheaderi_159) & (memory_controller_waitrequest == 0)) & (main_preheaderi_510_reg == 1'd1))) begin
		main_preheaderi_accumc20_reg <= main_preheaderi_accumc20;
		if (start == 1'b0 && ^(main_preheaderi_accumc20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_accumc20_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %accumc.1.0 = phi i32 [ %accumc.0.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderipreheader_100) & (memory_controller_waitrequest == 0))) begin
		main_preheaderi_accumc10 = 32'd0;
	end
	/* main: %.preheader.i*/
	/*   %accumc.1.0 = phi i32 [ %accumc.0.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_preheaderi_159) & (memory_controller_waitrequest == 0)) & (main_preheaderi_510_reg == 1'd1))) */ begin
		main_preheaderi_accumc10 = main_preheaderi_accumc00_reg;
	end
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %accumc.1.0 = phi i32 [ %accumc.0.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderipreheader_100) & (memory_controller_waitrequest == 0))) begin
		main_preheaderi_accumc10_reg <= main_preheaderi_accumc10;
		if (start == 1'b0 && ^(main_preheaderi_accumc10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_accumc10_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %accumc.1.0 = phi i32 [ %accumc.0.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if ((((cur_state == LEGUP_F_main_BB_preheaderi_159) & (memory_controller_waitrequest == 0)) & (main_preheaderi_510_reg == 1'd1))) begin
		main_preheaderi_accumc10_reg <= main_preheaderi_accumc10;
		if (start == 1'b0 && ^(main_preheaderi_accumc10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_accumc10_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %accumc.0.0 = phi i32 [ %456, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderipreheader_100) & (memory_controller_waitrequest == 0))) begin
		main_preheaderi_accumc00 = 32'd0;
	end
	/* main: %.preheader.i*/
	/*   %accumc.0.0 = phi i32 [ %456, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_preheaderi_159) & (memory_controller_waitrequest == 0)) & (main_preheaderi_510_reg == 1'd1))) */ begin
		main_preheaderi_accumc00 = main_preheaderi_456_reg;
	end
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %accumc.0.0 = phi i32 [ %456, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderipreheader_100) & (memory_controller_waitrequest == 0))) begin
		main_preheaderi_accumc00_reg <= main_preheaderi_accumc00;
		if (start == 1'b0 && ^(main_preheaderi_accumc00) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_accumc00_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %accumc.0.0 = phi i32 [ %456, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if ((((cur_state == LEGUP_F_main_BB_preheaderi_159) & (memory_controller_waitrequest == 0)) & (main_preheaderi_510_reg == 1'd1))) begin
		main_preheaderi_accumc00_reg <= main_preheaderi_accumc00;
		if (start == 1'b0 && ^(main_preheaderi_accumc00) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_accumc00_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %dec_ph2.0 = phi i32 [ %dec_ph1.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderipreheader_100) & (memory_controller_waitrequest == 0))) begin
		main_preheaderi_dec_ph20 = 32'd0;
	end
	/* main: %.preheader.i*/
	/*   %dec_ph2.0 = phi i32 [ %dec_ph1.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_preheaderi_159) & (memory_controller_waitrequest == 0)) & (main_preheaderi_510_reg == 1'd1))) */ begin
		main_preheaderi_dec_ph20 = main_preheaderi_dec_ph10_reg;
	end
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %dec_ph2.0 = phi i32 [ %dec_ph1.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderipreheader_100) & (memory_controller_waitrequest == 0))) begin
		main_preheaderi_dec_ph20_reg <= main_preheaderi_dec_ph20;
		if (start == 1'b0 && ^(main_preheaderi_dec_ph20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_dec_ph20_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %dec_ph2.0 = phi i32 [ %dec_ph1.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if ((((cur_state == LEGUP_F_main_BB_preheaderi_159) & (memory_controller_waitrequest == 0)) & (main_preheaderi_510_reg == 1'd1))) begin
		main_preheaderi_dec_ph20_reg <= main_preheaderi_dec_ph20;
		if (start == 1'b0 && ^(main_preheaderi_dec_ph20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_dec_ph20_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %dec_ph1.0 = phi i32 [ %431, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderipreheader_100) & (memory_controller_waitrequest == 0))) begin
		main_preheaderi_dec_ph10 = 32'd0;
	end
	/* main: %.preheader.i*/
	/*   %dec_ph1.0 = phi i32 [ %431, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_preheaderi_159) & (memory_controller_waitrequest == 0)) & (main_preheaderi_510_reg == 1'd1))) */ begin
		main_preheaderi_dec_ph10 = main_preheaderi_431_reg;
	end
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %dec_ph1.0 = phi i32 [ %431, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderipreheader_100) & (memory_controller_waitrequest == 0))) begin
		main_preheaderi_dec_ph10_reg <= main_preheaderi_dec_ph10;
		if (start == 1'b0 && ^(main_preheaderi_dec_ph10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_dec_ph10_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %dec_ph1.0 = phi i32 [ %431, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if ((((cur_state == LEGUP_F_main_BB_preheaderi_159) & (memory_controller_waitrequest == 0)) & (main_preheaderi_510_reg == 1'd1))) begin
		main_preheaderi_dec_ph10_reg <= main_preheaderi_dec_ph10;
		if (start == 1'b0 && ^(main_preheaderi_dec_ph10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_dec_ph10_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %dec_nbh.0 = phi i32 [ %...i2.i, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderipreheader_100) & (memory_controller_waitrequest == 0))) begin
		main_preheaderi_dec_nbh0 = 32'd0;
	end
	/* main: %.preheader.i*/
	/*   %dec_nbh.0 = phi i32 [ %...i2.i, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_preheaderi_159) & (memory_controller_waitrequest == 0)) & (main_preheaderi_510_reg == 1'd1))) */ begin
		main_preheaderi_dec_nbh0 = main_preheaderi_i2i_reg;
	end
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %dec_nbh.0 = phi i32 [ %...i2.i, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderipreheader_100) & (memory_controller_waitrequest == 0))) begin
		main_preheaderi_dec_nbh0_reg <= main_preheaderi_dec_nbh0;
		if (start == 1'b0 && ^(main_preheaderi_dec_nbh0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_dec_nbh0_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %dec_nbh.0 = phi i32 [ %...i2.i, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if ((((cur_state == LEGUP_F_main_BB_preheaderi_159) & (memory_controller_waitrequest == 0)) & (main_preheaderi_510_reg == 1'd1))) begin
		main_preheaderi_dec_nbh0_reg <= main_preheaderi_dec_nbh0;
		if (start == 1'b0 && ^(main_preheaderi_dec_nbh0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_dec_nbh0_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %dec_deth.0 = phi i32 [ %430, %.preheader.i ], [ 8, %.preheader.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderipreheader_100) & (memory_controller_waitrequest == 0))) begin
		main_preheaderi_dec_deth0 = 32'd8;
	end
	/* main: %.preheader.i*/
	/*   %dec_deth.0 = phi i32 [ %430, %.preheader.i ], [ 8, %.preheader.i.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_preheaderi_159) & (memory_controller_waitrequest == 0)) & (main_preheaderi_510_reg == 1'd1))) */ begin
		main_preheaderi_dec_deth0 = main_preheaderi_430_reg;
	end
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %dec_deth.0 = phi i32 [ %430, %.preheader.i ], [ 8, %.preheader.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderipreheader_100) & (memory_controller_waitrequest == 0))) begin
		main_preheaderi_dec_deth0_reg <= main_preheaderi_dec_deth0;
		if (start == 1'b0 && ^(main_preheaderi_dec_deth0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_dec_deth0_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %dec_deth.0 = phi i32 [ %430, %.preheader.i ], [ 8, %.preheader.i.preheader ]*/
	if ((((cur_state == LEGUP_F_main_BB_preheaderi_159) & (memory_controller_waitrequest == 0)) & (main_preheaderi_510_reg == 1'd1))) begin
		main_preheaderi_dec_deth0_reg <= main_preheaderi_dec_deth0;
		if (start == 1'b0 && ^(main_preheaderi_dec_deth0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_dec_deth0_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %dec_ah2.0 = phi i32 [ %...i.i, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderipreheader_100) & (memory_controller_waitrequest == 0))) begin
		main_preheaderi_dec_ah20 = 32'd0;
	end
	/* main: %.preheader.i*/
	/*   %dec_ah2.0 = phi i32 [ %...i.i, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_preheaderi_159) & (memory_controller_waitrequest == 0)) & (main_preheaderi_510_reg == 1'd1))) */ begin
		main_preheaderi_dec_ah20 = main_preheaderi_ii_var1_reg;
	end
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %dec_ah2.0 = phi i32 [ %...i.i, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderipreheader_100) & (memory_controller_waitrequest == 0))) begin
		main_preheaderi_dec_ah20_reg <= main_preheaderi_dec_ah20;
		if (start == 1'b0 && ^(main_preheaderi_dec_ah20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_dec_ah20_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %dec_ah2.0 = phi i32 [ %...i.i, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if ((((cur_state == LEGUP_F_main_BB_preheaderi_159) & (memory_controller_waitrequest == 0)) & (main_preheaderi_510_reg == 1'd1))) begin
		main_preheaderi_dec_ah20_reg <= main_preheaderi_dec_ah20;
		if (start == 1'b0 && ^(main_preheaderi_dec_ah20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_dec_ah20_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %dec_rh2.0 = phi i32 [ %dec_rh1.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderipreheader_100) & (memory_controller_waitrequest == 0))) begin
		main_preheaderi_dec_rh20 = 32'd0;
	end
	/* main: %.preheader.i*/
	/*   %dec_rh2.0 = phi i32 [ %dec_rh1.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_preheaderi_159) & (memory_controller_waitrequest == 0)) & (main_preheaderi_510_reg == 1'd1))) */ begin
		main_preheaderi_dec_rh20 = main_preheaderi_dec_rh10_reg;
	end
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %dec_rh2.0 = phi i32 [ %dec_rh1.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderipreheader_100) & (memory_controller_waitrequest == 0))) begin
		main_preheaderi_dec_rh20_reg <= main_preheaderi_dec_rh20;
		if (start == 1'b0 && ^(main_preheaderi_dec_rh20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_dec_rh20_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %dec_rh2.0 = phi i32 [ %dec_rh1.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if ((((cur_state == LEGUP_F_main_BB_preheaderi_159) & (memory_controller_waitrequest == 0)) & (main_preheaderi_510_reg == 1'd1))) begin
		main_preheaderi_dec_rh20_reg <= main_preheaderi_dec_rh20;
		if (start == 1'b0 && ^(main_preheaderi_dec_rh20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_dec_rh20_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %dec_ah1.0 = phi i32 [ %apl1.2.i.i, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderipreheader_100) & (memory_controller_waitrequest == 0))) begin
		main_preheaderi_dec_ah10 = 32'd0;
	end
	/* main: %.preheader.i*/
	/*   %dec_ah1.0 = phi i32 [ %apl1.2.i.i, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_preheaderi_159) & (memory_controller_waitrequest == 0)) & (main_preheaderi_510_reg == 1'd1))) */ begin
		main_preheaderi_dec_ah10 = main_preheaderi_apl12ii_reg;
	end
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %dec_ah1.0 = phi i32 [ %apl1.2.i.i, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderipreheader_100) & (memory_controller_waitrequest == 0))) begin
		main_preheaderi_dec_ah10_reg <= main_preheaderi_dec_ah10;
		if (start == 1'b0 && ^(main_preheaderi_dec_ah10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_dec_ah10_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %dec_ah1.0 = phi i32 [ %apl1.2.i.i, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if ((((cur_state == LEGUP_F_main_BB_preheaderi_159) & (memory_controller_waitrequest == 0)) & (main_preheaderi_510_reg == 1'd1))) begin
		main_preheaderi_dec_ah10_reg <= main_preheaderi_dec_ah10;
		if (start == 1'b0 && ^(main_preheaderi_dec_ah10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_dec_ah10_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %dec_rh1.0 = phi i32 [ %455, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderipreheader_100) & (memory_controller_waitrequest == 0))) begin
		main_preheaderi_dec_rh10 = 32'd0;
	end
	/* main: %.preheader.i*/
	/*   %dec_rh1.0 = phi i32 [ %455, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_preheaderi_159) & (memory_controller_waitrequest == 0)) & (main_preheaderi_510_reg == 1'd1))) */ begin
		main_preheaderi_dec_rh10 = main_preheaderi_455_reg;
	end
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %dec_rh1.0 = phi i32 [ %455, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderipreheader_100) & (memory_controller_waitrequest == 0))) begin
		main_preheaderi_dec_rh10_reg <= main_preheaderi_dec_rh10;
		if (start == 1'b0 && ^(main_preheaderi_dec_rh10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_dec_rh10_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %dec_rh1.0 = phi i32 [ %455, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if ((((cur_state == LEGUP_F_main_BB_preheaderi_159) & (memory_controller_waitrequest == 0)) & (main_preheaderi_510_reg == 1'd1))) begin
		main_preheaderi_dec_rh10_reg <= main_preheaderi_dec_rh10;
		if (start == 1'b0 && ^(main_preheaderi_dec_rh10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_dec_rh10_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %dec_plt2.0 = phi i32 [ %dec_plt1.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderipreheader_100) & (memory_controller_waitrequest == 0))) begin
		main_preheaderi_dec_plt20 = 32'd0;
	end
	/* main: %.preheader.i*/
	/*   %dec_plt2.0 = phi i32 [ %dec_plt1.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_preheaderi_159) & (memory_controller_waitrequest == 0)) & (main_preheaderi_510_reg == 1'd1))) */ begin
		main_preheaderi_dec_plt20 = main_preheaderi_dec_plt10_reg;
	end
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %dec_plt2.0 = phi i32 [ %dec_plt1.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderipreheader_100) & (memory_controller_waitrequest == 0))) begin
		main_preheaderi_dec_plt20_reg <= main_preheaderi_dec_plt20;
		if (start == 1'b0 && ^(main_preheaderi_dec_plt20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_dec_plt20_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %dec_plt2.0 = phi i32 [ %dec_plt1.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if ((((cur_state == LEGUP_F_main_BB_preheaderi_159) & (memory_controller_waitrequest == 0)) & (main_preheaderi_510_reg == 1'd1))) begin
		main_preheaderi_dec_plt20_reg <= main_preheaderi_dec_plt20;
		if (start == 1'b0 && ^(main_preheaderi_dec_plt20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_dec_plt20_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %dec_plt1.0 = phi i32 [ %339, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderipreheader_100) & (memory_controller_waitrequest == 0))) begin
		main_preheaderi_dec_plt10 = 32'd0;
	end
	/* main: %.preheader.i*/
	/*   %dec_plt1.0 = phi i32 [ %339, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_preheaderi_159) & (memory_controller_waitrequest == 0)) & (main_preheaderi_510_reg == 1'd1))) */ begin
		main_preheaderi_dec_plt10 = main_preheaderi_339_reg;
	end
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %dec_plt1.0 = phi i32 [ %339, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderipreheader_100) & (memory_controller_waitrequest == 0))) begin
		main_preheaderi_dec_plt10_reg <= main_preheaderi_dec_plt10;
		if (start == 1'b0 && ^(main_preheaderi_dec_plt10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_dec_plt10_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %dec_plt1.0 = phi i32 [ %339, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if ((((cur_state == LEGUP_F_main_BB_preheaderi_159) & (memory_controller_waitrequest == 0)) & (main_preheaderi_510_reg == 1'd1))) begin
		main_preheaderi_dec_plt10_reg <= main_preheaderi_dec_plt10;
		if (start == 1'b0 && ^(main_preheaderi_dec_plt10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_dec_plt10_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %dec_nbl.0 = phi i32 [ %...i11.i, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderipreheader_100) & (memory_controller_waitrequest == 0))) begin
		main_preheaderi_dec_nbl0 = 32'd0;
	end
	/* main: %.preheader.i*/
	/*   %dec_nbl.0 = phi i32 [ %...i11.i, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_preheaderi_159) & (memory_controller_waitrequest == 0)) & (main_preheaderi_510_reg == 1'd1))) */ begin
		main_preheaderi_dec_nbl0 = main_preheaderi_i11i_var0_reg;
	end
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %dec_nbl.0 = phi i32 [ %...i11.i, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderipreheader_100) & (memory_controller_waitrequest == 0))) begin
		main_preheaderi_dec_nbl0_reg <= main_preheaderi_dec_nbl0;
		if (start == 1'b0 && ^(main_preheaderi_dec_nbl0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_dec_nbl0_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %dec_nbl.0 = phi i32 [ %...i11.i, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if ((((cur_state == LEGUP_F_main_BB_preheaderi_159) & (memory_controller_waitrequest == 0)) & (main_preheaderi_510_reg == 1'd1))) begin
		main_preheaderi_dec_nbl0_reg <= main_preheaderi_dec_nbl0;
		if (start == 1'b0 && ^(main_preheaderi_dec_nbl0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_dec_nbl0_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %dec_detl.0 = phi i32 [ %338, %.preheader.i ], [ 32, %.preheader.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderipreheader_100) & (memory_controller_waitrequest == 0))) begin
		main_preheaderi_dec_detl0 = 32'd32;
	end
	/* main: %.preheader.i*/
	/*   %dec_detl.0 = phi i32 [ %338, %.preheader.i ], [ 32, %.preheader.i.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_preheaderi_159) & (memory_controller_waitrequest == 0)) & (main_preheaderi_510_reg == 1'd1))) */ begin
		main_preheaderi_dec_detl0 = main_preheaderi_338_reg;
	end
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %dec_detl.0 = phi i32 [ %338, %.preheader.i ], [ 32, %.preheader.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderipreheader_100) & (memory_controller_waitrequest == 0))) begin
		main_preheaderi_dec_detl0_reg <= main_preheaderi_dec_detl0;
		if (start == 1'b0 && ^(main_preheaderi_dec_detl0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_dec_detl0_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %dec_detl.0 = phi i32 [ %338, %.preheader.i ], [ 32, %.preheader.i.preheader ]*/
	if ((((cur_state == LEGUP_F_main_BB_preheaderi_159) & (memory_controller_waitrequest == 0)) & (main_preheaderi_510_reg == 1'd1))) begin
		main_preheaderi_dec_detl0_reg <= main_preheaderi_dec_detl0;
		if (start == 1'b0 && ^(main_preheaderi_dec_detl0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_dec_detl0_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %dec_al2.0 = phi i32 [ %...i9.i, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderipreheader_100) & (memory_controller_waitrequest == 0))) begin
		main_preheaderi_dec_al20 = 32'd0;
	end
	/* main: %.preheader.i*/
	/*   %dec_al2.0 = phi i32 [ %...i9.i, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_preheaderi_159) & (memory_controller_waitrequest == 0)) & (main_preheaderi_510_reg == 1'd1))) */ begin
		main_preheaderi_dec_al20 = main_preheaderi_i9i_reg;
	end
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %dec_al2.0 = phi i32 [ %...i9.i, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderipreheader_100) & (memory_controller_waitrequest == 0))) begin
		main_preheaderi_dec_al20_reg <= main_preheaderi_dec_al20;
		if (start == 1'b0 && ^(main_preheaderi_dec_al20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_dec_al20_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %dec_al2.0 = phi i32 [ %...i9.i, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if ((((cur_state == LEGUP_F_main_BB_preheaderi_159) & (memory_controller_waitrequest == 0)) & (main_preheaderi_510_reg == 1'd1))) begin
		main_preheaderi_dec_al20_reg <= main_preheaderi_dec_al20;
		if (start == 1'b0 && ^(main_preheaderi_dec_al20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_dec_al20_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %dec_rlt2.0 = phi i32 [ %dec_rlt1.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderipreheader_100) & (memory_controller_waitrequest == 0))) begin
		main_preheaderi_dec_rlt20 = 32'd0;
	end
	/* main: %.preheader.i*/
	/*   %dec_rlt2.0 = phi i32 [ %dec_rlt1.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_preheaderi_159) & (memory_controller_waitrequest == 0)) & (main_preheaderi_510_reg == 1'd1))) */ begin
		main_preheaderi_dec_rlt20 = main_preheaderi_dec_rlt10_reg;
	end
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %dec_rlt2.0 = phi i32 [ %dec_rlt1.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderipreheader_100) & (memory_controller_waitrequest == 0))) begin
		main_preheaderi_dec_rlt20_reg <= main_preheaderi_dec_rlt20;
		if (start == 1'b0 && ^(main_preheaderi_dec_rlt20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_dec_rlt20_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %dec_rlt2.0 = phi i32 [ %dec_rlt1.0, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if ((((cur_state == LEGUP_F_main_BB_preheaderi_159) & (memory_controller_waitrequest == 0)) & (main_preheaderi_510_reg == 1'd1))) begin
		main_preheaderi_dec_rlt20_reg <= main_preheaderi_dec_rlt20;
		if (start == 1'b0 && ^(main_preheaderi_dec_rlt20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_dec_rlt20_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %dec_al1.0 = phi i32 [ %apl1.2.i5.i, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderipreheader_100) & (memory_controller_waitrequest == 0))) begin
		main_preheaderi_dec_al10 = 32'd0;
	end
	/* main: %.preheader.i*/
	/*   %dec_al1.0 = phi i32 [ %apl1.2.i5.i, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_preheaderi_159) & (memory_controller_waitrequest == 0)) & (main_preheaderi_510_reg == 1'd1))) */ begin
		main_preheaderi_dec_al10 = main_preheaderi_apl12i5i_reg;
	end
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %dec_al1.0 = phi i32 [ %apl1.2.i5.i, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderipreheader_100) & (memory_controller_waitrequest == 0))) begin
		main_preheaderi_dec_al10_reg <= main_preheaderi_dec_al10;
		if (start == 1'b0 && ^(main_preheaderi_dec_al10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_dec_al10_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %dec_al1.0 = phi i32 [ %apl1.2.i5.i, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if ((((cur_state == LEGUP_F_main_BB_preheaderi_159) & (memory_controller_waitrequest == 0)) & (main_preheaderi_510_reg == 1'd1))) begin
		main_preheaderi_dec_al10_reg <= main_preheaderi_dec_al10;
		if (start == 1'b0 && ^(main_preheaderi_dec_al10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_dec_al10_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %dec_rlt1.0 = phi i32 [ %363, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderipreheader_100) & (memory_controller_waitrequest == 0))) begin
		main_preheaderi_dec_rlt10 = 32'd0;
	end
	/* main: %.preheader.i*/
	/*   %dec_rlt1.0 = phi i32 [ %363, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_preheaderi_159) & (memory_controller_waitrequest == 0)) & (main_preheaderi_510_reg == 1'd1))) */ begin
		main_preheaderi_dec_rlt10 = main_preheaderi_363_reg;
	end
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %dec_rlt1.0 = phi i32 [ %363, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderipreheader_100) & (memory_controller_waitrequest == 0))) begin
		main_preheaderi_dec_rlt10_reg <= main_preheaderi_dec_rlt10;
		if (start == 1'b0 && ^(main_preheaderi_dec_rlt10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_dec_rlt10_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %dec_rlt1.0 = phi i32 [ %363, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if ((((cur_state == LEGUP_F_main_BB_preheaderi_159) & (memory_controller_waitrequest == 0)) & (main_preheaderi_510_reg == 1'd1))) begin
		main_preheaderi_dec_rlt10_reg <= main_preheaderi_dec_rlt10;
		if (start == 1'b0 && ^(main_preheaderi_dec_rlt10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_dec_rlt10_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %i.11.i = phi i32 [ %509, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderipreheader_100) & (memory_controller_waitrequest == 0))) begin
		main_preheaderi_i11i = 32'd0;
	end
	/* main: %.preheader.i*/
	/*   %i.11.i = phi i32 [ %509, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_preheaderi_159) & (memory_controller_waitrequest == 0)) & (main_preheaderi_510_reg == 1'd1))) */ begin
		main_preheaderi_i11i = main_preheaderi_509_reg;
	end
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %i.11.i = phi i32 [ %509, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderipreheader_100) & (memory_controller_waitrequest == 0))) begin
		main_preheaderi_i11i_reg <= main_preheaderi_i11i;
		if (start == 1'b0 && ^(main_preheaderi_i11i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_i11i_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %i.11.i = phi i32 [ %509, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if ((((cur_state == LEGUP_F_main_BB_preheaderi_159) & (memory_controller_waitrequest == 0)) & (main_preheaderi_510_reg == 1'd1))) begin
		main_preheaderi_i11i_reg <= main_preheaderi_i11i;
		if (start == 1'b0 && ^(main_preheaderi_i11i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_i11i_reg"); $finish; end
	end
end
always @(*) begin
	main_preheaderi_263 = main_signed_divide_32_0;
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %263 = sdiv i32 %i.11.i, 2*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_133)) begin
		main_preheaderi_263_reg <= main_preheaderi_263;
		if (start == 1'b0 && ^(main_preheaderi_263) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_263_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %263 = sdiv i32 %i.11.i, 2*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_133)) begin
		main_preheaderi_263_reg <= main_preheaderi_263;
		if (start == 1'b0 && ^(main_preheaderi_263) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_263_reg"); $finish; end
	end
	/* main: %quantl.exit.i*/
	/*   %257 = sdiv i32 %i.02.i, 2*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_82)) begin
		main_preheaderi_263_reg <= main_quantlexiti_257;
		if (start == 1'b0 && ^(main_quantlexiti_257) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_263_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %gep_int34 = ptrtoint [100 x i32]* @compressed to i32*/
if (reset) begin main_preheaderi_gep_int34 = 0; end
		main_preheaderi_gep_int34 = 0;
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %gep_int34 = ptrtoint [100 x i32]* @compressed to i32*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_101)) begin
		main_preheaderi_gep_int34_reg <= main_preheaderi_gep_int34;
		if (start == 1'b0 && ^(main_preheaderi_gep_int34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_gep_int34_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %gep_array35 = mul i32 %263, 4*/
		main_preheaderi_gep_array35 = (main_preheaderi_263 * 32'd4);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %gep_array35 = mul i32 %263, 4*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_133)) begin
		main_preheaderi_gep_array35_reg <= main_preheaderi_gep_array35;
		if (start == 1'b0 && ^(main_preheaderi_gep_array35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_gep_array35_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %gep36 = add i32 %gep_int34, %gep_array35*/
		main_preheaderi_gep36 = main_signed_add_32_0;
end
always @(*) begin
/* main: %.preheader.i*/
/*   %gep36 = add i32 %gep_int34, %gep_array35*/
	main_preheaderi_gep36_reg = main_1_90_reg;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %264 = inttoptr i32 %gep36 to i32**/
		main_preheaderi_264 = main_preheaderi_gep36;
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %264 = inttoptr i32 %gep36 to i32**/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_134)) begin
		main_preheaderi_264_reg <= main_preheaderi_264;
		if (start == 1'b0 && ^(main_preheaderi_264) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_264_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %265 = load i32* %264, align 4, !tbaa !1*/
		main_preheaderi_265 = compressed_out_a;
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %265 = load i32* %264, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_135)) begin
		main_preheaderi_265_reg <= main_preheaderi_265;
		if (start == 1'b0 && ^(main_preheaderi_265) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_265_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %266 = and i32 %265, 63*/
		main_preheaderi_266 = (main_preheaderi_265 & 32'd63);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %266 = and i32 %265, 63*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_135)) begin
		main_preheaderi_266_reg <= main_preheaderi_266;
		if (start == 1'b0 && ^(main_preheaderi_266) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_266_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %267 = ashr i32 %265, 6*/
		main_preheaderi_267 = ($signed(main_preheaderi_265) >>> 32'd6);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %267 = ashr i32 %265, 6*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_135)) begin
		main_preheaderi_267_reg <= main_preheaderi_267;
		if (start == 1'b0 && ^(main_preheaderi_267) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_267_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %268 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 0), align 4, !tbaa !1*/
		main_preheaderi_268 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %268 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_103)) begin
		main_preheaderi_268_reg <= main_preheaderi_268;
		if (start == 1'b0 && ^(main_preheaderi_268) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_268_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %269 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 0), align 4, !tbaa !1*/
		main_preheaderi_269 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %269 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_103)) begin
		main_preheaderi_269_reg <= main_preheaderi_269;
		if (start == 1'b0 && ^(main_preheaderi_269) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_269_reg"); $finish; end
	end
end
always @(*) begin
	main_preheaderi_270 = main_signed_multiply_32_4;
end
always @(*) begin
/* main: %.preheader.i*/
/*   %270 = mul nsw i32 %269, %268*/
	main_preheaderi_270_reg = main_1_89_reg;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %271 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 1), align 4, !tbaa !1*/
		main_preheaderi_271 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %271 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_104)) begin
		main_preheaderi_271_reg <= main_preheaderi_271;
		if (start == 1'b0 && ^(main_preheaderi_271) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_271_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %272 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 1), align 4, !tbaa !1*/
		main_preheaderi_272 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %272 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_104)) begin
		main_preheaderi_272_reg <= main_preheaderi_272;
		if (start == 1'b0 && ^(main_preheaderi_272) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_272_reg"); $finish; end
	end
end
always @(*) begin
	main_preheaderi_273 = main_signed_multiply_32_4;
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %273 = mul nsw i32 %272, %271*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_105)) begin
		main_preheaderi_273_reg <= main_preheaderi_273;
		if (start == 1'b0 && ^(main_preheaderi_273) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_273_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %273 = mul nsw i32 %272, %271*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_105)) begin
		main_preheaderi_273_reg <= main_preheaderi_273;
		if (start == 1'b0 && ^(main_preheaderi_273) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_273_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %369 = mul nsw i32 %368, %367*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_146)) begin
		main_preheaderi_273_reg <= main_preheaderi_369;
		if (start == 1'b0 && ^(main_preheaderi_369) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_273_reg"); $finish; end
	end
	/* main: %quantl.exit.i*/
	/*   %155 = mul nsw i32 %154, %153*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_62)) begin
		main_preheaderi_273_reg <= main_quantlexiti_155;
		if (start == 1'b0 && ^(main_quantlexiti_155) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_273_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %274 = add nsw i32 %273, %270*/
		main_preheaderi_274 = main_signed_add_32_0;
end
always @(*) begin
/* main: %.preheader.i*/
/*   %274 = add nsw i32 %273, %270*/
	main_preheaderi_274_reg = main_1_90_reg;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %275 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 2), align 4, !tbaa !1*/
		main_preheaderi_275 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %275 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_105)) begin
		main_preheaderi_275_reg <= main_preheaderi_275;
		if (start == 1'b0 && ^(main_preheaderi_275) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_275_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %276 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 2), align 4, !tbaa !1*/
		main_preheaderi_276 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %276 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_105)) begin
		main_preheaderi_276_reg <= main_preheaderi_276;
		if (start == 1'b0 && ^(main_preheaderi_276) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_276_reg"); $finish; end
	end
end
always @(*) begin
	main_preheaderi_277 = main_signed_multiply_32_4;
end
always @(*) begin
/* main: %.preheader.i*/
/*   %277 = mul nsw i32 %276, %275*/
	main_preheaderi_277_reg = main_1_89_reg;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %278 = add nsw i32 %274, %277*/
		main_preheaderi_278 = main_signed_add_32_0;
end
always @(*) begin
/* main: %.preheader.i*/
/*   %278 = add nsw i32 %274, %277*/
	main_preheaderi_278_reg = main_98_gep6_reg;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %279 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 3), align 4, !tbaa !1*/
		main_preheaderi_279 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %279 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_106)) begin
		main_preheaderi_279_reg <= main_preheaderi_279;
		if (start == 1'b0 && ^(main_preheaderi_279) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_279_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %280 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 3), align 4, !tbaa !1*/
		main_preheaderi_280 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %280 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_106)) begin
		main_preheaderi_280_reg <= main_preheaderi_280;
		if (start == 1'b0 && ^(main_preheaderi_280) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_280_reg"); $finish; end
	end
end
always @(*) begin
	main_preheaderi_281 = main_signed_multiply_32_4;
end
always @(*) begin
/* main: %.preheader.i*/
/*   %281 = mul nsw i32 %280, %279*/
	main_preheaderi_281_reg = main_1_89_reg;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %282 = add nsw i32 %278, %281*/
		main_preheaderi_282 = main_signed_add_32_0;
end
always @(*) begin
/* main: %.preheader.i*/
/*   %282 = add nsw i32 %278, %281*/
	main_preheaderi_282_reg = main_1_90_reg;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %283 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 4), align 4, !tbaa !1*/
		main_preheaderi_283 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %283 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_107)) begin
		main_preheaderi_283_reg <= main_preheaderi_283;
		if (start == 1'b0 && ^(main_preheaderi_283) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_283_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %284 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 4), align 4, !tbaa !1*/
		main_preheaderi_284 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %284 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_107)) begin
		main_preheaderi_284_reg <= main_preheaderi_284;
		if (start == 1'b0 && ^(main_preheaderi_284) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_284_reg"); $finish; end
	end
end
always @(*) begin
	main_preheaderi_285 = main_signed_multiply_32_4;
end
always @(*) begin
/* main: %.preheader.i*/
/*   %285 = mul nsw i32 %284, %283*/
	main_preheaderi_285_reg = main_1_89_reg;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %286 = add nsw i32 %282, %285*/
		main_preheaderi_286 = main_signed_add_32_0;
end
always @(*) begin
/* main: %.preheader.i*/
/*   %286 = add nsw i32 %282, %285*/
	main_preheaderi_286_reg = main_98_gep6_reg;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %287 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 5), align 4, !tbaa !1*/
		main_preheaderi_287 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %287 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_108)) begin
		main_preheaderi_287_reg <= main_preheaderi_287;
		if (start == 1'b0 && ^(main_preheaderi_287) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_287_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %288 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 5), align 4, !tbaa !1*/
		main_preheaderi_288 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %288 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_108)) begin
		main_preheaderi_288_reg <= main_preheaderi_288;
		if (start == 1'b0 && ^(main_preheaderi_288) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_288_reg"); $finish; end
	end
end
always @(*) begin
	main_preheaderi_289 = main_signed_multiply_32_4;
end
always @(*) begin
/* main: %.preheader.i*/
/*   %289 = mul nsw i32 %288, %287*/
	main_preheaderi_289_reg = main_1_89_reg;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %290 = add nsw i32 %286, %289*/
		main_preheaderi_290 = main_signed_add_32_0;
end
always @(*) begin
/* main: %.preheader.i*/
/*   %290 = add nsw i32 %286, %289*/
	main_preheaderi_290_reg = main_1_90_reg;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %291 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 1, i32 0), align 4, !tbaa !1*/
		main_preheaderi_291 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %291 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 1, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_109)) begin
		main_preheaderi_291_reg <= main_preheaderi_291;
		if (start == 1'b0 && ^(main_preheaderi_291) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_291_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %292 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 1, i32 0), align 4, !tbaa !1*/
		main_preheaderi_292 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %292 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 1, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_109)) begin
		main_preheaderi_292_reg <= main_preheaderi_292;
		if (start == 1'b0 && ^(main_preheaderi_292) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_292_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %293 = add i32 %290, %291*/
		main_preheaderi_293 = main_signed_add_32_1;
end
always @(*) begin
/* main: %.preheader.i*/
/*   %293 = add i32 %290, %291*/
	main_preheaderi_293_reg = main_1_88_reg;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %294 = add i32 %293, %292*/
		main_preheaderi_294 = main_signed_add_32_2;
end
always @(*) begin
/* main: %.preheader.i*/
/*   %294 = add i32 %293, %292*/
	main_preheaderi_294_reg = main_preheaderi_315_reg;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %295 = load i32* getelementptr ([6 x i32]* @dec_del_bpl, i32 1, i32 1), align 4, !tbaa !1*/
		main_preheaderi_295 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %295 = load i32* getelementptr ([6 x i32]* @dec_del_bpl, i32 1, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_110)) begin
		main_preheaderi_295_reg <= main_preheaderi_295;
		if (start == 1'b0 && ^(main_preheaderi_295) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_295_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %296 = load i32* getelementptr ([6 x i32]* @dec_del_dltx, i32 1, i32 1), align 4, !tbaa !1*/
		main_preheaderi_296 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %296 = load i32* getelementptr ([6 x i32]* @dec_del_dltx, i32 1, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_110)) begin
		main_preheaderi_296_reg <= main_preheaderi_296;
		if (start == 1'b0 && ^(main_preheaderi_296) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_296_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %297 = add i32 %294, %295*/
		main_preheaderi_297 = main_signed_add_32_0;
end
always @(*) begin
/* main: %.preheader.i*/
/*   %297 = add i32 %294, %295*/
	main_preheaderi_297_reg = main_1_90_reg;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %298 = add i32 %297, %296*/
		main_preheaderi_298 = main_signed_add_32_1;
end
always @(*) begin
/* main: %.preheader.i*/
/*   %298 = add i32 %297, %296*/
	main_preheaderi_298_reg = main_1_88_reg;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %299 = load i32* getelementptr ([6 x i32]* @dec_del_bpl, i32 1, i32 2), align 4, !tbaa !1*/
		main_preheaderi_299 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %299 = load i32* getelementptr ([6 x i32]* @dec_del_bpl, i32 1, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_111)) begin
		main_preheaderi_299_reg <= main_preheaderi_299;
		if (start == 1'b0 && ^(main_preheaderi_299) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_299_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %300 = load i32* getelementptr ([6 x i32]* @dec_del_dltx, i32 1, i32 2), align 4, !tbaa !1*/
		main_preheaderi_300 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %300 = load i32* getelementptr ([6 x i32]* @dec_del_dltx, i32 1, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_111)) begin
		main_preheaderi_300_reg <= main_preheaderi_300;
		if (start == 1'b0 && ^(main_preheaderi_300) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_300_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %301 = add i32 %298, %299*/
		main_preheaderi_301 = main_signed_add_32_0;
end
always @(*) begin
/* main: %.preheader.i*/
/*   %301 = add i32 %298, %299*/
	main_preheaderi_301_reg = main_1_90_reg;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %302 = add i32 %301, %300*/
		main_preheaderi_302 = main_signed_add_32_1;
end
always @(*) begin
/* main: %.preheader.i*/
/*   %302 = add i32 %301, %300*/
	main_preheaderi_302_reg = main_quantlexiti_144_reg;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %303 = load i32* getelementptr ([6 x i32]* @dec_del_bpl, i32 1, i32 3), align 4, !tbaa !1*/
		main_preheaderi_303 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %303 = load i32* getelementptr ([6 x i32]* @dec_del_bpl, i32 1, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_112)) begin
		main_preheaderi_303_reg <= main_preheaderi_303;
		if (start == 1'b0 && ^(main_preheaderi_303) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_303_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %304 = load i32* getelementptr ([6 x i32]* @dec_del_dltx, i32 1, i32 3), align 4, !tbaa !1*/
		main_preheaderi_304 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %304 = load i32* getelementptr ([6 x i32]* @dec_del_dltx, i32 1, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_112)) begin
		main_preheaderi_304_reg <= main_preheaderi_304;
		if (start == 1'b0 && ^(main_preheaderi_304) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_304_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %305 = add i32 %302, %303*/
		main_preheaderi_305 = main_signed_add_32_0;
end
always @(*) begin
/* main: %.preheader.i*/
/*   %305 = add i32 %302, %303*/
	main_preheaderi_305_reg = main_1_90_reg;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %306 = add i32 %305, %304*/
		main_preheaderi_306 = main_signed_add_32_1;
end
always @(*) begin
/* main: %.preheader.i*/
/*   %306 = add i32 %305, %304*/
	main_preheaderi_306_reg = main_1_88_reg;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %307 = load i32* getelementptr ([6 x i32]* @dec_del_bpl, i32 1, i32 4), align 4, !tbaa !1*/
		main_preheaderi_307 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %307 = load i32* getelementptr ([6 x i32]* @dec_del_bpl, i32 1, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_113)) begin
		main_preheaderi_307_reg <= main_preheaderi_307;
		if (start == 1'b0 && ^(main_preheaderi_307) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_307_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %308 = load i32* getelementptr ([6 x i32]* @dec_del_dltx, i32 1, i32 4), align 4, !tbaa !1*/
		main_preheaderi_308 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %308 = load i32* getelementptr ([6 x i32]* @dec_del_dltx, i32 1, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_113)) begin
		main_preheaderi_308_reg <= main_preheaderi_308;
		if (start == 1'b0 && ^(main_preheaderi_308) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_308_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %309 = add i32 %306, %307*/
		main_preheaderi_309 = main_signed_add_32_0;
end
always @(*) begin
/* main: %.preheader.i*/
/*   %309 = add i32 %306, %307*/
	main_preheaderi_309_reg = main_1_90_reg;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %310 = add i32 %309, %308*/
		main_preheaderi_310 = main_signed_add_32_1;
end
always @(*) begin
/* main: %.preheader.i*/
/*   %310 = add i32 %309, %308*/
	main_preheaderi_310_reg = main_quantlexiti_144_reg;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %311 = ashr i32 %310, 14*/
		main_preheaderi_311 = ($signed(main_preheaderi_310) >>> 32'd14);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %311 = ashr i32 %310, 14*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_113)) begin
		main_preheaderi_311_reg <= main_preheaderi_311;
		if (start == 1'b0 && ^(main_preheaderi_311) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_311_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %312 = shl i32 %dec_rlt2.0, 1*/
		main_preheaderi_312 = (main_preheaderi_dec_rlt20_reg <<< (32'd1 % 32));
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %312 = shl i32 %dec_rlt2.0, 1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_101)) begin
		main_preheaderi_312_reg <= main_preheaderi_312;
		if (start == 1'b0 && ^(main_preheaderi_312) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_312_reg"); $finish; end
	end
end
always @(*) begin
	main_preheaderi_313 = main_signed_multiply_32_0;
end
always @(*) begin
/* main: %.preheader.i*/
/*   %313 = mul nsw i32 %312, %dec_al2.0*/
	main_preheaderi_313_reg = main_1_42_reg;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %314 = ashr i32 %313, 15*/
		main_preheaderi_314 = ($signed(main_preheaderi_313) >>> 32'd15);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %314 = ashr i32 %313, 15*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_102)) begin
		main_preheaderi_314_reg <= main_preheaderi_314;
		if (start == 1'b0 && ^(main_preheaderi_314) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_314_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %315 = add nsw i32 %314, %311*/
		main_preheaderi_315 = main_signed_add_32_2;
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %315 = add nsw i32 %314, %311*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_113)) begin
		main_preheaderi_315_reg <= main_preheaderi_315;
		if (start == 1'b0 && ^(main_preheaderi_315) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_315_reg"); $finish; end
	end
	/* main: %1*/
	/*   %46 = add nsw i32 %43, %42*/
	if ((cur_state == LEGUP_F_main_BB__1_29)) begin
		main_preheaderi_315_reg <= main_1_46;
		if (start == 1'b0 && ^(main_1_46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_315_reg"); $finish; end
	end
	/* main: %1*/
	/*   %70 = add i32 %67, %68*/
	if ((cur_state == LEGUP_F_main_BB__1_31)) begin
		main_preheaderi_315_reg <= main_1_70;
		if (start == 1'b0 && ^(main_1_70) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_315_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %390 = add i32 %389, %388*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_150)) begin
		main_preheaderi_315_reg <= main_preheaderi_390;
		if (start == 1'b0 && ^(main_preheaderi_390) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_315_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %411 = add nsw i32 %410, %407*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_154)) begin
		main_preheaderi_315_reg <= main_preheaderi_411;
		if (start == 1'b0 && ^(main_preheaderi_411) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_315_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %apl1.0.i.i = add nsw i32 %450, %449*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_156)) begin
		main_preheaderi_315_reg <= main_preheaderi_apl10ii;
		if (start == 1'b0 && ^(main_preheaderi_apl10ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_315_reg"); $finish; end
	end
	/* main: %quantl.exit.i*/
	/*   %137 = add nsw i32 %wd4.0.i8.i, %134*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_55)) begin
		main_preheaderi_315_reg <= main_quantlexiti_137;
		if (start == 1'b0 && ^(main_quantlexiti_137) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_315_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %294 = add i32 %293, %292*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_109)) begin
		main_preheaderi_315_reg <= main_preheaderi_294;
		if (start == 1'b0 && ^(main_preheaderi_294) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_315_reg"); $finish; end
	end
	/* main: %quantl.exit.i*/
	/*   %176 = add i32 %175, %174*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_66)) begin
		main_preheaderi_315_reg <= main_quantlexiti_176;
		if (start == 1'b0 && ^(main_quantlexiti_176) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_315_reg"); $finish; end
	end
	/* main: %quantl.exit.i*/
	/*   %197 = add nsw i32 %196, %193*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_70)) begin
		main_preheaderi_315_reg <= main_quantlexiti_197;
		if (start == 1'b0 && ^(main_quantlexiti_197) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_315_reg"); $finish; end
	end
	/* main: %quantl.exit.i*/
	/*   %242 = add nsw i32 %wd4.0.i.i4, %239*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_76)) begin
		main_preheaderi_315_reg <= main_quantlexiti_242;
		if (start == 1'b0 && ^(main_quantlexiti_242) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_315_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %351 = add nsw i32 %wd4.0.i7.i, %348*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_139)) begin
		main_preheaderi_315_reg <= main_preheaderi_351;
		if (start == 1'b0 && ^(main_preheaderi_351) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_315_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %gep57 = add i32 %gep_int55, %gep_array56*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_102)) begin
		main_preheaderi_315_reg <= main_preheaderi_gep57;
		if (start == 1'b0 && ^(main_preheaderi_gep57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_315_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %316 = lshr i32 %266, 2*/
		main_preheaderi_316 = (main_preheaderi_266 >>> (32'd2 % 32));
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %316 = lshr i32 %266, 2*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_135)) begin
		main_preheaderi_316_reg <= main_preheaderi_316;
		if (start == 1'b0 && ^(main_preheaderi_316) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_316_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %gep_int37 = ptrtoint [16 x i32]* @qq4_code4_table to i32*/
if (reset) begin main_preheaderi_gep_int37 = 0; end
		main_preheaderi_gep_int37 = 0;
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %gep_int37 = ptrtoint [16 x i32]* @qq4_code4_table to i32*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_101)) begin
		main_preheaderi_gep_int37_reg <= main_preheaderi_gep_int37;
		if (start == 1'b0 && ^(main_preheaderi_gep_int37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_gep_int37_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %gep_array38 = mul i32 %316, 4*/
		main_preheaderi_gep_array38 = (main_preheaderi_316 * 32'd4);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %gep_array38 = mul i32 %316, 4*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_135)) begin
		main_preheaderi_gep_array38_reg <= main_preheaderi_gep_array38;
		if (start == 1'b0 && ^(main_preheaderi_gep_array38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_gep_array38_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %gep39 = add i32 %gep_int37, %gep_array38*/
		main_preheaderi_gep39 = main_signed_add_32_0;
end
always @(*) begin
/* main: %.preheader.i*/
/*   %gep39 = add i32 %gep_int37, %gep_array38*/
	main_preheaderi_gep39_reg = main_1_90_reg;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %317 = inttoptr i32 %gep39 to i32**/
		main_preheaderi_317 = main_preheaderi_gep39;
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %317 = inttoptr i32 %gep39 to i32**/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_136)) begin
		main_preheaderi_317_reg <= main_preheaderi_317;
		if (start == 1'b0 && ^(main_preheaderi_317) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_317_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %318 = load i32* %317, align 4, !tbaa !1*/
		main_preheaderi_318 = qq4_code4_table_out_a;
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %318 = load i32* %317, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_137)) begin
		main_preheaderi_318_reg <= main_preheaderi_318;
		if (start == 1'b0 && ^(main_preheaderi_318) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_318_reg"); $finish; end
	end
end
always @(*) begin
	main_preheaderi_319 = main_signed_multiply_32_4;
end
always @(*) begin
/* main: %.preheader.i*/
/*   %319 = mul nsw i32 %318, %dec_detl.0*/
	main_preheaderi_319_reg = main_1_89_reg;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %320 = ashr i32 %319, 15*/
		main_preheaderi_320 = ($signed(main_preheaderi_319) >>> 32'd15);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %320 = ashr i32 %319, 15*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_138)) begin
		main_preheaderi_320_reg <= main_preheaderi_320;
		if (start == 1'b0 && ^(main_preheaderi_320) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_320_reg"); $finish; end
	end
end
always @(*) begin
	main_preheaderi_321 = main_signed_multiply_32_1;
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %321 = mul nsw i32 %262, %dec_detl.0*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_102)) begin
		main_preheaderi_321_reg <= main_preheaderi_321;
		if (start == 1'b0 && ^(main_preheaderi_321) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_321_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %321 = mul nsw i32 %262, %dec_detl.0*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_102)) begin
		main_preheaderi_321_reg <= main_preheaderi_321;
		if (start == 1'b0 && ^(main_preheaderi_321) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_321_reg"); $finish; end
	end
	/* main: %1*/
	/*   %43 = mul nsw i32 %34, -44*/
	if ((cur_state == LEGUP_F_main_BB__1_29)) begin
		main_preheaderi_321_reg <= main_1_43;
		if (start == 1'b0 && ^(main_1_43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_321_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %322 = ashr i32 %321, 15*/
		main_preheaderi_322 = ($signed(main_preheaderi_321) >>> 32'd15);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %322 = ashr i32 %321, 15*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_102)) begin
		main_preheaderi_322_reg <= main_preheaderi_322;
		if (start == 1'b0 && ^(main_preheaderi_322) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_322_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %323 = add nsw i32 %322, %315*/
		main_preheaderi_323 = main_signed_add_32_8;
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %323 = add nsw i32 %322, %315*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_113)) begin
		main_preheaderi_323_reg <= main_preheaderi_323;
		if (start == 1'b0 && ^(main_preheaderi_323) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_323_reg"); $finish; end
	end
	/* main: %quantl.exit.i*/
	/*   %apl1.0.i4.i = add nsw i32 %144, %143*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_55)) begin
		main_preheaderi_323_reg <= main_quantlexiti_apl10i4i;
		if (start == 1'b0 && ^(main_quantlexiti_apl10i4i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_323_reg"); $finish; end
	end
	/* main: %1*/
	/*   %60 = add nsw i32 %58, %59*/
	if ((cur_state == LEGUP_F_main_BB__1_29)) begin
		main_preheaderi_323_reg <= main_1_60;
		if (start == 1'b0 && ^(main_1_60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_323_reg"); $finish; end
	end
	/* main: %quantl.exit.i*/
	/*   %201 = add nsw i32 %200, 3*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_70)) begin
		main_preheaderi_323_reg <= main_quantlexiti_201;
		if (start == 1'b0 && ^(main_quantlexiti_201) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_323_reg"); $finish; end
	end
	/* main: %quantl.exit.i*/
	/*   %apl1.0.i.i7 = add nsw i32 %249, %248*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_76)) begin
		main_preheaderi_323_reg <= main_quantlexiti_apl10ii7;
		if (start == 1'b0 && ^(main_quantlexiti_apl10ii7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_323_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %471 = add nsw i32 %470, %467*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_156)) begin
		main_preheaderi_323_reg <= main_preheaderi_471;
		if (start == 1'b0 && ^(main_preheaderi_471) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_323_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %499 = add nsw i32 %498, %495*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_157)) begin
		main_preheaderi_323_reg <= main_preheaderi_499;
		if (start == 1'b0 && ^(main_preheaderi_499) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_323_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %gep60 = add i32 %gep_int58, %gep_array59*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_102)) begin
		main_preheaderi_323_reg <= main_preheaderi_gep60;
		if (start == 1'b0 && ^(main_preheaderi_gep60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_323_reg"); $finish; end
	end
end
always @(*) begin
	main_preheaderi_324 = main_signed_multiply_32_2;
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %324 = mul nsw i32 %dec_nbl.0, 127*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_102)) begin
		main_preheaderi_324_reg <= main_preheaderi_324;
		if (start == 1'b0 && ^(main_preheaderi_324) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_324_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %324 = mul nsw i32 %dec_nbl.0, 127*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_102)) begin
		main_preheaderi_324_reg <= main_preheaderi_324;
		if (start == 1'b0 && ^(main_preheaderi_324) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_324_reg"); $finish; end
	end
	/* main: %1*/
	/*   %44 = mul nsw i32 %33, -44*/
	if ((cur_state == LEGUP_F_main_BB__1_29)) begin
		main_preheaderi_324_reg <= main_1_44;
		if (start == 1'b0 && ^(main_1_44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_324_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %325 = ashr i32 %324, 7*/
		main_preheaderi_325 = ($signed(main_preheaderi_324) >>> 32'd7);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %325 = ashr i32 %324, 7*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_102)) begin
		main_preheaderi_325_reg <= main_preheaderi_325;
		if (start == 1'b0 && ^(main_preheaderi_325) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_325_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %gep_int40 = ptrtoint [16 x i32]* @wl_code_table to i32*/
if (reset) begin main_preheaderi_gep_int40 = 0; end
		main_preheaderi_gep_int40 = 0;
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %gep_int40 = ptrtoint [16 x i32]* @wl_code_table to i32*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_101)) begin
		main_preheaderi_gep_int40_reg <= main_preheaderi_gep_int40;
		if (start == 1'b0 && ^(main_preheaderi_gep_int40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_gep_int40_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %gep_array41 = mul i32 %316, 4*/
		main_preheaderi_gep_array41 = (main_preheaderi_316 * 32'd4);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %gep_array41 = mul i32 %316, 4*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_135)) begin
		main_preheaderi_gep_array41_reg <= main_preheaderi_gep_array41;
		if (start == 1'b0 && ^(main_preheaderi_gep_array41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_gep_array41_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %gep42 = add i32 %gep_int40, %gep_array41*/
		main_preheaderi_gep42 = main_signed_add_32_1;
end
always @(*) begin
/* main: %.preheader.i*/
/*   %gep42 = add i32 %gep_int40, %gep_array41*/
	main_preheaderi_gep42_reg = main_1_88_reg;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %326 = inttoptr i32 %gep42 to i32**/
		main_preheaderi_326 = main_preheaderi_gep42;
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %326 = inttoptr i32 %gep42 to i32**/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_136)) begin
		main_preheaderi_326_reg <= main_preheaderi_326;
		if (start == 1'b0 && ^(main_preheaderi_326) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_326_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %327 = load i32* %326, align 4, !tbaa !1*/
		main_preheaderi_327 = wl_code_table_out_a;
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %327 = load i32* %326, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_137)) begin
		main_preheaderi_327_reg <= main_preheaderi_327;
		if (start == 1'b0 && ^(main_preheaderi_327) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_327_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %328 = add nsw i32 %325, %327*/
		main_preheaderi_328 = main_signed_add_32_0;
end
always @(*) begin
/* main: %.preheader.i*/
/*   %328 = add nsw i32 %325, %327*/
	main_preheaderi_328_reg = main_1_90_reg;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %329 = icmp slt i32 %328, 0*/
		main_preheaderi_329 = ($signed(main_preheaderi_328) < $signed(32'd0));
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %329 = icmp slt i32 %328, 0*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_137)) begin
		main_preheaderi_329_reg <= main_preheaderi_329;
		if (start == 1'b0 && ^(main_preheaderi_329) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_329_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %..i10.i = select i1 %329, i32 0, i32 %328*/
		main_preheaderi_i10i = (main_preheaderi_329 ? 32'd0 : main_preheaderi_328);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %..i10.i = select i1 %329, i32 0, i32 %328*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_137)) begin
		main_preheaderi_i10i_reg <= main_preheaderi_i10i;
		if (start == 1'b0 && ^(main_preheaderi_i10i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_i10i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %330 = icmp sgt i32 %..i10.i, 18432*/
		main_preheaderi_330 = ($signed(main_preheaderi_i10i) > $signed(32'd18432));
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %330 = icmp sgt i32 %..i10.i, 18432*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_137)) begin
		main_preheaderi_330_reg <= main_preheaderi_330;
		if (start == 1'b0 && ^(main_preheaderi_330) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_330_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %...i11.i = select i1 %330, i32 18432, i32 %..i10.i*/
		main_preheaderi_i11i_var0 = (main_preheaderi_330 ? 32'd18432 : main_preheaderi_i10i);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %...i11.i = select i1 %330, i32 18432, i32 %..i10.i*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_137)) begin
		main_preheaderi_i11i_var0_reg <= main_preheaderi_i11i_var0;
		if (start == 1'b0 && ^(main_preheaderi_i11i_var0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_i11i_var0_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %331 = lshr i32 %...i11.i, 6*/
		main_preheaderi_331 = (main_preheaderi_i11i_var0 >>> (32'd6 % 32));
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %331 = lshr i32 %...i11.i, 6*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_137)) begin
		main_preheaderi_331_reg <= main_preheaderi_331;
		if (start == 1'b0 && ^(main_preheaderi_331) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_331_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %332 = and i32 %331, 31*/
		main_preheaderi_332 = (main_preheaderi_331 & 32'd31);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %332 = and i32 %331, 31*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_137)) begin
		main_preheaderi_332_reg <= main_preheaderi_332;
		if (start == 1'b0 && ^(main_preheaderi_332) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_332_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %333 = ashr i32 %...i11.i, 11*/
		main_preheaderi_333 = ($signed(main_preheaderi_i11i_var0) >>> 32'd11);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %333 = ashr i32 %...i11.i, 11*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_137)) begin
		main_preheaderi_333_reg <= main_preheaderi_333;
		if (start == 1'b0 && ^(main_preheaderi_333) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_333_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %gep_int43 = ptrtoint [32 x i32]* @ilb_table to i32*/
if (reset) begin main_preheaderi_gep_int43 = 0; end
		main_preheaderi_gep_int43 = 0;
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %gep_int43 = ptrtoint [32 x i32]* @ilb_table to i32*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_101)) begin
		main_preheaderi_gep_int43_reg <= main_preheaderi_gep_int43;
		if (start == 1'b0 && ^(main_preheaderi_gep_int43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_gep_int43_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %gep_array44 = mul i32 %332, 4*/
		main_preheaderi_gep_array44 = (main_preheaderi_332_reg * 32'd4);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %gep_array44 = mul i32 %332, 4*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_138)) begin
		main_preheaderi_gep_array44_reg <= main_preheaderi_gep_array44;
		if (start == 1'b0 && ^(main_preheaderi_gep_array44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_gep_array44_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %gep45 = add i32 %gep_int43, %gep_array44*/
		main_preheaderi_gep45 = main_signed_add_32_0;
end
always @(*) begin
/* main: %.preheader.i*/
/*   %gep45 = add i32 %gep_int43, %gep_array44*/
	main_preheaderi_gep45_reg = main_1_90_reg;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %334 = inttoptr i32 %gep45 to i32**/
		main_preheaderi_334 = main_preheaderi_gep45;
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %334 = inttoptr i32 %gep45 to i32**/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_139)) begin
		main_preheaderi_334_reg <= main_preheaderi_334;
		if (start == 1'b0 && ^(main_preheaderi_334) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_334_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %335 = load i32* %334, align 4, !tbaa !1*/
		main_preheaderi_335 = ilb_table_out_a;
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %335 = load i32* %334, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_140)) begin
		main_preheaderi_335_reg <= main_preheaderi_335;
		if (start == 1'b0 && ^(main_preheaderi_335) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_335_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %336 = sub i32 9, %333*/
		main_preheaderi_336 = main_signed_subtract_32_0;
end
always @(*) begin
/* main: %.preheader.i*/
/*   %336 = sub i32 9, %333*/
	main_preheaderi_336_reg = main_1_91_reg;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %337 = ashr i32 %335, %336*/
		main_preheaderi_337 = ($signed(main_preheaderi_335) >>> main_preheaderi_336_reg);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %337 = ashr i32 %335, %336*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_140)) begin
		main_preheaderi_337_reg <= main_preheaderi_337;
		if (start == 1'b0 && ^(main_preheaderi_337) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_337_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %338 = shl i32 %337, 3*/
		main_preheaderi_338 = (main_preheaderi_337 <<< (32'd3 % 32));
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %338 = shl i32 %337, 3*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_140)) begin
		main_preheaderi_338_reg <= main_preheaderi_338;
		if (start == 1'b0 && ^(main_preheaderi_338) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_338_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %339 = add nsw i32 %311, %320*/
		main_preheaderi_339 = main_signed_add_32_0;
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %339 = add nsw i32 %311, %320*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_138)) begin
		main_preheaderi_339_reg <= main_preheaderi_339;
		if (start == 1'b0 && ^(main_preheaderi_339) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_339_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %340 = shl nsw i32 %dec_al1.0, 2*/
		main_preheaderi_340 = (main_preheaderi_dec_al10_reg <<< (32'd2 % 32));
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %340 = shl nsw i32 %dec_al1.0, 2*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_101)) begin
		main_preheaderi_340_reg <= main_preheaderi_340;
		if (start == 1'b0 && ^(main_preheaderi_340) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_340_reg"); $finish; end
	end
end
always @(*) begin
	main_preheaderi_341 = main_signed_multiply_32_4;
end
always @(*) begin
/* main: %.preheader.i*/
/*   %341 = mul nsw i32 %dec_plt1.0, %339*/
	main_preheaderi_341_reg = main_1_89_reg;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %342 = icmp sgt i32 %341, -1*/
		main_preheaderi_342 = ($signed(main_preheaderi_341) > $signed(-32'd1));
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %342 = icmp sgt i32 %341, -1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_139)) begin
		main_preheaderi_342_reg <= main_preheaderi_342;
		if (start == 1'b0 && ^(main_preheaderi_342) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_342_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %343 = sub nsw i32 0, %340*/
		main_preheaderi_343 = main_signed_subtract_32_0;
end
always @(*) begin
/* main: %.preheader.i*/
/*   %343 = sub nsw i32 0, %340*/
	main_preheaderi_343_reg = main_1_93_reg;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %.1.i6.i = select i1 %342, i32 %343, i32 %340*/
		main_preheaderi_1i6i = (main_preheaderi_342 ? main_preheaderi_343_reg : main_preheaderi_340_reg);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %.1.i6.i = select i1 %342, i32 %343, i32 %340*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_139)) begin
		main_preheaderi_1i6i_reg <= main_preheaderi_1i6i;
		if (start == 1'b0 && ^(main_preheaderi_1i6i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_1i6i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %344 = ashr i32 %.1.i6.i, 7*/
		main_preheaderi_344 = ($signed(main_preheaderi_1i6i) >>> 32'd7);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %344 = ashr i32 %.1.i6.i, 7*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_139)) begin
		main_preheaderi_344_reg <= main_preheaderi_344;
		if (start == 1'b0 && ^(main_preheaderi_344) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_344_reg"); $finish; end
	end
end
always @(*) begin
	main_preheaderi_345 = main_signed_multiply_32_7;
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %345 = mul nsw i32 %dec_plt2.0, %339*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_139)) begin
		main_preheaderi_345_reg <= main_preheaderi_345;
		if (start == 1'b0 && ^(main_preheaderi_345) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_345_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %345 = mul nsw i32 %dec_plt2.0, %339*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_139)) begin
		main_preheaderi_345_reg <= main_preheaderi_345;
		if (start == 1'b0 && ^(main_preheaderi_345) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_345_reg"); $finish; end
	end
	/* main: %1*/
	/*   %57 = mul nsw i32 %5, %6*/
	if ((cur_state == LEGUP_F_main_BB__1_29)) begin
		main_preheaderi_345_reg <= main_1_57;
		if (start == 1'b0 && ^(main_1_57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_345_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %437 = mul nsw i32 %dec_ph2.0, %431*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_156)) begin
		main_preheaderi_345_reg <= main_preheaderi_437;
		if (start == 1'b0 && ^(main_preheaderi_437) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_345_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %441 = mul nsw i32 %dec_ah2.0, 127*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_102)) begin
		main_preheaderi_345_reg <= main_preheaderi_441;
		if (start == 1'b0 && ^(main_preheaderi_441) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_345_reg"); $finish; end
	end
	/* main: %quantl.exit.i*/
	/*   %131 = mul nsw i32 %plt2.0, %125*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_55)) begin
		main_preheaderi_345_reg <= main_quantlexiti_131;
		if (start == 1'b0 && ^(main_quantlexiti_131) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_345_reg"); $finish; end
	end
	/* main: %quantl.exit.i*/
	/*   %195 = mul nsw i32 %194, %ah2.0*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_49)) begin
		main_preheaderi_345_reg <= main_quantlexiti_195;
		if (start == 1'b0 && ^(main_quantlexiti_195) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_345_reg"); $finish; end
	end
	/* main: %quantl.exit.i*/
	/*   %236 = mul nsw i32 %ph2.0, %230*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_76)) begin
		main_preheaderi_345_reg <= main_quantlexiti_236;
		if (start == 1'b0 && ^(main_quantlexiti_236) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_345_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %346 = ashr i32 %345, 31*/
		main_preheaderi_346 = ($signed(main_preheaderi_345) >>> 32'd31);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %346 = ashr i32 %345, 31*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_139)) begin
		main_preheaderi_346_reg <= main_preheaderi_346;
		if (start == 1'b0 && ^(main_preheaderi_346) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_346_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %347 = and i32 %346, -256*/
		main_preheaderi_347 = (main_preheaderi_346 & -32'd256);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %347 = and i32 %346, -256*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_139)) begin
		main_preheaderi_347_reg <= main_preheaderi_347;
		if (start == 1'b0 && ^(main_preheaderi_347) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_347_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %348 = or i32 %347, 128*/
		main_preheaderi_348 = (main_preheaderi_347 | 32'd128);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %348 = or i32 %347, 128*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_139)) begin
		main_preheaderi_348_reg <= main_preheaderi_348;
		if (start == 1'b0 && ^(main_preheaderi_348) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_348_reg"); $finish; end
	end
end
always @(*) begin
	main_preheaderi_349 = main_signed_multiply_32_3;
end
always @(*) begin
/* main: %.preheader.i*/
/*   %349 = mul nsw i32 %dec_al2.0, 127*/
	main_preheaderi_349_reg = main_1_45_reg;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %350 = ashr i32 %349, 7*/
		main_preheaderi_350 = ($signed(main_preheaderi_349) >>> 32'd7);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %350 = ashr i32 %349, 7*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_102)) begin
		main_preheaderi_350_reg <= main_preheaderi_350;
		if (start == 1'b0 && ^(main_preheaderi_350) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_350_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %wd4.0.i7.i = add nsw i32 %344, %350*/
		main_preheaderi_wd40i7i = main_signed_add_32_1;
end
always @(*) begin
/* main: %.preheader.i*/
/*   %wd4.0.i7.i = add nsw i32 %344, %350*/
	main_preheaderi_wd40i7i_reg = main_1_88_reg;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %351 = add nsw i32 %wd4.0.i7.i, %348*/
		main_preheaderi_351 = main_signed_add_32_2;
end
always @(*) begin
/* main: %.preheader.i*/
/*   %351 = add nsw i32 %wd4.0.i7.i, %348*/
	main_preheaderi_351_reg = main_preheaderi_315_reg;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %352 = icmp sgt i32 %351, 12288*/
		main_preheaderi_352 = ($signed(main_preheaderi_351) > $signed(32'd12288));
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %352 = icmp sgt i32 %351, 12288*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_139)) begin
		main_preheaderi_352_reg <= main_preheaderi_352;
		if (start == 1'b0 && ^(main_preheaderi_352) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_352_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %..i8.i = select i1 %352, i32 12288, i32 %351*/
		main_preheaderi_i8i = (main_preheaderi_352 ? 32'd12288 : main_preheaderi_351);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %..i8.i = select i1 %352, i32 12288, i32 %351*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_139)) begin
		main_preheaderi_i8i_reg <= main_preheaderi_i8i;
		if (start == 1'b0 && ^(main_preheaderi_i8i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_i8i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %353 = icmp slt i32 %..i8.i, -12288*/
		main_preheaderi_353 = ($signed(main_preheaderi_i8i_reg) < $signed(-32'd12288));
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %353 = icmp slt i32 %..i8.i, -12288*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_140)) begin
		main_preheaderi_353_reg <= main_preheaderi_353;
		if (start == 1'b0 && ^(main_preheaderi_353) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_353_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %...i9.i = select i1 %353, i32 -12288, i32 %..i8.i*/
		main_preheaderi_i9i = (main_preheaderi_353 ? -32'd12288 : main_preheaderi_i8i_reg);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %...i9.i = select i1 %353, i32 -12288, i32 %..i8.i*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_140)) begin
		main_preheaderi_i9i_reg <= main_preheaderi_i9i;
		if (start == 1'b0 && ^(main_preheaderi_i9i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_i9i_reg"); $finish; end
	end
end
always @(*) begin
	main_preheaderi_354 = main_signed_multiply_32_4;
end
always @(*) begin
/* main: %.preheader.i*/
/*   %354 = mul nsw i32 %dec_al1.0, 255*/
	main_preheaderi_354_reg = main_1_89_reg;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %355 = ashr i32 %354, 8*/
		main_preheaderi_355 = ($signed(main_preheaderi_354) >>> 32'd8);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %355 = ashr i32 %354, 8*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_102)) begin
		main_preheaderi_355_reg <= main_preheaderi_355;
		if (start == 1'b0 && ^(main_preheaderi_355) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_355_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %356 = ashr i32 %341, 31*/
		main_preheaderi_356 = ($signed(main_preheaderi_341) >>> 32'd31);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %356 = ashr i32 %341, 31*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_139)) begin
		main_preheaderi_356_reg <= main_preheaderi_356;
		if (start == 1'b0 && ^(main_preheaderi_356) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_356_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %357 = and i32 %356, -384*/
		main_preheaderi_357 = (main_preheaderi_356 & -32'd384);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %357 = and i32 %356, -384*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_139)) begin
		main_preheaderi_357_reg <= main_preheaderi_357;
		if (start == 1'b0 && ^(main_preheaderi_357) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_357_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %358 = add nsw i32 %355, 192*/
		main_preheaderi_358 = main_signed_add_32_0;
end
always @(*) begin
/* main: %.preheader.i*/
/*   %358 = add nsw i32 %355, 192*/
	main_preheaderi_358_reg = main_98_104_reg;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %apl1.0.i3.i = add nsw i32 %358, %357*/
		main_preheaderi_apl10i3i = main_signed_add_32_8;
end
always @(*) begin
/* main: %.preheader.i*/
/*   %apl1.0.i3.i = add nsw i32 %358, %357*/
	main_preheaderi_apl10i3i_reg = main_1_63_reg;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %359 = sub nsw i32 15360, %...i9.i*/
		main_preheaderi_359 = main_signed_subtract_32_0;
end
always @(*) begin
/* main: %.preheader.i*/
/*   %359 = sub nsw i32 15360, %...i9.i*/
	main_preheaderi_359_reg = main_1_93_reg;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %360 = icmp sgt i32 %apl1.0.i3.i, %359*/
		main_preheaderi_360 = ($signed(main_preheaderi_apl10i3i_reg) > $signed(main_preheaderi_359));
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %360 = icmp sgt i32 %apl1.0.i3.i, %359*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_140)) begin
		main_preheaderi_360_reg <= main_preheaderi_360;
		if (start == 1'b0 && ^(main_preheaderi_360) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_360_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %.apl1.0.i4.i = select i1 %360, i32 %359, i32 %apl1.0.i3.i*/
		main_preheaderi_apl10i4i = (main_preheaderi_360 ? main_preheaderi_359 : main_preheaderi_apl10i3i_reg);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %.apl1.0.i4.i = select i1 %360, i32 %359, i32 %apl1.0.i3.i*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_140)) begin
		main_preheaderi_apl10i4i_reg <= main_preheaderi_apl10i4i;
		if (start == 1'b0 && ^(main_preheaderi_apl10i4i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_apl10i4i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %361 = sub nsw i32 0, %359*/
		main_preheaderi_361 = main_signed_subtract_32_1;
end
always @(*) begin
/* main: %.preheader.i*/
/*   %361 = sub nsw i32 0, %359*/
	main_preheaderi_361_reg = main_1_95_reg;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %362 = icmp slt i32 %.apl1.0.i4.i, %361*/
		main_preheaderi_362 = ($signed(main_preheaderi_apl10i4i_reg) < $signed(main_preheaderi_361_reg));
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %362 = icmp slt i32 %.apl1.0.i4.i, %361*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_142)) begin
		main_preheaderi_362_reg <= main_preheaderi_362;
		if (start == 1'b0 && ^(main_preheaderi_362) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_362_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %apl1.2.i5.i = select i1 %362, i32 %361, i32 %.apl1.0.i4.i*/
		main_preheaderi_apl12i5i = (main_preheaderi_362 ? main_preheaderi_361_reg : main_preheaderi_apl10i4i_reg);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %apl1.2.i5.i = select i1 %362, i32 %361, i32 %.apl1.0.i4.i*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_142)) begin
		main_preheaderi_apl12i5i_reg <= main_preheaderi_apl12i5i;
		if (start == 1'b0 && ^(main_preheaderi_apl12i5i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_apl12i5i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %363 = add nsw i32 %320, %315*/
		main_preheaderi_363 = main_signed_add_32_1;
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %363 = add nsw i32 %320, %315*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_138)) begin
		main_preheaderi_363_reg <= main_preheaderi_363;
		if (start == 1'b0 && ^(main_preheaderi_363) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_363_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %364 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 0), align 4, !tbaa !1*/
		main_preheaderi_364 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %364 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_144)) begin
		main_preheaderi_364_reg <= main_preheaderi_364;
		if (start == 1'b0 && ^(main_preheaderi_364) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_364_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %365 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 0), align 4, !tbaa !1*/
		main_preheaderi_365 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %365 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_144)) begin
		main_preheaderi_365_reg <= main_preheaderi_365;
		if (start == 1'b0 && ^(main_preheaderi_365) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_365_reg"); $finish; end
	end
end
always @(*) begin
	main_preheaderi_366 = main_signed_multiply_32_4;
end
always @(*) begin
/* main: %.preheader.i*/
/*   %366 = mul nsw i32 %365, %364*/
	main_preheaderi_366_reg = main_1_89_reg;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %367 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 1), align 4, !tbaa !1*/
		main_preheaderi_367 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %367 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_145)) begin
		main_preheaderi_367_reg <= main_preheaderi_367;
		if (start == 1'b0 && ^(main_preheaderi_367) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_367_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %368 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 1), align 4, !tbaa !1*/
		main_preheaderi_368 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %368 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_145)) begin
		main_preheaderi_368_reg <= main_preheaderi_368;
		if (start == 1'b0 && ^(main_preheaderi_368) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_368_reg"); $finish; end
	end
end
always @(*) begin
	main_preheaderi_369 = main_signed_multiply_32_4;
end
always @(*) begin
/* main: %.preheader.i*/
/*   %369 = mul nsw i32 %368, %367*/
	main_preheaderi_369_reg = main_preheaderi_273_reg;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %370 = add nsw i32 %369, %366*/
		main_preheaderi_370 = main_signed_add_32_0;
end
always @(*) begin
/* main: %.preheader.i*/
/*   %370 = add nsw i32 %369, %366*/
	main_preheaderi_370_reg = main_1_90_reg;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %371 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 2), align 4, !tbaa !1*/
		main_preheaderi_371 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %371 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_146)) begin
		main_preheaderi_371_reg <= main_preheaderi_371;
		if (start == 1'b0 && ^(main_preheaderi_371) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_371_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %372 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 2), align 4, !tbaa !1*/
		main_preheaderi_372 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %372 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_146)) begin
		main_preheaderi_372_reg <= main_preheaderi_372;
		if (start == 1'b0 && ^(main_preheaderi_372) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_372_reg"); $finish; end
	end
end
always @(*) begin
	main_preheaderi_373 = main_signed_multiply_32_4;
end
always @(*) begin
/* main: %.preheader.i*/
/*   %373 = mul nsw i32 %372, %371*/
	main_preheaderi_373_reg = main_1_89_reg;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %374 = add nsw i32 %370, %373*/
		main_preheaderi_374 = main_signed_add_32_0;
end
always @(*) begin
/* main: %.preheader.i*/
/*   %374 = add nsw i32 %370, %373*/
	main_preheaderi_374_reg = main_98_gep6_reg;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %375 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 3), align 4, !tbaa !1*/
		main_preheaderi_375 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %375 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_147)) begin
		main_preheaderi_375_reg <= main_preheaderi_375;
		if (start == 1'b0 && ^(main_preheaderi_375) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_375_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %376 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 3), align 4, !tbaa !1*/
		main_preheaderi_376 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %376 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_147)) begin
		main_preheaderi_376_reg <= main_preheaderi_376;
		if (start == 1'b0 && ^(main_preheaderi_376) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_376_reg"); $finish; end
	end
end
always @(*) begin
	main_preheaderi_377 = main_signed_multiply_32_4;
end
always @(*) begin
/* main: %.preheader.i*/
/*   %377 = mul nsw i32 %376, %375*/
	main_preheaderi_377_reg = main_1_89_reg;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %378 = add nsw i32 %374, %377*/
		main_preheaderi_378 = main_signed_add_32_0;
end
always @(*) begin
/* main: %.preheader.i*/
/*   %378 = add nsw i32 %374, %377*/
	main_preheaderi_378_reg = main_1_90_reg;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %379 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 4), align 4, !tbaa !1*/
		main_preheaderi_379 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %379 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_148)) begin
		main_preheaderi_379_reg <= main_preheaderi_379;
		if (start == 1'b0 && ^(main_preheaderi_379) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_379_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %380 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 4), align 4, !tbaa !1*/
		main_preheaderi_380 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %380 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_148)) begin
		main_preheaderi_380_reg <= main_preheaderi_380;
		if (start == 1'b0 && ^(main_preheaderi_380) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_380_reg"); $finish; end
	end
end
always @(*) begin
	main_preheaderi_381 = main_signed_multiply_32_4;
end
always @(*) begin
/* main: %.preheader.i*/
/*   %381 = mul nsw i32 %380, %379*/
	main_preheaderi_381_reg = main_1_89_reg;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %382 = add nsw i32 %378, %381*/
		main_preheaderi_382 = main_signed_add_32_0;
end
always @(*) begin
/* main: %.preheader.i*/
/*   %382 = add nsw i32 %378, %381*/
	main_preheaderi_382_reg = main_98_gep6_reg;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %383 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 5), align 4, !tbaa !1*/
		main_preheaderi_383 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %383 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_149)) begin
		main_preheaderi_383_reg <= main_preheaderi_383;
		if (start == 1'b0 && ^(main_preheaderi_383) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_383_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %384 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 5), align 4, !tbaa !1*/
		main_preheaderi_384 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %384 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_149)) begin
		main_preheaderi_384_reg <= main_preheaderi_384;
		if (start == 1'b0 && ^(main_preheaderi_384) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_384_reg"); $finish; end
	end
end
always @(*) begin
	main_preheaderi_385 = main_signed_multiply_32_4;
end
always @(*) begin
/* main: %.preheader.i*/
/*   %385 = mul nsw i32 %384, %383*/
	main_preheaderi_385_reg = main_1_89_reg;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %386 = add nsw i32 %382, %385*/
		main_preheaderi_386 = main_signed_add_32_0;
end
always @(*) begin
/* main: %.preheader.i*/
/*   %386 = add nsw i32 %382, %385*/
	main_preheaderi_386_reg = main_1_90_reg;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %387 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 1, i32 0), align 4, !tbaa !1*/
		main_preheaderi_387 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %387 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 1, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_150)) begin
		main_preheaderi_387_reg <= main_preheaderi_387;
		if (start == 1'b0 && ^(main_preheaderi_387) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_387_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %388 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 1, i32 0), align 4, !tbaa !1*/
		main_preheaderi_388 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %388 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 1, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_150)) begin
		main_preheaderi_388_reg <= main_preheaderi_388;
		if (start == 1'b0 && ^(main_preheaderi_388) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_388_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %389 = add i32 %386, %387*/
		main_preheaderi_389 = main_signed_add_32_1;
end
always @(*) begin
/* main: %.preheader.i*/
/*   %389 = add i32 %386, %387*/
	main_preheaderi_389_reg = main_1_88_reg;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %390 = add i32 %389, %388*/
		main_preheaderi_390 = main_signed_add_32_2;
end
always @(*) begin
/* main: %.preheader.i*/
/*   %390 = add i32 %389, %388*/
	main_preheaderi_390_reg = main_preheaderi_315_reg;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %391 = load i32* getelementptr ([6 x i32]* @dec_del_bph, i32 1, i32 1), align 4, !tbaa !1*/
		main_preheaderi_391 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %391 = load i32* getelementptr ([6 x i32]* @dec_del_bph, i32 1, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_151)) begin
		main_preheaderi_391_reg <= main_preheaderi_391;
		if (start == 1'b0 && ^(main_preheaderi_391) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_391_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %392 = load i32* getelementptr ([6 x i32]* @dec_del_dhx, i32 1, i32 1), align 4, !tbaa !1*/
		main_preheaderi_392 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %392 = load i32* getelementptr ([6 x i32]* @dec_del_dhx, i32 1, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_151)) begin
		main_preheaderi_392_reg <= main_preheaderi_392;
		if (start == 1'b0 && ^(main_preheaderi_392) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_392_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %393 = add i32 %390, %391*/
		main_preheaderi_393 = main_signed_add_32_0;
end
always @(*) begin
/* main: %.preheader.i*/
/*   %393 = add i32 %390, %391*/
	main_preheaderi_393_reg = main_1_90_reg;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %394 = add i32 %393, %392*/
		main_preheaderi_394 = main_signed_add_32_1;
end
always @(*) begin
/* main: %.preheader.i*/
/*   %394 = add i32 %393, %392*/
	main_preheaderi_394_reg = main_1_88_reg;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %395 = load i32* getelementptr ([6 x i32]* @dec_del_bph, i32 1, i32 2), align 4, !tbaa !1*/
		main_preheaderi_395 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %395 = load i32* getelementptr ([6 x i32]* @dec_del_bph, i32 1, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_152)) begin
		main_preheaderi_395_reg <= main_preheaderi_395;
		if (start == 1'b0 && ^(main_preheaderi_395) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_395_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %396 = load i32* getelementptr ([6 x i32]* @dec_del_dhx, i32 1, i32 2), align 4, !tbaa !1*/
		main_preheaderi_396 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %396 = load i32* getelementptr ([6 x i32]* @dec_del_dhx, i32 1, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_152)) begin
		main_preheaderi_396_reg <= main_preheaderi_396;
		if (start == 1'b0 && ^(main_preheaderi_396) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_396_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %397 = add i32 %394, %395*/
		main_preheaderi_397 = main_signed_add_32_0;
end
always @(*) begin
/* main: %.preheader.i*/
/*   %397 = add i32 %394, %395*/
	main_preheaderi_397_reg = main_1_90_reg;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %398 = add i32 %397, %396*/
		main_preheaderi_398 = main_signed_add_32_1;
end
always @(*) begin
/* main: %.preheader.i*/
/*   %398 = add i32 %397, %396*/
	main_preheaderi_398_reg = main_quantlexiti_144_reg;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %399 = load i32* getelementptr ([6 x i32]* @dec_del_bph, i32 1, i32 3), align 4, !tbaa !1*/
		main_preheaderi_399 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %399 = load i32* getelementptr ([6 x i32]* @dec_del_bph, i32 1, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_153)) begin
		main_preheaderi_399_reg <= main_preheaderi_399;
		if (start == 1'b0 && ^(main_preheaderi_399) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_399_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %400 = load i32* getelementptr ([6 x i32]* @dec_del_dhx, i32 1, i32 3), align 4, !tbaa !1*/
		main_preheaderi_400 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %400 = load i32* getelementptr ([6 x i32]* @dec_del_dhx, i32 1, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_153)) begin
		main_preheaderi_400_reg <= main_preheaderi_400;
		if (start == 1'b0 && ^(main_preheaderi_400) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_400_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %401 = add i32 %398, %399*/
		main_preheaderi_401 = main_signed_add_32_0;
end
always @(*) begin
/* main: %.preheader.i*/
/*   %401 = add i32 %398, %399*/
	main_preheaderi_401_reg = main_1_90_reg;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %402 = add i32 %401, %400*/
		main_preheaderi_402 = main_signed_add_32_1;
end
always @(*) begin
/* main: %.preheader.i*/
/*   %402 = add i32 %401, %400*/
	main_preheaderi_402_reg = main_1_88_reg;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %403 = load i32* getelementptr ([6 x i32]* @dec_del_bph, i32 1, i32 4), align 4, !tbaa !1*/
		main_preheaderi_403 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %403 = load i32* getelementptr ([6 x i32]* @dec_del_bph, i32 1, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_154)) begin
		main_preheaderi_403_reg <= main_preheaderi_403;
		if (start == 1'b0 && ^(main_preheaderi_403) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_403_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %404 = load i32* getelementptr ([6 x i32]* @dec_del_dhx, i32 1, i32 4), align 4, !tbaa !1*/
		main_preheaderi_404 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %404 = load i32* getelementptr ([6 x i32]* @dec_del_dhx, i32 1, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_154)) begin
		main_preheaderi_404_reg <= main_preheaderi_404;
		if (start == 1'b0 && ^(main_preheaderi_404) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_404_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %405 = add i32 %402, %403*/
		main_preheaderi_405 = main_signed_add_32_0;
end
always @(*) begin
/* main: %.preheader.i*/
/*   %405 = add i32 %402, %403*/
	main_preheaderi_405_reg = main_1_90_reg;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %406 = add i32 %405, %404*/
		main_preheaderi_406 = main_signed_add_32_1;
end
always @(*) begin
/* main: %.preheader.i*/
/*   %406 = add i32 %405, %404*/
	main_preheaderi_406_reg = main_quantlexiti_144_reg;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %407 = ashr i32 %406, 14*/
		main_preheaderi_407 = ($signed(main_preheaderi_406) >>> 32'd14);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %407 = ashr i32 %406, 14*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_154)) begin
		main_preheaderi_407_reg <= main_preheaderi_407;
		if (start == 1'b0 && ^(main_preheaderi_407) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_407_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %408 = shl i32 %dec_rh2.0, 1*/
		main_preheaderi_408 = (main_preheaderi_dec_rh20_reg <<< (32'd1 % 32));
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %408 = shl i32 %dec_rh2.0, 1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_101)) begin
		main_preheaderi_408_reg <= main_preheaderi_408;
		if (start == 1'b0 && ^(main_preheaderi_408) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_408_reg"); $finish; end
	end
end
always @(*) begin
	main_preheaderi_409 = main_signed_multiply_32_5;
end
always @(*) begin
/* main: %.preheader.i*/
/*   %409 = mul nsw i32 %408, %dec_ah2.0*/
	main_preheaderi_409_reg = main_1_53_reg;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %410 = ashr i32 %409, 15*/
		main_preheaderi_410 = ($signed(main_preheaderi_409) >>> 32'd15);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %410 = ashr i32 %409, 15*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_102)) begin
		main_preheaderi_410_reg <= main_preheaderi_410;
		if (start == 1'b0 && ^(main_preheaderi_410) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_410_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %411 = add nsw i32 %410, %407*/
		main_preheaderi_411 = main_signed_add_32_2;
end
always @(*) begin
/* main: %.preheader.i*/
/*   %411 = add nsw i32 %410, %407*/
	main_preheaderi_411_reg = main_preheaderi_315_reg;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %gep_int46 = ptrtoint [4 x i32]* @qq2_code2_table to i32*/
if (reset) begin main_preheaderi_gep_int46 = 0; end
		main_preheaderi_gep_int46 = 0;
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %gep_int46 = ptrtoint [4 x i32]* @qq2_code2_table to i32*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_101)) begin
		main_preheaderi_gep_int46_reg <= main_preheaderi_gep_int46;
		if (start == 1'b0 && ^(main_preheaderi_gep_int46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_gep_int46_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %gep_array47 = mul i32 %267, 4*/
		main_preheaderi_gep_array47 = (main_preheaderi_267 * 32'd4);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %gep_array47 = mul i32 %267, 4*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_135)) begin
		main_preheaderi_gep_array47_reg <= main_preheaderi_gep_array47;
		if (start == 1'b0 && ^(main_preheaderi_gep_array47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_gep_array47_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %gep48 = add i32 %gep_int46, %gep_array47*/
		main_preheaderi_gep48 = main_signed_add_32_2;
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %gep48 = add i32 %gep_int46, %gep_array47*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_136)) begin
		main_preheaderi_gep48_reg <= main_preheaderi_gep48;
		if (start == 1'b0 && ^(main_preheaderi_gep48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_gep48_reg"); $finish; end
	end
	/* main: %quantl.exit.i*/
	/*   %249 = add nsw i32 %246, 192*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_49)) begin
		main_preheaderi_gep48_reg <= main_quantlexiti_249;
		if (start == 1'b0 && ^(main_quantlexiti_249) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_gep48_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %497 = add nsw i32 %496, %493*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_157)) begin
		main_preheaderi_gep48_reg <= main_preheaderi_497;
		if (start == 1'b0 && ^(main_preheaderi_497) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_gep48_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %412 = inttoptr i32 %gep48 to i32**/
		main_preheaderi_412 = main_preheaderi_gep48;
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %412 = inttoptr i32 %gep48 to i32**/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_136)) begin
		main_preheaderi_412_reg <= main_preheaderi_412;
		if (start == 1'b0 && ^(main_preheaderi_412) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_412_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %413 = load i32* %412, align 4, !tbaa !1*/
		main_preheaderi_413 = qq2_code2_table_out_a;
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %413 = load i32* %412, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_143)) begin
		main_preheaderi_413_reg <= main_preheaderi_413;
		if (start == 1'b0 && ^(main_preheaderi_413) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_413_reg"); $finish; end
	end
end
always @(*) begin
	main_preheaderi_414 = main_signed_multiply_32_4;
end
always @(*) begin
/* main: %.preheader.i*/
/*   %414 = mul nsw i32 %413, %dec_deth.0*/
	main_preheaderi_414_reg = main_1_89_reg;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %415 = ashr i32 %414, 15*/
		main_preheaderi_415 = ($signed(main_preheaderi_414) >>> 32'd15);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %415 = ashr i32 %414, 15*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_144)) begin
		main_preheaderi_415_reg <= main_preheaderi_415;
		if (start == 1'b0 && ^(main_preheaderi_415) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_415_reg"); $finish; end
	end
end
always @(*) begin
	main_preheaderi_416 = main_signed_multiply_32_6;
end
always @(*) begin
/* main: %.preheader.i*/
/*   %416 = mul nsw i32 %dec_nbh.0, 127*/
	main_preheaderi_416_reg = main_quantlexiti_140_reg;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %417 = ashr i32 %416, 7*/
		main_preheaderi_417 = ($signed(main_preheaderi_416) >>> 32'd7);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %417 = ashr i32 %416, 7*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_102)) begin
		main_preheaderi_417_reg <= main_preheaderi_417;
		if (start == 1'b0 && ^(main_preheaderi_417) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_417_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %gep_int49 = ptrtoint [4 x i32]* @wh_code_table to i32*/
if (reset) begin main_preheaderi_gep_int49 = 0; end
		main_preheaderi_gep_int49 = 0;
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %gep_int49 = ptrtoint [4 x i32]* @wh_code_table to i32*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_101)) begin
		main_preheaderi_gep_int49_reg <= main_preheaderi_gep_int49;
		if (start == 1'b0 && ^(main_preheaderi_gep_int49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_gep_int49_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %gep_array50 = mul i32 %267, 4*/
		main_preheaderi_gep_array50 = (main_preheaderi_267 * 32'd4);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %gep_array50 = mul i32 %267, 4*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_135)) begin
		main_preheaderi_gep_array50_reg <= main_preheaderi_gep_array50;
		if (start == 1'b0 && ^(main_preheaderi_gep_array50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_gep_array50_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %gep51 = add i32 %gep_int49, %gep_array50*/
		main_preheaderi_gep51 = main_signed_add_32_8;
end
always @(*) begin
/* main: %.preheader.i*/
/*   %gep51 = add i32 %gep_int49, %gep_array50*/
	main_preheaderi_gep51_reg = main_1_63_reg;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %418 = inttoptr i32 %gep51 to i32**/
		main_preheaderi_418 = main_preheaderi_gep51;
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %418 = inttoptr i32 %gep51 to i32**/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_136)) begin
		main_preheaderi_418_reg <= main_preheaderi_418;
		if (start == 1'b0 && ^(main_preheaderi_418) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_418_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %419 = load i32* %418, align 4, !tbaa !1*/
		main_preheaderi_419 = wh_code_table_out_a;
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %419 = load i32* %418, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_143)) begin
		main_preheaderi_419_reg <= main_preheaderi_419;
		if (start == 1'b0 && ^(main_preheaderi_419) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_419_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %420 = add nsw i32 %417, %419*/
		main_preheaderi_420 = main_signed_add_32_0;
end
always @(*) begin
/* main: %.preheader.i*/
/*   %420 = add nsw i32 %417, %419*/
	main_preheaderi_420_reg = main_1_90_reg;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %421 = icmp slt i32 %420, 0*/
		main_preheaderi_421 = ($signed(main_preheaderi_420) < $signed(32'd0));
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %421 = icmp slt i32 %420, 0*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_143)) begin
		main_preheaderi_421_reg <= main_preheaderi_421;
		if (start == 1'b0 && ^(main_preheaderi_421) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_421_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %..i1.i = select i1 %421, i32 0, i32 %420*/
		main_preheaderi_i1i = (main_preheaderi_421 ? 32'd0 : main_preheaderi_420);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %..i1.i = select i1 %421, i32 0, i32 %420*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_143)) begin
		main_preheaderi_i1i_reg <= main_preheaderi_i1i;
		if (start == 1'b0 && ^(main_preheaderi_i1i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_i1i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %422 = icmp sgt i32 %..i1.i, 22528*/
		main_preheaderi_422 = ($signed(main_preheaderi_i1i) > $signed(32'd22528));
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %422 = icmp sgt i32 %..i1.i, 22528*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_143)) begin
		main_preheaderi_422_reg <= main_preheaderi_422;
		if (start == 1'b0 && ^(main_preheaderi_422) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_422_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %...i2.i = select i1 %422, i32 22528, i32 %..i1.i*/
		main_preheaderi_i2i = (main_preheaderi_422 ? 32'd22528 : main_preheaderi_i1i);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %...i2.i = select i1 %422, i32 22528, i32 %..i1.i*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_143)) begin
		main_preheaderi_i2i_reg <= main_preheaderi_i2i;
		if (start == 1'b0 && ^(main_preheaderi_i2i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_i2i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %423 = lshr i32 %...i2.i, 6*/
		main_preheaderi_423 = (main_preheaderi_i2i >>> (32'd6 % 32));
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %423 = lshr i32 %...i2.i, 6*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_143)) begin
		main_preheaderi_423_reg <= main_preheaderi_423;
		if (start == 1'b0 && ^(main_preheaderi_423) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_423_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %424 = and i32 %423, 31*/
		main_preheaderi_424 = (main_preheaderi_423 & 32'd31);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %424 = and i32 %423, 31*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_143)) begin
		main_preheaderi_424_reg <= main_preheaderi_424;
		if (start == 1'b0 && ^(main_preheaderi_424) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_424_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %425 = ashr i32 %...i2.i, 11*/
		main_preheaderi_425 = ($signed(main_preheaderi_i2i) >>> 32'd11);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %425 = ashr i32 %...i2.i, 11*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_143)) begin
		main_preheaderi_425_reg <= main_preheaderi_425;
		if (start == 1'b0 && ^(main_preheaderi_425) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_425_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %gep_int52 = ptrtoint [32 x i32]* @ilb_table to i32*/
if (reset) begin main_preheaderi_gep_int52 = 0; end
		main_preheaderi_gep_int52 = 0;
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %gep_int52 = ptrtoint [32 x i32]* @ilb_table to i32*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_101)) begin
		main_preheaderi_gep_int52_reg <= main_preheaderi_gep_int52;
		if (start == 1'b0 && ^(main_preheaderi_gep_int52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_gep_int52_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %gep_array53 = mul i32 %424, 4*/
		main_preheaderi_gep_array53 = (main_preheaderi_424_reg * 32'd4);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %gep_array53 = mul i32 %424, 4*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_144)) begin
		main_preheaderi_gep_array53_reg <= main_preheaderi_gep_array53;
		if (start == 1'b0 && ^(main_preheaderi_gep_array53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_gep_array53_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %gep54 = add i32 %gep_int52, %gep_array53*/
		main_preheaderi_gep54 = main_signed_add_32_0;
end
always @(*) begin
/* main: %.preheader.i*/
/*   %gep54 = add i32 %gep_int52, %gep_array53*/
	main_preheaderi_gep54_reg = main_1_90_reg;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %426 = inttoptr i32 %gep54 to i32**/
		main_preheaderi_426 = main_preheaderi_gep54;
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %426 = inttoptr i32 %gep54 to i32**/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_145)) begin
		main_preheaderi_426_reg <= main_preheaderi_426;
		if (start == 1'b0 && ^(main_preheaderi_426) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_426_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %427 = load i32* %426, align 4, !tbaa !1*/
		main_preheaderi_427 = ilb_table_out_a;
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %427 = load i32* %426, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_146)) begin
		main_preheaderi_427_reg <= main_preheaderi_427;
		if (start == 1'b0 && ^(main_preheaderi_427) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_427_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %428 = sub i32 11, %425*/
		main_preheaderi_428 = main_signed_subtract_32_0;
end
always @(*) begin
/* main: %.preheader.i*/
/*   %428 = sub i32 11, %425*/
	main_preheaderi_428_reg = main_1_91_reg;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %429 = ashr i32 %427, %428*/
		main_preheaderi_429 = ($signed(main_preheaderi_427) >>> main_preheaderi_428_reg);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %429 = ashr i32 %427, %428*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_146)) begin
		main_preheaderi_429_reg <= main_preheaderi_429;
		if (start == 1'b0 && ^(main_preheaderi_429) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_429_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %430 = shl i32 %429, 3*/
		main_preheaderi_430 = (main_preheaderi_429 <<< (32'd3 % 32));
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %430 = shl i32 %429, 3*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_146)) begin
		main_preheaderi_430_reg <= main_preheaderi_430;
		if (start == 1'b0 && ^(main_preheaderi_430) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_430_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %431 = add nsw i32 %407, %415*/
		main_preheaderi_431 = main_signed_add_32_8;
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %431 = add nsw i32 %407, %415*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_154)) begin
		main_preheaderi_431_reg <= main_preheaderi_431;
		if (start == 1'b0 && ^(main_preheaderi_431) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_431_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %432 = shl nsw i32 %dec_ah1.0, 2*/
		main_preheaderi_432 = (main_preheaderi_dec_ah10_reg <<< (32'd2 % 32));
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %432 = shl nsw i32 %dec_ah1.0, 2*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_101)) begin
		main_preheaderi_432_reg <= main_preheaderi_432;
		if (start == 1'b0 && ^(main_preheaderi_432) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_432_reg"); $finish; end
	end
end
always @(*) begin
	main_preheaderi_433 = main_signed_multiply_32_4;
end
always @(*) begin
/* main: %.preheader.i*/
/*   %433 = mul nsw i32 %dec_ph1.0, %431*/
	main_preheaderi_433_reg = main_1_89_reg;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %434 = icmp sgt i32 %433, -1*/
		main_preheaderi_434 = ($signed(main_preheaderi_433) > $signed(-32'd1));
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %434 = icmp sgt i32 %433, -1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_156)) begin
		main_preheaderi_434_reg <= main_preheaderi_434;
		if (start == 1'b0 && ^(main_preheaderi_434) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_434_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %435 = sub nsw i32 0, %432*/
		main_preheaderi_435 = main_signed_subtract_32_1;
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %435 = sub nsw i32 0, %432*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_101)) begin
		main_preheaderi_435_reg <= main_preheaderi_435;
		if (start == 1'b0 && ^(main_preheaderi_435) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_435_reg"); $finish; end
	end
	/* main: %quantl.exit.i*/
	/*   %234 = sub nsw i32 0, %231*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_48)) begin
		main_preheaderi_435_reg <= main_quantlexiti_234;
		if (start == 1'b0 && ^(main_quantlexiti_234) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_435_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %.1.i.i = select i1 %434, i32 %435, i32 %432*/
		main_preheaderi_1ii = (main_preheaderi_434 ? main_preheaderi_435_reg : main_preheaderi_432_reg);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %.1.i.i = select i1 %434, i32 %435, i32 %432*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_156)) begin
		main_preheaderi_1ii_reg <= main_preheaderi_1ii;
		if (start == 1'b0 && ^(main_preheaderi_1ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_1ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %436 = ashr i32 %.1.i.i, 7*/
		main_preheaderi_436 = ($signed(main_preheaderi_1ii) >>> 32'd7);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %436 = ashr i32 %.1.i.i, 7*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_156)) begin
		main_preheaderi_436_reg <= main_preheaderi_436;
		if (start == 1'b0 && ^(main_preheaderi_436) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_436_reg"); $finish; end
	end
end
always @(*) begin
	main_preheaderi_437 = main_signed_multiply_32_7;
end
always @(*) begin
/* main: %.preheader.i*/
/*   %437 = mul nsw i32 %dec_ph2.0, %431*/
	main_preheaderi_437_reg = main_preheaderi_345_reg;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %438 = ashr i32 %437, 31*/
		main_preheaderi_438 = ($signed(main_preheaderi_437) >>> 32'd31);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %438 = ashr i32 %437, 31*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_156)) begin
		main_preheaderi_438_reg <= main_preheaderi_438;
		if (start == 1'b0 && ^(main_preheaderi_438) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_438_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %439 = and i32 %438, -256*/
		main_preheaderi_439 = (main_preheaderi_438 & -32'd256);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %439 = and i32 %438, -256*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_156)) begin
		main_preheaderi_439_reg <= main_preheaderi_439;
		if (start == 1'b0 && ^(main_preheaderi_439) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_439_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %440 = or i32 %439, 128*/
		main_preheaderi_440 = (main_preheaderi_439 | 32'd128);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %440 = or i32 %439, 128*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_156)) begin
		main_preheaderi_440_reg <= main_preheaderi_440;
		if (start == 1'b0 && ^(main_preheaderi_440) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_440_reg"); $finish; end
	end
end
always @(*) begin
	main_preheaderi_441 = main_signed_multiply_32_7;
end
always @(*) begin
/* main: %.preheader.i*/
/*   %441 = mul nsw i32 %dec_ah2.0, 127*/
	main_preheaderi_441_reg = main_preheaderi_345_reg;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %442 = ashr i32 %441, 7*/
		main_preheaderi_442 = ($signed(main_preheaderi_441) >>> 32'd7);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %442 = ashr i32 %441, 7*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_102)) begin
		main_preheaderi_442_reg <= main_preheaderi_442;
		if (start == 1'b0 && ^(main_preheaderi_442) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_442_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %wd4.0.i.i = add nsw i32 %436, %442*/
		main_preheaderi_wd40ii = main_signed_add_32_0;
end
always @(*) begin
/* main: %.preheader.i*/
/*   %wd4.0.i.i = add nsw i32 %436, %442*/
	main_preheaderi_wd40ii_reg = main_1_90_reg;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %443 = add nsw i32 %wd4.0.i.i, %440*/
		main_preheaderi_443 = main_signed_add_32_1;
end
always @(*) begin
/* main: %.preheader.i*/
/*   %443 = add nsw i32 %wd4.0.i.i, %440*/
	main_preheaderi_443_reg = main_1_88_reg;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %444 = icmp sgt i32 %443, 12288*/
		main_preheaderi_444 = ($signed(main_preheaderi_443) > $signed(32'd12288));
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %444 = icmp sgt i32 %443, 12288*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_156)) begin
		main_preheaderi_444_reg <= main_preheaderi_444;
		if (start == 1'b0 && ^(main_preheaderi_444) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_444_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %..i.i = select i1 %444, i32 12288, i32 %443*/
		main_preheaderi_ii = (main_preheaderi_444 ? 32'd12288 : main_preheaderi_443);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %..i.i = select i1 %444, i32 12288, i32 %443*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_156)) begin
		main_preheaderi_ii_reg <= main_preheaderi_ii;
		if (start == 1'b0 && ^(main_preheaderi_ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %445 = icmp slt i32 %..i.i, -12288*/
		main_preheaderi_445 = ($signed(main_preheaderi_ii_reg) < $signed(-32'd12288));
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %445 = icmp slt i32 %..i.i, -12288*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_157)) begin
		main_preheaderi_445_reg <= main_preheaderi_445;
		if (start == 1'b0 && ^(main_preheaderi_445) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_445_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %...i.i = select i1 %445, i32 -12288, i32 %..i.i*/
		main_preheaderi_ii_var1 = (main_preheaderi_445 ? -32'd12288 : main_preheaderi_ii_reg);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %...i.i = select i1 %445, i32 -12288, i32 %..i.i*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_157)) begin
		main_preheaderi_ii_var1_reg <= main_preheaderi_ii_var1;
		if (start == 1'b0 && ^(main_preheaderi_ii_var1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_ii_var1_reg"); $finish; end
	end
end
always @(*) begin
	main_preheaderi_446 = main_signed_multiply_32_8;
end
always @(*) begin
/* main: %.preheader.i*/
/*   %446 = mul nsw i32 %dec_ah1.0, 255*/
	main_preheaderi_446_reg = main_1_59_reg;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %447 = ashr i32 %446, 8*/
		main_preheaderi_447 = ($signed(main_preheaderi_446) >>> 32'd8);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %447 = ashr i32 %446, 8*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_102)) begin
		main_preheaderi_447_reg <= main_preheaderi_447;
		if (start == 1'b0 && ^(main_preheaderi_447) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_447_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %448 = ashr i32 %433, 31*/
		main_preheaderi_448 = ($signed(main_preheaderi_433) >>> 32'd31);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %448 = ashr i32 %433, 31*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_156)) begin
		main_preheaderi_448_reg <= main_preheaderi_448;
		if (start == 1'b0 && ^(main_preheaderi_448) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_448_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %449 = and i32 %448, -384*/
		main_preheaderi_449 = (main_preheaderi_448 & -32'd384);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %449 = and i32 %448, -384*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_156)) begin
		main_preheaderi_449_reg <= main_preheaderi_449;
		if (start == 1'b0 && ^(main_preheaderi_449) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_449_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %450 = add nsw i32 %447, 192*/
		main_preheaderi_450 = main_signed_add_32_1;
end
always @(*) begin
/* main: %.preheader.i*/
/*   %450 = add nsw i32 %447, 192*/
	main_preheaderi_450_reg = main_1_82_reg;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %apl1.0.i.i = add nsw i32 %450, %449*/
		main_preheaderi_apl10ii = main_signed_add_32_2;
end
always @(*) begin
/* main: %.preheader.i*/
/*   %apl1.0.i.i = add nsw i32 %450, %449*/
	main_preheaderi_apl10ii_reg = main_preheaderi_315_reg;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %451 = sub nsw i32 15360, %...i.i*/
		main_preheaderi_451 = main_signed_subtract_32_0;
end
always @(*) begin
/* main: %.preheader.i*/
/*   %451 = sub nsw i32 15360, %...i.i*/
	main_preheaderi_451_reg = main_1_91_reg;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %452 = icmp sgt i32 %apl1.0.i.i, %451*/
		main_preheaderi_452 = ($signed(main_preheaderi_apl10ii_reg) > $signed(main_preheaderi_451));
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %452 = icmp sgt i32 %apl1.0.i.i, %451*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_157)) begin
		main_preheaderi_452_reg <= main_preheaderi_452;
		if (start == 1'b0 && ^(main_preheaderi_452) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_452_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %.apl1.0.i.i = select i1 %452, i32 %451, i32 %apl1.0.i.i*/
		main_preheaderi_apl10ii_var2 = (main_preheaderi_452 ? main_preheaderi_451 : main_preheaderi_apl10ii_reg);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %.apl1.0.i.i = select i1 %452, i32 %451, i32 %apl1.0.i.i*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_157)) begin
		main_preheaderi_apl10ii_var2_reg <= main_preheaderi_apl10ii_var2;
		if (start == 1'b0 && ^(main_preheaderi_apl10ii_var2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_apl10ii_var2_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %453 = sub nsw i32 0, %451*/
		main_preheaderi_453 = main_signed_subtract_32_1;
end
always @(*) begin
/* main: %.preheader.i*/
/*   %453 = sub nsw i32 0, %451*/
	main_preheaderi_453_reg = main_1_95_reg;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %454 = icmp slt i32 %.apl1.0.i.i, %453*/
		main_preheaderi_454 = ($signed(main_preheaderi_apl10ii_var2_reg) < $signed(main_preheaderi_453_reg));
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %454 = icmp slt i32 %.apl1.0.i.i, %453*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_158)) begin
		main_preheaderi_454_reg <= main_preheaderi_454;
		if (start == 1'b0 && ^(main_preheaderi_454) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_454_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %apl1.2.i.i = select i1 %454, i32 %453, i32 %.apl1.0.i.i*/
		main_preheaderi_apl12ii = (main_preheaderi_454 ? main_preheaderi_453_reg : main_preheaderi_apl10ii_var2_reg);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %apl1.2.i.i = select i1 %454, i32 %453, i32 %.apl1.0.i.i*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_158)) begin
		main_preheaderi_apl12ii_reg <= main_preheaderi_apl12ii;
		if (start == 1'b0 && ^(main_preheaderi_apl12ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_apl12ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %455 = add nsw i32 %415, %411*/
		main_preheaderi_455 = main_signed_add_32_3;
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %455 = add nsw i32 %415, %411*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_154)) begin
		main_preheaderi_455_reg <= main_preheaderi_455;
		if (start == 1'b0 && ^(main_preheaderi_455) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_455_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %456 = sub nsw i32 %323, %455*/
		main_preheaderi_456 = main_signed_subtract_32_0;
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %456 = sub nsw i32 %323, %455*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_154)) begin
		main_preheaderi_456_reg <= main_preheaderi_456;
		if (start == 1'b0 && ^(main_preheaderi_456) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_456_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %457 = add nsw i32 %455, %323*/
		main_preheaderi_457 = main_signed_add_32_4;
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %457 = add nsw i32 %455, %323*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_154)) begin
		main_preheaderi_457_reg <= main_preheaderi_457;
		if (start == 1'b0 && ^(main_preheaderi_457) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_457_reg"); $finish; end
	end
end
always @(*) begin
	main_preheaderi_458 = main_signed_multiply_32_5;
end
always @(*) begin
/* main: %.preheader.i*/
/*   %458 = mul nsw i32 %456, 12*/
	main_preheaderi_458_reg = main_1_53_reg;
end
always @(*) begin
	main_preheaderi_459 = main_signed_multiply_32_6;
end
always @(*) begin
/* main: %.preheader.i*/
/*   %459 = mul nsw i32 %457, -44*/
	main_preheaderi_459_reg = main_quantlexiti_140_reg;
end
always @(*) begin
	main_preheaderi_460 = main_signed_multiply_32_9;
end
always @(*) begin
/* main: %.preheader.i*/
/*   %460 = mul nsw i32 %accumc.0.0, -44*/
	main_preheaderi_460_reg = main_1_86_reg;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %461 = add nsw i32 %460, %458*/
		main_preheaderi_461 = main_signed_add_32_3;
end
always @(*) begin
/* main: %.preheader.i*/
/*   %461 = add nsw i32 %460, %458*/
	main_preheaderi_461_reg = main_1_47_reg;
end
always @(*) begin
	main_preheaderi_462 = main_signed_multiply_32_10;
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %462 = mul nsw i32 %accumd.0.0, 212*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_102)) begin
		main_preheaderi_462_reg <= main_preheaderi_462;
		if (start == 1'b0 && ^(main_preheaderi_462) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_462_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %462 = mul nsw i32 %accumd.0.0, 212*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_102)) begin
		main_preheaderi_462_reg <= main_preheaderi_462;
		if (start == 1'b0 && ^(main_preheaderi_462) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_462_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %463 = add nsw i32 %462, %459*/
		main_preheaderi_463 = main_signed_add_32_4;
end
always @(*) begin
/* main: %.preheader.i*/
/*   %463 = add nsw i32 %462, %459*/
	main_preheaderi_463_reg = main_1_48_reg;
end
always @(*) begin
	main_preheaderi_464 = main_signed_multiply_32_11;
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %464 = mul nsw i32 %accumc.1.0, 48*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_102)) begin
		main_preheaderi_464_reg <= main_preheaderi_464;
		if (start == 1'b0 && ^(main_preheaderi_464) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_464_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %464 = mul nsw i32 %accumc.1.0, 48*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_102)) begin
		main_preheaderi_464_reg <= main_preheaderi_464;
		if (start == 1'b0 && ^(main_preheaderi_464) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_464_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %465 = add nsw i32 %464, %461*/
		main_preheaderi_465 = main_signed_add_32_5;
end
always @(*) begin
/* main: %.preheader.i*/
/*   %465 = add nsw i32 %464, %461*/
	main_preheaderi_465_reg = main_1_54_reg;
end
always @(*) begin
	main_preheaderi_466 = main_signed_multiply_32_12;
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %466 = mul nsw i32 %accumd.1.0, -624*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_102)) begin
		main_preheaderi_466_reg <= main_preheaderi_466;
		if (start == 1'b0 && ^(main_preheaderi_466) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_466_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %466 = mul nsw i32 %accumd.1.0, -624*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_102)) begin
		main_preheaderi_466_reg <= main_preheaderi_466;
		if (start == 1'b0 && ^(main_preheaderi_466) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_466_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %467 = add nsw i32 %466, %463*/
		main_preheaderi_467 = main_signed_add_32_6;
end
always @(*) begin
/* main: %.preheader.i*/
/*   %467 = add nsw i32 %466, %463*/
	main_preheaderi_467_reg = main_1_56_reg;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %468 = shl nsw i32 %accumc.2.0, 7*/
		main_preheaderi_468 = (main_preheaderi_accumc20_reg <<< (32'd7 % 32));
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %468 = shl nsw i32 %accumc.2.0, 7*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_101)) begin
		main_preheaderi_468_reg <= main_preheaderi_468;
		if (start == 1'b0 && ^(main_preheaderi_468) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_468_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %469 = add nsw i32 %468, %465*/
		main_preheaderi_469 = main_signed_add_32_7;
end
always @(*) begin
/* main: %.preheader.i*/
/*   %469 = add nsw i32 %468, %465*/
	main_preheaderi_469_reg = main_1_58_reg;
end
always @(*) begin
	main_preheaderi_470 = main_signed_multiply_32_13;
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %470 = mul nsw i32 %accumd.2.0, 1448*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_102)) begin
		main_preheaderi_470_reg <= main_preheaderi_470;
		if (start == 1'b0 && ^(main_preheaderi_470) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_470_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %470 = mul nsw i32 %accumd.2.0, 1448*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_102)) begin
		main_preheaderi_470_reg <= main_preheaderi_470;
		if (start == 1'b0 && ^(main_preheaderi_470) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_470_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %471 = add nsw i32 %470, %467*/
		main_preheaderi_471 = main_signed_add_32_8;
end
always @(*) begin
/* main: %.preheader.i*/
/*   %471 = add nsw i32 %470, %467*/
	main_preheaderi_471_reg = main_preheaderi_323_reg;
end
always @(*) begin
	main_preheaderi_472 = main_signed_multiply_32_14;
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %472 = mul nsw i32 %accumc.3.0, -840*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_102)) begin
		main_preheaderi_472_reg <= main_preheaderi_472;
		if (start == 1'b0 && ^(main_preheaderi_472) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_472_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %472 = mul nsw i32 %accumc.3.0, -840*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_102)) begin
		main_preheaderi_472_reg <= main_preheaderi_472;
		if (start == 1'b0 && ^(main_preheaderi_472) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_472_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %473 = add nsw i32 %472, %469*/
		main_preheaderi_473 = main_signed_add_32_9;
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %473 = add nsw i32 %472, %469*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_156)) begin
		main_preheaderi_473_reg <= main_preheaderi_473;
		if (start == 1'b0 && ^(main_preheaderi_473) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_473_reg"); $finish; end
	end
end
always @(*) begin
	main_preheaderi_474 = main_signed_multiply_32_15;
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %474 = mul nsw i32 %accumd.3.0, -3220*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_102)) begin
		main_preheaderi_474_reg <= main_preheaderi_474;
		if (start == 1'b0 && ^(main_preheaderi_474) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_474_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %474 = mul nsw i32 %accumd.3.0, -3220*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_102)) begin
		main_preheaderi_474_reg <= main_preheaderi_474;
		if (start == 1'b0 && ^(main_preheaderi_474) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_474_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %475 = add nsw i32 %474, %471*/
		main_preheaderi_475 = main_signed_add_32_10;
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %475 = add nsw i32 %474, %471*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_156)) begin
		main_preheaderi_475_reg <= main_preheaderi_475;
		if (start == 1'b0 && ^(main_preheaderi_475) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_475_reg"); $finish; end
	end
end
always @(*) begin
	main_preheaderi_476 = main_signed_multiply_32_16;
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %476 = mul nsw i32 %accumc.4.0, 3804*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_102)) begin
		main_preheaderi_476_reg <= main_preheaderi_476;
		if (start == 1'b0 && ^(main_preheaderi_476) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_476_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %476 = mul nsw i32 %accumc.4.0, 3804*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_102)) begin
		main_preheaderi_476_reg <= main_preheaderi_476;
		if (start == 1'b0 && ^(main_preheaderi_476) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_476_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %477 = add nsw i32 %476, %473*/
		main_preheaderi_477 = main_signed_add_32_11;
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %477 = add nsw i32 %476, %473*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_156)) begin
		main_preheaderi_477_reg <= main_preheaderi_477;
		if (start == 1'b0 && ^(main_preheaderi_477) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_477_reg"); $finish; end
	end
end
always @(*) begin
	main_preheaderi_478 = main_signed_multiply_32_17;
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %478 = mul nsw i32 %accumd.4.0, 15504*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_102)) begin
		main_preheaderi_478_reg <= main_preheaderi_478;
		if (start == 1'b0 && ^(main_preheaderi_478) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_478_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %478 = mul nsw i32 %accumd.4.0, 15504*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_102)) begin
		main_preheaderi_478_reg <= main_preheaderi_478;
		if (start == 1'b0 && ^(main_preheaderi_478) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_478_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %479 = add nsw i32 %478, %475*/
		main_preheaderi_479 = main_signed_add_32_12;
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %479 = add nsw i32 %478, %475*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_156)) begin
		main_preheaderi_479_reg <= main_preheaderi_479;
		if (start == 1'b0 && ^(main_preheaderi_479) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_479_reg"); $finish; end
	end
end
always @(*) begin
	main_preheaderi_480 = main_signed_multiply_32_18;
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %480 = mul nsw i32 %accumc.5.0, 15504*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_102)) begin
		main_preheaderi_480_reg <= main_preheaderi_480;
		if (start == 1'b0 && ^(main_preheaderi_480) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_480_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %480 = mul nsw i32 %accumc.5.0, 15504*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_102)) begin
		main_preheaderi_480_reg <= main_preheaderi_480;
		if (start == 1'b0 && ^(main_preheaderi_480) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_480_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %481 = add nsw i32 %480, %477*/
		main_preheaderi_481 = main_signed_add_32_13;
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %481 = add nsw i32 %480, %477*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_156)) begin
		main_preheaderi_481_reg <= main_preheaderi_481;
		if (start == 1'b0 && ^(main_preheaderi_481) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_481_reg"); $finish; end
	end
end
always @(*) begin
	main_preheaderi_482 = main_signed_multiply_32_19;
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %482 = mul nsw i32 %accumd.5.0, 3804*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_102)) begin
		main_preheaderi_482_reg <= main_preheaderi_482;
		if (start == 1'b0 && ^(main_preheaderi_482) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_482_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %482 = mul nsw i32 %accumd.5.0, 3804*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_102)) begin
		main_preheaderi_482_reg <= main_preheaderi_482;
		if (start == 1'b0 && ^(main_preheaderi_482) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_482_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %483 = add nsw i32 %482, %479*/
		main_preheaderi_483 = main_signed_add_32_14;
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %483 = add nsw i32 %482, %479*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_156)) begin
		main_preheaderi_483_reg <= main_preheaderi_483;
		if (start == 1'b0 && ^(main_preheaderi_483) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_483_reg"); $finish; end
	end
end
always @(*) begin
	main_preheaderi_484 = main_signed_multiply_32_20;
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %484 = mul nsw i32 %accumc.6.0, -3220*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_102)) begin
		main_preheaderi_484_reg <= main_preheaderi_484;
		if (start == 1'b0 && ^(main_preheaderi_484) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_484_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %484 = mul nsw i32 %accumc.6.0, -3220*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_102)) begin
		main_preheaderi_484_reg <= main_preheaderi_484;
		if (start == 1'b0 && ^(main_preheaderi_484) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_484_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %485 = add nsw i32 %484, %481*/
		main_preheaderi_485 = main_signed_add_32_15;
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %485 = add nsw i32 %484, %481*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_156)) begin
		main_preheaderi_485_reg <= main_preheaderi_485;
		if (start == 1'b0 && ^(main_preheaderi_485) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_485_reg"); $finish; end
	end
end
always @(*) begin
	main_preheaderi_486 = main_signed_multiply_32_21;
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %486 = mul nsw i32 %accumd.6.0, -840*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_102)) begin
		main_preheaderi_486_reg <= main_preheaderi_486;
		if (start == 1'b0 && ^(main_preheaderi_486) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_486_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %486 = mul nsw i32 %accumd.6.0, -840*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_102)) begin
		main_preheaderi_486_reg <= main_preheaderi_486;
		if (start == 1'b0 && ^(main_preheaderi_486) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_486_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %487 = add nsw i32 %486, %483*/
		main_preheaderi_487 = main_signed_add_32_16;
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %487 = add nsw i32 %486, %483*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_156)) begin
		main_preheaderi_487_reg <= main_preheaderi_487;
		if (start == 1'b0 && ^(main_preheaderi_487) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_487_reg"); $finish; end
	end
end
always @(*) begin
	main_preheaderi_488 = main_signed_multiply_32_22;
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %488 = mul nsw i32 %accumc.7.0, 1448*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_102)) begin
		main_preheaderi_488_reg <= main_preheaderi_488;
		if (start == 1'b0 && ^(main_preheaderi_488) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_488_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %488 = mul nsw i32 %accumc.7.0, 1448*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_102)) begin
		main_preheaderi_488_reg <= main_preheaderi_488;
		if (start == 1'b0 && ^(main_preheaderi_488) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_488_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %489 = add nsw i32 %488, %485*/
		main_preheaderi_489 = main_signed_add_32_17;
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %489 = add nsw i32 %488, %485*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_156)) begin
		main_preheaderi_489_reg <= main_preheaderi_489;
		if (start == 1'b0 && ^(main_preheaderi_489) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_489_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %490 = shl nsw i32 %accumd.7.0, 7*/
		main_preheaderi_490 = (main_preheaderi_accumd70_reg <<< (32'd7 % 32));
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %490 = shl nsw i32 %accumd.7.0, 7*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_101)) begin
		main_preheaderi_490_reg <= main_preheaderi_490;
		if (start == 1'b0 && ^(main_preheaderi_490) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_490_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %491 = add nsw i32 %490, %487*/
		main_preheaderi_491 = main_signed_add_32_18;
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %491 = add nsw i32 %490, %487*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_156)) begin
		main_preheaderi_491_reg <= main_preheaderi_491;
		if (start == 1'b0 && ^(main_preheaderi_491) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_491_reg"); $finish; end
	end
end
always @(*) begin
	main_preheaderi_492 = main_signed_multiply_32_23;
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %492 = mul nsw i32 %accumc.8.0, -624*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_102)) begin
		main_preheaderi_492_reg <= main_preheaderi_492;
		if (start == 1'b0 && ^(main_preheaderi_492) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_492_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %492 = mul nsw i32 %accumc.8.0, -624*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_102)) begin
		main_preheaderi_492_reg <= main_preheaderi_492;
		if (start == 1'b0 && ^(main_preheaderi_492) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_492_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %493 = add nsw i32 %492, %489*/
		main_preheaderi_493 = main_signed_add_32_0;
end
always @(*) begin
/* main: %.preheader.i*/
/*   %493 = add nsw i32 %492, %489*/
	main_preheaderi_493_reg = main_1_90_reg;
end
always @(*) begin
	main_preheaderi_494 = main_signed_multiply_32_24;
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %494 = mul nsw i32 %accumd.8.0, 48*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_102)) begin
		main_preheaderi_494_reg <= main_preheaderi_494;
		if (start == 1'b0 && ^(main_preheaderi_494) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_494_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %494 = mul nsw i32 %accumd.8.0, 48*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_102)) begin
		main_preheaderi_494_reg <= main_preheaderi_494;
		if (start == 1'b0 && ^(main_preheaderi_494) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_494_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %495 = add nsw i32 %494, %491*/
		main_preheaderi_495 = main_signed_add_32_1;
end
always @(*) begin
/* main: %.preheader.i*/
/*   %495 = add nsw i32 %494, %491*/
	main_preheaderi_495_reg = main_1_88_reg;
end
always @(*) begin
	main_preheaderi_496 = main_signed_multiply_32_25;
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %496 = mul nsw i32 %accumc.9.0, 212*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_102)) begin
		main_preheaderi_496_reg <= main_preheaderi_496;
		if (start == 1'b0 && ^(main_preheaderi_496) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_496_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %496 = mul nsw i32 %accumc.9.0, 212*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_102)) begin
		main_preheaderi_496_reg <= main_preheaderi_496;
		if (start == 1'b0 && ^(main_preheaderi_496) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_496_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %497 = add nsw i32 %496, %493*/
		main_preheaderi_497 = main_signed_add_32_2;
end
always @(*) begin
/* main: %.preheader.i*/
/*   %497 = add nsw i32 %496, %493*/
	main_preheaderi_497_reg = main_preheaderi_gep48_reg;
end
always @(*) begin
	main_preheaderi_498 = main_signed_multiply_32_26;
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %498 = mul nsw i32 %accumd.9.0, -44*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_102)) begin
		main_preheaderi_498_reg <= main_preheaderi_498;
		if (start == 1'b0 && ^(main_preheaderi_498) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_498_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %498 = mul nsw i32 %accumd.9.0, -44*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_102)) begin
		main_preheaderi_498_reg <= main_preheaderi_498;
		if (start == 1'b0 && ^(main_preheaderi_498) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_498_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %499 = add nsw i32 %498, %495*/
		main_preheaderi_499 = main_signed_add_32_8;
end
always @(*) begin
/* main: %.preheader.i*/
/*   %499 = add nsw i32 %498, %495*/
	main_preheaderi_499_reg = main_preheaderi_323_reg;
end
always @(*) begin
	main_preheaderi_500 = main_signed_multiply_32_27;
end
always @(*) begin
/* main: %.preheader.i*/
/*   %500 = mul nsw i32 %accumc.10.0, -44*/
	main_preheaderi_500_reg = main_quantlexiti_240_reg;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %501 = add nsw i32 %500, %497*/
		main_preheaderi_501 = main_signed_add_32_3;
end
always @(*) begin
/* main: %.preheader.i*/
/*   %501 = add nsw i32 %500, %497*/
	main_preheaderi_501_reg = main_1_47_reg;
end
always @(*) begin
	main_preheaderi_502 = main_signed_multiply_32_28;
end
always @(*) begin
/* main: %.preheader.i*/
/*   %502 = mul nsw i32 %accumd.10.0, 12*/
	main_preheaderi_502_reg = main_quantlexiti_245_reg;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %503 = add nsw i32 %502, %499*/
		main_preheaderi_503 = main_signed_add_32_4;
end
always @(*) begin
/* main: %.preheader.i*/
/*   %503 = add nsw i32 %502, %499*/
	main_preheaderi_503_reg = main_1_48_reg;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %504 = ashr i32 %501, 14*/
		main_preheaderi_504 = ($signed(main_preheaderi_501) >>> 32'd14);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %504 = ashr i32 %501, 14*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_157)) begin
		main_preheaderi_504_reg <= main_preheaderi_504;
		if (start == 1'b0 && ^(main_preheaderi_504) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_504_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %505 = ashr i32 %503, 14*/
		main_preheaderi_505 = ($signed(main_preheaderi_503) >>> 32'd14);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %505 = ashr i32 %503, 14*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_157)) begin
		main_preheaderi_505_reg <= main_preheaderi_505;
		if (start == 1'b0 && ^(main_preheaderi_505) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_505_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %gep_int55 = ptrtoint [100 x i32]* @result to i32*/
if (reset) begin main_preheaderi_gep_int55 = 0; end
		main_preheaderi_gep_int55 = 0;
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %gep_int55 = ptrtoint [100 x i32]* @result to i32*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_101)) begin
		main_preheaderi_gep_int55_reg <= main_preheaderi_gep_int55;
		if (start == 1'b0 && ^(main_preheaderi_gep_int55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_gep_int55_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %gep_array56 = mul i32 %i.11.i, 4*/
		main_preheaderi_gep_array56 = (main_preheaderi_i11i_reg * 32'd4);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %gep_array56 = mul i32 %i.11.i, 4*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_101)) begin
		main_preheaderi_gep_array56_reg <= main_preheaderi_gep_array56;
		if (start == 1'b0 && ^(main_preheaderi_gep_array56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_gep_array56_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %gep57 = add i32 %gep_int55, %gep_array56*/
		main_preheaderi_gep57 = main_signed_add_32_2;
end
always @(*) begin
/* main: %.preheader.i*/
/*   %gep57 = add i32 %gep_int55, %gep_array56*/
	main_preheaderi_gep57_reg = main_preheaderi_315_reg;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %506 = inttoptr i32 %gep57 to i32**/
		main_preheaderi_506 = main_preheaderi_gep57;
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %506 = inttoptr i32 %gep57 to i32**/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_102)) begin
		main_preheaderi_506_reg <= main_preheaderi_506;
		if (start == 1'b0 && ^(main_preheaderi_506) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_506_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %507 = or i32 %i.11.i, 1*/
		main_preheaderi_507 = (main_preheaderi_i11i_reg | 32'd1);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %507 = or i32 %i.11.i, 1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_101)) begin
		main_preheaderi_507_reg <= main_preheaderi_507;
		if (start == 1'b0 && ^(main_preheaderi_507) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_507_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %gep_int58 = ptrtoint [100 x i32]* @result to i32*/
if (reset) begin main_preheaderi_gep_int58 = 0; end
		main_preheaderi_gep_int58 = 0;
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %gep_int58 = ptrtoint [100 x i32]* @result to i32*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_101)) begin
		main_preheaderi_gep_int58_reg <= main_preheaderi_gep_int58;
		if (start == 1'b0 && ^(main_preheaderi_gep_int58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_gep_int58_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %gep_array59 = mul i32 %507, 4*/
		main_preheaderi_gep_array59 = (main_preheaderi_507 * 32'd4);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %gep_array59 = mul i32 %507, 4*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_101)) begin
		main_preheaderi_gep_array59_reg <= main_preheaderi_gep_array59;
		if (start == 1'b0 && ^(main_preheaderi_gep_array59) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_gep_array59_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %gep60 = add i32 %gep_int58, %gep_array59*/
		main_preheaderi_gep60 = main_signed_add_32_8;
end
always @(*) begin
/* main: %.preheader.i*/
/*   %gep60 = add i32 %gep_int58, %gep_array59*/
	main_preheaderi_gep60_reg = main_preheaderi_323_reg;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %508 = inttoptr i32 %gep60 to i32**/
		main_preheaderi_508 = main_preheaderi_gep60;
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %508 = inttoptr i32 %gep60 to i32**/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_102)) begin
		main_preheaderi_508_reg <= main_preheaderi_508;
		if (start == 1'b0 && ^(main_preheaderi_508) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_508_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %509 = add nsw i32 %i.11.i, 2*/
		main_preheaderi_509 = main_signed_add_32_0;
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %509 = add nsw i32 %i.11.i, 2*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_101)) begin
		main_preheaderi_509_reg <= main_preheaderi_509;
		if (start == 1'b0 && ^(main_preheaderi_509) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_509_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %510 = icmp slt i32 %509, 100*/
		main_preheaderi_510 = ($signed(main_preheaderi_509) < $signed(32'd100));
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %510 = icmp slt i32 %509, 100*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_101)) begin
		main_preheaderi_510_reg <= main_preheaderi_510;
		if (start == 1'b0 && ^(main_preheaderi_510) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_510_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %adpcm_main.exit*/
	/*   %main_result.04 = phi i32 [ %.main_result.0, %adpcm_main.exit ], [ 0, %.preheader.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_preheaderi_159) & (memory_controller_waitrequest == 0)) & (main_preheaderi_510_reg == 0))) begin
		main_adpcm_mainexit_main_result04 = 32'd0;
	end
	/* main: %adpcm_main.exit*/
	/*   %main_result.04 = phi i32 [ %.main_result.0, %adpcm_main.exit ], [ 0, %.preheader.i ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_adpcm_mainexit_162) & (memory_controller_waitrequest == 0)) & (main_adpcm_mainexit_exitcond5_reg == 0))) */ begin
		main_adpcm_mainexit_main_result04 = main_adpcm_mainexit_main_result0;
	end
end
always @(posedge clk) begin
	/* main: %adpcm_main.exit*/
	/*   %main_result.04 = phi i32 [ %.main_result.0, %adpcm_main.exit ], [ 0, %.preheader.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_preheaderi_159) & (memory_controller_waitrequest == 0)) & (main_preheaderi_510_reg == 0))) begin
		main_adpcm_mainexit_main_result04_reg <= main_adpcm_mainexit_main_result04;
		if (start == 1'b0 && ^(main_adpcm_mainexit_main_result04) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_adpcm_mainexit_main_result04_reg"); $finish; end
	end
	/* main: %adpcm_main.exit*/
	/*   %main_result.04 = phi i32 [ %.main_result.0, %adpcm_main.exit ], [ 0, %.preheader.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_adpcm_mainexit_162) & (memory_controller_waitrequest == 0)) & (main_adpcm_mainexit_exitcond5_reg == 0))) begin
		main_adpcm_mainexit_main_result04_reg <= main_adpcm_mainexit_main_result04;
		if (start == 1'b0 && ^(main_adpcm_mainexit_main_result04) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_adpcm_mainexit_main_result04_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %adpcm_main.exit*/
	/*   %i.03 = phi i32 [ %517, %adpcm_main.exit ], [ 0, %.preheader.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_preheaderi_159) & (memory_controller_waitrequest == 0)) & (main_preheaderi_510_reg == 0))) begin
		main_adpcm_mainexit_i03 = 32'd0;
	end
	/* main: %adpcm_main.exit*/
	/*   %i.03 = phi i32 [ %517, %adpcm_main.exit ], [ 0, %.preheader.i ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_adpcm_mainexit_162) & (memory_controller_waitrequest == 0)) & (main_adpcm_mainexit_exitcond5_reg == 0))) */ begin
		main_adpcm_mainexit_i03 = main_adpcm_mainexit_517_reg;
	end
end
always @(posedge clk) begin
	/* main: %adpcm_main.exit*/
	/*   %i.03 = phi i32 [ %517, %adpcm_main.exit ], [ 0, %.preheader.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_preheaderi_159) & (memory_controller_waitrequest == 0)) & (main_preheaderi_510_reg == 0))) begin
		main_adpcm_mainexit_i03_reg <= main_adpcm_mainexit_i03;
		if (start == 1'b0 && ^(main_adpcm_mainexit_i03) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_adpcm_mainexit_i03_reg"); $finish; end
	end
	/* main: %adpcm_main.exit*/
	/*   %i.03 = phi i32 [ %517, %adpcm_main.exit ], [ 0, %.preheader.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_adpcm_mainexit_162) & (memory_controller_waitrequest == 0)) & (main_adpcm_mainexit_exitcond5_reg == 0))) begin
		main_adpcm_mainexit_i03_reg <= main_adpcm_mainexit_i03;
		if (start == 1'b0 && ^(main_adpcm_mainexit_i03) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_adpcm_mainexit_i03_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %adpcm_main.exit*/
	/*   %gep_int61 = ptrtoint [100 x i32]* @compressed to i32*/
if (reset) begin main_adpcm_mainexit_gep_int61 = 0; end
		main_adpcm_mainexit_gep_int61 = 0;
end
always @(posedge clk) begin
	/* main: %adpcm_main.exit*/
	/*   %gep_int61 = ptrtoint [100 x i32]* @compressed to i32*/
	if ((cur_state == LEGUP_F_main_BB_adpcm_mainexit_160)) begin
		main_adpcm_mainexit_gep_int61_reg <= main_adpcm_mainexit_gep_int61;
		if (start == 1'b0 && ^(main_adpcm_mainexit_gep_int61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_adpcm_mainexit_gep_int61_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %adpcm_main.exit*/
	/*   %gep_array62 = mul i32 %i.03, 4*/
		main_adpcm_mainexit_gep_array62 = (main_adpcm_mainexit_i03_reg * 32'd4);
end
always @(posedge clk) begin
	/* main: %adpcm_main.exit*/
	/*   %gep_array62 = mul i32 %i.03, 4*/
	if ((cur_state == LEGUP_F_main_BB_adpcm_mainexit_160)) begin
		main_adpcm_mainexit_gep_array62_reg <= main_adpcm_mainexit_gep_array62;
		if (start == 1'b0 && ^(main_adpcm_mainexit_gep_array62) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_adpcm_mainexit_gep_array62_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %adpcm_main.exit*/
	/*   %gep63 = add i32 %gep_int61, %gep_array62*/
		main_adpcm_mainexit_gep63 = main_signed_add_32_0;
end
always @(*) begin
/* main: %adpcm_main.exit*/
/*   %gep63 = add i32 %gep_int61, %gep_array62*/
	main_adpcm_mainexit_gep63_reg = main_1_90_reg;
end
always @(*) begin
	/* main: %adpcm_main.exit*/
	/*   %511 = inttoptr i32 %gep63 to i32**/
		main_adpcm_mainexit_511 = main_adpcm_mainexit_gep63;
end
always @(posedge clk) begin
	/* main: %adpcm_main.exit*/
	/*   %511 = inttoptr i32 %gep63 to i32**/
	if ((cur_state == LEGUP_F_main_BB_adpcm_mainexit_161)) begin
		main_adpcm_mainexit_511_reg <= main_adpcm_mainexit_511;
		if (start == 1'b0 && ^(main_adpcm_mainexit_511) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_adpcm_mainexit_511_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %adpcm_main.exit*/
	/*   %512 = load i32* %511, align 4, !tbaa !1*/
		main_adpcm_mainexit_512 = compressed_out_a;
end
always @(posedge clk) begin
	/* main: %adpcm_main.exit*/
	/*   %512 = load i32* %511, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_adpcm_mainexit_162)) begin
		main_adpcm_mainexit_512_reg <= main_adpcm_mainexit_512;
		if (start == 1'b0 && ^(main_adpcm_mainexit_512) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_adpcm_mainexit_512_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %adpcm_main.exit*/
	/*   %gep_int64 = ptrtoint [100 x i32]* @test_compressed to i32*/
if (reset) begin main_adpcm_mainexit_gep_int64 = 0; end
		main_adpcm_mainexit_gep_int64 = 0;
end
always @(posedge clk) begin
	/* main: %adpcm_main.exit*/
	/*   %gep_int64 = ptrtoint [100 x i32]* @test_compressed to i32*/
	if ((cur_state == LEGUP_F_main_BB_adpcm_mainexit_160)) begin
		main_adpcm_mainexit_gep_int64_reg <= main_adpcm_mainexit_gep_int64;
		if (start == 1'b0 && ^(main_adpcm_mainexit_gep_int64) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_adpcm_mainexit_gep_int64_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %adpcm_main.exit*/
	/*   %gep_array65 = mul i32 %i.03, 4*/
		main_adpcm_mainexit_gep_array65 = (main_adpcm_mainexit_i03_reg * 32'd4);
end
always @(posedge clk) begin
	/* main: %adpcm_main.exit*/
	/*   %gep_array65 = mul i32 %i.03, 4*/
	if ((cur_state == LEGUP_F_main_BB_adpcm_mainexit_160)) begin
		main_adpcm_mainexit_gep_array65_reg <= main_adpcm_mainexit_gep_array65;
		if (start == 1'b0 && ^(main_adpcm_mainexit_gep_array65) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_adpcm_mainexit_gep_array65_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %adpcm_main.exit*/
	/*   %gep66 = add i32 %gep_int64, %gep_array65*/
		main_adpcm_mainexit_gep66 = main_signed_add_32_1;
end
always @(*) begin
/* main: %adpcm_main.exit*/
/*   %gep66 = add i32 %gep_int64, %gep_array65*/
	main_adpcm_mainexit_gep66_reg = main_1_88_reg;
end
always @(*) begin
	/* main: %adpcm_main.exit*/
	/*   %513 = inttoptr i32 %gep66 to i32**/
		main_adpcm_mainexit_513 = main_adpcm_mainexit_gep66;
end
always @(posedge clk) begin
	/* main: %adpcm_main.exit*/
	/*   %513 = inttoptr i32 %gep66 to i32**/
	if ((cur_state == LEGUP_F_main_BB_adpcm_mainexit_161)) begin
		main_adpcm_mainexit_513_reg <= main_adpcm_mainexit_513;
		if (start == 1'b0 && ^(main_adpcm_mainexit_513) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_adpcm_mainexit_513_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %adpcm_main.exit*/
	/*   %514 = load i32* %513, align 4, !tbaa !1*/
		main_adpcm_mainexit_514 = test_compressed_out_a;
end
always @(posedge clk) begin
	/* main: %adpcm_main.exit*/
	/*   %514 = load i32* %513, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_adpcm_mainexit_162)) begin
		main_adpcm_mainexit_514_reg <= main_adpcm_mainexit_514;
		if (start == 1'b0 && ^(main_adpcm_mainexit_514) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_adpcm_mainexit_514_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %adpcm_main.exit*/
	/*   %515 = icmp eq i32 %512, %514*/
		main_adpcm_mainexit_515 = (main_adpcm_mainexit_512 == main_adpcm_mainexit_514);
end
always @(posedge clk) begin
	/* main: %adpcm_main.exit*/
	/*   %515 = icmp eq i32 %512, %514*/
	if ((cur_state == LEGUP_F_main_BB_adpcm_mainexit_162)) begin
		main_adpcm_mainexit_515_reg <= main_adpcm_mainexit_515;
		if (start == 1'b0 && ^(main_adpcm_mainexit_515) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_adpcm_mainexit_515_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %adpcm_main.exit*/
	/*   %516 = zext i1 %515 to i32*/
		main_adpcm_mainexit_516 = main_adpcm_mainexit_515;
end
always @(posedge clk) begin
	/* main: %adpcm_main.exit*/
	/*   %516 = zext i1 %515 to i32*/
	if ((cur_state == LEGUP_F_main_BB_adpcm_mainexit_162)) begin
		main_adpcm_mainexit_516_reg <= main_adpcm_mainexit_516;
		if (start == 1'b0 && ^(main_adpcm_mainexit_516) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_adpcm_mainexit_516_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %adpcm_main.exit*/
	/*   %.main_result.0 = add nsw i32 %516, %main_result.04*/
		main_adpcm_mainexit_main_result0 = main_signed_add_32_0;
end
always @(posedge clk) begin
	/* main: %adpcm_main.exit*/
	/*   %.main_result.0 = add nsw i32 %516, %main_result.04*/
	if ((cur_state == LEGUP_F_main_BB_adpcm_mainexit_162)) begin
		main_adpcm_mainexit_main_result0_reg <= main_adpcm_mainexit_main_result0;
		if (start == 1'b0 && ^(main_adpcm_mainexit_main_result0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_adpcm_mainexit_main_result0_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %adpcm_main.exit*/
	/*   %517 = add nsw i32 %i.03, 1*/
		main_adpcm_mainexit_517 = main_signed_add_32_0;
end
always @(posedge clk) begin
	/* main: %adpcm_main.exit*/
	/*   %517 = add nsw i32 %i.03, 1*/
	if ((cur_state == LEGUP_F_main_BB_adpcm_mainexit_160)) begin
		main_adpcm_mainexit_517_reg <= main_adpcm_mainexit_517;
		if (start == 1'b0 && ^(main_adpcm_mainexit_517) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_adpcm_mainexit_517_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %adpcm_main.exit*/
	/*   %exitcond5 = icmp eq i32 %517, 50*/
		main_adpcm_mainexit_exitcond5 = (main_adpcm_mainexit_517 == 32'd50);
end
always @(posedge clk) begin
	/* main: %adpcm_main.exit*/
	/*   %exitcond5 = icmp eq i32 %517, 50*/
	if ((cur_state == LEGUP_F_main_BB_adpcm_mainexit_160)) begin
		main_adpcm_mainexit_exitcond5_reg <= main_adpcm_mainexit_exitcond5;
		if (start == 1'b0 && ^(main_adpcm_mainexit_exitcond5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_adpcm_mainexit_exitcond5_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader*/
	/*   %main_result.22 = phi i32 [ %.main_result.2, %.preheader ], [ %.main_result.0, %adpcm_main.exit ]*/
	if ((((cur_state == LEGUP_F_main_BB_adpcm_mainexit_162) & (memory_controller_waitrequest == 0)) & (main_adpcm_mainexit_exitcond5_reg == 1'd1))) begin
		main_preheader_main_result22 = main_adpcm_mainexit_main_result0;
	end
	/* main: %.preheader*/
	/*   %main_result.22 = phi i32 [ %.main_result.2, %.preheader ], [ %.main_result.0, %adpcm_main.exit ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_preheader_165) & (memory_controller_waitrequest == 0)) & (main_preheader_exitcond_reg == 0))) */ begin
		main_preheader_main_result22 = main_preheader_main_result2;
	end
end
always @(posedge clk) begin
	/* main: %.preheader*/
	/*   %main_result.22 = phi i32 [ %.main_result.2, %.preheader ], [ %.main_result.0, %adpcm_main.exit ]*/
	if ((((cur_state == LEGUP_F_main_BB_adpcm_mainexit_162) & (memory_controller_waitrequest == 0)) & (main_adpcm_mainexit_exitcond5_reg == 1'd1))) begin
		main_preheader_main_result22_reg <= main_preheader_main_result22;
		if (start == 1'b0 && ^(main_preheader_main_result22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader_main_result22_reg"); $finish; end
	end
	/* main: %.preheader*/
	/*   %main_result.22 = phi i32 [ %.main_result.2, %.preheader ], [ %.main_result.0, %adpcm_main.exit ]*/
	if ((((cur_state == LEGUP_F_main_BB_preheader_165) & (memory_controller_waitrequest == 0)) & (main_preheader_exitcond_reg == 0))) begin
		main_preheader_main_result22_reg <= main_preheader_main_result22;
		if (start == 1'b0 && ^(main_preheader_main_result22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader_main_result22_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader*/
	/*   %i.11 = phi i32 [ %524, %.preheader ], [ 0, %adpcm_main.exit ]*/
	if ((((cur_state == LEGUP_F_main_BB_adpcm_mainexit_162) & (memory_controller_waitrequest == 0)) & (main_adpcm_mainexit_exitcond5_reg == 1'd1))) begin
		main_preheader_i11 = 32'd0;
	end
	/* main: %.preheader*/
	/*   %i.11 = phi i32 [ %524, %.preheader ], [ 0, %adpcm_main.exit ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_preheader_165) & (memory_controller_waitrequest == 0)) & (main_preheader_exitcond_reg == 0))) */ begin
		main_preheader_i11 = main_preheader_524_reg;
	end
end
always @(posedge clk) begin
	/* main: %.preheader*/
	/*   %i.11 = phi i32 [ %524, %.preheader ], [ 0, %adpcm_main.exit ]*/
	if ((((cur_state == LEGUP_F_main_BB_adpcm_mainexit_162) & (memory_controller_waitrequest == 0)) & (main_adpcm_mainexit_exitcond5_reg == 1'd1))) begin
		main_preheader_i11_reg <= main_preheader_i11;
		if (start == 1'b0 && ^(main_preheader_i11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader_i11_reg"); $finish; end
	end
	/* main: %.preheader*/
	/*   %i.11 = phi i32 [ %524, %.preheader ], [ 0, %adpcm_main.exit ]*/
	if ((((cur_state == LEGUP_F_main_BB_preheader_165) & (memory_controller_waitrequest == 0)) & (main_preheader_exitcond_reg == 0))) begin
		main_preheader_i11_reg <= main_preheader_i11;
		if (start == 1'b0 && ^(main_preheader_i11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader_i11_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader*/
	/*   %gep_int67 = ptrtoint [100 x i32]* @result to i32*/
if (reset) begin main_preheader_gep_int67 = 0; end
		main_preheader_gep_int67 = 0;
end
always @(posedge clk) begin
	/* main: %.preheader*/
	/*   %gep_int67 = ptrtoint [100 x i32]* @result to i32*/
	if ((cur_state == LEGUP_F_main_BB_preheader_163)) begin
		main_preheader_gep_int67_reg <= main_preheader_gep_int67;
		if (start == 1'b0 && ^(main_preheader_gep_int67) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader_gep_int67_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader*/
	/*   %gep_array68 = mul i32 %i.11, 4*/
		main_preheader_gep_array68 = (main_preheader_i11_reg * 32'd4);
end
always @(posedge clk) begin
	/* main: %.preheader*/
	/*   %gep_array68 = mul i32 %i.11, 4*/
	if ((cur_state == LEGUP_F_main_BB_preheader_163)) begin
		main_preheader_gep_array68_reg <= main_preheader_gep_array68;
		if (start == 1'b0 && ^(main_preheader_gep_array68) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader_gep_array68_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader*/
	/*   %gep69 = add i32 %gep_int67, %gep_array68*/
		main_preheader_gep69 = main_signed_add_32_0;
end
always @(*) begin
/* main: %.preheader*/
/*   %gep69 = add i32 %gep_int67, %gep_array68*/
	main_preheader_gep69_reg = main_1_90_reg;
end
always @(*) begin
	/* main: %.preheader*/
	/*   %518 = inttoptr i32 %gep69 to i32**/
		main_preheader_518 = main_preheader_gep69;
end
always @(posedge clk) begin
	/* main: %.preheader*/
	/*   %518 = inttoptr i32 %gep69 to i32**/
	if ((cur_state == LEGUP_F_main_BB_preheader_164)) begin
		main_preheader_518_reg <= main_preheader_518;
		if (start == 1'b0 && ^(main_preheader_518) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader_518_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader*/
	/*   %519 = load i32* %518, align 4, !tbaa !1*/
		main_preheader_519 = result_out_a;
end
always @(posedge clk) begin
	/* main: %.preheader*/
	/*   %519 = load i32* %518, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader_165)) begin
		main_preheader_519_reg <= main_preheader_519;
		if (start == 1'b0 && ^(main_preheader_519) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader_519_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader*/
	/*   %gep_int70 = ptrtoint [100 x i32]* @test_result to i32*/
if (reset) begin main_preheader_gep_int70 = 0; end
		main_preheader_gep_int70 = 0;
end
always @(posedge clk) begin
	/* main: %.preheader*/
	/*   %gep_int70 = ptrtoint [100 x i32]* @test_result to i32*/
	if ((cur_state == LEGUP_F_main_BB_preheader_163)) begin
		main_preheader_gep_int70_reg <= main_preheader_gep_int70;
		if (start == 1'b0 && ^(main_preheader_gep_int70) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader_gep_int70_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader*/
	/*   %gep_array71 = mul i32 %i.11, 4*/
		main_preheader_gep_array71 = (main_preheader_i11_reg * 32'd4);
end
always @(posedge clk) begin
	/* main: %.preheader*/
	/*   %gep_array71 = mul i32 %i.11, 4*/
	if ((cur_state == LEGUP_F_main_BB_preheader_163)) begin
		main_preheader_gep_array71_reg <= main_preheader_gep_array71;
		if (start == 1'b0 && ^(main_preheader_gep_array71) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader_gep_array71_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader*/
	/*   %gep72 = add i32 %gep_int70, %gep_array71*/
		main_preheader_gep72 = main_signed_add_32_1;
end
always @(*) begin
/* main: %.preheader*/
/*   %gep72 = add i32 %gep_int70, %gep_array71*/
	main_preheader_gep72_reg = main_1_88_reg;
end
always @(*) begin
	/* main: %.preheader*/
	/*   %520 = inttoptr i32 %gep72 to i32**/
		main_preheader_520 = main_preheader_gep72;
end
always @(posedge clk) begin
	/* main: %.preheader*/
	/*   %520 = inttoptr i32 %gep72 to i32**/
	if ((cur_state == LEGUP_F_main_BB_preheader_164)) begin
		main_preheader_520_reg <= main_preheader_520;
		if (start == 1'b0 && ^(main_preheader_520) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader_520_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader*/
	/*   %521 = load i32* %520, align 4, !tbaa !1*/
		main_preheader_521 = test_result_out_a;
end
always @(posedge clk) begin
	/* main: %.preheader*/
	/*   %521 = load i32* %520, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader_165)) begin
		main_preheader_521_reg <= main_preheader_521;
		if (start == 1'b0 && ^(main_preheader_521) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader_521_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader*/
	/*   %522 = icmp eq i32 %519, %521*/
		main_preheader_522 = (main_preheader_519 == main_preheader_521);
end
always @(posedge clk) begin
	/* main: %.preheader*/
	/*   %522 = icmp eq i32 %519, %521*/
	if ((cur_state == LEGUP_F_main_BB_preheader_165)) begin
		main_preheader_522_reg <= main_preheader_522;
		if (start == 1'b0 && ^(main_preheader_522) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader_522_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader*/
	/*   %523 = zext i1 %522 to i32*/
		main_preheader_523 = main_preheader_522;
end
always @(posedge clk) begin
	/* main: %.preheader*/
	/*   %523 = zext i1 %522 to i32*/
	if ((cur_state == LEGUP_F_main_BB_preheader_165)) begin
		main_preheader_523_reg <= main_preheader_523;
		if (start == 1'b0 && ^(main_preheader_523) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader_523_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader*/
	/*   %.main_result.2 = add nsw i32 %523, %main_result.22*/
		main_preheader_main_result2 = main_signed_add_32_0;
end
always @(*) begin
/* main: %.preheader*/
/*   %.main_result.2 = add nsw i32 %523, %main_result.22*/
	main_preheader_main_result2_reg = main_98_gep6_reg;
end
always @(*) begin
	/* main: %.preheader*/
	/*   %524 = add nsw i32 %i.11, 1*/
		main_preheader_524 = main_signed_add_32_0;
end
always @(*) begin
/* main: %.preheader*/
/*   %524 = add nsw i32 %i.11, 1*/
	main_preheader_524_reg = main_98_104_reg;
end
always @(*) begin
	/* main: %.preheader*/
	/*   %exitcond = icmp eq i32 %524, 100*/
		main_preheader_exitcond = (main_preheader_524 == 32'd100);
end
always @(posedge clk) begin
	/* main: %.preheader*/
	/*   %exitcond = icmp eq i32 %524, 100*/
	if ((cur_state == LEGUP_F_main_BB_preheader_163)) begin
		main_preheader_exitcond_reg <= main_preheader_exitcond;
		if (start == 1'b0 && ^(main_preheader_exitcond) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader_exitcond_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %525*/
	/*   %.main_result.2.lcssa = phi i32 [ %.main_result.2, %.preheader ]*/
		main_525_main_result2lcssa = main_preheader_main_result2;
end
always @(posedge clk) begin
	/* main: %525*/
	/*   %.main_result.2.lcssa = phi i32 [ %.main_result.2, %.preheader ]*/
	if ((((cur_state == LEGUP_F_main_BB_preheader_165) & (memory_controller_waitrequest == 0)) & (main_preheader_exitcond_reg == 1'd1))) begin
		main_525_main_result2lcssa_reg <= main_525_main_result2lcssa;
		if (start == 1'b0 && ^(main_525_main_result2lcssa) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_525_main_result2lcssa_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %525*/
	/*   %527 = icmp eq i32 %.main_result.2.lcssa, 150*/
		main_525_527 = (main_525_main_result2lcssa_reg == 32'd150);
end
always @(posedge clk) begin
	/* main: %525*/
	/*   %527 = icmp eq i32 %.main_result.2.lcssa, 150*/
	if ((cur_state == LEGUP_F_main_BB__525_166)) begin
		main_525_527_reg <= main_525_527;
		if (start == 1'b0 && ^(main_525_527) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_525_527_reg"); $finish; end
	end
end
always @(*) begin
	qq4_code4_table_address_a = 0;
	/* main: %quantl.exit.i*/
	/*   %107 = load i32* %106, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_52)) begin
		qq4_code4_table_address_a = (main_quantlexiti_106 >>> 3'd2);
	end
	/* main: %.preheader.i*/
	/*   %318 = load i32* %317, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_136)) begin
		qq4_code4_table_address_a = (main_preheaderi_317 >>> 3'd2);
	end
end
always @(*) begin
	qq4_code4_table_write_enable_a = 0;
	/* main: %quantl.exit.i*/
	/*   %107 = load i32* %106, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_52)) begin
		qq4_code4_table_write_enable_a = 0;
	end
	/* main: %.preheader.i*/
	/*   %318 = load i32* %317, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_136)) begin
		qq4_code4_table_write_enable_a = 0;
	end
end
always @(*) begin
	qq6_code6_table_address_a = 0;
	/* main: %.preheader.i.preheader*/
	/*   %262 = load i32* %261, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderipreheader_99)) begin
		qq6_code6_table_address_a = (main_preheaderipreheader_261 >>> 3'd2);
	end
end
always @(*) begin
	qq6_code6_table_write_enable_a = 0;
	/* main: %.preheader.i.preheader*/
	/*   %262 = load i32* %261, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderipreheader_99)) begin
		qq6_code6_table_write_enable_a = 0;
	end
end
always @(*) begin
	wl_code_table_address_a = 0;
	/* main: %quantl.exit.i*/
	/*   %113 = load i32* %112, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_52)) begin
		wl_code_table_address_a = (main_quantlexiti_112 >>> 3'd2);
	end
	/* main: %.preheader.i*/
	/*   %327 = load i32* %326, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_136)) begin
		wl_code_table_address_a = (main_preheaderi_326 >>> 3'd2);
	end
end
always @(*) begin
	wl_code_table_write_enable_a = 0;
	/* main: %quantl.exit.i*/
	/*   %113 = load i32* %112, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_52)) begin
		wl_code_table_write_enable_a = 0;
	end
	/* main: %.preheader.i*/
	/*   %327 = load i32* %326, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_136)) begin
		wl_code_table_write_enable_a = 0;
	end
end
always @(*) begin
	ilb_table_address_a = 0;
	/* main: %quantl.exit.i*/
	/*   %121 = load i32* %120, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_55)) begin
		ilb_table_address_a = (main_quantlexiti_120 >>> 3'd2);
	end
	/* main: %quantl.exit.i*/
	/*   %226 = load i32* %225, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_76)) begin
		ilb_table_address_a = (main_quantlexiti_225 >>> 3'd2);
	end
	/* main: %.preheader.i*/
	/*   %335 = load i32* %334, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_139)) begin
		ilb_table_address_a = (main_preheaderi_334 >>> 3'd2);
	end
	/* main: %.preheader.i*/
	/*   %427 = load i32* %426, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_145)) begin
		ilb_table_address_a = (main_preheaderi_426 >>> 3'd2);
	end
end
always @(*) begin
	ilb_table_write_enable_a = 0;
	/* main: %quantl.exit.i*/
	/*   %121 = load i32* %120, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_55)) begin
		ilb_table_write_enable_a = 0;
	end
	/* main: %quantl.exit.i*/
	/*   %226 = load i32* %225, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_76)) begin
		ilb_table_write_enable_a = 0;
	end
	/* main: %.preheader.i*/
	/*   %335 = load i32* %334, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_139)) begin
		ilb_table_write_enable_a = 0;
	end
	/* main: %.preheader.i*/
	/*   %427 = load i32* %426, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_145)) begin
		ilb_table_write_enable_a = 0;
	end
end
always @(*) begin
	decis_levl_address_a = 0;
	/* main: %98*/
	/*   %100 = load i32* %99, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__98_45)) begin
		decis_levl_address_a = (main_98_99 >>> 3'd2);
	end
end
always @(*) begin
	decis_levl_write_enable_a = 0;
	/* main: %98*/
	/*   %100 = load i32* %99, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__98_45)) begin
		decis_levl_write_enable_a = 0;
	end
end
always @(*) begin
	qq2_code2_table_address_a = 0;
	/* main: %quantl.exit.i*/
	/*   %212 = load i32* %211, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_73)) begin
		qq2_code2_table_address_a = (main_quantlexiti_211 >>> 3'd2);
	end
	/* main: %.preheader.i*/
	/*   %413 = load i32* %412, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_142)) begin
		qq2_code2_table_address_a = (main_preheaderi_412_reg >>> 3'd2);
	end
end
always @(*) begin
	qq2_code2_table_write_enable_a = 0;
	/* main: %quantl.exit.i*/
	/*   %212 = load i32* %211, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_73)) begin
		qq2_code2_table_write_enable_a = 0;
	end
	/* main: %.preheader.i*/
	/*   %413 = load i32* %412, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_142)) begin
		qq2_code2_table_write_enable_a = 0;
	end
end
always @(*) begin
	wh_code_table_address_a = 0;
	/* main: %quantl.exit.i*/
	/*   %218 = load i32* %217, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_73)) begin
		wh_code_table_address_a = (main_quantlexiti_217 >>> 3'd2);
	end
	/* main: %.preheader.i*/
	/*   %419 = load i32* %418, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_142)) begin
		wh_code_table_address_a = (main_preheaderi_418_reg >>> 3'd2);
	end
end
always @(*) begin
	wh_code_table_write_enable_a = 0;
	/* main: %quantl.exit.i*/
	/*   %218 = load i32* %217, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_73)) begin
		wh_code_table_write_enable_a = 0;
	end
	/* main: %.preheader.i*/
	/*   %419 = load i32* %418, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_142)) begin
		wh_code_table_write_enable_a = 0;
	end
end
always @(*) begin
	tqmf_address_a = 0;
	/* main: %1*/
	/*   store i32 %33, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 23), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_30)) begin
		tqmf_address_a = ((0 | (4 * 32'd23)) >>> 3'd2);
	end
	/* main: %1*/
	/*   store i32 %31, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 21), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_31)) begin
		tqmf_address_a = ((0 | (4 * 32'd21)) >>> 3'd2);
	end
	/* main: %1*/
	/*   store i32 %29, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 19), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_32)) begin
		tqmf_address_a = ((0 | (4 * 32'd19)) >>> 3'd2);
	end
	/* main: %1*/
	/*   store i32 %27, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 17), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_33)) begin
		tqmf_address_a = ((0 | (4 * 32'd17)) >>> 3'd2);
	end
	/* main: %1*/
	/*   store i32 %25, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 15), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_34)) begin
		tqmf_address_a = ((0 | (4 * 32'd15)) >>> 3'd2);
	end
	/* main: %1*/
	/*   store i32 %23, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 13), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_35)) begin
		tqmf_address_a = ((0 | (4 * 32'd13)) >>> 3'd2);
	end
	/* main: %1*/
	/*   store i32 %21, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 11), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_36)) begin
		tqmf_address_a = ((0 | (4 * 32'd11)) >>> 3'd2);
	end
	/* main: %1*/
	/*   store i32 %19, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 9), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_37)) begin
		tqmf_address_a = ((0 | (4 * 32'd9)) >>> 3'd2);
	end
	/* main: %1*/
	/*   store i32 %17, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_38)) begin
		tqmf_address_a = ((0 | (4 * 32'd7)) >>> 3'd2);
	end
	/* main: %1*/
	/*   store i32 %15, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_39)) begin
		tqmf_address_a = ((0 | (4 * 32'd5)) >>> 3'd2);
	end
	/* main: %1*/
	/*   store i32 %14, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_40)) begin
		tqmf_address_a = ((0 | (4 * 32'd3)) >>> 3'd2);
	end
	/* main: %1*/
	/*   store i32 %38, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_41)) begin
		tqmf_address_a = ((0 | (4 * 32'd1)) >>> 3'd2);
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_85)) begin
		tqmf_address_a = ((0 | (4 * 32'd2)) >>> 3'd2);
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre17 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 22), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_86)) begin
		tqmf_address_a = ((0 | (4 * 32'd22)) >>> 3'd2);
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre19 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 23), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_87)) begin
		tqmf_address_a = ((0 | (4 * 32'd23)) >>> 3'd2);
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre21 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 18), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_88)) begin
		tqmf_address_a = ((0 | (4 * 32'd18)) >>> 3'd2);
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre23 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 16), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_89)) begin
		tqmf_address_a = ((0 | (4 * 32'd16)) >>> 3'd2);
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre25 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 14), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_90)) begin
		tqmf_address_a = ((0 | (4 * 32'd14)) >>> 3'd2);
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre27 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 12), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_91)) begin
		tqmf_address_a = ((0 | (4 * 32'd12)) >>> 3'd2);
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre29 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 10), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_92)) begin
		tqmf_address_a = ((0 | (4 * 32'd10)) >>> 3'd2);
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre31 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 8), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_93)) begin
		tqmf_address_a = ((0 | (4 * 32'd8)) >>> 3'd2);
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre33 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 6), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_94)) begin
		tqmf_address_a = ((0 | (4 * 32'd6)) >>> 3'd2);
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre35 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_95)) begin
		tqmf_address_a = ((0 | (4 * 32'd4)) >>> 3'd2);
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre37 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_96)) begin
		tqmf_address_a = ((0 | (4 * 32'd1)) >>> 3'd2);
	end
end
always @(*) begin
	tqmf_write_enable_a = 0;
	/* main: %1*/
	/*   store i32 %33, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 23), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_30)) begin
		tqmf_write_enable_a = 1'd1;
	end
	/* main: %1*/
	/*   store i32 %31, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 21), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_31)) begin
		tqmf_write_enable_a = 1'd1;
	end
	/* main: %1*/
	/*   store i32 %29, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 19), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_32)) begin
		tqmf_write_enable_a = 1'd1;
	end
	/* main: %1*/
	/*   store i32 %27, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 17), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_33)) begin
		tqmf_write_enable_a = 1'd1;
	end
	/* main: %1*/
	/*   store i32 %25, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 15), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_34)) begin
		tqmf_write_enable_a = 1'd1;
	end
	/* main: %1*/
	/*   store i32 %23, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 13), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_35)) begin
		tqmf_write_enable_a = 1'd1;
	end
	/* main: %1*/
	/*   store i32 %21, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 11), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_36)) begin
		tqmf_write_enable_a = 1'd1;
	end
	/* main: %1*/
	/*   store i32 %19, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 9), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_37)) begin
		tqmf_write_enable_a = 1'd1;
	end
	/* main: %1*/
	/*   store i32 %17, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_38)) begin
		tqmf_write_enable_a = 1'd1;
	end
	/* main: %1*/
	/*   store i32 %15, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_39)) begin
		tqmf_write_enable_a = 1'd1;
	end
	/* main: %1*/
	/*   store i32 %14, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_40)) begin
		tqmf_write_enable_a = 1'd1;
	end
	/* main: %1*/
	/*   store i32 %38, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_41)) begin
		tqmf_write_enable_a = 1'd1;
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_85)) begin
		tqmf_write_enable_a = 0;
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre17 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 22), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_86)) begin
		tqmf_write_enable_a = 0;
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre19 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 23), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_87)) begin
		tqmf_write_enable_a = 0;
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre21 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 18), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_88)) begin
		tqmf_write_enable_a = 0;
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre23 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 16), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_89)) begin
		tqmf_write_enable_a = 0;
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre25 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 14), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_90)) begin
		tqmf_write_enable_a = 0;
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre27 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 12), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_91)) begin
		tqmf_write_enable_a = 0;
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre29 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 10), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_92)) begin
		tqmf_write_enable_a = 0;
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre31 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 8), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_93)) begin
		tqmf_write_enable_a = 0;
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre33 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 6), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_94)) begin
		tqmf_write_enable_a = 0;
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre35 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_95)) begin
		tqmf_write_enable_a = 0;
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre37 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_96)) begin
		tqmf_write_enable_a = 0;
	end
end
always @(*) begin
	tqmf_in_a = 0;
	/* main: %1*/
	/*   store i32 %33, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 23), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_30)) begin
		tqmf_in_a = main_1_33_reg;
	end
	/* main: %1*/
	/*   store i32 %31, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 21), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_31)) begin
		tqmf_in_a = main_1_31_reg;
	end
	/* main: %1*/
	/*   store i32 %29, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 19), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_32)) begin
		tqmf_in_a = main_1_29_reg;
	end
	/* main: %1*/
	/*   store i32 %27, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 17), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_33)) begin
		tqmf_in_a = main_1_27_reg;
	end
	/* main: %1*/
	/*   store i32 %25, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 15), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_34)) begin
		tqmf_in_a = main_1_25_reg;
	end
	/* main: %1*/
	/*   store i32 %23, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 13), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_35)) begin
		tqmf_in_a = main_1_23_reg;
	end
	/* main: %1*/
	/*   store i32 %21, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 11), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_36)) begin
		tqmf_in_a = main_1_21_reg;
	end
	/* main: %1*/
	/*   store i32 %19, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 9), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_37)) begin
		tqmf_in_a = main_1_19_reg;
	end
	/* main: %1*/
	/*   store i32 %17, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_38)) begin
		tqmf_in_a = main_1_17_reg;
	end
	/* main: %1*/
	/*   store i32 %15, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_39)) begin
		tqmf_in_a = main_1_15_reg;
	end
	/* main: %1*/
	/*   store i32 %14, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_40)) begin
		tqmf_in_a = main_1_14_reg;
	end
	/* main: %1*/
	/*   store i32 %38, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_41)) begin
		tqmf_in_a = main_1_38_reg;
	end
end
always @(*) begin
	tqmf_address_b = 0;
	/* main: %1*/
	/*   store i32 %35, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 22), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_30)) begin
		tqmf_address_b = ((0 | (4 * 32'd22)) >>> 3'd2);
	end
	/* main: %1*/
	/*   store i32 %30, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 20), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_31)) begin
		tqmf_address_b = ((0 | (4 * 32'd20)) >>> 3'd2);
	end
	/* main: %1*/
	/*   store i32 %28, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 18), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_32)) begin
		tqmf_address_b = ((0 | (4 * 32'd18)) >>> 3'd2);
	end
	/* main: %1*/
	/*   store i32 %26, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 16), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_33)) begin
		tqmf_address_b = ((0 | (4 * 32'd16)) >>> 3'd2);
	end
	/* main: %1*/
	/*   store i32 %24, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 14), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_34)) begin
		tqmf_address_b = ((0 | (4 * 32'd14)) >>> 3'd2);
	end
	/* main: %1*/
	/*   store i32 %22, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 12), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_35)) begin
		tqmf_address_b = ((0 | (4 * 32'd12)) >>> 3'd2);
	end
	/* main: %1*/
	/*   store i32 %20, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 10), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_36)) begin
		tqmf_address_b = ((0 | (4 * 32'd10)) >>> 3'd2);
	end
	/* main: %1*/
	/*   store i32 %18, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 8), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_37)) begin
		tqmf_address_b = ((0 | (4 * 32'd8)) >>> 3'd2);
	end
	/* main: %1*/
	/*   store i32 %16, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 6), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_38)) begin
		tqmf_address_b = ((0 | (4 * 32'd6)) >>> 3'd2);
	end
	/* main: %1*/
	/*   store i32 %36, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_39)) begin
		tqmf_address_b = ((0 | (4 * 32'd4)) >>> 3'd2);
	end
	/* main: %1*/
	/*   store i32 %13, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_40)) begin
		tqmf_address_b = ((0 | (4 * 32'd2)) >>> 3'd2);
	end
	/* main: %1*/
	/*   store i32 %41, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_41)) begin
		tqmf_address_b = (0 >>> 3'd2);
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre16 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 20), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_85)) begin
		tqmf_address_b = ((0 | (4 * 32'd20)) >>> 3'd2);
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre18 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 21), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_86)) begin
		tqmf_address_b = ((0 | (4 * 32'd21)) >>> 3'd2);
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre20 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 19), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_87)) begin
		tqmf_address_b = ((0 | (4 * 32'd19)) >>> 3'd2);
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre22 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 17), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_88)) begin
		tqmf_address_b = ((0 | (4 * 32'd17)) >>> 3'd2);
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre24 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 15), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_89)) begin
		tqmf_address_b = ((0 | (4 * 32'd15)) >>> 3'd2);
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre26 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 13), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_90)) begin
		tqmf_address_b = ((0 | (4 * 32'd13)) >>> 3'd2);
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre28 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 11), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_91)) begin
		tqmf_address_b = ((0 | (4 * 32'd11)) >>> 3'd2);
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre30 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 9), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_92)) begin
		tqmf_address_b = ((0 | (4 * 32'd9)) >>> 3'd2);
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre32 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_93)) begin
		tqmf_address_b = ((0 | (4 * 32'd7)) >>> 3'd2);
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre34 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_94)) begin
		tqmf_address_b = ((0 | (4 * 32'd5)) >>> 3'd2);
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre36 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_95)) begin
		tqmf_address_b = ((0 | (4 * 32'd3)) >>> 3'd2);
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre38 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_96)) begin
		tqmf_address_b = (0 >>> 3'd2);
	end
end
always @(*) begin
	tqmf_write_enable_b = 0;
	/* main: %1*/
	/*   store i32 %35, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 22), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_30)) begin
		tqmf_write_enable_b = 1'd1;
	end
	/* main: %1*/
	/*   store i32 %30, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 20), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_31)) begin
		tqmf_write_enable_b = 1'd1;
	end
	/* main: %1*/
	/*   store i32 %28, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 18), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_32)) begin
		tqmf_write_enable_b = 1'd1;
	end
	/* main: %1*/
	/*   store i32 %26, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 16), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_33)) begin
		tqmf_write_enable_b = 1'd1;
	end
	/* main: %1*/
	/*   store i32 %24, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 14), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_34)) begin
		tqmf_write_enable_b = 1'd1;
	end
	/* main: %1*/
	/*   store i32 %22, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 12), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_35)) begin
		tqmf_write_enable_b = 1'd1;
	end
	/* main: %1*/
	/*   store i32 %20, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 10), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_36)) begin
		tqmf_write_enable_b = 1'd1;
	end
	/* main: %1*/
	/*   store i32 %18, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 8), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_37)) begin
		tqmf_write_enable_b = 1'd1;
	end
	/* main: %1*/
	/*   store i32 %16, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 6), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_38)) begin
		tqmf_write_enable_b = 1'd1;
	end
	/* main: %1*/
	/*   store i32 %36, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_39)) begin
		tqmf_write_enable_b = 1'd1;
	end
	/* main: %1*/
	/*   store i32 %13, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_40)) begin
		tqmf_write_enable_b = 1'd1;
	end
	/* main: %1*/
	/*   store i32 %41, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_41)) begin
		tqmf_write_enable_b = 1'd1;
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre16 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 20), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_85)) begin
		tqmf_write_enable_b = 0;
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre18 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 21), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_86)) begin
		tqmf_write_enable_b = 0;
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre20 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 19), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_87)) begin
		tqmf_write_enable_b = 0;
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre22 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 17), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_88)) begin
		tqmf_write_enable_b = 0;
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre24 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 15), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_89)) begin
		tqmf_write_enable_b = 0;
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre26 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 13), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_90)) begin
		tqmf_write_enable_b = 0;
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre28 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 11), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_91)) begin
		tqmf_write_enable_b = 0;
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre30 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 9), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_92)) begin
		tqmf_write_enable_b = 0;
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre32 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_93)) begin
		tqmf_write_enable_b = 0;
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre34 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_94)) begin
		tqmf_write_enable_b = 0;
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre36 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_95)) begin
		tqmf_write_enable_b = 0;
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre38 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_96)) begin
		tqmf_write_enable_b = 0;
	end
end
always @(*) begin
	tqmf_in_b = 0;
	/* main: %1*/
	/*   store i32 %35, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 22), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_30)) begin
		tqmf_in_b = main_1_35_reg;
	end
	/* main: %1*/
	/*   store i32 %30, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 20), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_31)) begin
		tqmf_in_b = main_1_30_reg;
	end
	/* main: %1*/
	/*   store i32 %28, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 18), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_32)) begin
		tqmf_in_b = main_1_28_reg;
	end
	/* main: %1*/
	/*   store i32 %26, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 16), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_33)) begin
		tqmf_in_b = main_1_26_reg;
	end
	/* main: %1*/
	/*   store i32 %24, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 14), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_34)) begin
		tqmf_in_b = main_1_24_reg;
	end
	/* main: %1*/
	/*   store i32 %22, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 12), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_35)) begin
		tqmf_in_b = main_1_22_reg;
	end
	/* main: %1*/
	/*   store i32 %20, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 10), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_36)) begin
		tqmf_in_b = main_1_20_reg;
	end
	/* main: %1*/
	/*   store i32 %18, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 8), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_37)) begin
		tqmf_in_b = main_1_18_reg;
	end
	/* main: %1*/
	/*   store i32 %16, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 6), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_38)) begin
		tqmf_in_b = main_1_16_reg;
	end
	/* main: %1*/
	/*   store i32 %36, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_39)) begin
		tqmf_in_b = main_1_36_reg;
	end
	/* main: %1*/
	/*   store i32 %13, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_40)) begin
		tqmf_in_b = main_1_13_reg;
	end
	/* main: %1*/
	/*   store i32 %41, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_41)) begin
		tqmf_in_b = main_1_41_reg;
	end
end
always @(*) begin
	test_data_address_a = 0;
	/* main: %1*/
	/*   %38 = load i32* %37, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_29)) begin
		test_data_address_a = (main_1_37 >>> 3'd2);
	end
end
always @(*) begin
	test_data_write_enable_a = 0;
	/* main: %1*/
	/*   %38 = load i32* %37, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_29)) begin
		test_data_write_enable_a = 0;
	end
end
always @(*) begin
	test_data_address_b = 0;
	/* main: %1*/
	/*   %41 = load i32* %40, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_29)) begin
		test_data_address_b = (main_1_40 >>> 3'd2);
	end
end
always @(*) begin
	test_data_write_enable_b = 0;
	/* main: %1*/
	/*   %41 = load i32* %40, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_29)) begin
		test_data_write_enable_b = 0;
	end
end
always @(*) begin
	test_compressed_address_a = 0;
	/* main: %adpcm_main.exit*/
	/*   %514 = load i32* %513, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_adpcm_mainexit_161)) begin
		test_compressed_address_a = (main_adpcm_mainexit_513 >>> 3'd2);
	end
end
always @(*) begin
	test_compressed_write_enable_a = 0;
	/* main: %adpcm_main.exit*/
	/*   %514 = load i32* %513, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_adpcm_mainexit_161)) begin
		test_compressed_write_enable_a = 0;
	end
end
always @(*) begin
	test_result_address_a = 0;
	/* main: %.preheader*/
	/*   %521 = load i32* %520, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader_164)) begin
		test_result_address_a = (main_preheader_520 >>> 3'd2);
	end
end
always @(*) begin
	test_result_write_enable_a = 0;
	/* main: %.preheader*/
	/*   %521 = load i32* %520, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader_164)) begin
		test_result_write_enable_a = 0;
	end
end
always @(*) begin
	compressed_address_a = 0;
	/* main: %quantl.exit.i*/
	/*   store i32 %256, i32* %258, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_83)) begin
		compressed_address_a = (main_quantlexiti_258 >>> 3'd2);
	end
	/* main: %.preheader.i*/
	/*   %265 = load i32* %264, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_134)) begin
		compressed_address_a = (main_preheaderi_264 >>> 3'd2);
	end
	/* main: %adpcm_main.exit*/
	/*   %512 = load i32* %511, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_adpcm_mainexit_161)) begin
		compressed_address_a = (main_adpcm_mainexit_511 >>> 3'd2);
	end
end
always @(*) begin
	compressed_write_enable_a = 0;
	/* main: %quantl.exit.i*/
	/*   store i32 %256, i32* %258, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_83)) begin
		compressed_write_enable_a = 1'd1;
	end
	/* main: %.preheader.i*/
	/*   %265 = load i32* %264, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_134)) begin
		compressed_write_enable_a = 0;
	end
	/* main: %adpcm_main.exit*/
	/*   %512 = load i32* %511, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_adpcm_mainexit_161)) begin
		compressed_write_enable_a = 0;
	end
end
always @(*) begin
	compressed_in_a = 0;
	/* main: %quantl.exit.i*/
	/*   store i32 %256, i32* %258, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_83)) begin
		compressed_in_a = main_quantlexiti_256_reg;
	end
end
always @(*) begin
	result_address_a = 0;
	/* main: %.preheader.i*/
	/*   store i32 %504, i32* %506, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_157)) begin
		result_address_a = (main_preheaderi_506_reg >>> 3'd2);
	end
	/* main: %.preheader.i*/
	/*   store i32 %505, i32* %508, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_158)) begin
		result_address_a = (main_preheaderi_508_reg >>> 3'd2);
	end
	/* main: %.preheader*/
	/*   %519 = load i32* %518, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader_164)) begin
		result_address_a = (main_preheader_518 >>> 3'd2);
	end
end
always @(*) begin
	result_write_enable_a = 0;
	/* main: %.preheader.i*/
	/*   store i32 %504, i32* %506, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_157)) begin
		result_write_enable_a = 1'd1;
	end
	/* main: %.preheader.i*/
	/*   store i32 %505, i32* %508, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_158)) begin
		result_write_enable_a = 1'd1;
	end
	/* main: %.preheader*/
	/*   %519 = load i32* %518, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader_164)) begin
		result_write_enable_a = 0;
	end
end
always @(*) begin
	result_in_a = 0;
	/* main: %.preheader.i*/
	/*   store i32 %504, i32* %506, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_157)) begin
		result_in_a = main_preheaderi_504;
	end
	/* main: %.preheader.i*/
	/*   store i32 %505, i32* %508, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_158)) begin
		result_in_a = main_preheaderi_505_reg;
	end
end
always @(posedge clk) begin
	/* main: %0*/
	/*   call void @legup_memset_4_i64(i8* bitcast ([24 x i32]* @tqmf to i8*), i8 0, i64 96)*/
	if ((cur_state == LEGUP_F_main_BB__0_25)) begin
		legup_memset_4_i64_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_memset_4_i64_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_26)) begin
		legup_memset_4_i64_start <= 0;
		if (start == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_memset_4_i64_start"); $finish; end
	end
end
always @(posedge clk) begin
	/* main: %0*/
	/*   call void @legup_memset_4_i64(i8* bitcast ([24 x i32]* @tqmf to i8*), i8 0, i64 96)*/
	if ((cur_state == LEGUP_F_main_BB__0_25)) begin
		legup_memset_4_i64_arg_m <= 0;
		if (start == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_memset_4_i64_arg_m"); $finish; end
	end
end
always @(posedge clk) begin
	/* main: %0*/
	/*   call void @legup_memset_4_i64(i8* bitcast ([24 x i32]* @tqmf to i8*), i8 0, i64 96)*/
	if ((cur_state == LEGUP_F_main_BB__0_25)) begin
		legup_memset_4_i64_arg_c1 <= 8'd0;
		if (start == 1'b0 && ^(8'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_memset_4_i64_arg_c1"); $finish; end
	end
end
always @(posedge clk) begin
	/* main: %0*/
	/*   call void @legup_memset_4_i64(i8* bitcast ([24 x i32]* @tqmf to i8*), i8 0, i64 96)*/
	if ((cur_state == LEGUP_F_main_BB__0_25)) begin
		legup_memset_4_i64_arg_n <= 64'd96;
		if (start == 1'b0 && ^(64'd96) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_memset_4_i64_arg_n"); $finish; end
	end
end
always @(*) begin
	/* main: %0*/
	/*   call void @legup_memset_4_i64(i8* bitcast ([24 x i32]* @tqmf to i8*), i8 0, i64 96)*/
		legup_memset_4_i64_memory_controller_out_a = memory_controller_out_a;
end
always @(*) begin
	/* main: %0*/
	/*   call void @legup_memset_4_i64(i8* bitcast ([24 x i32]* @tqmf to i8*), i8 0, i64 96)*/
		legup_memset_4_i64_memory_controller_out_b = memory_controller_out_b;
end
always @(*) begin
	legup_memset_4_i64_memory_controller_waitrequest = memory_controller_waitrequest;
end
always @(*) begin
	legup_memset_4_i64_finish_final = legup_memset_4_i64_finish_reg;
end
always @(posedge clk) begin
	if ((reset | (cur_state == LEGUP_F_main_BB__0_25))) begin
		legup_memset_4_i64_finish_reg <= 0;
		if (start == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_memset_4_i64_finish_reg"); $finish; end
	end
	if (legup_memset_4_i64_finish) begin
		legup_memset_4_i64_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_memset_4_i64_finish_reg"); $finish; end
	end
end
always @(*) begin
	legup_function_call = 0;
	/* main: %0*/
	/*   call void @legup_memset_4_i64(i8* bitcast ([24 x i32]* @tqmf to i8*), i8 0, i64 96)*/
	if ((cur_state == LEGUP_function_call_26)) begin
		legup_function_call = 1'd1;
	end
	/* main: %quantl.exit.i*/
	/*   tail call void @upzero(i32 %109, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 0)) #3*/
	if ((cur_state == LEGUP_function_call_57)) begin
		legup_function_call = 1'd1;
	end
	/* main: %quantl.exit.i*/
	/*   tail call void @upzero(i32 %214, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 0)) #3*/
	if ((cur_state == LEGUP_function_call_78)) begin
		legup_function_call = 1'd1;
	end
	/* main: %.preheader.i*/
	/*   tail call void @upzero(i32 %320, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 0)) #3*/
	if ((cur_state == LEGUP_function_call_141)) begin
		legup_function_call = 1'd1;
	end
	/* main: %.preheader.i*/
	/*   tail call void @upzero(i32 %415, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 0)) #3*/
	if ((cur_state == LEGUP_function_call_155)) begin
		legup_function_call = 1'd1;
	end
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   tail call void @upzero(i32 %109, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 0)) #3*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_56)) begin
		upzero_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_57)) begin
		upzero_start <= 0;
		if (start == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_start"); $finish; end
	end
	/* main: %quantl.exit.i*/
	/*   tail call void @upzero(i32 %214, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 0)) #3*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_77)) begin
		upzero_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_78)) begin
		upzero_start <= 0;
		if (start == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_start"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   tail call void @upzero(i32 %320, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 0)) #3*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_140)) begin
		upzero_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_141)) begin
		upzero_start <= 0;
		if (start == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_start"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   tail call void @upzero(i32 %415, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 0)) #3*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_154)) begin
		upzero_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_155)) begin
		upzero_start <= 0;
		if (start == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_start"); $finish; end
	end
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   tail call void @upzero(i32 %109, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 0)) #3*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_56)) begin
		upzero_arg_dlt <= main_quantlexiti_109_reg;
		if (start == 1'b0 && ^(main_quantlexiti_109_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_arg_dlt"); $finish; end
	end
	/* main: %quantl.exit.i*/
	/*   tail call void @upzero(i32 %214, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 0)) #3*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_77)) begin
		upzero_arg_dlt <= main_quantlexiti_214_reg;
		if (start == 1'b0 && ^(main_quantlexiti_214_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_arg_dlt"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   tail call void @upzero(i32 %320, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 0)) #3*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_140)) begin
		upzero_arg_dlt <= main_preheaderi_320_reg;
		if (start == 1'b0 && ^(main_preheaderi_320_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_arg_dlt"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   tail call void @upzero(i32 %415, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 0)) #3*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_154)) begin
		upzero_arg_dlt <= main_preheaderi_415_reg;
		if (start == 1'b0 && ^(main_preheaderi_415_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_arg_dlt"); $finish; end
	end
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   tail call void @upzero(i32 %109, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 0)) #3*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_56)) begin
		upzero_arg_dlti <= `TAG_g_delay_dltx_a;
		if (start == 1'b0 && ^(`TAG_g_delay_dltx_a) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_arg_dlti"); $finish; end
	end
	/* main: %quantl.exit.i*/
	/*   tail call void @upzero(i32 %214, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 0)) #3*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_77)) begin
		upzero_arg_dlti <= `TAG_g_delay_dhx_a;
		if (start == 1'b0 && ^(`TAG_g_delay_dhx_a) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_arg_dlti"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   tail call void @upzero(i32 %320, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 0)) #3*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_140)) begin
		upzero_arg_dlti <= `TAG_g_dec_del_dltx_a;
		if (start == 1'b0 && ^(`TAG_g_dec_del_dltx_a) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_arg_dlti"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   tail call void @upzero(i32 %415, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 0)) #3*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_154)) begin
		upzero_arg_dlti <= `TAG_g_dec_del_dhx_a;
		if (start == 1'b0 && ^(`TAG_g_dec_del_dhx_a) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_arg_dlti"); $finish; end
	end
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   tail call void @upzero(i32 %109, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 0)) #3*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_56)) begin
		upzero_arg_bli <= `TAG_g_delay_bpl_a;
		if (start == 1'b0 && ^(`TAG_g_delay_bpl_a) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_arg_bli"); $finish; end
	end
	/* main: %quantl.exit.i*/
	/*   tail call void @upzero(i32 %214, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 0)) #3*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_77)) begin
		upzero_arg_bli <= `TAG_g_delay_bph_a;
		if (start == 1'b0 && ^(`TAG_g_delay_bph_a) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_arg_bli"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   tail call void @upzero(i32 %320, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 0)) #3*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_140)) begin
		upzero_arg_bli <= `TAG_g_dec_del_bpl_a;
		if (start == 1'b0 && ^(`TAG_g_dec_del_bpl_a) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_arg_bli"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   tail call void @upzero(i32 %415, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 0), i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 0)) #3*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_154)) begin
		upzero_arg_bli <= `TAG_g_dec_del_bph_a;
		if (start == 1'b0 && ^(`TAG_g_dec_del_bph_a) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_arg_bli"); $finish; end
	end
end
always @(*) begin
	upzero_finish_final = upzero_finish_reg;
end
always @(posedge clk) begin
	if ((reset | (cur_state == LEGUP_F_main_BB_quantlexiti_56))) begin
		upzero_finish_reg <= 0;
		if (start == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_finish_reg"); $finish; end
	end
	if (upzero_finish) begin
		upzero_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_finish_reg"); $finish; end
	end
	if ((reset | (cur_state == LEGUP_F_main_BB_quantlexiti_77))) begin
		upzero_finish_reg <= 0;
		if (start == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_finish_reg"); $finish; end
	end
	if (upzero_finish) begin
		upzero_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_finish_reg"); $finish; end
	end
	if ((reset | (cur_state == LEGUP_F_main_BB_preheaderi_140))) begin
		upzero_finish_reg <= 0;
		if (start == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_finish_reg"); $finish; end
	end
	if (upzero_finish) begin
		upzero_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_finish_reg"); $finish; end
	end
	if ((reset | (cur_state == LEGUP_F_main_BB_preheaderi_154))) begin
		upzero_finish_reg <= 0;
		if (start == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_finish_reg"); $finish; end
	end
	if (upzero_finish) begin
		upzero_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to upzero_finish_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %86 = mul nsw i32 %85, %al2.0*/
	if ((cur_state == LEGUP_F_main_BB__1_28)) begin
		main_signed_multiply_32_9_op0 = main_1_85;
	end
	/* main: %quantl.exit.i*/
	/*   %215 = mul nsw i32 %nbh.0, 127*/
	else if ((cur_state == LEGUP_F_main_BB_quantlexiti_48)) begin
		main_signed_multiply_32_9_op0 = main_1_nbh0_reg;
	end
	/* main: %.preheader.i*/
	/*   %460 = mul nsw i32 %accumc.0.0, -44*/
	else /* if ((cur_state == LEGUP_F_main_BB_preheaderi_101)) */ begin
		main_signed_multiply_32_9_op0 = main_preheaderi_accumc00_reg;
	end
end
always @(*) begin
	/* main: %1*/
	/*   %86 = mul nsw i32 %85, %al2.0*/
	if ((cur_state == LEGUP_F_main_BB__1_28)) begin
		main_signed_multiply_32_9_op1 = main_1_al20_reg;
	end
	/* main: %quantl.exit.i*/
	/*   %215 = mul nsw i32 %nbh.0, 127*/
	else if ((cur_state == LEGUP_F_main_BB_quantlexiti_48)) begin
		main_signed_multiply_32_9_op1 = 32'd127;
	end
	/* main: %.preheader.i*/
	/*   %460 = mul nsw i32 %accumc.0.0, -44*/
	else /* if ((cur_state == LEGUP_F_main_BB_preheaderi_101)) */ begin
		main_signed_multiply_32_9_op1 = -32'd44;
	end
end
always @(*) begin
	lpm_mult_main_1_86_en = ((memory_controller_waitrequest == 0) & (legup_function_call == 0));
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %86 = mul nsw i32 %85, %al2.0*/
	if ((lpm_mult_main_1_86_en == 1'd1)) begin
		main_1_86_stage0_reg <= (main_signed_multiply_32_9_op0 * main_signed_multiply_32_9_op1);
	end
end
always @(*) begin
	main_signed_multiply_32_9 = main_1_86_stage0_reg;
end
always @(*) begin
	/* main: %1*/
	/*   %gep3 = add i32 %gep_int1, %gep_array2*/
	if ((cur_state == LEGUP_F_main_BB__1_29)) begin
		main_signed_add_32_1_op0 = main_1_gep_int1_reg;
	end
	/* main: %1*/
	/*   %67 = add i32 %66, %65*/
	else if ((cur_state == LEGUP_F_main_BB__1_31)) begin
		main_signed_add_32_1_op0 = main_1_66;
	end
	/* main: %1*/
	/*   %74 = add i32 %71, %72*/
	else if ((cur_state == LEGUP_F_main_BB__1_32)) begin
		main_signed_add_32_1_op0 = main_1_71;
	end
	/* main: %1*/
	/*   %78 = add i32 %75, %76*/
	else if ((cur_state == LEGUP_F_main_BB__1_33)) begin
		main_signed_add_32_1_op0 = main_1_75;
	end
	/* main: %1*/
	/*   %82 = add i32 %79, %80*/
	else if ((cur_state == LEGUP_F_main_BB__1_34)) begin
		main_signed_add_32_1_op0 = main_1_79;
	end
	/* main: %1*/
	/*   %88 = add nsw i32 %87, %84*/
	else if ((cur_state == LEGUP_F_main_BB__1_35)) begin
		main_signed_add_32_1_op0 = main_1_87_reg;
	end
	/* main: %quantl.exit.i*/
	/*   %144 = add nsw i32 %141, 192*/
	else if ((cur_state == LEGUP_F_main_BB_quantlexiti_49)) begin
		main_signed_add_32_1_op0 = main_quantlexiti_141;
	end
	/* main: %quantl.exit.i*/
	/*   %gep15 = add i32 %gep_int13, %gep_array14*/
	else if ((cur_state == LEGUP_F_main_BB_quantlexiti_52)) begin
		main_signed_add_32_1_op0 = main_quantlexiti_gep_int13_reg;
	end
	/* main: %quantl.exit.i*/
	/*   %125 = add nsw i32 %84, %109*/
	else if ((cur_state == LEGUP_F_main_BB_quantlexiti_54)) begin
		main_signed_add_32_1_op0 = main_1_84_reg;
	end
	/* main: %quantl.exit.i*/
	/*   %wd4.0.i8.i = add nsw i32 %130, %136*/
	else if ((cur_state == LEGUP_F_main_BB_quantlexiti_55)) begin
		main_signed_add_32_1_op0 = main_quantlexiti_130;
	end
	/* main: %quantl.exit.i*/
	/*   %175 = add i32 %172, %173*/
	else if ((cur_state == LEGUP_F_main_BB_quantlexiti_66)) begin
		main_signed_add_32_1_op0 = main_quantlexiti_172;
	end
	/* main: %quantl.exit.i*/
	/*   %180 = add i32 %179, %178*/
	else if ((cur_state == LEGUP_F_main_BB_quantlexiti_67)) begin
		main_signed_add_32_1_op0 = main_quantlexiti_179;
	end
	/* main: %quantl.exit.i*/
	/*   %184 = add i32 %183, %182*/
	else if ((cur_state == LEGUP_F_main_BB_quantlexiti_68)) begin
		main_signed_add_32_1_op0 = main_quantlexiti_183;
	end
	/* main: %quantl.exit.i*/
	/*   %188 = add i32 %187, %186*/
	else if ((cur_state == LEGUP_F_main_BB_quantlexiti_69)) begin
		main_signed_add_32_1_op0 = main_quantlexiti_187;
	end
	/* main: %quantl.exit.i*/
	/*   %192 = add i32 %191, %190*/
	else if ((cur_state == LEGUP_F_main_BB_quantlexiti_70)) begin
		main_signed_add_32_1_op0 = main_quantlexiti_191;
	end
	/* main: %quantl.exit.i*/
	/*   %gep24 = add i32 %gep_int22, %gep_array23*/
	else if ((cur_state == LEGUP_F_main_BB_quantlexiti_73)) begin
		main_signed_add_32_1_op0 = main_quantlexiti_gep_int22_reg;
	end
	/* main: %quantl.exit.i*/
	/*   %230 = add nsw i32 %193, %214*/
	else if ((cur_state == LEGUP_F_main_BB_quantlexiti_75)) begin
		main_signed_add_32_1_op0 = main_quantlexiti_193_reg;
	end
	/* main: %quantl.exit.i*/
	/*   %wd4.0.i.i4 = add nsw i32 %235, %241*/
	else if ((cur_state == LEGUP_F_main_BB_quantlexiti_76)) begin
		main_signed_add_32_1_op0 = main_quantlexiti_235;
	end
	/* main: %.preheader.i*/
	/*   %450 = add nsw i32 %447, 192*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderi_102)) begin
		main_signed_add_32_1_op0 = main_preheaderi_447;
	end
	/* main: %.preheader.i*/
	/*   %293 = add i32 %290, %291*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderi_109)) begin
		main_signed_add_32_1_op0 = main_preheaderi_290;
	end
	/* main: %.preheader.i*/
	/*   %298 = add i32 %297, %296*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderi_110)) begin
		main_signed_add_32_1_op0 = main_preheaderi_297;
	end
	/* main: %.preheader.i*/
	/*   %302 = add i32 %301, %300*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderi_111)) begin
		main_signed_add_32_1_op0 = main_preheaderi_301;
	end
	/* main: %.preheader.i*/
	/*   %306 = add i32 %305, %304*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderi_112)) begin
		main_signed_add_32_1_op0 = main_preheaderi_305;
	end
	/* main: %.preheader.i*/
	/*   %310 = add i32 %309, %308*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderi_113)) begin
		main_signed_add_32_1_op0 = main_preheaderi_309;
	end
	/* main: %.preheader.i*/
	/*   %gep42 = add i32 %gep_int40, %gep_array41*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderi_136)) begin
		main_signed_add_32_1_op0 = main_preheaderi_gep_int40_reg;
	end
	/* main: %.preheader.i*/
	/*   %363 = add nsw i32 %320, %315*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderi_138)) begin
		main_signed_add_32_1_op0 = main_preheaderi_320;
	end
	/* main: %.preheader.i*/
	/*   %wd4.0.i7.i = add nsw i32 %344, %350*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderi_139)) begin
		main_signed_add_32_1_op0 = main_preheaderi_344;
	end
	/* main: %.preheader.i*/
	/*   %389 = add i32 %386, %387*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderi_150)) begin
		main_signed_add_32_1_op0 = main_preheaderi_386;
	end
	/* main: %.preheader.i*/
	/*   %394 = add i32 %393, %392*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderi_151)) begin
		main_signed_add_32_1_op0 = main_preheaderi_393;
	end
	/* main: %.preheader.i*/
	/*   %398 = add i32 %397, %396*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderi_152)) begin
		main_signed_add_32_1_op0 = main_preheaderi_397;
	end
	/* main: %.preheader.i*/
	/*   %402 = add i32 %401, %400*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderi_153)) begin
		main_signed_add_32_1_op0 = main_preheaderi_401;
	end
	/* main: %.preheader.i*/
	/*   %406 = add i32 %405, %404*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderi_154)) begin
		main_signed_add_32_1_op0 = main_preheaderi_405;
	end
	/* main: %.preheader.i*/
	/*   %443 = add nsw i32 %wd4.0.i.i, %440*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderi_156)) begin
		main_signed_add_32_1_op0 = main_preheaderi_wd40ii;
	end
	/* main: %.preheader.i*/
	/*   %495 = add nsw i32 %494, %491*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderi_157)) begin
		main_signed_add_32_1_op0 = main_preheaderi_494_reg;
	end
	/* main: %adpcm_main.exit*/
	/*   %gep66 = add i32 %gep_int64, %gep_array65*/
	else if ((cur_state == LEGUP_F_main_BB_adpcm_mainexit_161)) begin
		main_signed_add_32_1_op0 = main_adpcm_mainexit_gep_int64_reg;
	end
	/* main: %.preheader*/
	/*   %gep72 = add i32 %gep_int70, %gep_array71*/
	else /* if ((cur_state == LEGUP_F_main_BB_preheader_164)) */ begin
		main_signed_add_32_1_op0 = main_preheader_gep_int70_reg;
	end
end
always @(*) begin
	/* main: %1*/
	/*   %gep3 = add i32 %gep_int1, %gep_array2*/
	if ((cur_state == LEGUP_F_main_BB__1_29)) begin
		main_signed_add_32_1_op1 = main_1_gep_array2_reg;
	end
	/* main: %1*/
	/*   %67 = add i32 %66, %65*/
	else if ((cur_state == LEGUP_F_main_BB__1_31)) begin
		main_signed_add_32_1_op1 = main_1_65;
	end
	/* main: %1*/
	/*   %74 = add i32 %71, %72*/
	else if ((cur_state == LEGUP_F_main_BB__1_32)) begin
		main_signed_add_32_1_op1 = main_1_72;
	end
	/* main: %1*/
	/*   %78 = add i32 %75, %76*/
	else if ((cur_state == LEGUP_F_main_BB__1_33)) begin
		main_signed_add_32_1_op1 = main_1_76;
	end
	/* main: %1*/
	/*   %82 = add i32 %79, %80*/
	else if ((cur_state == LEGUP_F_main_BB__1_34)) begin
		main_signed_add_32_1_op1 = main_1_80;
	end
	/* main: %1*/
	/*   %88 = add nsw i32 %87, %84*/
	else if ((cur_state == LEGUP_F_main_BB__1_35)) begin
		main_signed_add_32_1_op1 = main_1_84;
	end
	/* main: %quantl.exit.i*/
	/*   %144 = add nsw i32 %141, 192*/
	else if ((cur_state == LEGUP_F_main_BB_quantlexiti_49)) begin
		main_signed_add_32_1_op1 = 32'd192;
	end
	/* main: %quantl.exit.i*/
	/*   %gep15 = add i32 %gep_int13, %gep_array14*/
	else if ((cur_state == LEGUP_F_main_BB_quantlexiti_52)) begin
		main_signed_add_32_1_op1 = main_quantlexiti_gep_array14_reg;
	end
	/* main: %quantl.exit.i*/
	/*   %125 = add nsw i32 %84, %109*/
	else if ((cur_state == LEGUP_F_main_BB_quantlexiti_54)) begin
		main_signed_add_32_1_op1 = main_quantlexiti_109;
	end
	/* main: %quantl.exit.i*/
	/*   %wd4.0.i8.i = add nsw i32 %130, %136*/
	else if ((cur_state == LEGUP_F_main_BB_quantlexiti_55)) begin
		main_signed_add_32_1_op1 = main_quantlexiti_136_reg;
	end
	/* main: %quantl.exit.i*/
	/*   %175 = add i32 %172, %173*/
	else if ((cur_state == LEGUP_F_main_BB_quantlexiti_66)) begin
		main_signed_add_32_1_op1 = main_quantlexiti_173;
	end
	/* main: %quantl.exit.i*/
	/*   %180 = add i32 %179, %178*/
	else if ((cur_state == LEGUP_F_main_BB_quantlexiti_67)) begin
		main_signed_add_32_1_op1 = main_quantlexiti_178;
	end
	/* main: %quantl.exit.i*/
	/*   %184 = add i32 %183, %182*/
	else if ((cur_state == LEGUP_F_main_BB_quantlexiti_68)) begin
		main_signed_add_32_1_op1 = main_quantlexiti_182;
	end
	/* main: %quantl.exit.i*/
	/*   %188 = add i32 %187, %186*/
	else if ((cur_state == LEGUP_F_main_BB_quantlexiti_69)) begin
		main_signed_add_32_1_op1 = main_quantlexiti_186;
	end
	/* main: %quantl.exit.i*/
	/*   %192 = add i32 %191, %190*/
	else if ((cur_state == LEGUP_F_main_BB_quantlexiti_70)) begin
		main_signed_add_32_1_op1 = main_quantlexiti_190;
	end
	/* main: %quantl.exit.i*/
	/*   %gep24 = add i32 %gep_int22, %gep_array23*/
	else if ((cur_state == LEGUP_F_main_BB_quantlexiti_73)) begin
		main_signed_add_32_1_op1 = main_quantlexiti_gep_array23_reg;
	end
	/* main: %quantl.exit.i*/
	/*   %230 = add nsw i32 %193, %214*/
	else if ((cur_state == LEGUP_F_main_BB_quantlexiti_75)) begin
		main_signed_add_32_1_op1 = main_quantlexiti_214;
	end
	/* main: %quantl.exit.i*/
	/*   %wd4.0.i.i4 = add nsw i32 %235, %241*/
	else if ((cur_state == LEGUP_F_main_BB_quantlexiti_76)) begin
		main_signed_add_32_1_op1 = main_quantlexiti_241_reg;
	end
	/* main: %.preheader.i*/
	/*   %450 = add nsw i32 %447, 192*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderi_102)) begin
		main_signed_add_32_1_op1 = 32'd192;
	end
	/* main: %.preheader.i*/
	/*   %293 = add i32 %290, %291*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderi_109)) begin
		main_signed_add_32_1_op1 = main_preheaderi_291;
	end
	/* main: %.preheader.i*/
	/*   %298 = add i32 %297, %296*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderi_110)) begin
		main_signed_add_32_1_op1 = main_preheaderi_296;
	end
	/* main: %.preheader.i*/
	/*   %302 = add i32 %301, %300*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderi_111)) begin
		main_signed_add_32_1_op1 = main_preheaderi_300;
	end
	/* main: %.preheader.i*/
	/*   %306 = add i32 %305, %304*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderi_112)) begin
		main_signed_add_32_1_op1 = main_preheaderi_304;
	end
	/* main: %.preheader.i*/
	/*   %310 = add i32 %309, %308*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderi_113)) begin
		main_signed_add_32_1_op1 = main_preheaderi_308;
	end
	/* main: %.preheader.i*/
	/*   %gep42 = add i32 %gep_int40, %gep_array41*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderi_136)) begin
		main_signed_add_32_1_op1 = main_preheaderi_gep_array41_reg;
	end
	/* main: %.preheader.i*/
	/*   %363 = add nsw i32 %320, %315*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderi_138)) begin
		main_signed_add_32_1_op1 = main_preheaderi_315_reg;
	end
	/* main: %.preheader.i*/
	/*   %wd4.0.i7.i = add nsw i32 %344, %350*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderi_139)) begin
		main_signed_add_32_1_op1 = main_preheaderi_350_reg;
	end
	/* main: %.preheader.i*/
	/*   %389 = add i32 %386, %387*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderi_150)) begin
		main_signed_add_32_1_op1 = main_preheaderi_387;
	end
	/* main: %.preheader.i*/
	/*   %394 = add i32 %393, %392*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderi_151)) begin
		main_signed_add_32_1_op1 = main_preheaderi_392;
	end
	/* main: %.preheader.i*/
	/*   %398 = add i32 %397, %396*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderi_152)) begin
		main_signed_add_32_1_op1 = main_preheaderi_396;
	end
	/* main: %.preheader.i*/
	/*   %402 = add i32 %401, %400*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderi_153)) begin
		main_signed_add_32_1_op1 = main_preheaderi_400;
	end
	/* main: %.preheader.i*/
	/*   %406 = add i32 %405, %404*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderi_154)) begin
		main_signed_add_32_1_op1 = main_preheaderi_404;
	end
	/* main: %.preheader.i*/
	/*   %443 = add nsw i32 %wd4.0.i.i, %440*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderi_156)) begin
		main_signed_add_32_1_op1 = main_preheaderi_440;
	end
	/* main: %.preheader.i*/
	/*   %495 = add nsw i32 %494, %491*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderi_157)) begin
		main_signed_add_32_1_op1 = main_preheaderi_491_reg;
	end
	/* main: %adpcm_main.exit*/
	/*   %gep66 = add i32 %gep_int64, %gep_array65*/
	else if ((cur_state == LEGUP_F_main_BB_adpcm_mainexit_161)) begin
		main_signed_add_32_1_op1 = main_adpcm_mainexit_gep_array65_reg;
	end
	/* main: %.preheader*/
	/*   %gep72 = add i32 %gep_int70, %gep_array71*/
	else /* if ((cur_state == LEGUP_F_main_BB_preheader_164)) */ begin
		main_signed_add_32_1_op1 = main_preheader_gep_array71_reg;
	end
end
always @(*) begin
	main_signed_add_32_1 = (main_signed_add_32_1_op0 + main_signed_add_32_1_op1);
end
always @(*) begin
	/* main: %1*/
	/*   %52 = mul nsw i32 %11, %12*/
	if ((cur_state == LEGUP_F_main_BB__1_28)) begin
		main_signed_multiply_32_4_op0 = main_1_11_reg;
	end
	/* main: %1*/
	/*   %62 = mul nsw i32 %61, %2*/
	else if ((cur_state == LEGUP_F_main_BB__1_30)) begin
		main_signed_multiply_32_4_op0 = main_1_61;
	end
	/* main: %1*/
	/*   %89 = mul nsw i32 %87, %84*/
	else if ((cur_state == LEGUP_F_main_BB__1_35)) begin
		main_signed_multiply_32_4_op0 = main_1_87_reg;
	end
	/* main: %1*/
	/*   %92 = mul nsw i32 %90, %49*/
	else if ((cur_state == LEGUP_F_main_BB__1_36)) begin
		main_signed_multiply_32_4_op0 = main_1_90;
	end
	/* main: %98*/
	/*   %101 = mul nsw i32 %100, %detl.0*/
	else if ((cur_state == LEGUP_F_main_BB__98_46)) begin
		main_signed_multiply_32_4_op0 = main_98_100;
	end
	/* main: %quantl.exit.i*/
	/*   %110 = mul nsw i32 %nbl.0, 127*/
	else if ((cur_state == LEGUP_F_main_BB_quantlexiti_48)) begin
		main_signed_multiply_32_4_op0 = main_1_nbl0_reg;
	end
	/* main: %quantl.exit.i*/
	/*   %108 = mul nsw i32 %107, %detl.0*/
	else if ((cur_state == LEGUP_F_main_BB_quantlexiti_53)) begin
		main_signed_multiply_32_4_op0 = main_quantlexiti_107;
	end
	/* main: %quantl.exit.i*/
	/*   %127 = mul nsw i32 %plt1.0, %125*/
	else if ((cur_state == LEGUP_F_main_BB_quantlexiti_54)) begin
		main_signed_multiply_32_4_op0 = main_1_plt10_reg;
	end
	/* main: %quantl.exit.i*/
	/*   %152 = mul nsw i32 %151, %150*/
	else if ((cur_state == LEGUP_F_main_BB_quantlexiti_60)) begin
		main_signed_multiply_32_4_op0 = main_quantlexiti_151;
	end
	/* main: %quantl.exit.i*/
	/*   %155 = mul nsw i32 %154, %153*/
	else if ((cur_state == LEGUP_F_main_BB_quantlexiti_61)) begin
		main_signed_multiply_32_4_op0 = main_quantlexiti_154;
	end
	/* main: %quantl.exit.i*/
	/*   %159 = mul nsw i32 %158, %157*/
	else if ((cur_state == LEGUP_F_main_BB_quantlexiti_62)) begin
		main_signed_multiply_32_4_op0 = main_quantlexiti_158;
	end
	/* main: %quantl.exit.i*/
	/*   %163 = mul nsw i32 %162, %161*/
	else if ((cur_state == LEGUP_F_main_BB_quantlexiti_63)) begin
		main_signed_multiply_32_4_op0 = main_quantlexiti_162;
	end
	/* main: %quantl.exit.i*/
	/*   %167 = mul nsw i32 %166, %165*/
	else if ((cur_state == LEGUP_F_main_BB_quantlexiti_64)) begin
		main_signed_multiply_32_4_op0 = main_quantlexiti_166;
	end
	/* main: %quantl.exit.i*/
	/*   %171 = mul nsw i32 %170, %169*/
	else if ((cur_state == LEGUP_F_main_BB_quantlexiti_65)) begin
		main_signed_multiply_32_4_op0 = main_quantlexiti_170;
	end
	/* main: %quantl.exit.i*/
	/*   %213 = mul nsw i32 %212, %deth.0*/
	else if ((cur_state == LEGUP_F_main_BB_quantlexiti_74)) begin
		main_signed_multiply_32_4_op0 = main_quantlexiti_212;
	end
	/* main: %quantl.exit.i*/
	/*   %232 = mul nsw i32 %ph1.0, %230*/
	else if ((cur_state == LEGUP_F_main_BB_quantlexiti_75)) begin
		main_signed_multiply_32_4_op0 = main_1_ph10_reg;
	end
	/* main: %.preheader.i*/
	/*   %354 = mul nsw i32 %dec_al1.0, 255*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderi_101)) begin
		main_signed_multiply_32_4_op0 = main_preheaderi_dec_al10_reg;
	end
	/* main: %.preheader.i*/
	/*   %270 = mul nsw i32 %269, %268*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderi_103)) begin
		main_signed_multiply_32_4_op0 = main_preheaderi_269;
	end
	/* main: %.preheader.i*/
	/*   %273 = mul nsw i32 %272, %271*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderi_104)) begin
		main_signed_multiply_32_4_op0 = main_preheaderi_272;
	end
	/* main: %.preheader.i*/
	/*   %277 = mul nsw i32 %276, %275*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderi_105)) begin
		main_signed_multiply_32_4_op0 = main_preheaderi_276;
	end
	/* main: %.preheader.i*/
	/*   %281 = mul nsw i32 %280, %279*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderi_106)) begin
		main_signed_multiply_32_4_op0 = main_preheaderi_280;
	end
	/* main: %.preheader.i*/
	/*   %285 = mul nsw i32 %284, %283*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderi_107)) begin
		main_signed_multiply_32_4_op0 = main_preheaderi_284;
	end
	/* main: %.preheader.i*/
	/*   %289 = mul nsw i32 %288, %287*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderi_108)) begin
		main_signed_multiply_32_4_op0 = main_preheaderi_288;
	end
	/* main: %.preheader.i*/
	/*   %319 = mul nsw i32 %318, %dec_detl.0*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderi_137)) begin
		main_signed_multiply_32_4_op0 = main_preheaderi_318;
	end
	/* main: %.preheader.i*/
	/*   %341 = mul nsw i32 %dec_plt1.0, %339*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderi_138)) begin
		main_signed_multiply_32_4_op0 = main_preheaderi_dec_plt10_reg;
	end
	/* main: %.preheader.i*/
	/*   %414 = mul nsw i32 %413, %dec_deth.0*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderi_143)) begin
		main_signed_multiply_32_4_op0 = main_preheaderi_413;
	end
	/* main: %.preheader.i*/
	/*   %366 = mul nsw i32 %365, %364*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderi_144)) begin
		main_signed_multiply_32_4_op0 = main_preheaderi_365;
	end
	/* main: %.preheader.i*/
	/*   %369 = mul nsw i32 %368, %367*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderi_145)) begin
		main_signed_multiply_32_4_op0 = main_preheaderi_368;
	end
	/* main: %.preheader.i*/
	/*   %373 = mul nsw i32 %372, %371*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderi_146)) begin
		main_signed_multiply_32_4_op0 = main_preheaderi_372;
	end
	/* main: %.preheader.i*/
	/*   %377 = mul nsw i32 %376, %375*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderi_147)) begin
		main_signed_multiply_32_4_op0 = main_preheaderi_376;
	end
	/* main: %.preheader.i*/
	/*   %381 = mul nsw i32 %380, %379*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderi_148)) begin
		main_signed_multiply_32_4_op0 = main_preheaderi_380;
	end
	/* main: %.preheader.i*/
	/*   %385 = mul nsw i32 %384, %383*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderi_149)) begin
		main_signed_multiply_32_4_op0 = main_preheaderi_384;
	end
	/* main: %.preheader.i*/
	/*   %433 = mul nsw i32 %dec_ph1.0, %431*/
	else /* if ((cur_state == LEGUP_F_main_BB_preheaderi_154)) */ begin
		main_signed_multiply_32_4_op0 = main_preheaderi_dec_ph10_reg;
	end
end
always @(*) begin
	/* main: %1*/
	/*   %52 = mul nsw i32 %11, %12*/
	if ((cur_state == LEGUP_F_main_BB__1_28)) begin
		main_signed_multiply_32_4_op1 = main_1_12_reg;
	end
	/* main: %1*/
	/*   %62 = mul nsw i32 %61, %2*/
	else if ((cur_state == LEGUP_F_main_BB__1_30)) begin
		main_signed_multiply_32_4_op1 = main_1_2_reg;
	end
	/* main: %1*/
	/*   %89 = mul nsw i32 %87, %84*/
	else if ((cur_state == LEGUP_F_main_BB__1_35)) begin
		main_signed_multiply_32_4_op1 = main_1_84;
	end
	/* main: %1*/
	/*   %92 = mul nsw i32 %90, %49*/
	else if ((cur_state == LEGUP_F_main_BB__1_36)) begin
		main_signed_multiply_32_4_op1 = main_1_49_reg;
	end
	/* main: %98*/
	/*   %101 = mul nsw i32 %100, %detl.0*/
	else if ((cur_state == LEGUP_F_main_BB__98_46)) begin
		main_signed_multiply_32_4_op1 = main_1_detl0_reg;
	end
	/* main: %quantl.exit.i*/
	/*   %110 = mul nsw i32 %nbl.0, 127*/
	else if ((cur_state == LEGUP_F_main_BB_quantlexiti_48)) begin
		main_signed_multiply_32_4_op1 = 32'd127;
	end
	/* main: %quantl.exit.i*/
	/*   %108 = mul nsw i32 %107, %detl.0*/
	else if ((cur_state == LEGUP_F_main_BB_quantlexiti_53)) begin
		main_signed_multiply_32_4_op1 = main_1_detl0_reg;
	end
	/* main: %quantl.exit.i*/
	/*   %127 = mul nsw i32 %plt1.0, %125*/
	else if ((cur_state == LEGUP_F_main_BB_quantlexiti_54)) begin
		main_signed_multiply_32_4_op1 = main_quantlexiti_125;
	end
	/* main: %quantl.exit.i*/
	/*   %152 = mul nsw i32 %151, %150*/
	else if ((cur_state == LEGUP_F_main_BB_quantlexiti_60)) begin
		main_signed_multiply_32_4_op1 = main_quantlexiti_150;
	end
	/* main: %quantl.exit.i*/
	/*   %155 = mul nsw i32 %154, %153*/
	else if ((cur_state == LEGUP_F_main_BB_quantlexiti_61)) begin
		main_signed_multiply_32_4_op1 = main_quantlexiti_153;
	end
	/* main: %quantl.exit.i*/
	/*   %159 = mul nsw i32 %158, %157*/
	else if ((cur_state == LEGUP_F_main_BB_quantlexiti_62)) begin
		main_signed_multiply_32_4_op1 = main_quantlexiti_157;
	end
	/* main: %quantl.exit.i*/
	/*   %163 = mul nsw i32 %162, %161*/
	else if ((cur_state == LEGUP_F_main_BB_quantlexiti_63)) begin
		main_signed_multiply_32_4_op1 = main_quantlexiti_161;
	end
	/* main: %quantl.exit.i*/
	/*   %167 = mul nsw i32 %166, %165*/
	else if ((cur_state == LEGUP_F_main_BB_quantlexiti_64)) begin
		main_signed_multiply_32_4_op1 = main_quantlexiti_165;
	end
	/* main: %quantl.exit.i*/
	/*   %171 = mul nsw i32 %170, %169*/
	else if ((cur_state == LEGUP_F_main_BB_quantlexiti_65)) begin
		main_signed_multiply_32_4_op1 = main_quantlexiti_169;
	end
	/* main: %quantl.exit.i*/
	/*   %213 = mul nsw i32 %212, %deth.0*/
	else if ((cur_state == LEGUP_F_main_BB_quantlexiti_74)) begin
		main_signed_multiply_32_4_op1 = main_1_deth0_reg;
	end
	/* main: %quantl.exit.i*/
	/*   %232 = mul nsw i32 %ph1.0, %230*/
	else if ((cur_state == LEGUP_F_main_BB_quantlexiti_75)) begin
		main_signed_multiply_32_4_op1 = main_quantlexiti_230;
	end
	/* main: %.preheader.i*/
	/*   %354 = mul nsw i32 %dec_al1.0, 255*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderi_101)) begin
		main_signed_multiply_32_4_op1 = 32'd255;
	end
	/* main: %.preheader.i*/
	/*   %270 = mul nsw i32 %269, %268*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderi_103)) begin
		main_signed_multiply_32_4_op1 = main_preheaderi_268;
	end
	/* main: %.preheader.i*/
	/*   %273 = mul nsw i32 %272, %271*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderi_104)) begin
		main_signed_multiply_32_4_op1 = main_preheaderi_271;
	end
	/* main: %.preheader.i*/
	/*   %277 = mul nsw i32 %276, %275*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderi_105)) begin
		main_signed_multiply_32_4_op1 = main_preheaderi_275;
	end
	/* main: %.preheader.i*/
	/*   %281 = mul nsw i32 %280, %279*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderi_106)) begin
		main_signed_multiply_32_4_op1 = main_preheaderi_279;
	end
	/* main: %.preheader.i*/
	/*   %285 = mul nsw i32 %284, %283*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderi_107)) begin
		main_signed_multiply_32_4_op1 = main_preheaderi_283;
	end
	/* main: %.preheader.i*/
	/*   %289 = mul nsw i32 %288, %287*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderi_108)) begin
		main_signed_multiply_32_4_op1 = main_preheaderi_287;
	end
	/* main: %.preheader.i*/
	/*   %319 = mul nsw i32 %318, %dec_detl.0*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderi_137)) begin
		main_signed_multiply_32_4_op1 = main_preheaderi_dec_detl0_reg;
	end
	/* main: %.preheader.i*/
	/*   %341 = mul nsw i32 %dec_plt1.0, %339*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderi_138)) begin
		main_signed_multiply_32_4_op1 = main_preheaderi_339;
	end
	/* main: %.preheader.i*/
	/*   %414 = mul nsw i32 %413, %dec_deth.0*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderi_143)) begin
		main_signed_multiply_32_4_op1 = main_preheaderi_dec_deth0_reg;
	end
	/* main: %.preheader.i*/
	/*   %366 = mul nsw i32 %365, %364*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderi_144)) begin
		main_signed_multiply_32_4_op1 = main_preheaderi_364;
	end
	/* main: %.preheader.i*/
	/*   %369 = mul nsw i32 %368, %367*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderi_145)) begin
		main_signed_multiply_32_4_op1 = main_preheaderi_367;
	end
	/* main: %.preheader.i*/
	/*   %373 = mul nsw i32 %372, %371*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderi_146)) begin
		main_signed_multiply_32_4_op1 = main_preheaderi_371;
	end
	/* main: %.preheader.i*/
	/*   %377 = mul nsw i32 %376, %375*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderi_147)) begin
		main_signed_multiply_32_4_op1 = main_preheaderi_375;
	end
	/* main: %.preheader.i*/
	/*   %381 = mul nsw i32 %380, %379*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderi_148)) begin
		main_signed_multiply_32_4_op1 = main_preheaderi_379;
	end
	/* main: %.preheader.i*/
	/*   %385 = mul nsw i32 %384, %383*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderi_149)) begin
		main_signed_multiply_32_4_op1 = main_preheaderi_383;
	end
	/* main: %.preheader.i*/
	/*   %433 = mul nsw i32 %dec_ph1.0, %431*/
	else /* if ((cur_state == LEGUP_F_main_BB_preheaderi_154)) */ begin
		main_signed_multiply_32_4_op1 = main_preheaderi_431;
	end
end
always @(*) begin
	lpm_mult_main_1_89_en = ((memory_controller_waitrequest == 0) & (legup_function_call == 0));
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %89 = mul nsw i32 %87, %84*/
	if ((lpm_mult_main_1_89_en == 1'd1)) begin
		main_1_89_stage0_reg <= (main_signed_multiply_32_4_op0 * main_signed_multiply_32_4_op1);
	end
end
always @(*) begin
	main_signed_multiply_32_4 = main_1_89_stage0_reg;
end
always @(*) begin
	/* main: %1*/
	/*   %gep = add i32 %gep_int, %gep_array*/
	if ((cur_state == LEGUP_F_main_BB__1_29)) begin
		main_signed_add_32_0_op0 = main_1_gep_int_reg;
	end
	/* main: %1*/
	/*   %66 = add i32 %63, %64*/
	else if ((cur_state == LEGUP_F_main_BB__1_31)) begin
		main_signed_add_32_0_op0 = main_1_63;
	end
	/* main: %1*/
	/*   %71 = add i32 %70, %69*/
	else if ((cur_state == LEGUP_F_main_BB__1_32)) begin
		main_signed_add_32_0_op0 = main_1_70_reg;
	end
	/* main: %1*/
	/*   %75 = add i32 %74, %73*/
	else if ((cur_state == LEGUP_F_main_BB__1_33)) begin
		main_signed_add_32_0_op0 = main_1_74_reg;
	end
	/* main: %1*/
	/*   %79 = add i32 %78, %77*/
	else if ((cur_state == LEGUP_F_main_BB__1_34)) begin
		main_signed_add_32_0_op0 = main_1_78_reg;
	end
	/* main: %1*/
	/*   %83 = add i32 %82, %81*/
	else if ((cur_state == LEGUP_F_main_BB__1_35)) begin
		main_signed_add_32_0_op0 = main_1_82_reg;
	end
	/* main: %1*/
	/*   %90 = add nsw i32 %88, %89*/
	else if ((cur_state == LEGUP_F_main_BB__1_36)) begin
		main_signed_add_32_0_op0 = main_1_88_reg;
	end
	/* main: %98*/
	/*   %104 = add nsw i32 %mil.01.i.i, 1*/
	else if ((cur_state == LEGUP_F_main_BB__98_44)) begin
		main_signed_add_32_0_op0 = main_98_mil01ii_reg;
	end
	/* main: %98*/
	/*   %gep6 = add i32 %gep_int4, %gep_array5*/
	else if ((cur_state == LEGUP_F_main_BB__98_45)) begin
		main_signed_add_32_0_op0 = main_98_gep_int4_reg;
	end
	/* main: %quantl.exit.i*/
	/*   %259 = add nsw i32 %i.02.i, 2*/
	else if ((cur_state == LEGUP_F_main_BB_quantlexiti_48)) begin
		main_signed_add_32_0_op0 = main_1_i02i_reg;
	end
	/* main: %quantl.exit.i*/
	/*   %gep9 = add i32 %gep_int7, %gep_array8*/
	else if ((cur_state == LEGUP_F_main_BB_quantlexiti_49)) begin
		main_signed_add_32_0_op0 = main_quantlexiti_gep_int7_reg;
	end
	/* main: %quantl.exit.i*/
	/*   %gep12 = add i32 %gep_int10, %gep_array11*/
	else if ((cur_state == LEGUP_F_main_BB_quantlexiti_52)) begin
		main_signed_add_32_0_op0 = main_quantlexiti_gep_int10_reg;
	end
	/* main: %quantl.exit.i*/
	/*   %114 = add nsw i32 %111, %113*/
	else if ((cur_state == LEGUP_F_main_BB_quantlexiti_53)) begin
		main_signed_add_32_0_op0 = main_quantlexiti_111_reg;
	end
	/* main: %quantl.exit.i*/
	/*   %149 = add nsw i32 %109, %90*/
	else if ((cur_state == LEGUP_F_main_BB_quantlexiti_54)) begin
		main_signed_add_32_0_op0 = main_quantlexiti_109;
	end
	/* main: %quantl.exit.i*/
	/*   %gep18 = add i32 %gep_int16, %gep_array17*/
	else if ((cur_state == LEGUP_F_main_BB_quantlexiti_55)) begin
		main_signed_add_32_0_op0 = main_quantlexiti_gep_int16_reg;
	end
	/* main: %quantl.exit.i*/
	/*   %156 = add nsw i32 %155, %152*/
	else if ((cur_state == LEGUP_F_main_BB_quantlexiti_62)) begin
		main_signed_add_32_0_op0 = main_quantlexiti_155;
	end
	/* main: %quantl.exit.i*/
	/*   %160 = add nsw i32 %156, %159*/
	else if ((cur_state == LEGUP_F_main_BB_quantlexiti_63)) begin
		main_signed_add_32_0_op0 = main_quantlexiti_156_reg;
	end
	/* main: %quantl.exit.i*/
	/*   %164 = add nsw i32 %160, %163*/
	else if ((cur_state == LEGUP_F_main_BB_quantlexiti_64)) begin
		main_signed_add_32_0_op0 = main_quantlexiti_160_reg;
	end
	/* main: %quantl.exit.i*/
	/*   %168 = add nsw i32 %164, %167*/
	else if ((cur_state == LEGUP_F_main_BB_quantlexiti_65)) begin
		main_signed_add_32_0_op0 = main_quantlexiti_164_reg;
	end
	/* main: %quantl.exit.i*/
	/*   %172 = add nsw i32 %168, %171*/
	else if ((cur_state == LEGUP_F_main_BB_quantlexiti_66)) begin
		main_signed_add_32_0_op0 = main_quantlexiti_168_reg;
	end
	/* main: %quantl.exit.i*/
	/*   %179 = add i32 %176, %177*/
	else if ((cur_state == LEGUP_F_main_BB_quantlexiti_67)) begin
		main_signed_add_32_0_op0 = main_quantlexiti_176_reg;
	end
	/* main: %quantl.exit.i*/
	/*   %183 = add i32 %180, %181*/
	else if ((cur_state == LEGUP_F_main_BB_quantlexiti_68)) begin
		main_signed_add_32_0_op0 = main_quantlexiti_180_reg;
	end
	/* main: %quantl.exit.i*/
	/*   %187 = add i32 %184, %185*/
	else if ((cur_state == LEGUP_F_main_BB_quantlexiti_69)) begin
		main_signed_add_32_0_op0 = main_quantlexiti_184_reg;
	end
	/* main: %quantl.exit.i*/
	/*   %191 = add i32 %188, %189*/
	else if ((cur_state == LEGUP_F_main_BB_quantlexiti_70)) begin
		main_signed_add_32_0_op0 = main_quantlexiti_188_reg;
	end
	/* main: %quantl.exit.i*/
	/*   %210 = add nsw i32 %., -2*/
	else if ((cur_state == LEGUP_F_main_BB_quantlexiti_71)) begin
		main_signed_add_32_0_op0 = main_quantlexiti_;
	end
	/* main: %quantl.exit.i*/
	/*   %gep21 = add i32 %gep_int19, %gep_array20*/
	else if ((cur_state == LEGUP_F_main_BB_quantlexiti_73)) begin
		main_signed_add_32_0_op0 = main_quantlexiti_gep_int19_reg;
	end
	/* main: %quantl.exit.i*/
	/*   %219 = add nsw i32 %216, %218*/
	else if ((cur_state == LEGUP_F_main_BB_quantlexiti_74)) begin
		main_signed_add_32_0_op0 = main_quantlexiti_216_reg;
	end
	/* main: %quantl.exit.i*/
	/*   %254 = add nsw i32 %214, %197*/
	else if ((cur_state == LEGUP_F_main_BB_quantlexiti_75)) begin
		main_signed_add_32_0_op0 = main_quantlexiti_214;
	end
	/* main: %quantl.exit.i*/
	/*   %gep27 = add i32 %gep_int25, %gep_array26*/
	else if ((cur_state == LEGUP_F_main_BB_quantlexiti_76)) begin
		main_signed_add_32_0_op0 = main_quantlexiti_gep_int25_reg;
	end
	/* main: %quantl.exit.i*/
	/*   %gep30 = add i32 %gep_int28, %gep_array29*/
	else if ((cur_state == LEGUP_F_main_BB_quantlexiti_83)) begin
		main_signed_add_32_0_op0 = main_quantlexiti_gep_int28_reg;
	end
	/* main: %.preheader.i.preheader*/
	/*   %gep33 = add i32 %gep_int31, %gep_array32*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderipreheader_99)) begin
		main_signed_add_32_0_op0 = main_preheaderipreheader_gep_int31_reg;
	end
	/* main: %.preheader.i*/
	/*   %509 = add nsw i32 %i.11.i, 2*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderi_101)) begin
		main_signed_add_32_0_op0 = main_preheaderi_i11i_reg;
	end
	/* main: %.preheader.i*/
	/*   %358 = add nsw i32 %355, 192*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderi_102)) begin
		main_signed_add_32_0_op0 = main_preheaderi_355;
	end
	/* main: %.preheader.i*/
	/*   %274 = add nsw i32 %273, %270*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderi_105)) begin
		main_signed_add_32_0_op0 = main_preheaderi_273;
	end
	/* main: %.preheader.i*/
	/*   %278 = add nsw i32 %274, %277*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderi_106)) begin
		main_signed_add_32_0_op0 = main_preheaderi_274_reg;
	end
	/* main: %.preheader.i*/
	/*   %282 = add nsw i32 %278, %281*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderi_107)) begin
		main_signed_add_32_0_op0 = main_preheaderi_278_reg;
	end
	/* main: %.preheader.i*/
	/*   %286 = add nsw i32 %282, %285*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderi_108)) begin
		main_signed_add_32_0_op0 = main_preheaderi_282_reg;
	end
	/* main: %.preheader.i*/
	/*   %290 = add nsw i32 %286, %289*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderi_109)) begin
		main_signed_add_32_0_op0 = main_preheaderi_286_reg;
	end
	/* main: %.preheader.i*/
	/*   %297 = add i32 %294, %295*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderi_110)) begin
		main_signed_add_32_0_op0 = main_preheaderi_294_reg;
	end
	/* main: %.preheader.i*/
	/*   %301 = add i32 %298, %299*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderi_111)) begin
		main_signed_add_32_0_op0 = main_preheaderi_298_reg;
	end
	/* main: %.preheader.i*/
	/*   %305 = add i32 %302, %303*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderi_112)) begin
		main_signed_add_32_0_op0 = main_preheaderi_302_reg;
	end
	/* main: %.preheader.i*/
	/*   %309 = add i32 %306, %307*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderi_113)) begin
		main_signed_add_32_0_op0 = main_preheaderi_306_reg;
	end
	/* main: %.preheader.i*/
	/*   %gep36 = add i32 %gep_int34, %gep_array35*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderi_134)) begin
		main_signed_add_32_0_op0 = main_preheaderi_gep_int34_reg;
	end
	/* main: %.preheader.i*/
	/*   %gep39 = add i32 %gep_int37, %gep_array38*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderi_136)) begin
		main_signed_add_32_0_op0 = main_preheaderi_gep_int37_reg;
	end
	/* main: %.preheader.i*/
	/*   %328 = add nsw i32 %325, %327*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderi_137)) begin
		main_signed_add_32_0_op0 = main_preheaderi_325_reg;
	end
	/* main: %.preheader.i*/
	/*   %339 = add nsw i32 %311, %320*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderi_138)) begin
		main_signed_add_32_0_op0 = main_preheaderi_311_reg;
	end
	/* main: %.preheader.i*/
	/*   %gep45 = add i32 %gep_int43, %gep_array44*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderi_139)) begin
		main_signed_add_32_0_op0 = main_preheaderi_gep_int43_reg;
	end
	/* main: %.preheader.i*/
	/*   %420 = add nsw i32 %417, %419*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderi_143)) begin
		main_signed_add_32_0_op0 = main_preheaderi_417_reg;
	end
	/* main: %.preheader.i*/
	/*   %gep54 = add i32 %gep_int52, %gep_array53*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderi_145)) begin
		main_signed_add_32_0_op0 = main_preheaderi_gep_int52_reg;
	end
	/* main: %.preheader.i*/
	/*   %370 = add nsw i32 %369, %366*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderi_146)) begin
		main_signed_add_32_0_op0 = main_preheaderi_369;
	end
	/* main: %.preheader.i*/
	/*   %374 = add nsw i32 %370, %373*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderi_147)) begin
		main_signed_add_32_0_op0 = main_preheaderi_370_reg;
	end
	/* main: %.preheader.i*/
	/*   %378 = add nsw i32 %374, %377*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderi_148)) begin
		main_signed_add_32_0_op0 = main_preheaderi_374_reg;
	end
	/* main: %.preheader.i*/
	/*   %382 = add nsw i32 %378, %381*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderi_149)) begin
		main_signed_add_32_0_op0 = main_preheaderi_378_reg;
	end
	/* main: %.preheader.i*/
	/*   %386 = add nsw i32 %382, %385*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderi_150)) begin
		main_signed_add_32_0_op0 = main_preheaderi_382_reg;
	end
	/* main: %.preheader.i*/
	/*   %393 = add i32 %390, %391*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderi_151)) begin
		main_signed_add_32_0_op0 = main_preheaderi_390_reg;
	end
	/* main: %.preheader.i*/
	/*   %397 = add i32 %394, %395*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderi_152)) begin
		main_signed_add_32_0_op0 = main_preheaderi_394_reg;
	end
	/* main: %.preheader.i*/
	/*   %401 = add i32 %398, %399*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderi_153)) begin
		main_signed_add_32_0_op0 = main_preheaderi_398_reg;
	end
	/* main: %.preheader.i*/
	/*   %405 = add i32 %402, %403*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderi_154)) begin
		main_signed_add_32_0_op0 = main_preheaderi_402_reg;
	end
	/* main: %.preheader.i*/
	/*   %wd4.0.i.i = add nsw i32 %436, %442*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderi_156)) begin
		main_signed_add_32_0_op0 = main_preheaderi_436;
	end
	/* main: %.preheader.i*/
	/*   %493 = add nsw i32 %492, %489*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderi_157)) begin
		main_signed_add_32_0_op0 = main_preheaderi_492_reg;
	end
	/* main: %adpcm_main.exit*/
	/*   %517 = add nsw i32 %i.03, 1*/
	else if ((cur_state == LEGUP_F_main_BB_adpcm_mainexit_160)) begin
		main_signed_add_32_0_op0 = main_adpcm_mainexit_i03_reg;
	end
	/* main: %adpcm_main.exit*/
	/*   %gep63 = add i32 %gep_int61, %gep_array62*/
	else if ((cur_state == LEGUP_F_main_BB_adpcm_mainexit_161)) begin
		main_signed_add_32_0_op0 = main_adpcm_mainexit_gep_int61_reg;
	end
	/* main: %adpcm_main.exit*/
	/*   %.main_result.0 = add nsw i32 %516, %main_result.04*/
	else if ((cur_state == LEGUP_F_main_BB_adpcm_mainexit_162)) begin
		main_signed_add_32_0_op0 = main_adpcm_mainexit_516;
	end
	/* main: %.preheader*/
	/*   %524 = add nsw i32 %i.11, 1*/
	else if ((cur_state == LEGUP_F_main_BB_preheader_163)) begin
		main_signed_add_32_0_op0 = main_preheader_i11_reg;
	end
	/* main: %.preheader*/
	/*   %gep69 = add i32 %gep_int67, %gep_array68*/
	else if ((cur_state == LEGUP_F_main_BB_preheader_164)) begin
		main_signed_add_32_0_op0 = main_preheader_gep_int67_reg;
	end
	/* main: %.preheader*/
	/*   %.main_result.2 = add nsw i32 %523, %main_result.22*/
	else /* if ((cur_state == LEGUP_F_main_BB_preheader_165)) */ begin
		main_signed_add_32_0_op0 = main_preheader_523;
	end
end
always @(*) begin
	/* main: %1*/
	/*   %gep = add i32 %gep_int, %gep_array*/
	if ((cur_state == LEGUP_F_main_BB__1_29)) begin
		main_signed_add_32_0_op1 = main_1_gep_array_reg;
	end
	/* main: %1*/
	/*   %66 = add i32 %63, %64*/
	else if ((cur_state == LEGUP_F_main_BB__1_31)) begin
		main_signed_add_32_0_op1 = main_1_64_reg;
	end
	/* main: %1*/
	/*   %71 = add i32 %70, %69*/
	else if ((cur_state == LEGUP_F_main_BB__1_32)) begin
		main_signed_add_32_0_op1 = main_1_69;
	end
	/* main: %1*/
	/*   %75 = add i32 %74, %73*/
	else if ((cur_state == LEGUP_F_main_BB__1_33)) begin
		main_signed_add_32_0_op1 = main_1_73;
	end
	/* main: %1*/
	/*   %79 = add i32 %78, %77*/
	else if ((cur_state == LEGUP_F_main_BB__1_34)) begin
		main_signed_add_32_0_op1 = main_1_77;
	end
	/* main: %1*/
	/*   %83 = add i32 %82, %81*/
	else if ((cur_state == LEGUP_F_main_BB__1_35)) begin
		main_signed_add_32_0_op1 = main_1_81;
	end
	/* main: %1*/
	/*   %90 = add nsw i32 %88, %89*/
	else if ((cur_state == LEGUP_F_main_BB__1_36)) begin
		main_signed_add_32_0_op1 = main_1_89;
	end
	/* main: %98*/
	/*   %104 = add nsw i32 %mil.01.i.i, 1*/
	else if ((cur_state == LEGUP_F_main_BB__98_44)) begin
		main_signed_add_32_0_op1 = 32'd1;
	end
	/* main: %98*/
	/*   %gep6 = add i32 %gep_int4, %gep_array5*/
	else if ((cur_state == LEGUP_F_main_BB__98_45)) begin
		main_signed_add_32_0_op1 = main_98_gep_array5_reg;
	end
	/* main: %quantl.exit.i*/
	/*   %259 = add nsw i32 %i.02.i, 2*/
	else if ((cur_state == LEGUP_F_main_BB_quantlexiti_48)) begin
		main_signed_add_32_0_op1 = 32'd2;
	end
	/* main: %quantl.exit.i*/
	/*   %gep9 = add i32 %gep_int7, %gep_array8*/
	else if ((cur_state == LEGUP_F_main_BB_quantlexiti_49)) begin
		main_signed_add_32_0_op1 = main_quantlexiti_gep_array8_reg;
	end
	/* main: %quantl.exit.i*/
	/*   %gep12 = add i32 %gep_int10, %gep_array11*/
	else if ((cur_state == LEGUP_F_main_BB_quantlexiti_52)) begin
		main_signed_add_32_0_op1 = main_quantlexiti_gep_array11_reg;
	end
	/* main: %quantl.exit.i*/
	/*   %114 = add nsw i32 %111, %113*/
	else if ((cur_state == LEGUP_F_main_BB_quantlexiti_53)) begin
		main_signed_add_32_0_op1 = main_quantlexiti_113;
	end
	/* main: %quantl.exit.i*/
	/*   %149 = add nsw i32 %109, %90*/
	else if ((cur_state == LEGUP_F_main_BB_quantlexiti_54)) begin
		main_signed_add_32_0_op1 = main_1_90_reg;
	end
	/* main: %quantl.exit.i*/
	/*   %gep18 = add i32 %gep_int16, %gep_array17*/
	else if ((cur_state == LEGUP_F_main_BB_quantlexiti_55)) begin
		main_signed_add_32_0_op1 = main_quantlexiti_gep_array17_reg;
	end
	/* main: %quantl.exit.i*/
	/*   %156 = add nsw i32 %155, %152*/
	else if ((cur_state == LEGUP_F_main_BB_quantlexiti_62)) begin
		main_signed_add_32_0_op1 = main_quantlexiti_152_reg;
	end
	/* main: %quantl.exit.i*/
	/*   %160 = add nsw i32 %156, %159*/
	else if ((cur_state == LEGUP_F_main_BB_quantlexiti_63)) begin
		main_signed_add_32_0_op1 = main_quantlexiti_159;
	end
	/* main: %quantl.exit.i*/
	/*   %164 = add nsw i32 %160, %163*/
	else if ((cur_state == LEGUP_F_main_BB_quantlexiti_64)) begin
		main_signed_add_32_0_op1 = main_quantlexiti_163;
	end
	/* main: %quantl.exit.i*/
	/*   %168 = add nsw i32 %164, %167*/
	else if ((cur_state == LEGUP_F_main_BB_quantlexiti_65)) begin
		main_signed_add_32_0_op1 = main_quantlexiti_167;
	end
	/* main: %quantl.exit.i*/
	/*   %172 = add nsw i32 %168, %171*/
	else if ((cur_state == LEGUP_F_main_BB_quantlexiti_66)) begin
		main_signed_add_32_0_op1 = main_quantlexiti_171;
	end
	/* main: %quantl.exit.i*/
	/*   %179 = add i32 %176, %177*/
	else if ((cur_state == LEGUP_F_main_BB_quantlexiti_67)) begin
		main_signed_add_32_0_op1 = main_quantlexiti_177;
	end
	/* main: %quantl.exit.i*/
	/*   %183 = add i32 %180, %181*/
	else if ((cur_state == LEGUP_F_main_BB_quantlexiti_68)) begin
		main_signed_add_32_0_op1 = main_quantlexiti_181;
	end
	/* main: %quantl.exit.i*/
	/*   %187 = add i32 %184, %185*/
	else if ((cur_state == LEGUP_F_main_BB_quantlexiti_69)) begin
		main_signed_add_32_0_op1 = main_quantlexiti_185;
	end
	/* main: %quantl.exit.i*/
	/*   %191 = add i32 %188, %189*/
	else if ((cur_state == LEGUP_F_main_BB_quantlexiti_70)) begin
		main_signed_add_32_0_op1 = main_quantlexiti_189;
	end
	/* main: %quantl.exit.i*/
	/*   %210 = add nsw i32 %., -2*/
	else if ((cur_state == LEGUP_F_main_BB_quantlexiti_71)) begin
		main_signed_add_32_0_op1 = -32'd2;
	end
	/* main: %quantl.exit.i*/
	/*   %gep21 = add i32 %gep_int19, %gep_array20*/
	else if ((cur_state == LEGUP_F_main_BB_quantlexiti_73)) begin
		main_signed_add_32_0_op1 = main_quantlexiti_gep_array20_reg;
	end
	/* main: %quantl.exit.i*/
	/*   %219 = add nsw i32 %216, %218*/
	else if ((cur_state == LEGUP_F_main_BB_quantlexiti_74)) begin
		main_signed_add_32_0_op1 = main_quantlexiti_218;
	end
	/* main: %quantl.exit.i*/
	/*   %254 = add nsw i32 %214, %197*/
	else if ((cur_state == LEGUP_F_main_BB_quantlexiti_75)) begin
		main_signed_add_32_0_op1 = main_quantlexiti_197_reg;
	end
	/* main: %quantl.exit.i*/
	/*   %gep27 = add i32 %gep_int25, %gep_array26*/
	else if ((cur_state == LEGUP_F_main_BB_quantlexiti_76)) begin
		main_signed_add_32_0_op1 = main_quantlexiti_gep_array26_reg;
	end
	/* main: %quantl.exit.i*/
	/*   %gep30 = add i32 %gep_int28, %gep_array29*/
	else if ((cur_state == LEGUP_F_main_BB_quantlexiti_83)) begin
		main_signed_add_32_0_op1 = main_quantlexiti_gep_array29_reg;
	end
	/* main: %.preheader.i.preheader*/
	/*   %gep33 = add i32 %gep_int31, %gep_array32*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderipreheader_99)) begin
		main_signed_add_32_0_op1 = main_preheaderipreheader_gep_array32_reg;
	end
	/* main: %.preheader.i*/
	/*   %509 = add nsw i32 %i.11.i, 2*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderi_101)) begin
		main_signed_add_32_0_op1 = 32'd2;
	end
	/* main: %.preheader.i*/
	/*   %358 = add nsw i32 %355, 192*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderi_102)) begin
		main_signed_add_32_0_op1 = 32'd192;
	end
	/* main: %.preheader.i*/
	/*   %274 = add nsw i32 %273, %270*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderi_105)) begin
		main_signed_add_32_0_op1 = main_preheaderi_270_reg;
	end
	/* main: %.preheader.i*/
	/*   %278 = add nsw i32 %274, %277*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderi_106)) begin
		main_signed_add_32_0_op1 = main_preheaderi_277;
	end
	/* main: %.preheader.i*/
	/*   %282 = add nsw i32 %278, %281*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderi_107)) begin
		main_signed_add_32_0_op1 = main_preheaderi_281;
	end
	/* main: %.preheader.i*/
	/*   %286 = add nsw i32 %282, %285*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderi_108)) begin
		main_signed_add_32_0_op1 = main_preheaderi_285;
	end
	/* main: %.preheader.i*/
	/*   %290 = add nsw i32 %286, %289*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderi_109)) begin
		main_signed_add_32_0_op1 = main_preheaderi_289;
	end
	/* main: %.preheader.i*/
	/*   %297 = add i32 %294, %295*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderi_110)) begin
		main_signed_add_32_0_op1 = main_preheaderi_295;
	end
	/* main: %.preheader.i*/
	/*   %301 = add i32 %298, %299*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderi_111)) begin
		main_signed_add_32_0_op1 = main_preheaderi_299;
	end
	/* main: %.preheader.i*/
	/*   %305 = add i32 %302, %303*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderi_112)) begin
		main_signed_add_32_0_op1 = main_preheaderi_303;
	end
	/* main: %.preheader.i*/
	/*   %309 = add i32 %306, %307*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderi_113)) begin
		main_signed_add_32_0_op1 = main_preheaderi_307;
	end
	/* main: %.preheader.i*/
	/*   %gep36 = add i32 %gep_int34, %gep_array35*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderi_134)) begin
		main_signed_add_32_0_op1 = main_preheaderi_gep_array35_reg;
	end
	/* main: %.preheader.i*/
	/*   %gep39 = add i32 %gep_int37, %gep_array38*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderi_136)) begin
		main_signed_add_32_0_op1 = main_preheaderi_gep_array38_reg;
	end
	/* main: %.preheader.i*/
	/*   %328 = add nsw i32 %325, %327*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderi_137)) begin
		main_signed_add_32_0_op1 = main_preheaderi_327;
	end
	/* main: %.preheader.i*/
	/*   %339 = add nsw i32 %311, %320*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderi_138)) begin
		main_signed_add_32_0_op1 = main_preheaderi_320;
	end
	/* main: %.preheader.i*/
	/*   %gep45 = add i32 %gep_int43, %gep_array44*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderi_139)) begin
		main_signed_add_32_0_op1 = main_preheaderi_gep_array44_reg;
	end
	/* main: %.preheader.i*/
	/*   %420 = add nsw i32 %417, %419*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderi_143)) begin
		main_signed_add_32_0_op1 = main_preheaderi_419;
	end
	/* main: %.preheader.i*/
	/*   %gep54 = add i32 %gep_int52, %gep_array53*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderi_145)) begin
		main_signed_add_32_0_op1 = main_preheaderi_gep_array53_reg;
	end
	/* main: %.preheader.i*/
	/*   %370 = add nsw i32 %369, %366*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderi_146)) begin
		main_signed_add_32_0_op1 = main_preheaderi_366_reg;
	end
	/* main: %.preheader.i*/
	/*   %374 = add nsw i32 %370, %373*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderi_147)) begin
		main_signed_add_32_0_op1 = main_preheaderi_373;
	end
	/* main: %.preheader.i*/
	/*   %378 = add nsw i32 %374, %377*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderi_148)) begin
		main_signed_add_32_0_op1 = main_preheaderi_377;
	end
	/* main: %.preheader.i*/
	/*   %382 = add nsw i32 %378, %381*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderi_149)) begin
		main_signed_add_32_0_op1 = main_preheaderi_381;
	end
	/* main: %.preheader.i*/
	/*   %386 = add nsw i32 %382, %385*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderi_150)) begin
		main_signed_add_32_0_op1 = main_preheaderi_385;
	end
	/* main: %.preheader.i*/
	/*   %393 = add i32 %390, %391*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderi_151)) begin
		main_signed_add_32_0_op1 = main_preheaderi_391;
	end
	/* main: %.preheader.i*/
	/*   %397 = add i32 %394, %395*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderi_152)) begin
		main_signed_add_32_0_op1 = main_preheaderi_395;
	end
	/* main: %.preheader.i*/
	/*   %401 = add i32 %398, %399*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderi_153)) begin
		main_signed_add_32_0_op1 = main_preheaderi_399;
	end
	/* main: %.preheader.i*/
	/*   %405 = add i32 %402, %403*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderi_154)) begin
		main_signed_add_32_0_op1 = main_preheaderi_403;
	end
	/* main: %.preheader.i*/
	/*   %wd4.0.i.i = add nsw i32 %436, %442*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderi_156)) begin
		main_signed_add_32_0_op1 = main_preheaderi_442_reg;
	end
	/* main: %.preheader.i*/
	/*   %493 = add nsw i32 %492, %489*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderi_157)) begin
		main_signed_add_32_0_op1 = main_preheaderi_489_reg;
	end
	/* main: %adpcm_main.exit*/
	/*   %517 = add nsw i32 %i.03, 1*/
	else if ((cur_state == LEGUP_F_main_BB_adpcm_mainexit_160)) begin
		main_signed_add_32_0_op1 = 32'd1;
	end
	/* main: %adpcm_main.exit*/
	/*   %gep63 = add i32 %gep_int61, %gep_array62*/
	else if ((cur_state == LEGUP_F_main_BB_adpcm_mainexit_161)) begin
		main_signed_add_32_0_op1 = main_adpcm_mainexit_gep_array62_reg;
	end
	/* main: %adpcm_main.exit*/
	/*   %.main_result.0 = add nsw i32 %516, %main_result.04*/
	else if ((cur_state == LEGUP_F_main_BB_adpcm_mainexit_162)) begin
		main_signed_add_32_0_op1 = main_adpcm_mainexit_main_result04_reg;
	end
	/* main: %.preheader*/
	/*   %524 = add nsw i32 %i.11, 1*/
	else if ((cur_state == LEGUP_F_main_BB_preheader_163)) begin
		main_signed_add_32_0_op1 = 32'd1;
	end
	/* main: %.preheader*/
	/*   %gep69 = add i32 %gep_int67, %gep_array68*/
	else if ((cur_state == LEGUP_F_main_BB_preheader_164)) begin
		main_signed_add_32_0_op1 = main_preheader_gep_array68_reg;
	end
	/* main: %.preheader*/
	/*   %.main_result.2 = add nsw i32 %523, %main_result.22*/
	else /* if ((cur_state == LEGUP_F_main_BB_preheader_165)) */ begin
		main_signed_add_32_0_op1 = main_preheader_main_result22_reg;
	end
end
always @(*) begin
	main_signed_add_32_0 = (main_signed_add_32_0_op0 + main_signed_add_32_0_op1);
end
always @(*) begin
	/* main: %1*/
	/*   %50 = sub nsw i32 %46, %47*/
	if ((cur_state == LEGUP_F_main_BB__1_29)) begin
		main_signed_subtract_32_0_op0 = main_1_46;
	end
	/* main: %1*/
	/*   %91 = sub nsw i32 %49, %90*/
	else if ((cur_state == LEGUP_F_main_BB__1_36)) begin
		main_signed_subtract_32_0_op0 = main_1_49_reg;
	end
	/* main: %1*/
	/*   %93 = sub i32 %91, %92*/
	else if ((cur_state == LEGUP_F_main_BB__1_37)) begin
		main_signed_subtract_32_0_op0 = main_1_91_reg;
	end
	/* main: %quantl.exit.i*/
	/*   %129 = sub nsw i32 0, %126*/
	else if ((cur_state == LEGUP_F_main_BB_quantlexiti_48)) begin
		main_signed_subtract_32_0_op0 = 32'd0;
	end
	/* main: %quantl.exit.i*/
	/*   %122 = sub i32 9, %119*/
	else if ((cur_state == LEGUP_F_main_BB_quantlexiti_53)) begin
		main_signed_subtract_32_0_op0 = 32'd9;
	end
	/* main: %quantl.exit.i*/
	/*   %145 = sub nsw i32 15360, %...i10.i*/
	else if ((cur_state == LEGUP_F_main_BB_quantlexiti_56)) begin
		main_signed_subtract_32_0_op0 = 32'd15360;
	end
	/* main: %quantl.exit.i*/
	/*   %198 = sub nsw i32 %51, %197*/
	else if ((cur_state == LEGUP_F_main_BB_quantlexiti_70)) begin
		main_signed_subtract_32_0_op0 = main_1_51_reg;
	end
	/* main: %quantl.exit.i*/
	/*   %227 = sub i32 11, %224*/
	else if ((cur_state == LEGUP_F_main_BB_quantlexiti_74)) begin
		main_signed_subtract_32_0_op0 = 32'd11;
	end
	/* main: %quantl.exit.i*/
	/*   %250 = sub nsw i32 15360, %...i.i6*/
	else if ((cur_state == LEGUP_F_main_BB_quantlexiti_77)) begin
		main_signed_subtract_32_0_op0 = 32'd15360;
	end
	/* main: %.preheader.i*/
	/*   %343 = sub nsw i32 0, %340*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderi_101)) begin
		main_signed_subtract_32_0_op0 = 32'd0;
	end
	/* main: %.preheader.i*/
	/*   %336 = sub i32 9, %333*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderi_137)) begin
		main_signed_subtract_32_0_op0 = 32'd9;
	end
	/* main: %.preheader.i*/
	/*   %359 = sub nsw i32 15360, %...i9.i*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderi_140)) begin
		main_signed_subtract_32_0_op0 = 32'd15360;
	end
	/* main: %.preheader.i*/
	/*   %428 = sub i32 11, %425*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderi_143)) begin
		main_signed_subtract_32_0_op0 = 32'd11;
	end
	/* main: %.preheader.i*/
	/*   %456 = sub nsw i32 %323, %455*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderi_154)) begin
		main_signed_subtract_32_0_op0 = main_preheaderi_323_reg;
	end
	/* main: %.preheader.i*/
	/*   %451 = sub nsw i32 15360, %...i.i*/
	else /* if ((cur_state == LEGUP_F_main_BB_preheaderi_157)) */ begin
		main_signed_subtract_32_0_op0 = 32'd15360;
	end
end
always @(*) begin
	/* main: %1*/
	/*   %50 = sub nsw i32 %46, %47*/
	if ((cur_state == LEGUP_F_main_BB__1_29)) begin
		main_signed_subtract_32_0_op1 = main_1_47;
	end
	/* main: %1*/
	/*   %91 = sub nsw i32 %49, %90*/
	else if ((cur_state == LEGUP_F_main_BB__1_36)) begin
		main_signed_subtract_32_0_op1 = main_1_90;
	end
	/* main: %1*/
	/*   %93 = sub i32 %91, %92*/
	else if ((cur_state == LEGUP_F_main_BB__1_37)) begin
		main_signed_subtract_32_0_op1 = main_1_92;
	end
	/* main: %quantl.exit.i*/
	/*   %129 = sub nsw i32 0, %126*/
	else if ((cur_state == LEGUP_F_main_BB_quantlexiti_48)) begin
		main_signed_subtract_32_0_op1 = main_quantlexiti_126;
	end
	/* main: %quantl.exit.i*/
	/*   %122 = sub i32 9, %119*/
	else if ((cur_state == LEGUP_F_main_BB_quantlexiti_53)) begin
		main_signed_subtract_32_0_op1 = main_quantlexiti_119;
	end
	/* main: %quantl.exit.i*/
	/*   %145 = sub nsw i32 15360, %...i10.i*/
	else if ((cur_state == LEGUP_F_main_BB_quantlexiti_56)) begin
		main_signed_subtract_32_0_op1 = main_quantlexiti_i10i;
	end
	/* main: %quantl.exit.i*/
	/*   %198 = sub nsw i32 %51, %197*/
	else if ((cur_state == LEGUP_F_main_BB_quantlexiti_70)) begin
		main_signed_subtract_32_0_op1 = main_quantlexiti_197;
	end
	/* main: %quantl.exit.i*/
	/*   %227 = sub i32 11, %224*/
	else if ((cur_state == LEGUP_F_main_BB_quantlexiti_74)) begin
		main_signed_subtract_32_0_op1 = main_quantlexiti_224;
	end
	/* main: %quantl.exit.i*/
	/*   %250 = sub nsw i32 15360, %...i.i6*/
	else if ((cur_state == LEGUP_F_main_BB_quantlexiti_77)) begin
		main_signed_subtract_32_0_op1 = main_quantlexiti_ii6;
	end
	/* main: %.preheader.i*/
	/*   %343 = sub nsw i32 0, %340*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderi_101)) begin
		main_signed_subtract_32_0_op1 = main_preheaderi_340;
	end
	/* main: %.preheader.i*/
	/*   %336 = sub i32 9, %333*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderi_137)) begin
		main_signed_subtract_32_0_op1 = main_preheaderi_333;
	end
	/* main: %.preheader.i*/
	/*   %359 = sub nsw i32 15360, %...i9.i*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderi_140)) begin
		main_signed_subtract_32_0_op1 = main_preheaderi_i9i;
	end
	/* main: %.preheader.i*/
	/*   %428 = sub i32 11, %425*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderi_143)) begin
		main_signed_subtract_32_0_op1 = main_preheaderi_425;
	end
	/* main: %.preheader.i*/
	/*   %456 = sub nsw i32 %323, %455*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderi_154)) begin
		main_signed_subtract_32_0_op1 = main_preheaderi_455;
	end
	/* main: %.preheader.i*/
	/*   %451 = sub nsw i32 15360, %...i.i*/
	else /* if ((cur_state == LEGUP_F_main_BB_preheaderi_157)) */ begin
		main_signed_subtract_32_0_op1 = main_preheaderi_ii_var1;
	end
end
always @(*) begin
	main_signed_subtract_32_0 = (main_signed_subtract_32_0_op0 - main_signed_subtract_32_0_op1);
end
always @(*) begin
	/* main: %1*/
	/*   %95 = sub nsw i32 0, %93*/
	if ((cur_state == LEGUP_F_main_BB__1_37)) begin
		main_signed_subtract_32_1_op0 = 32'd0;
	end
	/* main: %quantl.exit.i*/
	/*   %234 = sub nsw i32 0, %231*/
	else if ((cur_state == LEGUP_F_main_BB_quantlexiti_48)) begin
		main_signed_subtract_32_1_op0 = 32'd0;
	end
	/* main: %quantl.exit.i*/
	/*   %147 = sub nsw i32 0, %145*/
	else if ((cur_state == LEGUP_F_main_BB_quantlexiti_56)) begin
		main_signed_subtract_32_1_op0 = 32'd0;
	end
	/* main: %quantl.exit.i*/
	/*   %205 = sub nsw i32 0, %198*/
	else if ((cur_state == LEGUP_F_main_BB_quantlexiti_70)) begin
		main_signed_subtract_32_1_op0 = 32'd0;
	end
	/* main: %quantl.exit.i*/
	/*   %252 = sub nsw i32 0, %250*/
	else if ((cur_state == LEGUP_F_main_BB_quantlexiti_77)) begin
		main_signed_subtract_32_1_op0 = 32'd0;
	end
	/* main: %.preheader.i*/
	/*   %435 = sub nsw i32 0, %432*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderi_101)) begin
		main_signed_subtract_32_1_op0 = 32'd0;
	end
	/* main: %.preheader.i*/
	/*   %361 = sub nsw i32 0, %359*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderi_140)) begin
		main_signed_subtract_32_1_op0 = 32'd0;
	end
	/* main: %.preheader.i*/
	/*   %453 = sub nsw i32 0, %451*/
	else /* if ((cur_state == LEGUP_F_main_BB_preheaderi_157)) */ begin
		main_signed_subtract_32_1_op0 = 32'd0;
	end
end
always @(*) begin
	/* main: %1*/
	/*   %95 = sub nsw i32 0, %93*/
	if ((cur_state == LEGUP_F_main_BB__1_37)) begin
		main_signed_subtract_32_1_op1 = main_1_93;
	end
	/* main: %quantl.exit.i*/
	/*   %234 = sub nsw i32 0, %231*/
	else if ((cur_state == LEGUP_F_main_BB_quantlexiti_48)) begin
		main_signed_subtract_32_1_op1 = main_quantlexiti_231;
	end
	/* main: %quantl.exit.i*/
	/*   %147 = sub nsw i32 0, %145*/
	else if ((cur_state == LEGUP_F_main_BB_quantlexiti_56)) begin
		main_signed_subtract_32_1_op1 = main_quantlexiti_145;
	end
	/* main: %quantl.exit.i*/
	/*   %205 = sub nsw i32 0, %198*/
	else if ((cur_state == LEGUP_F_main_BB_quantlexiti_70)) begin
		main_signed_subtract_32_1_op1 = main_quantlexiti_198;
	end
	/* main: %quantl.exit.i*/
	/*   %252 = sub nsw i32 0, %250*/
	else if ((cur_state == LEGUP_F_main_BB_quantlexiti_77)) begin
		main_signed_subtract_32_1_op1 = main_quantlexiti_250;
	end
	/* main: %.preheader.i*/
	/*   %435 = sub nsw i32 0, %432*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderi_101)) begin
		main_signed_subtract_32_1_op1 = main_preheaderi_432;
	end
	/* main: %.preheader.i*/
	/*   %361 = sub nsw i32 0, %359*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderi_140)) begin
		main_signed_subtract_32_1_op1 = main_preheaderi_359;
	end
	/* main: %.preheader.i*/
	/*   %453 = sub nsw i32 0, %451*/
	else /* if ((cur_state == LEGUP_F_main_BB_preheaderi_157)) */ begin
		main_signed_subtract_32_1_op1 = main_preheaderi_451;
	end
end
always @(*) begin
	main_signed_subtract_32_1 = (main_signed_subtract_32_1_op0 - main_signed_subtract_32_1_op1);
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %257 = sdiv i32 %i.02.i, 2*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_48)) begin
		main_signed_divide_32_0_op0 = main_1_i02i_reg;
	end
	/* main: %.preheader.i*/
	/*   %263 = sdiv i32 %i.11.i, 2*/
	else /* if ((cur_state == LEGUP_F_main_BB_preheaderi_101)) */ begin
		main_signed_divide_32_0_op0 = main_preheaderi_i11i_reg;
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %257 = sdiv i32 %i.02.i, 2*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_48)) begin
		main_signed_divide_32_0_op1 = 32'd2;
	end
	/* main: %.preheader.i*/
	/*   %263 = sdiv i32 %i.11.i, 2*/
	else /* if ((cur_state == LEGUP_F_main_BB_preheaderi_101)) */ begin
		main_signed_divide_32_0_op1 = 32'd2;
	end
end
always @(*) begin
	lpm_divide_main_preheaderi_263_en = ((memory_controller_waitrequest == 0) & (legup_function_call == 0));
end
always @(*) begin
	lpm_divide_main_preheaderi_263_out = lpm_divide_main_preheaderi_263_temp_out;
end
always @(*) begin
	main_signed_divide_32_0 = lpm_divide_main_preheaderi_263_out;
end
always @(*) begin
	/* main: %1*/
	/*   %46 = add nsw i32 %43, %42*/
	if ((cur_state == LEGUP_F_main_BB__1_29)) begin
		main_signed_add_32_2_op0 = main_1_43;
	end
	/* main: %1*/
	/*   %70 = add i32 %67, %68*/
	else if ((cur_state == LEGUP_F_main_BB__1_31)) begin
		main_signed_add_32_2_op0 = main_1_67;
	end
	/* main: %quantl.exit.i*/
	/*   %249 = add nsw i32 %246, 192*/
	else if ((cur_state == LEGUP_F_main_BB_quantlexiti_49)) begin
		main_signed_add_32_2_op0 = main_quantlexiti_246;
	end
	/* main: %quantl.exit.i*/
	/*   %137 = add nsw i32 %wd4.0.i8.i, %134*/
	else if ((cur_state == LEGUP_F_main_BB_quantlexiti_55)) begin
		main_signed_add_32_2_op0 = main_quantlexiti_wd40i8i;
	end
	/* main: %quantl.exit.i*/
	/*   %176 = add i32 %175, %174*/
	else if ((cur_state == LEGUP_F_main_BB_quantlexiti_66)) begin
		main_signed_add_32_2_op0 = main_quantlexiti_175;
	end
	/* main: %quantl.exit.i*/
	/*   %197 = add nsw i32 %196, %193*/
	else if ((cur_state == LEGUP_F_main_BB_quantlexiti_70)) begin
		main_signed_add_32_2_op0 = main_quantlexiti_196_reg;
	end
	/* main: %quantl.exit.i*/
	/*   %242 = add nsw i32 %wd4.0.i.i4, %239*/
	else if ((cur_state == LEGUP_F_main_BB_quantlexiti_76)) begin
		main_signed_add_32_2_op0 = main_quantlexiti_wd40ii4;
	end
	/* main: %.preheader.i*/
	/*   %gep57 = add i32 %gep_int55, %gep_array56*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderi_102)) begin
		main_signed_add_32_2_op0 = main_preheaderi_gep_int55_reg;
	end
	/* main: %.preheader.i*/
	/*   %294 = add i32 %293, %292*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderi_109)) begin
		main_signed_add_32_2_op0 = main_preheaderi_293;
	end
	/* main: %.preheader.i*/
	/*   %315 = add nsw i32 %314, %311*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderi_113)) begin
		main_signed_add_32_2_op0 = main_preheaderi_314_reg;
	end
	/* main: %.preheader.i*/
	/*   %gep48 = add i32 %gep_int46, %gep_array47*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderi_136)) begin
		main_signed_add_32_2_op0 = main_preheaderi_gep_int46_reg;
	end
	/* main: %.preheader.i*/
	/*   %351 = add nsw i32 %wd4.0.i7.i, %348*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderi_139)) begin
		main_signed_add_32_2_op0 = main_preheaderi_wd40i7i;
	end
	/* main: %.preheader.i*/
	/*   %390 = add i32 %389, %388*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderi_150)) begin
		main_signed_add_32_2_op0 = main_preheaderi_389;
	end
	/* main: %.preheader.i*/
	/*   %411 = add nsw i32 %410, %407*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderi_154)) begin
		main_signed_add_32_2_op0 = main_preheaderi_410_reg;
	end
	/* main: %.preheader.i*/
	/*   %apl1.0.i.i = add nsw i32 %450, %449*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderi_156)) begin
		main_signed_add_32_2_op0 = main_preheaderi_450_reg;
	end
	/* main: %.preheader.i*/
	/*   %497 = add nsw i32 %496, %493*/
	else /* if ((cur_state == LEGUP_F_main_BB_preheaderi_157)) */ begin
		main_signed_add_32_2_op0 = main_preheaderi_496_reg;
	end
end
always @(*) begin
	/* main: %1*/
	/*   %46 = add nsw i32 %43, %42*/
	if ((cur_state == LEGUP_F_main_BB__1_29)) begin
		main_signed_add_32_2_op1 = main_1_42;
	end
	/* main: %1*/
	/*   %70 = add i32 %67, %68*/
	else if ((cur_state == LEGUP_F_main_BB__1_31)) begin
		main_signed_add_32_2_op1 = main_1_68;
	end
	/* main: %quantl.exit.i*/
	/*   %249 = add nsw i32 %246, 192*/
	else if ((cur_state == LEGUP_F_main_BB_quantlexiti_49)) begin
		main_signed_add_32_2_op1 = 32'd192;
	end
	/* main: %quantl.exit.i*/
	/*   %137 = add nsw i32 %wd4.0.i8.i, %134*/
	else if ((cur_state == LEGUP_F_main_BB_quantlexiti_55)) begin
		main_signed_add_32_2_op1 = main_quantlexiti_134;
	end
	/* main: %quantl.exit.i*/
	/*   %176 = add i32 %175, %174*/
	else if ((cur_state == LEGUP_F_main_BB_quantlexiti_66)) begin
		main_signed_add_32_2_op1 = main_quantlexiti_174;
	end
	/* main: %quantl.exit.i*/
	/*   %197 = add nsw i32 %196, %193*/
	else if ((cur_state == LEGUP_F_main_BB_quantlexiti_70)) begin
		main_signed_add_32_2_op1 = main_quantlexiti_193;
	end
	/* main: %quantl.exit.i*/
	/*   %242 = add nsw i32 %wd4.0.i.i4, %239*/
	else if ((cur_state == LEGUP_F_main_BB_quantlexiti_76)) begin
		main_signed_add_32_2_op1 = main_quantlexiti_239;
	end
	/* main: %.preheader.i*/
	/*   %gep57 = add i32 %gep_int55, %gep_array56*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderi_102)) begin
		main_signed_add_32_2_op1 = main_preheaderi_gep_array56_reg;
	end
	/* main: %.preheader.i*/
	/*   %294 = add i32 %293, %292*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderi_109)) begin
		main_signed_add_32_2_op1 = main_preheaderi_292;
	end
	/* main: %.preheader.i*/
	/*   %315 = add nsw i32 %314, %311*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderi_113)) begin
		main_signed_add_32_2_op1 = main_preheaderi_311;
	end
	/* main: %.preheader.i*/
	/*   %gep48 = add i32 %gep_int46, %gep_array47*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderi_136)) begin
		main_signed_add_32_2_op1 = main_preheaderi_gep_array47_reg;
	end
	/* main: %.preheader.i*/
	/*   %351 = add nsw i32 %wd4.0.i7.i, %348*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderi_139)) begin
		main_signed_add_32_2_op1 = main_preheaderi_348;
	end
	/* main: %.preheader.i*/
	/*   %390 = add i32 %389, %388*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderi_150)) begin
		main_signed_add_32_2_op1 = main_preheaderi_388;
	end
	/* main: %.preheader.i*/
	/*   %411 = add nsw i32 %410, %407*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderi_154)) begin
		main_signed_add_32_2_op1 = main_preheaderi_407;
	end
	/* main: %.preheader.i*/
	/*   %apl1.0.i.i = add nsw i32 %450, %449*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderi_156)) begin
		main_signed_add_32_2_op1 = main_preheaderi_449;
	end
	/* main: %.preheader.i*/
	/*   %497 = add nsw i32 %496, %493*/
	else /* if ((cur_state == LEGUP_F_main_BB_preheaderi_157)) */ begin
		main_signed_add_32_2_op1 = main_preheaderi_493;
	end
end
always @(*) begin
	main_signed_add_32_2 = (main_signed_add_32_2_op0 + main_signed_add_32_2_op1);
end
always @(*) begin
	/* main: %1*/
	/*   %43 = mul nsw i32 %34, -44*/
	if ((cur_state == LEGUP_F_main_BB__1_28)) begin
		main_signed_multiply_32_1_op0 = main_1_34_reg;
	end
	/* main: %.preheader.i*/
	/*   %321 = mul nsw i32 %262, %dec_detl.0*/
	else /* if ((cur_state == LEGUP_F_main_BB_preheaderi_101)) */ begin
		main_signed_multiply_32_1_op0 = main_preheaderipreheader_262_reg;
	end
end
always @(*) begin
	/* main: %1*/
	/*   %43 = mul nsw i32 %34, -44*/
	if ((cur_state == LEGUP_F_main_BB__1_28)) begin
		main_signed_multiply_32_1_op1 = -32'd44;
	end
	/* main: %.preheader.i*/
	/*   %321 = mul nsw i32 %262, %dec_detl.0*/
	else /* if ((cur_state == LEGUP_F_main_BB_preheaderi_101)) */ begin
		main_signed_multiply_32_1_op1 = main_preheaderi_dec_detl0_reg;
	end
end
always @(*) begin
	lpm_mult_main_preheaderi_321_en = ((memory_controller_waitrequest == 0) & (legup_function_call == 0));
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %321 = mul nsw i32 %262, %dec_detl.0*/
	if ((lpm_mult_main_preheaderi_321_en == 1'd1)) begin
		main_preheaderi_321_stage0_reg <= (main_signed_multiply_32_1_op0 * main_signed_multiply_32_1_op1);
	end
end
always @(*) begin
	main_signed_multiply_32_1 = main_preheaderi_321_stage0_reg;
end
always @(*) begin
	/* main: %1*/
	/*   %60 = add nsw i32 %58, %59*/
	if ((cur_state == LEGUP_F_main_BB__1_29)) begin
		main_signed_add_32_8_op0 = main_1_58;
	end
	/* main: %1*/
	/*   %63 = add nsw i32 %60, %62*/
	else if ((cur_state == LEGUP_F_main_BB__1_31)) begin
		main_signed_add_32_8_op0 = main_1_60_reg;
	end
	/* main: %quantl.exit.i*/
	/*   %apl1.0.i4.i = add nsw i32 %144, %143*/
	else if ((cur_state == LEGUP_F_main_BB_quantlexiti_55)) begin
		main_signed_add_32_8_op0 = main_quantlexiti_144_reg;
	end
	/* main: %quantl.exit.i*/
	/*   %201 = add nsw i32 %200, 3*/
	else if ((cur_state == LEGUP_F_main_BB_quantlexiti_70)) begin
		main_signed_add_32_8_op0 = main_quantlexiti_200;
	end
	/* main: %quantl.exit.i*/
	/*   %apl1.0.i.i7 = add nsw i32 %249, %248*/
	else if ((cur_state == LEGUP_F_main_BB_quantlexiti_76)) begin
		main_signed_add_32_8_op0 = main_quantlexiti_249_reg;
	end
	/* main: %.preheader.i*/
	/*   %gep60 = add i32 %gep_int58, %gep_array59*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderi_102)) begin
		main_signed_add_32_8_op0 = main_preheaderi_gep_int58_reg;
	end
	/* main: %.preheader.i*/
	/*   %323 = add nsw i32 %322, %315*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderi_113)) begin
		main_signed_add_32_8_op0 = main_preheaderi_322_reg;
	end
	/* main: %.preheader.i*/
	/*   %gep51 = add i32 %gep_int49, %gep_array50*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderi_136)) begin
		main_signed_add_32_8_op0 = main_preheaderi_gep_int49_reg;
	end
	/* main: %.preheader.i*/
	/*   %apl1.0.i3.i = add nsw i32 %358, %357*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderi_139)) begin
		main_signed_add_32_8_op0 = main_preheaderi_358_reg;
	end
	/* main: %.preheader.i*/
	/*   %431 = add nsw i32 %407, %415*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderi_154)) begin
		main_signed_add_32_8_op0 = main_preheaderi_407;
	end
	/* main: %.preheader.i*/
	/*   %471 = add nsw i32 %470, %467*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderi_156)) begin
		main_signed_add_32_8_op0 = main_preheaderi_470_reg;
	end
	/* main: %.preheader.i*/
	/*   %499 = add nsw i32 %498, %495*/
	else /* if ((cur_state == LEGUP_F_main_BB_preheaderi_157)) */ begin
		main_signed_add_32_8_op0 = main_preheaderi_498_reg;
	end
end
always @(*) begin
	/* main: %1*/
	/*   %60 = add nsw i32 %58, %59*/
	if ((cur_state == LEGUP_F_main_BB__1_29)) begin
		main_signed_add_32_8_op1 = main_1_59;
	end
	/* main: %1*/
	/*   %63 = add nsw i32 %60, %62*/
	else if ((cur_state == LEGUP_F_main_BB__1_31)) begin
		main_signed_add_32_8_op1 = main_1_62;
	end
	/* main: %quantl.exit.i*/
	/*   %apl1.0.i4.i = add nsw i32 %144, %143*/
	else if ((cur_state == LEGUP_F_main_BB_quantlexiti_55)) begin
		main_signed_add_32_8_op1 = main_quantlexiti_143;
	end
	/* main: %quantl.exit.i*/
	/*   %201 = add nsw i32 %200, 3*/
	else if ((cur_state == LEGUP_F_main_BB_quantlexiti_70)) begin
		main_signed_add_32_8_op1 = 32'd3;
	end
	/* main: %quantl.exit.i*/
	/*   %apl1.0.i.i7 = add nsw i32 %249, %248*/
	else if ((cur_state == LEGUP_F_main_BB_quantlexiti_76)) begin
		main_signed_add_32_8_op1 = main_quantlexiti_248;
	end
	/* main: %.preheader.i*/
	/*   %gep60 = add i32 %gep_int58, %gep_array59*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderi_102)) begin
		main_signed_add_32_8_op1 = main_preheaderi_gep_array59_reg;
	end
	/* main: %.preheader.i*/
	/*   %323 = add nsw i32 %322, %315*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderi_113)) begin
		main_signed_add_32_8_op1 = main_preheaderi_315;
	end
	/* main: %.preheader.i*/
	/*   %gep51 = add i32 %gep_int49, %gep_array50*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderi_136)) begin
		main_signed_add_32_8_op1 = main_preheaderi_gep_array50_reg;
	end
	/* main: %.preheader.i*/
	/*   %apl1.0.i3.i = add nsw i32 %358, %357*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderi_139)) begin
		main_signed_add_32_8_op1 = main_preheaderi_357;
	end
	/* main: %.preheader.i*/
	/*   %431 = add nsw i32 %407, %415*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderi_154)) begin
		main_signed_add_32_8_op1 = main_preheaderi_415_reg;
	end
	/* main: %.preheader.i*/
	/*   %471 = add nsw i32 %470, %467*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderi_156)) begin
		main_signed_add_32_8_op1 = main_preheaderi_467;
	end
	/* main: %.preheader.i*/
	/*   %499 = add nsw i32 %498, %495*/
	else /* if ((cur_state == LEGUP_F_main_BB_preheaderi_157)) */ begin
		main_signed_add_32_8_op1 = main_preheaderi_495;
	end
end
always @(*) begin
	main_signed_add_32_8 = (main_signed_add_32_8_op0 + main_signed_add_32_8_op1);
end
always @(*) begin
	/* main: %1*/
	/*   %44 = mul nsw i32 %33, -44*/
	if ((cur_state == LEGUP_F_main_BB__1_28)) begin
		main_signed_multiply_32_2_op0 = main_1_33_reg;
	end
	/* main: %.preheader.i*/
	/*   %324 = mul nsw i32 %dec_nbl.0, 127*/
	else /* if ((cur_state == LEGUP_F_main_BB_preheaderi_101)) */ begin
		main_signed_multiply_32_2_op0 = main_preheaderi_dec_nbl0_reg;
	end
end
always @(*) begin
	/* main: %1*/
	/*   %44 = mul nsw i32 %33, -44*/
	if ((cur_state == LEGUP_F_main_BB__1_28)) begin
		main_signed_multiply_32_2_op1 = -32'd44;
	end
	/* main: %.preheader.i*/
	/*   %324 = mul nsw i32 %dec_nbl.0, 127*/
	else /* if ((cur_state == LEGUP_F_main_BB_preheaderi_101)) */ begin
		main_signed_multiply_32_2_op1 = 32'd127;
	end
end
always @(*) begin
	lpm_mult_main_preheaderi_324_en = ((memory_controller_waitrequest == 0) & (legup_function_call == 0));
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %324 = mul nsw i32 %dec_nbl.0, 127*/
	if ((lpm_mult_main_preheaderi_324_en == 1'd1)) begin
		main_preheaderi_324_stage0_reg <= (main_signed_multiply_32_2_op0 * main_signed_multiply_32_2_op1);
	end
end
always @(*) begin
	main_signed_multiply_32_2 = main_preheaderi_324_stage0_reg;
end
always @(*) begin
	/* main: %1*/
	/*   %57 = mul nsw i32 %5, %6*/
	if ((cur_state == LEGUP_F_main_BB__1_28)) begin
		main_signed_multiply_32_7_op0 = main_1_5_reg;
	end
	/* main: %quantl.exit.i*/
	/*   %195 = mul nsw i32 %194, %ah2.0*/
	else if ((cur_state == LEGUP_F_main_BB_quantlexiti_48)) begin
		main_signed_multiply_32_7_op0 = main_quantlexiti_194;
	end
	/* main: %quantl.exit.i*/
	/*   %131 = mul nsw i32 %plt2.0, %125*/
	else if ((cur_state == LEGUP_F_main_BB_quantlexiti_54)) begin
		main_signed_multiply_32_7_op0 = main_1_plt20_reg;
	end
	/* main: %quantl.exit.i*/
	/*   %236 = mul nsw i32 %ph2.0, %230*/
	else if ((cur_state == LEGUP_F_main_BB_quantlexiti_75)) begin
		main_signed_multiply_32_7_op0 = main_1_ph20_reg;
	end
	/* main: %.preheader.i*/
	/*   %441 = mul nsw i32 %dec_ah2.0, 127*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderi_101)) begin
		main_signed_multiply_32_7_op0 = main_preheaderi_dec_ah20_reg;
	end
	/* main: %.preheader.i*/
	/*   %345 = mul nsw i32 %dec_plt2.0, %339*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderi_138)) begin
		main_signed_multiply_32_7_op0 = main_preheaderi_dec_plt20_reg;
	end
	/* main: %.preheader.i*/
	/*   %437 = mul nsw i32 %dec_ph2.0, %431*/
	else /* if ((cur_state == LEGUP_F_main_BB_preheaderi_154)) */ begin
		main_signed_multiply_32_7_op0 = main_preheaderi_dec_ph20_reg;
	end
end
always @(*) begin
	/* main: %1*/
	/*   %57 = mul nsw i32 %5, %6*/
	if ((cur_state == LEGUP_F_main_BB__1_28)) begin
		main_signed_multiply_32_7_op1 = main_1_6_reg;
	end
	/* main: %quantl.exit.i*/
	/*   %195 = mul nsw i32 %194, %ah2.0*/
	else if ((cur_state == LEGUP_F_main_BB_quantlexiti_48)) begin
		main_signed_multiply_32_7_op1 = main_1_ah20_reg;
	end
	/* main: %quantl.exit.i*/
	/*   %131 = mul nsw i32 %plt2.0, %125*/
	else if ((cur_state == LEGUP_F_main_BB_quantlexiti_54)) begin
		main_signed_multiply_32_7_op1 = main_quantlexiti_125;
	end
	/* main: %quantl.exit.i*/
	/*   %236 = mul nsw i32 %ph2.0, %230*/
	else if ((cur_state == LEGUP_F_main_BB_quantlexiti_75)) begin
		main_signed_multiply_32_7_op1 = main_quantlexiti_230;
	end
	/* main: %.preheader.i*/
	/*   %441 = mul nsw i32 %dec_ah2.0, 127*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderi_101)) begin
		main_signed_multiply_32_7_op1 = 32'd127;
	end
	/* main: %.preheader.i*/
	/*   %345 = mul nsw i32 %dec_plt2.0, %339*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderi_138)) begin
		main_signed_multiply_32_7_op1 = main_preheaderi_339;
	end
	/* main: %.preheader.i*/
	/*   %437 = mul nsw i32 %dec_ph2.0, %431*/
	else /* if ((cur_state == LEGUP_F_main_BB_preheaderi_154)) */ begin
		main_signed_multiply_32_7_op1 = main_preheaderi_431;
	end
end
always @(*) begin
	lpm_mult_main_preheaderi_345_en = ((memory_controller_waitrequest == 0) & (legup_function_call == 0));
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %345 = mul nsw i32 %dec_plt2.0, %339*/
	if ((lpm_mult_main_preheaderi_345_en == 1'd1)) begin
		main_preheaderi_345_stage0_reg <= (main_signed_multiply_32_7_op0 * main_signed_multiply_32_7_op1);
	end
end
always @(*) begin
	main_signed_multiply_32_7 = main_preheaderi_345_stage0_reg;
end
always @(*) begin
	/* main: %1*/
	/*   %42 = mul nsw i32 %35, 212*/
	if ((cur_state == LEGUP_F_main_BB__1_28)) begin
		main_signed_multiply_32_0_op0 = main_1_35_reg;
	end
	/* main: %.preheader.i*/
	/*   %313 = mul nsw i32 %312, %dec_al2.0*/
	else /* if ((cur_state == LEGUP_F_main_BB_preheaderi_101)) */ begin
		main_signed_multiply_32_0_op0 = main_preheaderi_312;
	end
end
always @(*) begin
	/* main: %1*/
	/*   %42 = mul nsw i32 %35, 212*/
	if ((cur_state == LEGUP_F_main_BB__1_28)) begin
		main_signed_multiply_32_0_op1 = 32'd212;
	end
	/* main: %.preheader.i*/
	/*   %313 = mul nsw i32 %312, %dec_al2.0*/
	else /* if ((cur_state == LEGUP_F_main_BB_preheaderi_101)) */ begin
		main_signed_multiply_32_0_op1 = main_preheaderi_dec_al20_reg;
	end
end
always @(*) begin
	lpm_mult_main_1_42_en = ((memory_controller_waitrequest == 0) & (legup_function_call == 0));
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %42 = mul nsw i32 %35, 212*/
	if ((lpm_mult_main_1_42_en == 1'd1)) begin
		main_1_42_stage0_reg <= (main_signed_multiply_32_0_op0 * main_signed_multiply_32_0_op1);
	end
end
always @(*) begin
	main_signed_multiply_32_0 = main_1_42_stage0_reg;
end
always @(*) begin
	/* main: %1*/
	/*   %45 = mul nsw i32 %32, 12*/
	if ((cur_state == LEGUP_F_main_BB__1_28)) begin
		main_signed_multiply_32_3_op0 = main_1_32_reg;
	end
	/* main: %.preheader.i*/
	/*   %349 = mul nsw i32 %dec_al2.0, 127*/
	else /* if ((cur_state == LEGUP_F_main_BB_preheaderi_101)) */ begin
		main_signed_multiply_32_3_op0 = main_preheaderi_dec_al20_reg;
	end
end
always @(*) begin
	/* main: %1*/
	/*   %45 = mul nsw i32 %32, 12*/
	if ((cur_state == LEGUP_F_main_BB__1_28)) begin
		main_signed_multiply_32_3_op1 = 32'd12;
	end
	/* main: %.preheader.i*/
	/*   %349 = mul nsw i32 %dec_al2.0, 127*/
	else /* if ((cur_state == LEGUP_F_main_BB_preheaderi_101)) */ begin
		main_signed_multiply_32_3_op1 = 32'd127;
	end
end
always @(*) begin
	lpm_mult_main_1_45_en = ((memory_controller_waitrequest == 0) & (legup_function_call == 0));
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %45 = mul nsw i32 %32, 12*/
	if ((lpm_mult_main_1_45_en == 1'd1)) begin
		main_1_45_stage0_reg <= (main_signed_multiply_32_3_op0 * main_signed_multiply_32_3_op1);
	end
end
always @(*) begin
	main_signed_multiply_32_3 = main_1_45_stage0_reg;
end
always @(*) begin
	/* main: %1*/
	/*   %55 = mul nsw i32 %7, %8*/
	if ((cur_state == LEGUP_F_main_BB__1_28)) begin
		main_signed_multiply_32_6_op0 = main_1_7_reg;
	end
	/* main: %quantl.exit.i*/
	/*   %140 = mul nsw i32 %al1.0, 255*/
	else if ((cur_state == LEGUP_F_main_BB_quantlexiti_48)) begin
		main_signed_multiply_32_6_op0 = main_1_al10_reg;
	end
	/* main: %.preheader.i*/
	/*   %416 = mul nsw i32 %dec_nbh.0, 127*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderi_101)) begin
		main_signed_multiply_32_6_op0 = main_preheaderi_dec_nbh0_reg;
	end
	/* main: %.preheader.i*/
	/*   %459 = mul nsw i32 %457, -44*/
	else /* if ((cur_state == LEGUP_F_main_BB_preheaderi_154)) */ begin
		main_signed_multiply_32_6_op0 = main_preheaderi_457;
	end
end
always @(*) begin
	/* main: %1*/
	/*   %55 = mul nsw i32 %7, %8*/
	if ((cur_state == LEGUP_F_main_BB__1_28)) begin
		main_signed_multiply_32_6_op1 = main_1_8_reg;
	end
	/* main: %quantl.exit.i*/
	/*   %140 = mul nsw i32 %al1.0, 255*/
	else if ((cur_state == LEGUP_F_main_BB_quantlexiti_48)) begin
		main_signed_multiply_32_6_op1 = 32'd255;
	end
	/* main: %.preheader.i*/
	/*   %416 = mul nsw i32 %dec_nbh.0, 127*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderi_101)) begin
		main_signed_multiply_32_6_op1 = 32'd127;
	end
	/* main: %.preheader.i*/
	/*   %459 = mul nsw i32 %457, -44*/
	else /* if ((cur_state == LEGUP_F_main_BB_preheaderi_154)) */ begin
		main_signed_multiply_32_6_op1 = -32'd44;
	end
end
always @(*) begin
	lpm_mult_main_quantlexiti_140_en = ((memory_controller_waitrequest == 0) & (legup_function_call == 0));
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %140 = mul nsw i32 %al1.0, 255*/
	if ((lpm_mult_main_quantlexiti_140_en == 1'd1)) begin
		main_quantlexiti_140_stage0_reg <= (main_signed_multiply_32_6_op0 * main_signed_multiply_32_6_op1);
	end
end
always @(*) begin
	main_signed_multiply_32_6 = main_quantlexiti_140_stage0_reg;
end
always @(*) begin
	/* main: %1*/
	/*   %47 = add nsw i32 %45, %44*/
	if ((cur_state == LEGUP_F_main_BB__1_29)) begin
		main_signed_add_32_3_op0 = main_1_45;
	end
	/* main: %quantl.exit.i*/
	/*   %207 = add nsw i32 %200, 2*/
	else if ((cur_state == LEGUP_F_main_BB_quantlexiti_70)) begin
		main_signed_add_32_3_op0 = main_quantlexiti_200;
	end
	/* main: %.preheader.i*/
	/*   %455 = add nsw i32 %415, %411*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderi_154)) begin
		main_signed_add_32_3_op0 = main_preheaderi_415_reg;
	end
	/* main: %.preheader.i*/
	/*   %461 = add nsw i32 %460, %458*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderi_156)) begin
		main_signed_add_32_3_op0 = main_preheaderi_460_reg;
	end
	/* main: %.preheader.i*/
	/*   %501 = add nsw i32 %500, %497*/
	else /* if ((cur_state == LEGUP_F_main_BB_preheaderi_157)) */ begin
		main_signed_add_32_3_op0 = main_preheaderi_500_reg;
	end
end
always @(*) begin
	/* main: %1*/
	/*   %47 = add nsw i32 %45, %44*/
	if ((cur_state == LEGUP_F_main_BB__1_29)) begin
		main_signed_add_32_3_op1 = main_1_44;
	end
	/* main: %quantl.exit.i*/
	/*   %207 = add nsw i32 %200, 2*/
	else if ((cur_state == LEGUP_F_main_BB_quantlexiti_70)) begin
		main_signed_add_32_3_op1 = 32'd2;
	end
	/* main: %.preheader.i*/
	/*   %455 = add nsw i32 %415, %411*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderi_154)) begin
		main_signed_add_32_3_op1 = main_preheaderi_411;
	end
	/* main: %.preheader.i*/
	/*   %461 = add nsw i32 %460, %458*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderi_156)) begin
		main_signed_add_32_3_op1 = main_preheaderi_458;
	end
	/* main: %.preheader.i*/
	/*   %501 = add nsw i32 %500, %497*/
	else /* if ((cur_state == LEGUP_F_main_BB_preheaderi_157)) */ begin
		main_signed_add_32_3_op1 = main_preheaderi_497;
	end
end
always @(*) begin
	main_signed_add_32_3 = (main_signed_add_32_3_op0 + main_signed_add_32_3_op1);
end
always @(*) begin
	/* main: %1*/
	/*   %48 = add nsw i32 %47, %46*/
	if ((cur_state == LEGUP_F_main_BB__1_29)) begin
		main_signed_add_32_4_op0 = main_1_47;
	end
	/* main: %.preheader.i*/
	/*   %457 = add nsw i32 %455, %323*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderi_154)) begin
		main_signed_add_32_4_op0 = main_preheaderi_455;
	end
	/* main: %.preheader.i*/
	/*   %463 = add nsw i32 %462, %459*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderi_156)) begin
		main_signed_add_32_4_op0 = main_preheaderi_462_reg;
	end
	/* main: %.preheader.i*/
	/*   %503 = add nsw i32 %502, %499*/
	else /* if ((cur_state == LEGUP_F_main_BB_preheaderi_157)) */ begin
		main_signed_add_32_4_op0 = main_preheaderi_502_reg;
	end
end
always @(*) begin
	/* main: %1*/
	/*   %48 = add nsw i32 %47, %46*/
	if ((cur_state == LEGUP_F_main_BB__1_29)) begin
		main_signed_add_32_4_op1 = main_1_46;
	end
	/* main: %.preheader.i*/
	/*   %457 = add nsw i32 %455, %323*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderi_154)) begin
		main_signed_add_32_4_op1 = main_preheaderi_323_reg;
	end
	/* main: %.preheader.i*/
	/*   %463 = add nsw i32 %462, %459*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderi_156)) begin
		main_signed_add_32_4_op1 = main_preheaderi_459;
	end
	/* main: %.preheader.i*/
	/*   %503 = add nsw i32 %502, %499*/
	else /* if ((cur_state == LEGUP_F_main_BB_preheaderi_157)) */ begin
		main_signed_add_32_4_op1 = main_preheaderi_499;
	end
end
always @(*) begin
	main_signed_add_32_4 = (main_signed_add_32_4_op0 + main_signed_add_32_4_op1);
end
always @(*) begin
	/* main: %1*/
	/*   %53 = mul nsw i32 %9, %10*/
	if ((cur_state == LEGUP_F_main_BB__1_28)) begin
		main_signed_multiply_32_5_op0 = main_1_9_reg;
	end
	/* main: %quantl.exit.i*/
	/*   %135 = mul nsw i32 %al2.0, 127*/
	else if ((cur_state == LEGUP_F_main_BB_quantlexiti_48)) begin
		main_signed_multiply_32_5_op0 = main_1_al20_reg;
	end
	/* main: %.preheader.i*/
	/*   %409 = mul nsw i32 %408, %dec_ah2.0*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderi_101)) begin
		main_signed_multiply_32_5_op0 = main_preheaderi_408;
	end
	/* main: %.preheader.i*/
	/*   %458 = mul nsw i32 %456, 12*/
	else /* if ((cur_state == LEGUP_F_main_BB_preheaderi_154)) */ begin
		main_signed_multiply_32_5_op0 = main_preheaderi_456;
	end
end
always @(*) begin
	/* main: %1*/
	/*   %53 = mul nsw i32 %9, %10*/
	if ((cur_state == LEGUP_F_main_BB__1_28)) begin
		main_signed_multiply_32_5_op1 = main_1_10_reg;
	end
	/* main: %quantl.exit.i*/
	/*   %135 = mul nsw i32 %al2.0, 127*/
	else if ((cur_state == LEGUP_F_main_BB_quantlexiti_48)) begin
		main_signed_multiply_32_5_op1 = 32'd127;
	end
	/* main: %.preheader.i*/
	/*   %409 = mul nsw i32 %408, %dec_ah2.0*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderi_101)) begin
		main_signed_multiply_32_5_op1 = main_preheaderi_dec_ah20_reg;
	end
	/* main: %.preheader.i*/
	/*   %458 = mul nsw i32 %456, 12*/
	else /* if ((cur_state == LEGUP_F_main_BB_preheaderi_154)) */ begin
		main_signed_multiply_32_5_op1 = 32'd12;
	end
end
always @(*) begin
	lpm_mult_main_1_53_en = ((memory_controller_waitrequest == 0) & (legup_function_call == 0));
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %53 = mul nsw i32 %9, %10*/
	if ((lpm_mult_main_1_53_en == 1'd1)) begin
		main_1_53_stage0_reg <= (main_signed_multiply_32_5_op0 * main_signed_multiply_32_5_op1);
	end
end
always @(*) begin
	main_signed_multiply_32_5 = main_1_53_stage0_reg;
end
always @(*) begin
	/* main: %1*/
	/*   %54 = add nsw i32 %53, %52*/
	if ((cur_state == LEGUP_F_main_BB__1_29)) begin
		main_signed_add_32_5_op0 = main_1_53;
	end
	/* main: %.preheader.i*/
	/*   %465 = add nsw i32 %464, %461*/
	else /* if ((cur_state == LEGUP_F_main_BB_preheaderi_156)) */ begin
		main_signed_add_32_5_op0 = main_preheaderi_464_reg;
	end
end
always @(*) begin
	/* main: %1*/
	/*   %54 = add nsw i32 %53, %52*/
	if ((cur_state == LEGUP_F_main_BB__1_29)) begin
		main_signed_add_32_5_op1 = main_1_52;
	end
	/* main: %.preheader.i*/
	/*   %465 = add nsw i32 %464, %461*/
	else /* if ((cur_state == LEGUP_F_main_BB_preheaderi_156)) */ begin
		main_signed_add_32_5_op1 = main_preheaderi_461;
	end
end
always @(*) begin
	main_signed_add_32_5 = (main_signed_add_32_5_op0 + main_signed_add_32_5_op1);
end
always @(*) begin
	/* main: %1*/
	/*   %56 = add nsw i32 %54, %55*/
	if ((cur_state == LEGUP_F_main_BB__1_29)) begin
		main_signed_add_32_6_op0 = main_1_54;
	end
	/* main: %.preheader.i*/
	/*   %467 = add nsw i32 %466, %463*/
	else /* if ((cur_state == LEGUP_F_main_BB_preheaderi_156)) */ begin
		main_signed_add_32_6_op0 = main_preheaderi_466_reg;
	end
end
always @(*) begin
	/* main: %1*/
	/*   %56 = add nsw i32 %54, %55*/
	if ((cur_state == LEGUP_F_main_BB__1_29)) begin
		main_signed_add_32_6_op1 = main_1_55;
	end
	/* main: %.preheader.i*/
	/*   %467 = add nsw i32 %466, %463*/
	else /* if ((cur_state == LEGUP_F_main_BB_preheaderi_156)) */ begin
		main_signed_add_32_6_op1 = main_preheaderi_463;
	end
end
always @(*) begin
	main_signed_add_32_6 = (main_signed_add_32_6_op0 + main_signed_add_32_6_op1);
end
always @(*) begin
	/* main: %1*/
	/*   %58 = add nsw i32 %56, %57*/
	if ((cur_state == LEGUP_F_main_BB__1_29)) begin
		main_signed_add_32_7_op0 = main_1_56;
	end
	/* main: %.preheader.i*/
	/*   %469 = add nsw i32 %468, %465*/
	else /* if ((cur_state == LEGUP_F_main_BB_preheaderi_156)) */ begin
		main_signed_add_32_7_op0 = main_preheaderi_468_reg;
	end
end
always @(*) begin
	/* main: %1*/
	/*   %58 = add nsw i32 %56, %57*/
	if ((cur_state == LEGUP_F_main_BB__1_29)) begin
		main_signed_add_32_7_op1 = main_1_57;
	end
	/* main: %.preheader.i*/
	/*   %469 = add nsw i32 %468, %465*/
	else /* if ((cur_state == LEGUP_F_main_BB_preheaderi_156)) */ begin
		main_signed_add_32_7_op1 = main_preheaderi_465;
	end
end
always @(*) begin
	main_signed_add_32_7 = (main_signed_add_32_7_op0 + main_signed_add_32_7_op1);
end
always @(*) begin
	/* main: %1*/
	/*   %59 = mul nsw i32 %3, %4*/
	if ((cur_state == LEGUP_F_main_BB__1_28)) begin
		main_signed_multiply_32_8_op0 = main_1_3_reg;
	end
	/* main: %quantl.exit.i*/
	/*   %202 = mul nsw i32 %deth.0, 564*/
	else if ((cur_state == LEGUP_F_main_BB_quantlexiti_48)) begin
		main_signed_multiply_32_8_op0 = main_1_deth0_reg;
	end
	/* main: %.preheader.i*/
	/*   %446 = mul nsw i32 %dec_ah1.0, 255*/
	else /* if ((cur_state == LEGUP_F_main_BB_preheaderi_101)) */ begin
		main_signed_multiply_32_8_op0 = main_preheaderi_dec_ah10_reg;
	end
end
always @(*) begin
	/* main: %1*/
	/*   %59 = mul nsw i32 %3, %4*/
	if ((cur_state == LEGUP_F_main_BB__1_28)) begin
		main_signed_multiply_32_8_op1 = main_1_4_reg;
	end
	/* main: %quantl.exit.i*/
	/*   %202 = mul nsw i32 %deth.0, 564*/
	else if ((cur_state == LEGUP_F_main_BB_quantlexiti_48)) begin
		main_signed_multiply_32_8_op1 = 32'd564;
	end
	/* main: %.preheader.i*/
	/*   %446 = mul nsw i32 %dec_ah1.0, 255*/
	else /* if ((cur_state == LEGUP_F_main_BB_preheaderi_101)) */ begin
		main_signed_multiply_32_8_op1 = 32'd255;
	end
end
always @(*) begin
	lpm_mult_main_1_59_en = ((memory_controller_waitrequest == 0) & (legup_function_call == 0));
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %59 = mul nsw i32 %3, %4*/
	if ((lpm_mult_main_1_59_en == 1'd1)) begin
		main_1_59_stage0_reg <= (main_signed_multiply_32_8_op0 * main_signed_multiply_32_8_op1);
	end
end
always @(*) begin
	main_signed_multiply_32_8 = main_1_59_stage0_reg;
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %240 = mul nsw i32 %ah2.0, 127*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_48)) begin
		main_signed_multiply_32_27_op0 = main_1_ah20_reg;
	end
	/* main: %.preheader.i*/
	/*   %500 = mul nsw i32 %accumc.10.0, -44*/
	else /* if ((cur_state == LEGUP_F_main_BB_preheaderi_101)) */ begin
		main_signed_multiply_32_27_op0 = main_preheaderi_accumc100_reg;
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %240 = mul nsw i32 %ah2.0, 127*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_48)) begin
		main_signed_multiply_32_27_op1 = 32'd127;
	end
	/* main: %.preheader.i*/
	/*   %500 = mul nsw i32 %accumc.10.0, -44*/
	else /* if ((cur_state == LEGUP_F_main_BB_preheaderi_101)) */ begin
		main_signed_multiply_32_27_op1 = -32'd44;
	end
end
always @(*) begin
	lpm_mult_main_quantlexiti_240_en = ((memory_controller_waitrequest == 0) & (legup_function_call == 0));
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %240 = mul nsw i32 %ah2.0, 127*/
	if ((lpm_mult_main_quantlexiti_240_en == 1'd1)) begin
		main_quantlexiti_240_stage0_reg <= (main_signed_multiply_32_27_op0 * main_signed_multiply_32_27_op1);
	end
end
always @(*) begin
	main_signed_multiply_32_27 = main_quantlexiti_240_stage0_reg;
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %245 = mul nsw i32 %ah1.0, 255*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_48)) begin
		main_signed_multiply_32_28_op0 = main_1_ah10_reg;
	end
	/* main: %.preheader.i*/
	/*   %502 = mul nsw i32 %accumd.10.0, 12*/
	else /* if ((cur_state == LEGUP_F_main_BB_preheaderi_101)) */ begin
		main_signed_multiply_32_28_op0 = main_preheaderi_accumd100_reg;
	end
end
always @(*) begin
	/* main: %quantl.exit.i*/
	/*   %245 = mul nsw i32 %ah1.0, 255*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_48)) begin
		main_signed_multiply_32_28_op1 = 32'd255;
	end
	/* main: %.preheader.i*/
	/*   %502 = mul nsw i32 %accumd.10.0, 12*/
	else /* if ((cur_state == LEGUP_F_main_BB_preheaderi_101)) */ begin
		main_signed_multiply_32_28_op1 = 32'd12;
	end
end
always @(*) begin
	lpm_mult_main_quantlexiti_245_en = ((memory_controller_waitrequest == 0) & (legup_function_call == 0));
end
always @(posedge clk) begin
	/* main: %quantl.exit.i*/
	/*   %245 = mul nsw i32 %ah1.0, 255*/
	if ((lpm_mult_main_quantlexiti_245_en == 1'd1)) begin
		main_quantlexiti_245_stage0_reg <= (main_signed_multiply_32_28_op0 * main_signed_multiply_32_28_op1);
	end
end
always @(*) begin
	main_signed_multiply_32_28 = main_quantlexiti_245_stage0_reg;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %462 = mul nsw i32 %accumd.0.0, 212*/
		main_signed_multiply_32_10_op0 = main_preheaderi_accumd00_reg;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %462 = mul nsw i32 %accumd.0.0, 212*/
if (reset) begin main_signed_multiply_32_10_op1 = 0; end
		main_signed_multiply_32_10_op1 = 32'd212;
end
always @(*) begin
	lpm_mult_main_preheaderi_462_en = ((memory_controller_waitrequest == 0) & (legup_function_call == 0));
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %462 = mul nsw i32 %accumd.0.0, 212*/
	if ((lpm_mult_main_preheaderi_462_en == 1'd1)) begin
		main_preheaderi_462_stage0_reg <= (main_signed_multiply_32_10_op0 * main_signed_multiply_32_10_op1);
	end
end
always @(*) begin
	main_signed_multiply_32_10 = main_preheaderi_462_stage0_reg;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %464 = mul nsw i32 %accumc.1.0, 48*/
		main_signed_multiply_32_11_op0 = main_preheaderi_accumc10_reg;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %464 = mul nsw i32 %accumc.1.0, 48*/
if (reset) begin main_signed_multiply_32_11_op1 = 0; end
		main_signed_multiply_32_11_op1 = 32'd48;
end
always @(*) begin
	lpm_mult_main_preheaderi_464_en = ((memory_controller_waitrequest == 0) & (legup_function_call == 0));
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %464 = mul nsw i32 %accumc.1.0, 48*/
	if ((lpm_mult_main_preheaderi_464_en == 1'd1)) begin
		main_preheaderi_464_stage0_reg <= (main_signed_multiply_32_11_op0 * main_signed_multiply_32_11_op1);
	end
end
always @(*) begin
	main_signed_multiply_32_11 = main_preheaderi_464_stage0_reg;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %466 = mul nsw i32 %accumd.1.0, -624*/
		main_signed_multiply_32_12_op0 = main_preheaderi_accumd10_reg;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %466 = mul nsw i32 %accumd.1.0, -624*/
if (reset) begin main_signed_multiply_32_12_op1 = 0; end
		main_signed_multiply_32_12_op1 = -32'd624;
end
always @(*) begin
	lpm_mult_main_preheaderi_466_en = ((memory_controller_waitrequest == 0) & (legup_function_call == 0));
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %466 = mul nsw i32 %accumd.1.0, -624*/
	if ((lpm_mult_main_preheaderi_466_en == 1'd1)) begin
		main_preheaderi_466_stage0_reg <= (main_signed_multiply_32_12_op0 * main_signed_multiply_32_12_op1);
	end
end
always @(*) begin
	main_signed_multiply_32_12 = main_preheaderi_466_stage0_reg;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %470 = mul nsw i32 %accumd.2.0, 1448*/
		main_signed_multiply_32_13_op0 = main_preheaderi_accumd20_reg;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %470 = mul nsw i32 %accumd.2.0, 1448*/
if (reset) begin main_signed_multiply_32_13_op1 = 0; end
		main_signed_multiply_32_13_op1 = 32'd1448;
end
always @(*) begin
	lpm_mult_main_preheaderi_470_en = ((memory_controller_waitrequest == 0) & (legup_function_call == 0));
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %470 = mul nsw i32 %accumd.2.0, 1448*/
	if ((lpm_mult_main_preheaderi_470_en == 1'd1)) begin
		main_preheaderi_470_stage0_reg <= (main_signed_multiply_32_13_op0 * main_signed_multiply_32_13_op1);
	end
end
always @(*) begin
	main_signed_multiply_32_13 = main_preheaderi_470_stage0_reg;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %472 = mul nsw i32 %accumc.3.0, -840*/
		main_signed_multiply_32_14_op0 = main_preheaderi_accumc30_reg;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %472 = mul nsw i32 %accumc.3.0, -840*/
if (reset) begin main_signed_multiply_32_14_op1 = 0; end
		main_signed_multiply_32_14_op1 = -32'd840;
end
always @(*) begin
	lpm_mult_main_preheaderi_472_en = ((memory_controller_waitrequest == 0) & (legup_function_call == 0));
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %472 = mul nsw i32 %accumc.3.0, -840*/
	if ((lpm_mult_main_preheaderi_472_en == 1'd1)) begin
		main_preheaderi_472_stage0_reg <= (main_signed_multiply_32_14_op0 * main_signed_multiply_32_14_op1);
	end
end
always @(*) begin
	main_signed_multiply_32_14 = main_preheaderi_472_stage0_reg;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %473 = add nsw i32 %472, %469*/
		main_signed_add_32_9_op0 = main_preheaderi_472_reg;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %473 = add nsw i32 %472, %469*/
		main_signed_add_32_9_op1 = main_preheaderi_469;
end
always @(*) begin
	main_signed_add_32_9 = (main_signed_add_32_9_op0 + main_signed_add_32_9_op1);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %474 = mul nsw i32 %accumd.3.0, -3220*/
		main_signed_multiply_32_15_op0 = main_preheaderi_accumd30_reg;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %474 = mul nsw i32 %accumd.3.0, -3220*/
if (reset) begin main_signed_multiply_32_15_op1 = 0; end
		main_signed_multiply_32_15_op1 = -32'd3220;
end
always @(*) begin
	lpm_mult_main_preheaderi_474_en = ((memory_controller_waitrequest == 0) & (legup_function_call == 0));
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %474 = mul nsw i32 %accumd.3.0, -3220*/
	if ((lpm_mult_main_preheaderi_474_en == 1'd1)) begin
		main_preheaderi_474_stage0_reg <= (main_signed_multiply_32_15_op0 * main_signed_multiply_32_15_op1);
	end
end
always @(*) begin
	main_signed_multiply_32_15 = main_preheaderi_474_stage0_reg;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %475 = add nsw i32 %474, %471*/
		main_signed_add_32_10_op0 = main_preheaderi_474_reg;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %475 = add nsw i32 %474, %471*/
		main_signed_add_32_10_op1 = main_preheaderi_471;
end
always @(*) begin
	main_signed_add_32_10 = (main_signed_add_32_10_op0 + main_signed_add_32_10_op1);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %476 = mul nsw i32 %accumc.4.0, 3804*/
		main_signed_multiply_32_16_op0 = main_preheaderi_accumc40_reg;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %476 = mul nsw i32 %accumc.4.0, 3804*/
if (reset) begin main_signed_multiply_32_16_op1 = 0; end
		main_signed_multiply_32_16_op1 = 32'd3804;
end
always @(*) begin
	lpm_mult_main_preheaderi_476_en = ((memory_controller_waitrequest == 0) & (legup_function_call == 0));
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %476 = mul nsw i32 %accumc.4.0, 3804*/
	if ((lpm_mult_main_preheaderi_476_en == 1'd1)) begin
		main_preheaderi_476_stage0_reg <= (main_signed_multiply_32_16_op0 * main_signed_multiply_32_16_op1);
	end
end
always @(*) begin
	main_signed_multiply_32_16 = main_preheaderi_476_stage0_reg;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %477 = add nsw i32 %476, %473*/
		main_signed_add_32_11_op0 = main_preheaderi_476_reg;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %477 = add nsw i32 %476, %473*/
		main_signed_add_32_11_op1 = main_preheaderi_473;
end
always @(*) begin
	main_signed_add_32_11 = (main_signed_add_32_11_op0 + main_signed_add_32_11_op1);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %478 = mul nsw i32 %accumd.4.0, 15504*/
		main_signed_multiply_32_17_op0 = main_preheaderi_accumd40_reg;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %478 = mul nsw i32 %accumd.4.0, 15504*/
if (reset) begin main_signed_multiply_32_17_op1 = 0; end
		main_signed_multiply_32_17_op1 = 32'd15504;
end
always @(*) begin
	lpm_mult_main_preheaderi_478_en = ((memory_controller_waitrequest == 0) & (legup_function_call == 0));
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %478 = mul nsw i32 %accumd.4.0, 15504*/
	if ((lpm_mult_main_preheaderi_478_en == 1'd1)) begin
		main_preheaderi_478_stage0_reg <= (main_signed_multiply_32_17_op0 * main_signed_multiply_32_17_op1);
	end
end
always @(*) begin
	main_signed_multiply_32_17 = main_preheaderi_478_stage0_reg;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %479 = add nsw i32 %478, %475*/
		main_signed_add_32_12_op0 = main_preheaderi_478_reg;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %479 = add nsw i32 %478, %475*/
		main_signed_add_32_12_op1 = main_preheaderi_475;
end
always @(*) begin
	main_signed_add_32_12 = (main_signed_add_32_12_op0 + main_signed_add_32_12_op1);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %480 = mul nsw i32 %accumc.5.0, 15504*/
		main_signed_multiply_32_18_op0 = main_preheaderi_accumc50_reg;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %480 = mul nsw i32 %accumc.5.0, 15504*/
if (reset) begin main_signed_multiply_32_18_op1 = 0; end
		main_signed_multiply_32_18_op1 = 32'd15504;
end
always @(*) begin
	lpm_mult_main_preheaderi_480_en = ((memory_controller_waitrequest == 0) & (legup_function_call == 0));
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %480 = mul nsw i32 %accumc.5.0, 15504*/
	if ((lpm_mult_main_preheaderi_480_en == 1'd1)) begin
		main_preheaderi_480_stage0_reg <= (main_signed_multiply_32_18_op0 * main_signed_multiply_32_18_op1);
	end
end
always @(*) begin
	main_signed_multiply_32_18 = main_preheaderi_480_stage0_reg;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %481 = add nsw i32 %480, %477*/
		main_signed_add_32_13_op0 = main_preheaderi_480_reg;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %481 = add nsw i32 %480, %477*/
		main_signed_add_32_13_op1 = main_preheaderi_477;
end
always @(*) begin
	main_signed_add_32_13 = (main_signed_add_32_13_op0 + main_signed_add_32_13_op1);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %482 = mul nsw i32 %accumd.5.0, 3804*/
		main_signed_multiply_32_19_op0 = main_preheaderi_accumd50_reg;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %482 = mul nsw i32 %accumd.5.0, 3804*/
if (reset) begin main_signed_multiply_32_19_op1 = 0; end
		main_signed_multiply_32_19_op1 = 32'd3804;
end
always @(*) begin
	lpm_mult_main_preheaderi_482_en = ((memory_controller_waitrequest == 0) & (legup_function_call == 0));
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %482 = mul nsw i32 %accumd.5.0, 3804*/
	if ((lpm_mult_main_preheaderi_482_en == 1'd1)) begin
		main_preheaderi_482_stage0_reg <= (main_signed_multiply_32_19_op0 * main_signed_multiply_32_19_op1);
	end
end
always @(*) begin
	main_signed_multiply_32_19 = main_preheaderi_482_stage0_reg;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %483 = add nsw i32 %482, %479*/
		main_signed_add_32_14_op0 = main_preheaderi_482_reg;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %483 = add nsw i32 %482, %479*/
		main_signed_add_32_14_op1 = main_preheaderi_479;
end
always @(*) begin
	main_signed_add_32_14 = (main_signed_add_32_14_op0 + main_signed_add_32_14_op1);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %484 = mul nsw i32 %accumc.6.0, -3220*/
		main_signed_multiply_32_20_op0 = main_preheaderi_accumc60_reg;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %484 = mul nsw i32 %accumc.6.0, -3220*/
if (reset) begin main_signed_multiply_32_20_op1 = 0; end
		main_signed_multiply_32_20_op1 = -32'd3220;
end
always @(*) begin
	lpm_mult_main_preheaderi_484_en = ((memory_controller_waitrequest == 0) & (legup_function_call == 0));
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %484 = mul nsw i32 %accumc.6.0, -3220*/
	if ((lpm_mult_main_preheaderi_484_en == 1'd1)) begin
		main_preheaderi_484_stage0_reg <= (main_signed_multiply_32_20_op0 * main_signed_multiply_32_20_op1);
	end
end
always @(*) begin
	main_signed_multiply_32_20 = main_preheaderi_484_stage0_reg;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %485 = add nsw i32 %484, %481*/
		main_signed_add_32_15_op0 = main_preheaderi_484_reg;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %485 = add nsw i32 %484, %481*/
		main_signed_add_32_15_op1 = main_preheaderi_481;
end
always @(*) begin
	main_signed_add_32_15 = (main_signed_add_32_15_op0 + main_signed_add_32_15_op1);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %486 = mul nsw i32 %accumd.6.0, -840*/
		main_signed_multiply_32_21_op0 = main_preheaderi_accumd60_reg;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %486 = mul nsw i32 %accumd.6.0, -840*/
if (reset) begin main_signed_multiply_32_21_op1 = 0; end
		main_signed_multiply_32_21_op1 = -32'd840;
end
always @(*) begin
	lpm_mult_main_preheaderi_486_en = ((memory_controller_waitrequest == 0) & (legup_function_call == 0));
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %486 = mul nsw i32 %accumd.6.0, -840*/
	if ((lpm_mult_main_preheaderi_486_en == 1'd1)) begin
		main_preheaderi_486_stage0_reg <= (main_signed_multiply_32_21_op0 * main_signed_multiply_32_21_op1);
	end
end
always @(*) begin
	main_signed_multiply_32_21 = main_preheaderi_486_stage0_reg;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %487 = add nsw i32 %486, %483*/
		main_signed_add_32_16_op0 = main_preheaderi_486_reg;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %487 = add nsw i32 %486, %483*/
		main_signed_add_32_16_op1 = main_preheaderi_483;
end
always @(*) begin
	main_signed_add_32_16 = (main_signed_add_32_16_op0 + main_signed_add_32_16_op1);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %488 = mul nsw i32 %accumc.7.0, 1448*/
		main_signed_multiply_32_22_op0 = main_preheaderi_accumc70_reg;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %488 = mul nsw i32 %accumc.7.0, 1448*/
if (reset) begin main_signed_multiply_32_22_op1 = 0; end
		main_signed_multiply_32_22_op1 = 32'd1448;
end
always @(*) begin
	lpm_mult_main_preheaderi_488_en = ((memory_controller_waitrequest == 0) & (legup_function_call == 0));
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %488 = mul nsw i32 %accumc.7.0, 1448*/
	if ((lpm_mult_main_preheaderi_488_en == 1'd1)) begin
		main_preheaderi_488_stage0_reg <= (main_signed_multiply_32_22_op0 * main_signed_multiply_32_22_op1);
	end
end
always @(*) begin
	main_signed_multiply_32_22 = main_preheaderi_488_stage0_reg;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %489 = add nsw i32 %488, %485*/
		main_signed_add_32_17_op0 = main_preheaderi_488_reg;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %489 = add nsw i32 %488, %485*/
		main_signed_add_32_17_op1 = main_preheaderi_485;
end
always @(*) begin
	main_signed_add_32_17 = (main_signed_add_32_17_op0 + main_signed_add_32_17_op1);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %491 = add nsw i32 %490, %487*/
		main_signed_add_32_18_op0 = main_preheaderi_490_reg;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %491 = add nsw i32 %490, %487*/
		main_signed_add_32_18_op1 = main_preheaderi_487;
end
always @(*) begin
	main_signed_add_32_18 = (main_signed_add_32_18_op0 + main_signed_add_32_18_op1);
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %492 = mul nsw i32 %accumc.8.0, -624*/
		main_signed_multiply_32_23_op0 = main_preheaderi_accumc80_reg;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %492 = mul nsw i32 %accumc.8.0, -624*/
if (reset) begin main_signed_multiply_32_23_op1 = 0; end
		main_signed_multiply_32_23_op1 = -32'd624;
end
always @(*) begin
	lpm_mult_main_preheaderi_492_en = ((memory_controller_waitrequest == 0) & (legup_function_call == 0));
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %492 = mul nsw i32 %accumc.8.0, -624*/
	if ((lpm_mult_main_preheaderi_492_en == 1'd1)) begin
		main_preheaderi_492_stage0_reg <= (main_signed_multiply_32_23_op0 * main_signed_multiply_32_23_op1);
	end
end
always @(*) begin
	main_signed_multiply_32_23 = main_preheaderi_492_stage0_reg;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %494 = mul nsw i32 %accumd.8.0, 48*/
		main_signed_multiply_32_24_op0 = main_preheaderi_accumd80_reg;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %494 = mul nsw i32 %accumd.8.0, 48*/
if (reset) begin main_signed_multiply_32_24_op1 = 0; end
		main_signed_multiply_32_24_op1 = 32'd48;
end
always @(*) begin
	lpm_mult_main_preheaderi_494_en = ((memory_controller_waitrequest == 0) & (legup_function_call == 0));
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %494 = mul nsw i32 %accumd.8.0, 48*/
	if ((lpm_mult_main_preheaderi_494_en == 1'd1)) begin
		main_preheaderi_494_stage0_reg <= (main_signed_multiply_32_24_op0 * main_signed_multiply_32_24_op1);
	end
end
always @(*) begin
	main_signed_multiply_32_24 = main_preheaderi_494_stage0_reg;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %496 = mul nsw i32 %accumc.9.0, 212*/
		main_signed_multiply_32_25_op0 = main_preheaderi_accumc90_reg;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %496 = mul nsw i32 %accumc.9.0, 212*/
if (reset) begin main_signed_multiply_32_25_op1 = 0; end
		main_signed_multiply_32_25_op1 = 32'd212;
end
always @(*) begin
	lpm_mult_main_preheaderi_496_en = ((memory_controller_waitrequest == 0) & (legup_function_call == 0));
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %496 = mul nsw i32 %accumc.9.0, 212*/
	if ((lpm_mult_main_preheaderi_496_en == 1'd1)) begin
		main_preheaderi_496_stage0_reg <= (main_signed_multiply_32_25_op0 * main_signed_multiply_32_25_op1);
	end
end
always @(*) begin
	main_signed_multiply_32_25 = main_preheaderi_496_stage0_reg;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %498 = mul nsw i32 %accumd.9.0, -44*/
		main_signed_multiply_32_26_op0 = main_preheaderi_accumd90_reg;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %498 = mul nsw i32 %accumd.9.0, -44*/
if (reset) begin main_signed_multiply_32_26_op1 = 0; end
		main_signed_multiply_32_26_op1 = -32'd44;
end
always @(*) begin
	lpm_mult_main_preheaderi_498_en = ((memory_controller_waitrequest == 0) & (legup_function_call == 0));
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %498 = mul nsw i32 %accumd.9.0, -44*/
	if ((lpm_mult_main_preheaderi_498_en == 1'd1)) begin
		main_preheaderi_498_stage0_reg <= (main_signed_multiply_32_26_op0 * main_signed_multiply_32_26_op1);
	end
end
always @(*) begin
	main_signed_multiply_32_26 = main_preheaderi_498_stage0_reg;
end
always @(*) begin
	lpm_mult_main_1_43_en = ((memory_controller_waitrequest == 0) & (legup_function_call == 0));
end
always @(*) begin
	lpm_mult_main_1_44_en = ((memory_controller_waitrequest == 0) & (legup_function_call == 0));
end
always @(*) begin
	lpm_mult_main_1_52_en = ((memory_controller_waitrequest == 0) & (legup_function_call == 0));
end
always @(*) begin
	lpm_mult_main_1_55_en = ((memory_controller_waitrequest == 0) & (legup_function_call == 0));
end
always @(*) begin
	lpm_mult_main_1_57_en = ((memory_controller_waitrequest == 0) & (legup_function_call == 0));
end
always @(*) begin
	lpm_mult_main_1_62_en = ((memory_controller_waitrequest == 0) & (legup_function_call == 0));
end
always @(*) begin
	lpm_mult_main_1_92_en = ((memory_controller_waitrequest == 0) & (legup_function_call == 0));
end
always @(*) begin
	lpm_mult_main_98_101_en = ((memory_controller_waitrequest == 0) & (legup_function_call == 0));
end
always @(*) begin
	lpm_mult_main_quantlexiti_110_en = ((memory_controller_waitrequest == 0) & (legup_function_call == 0));
end
always @(*) begin
	lpm_mult_main_quantlexiti_135_en = ((memory_controller_waitrequest == 0) & (legup_function_call == 0));
end
always @(*) begin
	lpm_mult_main_quantlexiti_195_en = ((memory_controller_waitrequest == 0) & (legup_function_call == 0));
end
always @(*) begin
	lpm_mult_main_quantlexiti_202_en = ((memory_controller_waitrequest == 0) & (legup_function_call == 0));
end
always @(*) begin
	lpm_mult_main_quantlexiti_215_en = ((memory_controller_waitrequest == 0) & (legup_function_call == 0));
end
always @(*) begin
	lpm_divide_main_quantlexiti_257_en = ((memory_controller_waitrequest == 0) & (legup_function_call == 0));
end
always @(*) begin
	lpm_mult_main_quantlexiti_108_en = ((memory_controller_waitrequest == 0) & (legup_function_call == 0));
end
always @(*) begin
	lpm_mult_main_quantlexiti_127_en = ((memory_controller_waitrequest == 0) & (legup_function_call == 0));
end
always @(*) begin
	lpm_mult_main_quantlexiti_131_en = ((memory_controller_waitrequest == 0) & (legup_function_call == 0));
end
always @(*) begin
	lpm_mult_main_quantlexiti_152_en = ((memory_controller_waitrequest == 0) & (legup_function_call == 0));
end
always @(*) begin
	lpm_mult_main_quantlexiti_155_en = ((memory_controller_waitrequest == 0) & (legup_function_call == 0));
end
always @(*) begin
	lpm_mult_main_quantlexiti_159_en = ((memory_controller_waitrequest == 0) & (legup_function_call == 0));
end
always @(*) begin
	lpm_mult_main_quantlexiti_163_en = ((memory_controller_waitrequest == 0) & (legup_function_call == 0));
end
always @(*) begin
	lpm_mult_main_quantlexiti_167_en = ((memory_controller_waitrequest == 0) & (legup_function_call == 0));
end
always @(*) begin
	lpm_mult_main_quantlexiti_171_en = ((memory_controller_waitrequest == 0) & (legup_function_call == 0));
end
always @(*) begin
	lpm_mult_main_quantlexiti_213_en = ((memory_controller_waitrequest == 0) & (legup_function_call == 0));
end
always @(*) begin
	lpm_mult_main_quantlexiti_232_en = ((memory_controller_waitrequest == 0) & (legup_function_call == 0));
end
always @(*) begin
	lpm_mult_main_quantlexiti_236_en = ((memory_controller_waitrequest == 0) & (legup_function_call == 0));
end
always @(*) begin
	lpm_mult_main_preheaderi_313_en = ((memory_controller_waitrequest == 0) & (legup_function_call == 0));
end
always @(*) begin
	lpm_mult_main_preheaderi_349_en = ((memory_controller_waitrequest == 0) & (legup_function_call == 0));
end
always @(*) begin
	lpm_mult_main_preheaderi_354_en = ((memory_controller_waitrequest == 0) & (legup_function_call == 0));
end
always @(*) begin
	lpm_mult_main_preheaderi_409_en = ((memory_controller_waitrequest == 0) & (legup_function_call == 0));
end
always @(*) begin
	lpm_mult_main_preheaderi_416_en = ((memory_controller_waitrequest == 0) & (legup_function_call == 0));
end
always @(*) begin
	lpm_mult_main_preheaderi_441_en = ((memory_controller_waitrequest == 0) & (legup_function_call == 0));
end
always @(*) begin
	lpm_mult_main_preheaderi_446_en = ((memory_controller_waitrequest == 0) & (legup_function_call == 0));
end
always @(*) begin
	lpm_mult_main_preheaderi_460_en = ((memory_controller_waitrequest == 0) & (legup_function_call == 0));
end
always @(*) begin
	lpm_mult_main_preheaderi_500_en = ((memory_controller_waitrequest == 0) & (legup_function_call == 0));
end
always @(*) begin
	lpm_mult_main_preheaderi_502_en = ((memory_controller_waitrequest == 0) & (legup_function_call == 0));
end
always @(*) begin
	lpm_mult_main_preheaderi_270_en = ((memory_controller_waitrequest == 0) & (legup_function_call == 0));
end
always @(*) begin
	lpm_mult_main_preheaderi_273_en = ((memory_controller_waitrequest == 0) & (legup_function_call == 0));
end
always @(*) begin
	lpm_mult_main_preheaderi_277_en = ((memory_controller_waitrequest == 0) & (legup_function_call == 0));
end
always @(*) begin
	lpm_mult_main_preheaderi_281_en = ((memory_controller_waitrequest == 0) & (legup_function_call == 0));
end
always @(*) begin
	lpm_mult_main_preheaderi_285_en = ((memory_controller_waitrequest == 0) & (legup_function_call == 0));
end
always @(*) begin
	lpm_mult_main_preheaderi_289_en = ((memory_controller_waitrequest == 0) & (legup_function_call == 0));
end
always @(*) begin
	lpm_mult_main_preheaderi_319_en = ((memory_controller_waitrequest == 0) & (legup_function_call == 0));
end
always @(*) begin
	lpm_mult_main_preheaderi_341_en = ((memory_controller_waitrequest == 0) & (legup_function_call == 0));
end
always @(*) begin
	lpm_mult_main_preheaderi_414_en = ((memory_controller_waitrequest == 0) & (legup_function_call == 0));
end
always @(*) begin
	lpm_mult_main_preheaderi_366_en = ((memory_controller_waitrequest == 0) & (legup_function_call == 0));
end
always @(*) begin
	lpm_mult_main_preheaderi_369_en = ((memory_controller_waitrequest == 0) & (legup_function_call == 0));
end
always @(*) begin
	lpm_mult_main_preheaderi_373_en = ((memory_controller_waitrequest == 0) & (legup_function_call == 0));
end
always @(*) begin
	lpm_mult_main_preheaderi_377_en = ((memory_controller_waitrequest == 0) & (legup_function_call == 0));
end
always @(*) begin
	lpm_mult_main_preheaderi_381_en = ((memory_controller_waitrequest == 0) & (legup_function_call == 0));
end
always @(*) begin
	lpm_mult_main_preheaderi_385_en = ((memory_controller_waitrequest == 0) & (legup_function_call == 0));
end
always @(*) begin
	lpm_mult_main_preheaderi_433_en = ((memory_controller_waitrequest == 0) & (legup_function_call == 0));
end
always @(*) begin
	lpm_mult_main_preheaderi_437_en = ((memory_controller_waitrequest == 0) & (legup_function_call == 0));
end
always @(*) begin
	lpm_mult_main_preheaderi_458_en = ((memory_controller_waitrequest == 0) & (legup_function_call == 0));
end
always @(*) begin
	lpm_mult_main_preheaderi_459_en = ((memory_controller_waitrequest == 0) & (legup_function_call == 0));
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		finish <= 0;
		if (start == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
	/* main: %532*/
	/*   ret i32 %.main_result.2.lcssa*/
	if ((cur_state == LEGUP_F_main_BB__532_169)) begin
		finish <= (memory_controller_waitrequest == 0);
		if (start == 1'b0 && ^((memory_controller_waitrequest == 0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
end
always @(*) begin
	memory_controller_enable_a = 0;
	/* main: %0*/
	/*   call void @legup_memset_4_i64(i8* bitcast ([24 x i32]* @tqmf to i8*), i8 0, i64 96)*/
	if ((cur_state == LEGUP_function_call_26)) begin
		memory_controller_enable_a = legup_memset_4_i64_memory_controller_enable_a;
	end
	/* main: %0*/
	/*   call void @legup_memset_4_i64(i8* bitcast ([24 x i32]* @tqmf to i8*), i8 0, i64 96)*/
	if ((cur_state == LEGUP_function_call_26)) begin
		memory_controller_enable_a = legup_memset_4_i64_memory_controller_enable_a;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_1)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_2)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_3)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_4)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_5)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_6)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_7)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_8)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_9)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_10)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_11)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_12)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_13)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_14)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_15)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_16)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_17)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_18)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_19)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_20)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_21)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_22)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_23)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_24)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %1*/
	/*   %61 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_28)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %1*/
	/*   %65 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 1, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_29)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %1*/
	/*   %69 = load i32* getelementptr ([6 x i32]* @delay_dltx, i32 1, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_30)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %1*/
	/*   %73 = load i32* getelementptr ([6 x i32]* @delay_dltx, i32 1, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_31)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %1*/
	/*   %77 = load i32* getelementptr ([6 x i32]* @delay_dltx, i32 1, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_32)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %1*/
	/*   %81 = load i32* getelementptr ([6 x i32]* @delay_dltx, i32 1, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_33)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %quantl.exit.i*/
	/*   %ril.0.i.i = load i32* %ril.0.in.i.i, align 4*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_49)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %quantl.exit.i*/
	/*   %150 = load i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_58)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %quantl.exit.i*/
	/*   %153 = load i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_59)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %quantl.exit.i*/
	/*   %157 = load i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_60)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %quantl.exit.i*/
	/*   %161 = load i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_61)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %quantl.exit.i*/
	/*   %165 = load i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_62)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %quantl.exit.i*/
	/*   %169 = load i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_63)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %quantl.exit.i*/
	/*   %173 = load i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 1, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_64)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %quantl.exit.i*/
	/*   %177 = load i32* getelementptr ([6 x i32]* @delay_bph, i32 1, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_65)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %quantl.exit.i*/
	/*   %181 = load i32* getelementptr ([6 x i32]* @delay_bph, i32 1, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_66)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %quantl.exit.i*/
	/*   %185 = load i32* getelementptr ([6 x i32]* @delay_bph, i32 1, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_67)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %quantl.exit.i*/
	/*   %189 = load i32* getelementptr ([6 x i32]* @delay_bph, i32 1, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_68)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre39 = load i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_85)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre41 = load i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_86)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre43 = load i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_87)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre45 = load i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_88)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre47 = load i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_89)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre49 = load i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_90)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.preheader.i*/
	/*   %268 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_101)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.preheader.i*/
	/*   %271 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_102)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.preheader.i*/
	/*   %275 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_103)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.preheader.i*/
	/*   %279 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_104)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.preheader.i*/
	/*   %283 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_105)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.preheader.i*/
	/*   %287 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_106)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.preheader.i*/
	/*   %291 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 1, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_107)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.preheader.i*/
	/*   %295 = load i32* getelementptr ([6 x i32]* @dec_del_bpl, i32 1, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_108)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.preheader.i*/
	/*   %299 = load i32* getelementptr ([6 x i32]* @dec_del_bpl, i32 1, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_109)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.preheader.i*/
	/*   %303 = load i32* getelementptr ([6 x i32]* @dec_del_bpl, i32 1, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_110)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.preheader.i*/
	/*   %307 = load i32* getelementptr ([6 x i32]* @dec_del_bpl, i32 1, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_111)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.preheader.i*/
	/*   %364 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_142)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.preheader.i*/
	/*   %367 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_143)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.preheader.i*/
	/*   %371 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_144)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.preheader.i*/
	/*   %375 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_145)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.preheader.i*/
	/*   %379 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_146)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.preheader.i*/
	/*   %383 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_147)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.preheader.i*/
	/*   %387 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 1, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_148)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.preheader.i*/
	/*   %391 = load i32* getelementptr ([6 x i32]* @dec_del_bph, i32 1, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_149)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.preheader.i*/
	/*   %395 = load i32* getelementptr ([6 x i32]* @dec_del_bph, i32 1, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_150)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.preheader.i*/
	/*   %399 = load i32* getelementptr ([6 x i32]* @dec_del_bph, i32 1, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_151)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.preheader.i*/
	/*   %403 = load i32* getelementptr ([6 x i32]* @dec_del_bph, i32 1, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_152)) begin
		memory_controller_enable_a = 1'd1;
	end
end
always @(*) begin
	memory_controller_address_a = 0;
	/* main: %0*/
	/*   call void @legup_memset_4_i64(i8* bitcast ([24 x i32]* @tqmf to i8*), i8 0, i64 96)*/
	if ((cur_state == LEGUP_function_call_26)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = legup_memset_4_i64_memory_controller_address_a;
	end
	/* main: %0*/
	/*   call void @legup_memset_4_i64(i8* bitcast ([24 x i32]* @tqmf to i8*), i8 0, i64 96)*/
	if ((cur_state == LEGUP_function_call_26)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = legup_memset_4_i64_memory_controller_address_a;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_1)) begin
		memory_controller_address_a = `TAG_g_delay_dltx_a;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_2)) begin
		memory_controller_address_a = `TAG_g_dec_del_dltx_a;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_3)) begin
		memory_controller_address_a = (`TAG_g_delay_dltx_a | (4 * 32'd1));
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_4)) begin
		memory_controller_address_a = (`TAG_g_dec_del_dltx_a | (4 * 32'd1));
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_5)) begin
		memory_controller_address_a = (`TAG_g_delay_dltx_a | (4 * 32'd2));
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_6)) begin
		memory_controller_address_a = (`TAG_g_dec_del_dltx_a | (4 * 32'd2));
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_7)) begin
		memory_controller_address_a = (`TAG_g_delay_dltx_a | (4 * 32'd3));
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_8)) begin
		memory_controller_address_a = (`TAG_g_dec_del_dltx_a | (4 * 32'd3));
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_9)) begin
		memory_controller_address_a = (`TAG_g_delay_dltx_a | (4 * 32'd4));
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_10)) begin
		memory_controller_address_a = (`TAG_g_dec_del_dltx_a | (4 * 32'd4));
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_11)) begin
		memory_controller_address_a = (`TAG_g_delay_dltx_a | (4 * 32'd5));
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_12)) begin
		memory_controller_address_a = (`TAG_g_dec_del_dltx_a | (4 * 32'd5));
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_13)) begin
		memory_controller_address_a = `TAG_g_delay_bpl_a;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_14)) begin
		memory_controller_address_a = `TAG_g_dec_del_bpl_a;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_15)) begin
		memory_controller_address_a = (`TAG_g_delay_bpl_a | (4 * 32'd1));
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_16)) begin
		memory_controller_address_a = (`TAG_g_dec_del_bpl_a | (4 * 32'd1));
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_17)) begin
		memory_controller_address_a = (`TAG_g_delay_bpl_a | (4 * 32'd2));
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_18)) begin
		memory_controller_address_a = (`TAG_g_dec_del_bpl_a | (4 * 32'd2));
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_19)) begin
		memory_controller_address_a = (`TAG_g_delay_bpl_a | (4 * 32'd3));
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_20)) begin
		memory_controller_address_a = (`TAG_g_dec_del_bpl_a | (4 * 32'd3));
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_21)) begin
		memory_controller_address_a = (`TAG_g_delay_bpl_a | (4 * 32'd4));
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_22)) begin
		memory_controller_address_a = (`TAG_g_dec_del_bpl_a | (4 * 32'd4));
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_23)) begin
		memory_controller_address_a = (`TAG_g_delay_bpl_a | (4 * 32'd5));
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_24)) begin
		memory_controller_address_a = (`TAG_g_dec_del_bpl_a | (4 * 32'd5));
	end
	/* main: %1*/
	/*   %61 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_28)) begin
		memory_controller_address_a = (`TAG_g_delay_dltx_a | (4 * 32'd5));
	end
	/* main: %1*/
	/*   %65 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 1, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_29)) begin
		memory_controller_address_a = (`TAG_g_delay_dltx_a | (24 * 32'd1));
	end
	/* main: %1*/
	/*   %69 = load i32* getelementptr ([6 x i32]* @delay_dltx, i32 1, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_30)) begin
		memory_controller_address_a = (`TAG_g_delay_dltx_a | ((24 * 32'd1) + (4 * 32'd1)));
	end
	/* main: %1*/
	/*   %73 = load i32* getelementptr ([6 x i32]* @delay_dltx, i32 1, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_31)) begin
		memory_controller_address_a = (`TAG_g_delay_dltx_a | ((24 * 32'd1) + (4 * 32'd2)));
	end
	/* main: %1*/
	/*   %77 = load i32* getelementptr ([6 x i32]* @delay_dltx, i32 1, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_32)) begin
		memory_controller_address_a = (`TAG_g_delay_dltx_a | ((24 * 32'd1) + (4 * 32'd3)));
	end
	/* main: %1*/
	/*   %81 = load i32* getelementptr ([6 x i32]* @delay_dltx, i32 1, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_33)) begin
		memory_controller_address_a = (`TAG_g_delay_dltx_a | ((24 * 32'd1) + (4 * 32'd4)));
	end
	/* main: %quantl.exit.i*/
	/*   %ril.0.i.i = load i32* %ril.0.in.i.i, align 4*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_49)) begin
		memory_controller_address_a = main_quantlexiti_ril0inii;
	end
	/* main: %quantl.exit.i*/
	/*   %150 = load i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_58)) begin
		memory_controller_address_a = `TAG_g_delay_bph_a;
	end
	/* main: %quantl.exit.i*/
	/*   %153 = load i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_59)) begin
		memory_controller_address_a = (`TAG_g_delay_bph_a | (4 * 32'd1));
	end
	/* main: %quantl.exit.i*/
	/*   %157 = load i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_60)) begin
		memory_controller_address_a = (`TAG_g_delay_bph_a | (4 * 32'd2));
	end
	/* main: %quantl.exit.i*/
	/*   %161 = load i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_61)) begin
		memory_controller_address_a = (`TAG_g_delay_bph_a | (4 * 32'd3));
	end
	/* main: %quantl.exit.i*/
	/*   %165 = load i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_62)) begin
		memory_controller_address_a = (`TAG_g_delay_bph_a | (4 * 32'd4));
	end
	/* main: %quantl.exit.i*/
	/*   %169 = load i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_63)) begin
		memory_controller_address_a = (`TAG_g_delay_bph_a | (4 * 32'd5));
	end
	/* main: %quantl.exit.i*/
	/*   %173 = load i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 1, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_64)) begin
		memory_controller_address_a = (`TAG_g_delay_bph_a | (24 * 32'd1));
	end
	/* main: %quantl.exit.i*/
	/*   %177 = load i32* getelementptr ([6 x i32]* @delay_bph, i32 1, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_65)) begin
		memory_controller_address_a = (`TAG_g_delay_bph_a | ((24 * 32'd1) + (4 * 32'd1)));
	end
	/* main: %quantl.exit.i*/
	/*   %181 = load i32* getelementptr ([6 x i32]* @delay_bph, i32 1, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_66)) begin
		memory_controller_address_a = (`TAG_g_delay_bph_a | ((24 * 32'd1) + (4 * 32'd2)));
	end
	/* main: %quantl.exit.i*/
	/*   %185 = load i32* getelementptr ([6 x i32]* @delay_bph, i32 1, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_67)) begin
		memory_controller_address_a = (`TAG_g_delay_bph_a | ((24 * 32'd1) + (4 * 32'd3)));
	end
	/* main: %quantl.exit.i*/
	/*   %189 = load i32* getelementptr ([6 x i32]* @delay_bph, i32 1, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_68)) begin
		memory_controller_address_a = (`TAG_g_delay_bph_a | ((24 * 32'd1) + (4 * 32'd4)));
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre39 = load i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_85)) begin
		memory_controller_address_a = `TAG_g_delay_bpl_a;
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre41 = load i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_86)) begin
		memory_controller_address_a = (`TAG_g_delay_bpl_a | (4 * 32'd1));
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre43 = load i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_87)) begin
		memory_controller_address_a = (`TAG_g_delay_bpl_a | (4 * 32'd2));
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre45 = load i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_88)) begin
		memory_controller_address_a = (`TAG_g_delay_bpl_a | (4 * 32'd3));
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre47 = load i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_89)) begin
		memory_controller_address_a = (`TAG_g_delay_bpl_a | (4 * 32'd4));
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre49 = load i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_90)) begin
		memory_controller_address_a = (`TAG_g_delay_bpl_a | (4 * 32'd5));
	end
	/* main: %.preheader.i*/
	/*   %268 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_101)) begin
		memory_controller_address_a = `TAG_g_dec_del_bpl_a;
	end
	/* main: %.preheader.i*/
	/*   %271 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_102)) begin
		memory_controller_address_a = (`TAG_g_dec_del_bpl_a | (4 * 32'd1));
	end
	/* main: %.preheader.i*/
	/*   %275 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_103)) begin
		memory_controller_address_a = (`TAG_g_dec_del_bpl_a | (4 * 32'd2));
	end
	/* main: %.preheader.i*/
	/*   %279 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_104)) begin
		memory_controller_address_a = (`TAG_g_dec_del_bpl_a | (4 * 32'd3));
	end
	/* main: %.preheader.i*/
	/*   %283 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_105)) begin
		memory_controller_address_a = (`TAG_g_dec_del_bpl_a | (4 * 32'd4));
	end
	/* main: %.preheader.i*/
	/*   %287 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_106)) begin
		memory_controller_address_a = (`TAG_g_dec_del_bpl_a | (4 * 32'd5));
	end
	/* main: %.preheader.i*/
	/*   %291 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 1, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_107)) begin
		memory_controller_address_a = (`TAG_g_dec_del_bpl_a | (24 * 32'd1));
	end
	/* main: %.preheader.i*/
	/*   %295 = load i32* getelementptr ([6 x i32]* @dec_del_bpl, i32 1, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_108)) begin
		memory_controller_address_a = (`TAG_g_dec_del_bpl_a | ((24 * 32'd1) + (4 * 32'd1)));
	end
	/* main: %.preheader.i*/
	/*   %299 = load i32* getelementptr ([6 x i32]* @dec_del_bpl, i32 1, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_109)) begin
		memory_controller_address_a = (`TAG_g_dec_del_bpl_a | ((24 * 32'd1) + (4 * 32'd2)));
	end
	/* main: %.preheader.i*/
	/*   %303 = load i32* getelementptr ([6 x i32]* @dec_del_bpl, i32 1, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_110)) begin
		memory_controller_address_a = (`TAG_g_dec_del_bpl_a | ((24 * 32'd1) + (4 * 32'd3)));
	end
	/* main: %.preheader.i*/
	/*   %307 = load i32* getelementptr ([6 x i32]* @dec_del_bpl, i32 1, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_111)) begin
		memory_controller_address_a = (`TAG_g_dec_del_bpl_a | ((24 * 32'd1) + (4 * 32'd4)));
	end
	/* main: %.preheader.i*/
	/*   %364 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_142)) begin
		memory_controller_address_a = `TAG_g_dec_del_bph_a;
	end
	/* main: %.preheader.i*/
	/*   %367 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_143)) begin
		memory_controller_address_a = (`TAG_g_dec_del_bph_a | (4 * 32'd1));
	end
	/* main: %.preheader.i*/
	/*   %371 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_144)) begin
		memory_controller_address_a = (`TAG_g_dec_del_bph_a | (4 * 32'd2));
	end
	/* main: %.preheader.i*/
	/*   %375 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_145)) begin
		memory_controller_address_a = (`TAG_g_dec_del_bph_a | (4 * 32'd3));
	end
	/* main: %.preheader.i*/
	/*   %379 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_146)) begin
		memory_controller_address_a = (`TAG_g_dec_del_bph_a | (4 * 32'd4));
	end
	/* main: %.preheader.i*/
	/*   %383 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_147)) begin
		memory_controller_address_a = (`TAG_g_dec_del_bph_a | (4 * 32'd5));
	end
	/* main: %.preheader.i*/
	/*   %387 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 1, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_148)) begin
		memory_controller_address_a = (`TAG_g_dec_del_bph_a | (24 * 32'd1));
	end
	/* main: %.preheader.i*/
	/*   %391 = load i32* getelementptr ([6 x i32]* @dec_del_bph, i32 1, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_149)) begin
		memory_controller_address_a = (`TAG_g_dec_del_bph_a | ((24 * 32'd1) + (4 * 32'd1)));
	end
	/* main: %.preheader.i*/
	/*   %395 = load i32* getelementptr ([6 x i32]* @dec_del_bph, i32 1, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_150)) begin
		memory_controller_address_a = (`TAG_g_dec_del_bph_a | ((24 * 32'd1) + (4 * 32'd2)));
	end
	/* main: %.preheader.i*/
	/*   %399 = load i32* getelementptr ([6 x i32]* @dec_del_bph, i32 1, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_151)) begin
		memory_controller_address_a = (`TAG_g_dec_del_bph_a | ((24 * 32'd1) + (4 * 32'd3)));
	end
	/* main: %.preheader.i*/
	/*   %403 = load i32* getelementptr ([6 x i32]* @dec_del_bph, i32 1, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_152)) begin
		memory_controller_address_a = (`TAG_g_dec_del_bph_a | ((24 * 32'd1) + (4 * 32'd4)));
	end
end
always @(*) begin
	memory_controller_write_enable_a = 0;
	/* main: %0*/
	/*   call void @legup_memset_4_i64(i8* bitcast ([24 x i32]* @tqmf to i8*), i8 0, i64 96)*/
	if ((cur_state == LEGUP_function_call_26)) begin
		memory_controller_write_enable_a = legup_memset_4_i64_memory_controller_write_enable_a;
	end
	/* main: %0*/
	/*   call void @legup_memset_4_i64(i8* bitcast ([24 x i32]* @tqmf to i8*), i8 0, i64 96)*/
	if ((cur_state == LEGUP_function_call_26)) begin
		memory_controller_write_enable_a = legup_memset_4_i64_memory_controller_write_enable_a;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_1)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_2)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_3)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_4)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_5)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_6)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_7)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_8)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_9)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_10)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_11)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_12)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_13)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_14)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_15)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_16)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_17)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_18)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_19)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_20)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_21)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_22)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_23)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_24)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %1*/
	/*   %61 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_28)) begin
		memory_controller_write_enable_a = 0;
	end
	/* main: %1*/
	/*   %65 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 1, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_29)) begin
		memory_controller_write_enable_a = 0;
	end
	/* main: %1*/
	/*   %69 = load i32* getelementptr ([6 x i32]* @delay_dltx, i32 1, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_30)) begin
		memory_controller_write_enable_a = 0;
	end
	/* main: %1*/
	/*   %73 = load i32* getelementptr ([6 x i32]* @delay_dltx, i32 1, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_31)) begin
		memory_controller_write_enable_a = 0;
	end
	/* main: %1*/
	/*   %77 = load i32* getelementptr ([6 x i32]* @delay_dltx, i32 1, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_32)) begin
		memory_controller_write_enable_a = 0;
	end
	/* main: %1*/
	/*   %81 = load i32* getelementptr ([6 x i32]* @delay_dltx, i32 1, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_33)) begin
		memory_controller_write_enable_a = 0;
	end
	/* main: %quantl.exit.i*/
	/*   %ril.0.i.i = load i32* %ril.0.in.i.i, align 4*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_49)) begin
		memory_controller_write_enable_a = 0;
	end
	/* main: %quantl.exit.i*/
	/*   %150 = load i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_58)) begin
		memory_controller_write_enable_a = 0;
	end
	/* main: %quantl.exit.i*/
	/*   %153 = load i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_59)) begin
		memory_controller_write_enable_a = 0;
	end
	/* main: %quantl.exit.i*/
	/*   %157 = load i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_60)) begin
		memory_controller_write_enable_a = 0;
	end
	/* main: %quantl.exit.i*/
	/*   %161 = load i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_61)) begin
		memory_controller_write_enable_a = 0;
	end
	/* main: %quantl.exit.i*/
	/*   %165 = load i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_62)) begin
		memory_controller_write_enable_a = 0;
	end
	/* main: %quantl.exit.i*/
	/*   %169 = load i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_63)) begin
		memory_controller_write_enable_a = 0;
	end
	/* main: %quantl.exit.i*/
	/*   %173 = load i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 1, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_64)) begin
		memory_controller_write_enable_a = 0;
	end
	/* main: %quantl.exit.i*/
	/*   %177 = load i32* getelementptr ([6 x i32]* @delay_bph, i32 1, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_65)) begin
		memory_controller_write_enable_a = 0;
	end
	/* main: %quantl.exit.i*/
	/*   %181 = load i32* getelementptr ([6 x i32]* @delay_bph, i32 1, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_66)) begin
		memory_controller_write_enable_a = 0;
	end
	/* main: %quantl.exit.i*/
	/*   %185 = load i32* getelementptr ([6 x i32]* @delay_bph, i32 1, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_67)) begin
		memory_controller_write_enable_a = 0;
	end
	/* main: %quantl.exit.i*/
	/*   %189 = load i32* getelementptr ([6 x i32]* @delay_bph, i32 1, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_68)) begin
		memory_controller_write_enable_a = 0;
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre39 = load i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_85)) begin
		memory_controller_write_enable_a = 0;
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre41 = load i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_86)) begin
		memory_controller_write_enable_a = 0;
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre43 = load i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_87)) begin
		memory_controller_write_enable_a = 0;
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre45 = load i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_88)) begin
		memory_controller_write_enable_a = 0;
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre47 = load i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_89)) begin
		memory_controller_write_enable_a = 0;
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre49 = load i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_90)) begin
		memory_controller_write_enable_a = 0;
	end
	/* main: %.preheader.i*/
	/*   %268 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_101)) begin
		memory_controller_write_enable_a = 0;
	end
	/* main: %.preheader.i*/
	/*   %271 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_102)) begin
		memory_controller_write_enable_a = 0;
	end
	/* main: %.preheader.i*/
	/*   %275 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_103)) begin
		memory_controller_write_enable_a = 0;
	end
	/* main: %.preheader.i*/
	/*   %279 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_104)) begin
		memory_controller_write_enable_a = 0;
	end
	/* main: %.preheader.i*/
	/*   %283 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_105)) begin
		memory_controller_write_enable_a = 0;
	end
	/* main: %.preheader.i*/
	/*   %287 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_106)) begin
		memory_controller_write_enable_a = 0;
	end
	/* main: %.preheader.i*/
	/*   %291 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 1, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_107)) begin
		memory_controller_write_enable_a = 0;
	end
	/* main: %.preheader.i*/
	/*   %295 = load i32* getelementptr ([6 x i32]* @dec_del_bpl, i32 1, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_108)) begin
		memory_controller_write_enable_a = 0;
	end
	/* main: %.preheader.i*/
	/*   %299 = load i32* getelementptr ([6 x i32]* @dec_del_bpl, i32 1, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_109)) begin
		memory_controller_write_enable_a = 0;
	end
	/* main: %.preheader.i*/
	/*   %303 = load i32* getelementptr ([6 x i32]* @dec_del_bpl, i32 1, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_110)) begin
		memory_controller_write_enable_a = 0;
	end
	/* main: %.preheader.i*/
	/*   %307 = load i32* getelementptr ([6 x i32]* @dec_del_bpl, i32 1, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_111)) begin
		memory_controller_write_enable_a = 0;
	end
	/* main: %.preheader.i*/
	/*   %364 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_142)) begin
		memory_controller_write_enable_a = 0;
	end
	/* main: %.preheader.i*/
	/*   %367 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_143)) begin
		memory_controller_write_enable_a = 0;
	end
	/* main: %.preheader.i*/
	/*   %371 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_144)) begin
		memory_controller_write_enable_a = 0;
	end
	/* main: %.preheader.i*/
	/*   %375 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_145)) begin
		memory_controller_write_enable_a = 0;
	end
	/* main: %.preheader.i*/
	/*   %379 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_146)) begin
		memory_controller_write_enable_a = 0;
	end
	/* main: %.preheader.i*/
	/*   %383 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_147)) begin
		memory_controller_write_enable_a = 0;
	end
	/* main: %.preheader.i*/
	/*   %387 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 1, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_148)) begin
		memory_controller_write_enable_a = 0;
	end
	/* main: %.preheader.i*/
	/*   %391 = load i32* getelementptr ([6 x i32]* @dec_del_bph, i32 1, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_149)) begin
		memory_controller_write_enable_a = 0;
	end
	/* main: %.preheader.i*/
	/*   %395 = load i32* getelementptr ([6 x i32]* @dec_del_bph, i32 1, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_150)) begin
		memory_controller_write_enable_a = 0;
	end
	/* main: %.preheader.i*/
	/*   %399 = load i32* getelementptr ([6 x i32]* @dec_del_bph, i32 1, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_151)) begin
		memory_controller_write_enable_a = 0;
	end
	/* main: %.preheader.i*/
	/*   %403 = load i32* getelementptr ([6 x i32]* @dec_del_bph, i32 1, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_152)) begin
		memory_controller_write_enable_a = 0;
	end
end
always @(*) begin
	memory_controller_in_a = 0;
	/* main: %0*/
	/*   call void @legup_memset_4_i64(i8* bitcast ([24 x i32]* @tqmf to i8*), i8 0, i64 96)*/
	if ((cur_state == LEGUP_function_call_26)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = legup_memset_4_i64_memory_controller_in_a;
	end
	/* main: %0*/
	/*   call void @legup_memset_4_i64(i8* bitcast ([24 x i32]* @tqmf to i8*), i8 0, i64 96)*/
	if ((cur_state == LEGUP_function_call_26)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = legup_memset_4_i64_memory_controller_in_a;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_1)) begin
		memory_controller_in_a = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_2)) begin
		memory_controller_in_a = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_3)) begin
		memory_controller_in_a = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_4)) begin
		memory_controller_in_a = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_5)) begin
		memory_controller_in_a = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_6)) begin
		memory_controller_in_a = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_7)) begin
		memory_controller_in_a = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_8)) begin
		memory_controller_in_a = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_9)) begin
		memory_controller_in_a = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_10)) begin
		memory_controller_in_a = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_11)) begin
		memory_controller_in_a = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_12)) begin
		memory_controller_in_a = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_13)) begin
		memory_controller_in_a = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_14)) begin
		memory_controller_in_a = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_15)) begin
		memory_controller_in_a = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_16)) begin
		memory_controller_in_a = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_17)) begin
		memory_controller_in_a = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_18)) begin
		memory_controller_in_a = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_19)) begin
		memory_controller_in_a = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_20)) begin
		memory_controller_in_a = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_21)) begin
		memory_controller_in_a = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_22)) begin
		memory_controller_in_a = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_23)) begin
		memory_controller_in_a = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_24)) begin
		memory_controller_in_a = 32'd0;
	end
end
always @(*) begin
	memory_controller_size_a = 0;
	if ((cur_state == LEGUP_function_call_26)) begin
		memory_controller_size_a[1:0] = legup_memset_4_i64_memory_controller_size_a;
	end
	/* main: %0*/
	/*   call void @legup_memset_4_i64(i8* bitcast ([24 x i32]* @tqmf to i8*), i8 0, i64 96)*/
	if ((cur_state == LEGUP_function_call_26)) begin
		memory_controller_size_a[1:0] = legup_memset_4_i64_memory_controller_size_a;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_1)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_2)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_3)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_4)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_5)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_6)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_7)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_8)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_9)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_10)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_11)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_12)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_13)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_14)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_15)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_16)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_17)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_18)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_19)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_20)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_21)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_22)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_23)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_24)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %1*/
	/*   %61 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_28)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %1*/
	/*   %65 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 1, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_29)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %1*/
	/*   %69 = load i32* getelementptr ([6 x i32]* @delay_dltx, i32 1, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_30)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %1*/
	/*   %73 = load i32* getelementptr ([6 x i32]* @delay_dltx, i32 1, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_31)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %1*/
	/*   %77 = load i32* getelementptr ([6 x i32]* @delay_dltx, i32 1, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_32)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %1*/
	/*   %81 = load i32* getelementptr ([6 x i32]* @delay_dltx, i32 1, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_33)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %quantl.exit.i*/
	/*   %ril.0.i.i = load i32* %ril.0.in.i.i, align 4*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_49)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %quantl.exit.i*/
	/*   %150 = load i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_58)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %quantl.exit.i*/
	/*   %153 = load i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_59)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %quantl.exit.i*/
	/*   %157 = load i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_60)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %quantl.exit.i*/
	/*   %161 = load i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_61)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %quantl.exit.i*/
	/*   %165 = load i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_62)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %quantl.exit.i*/
	/*   %169 = load i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_63)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %quantl.exit.i*/
	/*   %173 = load i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 1, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_64)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %quantl.exit.i*/
	/*   %177 = load i32* getelementptr ([6 x i32]* @delay_bph, i32 1, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_65)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %quantl.exit.i*/
	/*   %181 = load i32* getelementptr ([6 x i32]* @delay_bph, i32 1, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_66)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %quantl.exit.i*/
	/*   %185 = load i32* getelementptr ([6 x i32]* @delay_bph, i32 1, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_67)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %quantl.exit.i*/
	/*   %189 = load i32* getelementptr ([6 x i32]* @delay_bph, i32 1, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_68)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre39 = load i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_85)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre41 = load i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_86)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre43 = load i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_87)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre45 = load i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_88)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre47 = load i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_89)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre49 = load i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_90)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.preheader.i*/
	/*   %268 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_101)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.preheader.i*/
	/*   %271 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_102)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.preheader.i*/
	/*   %275 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_103)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.preheader.i*/
	/*   %279 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_104)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.preheader.i*/
	/*   %283 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_105)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.preheader.i*/
	/*   %287 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_106)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.preheader.i*/
	/*   %291 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 1, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_107)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.preheader.i*/
	/*   %295 = load i32* getelementptr ([6 x i32]* @dec_del_bpl, i32 1, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_108)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.preheader.i*/
	/*   %299 = load i32* getelementptr ([6 x i32]* @dec_del_bpl, i32 1, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_109)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.preheader.i*/
	/*   %303 = load i32* getelementptr ([6 x i32]* @dec_del_bpl, i32 1, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_110)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.preheader.i*/
	/*   %307 = load i32* getelementptr ([6 x i32]* @dec_del_bpl, i32 1, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_111)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.preheader.i*/
	/*   %364 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_142)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.preheader.i*/
	/*   %367 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_143)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.preheader.i*/
	/*   %371 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_144)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.preheader.i*/
	/*   %375 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_145)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.preheader.i*/
	/*   %379 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_146)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.preheader.i*/
	/*   %383 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_147)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.preheader.i*/
	/*   %387 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 1, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_148)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.preheader.i*/
	/*   %391 = load i32* getelementptr ([6 x i32]* @dec_del_bph, i32 1, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_149)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.preheader.i*/
	/*   %395 = load i32* getelementptr ([6 x i32]* @dec_del_bph, i32 1, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_150)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.preheader.i*/
	/*   %399 = load i32* getelementptr ([6 x i32]* @dec_del_bph, i32 1, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_151)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.preheader.i*/
	/*   %403 = load i32* getelementptr ([6 x i32]* @dec_del_bph, i32 1, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_152)) begin
		memory_controller_size_a = 2'd2;
	end
end
always @(*) begin
	memory_controller_enable_b = 0;
	/* main: %0*/
	/*   call void @legup_memset_4_i64(i8* bitcast ([24 x i32]* @tqmf to i8*), i8 0, i64 96)*/
	if ((cur_state == LEGUP_function_call_26)) begin
		memory_controller_enable_b = legup_memset_4_i64_memory_controller_enable_b;
	end
	/* main: %0*/
	/*   call void @legup_memset_4_i64(i8* bitcast ([24 x i32]* @tqmf to i8*), i8 0, i64 96)*/
	if ((cur_state == LEGUP_function_call_26)) begin
		memory_controller_enable_b = legup_memset_4_i64_memory_controller_enable_b;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_1)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_2)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_3)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_4)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_5)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_6)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_7)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_8)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_9)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_10)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_11)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_12)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_13)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_14)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_15)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_16)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_17)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_18)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_19)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_20)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_21)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_22)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_23)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_24)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %1*/
	/*   %64 = load i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 1, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_28)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %1*/
	/*   %68 = load i32* getelementptr ([6 x i32]* @delay_bpl, i32 1, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_29)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %1*/
	/*   %72 = load i32* getelementptr ([6 x i32]* @delay_bpl, i32 1, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_30)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %1*/
	/*   %76 = load i32* getelementptr ([6 x i32]* @delay_bpl, i32 1, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_31)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %1*/
	/*   %80 = load i32* getelementptr ([6 x i32]* @delay_bpl, i32 1, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_32)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %quantl.exit.i*/
	/*   %151 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_58)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %quantl.exit.i*/
	/*   %154 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_59)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %quantl.exit.i*/
	/*   %158 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_60)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %quantl.exit.i*/
	/*   %162 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_61)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %quantl.exit.i*/
	/*   %166 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_62)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %quantl.exit.i*/
	/*   %170 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_63)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %quantl.exit.i*/
	/*   %174 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 1, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_64)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %quantl.exit.i*/
	/*   %178 = load i32* getelementptr ([6 x i32]* @delay_dhx, i32 1, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_65)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %quantl.exit.i*/
	/*   %182 = load i32* getelementptr ([6 x i32]* @delay_dhx, i32 1, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_66)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %quantl.exit.i*/
	/*   %186 = load i32* getelementptr ([6 x i32]* @delay_dhx, i32 1, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_67)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %quantl.exit.i*/
	/*   %190 = load i32* getelementptr ([6 x i32]* @delay_dhx, i32 1, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_68)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre40 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_85)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre42 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_86)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre44 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_87)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre46 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_88)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre48 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_89)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.preheader.i*/
	/*   %269 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_101)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.preheader.i*/
	/*   %272 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_102)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.preheader.i*/
	/*   %276 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_103)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.preheader.i*/
	/*   %280 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_104)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.preheader.i*/
	/*   %284 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_105)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.preheader.i*/
	/*   %288 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_106)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.preheader.i*/
	/*   %292 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 1, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_107)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.preheader.i*/
	/*   %296 = load i32* getelementptr ([6 x i32]* @dec_del_dltx, i32 1, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_108)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.preheader.i*/
	/*   %300 = load i32* getelementptr ([6 x i32]* @dec_del_dltx, i32 1, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_109)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.preheader.i*/
	/*   %304 = load i32* getelementptr ([6 x i32]* @dec_del_dltx, i32 1, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_110)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.preheader.i*/
	/*   %308 = load i32* getelementptr ([6 x i32]* @dec_del_dltx, i32 1, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_111)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.preheader.i*/
	/*   %365 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_142)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.preheader.i*/
	/*   %368 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_143)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.preheader.i*/
	/*   %372 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_144)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.preheader.i*/
	/*   %376 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_145)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.preheader.i*/
	/*   %380 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_146)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.preheader.i*/
	/*   %384 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_147)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.preheader.i*/
	/*   %388 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 1, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_148)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.preheader.i*/
	/*   %392 = load i32* getelementptr ([6 x i32]* @dec_del_dhx, i32 1, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_149)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.preheader.i*/
	/*   %396 = load i32* getelementptr ([6 x i32]* @dec_del_dhx, i32 1, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_150)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.preheader.i*/
	/*   %400 = load i32* getelementptr ([6 x i32]* @dec_del_dhx, i32 1, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_151)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.preheader.i*/
	/*   %404 = load i32* getelementptr ([6 x i32]* @dec_del_dhx, i32 1, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_152)) begin
		memory_controller_enable_b = 1'd1;
	end
end
always @(*) begin
	memory_controller_address_b = 0;
	/* main: %0*/
	/*   call void @legup_memset_4_i64(i8* bitcast ([24 x i32]* @tqmf to i8*), i8 0, i64 96)*/
	if ((cur_state == LEGUP_function_call_26)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = legup_memset_4_i64_memory_controller_address_b;
	end
	/* main: %0*/
	/*   call void @legup_memset_4_i64(i8* bitcast ([24 x i32]* @tqmf to i8*), i8 0, i64 96)*/
	if ((cur_state == LEGUP_function_call_26)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = legup_memset_4_i64_memory_controller_address_b;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_1)) begin
		memory_controller_address_b = `TAG_g_delay_dhx_a;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_2)) begin
		memory_controller_address_b = `TAG_g_dec_del_dhx_a;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_3)) begin
		memory_controller_address_b = (`TAG_g_delay_dhx_a | (4 * 32'd1));
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_4)) begin
		memory_controller_address_b = (`TAG_g_dec_del_dhx_a | (4 * 32'd1));
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_5)) begin
		memory_controller_address_b = (`TAG_g_delay_dhx_a | (4 * 32'd2));
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_6)) begin
		memory_controller_address_b = (`TAG_g_dec_del_dhx_a | (4 * 32'd2));
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_7)) begin
		memory_controller_address_b = (`TAG_g_delay_dhx_a | (4 * 32'd3));
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_8)) begin
		memory_controller_address_b = (`TAG_g_dec_del_dhx_a | (4 * 32'd3));
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_9)) begin
		memory_controller_address_b = (`TAG_g_delay_dhx_a | (4 * 32'd4));
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_10)) begin
		memory_controller_address_b = (`TAG_g_dec_del_dhx_a | (4 * 32'd4));
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_11)) begin
		memory_controller_address_b = (`TAG_g_delay_dhx_a | (4 * 32'd5));
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_12)) begin
		memory_controller_address_b = (`TAG_g_dec_del_dhx_a | (4 * 32'd5));
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_13)) begin
		memory_controller_address_b = `TAG_g_delay_bph_a;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_14)) begin
		memory_controller_address_b = `TAG_g_dec_del_bph_a;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_15)) begin
		memory_controller_address_b = (`TAG_g_delay_bph_a | (4 * 32'd1));
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_16)) begin
		memory_controller_address_b = (`TAG_g_dec_del_bph_a | (4 * 32'd1));
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_17)) begin
		memory_controller_address_b = (`TAG_g_delay_bph_a | (4 * 32'd2));
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_18)) begin
		memory_controller_address_b = (`TAG_g_dec_del_bph_a | (4 * 32'd2));
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_19)) begin
		memory_controller_address_b = (`TAG_g_delay_bph_a | (4 * 32'd3));
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_20)) begin
		memory_controller_address_b = (`TAG_g_dec_del_bph_a | (4 * 32'd3));
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_21)) begin
		memory_controller_address_b = (`TAG_g_delay_bph_a | (4 * 32'd4));
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_22)) begin
		memory_controller_address_b = (`TAG_g_dec_del_bph_a | (4 * 32'd4));
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_23)) begin
		memory_controller_address_b = (`TAG_g_delay_bph_a | (4 * 32'd5));
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_24)) begin
		memory_controller_address_b = (`TAG_g_dec_del_bph_a | (4 * 32'd5));
	end
	/* main: %1*/
	/*   %64 = load i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 1, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_28)) begin
		memory_controller_address_b = (`TAG_g_delay_bpl_a | (24 * 32'd1));
	end
	/* main: %1*/
	/*   %68 = load i32* getelementptr ([6 x i32]* @delay_bpl, i32 1, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_29)) begin
		memory_controller_address_b = (`TAG_g_delay_bpl_a | ((24 * 32'd1) + (4 * 32'd1)));
	end
	/* main: %1*/
	/*   %72 = load i32* getelementptr ([6 x i32]* @delay_bpl, i32 1, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_30)) begin
		memory_controller_address_b = (`TAG_g_delay_bpl_a | ((24 * 32'd1) + (4 * 32'd2)));
	end
	/* main: %1*/
	/*   %76 = load i32* getelementptr ([6 x i32]* @delay_bpl, i32 1, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_31)) begin
		memory_controller_address_b = (`TAG_g_delay_bpl_a | ((24 * 32'd1) + (4 * 32'd3)));
	end
	/* main: %1*/
	/*   %80 = load i32* getelementptr ([6 x i32]* @delay_bpl, i32 1, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_32)) begin
		memory_controller_address_b = (`TAG_g_delay_bpl_a | ((24 * 32'd1) + (4 * 32'd4)));
	end
	/* main: %quantl.exit.i*/
	/*   %151 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_58)) begin
		memory_controller_address_b = `TAG_g_delay_dhx_a;
	end
	/* main: %quantl.exit.i*/
	/*   %154 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_59)) begin
		memory_controller_address_b = (`TAG_g_delay_dhx_a | (4 * 32'd1));
	end
	/* main: %quantl.exit.i*/
	/*   %158 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_60)) begin
		memory_controller_address_b = (`TAG_g_delay_dhx_a | (4 * 32'd2));
	end
	/* main: %quantl.exit.i*/
	/*   %162 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_61)) begin
		memory_controller_address_b = (`TAG_g_delay_dhx_a | (4 * 32'd3));
	end
	/* main: %quantl.exit.i*/
	/*   %166 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_62)) begin
		memory_controller_address_b = (`TAG_g_delay_dhx_a | (4 * 32'd4));
	end
	/* main: %quantl.exit.i*/
	/*   %170 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_63)) begin
		memory_controller_address_b = (`TAG_g_delay_dhx_a | (4 * 32'd5));
	end
	/* main: %quantl.exit.i*/
	/*   %174 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 1, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_64)) begin
		memory_controller_address_b = (`TAG_g_delay_dhx_a | (24 * 32'd1));
	end
	/* main: %quantl.exit.i*/
	/*   %178 = load i32* getelementptr ([6 x i32]* @delay_dhx, i32 1, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_65)) begin
		memory_controller_address_b = (`TAG_g_delay_dhx_a | ((24 * 32'd1) + (4 * 32'd1)));
	end
	/* main: %quantl.exit.i*/
	/*   %182 = load i32* getelementptr ([6 x i32]* @delay_dhx, i32 1, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_66)) begin
		memory_controller_address_b = (`TAG_g_delay_dhx_a | ((24 * 32'd1) + (4 * 32'd2)));
	end
	/* main: %quantl.exit.i*/
	/*   %186 = load i32* getelementptr ([6 x i32]* @delay_dhx, i32 1, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_67)) begin
		memory_controller_address_b = (`TAG_g_delay_dhx_a | ((24 * 32'd1) + (4 * 32'd3)));
	end
	/* main: %quantl.exit.i*/
	/*   %190 = load i32* getelementptr ([6 x i32]* @delay_dhx, i32 1, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_68)) begin
		memory_controller_address_b = (`TAG_g_delay_dhx_a | ((24 * 32'd1) + (4 * 32'd4)));
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre40 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_85)) begin
		memory_controller_address_b = `TAG_g_delay_dltx_a;
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre42 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_86)) begin
		memory_controller_address_b = (`TAG_g_delay_dltx_a | (4 * 32'd1));
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre44 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_87)) begin
		memory_controller_address_b = (`TAG_g_delay_dltx_a | (4 * 32'd2));
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre46 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_88)) begin
		memory_controller_address_b = (`TAG_g_delay_dltx_a | (4 * 32'd3));
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre48 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_89)) begin
		memory_controller_address_b = (`TAG_g_delay_dltx_a | (4 * 32'd4));
	end
	/* main: %.preheader.i*/
	/*   %269 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_101)) begin
		memory_controller_address_b = `TAG_g_dec_del_dltx_a;
	end
	/* main: %.preheader.i*/
	/*   %272 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_102)) begin
		memory_controller_address_b = (`TAG_g_dec_del_dltx_a | (4 * 32'd1));
	end
	/* main: %.preheader.i*/
	/*   %276 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_103)) begin
		memory_controller_address_b = (`TAG_g_dec_del_dltx_a | (4 * 32'd2));
	end
	/* main: %.preheader.i*/
	/*   %280 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_104)) begin
		memory_controller_address_b = (`TAG_g_dec_del_dltx_a | (4 * 32'd3));
	end
	/* main: %.preheader.i*/
	/*   %284 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_105)) begin
		memory_controller_address_b = (`TAG_g_dec_del_dltx_a | (4 * 32'd4));
	end
	/* main: %.preheader.i*/
	/*   %288 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_106)) begin
		memory_controller_address_b = (`TAG_g_dec_del_dltx_a | (4 * 32'd5));
	end
	/* main: %.preheader.i*/
	/*   %292 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 1, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_107)) begin
		memory_controller_address_b = (`TAG_g_dec_del_dltx_a | (24 * 32'd1));
	end
	/* main: %.preheader.i*/
	/*   %296 = load i32* getelementptr ([6 x i32]* @dec_del_dltx, i32 1, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_108)) begin
		memory_controller_address_b = (`TAG_g_dec_del_dltx_a | ((24 * 32'd1) + (4 * 32'd1)));
	end
	/* main: %.preheader.i*/
	/*   %300 = load i32* getelementptr ([6 x i32]* @dec_del_dltx, i32 1, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_109)) begin
		memory_controller_address_b = (`TAG_g_dec_del_dltx_a | ((24 * 32'd1) + (4 * 32'd2)));
	end
	/* main: %.preheader.i*/
	/*   %304 = load i32* getelementptr ([6 x i32]* @dec_del_dltx, i32 1, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_110)) begin
		memory_controller_address_b = (`TAG_g_dec_del_dltx_a | ((24 * 32'd1) + (4 * 32'd3)));
	end
	/* main: %.preheader.i*/
	/*   %308 = load i32* getelementptr ([6 x i32]* @dec_del_dltx, i32 1, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_111)) begin
		memory_controller_address_b = (`TAG_g_dec_del_dltx_a | ((24 * 32'd1) + (4 * 32'd4)));
	end
	/* main: %.preheader.i*/
	/*   %365 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_142)) begin
		memory_controller_address_b = `TAG_g_dec_del_dhx_a;
	end
	/* main: %.preheader.i*/
	/*   %368 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_143)) begin
		memory_controller_address_b = (`TAG_g_dec_del_dhx_a | (4 * 32'd1));
	end
	/* main: %.preheader.i*/
	/*   %372 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_144)) begin
		memory_controller_address_b = (`TAG_g_dec_del_dhx_a | (4 * 32'd2));
	end
	/* main: %.preheader.i*/
	/*   %376 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_145)) begin
		memory_controller_address_b = (`TAG_g_dec_del_dhx_a | (4 * 32'd3));
	end
	/* main: %.preheader.i*/
	/*   %380 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_146)) begin
		memory_controller_address_b = (`TAG_g_dec_del_dhx_a | (4 * 32'd4));
	end
	/* main: %.preheader.i*/
	/*   %384 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_147)) begin
		memory_controller_address_b = (`TAG_g_dec_del_dhx_a | (4 * 32'd5));
	end
	/* main: %.preheader.i*/
	/*   %388 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 1, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_148)) begin
		memory_controller_address_b = (`TAG_g_dec_del_dhx_a | (24 * 32'd1));
	end
	/* main: %.preheader.i*/
	/*   %392 = load i32* getelementptr ([6 x i32]* @dec_del_dhx, i32 1, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_149)) begin
		memory_controller_address_b = (`TAG_g_dec_del_dhx_a | ((24 * 32'd1) + (4 * 32'd1)));
	end
	/* main: %.preheader.i*/
	/*   %396 = load i32* getelementptr ([6 x i32]* @dec_del_dhx, i32 1, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_150)) begin
		memory_controller_address_b = (`TAG_g_dec_del_dhx_a | ((24 * 32'd1) + (4 * 32'd2)));
	end
	/* main: %.preheader.i*/
	/*   %400 = load i32* getelementptr ([6 x i32]* @dec_del_dhx, i32 1, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_151)) begin
		memory_controller_address_b = (`TAG_g_dec_del_dhx_a | ((24 * 32'd1) + (4 * 32'd3)));
	end
	/* main: %.preheader.i*/
	/*   %404 = load i32* getelementptr ([6 x i32]* @dec_del_dhx, i32 1, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_152)) begin
		memory_controller_address_b = (`TAG_g_dec_del_dhx_a | ((24 * 32'd1) + (4 * 32'd4)));
	end
end
always @(*) begin
	memory_controller_write_enable_b = 0;
	/* main: %0*/
	/*   call void @legup_memset_4_i64(i8* bitcast ([24 x i32]* @tqmf to i8*), i8 0, i64 96)*/
	if ((cur_state == LEGUP_function_call_26)) begin
		memory_controller_write_enable_b = legup_memset_4_i64_memory_controller_write_enable_b;
	end
	/* main: %0*/
	/*   call void @legup_memset_4_i64(i8* bitcast ([24 x i32]* @tqmf to i8*), i8 0, i64 96)*/
	if ((cur_state == LEGUP_function_call_26)) begin
		memory_controller_write_enable_b = legup_memset_4_i64_memory_controller_write_enable_b;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_1)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_2)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_3)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_4)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_5)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_6)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_7)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_8)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_9)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_10)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_11)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_12)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_13)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_14)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_15)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_16)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_17)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_18)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_19)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_20)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_21)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_22)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_23)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_24)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %1*/
	/*   %64 = load i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 1, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_28)) begin
		memory_controller_write_enable_b = 0;
	end
	/* main: %1*/
	/*   %68 = load i32* getelementptr ([6 x i32]* @delay_bpl, i32 1, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_29)) begin
		memory_controller_write_enable_b = 0;
	end
	/* main: %1*/
	/*   %72 = load i32* getelementptr ([6 x i32]* @delay_bpl, i32 1, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_30)) begin
		memory_controller_write_enable_b = 0;
	end
	/* main: %1*/
	/*   %76 = load i32* getelementptr ([6 x i32]* @delay_bpl, i32 1, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_31)) begin
		memory_controller_write_enable_b = 0;
	end
	/* main: %1*/
	/*   %80 = load i32* getelementptr ([6 x i32]* @delay_bpl, i32 1, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_32)) begin
		memory_controller_write_enable_b = 0;
	end
	/* main: %quantl.exit.i*/
	/*   %151 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_58)) begin
		memory_controller_write_enable_b = 0;
	end
	/* main: %quantl.exit.i*/
	/*   %154 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_59)) begin
		memory_controller_write_enable_b = 0;
	end
	/* main: %quantl.exit.i*/
	/*   %158 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_60)) begin
		memory_controller_write_enable_b = 0;
	end
	/* main: %quantl.exit.i*/
	/*   %162 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_61)) begin
		memory_controller_write_enable_b = 0;
	end
	/* main: %quantl.exit.i*/
	/*   %166 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_62)) begin
		memory_controller_write_enable_b = 0;
	end
	/* main: %quantl.exit.i*/
	/*   %170 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_63)) begin
		memory_controller_write_enable_b = 0;
	end
	/* main: %quantl.exit.i*/
	/*   %174 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 1, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_64)) begin
		memory_controller_write_enable_b = 0;
	end
	/* main: %quantl.exit.i*/
	/*   %178 = load i32* getelementptr ([6 x i32]* @delay_dhx, i32 1, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_65)) begin
		memory_controller_write_enable_b = 0;
	end
	/* main: %quantl.exit.i*/
	/*   %182 = load i32* getelementptr ([6 x i32]* @delay_dhx, i32 1, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_66)) begin
		memory_controller_write_enable_b = 0;
	end
	/* main: %quantl.exit.i*/
	/*   %186 = load i32* getelementptr ([6 x i32]* @delay_dhx, i32 1, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_67)) begin
		memory_controller_write_enable_b = 0;
	end
	/* main: %quantl.exit.i*/
	/*   %190 = load i32* getelementptr ([6 x i32]* @delay_dhx, i32 1, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_68)) begin
		memory_controller_write_enable_b = 0;
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre40 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_85)) begin
		memory_controller_write_enable_b = 0;
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre42 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_86)) begin
		memory_controller_write_enable_b = 0;
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre44 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_87)) begin
		memory_controller_write_enable_b = 0;
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre46 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_88)) begin
		memory_controller_write_enable_b = 0;
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre48 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_89)) begin
		memory_controller_write_enable_b = 0;
	end
	/* main: %.preheader.i*/
	/*   %269 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_101)) begin
		memory_controller_write_enable_b = 0;
	end
	/* main: %.preheader.i*/
	/*   %272 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_102)) begin
		memory_controller_write_enable_b = 0;
	end
	/* main: %.preheader.i*/
	/*   %276 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_103)) begin
		memory_controller_write_enable_b = 0;
	end
	/* main: %.preheader.i*/
	/*   %280 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_104)) begin
		memory_controller_write_enable_b = 0;
	end
	/* main: %.preheader.i*/
	/*   %284 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_105)) begin
		memory_controller_write_enable_b = 0;
	end
	/* main: %.preheader.i*/
	/*   %288 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_106)) begin
		memory_controller_write_enable_b = 0;
	end
	/* main: %.preheader.i*/
	/*   %292 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 1, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_107)) begin
		memory_controller_write_enable_b = 0;
	end
	/* main: %.preheader.i*/
	/*   %296 = load i32* getelementptr ([6 x i32]* @dec_del_dltx, i32 1, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_108)) begin
		memory_controller_write_enable_b = 0;
	end
	/* main: %.preheader.i*/
	/*   %300 = load i32* getelementptr ([6 x i32]* @dec_del_dltx, i32 1, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_109)) begin
		memory_controller_write_enable_b = 0;
	end
	/* main: %.preheader.i*/
	/*   %304 = load i32* getelementptr ([6 x i32]* @dec_del_dltx, i32 1, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_110)) begin
		memory_controller_write_enable_b = 0;
	end
	/* main: %.preheader.i*/
	/*   %308 = load i32* getelementptr ([6 x i32]* @dec_del_dltx, i32 1, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_111)) begin
		memory_controller_write_enable_b = 0;
	end
	/* main: %.preheader.i*/
	/*   %365 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_142)) begin
		memory_controller_write_enable_b = 0;
	end
	/* main: %.preheader.i*/
	/*   %368 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_143)) begin
		memory_controller_write_enable_b = 0;
	end
	/* main: %.preheader.i*/
	/*   %372 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_144)) begin
		memory_controller_write_enable_b = 0;
	end
	/* main: %.preheader.i*/
	/*   %376 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_145)) begin
		memory_controller_write_enable_b = 0;
	end
	/* main: %.preheader.i*/
	/*   %380 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_146)) begin
		memory_controller_write_enable_b = 0;
	end
	/* main: %.preheader.i*/
	/*   %384 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_147)) begin
		memory_controller_write_enable_b = 0;
	end
	/* main: %.preheader.i*/
	/*   %388 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 1, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_148)) begin
		memory_controller_write_enable_b = 0;
	end
	/* main: %.preheader.i*/
	/*   %392 = load i32* getelementptr ([6 x i32]* @dec_del_dhx, i32 1, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_149)) begin
		memory_controller_write_enable_b = 0;
	end
	/* main: %.preheader.i*/
	/*   %396 = load i32* getelementptr ([6 x i32]* @dec_del_dhx, i32 1, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_150)) begin
		memory_controller_write_enable_b = 0;
	end
	/* main: %.preheader.i*/
	/*   %400 = load i32* getelementptr ([6 x i32]* @dec_del_dhx, i32 1, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_151)) begin
		memory_controller_write_enable_b = 0;
	end
	/* main: %.preheader.i*/
	/*   %404 = load i32* getelementptr ([6 x i32]* @dec_del_dhx, i32 1, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_152)) begin
		memory_controller_write_enable_b = 0;
	end
end
always @(*) begin
	memory_controller_in_b = 0;
	/* main: %0*/
	/*   call void @legup_memset_4_i64(i8* bitcast ([24 x i32]* @tqmf to i8*), i8 0, i64 96)*/
	if ((cur_state == LEGUP_function_call_26)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = legup_memset_4_i64_memory_controller_in_b;
	end
	/* main: %0*/
	/*   call void @legup_memset_4_i64(i8* bitcast ([24 x i32]* @tqmf to i8*), i8 0, i64 96)*/
	if ((cur_state == LEGUP_function_call_26)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = legup_memset_4_i64_memory_controller_in_b;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_1)) begin
		memory_controller_in_b = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_2)) begin
		memory_controller_in_b = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_3)) begin
		memory_controller_in_b = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_4)) begin
		memory_controller_in_b = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_5)) begin
		memory_controller_in_b = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_6)) begin
		memory_controller_in_b = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_7)) begin
		memory_controller_in_b = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_8)) begin
		memory_controller_in_b = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_9)) begin
		memory_controller_in_b = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_10)) begin
		memory_controller_in_b = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_11)) begin
		memory_controller_in_b = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_12)) begin
		memory_controller_in_b = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_13)) begin
		memory_controller_in_b = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_14)) begin
		memory_controller_in_b = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_15)) begin
		memory_controller_in_b = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_16)) begin
		memory_controller_in_b = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_17)) begin
		memory_controller_in_b = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_18)) begin
		memory_controller_in_b = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_19)) begin
		memory_controller_in_b = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_20)) begin
		memory_controller_in_b = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_21)) begin
		memory_controller_in_b = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_22)) begin
		memory_controller_in_b = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_23)) begin
		memory_controller_in_b = 32'd0;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_24)) begin
		memory_controller_in_b = 32'd0;
	end
end
always @(*) begin
	memory_controller_size_b = 0;
	if ((cur_state == LEGUP_function_call_26)) begin
		memory_controller_size_b[1:0] = legup_memset_4_i64_memory_controller_size_b;
	end
	/* main: %0*/
	/*   call void @legup_memset_4_i64(i8* bitcast ([24 x i32]* @tqmf to i8*), i8 0, i64 96)*/
	if ((cur_state == LEGUP_function_call_26)) begin
		memory_controller_size_b[1:0] = legup_memset_4_i64_memory_controller_size_b;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_1)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_2)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_3)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_4)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_5)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_6)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_7)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_8)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_9)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_10)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_11)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_12)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_13)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_14)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_15)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_16)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_17)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_18)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_19)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_20)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_21)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_22)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_23)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_24)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %1*/
	/*   %64 = load i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 1, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_28)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %1*/
	/*   %68 = load i32* getelementptr ([6 x i32]* @delay_bpl, i32 1, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_29)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %1*/
	/*   %72 = load i32* getelementptr ([6 x i32]* @delay_bpl, i32 1, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_30)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %1*/
	/*   %76 = load i32* getelementptr ([6 x i32]* @delay_bpl, i32 1, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_31)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %1*/
	/*   %80 = load i32* getelementptr ([6 x i32]* @delay_bpl, i32 1, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_32)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %quantl.exit.i*/
	/*   %151 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_58)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %quantl.exit.i*/
	/*   %154 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_59)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %quantl.exit.i*/
	/*   %158 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_60)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %quantl.exit.i*/
	/*   %162 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_61)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %quantl.exit.i*/
	/*   %166 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_62)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %quantl.exit.i*/
	/*   %170 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_63)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %quantl.exit.i*/
	/*   %174 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 1, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_64)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %quantl.exit.i*/
	/*   %178 = load i32* getelementptr ([6 x i32]* @delay_dhx, i32 1, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_65)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %quantl.exit.i*/
	/*   %182 = load i32* getelementptr ([6 x i32]* @delay_dhx, i32 1, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_66)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %quantl.exit.i*/
	/*   %186 = load i32* getelementptr ([6 x i32]* @delay_dhx, i32 1, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_67)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %quantl.exit.i*/
	/*   %190 = load i32* getelementptr ([6 x i32]* @delay_dhx, i32 1, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_quantlexiti_68)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre40 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_85)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre42 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_86)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre44 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_87)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre46 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_88)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %encode.exit._crit_edge*/
	/*   %.pre48 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_encodeexit_crit_edge_89)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.preheader.i*/
	/*   %269 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_101)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.preheader.i*/
	/*   %272 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_102)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.preheader.i*/
	/*   %276 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_103)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.preheader.i*/
	/*   %280 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_104)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.preheader.i*/
	/*   %284 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_105)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.preheader.i*/
	/*   %288 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_106)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.preheader.i*/
	/*   %292 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 1, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_107)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.preheader.i*/
	/*   %296 = load i32* getelementptr ([6 x i32]* @dec_del_dltx, i32 1, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_108)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.preheader.i*/
	/*   %300 = load i32* getelementptr ([6 x i32]* @dec_del_dltx, i32 1, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_109)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.preheader.i*/
	/*   %304 = load i32* getelementptr ([6 x i32]* @dec_del_dltx, i32 1, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_110)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.preheader.i*/
	/*   %308 = load i32* getelementptr ([6 x i32]* @dec_del_dltx, i32 1, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_111)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.preheader.i*/
	/*   %365 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_142)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.preheader.i*/
	/*   %368 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_143)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.preheader.i*/
	/*   %372 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_144)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.preheader.i*/
	/*   %376 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_145)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.preheader.i*/
	/*   %380 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_146)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.preheader.i*/
	/*   %384 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_147)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.preheader.i*/
	/*   %388 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 1, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_148)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.preheader.i*/
	/*   %392 = load i32* getelementptr ([6 x i32]* @dec_del_dhx, i32 1, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_149)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.preheader.i*/
	/*   %396 = load i32* getelementptr ([6 x i32]* @dec_del_dhx, i32 1, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_150)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.preheader.i*/
	/*   %400 = load i32* getelementptr ([6 x i32]* @dec_del_dhx, i32 1, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_151)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.preheader.i*/
	/*   %404 = load i32* getelementptr ([6 x i32]* @dec_del_dhx, i32 1, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_152)) begin
		memory_controller_size_b = 2'd2;
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		return_val <= 0;
		if (start == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
	/* main: %532*/
	/*   ret i32 %.main_result.2.lcssa*/
	if ((cur_state == LEGUP_F_main_BB__532_169)) begin
		return_val <= main_525_main_result2lcssa_reg;
		if (start == 1'b0 && ^(main_525_main_result2lcssa_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
end

endmodule 
module ram_dual_port
(
	clk,
	clken,
	address_a,
	address_b,
	wren_a,
	wren_b,
	data_a,
	data_b,
	byteena_a,
	byteena_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED.mif";
parameter  width_be_a = 1'd0;
parameter  width_be_b = 1'd0;
parameter  latency = 1;

input  clk;
input  clken;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output wire [(width_a-1):0] q_a;
output wire [(width_b-1):0] q_b;
reg [(width_a-1):0] q_a_wire;
reg [(width_b-1):0] q_b_wire;
input  wren_a;
input  wren_b;
input [(width_a-1):0] data_a;
input [(width_b-1):0] data_b;
// byte enable is unsupported by inferred RAMs
input [width_be_a-1:0] byteena_a;
input [width_be_b-1:0] byteena_b;

(* ramstyle = "no_rw_check", ram_init_file = init_file *) reg [width_a-1:0] ram[numwords_a-1:0];

/* synthesis translate_off */
integer i;
ALTERA_MF_MEMORY_INITIALIZATION mem ();
reg [8*256:1] ram_ver_file;
initial begin
	if (init_file == "UNUSED.mif")
    begin
		for (i = 0; i < numwords_a; i = i + 1)
			ram[i] = 0;
    end
	else
    begin
        // modelsim can't read .mif files directly. So use Altera function to
        // convert them to .ver files
        mem.convert_to_ver_file(init_file, width_a, ram_ver_file);
        $readmemh(ram_ver_file, ram);
    end
end
/* synthesis translate_on */

always @ (posedge clk)
if (clken)
begin // Port A
if (wren_a)
begin
    ram[address_a] <= data_a;
    q_a_wire <= {width_a{1'bX}};
end
else
    q_a_wire <= ram[address_a];
end
always @ (posedge clk)
if (clken)
begin // Port b
if (wren_b)
begin
    ram[address_b] <= data_b;
    q_b_wire <= {width_b{1'bX}};
end
else
    q_b_wire <= ram[address_b];
end



integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
if (clken)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = (clken) ? q_a_reg[latency] : 0;
assign q_b = (clken) ? q_b_reg[latency] : 0;


endmodule
module rom_dual_port
(
	clk,
	clken,
	address_a,
	address_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED.mif";
parameter  latency = 1;

input  clk;
input  clken;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output wire [(width_a-1):0] q_a;
output wire [(width_b-1):0] q_b;
reg [(width_a-1):0] q_a_wire;
reg [(width_b-1):0] q_b_wire;

(* ramstyle = "no_rw_check", ram_init_file = init_file *) reg [width_a-1:0] ram[numwords_a-1:0];

/* synthesis translate_off */
integer i;
ALTERA_MF_MEMORY_INITIALIZATION mem ();
reg [8*256:1] ram_ver_file;
initial begin
	if (init_file == "UNUSED.mif")
    begin
		for (i = 0; i < numwords_a; i = i + 1)
			ram[i] = 0;
    end
	else
    begin
        // modelsim can't read .mif files directly. So use Altera function to
        // convert them to .ver files
        mem.convert_to_ver_file(init_file, width_a, ram_ver_file);
        $readmemh(ram_ver_file, ram);
    end
end
/* synthesis translate_on */

always @ (posedge clk)
if (clken)
begin
    q_a_wire <= ram[address_a];
    q_b_wire <= ram[address_b];
end



integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
if (clken)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = (clken) ? q_a_reg[latency] : 0;
assign q_b = (clken) ? q_b_reg[latency] : 0;


endmodule
// Adding code from verilog file: ../../../boards/Virtex6/ML605/top.v


module ML605 (
       USER_CLOCK,
	    KEY,
	    SW,	    
       LED,
       LEDG,
		UART_RXD,
		UART_TXD

	    );

   input USER_CLOCK;
   input [4:0] KEY;
   input [7:0] SW;
   output [7:0] LED;
   output [7:0] LEDG;
   wire CLOCK_50;

    input UART_RXD;
    output UART_TXD;    
	wire clk = CLOCK_50;
	wire go = ~KEY[1];



   wire 	reset = ~KEY[0];
   wire 	start;
   wire [31:0] 	return_val;
   reg  [31:0] 	return_val_reg;
   wire 	finish;
   wire [3:0]	state;
   
   reg [6:0]   hex0, hex1, hex2, hex3, hex4, hex5, hex6, hex7;

   assign CLOCK_50 = USER_CLOCK;
   assign LED = 0;
   
	always @ (*) begin
		hex7 <= return_val_reg[31:28];
		hex6 <= return_val_reg[27:24];
		hex5 <= return_val_reg[23:20];
		hex4 <= return_val_reg[19:16];
		hex3 <= return_val_reg[15:12];
		hex2 <= return_val_reg[11:8];
		hex1 <= return_val_reg[7:4];
		hex0 <= return_val_reg[3:0];
	end
assign UART_TXD = 1'b0;

    parameter s_WAIT = 3'b001, s_START = 3'b010, s_EXE = 3'b011,
                s_DONE = 3'b100;

    // state registers
    reg [3:0] y_Q, Y_D;

    assign LEDG[3:0] = y_Q;

    // next state
    always @(*)
    begin
        case (y_Q)
            s_WAIT: if (go) Y_D = s_START; else Y_D = y_Q;

            s_START: Y_D = s_EXE;

            s_EXE: if (!finish) Y_D = s_EXE; else Y_D = s_DONE;

            s_DONE: Y_D = s_DONE;

            default: Y_D = 3'bxxx;
        endcase
    end

    // current state
    always @(posedge clk)
    begin
        if (reset) // synchronous clear
            y_Q <= s_WAIT;
        else
            y_Q <= Y_D;
    end

    always @(posedge clk)
        if (y_Q == s_EXE && finish)
            return_val_reg <= return_val;
        else if (y_Q == s_DONE)
            return_val_reg <= return_val_reg;
        else
            return_val_reg <= 0;


    assign start = (y_Q == s_START);

   
   top top_inst (
      .clk (clk),
      .reset (reset),
      .finish (finish),
      .return_val (return_val),
        .start (start)

    );

   

endmodule

// Adding code from verilog file: ../../../boards/StratixIV/DE4/top.v


module de4 ( 
    	     OSC_50_BANK2, 
             BUTTON, 
             LED, 
    	     SEG0_D, 
    	     SEG1_D 
	     ); 
   input OSC_50_BANK2; 
   input [1:0] BUTTON; 
   output [6:0] SEG0_D; 
   output [6:0] SEG1_D; 
   output [7:0] LED; 
   
   de2 de2_inst ( 
		  .CLOCK_50 (OSC_50_BANK2), 
		  .LEDG (LED), 
		  .KEY (BUTTON), 
		  .SW (), 
		  .HEX0 (SEG0_D), 
		  .HEX1 (SEG1_D), 
		  .HEX2 (), 
		  .HEX3 (), 
		  .HEX4 (), 
		  .HEX5 (), 
		  .HEX6 (), 
		  .HEX7 () 
		  ); 
   
endmodule
// Adding code from verilog file: ../../../boards/CycloneII/DE2/top.v


module de2 (
	    CLOCK_50,
	    KEY,
	    SW,
	    HEX0,
	    HEX1,
	    HEX2,
	    HEX3,
	    HEX4,
	    HEX5,
	    HEX6,
	    HEX7,
	    LEDG,
		UART_RXD,
		UART_TXD

	    );

   input CLOCK_50;
   input [3:0] KEY;
   input [17:0] SW;
   output [6:0] HEX0, HEX1,  HEX2,  HEX3,  HEX4,  HEX5,  HEX6,  HEX7;
   reg [6:0] 	hex0, hex1, hex2, hex3, hex4, hex5, hex6, hex7;
   

   output [7:0] LEDG;
    input UART_RXD;
    output UART_TXD;    
	wire clk = CLOCK_50;
	wire go = ~KEY[1];



   wire 	reset = ~KEY[0];
   wire 	start;
   wire [31:0] 	return_val;
   reg  [31:0] 	return_val_reg;
   wire 	finish;
   wire [3:0]	state;

   hex_digits h7( .x(hex7), .hex_LEDs(HEX7));
   hex_digits h6( .x(hex6), .hex_LEDs(HEX6));
   hex_digits h5( .x(hex5), .hex_LEDs(HEX5));
   hex_digits h4( .x(hex4), .hex_LEDs(HEX4));
   hex_digits h3( .x(hex3), .hex_LEDs(HEX3));
   hex_digits h2( .x(hex2), .hex_LEDs(HEX2));
   hex_digits h1( .x(hex1), .hex_LEDs(HEX1));
   hex_digits h0( .x(hex0), .hex_LEDs(HEX0));
   
	always @ (*) begin
		hex7 <= return_val_reg[31:28];
		hex6 <= return_val_reg[27:24];
		hex5 <= return_val_reg[23:20];
		hex4 <= return_val_reg[19:16];
		hex3 <= return_val_reg[15:12];
		hex2 <= return_val_reg[11:8];
		hex1 <= return_val_reg[7:4];
		hex0 <= return_val_reg[3:0];
	end
assign UART_TXD = 1'b0;

    parameter s_WAIT = 3'b001, s_START = 3'b010, s_EXE = 3'b011,
                s_DONE = 3'b100;

    // state registers
    reg [3:0] y_Q, Y_D;

    assign LEDG[3:0] = y_Q;

    // next state
    always @(*)
    begin
        case (y_Q)
            s_WAIT: if (go) Y_D = s_START; else Y_D = y_Q;

            s_START: Y_D = s_EXE;

            s_EXE: if (!finish) Y_D = s_EXE; else Y_D = s_DONE;

            s_DONE: Y_D = s_DONE;

            default: Y_D = 3'bxxx;
        endcase
    end

    // current state
    always @(posedge clk)
    begin
        if (reset) // synchronous clear
            y_Q <= s_WAIT;
        else
            y_Q <= Y_D;
    end

    always @(posedge clk)
        if (y_Q == s_EXE && finish)
            return_val_reg <= return_val;
        else if (y_Q == s_DONE)
            return_val_reg <= return_val_reg;
        else
            return_val_reg <= 0;


    assign start = (y_Q == s_START);

   
   top top_inst (
      .clk (clk),
      .reset (reset),
      .finish (finish),
      .return_val (return_val),
        .start (start)

    );

endmodule

module circuit_start_control (
    go,
    control_key
);
    input control_key;
    output go;
    assign go = control_key;
endmodule
module hex_digits(x, hex_LEDs);
    input [3:0] x;
    output [6:0] hex_LEDs;
    
    assign hex_LEDs[0] = (~x[3] & ~x[2] & ~x[1] & x[0]) |
                            (~x[3] & x[2] & ~x[1] & ~x[0]) |
                            (x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & ~x[2] & x[1] & x[0]);
    assign hex_LEDs[1] = (~x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & x[1] & x[0]) |
                            (x[3] & x[2] & ~x[0]) |
                            (x[2] & x[1] & ~x[0]);
    assign hex_LEDs[2] = (x[3] & x[2] & ~x[0]) |
                            (x[3] & x[2] & x[1]) |
                            (~x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[3] = (~x[3] & ~x[2] & ~x[1] & x[0]) | 
                            (~x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (x[2] & x[1] & x[0]) | 
                            (x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[4] = (~x[3] & x[0]) |
                            (~x[3] & x[2] & ~x[1]) |
                            (~x[2] & ~x[1] & x[0]);
    assign hex_LEDs[5] = (~x[3] & ~x[2] & x[0]) | 
                            (~x[3] & ~x[2] & x[1]) | 
                            (~x[3] & x[1] & x[0]) | 
                            (x[3] & x[2] & ~x[1] & x[0]);
    assign hex_LEDs[6] = (~x[3] & ~x[2] & ~x[1]) | 
                            (x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (~x[3] & x[2] & x[1] & x[0]);
    
endmodule
`timescale 1 ns / 1 ns
module main_tb
(
);

reg  clk;
reg  reset;
reg  start;
reg  waitrequest;
wire [31:0] return_val;
wire  finish;


top top_inst (
	.clk (clk),
	.reset (reset),
	.start (start),
	.waitrequest (waitrequest),
	.finish (finish),
	.return_val (return_val)
);


// Local Rams



initial 
    clk = 0;
always @(clk)
    clk <= #10 ~clk;

initial begin
//$monitor("At t=%t clk=%b %b %b %b %d", $time, clk, reset, start, finish, return_val);
@(negedge clk);
reset <= 1;
@(negedge clk);
reset <= 0;
start <= 1;
@(negedge clk);
start <= 0;
end

always@(finish) begin
    if (finish == 1) begin
        $display("At t=%t clk=%b finish=%b return_val=%d", $time, clk, finish, return_val);
        $display("Cycles: %d", ($time-50)/20);
        $finish;
    end
end

initial begin
waitrequest <= 1;
@(negedge clk);
@(negedge clk);
waitrequest <= 0;
end


endmodule 

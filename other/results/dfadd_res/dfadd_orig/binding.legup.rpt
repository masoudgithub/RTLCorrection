//----------------------------------------------------------------------------//
// Generated by LegUp High-Level Synthesis Tool Version 4.0 (http://legup.org)
// Compiled: Sun Jul 26 12:56:54 2015
// University of Toronto
// For research and academic purposes only. Commercial use is prohibited.
// Please send bugs to: legup@eecg.toronto.edu
// Date: Sun Mar 31 16:14:52 2019
//----------------------------------------------------------------------------//

--------------------------------------------------------------------------------
Function: main
--------------------------------------------------------------------------------
Function unit type:           Number Required               
a_input_local_mem_dual_port   1                             
b_input_local_mem_dual_port   1                             
countLeadingZeros32countLeadingZerosHigh_local_mem_dual_port1                             
mem_dual_port                 1                             
signed_add_32                 2                             
signed_add_64                 1                             
signed_subtract_32            1                             
signed_subtract_64            1                             
z_output_local_mem_dual_port  1                             
--------------------------------------------------------------------------------
Function: roundAndPackFloat64
--------------------------------------------------------------------------------
Function unit type:           Number Required               
mem_dual_port                 1                             
signed_add_64                 2                             
signed_subtract_32            1                             

Running Bipartite Weighted Matching on function: roundAndPackFloat64
State: LEGUP_F_roundAndPackFloat64_BB__8
Binding functional unit type: signed_add_64
Weight matrix for operation/function unit matching:
                                                  roundAndPackFloat64_signed_add_64_0roundAndPackFloat64_signed_add_64_1
  %9 = add i64 512, %zSig (idx: 0)                100                           100                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  roundAndPackFloat64_signed_add_64_0roundAndPackFloat64_signed_add_64_1
  %9 = add i64 512, %zSig (idx: 0)                1                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %9 = add i64 512, %zSig (idx: 0) -> roundAndPackFloat64_signed_add_64_0 (mux inputs: 0)
State: LEGUP_F_roundAndPackFloat64_BB__11
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
                                                  roundAndPackFloat64_mem_dual_port_0
  %12 = load i32* @float_excep... (idx: 0)        100                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  roundAndPackFloat64_mem_dual_port_0
  %12 = load i32* @float_excep... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %12 = load i32* @float_excep... (idx: 0) -> roundAndPackFloat64_mem_dual_port_0 (mux inputs: 0)
State: LEGUP_F_roundAndPackFloat64_BB__11
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
                                                  roundAndPackFloat64_mem_dual_port_0
  store i32 %13, i32* @float_e... (idx: 0)        100                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  roundAndPackFloat64_mem_dual_port_0
  store i32 %13, i32* @float_e... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 %13, i32* @float_e... (idx: 0) -> roundAndPackFloat64_mem_dual_port_0 (mux inputs: 1)
State: LEGUP_F_roundAndPackFloat64_BB__21
Binding functional unit type: signed_subtract_32
Weight matrix for operation/function unit matching:
                                                  roundAndPackFloat64_signed_subtract_32_0
  %22 = sub nsw i32 0, %zExp (idx: 0)             100                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  roundAndPackFloat64_signed_subtract_32_0
  %22 = sub nsw i32 0, %zExp (idx: 0)             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %22 = sub nsw i32 0, %zExp (idx: 0) -> roundAndPackFloat64_signed_subtract_32_0 (mux inputs: 0)
State: LEGUP_F_roundAndPackFloat64_BB__36
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
                                                  roundAndPackFloat64_mem_dual_port_0
  %37 = load i32* @float_excep... (idx: 0)        100                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  roundAndPackFloat64_mem_dual_port_0
  %37 = load i32* @float_excep... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %37 = load i32* @float_excep... (idx: 0) -> roundAndPackFloat64_mem_dual_port_0 (mux inputs: 1)
State: LEGUP_F_roundAndPackFloat64_BB__36
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
                                                  roundAndPackFloat64_mem_dual_port_0
  store i32 %38, i32* @float_e... (idx: 0)        100                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  roundAndPackFloat64_mem_dual_port_0
  store i32 %38, i32* @float_e... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 %38, i32* @float_e... (idx: 0) -> roundAndPackFloat64_mem_dual_port_0 (mux inputs: 2)
State: LEGUP_F_roundAndPackFloat64_BB__40
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
                                                  roundAndPackFloat64_mem_dual_port_0
  %41 = load i32* @float_excep... (idx: 0)        100                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  roundAndPackFloat64_mem_dual_port_0
  %41 = load i32* @float_excep... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %41 = load i32* @float_excep... (idx: 0) -> roundAndPackFloat64_mem_dual_port_0 (mux inputs: 2)
State: LEGUP_F_roundAndPackFloat64_BB__40
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
                                                  roundAndPackFloat64_mem_dual_port_0
  store i32 %42, i32* @float_e... (idx: 0)        100                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  roundAndPackFloat64_mem_dual_port_0
  store i32 %42, i32* @float_e... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 %42, i32* @float_e... (idx: 0) -> roundAndPackFloat64_mem_dual_port_0 (mux inputs: 3)
State: LEGUP_F_roundAndPackFloat64_BB_thread6
Binding functional unit type: signed_add_64
Weight matrix for operation/function unit matching:
                                                  roundAndPackFloat64_signed_add_64_0roundAndPackFloat64_signed_add_64_1
  %43 = add i64 %zSig57, 512 (idx: 0)             100                           100                           
  %56 = add i64 %54, %55 (idx: 1)                 100                           100                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  roundAndPackFloat64_signed_add_64_0roundAndPackFloat64_signed_add_64_1
  %43 = add i64 %zSig57, 512 (idx: 0)             1                             0                             
  %56 = add i64 %54, %55 (idx: 1)                 0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %43 = add i64 %zSig57, 512 (idx: 0) -> roundAndPackFloat64_signed_add_64_0 (mux inputs: 1)
  %56 = add i64 %54, %55 (idx: 1) -> roundAndPackFloat64_signed_add_64_1 (mux inputs: 2)

Running Bipartite Weighted Matching on function: main
State: LEGUP_F_main_BB__1
Binding functional unit type: a_input_local_mem_dual_port
Weight matrix for operation/function unit matching:
                                                  main_a_input_local_mem_dual_port_0
  %3 = load i64* %2, align 8, ... (idx: 0)        100                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_a_input_local_mem_dual_port_0
  %3 = load i64* %2, align 8, ... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %3 = load i64* %2, align 8, ... (idx: 0) -> main_a_input_local_mem_dual_port_0 (mux inputs: 1)
State: LEGUP_F_main_BB__1
Binding functional unit type: b_input_local_mem_dual_port
Weight matrix for operation/function unit matching:
                                                  main_b_input_local_mem_dual_port_0
  %5 = load i64* %4, align 8, ... (idx: 0)        100                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_b_input_local_mem_dual_port_0
  %5 = load i64* %4, align 8, ... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %5 = load i64* %4, align 8, ... (idx: 0) -> main_b_input_local_mem_dual_port_0 (mux inputs: 1)
State: LEGUP_F_main_BB__1
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          
  %gep = add i32 %gep_int, %ge... (idx: 0)        100                           100                           
  %gep3 = add i32 %gep_int1, %... (idx: 1)        100                           100                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          
  %gep = add i32 %gep_int, %ge... (idx: 0)        1                             0                             
  %gep3 = add i32 %gep_int1, %... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %gep = add i32 %gep_int, %ge... (idx: 0) -> main_signed_add_32_0 (mux inputs: 2)
  %gep3 = add i32 %gep_int1, %... (idx: 1) -> main_signed_add_32_1 (mux inputs: 2)
State: LEGUP_F_main_BB__1
Binding functional unit type: signed_subtract_32
Weight matrix for operation/function unit matching:
                                                  main_signed_subtract_32_0     
  %15 = sub nsw i32 %12, %14 (idx: 0)             100                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_subtract_32_0     
  %15 = sub nsw i32 %12, %14 (idx: 0)             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %15 = sub nsw i32 %12, %14 (idx: 0) -> main_signed_subtract_32_0 (mux inputs: 2)
State: LEGUP_F_main_BB_threadi12ii
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
                                                  main_mem_dual_port_0          
  %42 = load i32* @float_excep... (idx: 0)        100                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          
  %42 = load i32* @float_excep... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %42 = load i32* @float_excep... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 0)
State: LEGUP_F_main_BB_threadi12ii
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
                                                  main_mem_dual_port_0          
  store i32 %43, i32* @float_e... (idx: 0)        100                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          
  store i32 %43, i32* @float_e... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 %43, i32* @float_e... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 1)
State: LEGUP_F_main_BB__44
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          
  %expDiff.0.i2.i = add nsw i3... (idx: 0)        100                           100                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          
  %expDiff.0.i2.i = add nsw i3... (idx: 0)        1                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %expDiff.0.i2.i = add nsw i3... (idx: 0) -> main_signed_add_32_0 (mux inputs: 4)
State: LEGUP_F_main_BB__52
Binding functional unit type: signed_subtract_32
Weight matrix for operation/function unit matching:
                                                  main_signed_subtract_32_0     
  %55 = sub nsw i32 0, %expDif... (idx: 0)        100                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_subtract_32_0     
  %55 = sub nsw i32 0, %expDif... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %55 = sub nsw i32 0, %expDif... (idx: 0) -> main_signed_subtract_32_0 (mux inputs: 3)
State: LEGUP_F_main_BB_threadi3ii
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
                                                  main_mem_dual_port_0          
  %87 = load i32* @float_excep... (idx: 0)        100                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          
  %87 = load i32* @float_excep... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %87 = load i32* @float_excep... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 1)
State: LEGUP_F_main_BB_threadi3ii
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
                                                  main_mem_dual_port_0          
  store i32 %88, i32* @float_e... (idx: 0)        100                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          
  store i32 %88, i32* @float_e... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 %88, i32* @float_e... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 2)
State: LEGUP_F_main_BB__92
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          
  %expDiff.1.i3.i = add nsw i3... (idx: 0)        100                           100                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          
  %expDiff.1.i3.i = add nsw i3... (idx: 0)        1                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %expDiff.1.i3.i = add nsw i3... (idx: 0) -> main_signed_add_32_0 (mux inputs: 5)
State: LEGUP_F_main_BB__92
Binding functional unit type: signed_subtract_32
Weight matrix for operation/function unit matching:
                                                  main_signed_subtract_32_0     
  %97 = sub nsw i32 0, %expDif... (idx: 0)        100                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_subtract_32_0     
  %97 = sub nsw i32 0, %expDif... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %97 = sub nsw i32 0, %expDif... (idx: 0) -> main_signed_subtract_32_0 (mux inputs: 4)
State: LEGUP_F_main_BB_threadii6i
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
                                                  main_mem_dual_port_0          
  %133 = load i32* @float_exce... (idx: 0)        100                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          
  %133 = load i32* @float_exce... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %133 = load i32* @float_exce... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 2)
State: LEGUP_F_main_BB_threadii6i
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
                                                  main_mem_dual_port_0          
  store i32 %134, i32* @float_... (idx: 0)        100                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          
  store i32 %134, i32* @float_... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 %134, i32* @float_... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 3)
State: LEGUP_F_main_BB__135
Binding functional unit type: signed_add_64
Weight matrix for operation/function unit matching:
                                                  main_signed_add_64_0          
  %136 = add nuw nsw i64 %20, ... (idx: 0)        100                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_64_0          
  %136 = add nuw nsw i64 %20, ... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %136 = add nuw nsw i64 %20, ... (idx: 0) -> main_signed_add_64_0 (mux inputs: 2)
State: LEGUP_F_main_BB__140
Binding functional unit type: signed_add_64
Weight matrix for operation/function unit matching:
                                                  main_signed_add_64_0          
  %142 = add nuw i64 %141, %20 (idx: 0)           100                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_64_0          
  %142 = add nuw i64 %141, %20 (idx: 0)           1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %142 = add nuw i64 %141, %20 (idx: 0) -> main_signed_add_64_0 (mux inputs: 3)
State: LEGUP_F_main_BB_shift64RightJammingexit9ii
Binding functional unit type: signed_add_64
Weight matrix for operation/function unit matching:
                                                  main_signed_add_64_0          
  %146 = add i64 %145, %144 (idx: 0)              100                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_64_0          
  %146 = add i64 %145, %144 (idx: 0)              1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %146 = add i64 %145, %144 (idx: 0) -> main_signed_add_64_0 (mux inputs: 5)
State: LEGUP_F_main_BB_shift64RightJammingexit9ii
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          
  %zExp.0..i.i = add nsw i32 %... (idx: 0)        100                           100                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          
  %zExp.0..i.i = add nsw i32 %... (idx: 0)        1                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %zExp.0..i.i = add nsw i32 %... (idx: 0) -> main_signed_add_32_0 (mux inputs: 7)
State: LEGUP_F_main_BB_threadi13ii
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
                                                  main_mem_dual_port_0          
  %180 = load i32* @float_exce... (idx: 0)        100                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          
  %180 = load i32* @float_exce... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %180 = load i32* @float_exce... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 3)
State: LEGUP_F_main_BB_threadi13ii
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
                                                  main_mem_dual_port_0          
  store i32 %181, i32* @float_... (idx: 0)        100                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          
  store i32 %181, i32* @float_... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 %181, i32* @float_... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 4)
State: LEGUP_F_main_BB__182
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
                                                  main_mem_dual_port_0          
  %183 = load i32* @float_exce... (idx: 0)        100                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          
  %183 = load i32* @float_exce... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %183 = load i32* @float_exce... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 4)
State: LEGUP_F_main_BB__182
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
                                                  main_mem_dual_port_0          
  store i32 %184, i32* @float_... (idx: 0)        100                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          
  store i32 %184, i32* @float_... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 %184, i32* @float_... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 5)
State: LEGUP_F_main_BB_threadi6ii
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
                                                  main_mem_dual_port_0          
  %210 = load i32* @float_exce... (idx: 0)        100                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          
  %210 = load i32* @float_exce... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %210 = load i32* @float_exce... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 5)
State: LEGUP_F_main_BB_threadi6ii
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
                                                  main_mem_dual_port_0          
  store i32 %211, i32* @float_... (idx: 0)        100                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          
  store i32 %211, i32* @float_... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 %211, i32* @float_... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 6)
State: LEGUP_F_main_BB__217
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          
  %expDiff.0.i.i = add nsw i32... (idx: 0)        100                           100                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          
  %expDiff.0.i.i = add nsw i32... (idx: 0)        1                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %expDiff.0.i.i = add nsw i32... (idx: 0) -> main_signed_add_32_0 (mux inputs: 8)
State: LEGUP_F_main_BB__217
Binding functional unit type: signed_subtract_32
Weight matrix for operation/function unit matching:
                                                  main_signed_subtract_32_0     
  %222 = sub nsw i32 0, %expDi... (idx: 0)        100                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_subtract_32_0     
  %222 = sub nsw i32 0, %expDi... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %222 = sub nsw i32 0, %expDi... (idx: 0) -> main_signed_subtract_32_0 (mux inputs: 5)
State: LEGUP_F_main_BB__239
Binding functional unit type: signed_subtract_64
Weight matrix for operation/function unit matching:
                                                  main_signed_subtract_64_0     
  %242 = sub i64 %241, %240 (idx: 0)              100                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_subtract_64_0     
  %242 = sub i64 %241, %240 (idx: 0)              1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %242 = sub i64 %241, %240 (idx: 0) -> main_signed_subtract_64_0 (mux inputs: 2)
State: LEGUP_F_main_BB_threadiii
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
                                                  main_mem_dual_port_0          
  %264 = load i32* @float_exce... (idx: 0)        100                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          
  %264 = load i32* @float_exce... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %264 = load i32* @float_exce... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 6)
State: LEGUP_F_main_BB_threadiii
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
                                                  main_mem_dual_port_0          
  store i32 %265, i32* @float_... (idx: 0)        100                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          
  store i32 %265, i32* @float_... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 %265, i32* @float_... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 7)
State: LEGUP_F_main_BB__266
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          
  %expDiff.1.i.i = add nsw i32... (idx: 0)        100                           100                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          
  %expDiff.1.i.i = add nsw i32... (idx: 0)        1                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %expDiff.1.i.i = add nsw i32... (idx: 0) -> main_signed_add_32_0 (mux inputs: 9)
State: LEGUP_F_main_BB__274
Binding functional unit type: signed_subtract_32
Weight matrix for operation/function unit matching:
                                                  main_signed_subtract_32_0     
  %277 = sub nsw i32 0, %expDi... (idx: 0)        100                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_subtract_32_0     
  %277 = sub nsw i32 0, %expDi... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %277 = sub nsw i32 0, %expDi... (idx: 0) -> main_signed_subtract_32_0 (mux inputs: 6)
State: LEGUP_F_main_BB__288
Binding functional unit type: signed_subtract_64
Weight matrix for operation/function unit matching:
                                                  main_signed_subtract_64_0     
  %291 = sub i64 %289, %290 (idx: 0)              100                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_subtract_64_0     
  %291 = sub i64 %289, %290 (idx: 0)              1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %291 = sub i64 %289, %290 (idx: 0) -> main_signed_subtract_64_0 (mux inputs: 4)
State: LEGUP_F_main_BB__292
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          
  %293 = add nsw i32 %zExp.0.i... (idx: 0)        100                           100                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          
  %293 = add nsw i32 %zExp.0.i... (idx: 0)        1                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %293 = add nsw i32 %zExp.0.i... (idx: 0) -> main_signed_add_32_0 (mux inputs: 10)
State: LEGUP_F_main_BB_normalizeRoundAndPackFloat64exitii
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          
  %306 = add nsw i32 %shiftCou... (idx: 0)        100                           100                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          
  %306 = add nsw i32 %shiftCou... (idx: 0)        1                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %306 = add nsw i32 %shiftCou... (idx: 0) -> main_signed_add_32_0 (mux inputs: 12)
State: LEGUP_F_main_BB_normalizeRoundAndPackFloat64exitii
Binding functional unit type: countLeadingZeros32countLeadingZerosHigh_local_mem_dual_port
Weight matrix for operation/function unit matching:
                                                  main_countLeadingZeros32countLeadingZerosHigh_local_mem_dual_port_0
  %304 = load i32* %303, align... (idx: 0)        100                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_countLeadingZeros32countLeadingZerosHigh_local_mem_dual_port_0
  %304 = load i32* %303, align... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %304 = load i32* %303, align... (idx: 0) -> main_countLeadingZeros32countLeadingZerosHigh_local_mem_dual_port_0 (mux inputs: 1)
State: LEGUP_F_main_BB_normalizeRoundAndPackFloat64exitii
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          
  %gep6 = add i32 %gep_int4, %... (idx: 0)        100                           100                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          
  %gep6 = add i32 %gep_int4, %... (idx: 0)        1                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %gep6 = add i32 %gep_int4, %... (idx: 0) -> main_signed_add_32_0 (mux inputs: 14)
State: LEGUP_F_main_BB_normalizeRoundAndPackFloat64exitii
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          
  %307 = add i32 %306, %304 (idx: 0)              100                           100                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          
  %307 = add i32 %306, %304 (idx: 0)              1                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %307 = add i32 %306, %304 (idx: 0) -> main_signed_add_32_0 (mux inputs: 16)
State: LEGUP_F_main_BB_normalizeRoundAndPackFloat64exitii
Binding functional unit type: signed_subtract_32
Weight matrix for operation/function unit matching:
                                                  main_signed_subtract_32_0     
  %308 = sub i32 %293, %307 (idx: 0)              100                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_subtract_32_0     
  %308 = sub i32 %293, %307 (idx: 0)              1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %308 = sub i32 %293, %307 (idx: 0) -> main_signed_subtract_32_0 (mux inputs: 8)
State: LEGUP_F_main_BB_float64_addexit
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          
  %318 = add nsw i32 %i.01, 1 (idx: 0)            100                           100                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          
  %318 = add nsw i32 %i.01, 1 (idx: 0)            1                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %318 = add nsw i32 %i.01, 1 (idx: 0) -> main_signed_add_32_0 (mux inputs: 17)
State: LEGUP_F_main_BB_float64_addexit
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          
  %gep9 = add i32 %gep_int7, %... (idx: 0)        100                           100                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          
  %gep9 = add i32 %gep_int7, %... (idx: 0)        1                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %gep9 = add i32 %gep_int7, %... (idx: 0) -> main_signed_add_32_0 (mux inputs: 19)
State: LEGUP_F_main_BB_float64_addexit
Binding functional unit type: z_output_local_mem_dual_port
Weight matrix for operation/function unit matching:
                                                  main_z_output_local_mem_dual_port_0
  %313 = load i64* %312, align... (idx: 0)        100                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_z_output_local_mem_dual_port_0
  %313 = load i64* %312, align... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %313 = load i64* %312, align... (idx: 0) -> main_z_output_local_mem_dual_port_0 (mux inputs: 1)
State: LEGUP_F_main_BB_float64_addexit
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          
  %316 = add nsw i32 %315, %ma... (idx: 0)        100                           100                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          
  %316 = add nsw i32 %315, %ma... (idx: 0)        1                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %316 = add nsw i32 %315, %ma... (idx: 0) -> main_signed_add_32_0 (mux inputs: 21)


//----------------------------------------------------------------------------//
// Generated by LegUp High-Level Synthesis Tool Version 4.0 (http://legup.org)
// Compiled: Sun Jul 26 12:56:54 2015
// University of Toronto
// For research and academic purposes only. Commercial use is prohibited.
// Please send bugs to: legup@eecg.toronto.edu
// Date: Sun Mar 31 16:14:53 2019
//----------------------------------------------------------------------------//

`define MEMORY_CONTROLLER_ADDR_SIZE 32
`define MEMORY_CONTROLLER_DATA_SIZE 64
// Number of RAM elements: 5
`define MEMORY_CONTROLLER_TAG_SIZE 9
// @float_exception_flags = internal unnamed_addr global i32 0, align 4
`define TAG_g_float_exception_flags `MEMORY_CONTROLLER_TAG_SIZE'd2
`define TAG_g_float_exception_flags_a {`TAG_g_float_exception_flags, 23'd0}

// Turn off warning 'ignoring unsupported system task'
// altera message_off 10175

`timescale 1 ns / 1 ns
module top
	(
		clk,
		reset,
		start,
		finish,
		waitrequest,
		return_val
	);
input clk;
input reset;
input start;
output wire finish;
input waitrequest;
output wire [31:0] return_val;
wire memory_controller_waitrequest;
wire memory_controller_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
wire memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
wire [1:0] memory_controller_size_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;

wire memory_controller_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
wire memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
wire [1:0] memory_controller_size_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;

/* synthesis translate_off */
assign memory_controller_waitrequest = waitrequest;
/* synthesis translate_on */

memory_controller memory_controller_inst (
	.clk( clk ),
	.memory_controller_enable_a( memory_controller_enable_a ),
	.memory_controller_enable_b( memory_controller_enable_b ),
	.memory_controller_address_a( memory_controller_address_a ),
	.memory_controller_address_b( memory_controller_address_b ),
	.memory_controller_write_enable_a( memory_controller_write_enable_a ),
	.memory_controller_write_enable_b( memory_controller_write_enable_b ),
	.memory_controller_in_a( memory_controller_in_a ),
	.memory_controller_in_b( memory_controller_in_b ),
	.memory_controller_size_a( memory_controller_size_a ),
	.memory_controller_size_b( memory_controller_size_b ),
	.memory_controller_waitrequest( memory_controller_waitrequest ),
	.memory_controller_out_reg_a( memory_controller_out_a ),
	.memory_controller_out_reg_b( memory_controller_out_b )
);

main main_inst(
	.clk( clk ),
	.clk2x( clk2x ),
	.clk1x_follower( clk1x_follower ),
	.reset( reset ),
	.start( start ),
	.finish( finish ),
	.return_val( return_val ),
	.memory_controller_waitrequest(memory_controller_waitrequest),
	.memory_controller_enable_a(memory_controller_enable_a),
	.memory_controller_address_a(memory_controller_address_a),
	.memory_controller_write_enable_a(memory_controller_write_enable_a),
	.memory_controller_in_a(memory_controller_in_a),
	.memory_controller_size_a(memory_controller_size_a),
	.memory_controller_out_a(memory_controller_out_a),
	.memory_controller_enable_b(memory_controller_enable_b),
	.memory_controller_address_b(memory_controller_address_b),
	.memory_controller_write_enable_b(memory_controller_write_enable_b),
	.memory_controller_in_b(memory_controller_in_b),
	.memory_controller_size_b(memory_controller_size_b),
	.memory_controller_out_b(memory_controller_out_b)
);

endmodule

`timescale 1 ns / 1 ns
module memory_controller
(
	clk,
	memory_controller_address_a,
	memory_controller_address_b,
	memory_controller_enable_a,
	memory_controller_enable_b,
	memory_controller_write_enable_a,
	memory_controller_write_enable_b,
	memory_controller_in_a,
	memory_controller_in_b,
	memory_controller_size_a,
	memory_controller_size_b,
	memory_controller_waitrequest,
	memory_controller_out_reg_a,
	memory_controller_out_reg_b
);

parameter latency = 2;

parameter ram_latency = latency-1;

integer j;

input clk;
input memory_controller_waitrequest;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
input memory_controller_enable_a;
input memory_controller_write_enable_a;
input [64-1:0] memory_controller_in_a;
input [1:0] memory_controller_size_a;
output reg [64-1:0] memory_controller_out_reg_a;
reg [64-1:0] memory_controller_out_prev_a;
reg [64-1:0] memory_controller_out_a;

reg memory_controller_enable_reg_a;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
input memory_controller_enable_b;
input memory_controller_write_enable_b;
input [64-1:0] memory_controller_in_b;
input [1:0] memory_controller_size_b;
output reg [64-1:0] memory_controller_out_reg_b;
reg [64-1:0] memory_controller_out_prev_b;
reg [64-1:0] memory_controller_out_b;

reg memory_controller_enable_reg_b;

reg [0:0] ram_32_address_a;
reg [0:0] ram_32_address_b;
reg ram_32_write_enable_a;
reg ram_32_write_enable_b;
reg [31:0] ram_32_in_a;
reg [31:0] ram_32_in_b;
wire [31:0] ram_32_out_a;
wire [31:0] ram_32_out_b;

// @float_exception_flags = internal unnamed_addr global i32 0, align 4
ram_dual_port ram_32 (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( ram_32_address_a ),
	.address_b( ram_32_address_b ),
	.wren_a( ram_32_write_enable_a ),
	.wren_b( ram_32_write_enable_b ),
	.data_a( ram_32_in_a ),
	.data_b( ram_32_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( ram_32_out_a ),
	.q_b( ram_32_out_b)
);
defparam ram_32.width_a = 32;
defparam ram_32.width_b = 32;
defparam ram_32.widthad_a = 1;
defparam ram_32.widthad_b = 1;
defparam ram_32.width_be_a = 1;
defparam ram_32.width_be_b = 1;
defparam ram_32.numwords_a = 1;
defparam ram_32.numwords_b = 1;
defparam ram_32.latency = ram_latency;
defparam ram_32.init_file = "ram_32.mif";
wire [`MEMORY_CONTROLLER_TAG_SIZE-1:0] tag_a;
assign tag_a = memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:`MEMORY_CONTROLLER_ADDR_SIZE-`MEMORY_CONTROLLER_TAG_SIZE];
always @(*)
if (memory_controller_enable_a & (tag_a == 0))
begin
   $display("Error: Null pointer exception! Are you trying to read from a local ram? Use: 'set_memory_global <ram_name>' To debug this error try: 'set_parameter PRINT_STATES 1'");
   $finish;
end
reg [2:0] prevAddr_a;
reg [1:0] prevSize_a;
reg [2:0] prevSize_a_and;

always @(posedge clk)
if (!memory_controller_waitrequest)
begin
	prevAddr_a <= memory_controller_address_a[2:0];
	prevSize_a <= memory_controller_size_a;
end
wire [`MEMORY_CONTROLLER_TAG_SIZE-1:0] tag_b;
assign tag_b = memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:`MEMORY_CONTROLLER_ADDR_SIZE-`MEMORY_CONTROLLER_TAG_SIZE];
always @(*)
if (memory_controller_enable_b & (tag_b == 0))
begin
   $display("Error: Null pointer exception! Are you trying to read from a local ram? Use: 'set_memory_global <ram_name>' To debug this error try: 'set_parameter PRINT_STATES 1'");
   $finish;
end
reg [2:0] prevAddr_b;
reg [1:0] prevSize_b;
reg [2:0] prevSize_b_and;

always @(posedge clk)
if (!memory_controller_waitrequest)
begin
	prevAddr_b <= memory_controller_address_b[2:0];
	prevSize_b <= memory_controller_size_b;
end

reg [2:0] select_not_struct_a;

wire select_ram_32_a;
assign select_ram_32_a = (tag_a == 2);
reg [ram_latency:0] select_ram_32_reg_a;
wire [31:0] memory_controller_ram_32_out_a;
assign memory_controller_ram_32_out_a = {32{ select_ram_32_reg_a[ram_latency]}} & ram_32_out_a;

always @(*)
begin
	ram_32_address_a = memory_controller_address_a [1-1+2:2] & {1{select_ram_32_a}};
	ram_32_write_enable_a = memory_controller_write_enable_a & select_ram_32_a;
	ram_32_in_a [32-1:0] = memory_controller_in_a[32-1:0];

end
always @(*)
begin
	select_not_struct_a [2:0] = 3'b0 | {2{select_ram_32_reg_a[ram_latency]}};
	if (prevAddr_a[2:0] & select_not_struct_a[2:0] != 0 && memory_controller_enable_a)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end

	prevSize_a_and[0] = prevSize_a[1] | prevSize_a[0];
	prevSize_a_and[1] = prevSize_a[1];
	prevSize_a_and[2] = prevSize_a[1] & prevSize_a[0];
	if ((prevAddr_a & prevSize_a_and) != 0 && memory_controller_enable_a)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end
	memory_controller_out_prev_a = memory_controller_out_reg_a & { 64{!memory_controller_enable_reg_a}};
	memory_controller_out_a = 1'b0 | memory_controller_out_prev_a | memory_controller_ram_32_out_a;
end

always @(posedge clk)
if (!memory_controller_waitrequest)
begin
memory_controller_out_reg_a <= memory_controller_out_a;
memory_controller_enable_reg_a <= memory_controller_enable_a;
end

always @(posedge clk)
if (!memory_controller_waitrequest)
for (j = 0; j < ram_latency; j=j+1)
begin
select_ram_32_reg_a[j+1] <= select_ram_32_reg_a[j];
end
always @(*)
begin
select_ram_32_reg_a[0] <= select_ram_32_a;
end

reg [2:0] select_not_struct_b;

wire select_ram_32_b;
assign select_ram_32_b = (tag_b == 2);
reg [ram_latency:0] select_ram_32_reg_b;
wire [31:0] memory_controller_ram_32_out_b;
assign memory_controller_ram_32_out_b = {32{ select_ram_32_reg_b[ram_latency]}} & ram_32_out_b;

always @(*)
begin
	ram_32_address_b = memory_controller_address_b [1-1+2:2] & {1{select_ram_32_b}};
	ram_32_write_enable_b = memory_controller_write_enable_b & select_ram_32_b;
	ram_32_in_b [32-1:0] = memory_controller_in_b[32-1:0];

end
always @(*)
begin
	select_not_struct_b [2:0] = 3'b0 | {2{select_ram_32_reg_b[ram_latency]}};
	if (prevAddr_b[2:0] & select_not_struct_b[2:0] != 0 && memory_controller_enable_b)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end

	prevSize_b_and[0] = prevSize_b[1] | prevSize_b[0];
	prevSize_b_and[1] = prevSize_b[1];
	prevSize_b_and[2] = prevSize_b[1] & prevSize_b[0];
	if ((prevAddr_b & prevSize_b_and) != 0 && memory_controller_enable_b)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end
	memory_controller_out_prev_b = memory_controller_out_reg_b & { 64{!memory_controller_enable_reg_b}};
	memory_controller_out_b = 1'b0 | memory_controller_out_prev_b | memory_controller_ram_32_out_b;
end

always @(posedge clk)
if (!memory_controller_waitrequest)
begin
memory_controller_out_reg_b <= memory_controller_out_b;
memory_controller_enable_reg_b <= memory_controller_enable_b;
end

always @(posedge clk)
if (!memory_controller_waitrequest)
for (j = 0; j < ram_latency; j=j+1)
begin
select_ram_32_reg_b[j+1] <= select_ram_32_reg_b[j];
end
always @(*)
begin
select_ram_32_reg_b[0] <= select_ram_32_b;
end

endmodule 

`timescale 1 ns / 1 ns
module roundAndPackFloat64
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_waitrequest,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	return_val,
	arg_zSign,
	arg_zExp,
	arg_zSig
);

parameter [4:0] LEGUP_0 = 5'd0;
parameter [4:0] LEGUP_F_roundAndPackFloat64_BB__0_1 = 5'd1;
parameter [4:0] LEGUP_F_roundAndPackFloat64_BB__4_2 = 5'd2;
parameter [4:0] LEGUP_F_roundAndPackFloat64_BB__6_3 = 5'd3;
parameter [4:0] LEGUP_F_roundAndPackFloat64_BB__8_4 = 5'd4;
parameter [4:0] LEGUP_F_roundAndPackFloat64_BB__11_5 = 5'd5;
parameter [4:0] LEGUP_F_roundAndPackFloat64_BB__11_6 = 5'd6;
parameter [4:0] LEGUP_F_roundAndPackFloat64_BB__11_7 = 5'd7;
parameter [4:0] LEGUP_F_roundAndPackFloat64_BB__11_8 = 5'd8;
parameter [4:0] LEGUP_F_roundAndPackFloat64_BB__17_9 = 5'd9;
parameter [4:0] LEGUP_F_roundAndPackFloat64_BB__19_10 = 5'd10;
parameter [4:0] LEGUP_F_roundAndPackFloat64_BB__21_11 = 5'd11;
parameter [4:0] LEGUP_F_roundAndPackFloat64_BB__31_12 = 5'd12;
parameter [4:0] LEGUP_F_roundAndPackFloat64_BB_shift64RightJammingexit_13 = 5'd13;
parameter [4:0] LEGUP_F_roundAndPackFloat64_BB__36_14 = 5'd14;
parameter [4:0] LEGUP_F_roundAndPackFloat64_BB__36_15 = 5'd15;
parameter [4:0] LEGUP_F_roundAndPackFloat64_BB__36_16 = 5'd16;
parameter [4:0] LEGUP_F_roundAndPackFloat64_BB__36_17 = 5'd17;
parameter [4:0] LEGUP_F_roundAndPackFloat64_BB_thread_18 = 5'd18;
parameter [4:0] LEGUP_F_roundAndPackFloat64_BB__40_19 = 5'd19;
parameter [4:0] LEGUP_F_roundAndPackFloat64_BB__40_20 = 5'd20;
parameter [4:0] LEGUP_F_roundAndPackFloat64_BB__40_21 = 5'd21;
parameter [4:0] LEGUP_F_roundAndPackFloat64_BB__40_22 = 5'd22;
parameter [4:0] LEGUP_F_roundAndPackFloat64_BB_thread6_23 = 5'd23;
parameter [4:0] LEGUP_F_roundAndPackFloat64_BB__57_24 = 5'd24;
parameter [8:0] tag_offset = 9'd0;
parameter [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tag_addr_offset = {tag_offset, 23'd0};

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
input  memory_controller_waitrequest;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
output reg [63:0] return_val;
input [31:0] arg_zSign;
input [31:0] arg_zExp;
input [63:0] arg_zSig;
reg [4:0] cur_state;
reg [4:0] next_state;
reg [31:0] roundAndPackFloat64_0_tr;
reg [31:0] roundAndPackFloat64_0_tr_reg;
reg [31:0] roundAndPackFloat64_0_1;
reg [31:0] roundAndPackFloat64_0_1_reg;
reg [31:0] roundAndPackFloat64_0_2;
reg [31:0] roundAndPackFloat64_0_2_reg;
reg  roundAndPackFloat64_0_3;
reg  roundAndPackFloat64_0_3_reg;
reg  roundAndPackFloat64_4_5;
reg  roundAndPackFloat64_4_5_reg;
reg  roundAndPackFloat64_6_7;
reg  roundAndPackFloat64_6_7_reg;
reg [63:0] roundAndPackFloat64_8_9;
reg [63:0] roundAndPackFloat64_8_9_reg;
reg  roundAndPackFloat64_8_10;
reg  roundAndPackFloat64_8_10_reg;
reg [31:0] roundAndPackFloat64_11_12;
reg [31:0] roundAndPackFloat64_11_12_reg;
reg [31:0] roundAndPackFloat64_11_13;
reg [31:0] roundAndPackFloat64_11_13_reg;
reg [63:0] roundAndPackFloat64_11_14;
reg [63:0] roundAndPackFloat64_11_14_reg;
reg [63:0] roundAndPackFloat64_11_15;
reg [63:0] roundAndPackFloat64_11_15_reg;
reg [63:0] roundAndPackFloat64_11_16;
reg [63:0] roundAndPackFloat64_11_16_reg;
reg  roundAndPackFloat64_17_18;
reg  roundAndPackFloat64_17_18_reg;
reg  roundAndPackFloat64_19_20;
reg  roundAndPackFloat64_19_20_reg;
reg [31:0] roundAndPackFloat64_21_22;
reg [31:0] roundAndPackFloat64_21_22_reg;
reg [63:0] roundAndPackFloat64_21_23;
reg [63:0] roundAndPackFloat64_21_23_reg;
reg [63:0] roundAndPackFloat64_21_24;
reg [63:0] roundAndPackFloat64_21_24_reg;
reg [31:0] roundAndPackFloat64_21_25;
reg [31:0] roundAndPackFloat64_21_25_reg;
reg [63:0] roundAndPackFloat64_21_26;
reg [63:0] roundAndPackFloat64_21_26_reg;
reg [63:0] roundAndPackFloat64_21_27;
reg [63:0] roundAndPackFloat64_21_27_reg;
reg  roundAndPackFloat64_21_28;
reg  roundAndPackFloat64_21_28_reg;
reg [63:0] roundAndPackFloat64_21_29;
reg [63:0] roundAndPackFloat64_21_29_reg;
reg [63:0] roundAndPackFloat64_21_30;
reg [63:0] roundAndPackFloat64_21_30_reg;
reg  roundAndPackFloat64_31_32;
reg  roundAndPackFloat64_31_32_reg;
reg [63:0] roundAndPackFloat64_31_33;
reg [63:0] roundAndPackFloat64_31_33_reg;
reg [63:0] roundAndPackFloat64_shift64RightJammingexit_z0i;
reg [63:0] roundAndPackFloat64_shift64RightJammingexit_z0i_reg;
reg [31:0] roundAndPackFloat64_shift64RightJammingexit_tr3;
reg [31:0] roundAndPackFloat64_shift64RightJammingexit_tr3_reg;
reg [31:0] roundAndPackFloat64_shift64RightJammingexit_34;
reg [31:0] roundAndPackFloat64_shift64RightJammingexit_34_reg;
reg  roundAndPackFloat64_shift64RightJammingexit_35;
reg  roundAndPackFloat64_shift64RightJammingexit_35_reg;
reg [31:0] roundAndPackFloat64_36_37;
reg [31:0] roundAndPackFloat64_36_37_reg;
reg [31:0] roundAndPackFloat64_36_38;
reg [31:0] roundAndPackFloat64_36_38_reg;
reg [63:0] roundAndPackFloat64_thread_zSig5;
reg [63:0] roundAndPackFloat64_thread_zSig5_reg;
reg [31:0] roundAndPackFloat64_thread_02;
reg [31:0] roundAndPackFloat64_thread_02_reg;
reg [31:0] roundAndPackFloat64_thread_roundBits0;
reg [31:0] roundAndPackFloat64_thread_roundBits0_reg;
reg  roundAndPackFloat64_thread_39;
reg  roundAndPackFloat64_thread_39_reg;
reg [31:0] roundAndPackFloat64_40_41;
reg [31:0] roundAndPackFloat64_40_41_reg;
reg [31:0] roundAndPackFloat64_40_42;
reg [31:0] roundAndPackFloat64_40_42_reg;
reg [31:0] roundAndPackFloat64_thread6_roundBits09;
reg [31:0] roundAndPackFloat64_thread6_roundBits09_reg;
reg [31:0] roundAndPackFloat64_thread6_028;
reg [31:0] roundAndPackFloat64_thread6_028_reg;
reg [63:0] roundAndPackFloat64_thread6_zSig57;
reg [63:0] roundAndPackFloat64_thread6_zSig57_reg;
reg [63:0] roundAndPackFloat64_thread6_43;
reg [63:0] roundAndPackFloat64_thread6_43_reg;
reg [63:0] roundAndPackFloat64_thread6_44;
reg [63:0] roundAndPackFloat64_thread6_44_reg;
reg  roundAndPackFloat64_thread6_45;
reg  roundAndPackFloat64_thread6_45_reg;
reg [31:0] roundAndPackFloat64_thread6_46;
reg [31:0] roundAndPackFloat64_thread6_46_reg;
reg [31:0] roundAndPackFloat64_thread6_47;
reg [31:0] roundAndPackFloat64_thread6_47_reg;
reg [63:0] roundAndPackFloat64_thread6_48;
reg [63:0] roundAndPackFloat64_thread6_48_reg;
reg [63:0] roundAndPackFloat64_thread6_49;
reg [63:0] roundAndPackFloat64_thread6_49_reg;
reg  roundAndPackFloat64_thread6_50;
reg  roundAndPackFloat64_thread6_50_reg;
reg [63:0] roundAndPackFloat64_thread6_51;
reg [63:0] roundAndPackFloat64_thread6_51_reg;
reg [63:0] roundAndPackFloat64_thread6_52;
reg [63:0] roundAndPackFloat64_thread6_52_reg;
reg [63:0] roundAndPackFloat64_thread6_53;
reg [63:0] roundAndPackFloat64_thread6_53_reg;
reg [63:0] roundAndPackFloat64_thread6_op;
reg [63:0] roundAndPackFloat64_thread6_op_reg;
reg [63:0] roundAndPackFloat64_thread6_54;
reg [63:0] roundAndPackFloat64_thread6_54_reg;
reg [63:0] roundAndPackFloat64_thread6_55;
reg [63:0] roundAndPackFloat64_thread6_55_reg;
reg [63:0] roundAndPackFloat64_thread6_56;
reg [63:0] roundAndPackFloat64_thread6_56_reg;
reg [63:0] roundAndPackFloat64_57_0;
reg [63:0] roundAndPackFloat64_57_0_reg;
wire  ram_32_address_a;
wire  ram_32_write_enable_a;
wire [31:0] ram_32_in_a;
wire [31:0] ram_32_out_a;
wire  ram_32_address_b;
wire  ram_32_write_enable_b;
wire [31:0] ram_32_in_b;
wire [31:0] ram_32_out_b;
wire [5:0] a_input_address_a;
wire  a_input_write_enable_a;
wire [63:0] a_input_in_a;
wire [63:0] a_input_out_a;
wire [5:0] a_input_address_b;
wire  a_input_write_enable_b;
wire [63:0] a_input_in_b;
wire [63:0] a_input_out_b;
wire [5:0] b_input_address_a;
wire  b_input_write_enable_a;
wire [63:0] b_input_in_a;
wire [63:0] b_input_out_a;
wire [5:0] b_input_address_b;
wire  b_input_write_enable_b;
wire [63:0] b_input_in_b;
wire [63:0] b_input_out_b;
wire [5:0] z_output_address_a;
wire  z_output_write_enable_a;
wire [63:0] z_output_in_a;
wire [63:0] z_output_out_a;
wire [5:0] z_output_address_b;
wire  z_output_write_enable_b;
wire [63:0] z_output_in_b;
wire [63:0] z_output_out_b;
wire [7:0] countLeadingZeros32countLeadingZerosHigh_address_a;
wire  countLeadingZeros32countLeadingZerosHigh_write_enable_a;
wire [31:0] countLeadingZeros32countLeadingZerosHigh_in_a;
wire [31:0] countLeadingZeros32countLeadingZerosHigh_out_a;
wire [7:0] countLeadingZeros32countLeadingZerosHigh_address_b;
wire  countLeadingZeros32countLeadingZerosHigh_write_enable_b;
wire [31:0] countLeadingZeros32countLeadingZerosHigh_in_b;
wire [31:0] countLeadingZeros32countLeadingZerosHigh_out_b;
reg [63:0] roundAndPackFloat64_signed_add_64_0_op0;
reg [63:0] roundAndPackFloat64_signed_add_64_0_op1;
reg [63:0] roundAndPackFloat64_signed_add_64_0;
reg [31:0] roundAndPackFloat64_signed_subtract_32_0_op0;
reg [31:0] roundAndPackFloat64_signed_subtract_32_0_op1;
reg [31:0] roundAndPackFloat64_signed_subtract_32_0;
reg [63:0] roundAndPackFloat64_signed_add_64_1_op0;
reg [63:0] roundAndPackFloat64_signed_add_64_1_op1;
reg [63:0] roundAndPackFloat64_signed_add_64_1;

// Local Rams


always @(posedge clk) begin
if (reset == 1'b1)
	cur_state <= LEGUP_0;
else if (memory_controller_waitrequest == 1'd1)
	cur_state <= cur_state;
else
	cur_state <= next_state;
end

always @(*)
begin
next_state = cur_state;
case(cur_state)  // synthesis parallel_case  
LEGUP_0:
	if ((start == 1'd1))
		next_state = LEGUP_F_roundAndPackFloat64_BB__0_1;
LEGUP_F_roundAndPackFloat64_BB__0_1:
	if ((roundAndPackFloat64_0_3 == 1'd1))
		next_state = LEGUP_F_roundAndPackFloat64_BB__4_2;
	else if ((roundAndPackFloat64_0_3 == 1'd0))
		next_state = LEGUP_F_roundAndPackFloat64_BB_thread_18;
LEGUP_F_roundAndPackFloat64_BB__11_5:
		next_state = LEGUP_F_roundAndPackFloat64_BB__11_6;
LEGUP_F_roundAndPackFloat64_BB__11_6:
		next_state = LEGUP_F_roundAndPackFloat64_BB__11_7;
LEGUP_F_roundAndPackFloat64_BB__11_7:
		next_state = LEGUP_F_roundAndPackFloat64_BB__11_8;
LEGUP_F_roundAndPackFloat64_BB__11_8:
		next_state = LEGUP_F_roundAndPackFloat64_BB__57_24;
LEGUP_F_roundAndPackFloat64_BB__17_9:
	if ((roundAndPackFloat64_17_18 == 1'd1))
		next_state = LEGUP_F_roundAndPackFloat64_BB__19_10;
	else if ((roundAndPackFloat64_17_18 == 1'd0))
		next_state = LEGUP_F_roundAndPackFloat64_BB_thread_18;
LEGUP_F_roundAndPackFloat64_BB__19_10:
	if ((roundAndPackFloat64_19_20 == 1'd1))
		next_state = LEGUP_F_roundAndPackFloat64_BB__21_11;
	else if ((roundAndPackFloat64_19_20 == 1'd0))
		next_state = LEGUP_F_roundAndPackFloat64_BB__31_12;
LEGUP_F_roundAndPackFloat64_BB__21_11:
		next_state = LEGUP_F_roundAndPackFloat64_BB_shift64RightJammingexit_13;
LEGUP_F_roundAndPackFloat64_BB__31_12:
		next_state = LEGUP_F_roundAndPackFloat64_BB_shift64RightJammingexit_13;
LEGUP_F_roundAndPackFloat64_BB__36_14:
		next_state = LEGUP_F_roundAndPackFloat64_BB__36_15;
LEGUP_F_roundAndPackFloat64_BB__36_15:
		next_state = LEGUP_F_roundAndPackFloat64_BB__36_16;
LEGUP_F_roundAndPackFloat64_BB__36_16:
		next_state = LEGUP_F_roundAndPackFloat64_BB__36_17;
LEGUP_F_roundAndPackFloat64_BB__36_17:
		next_state = LEGUP_F_roundAndPackFloat64_BB_thread_18;
LEGUP_F_roundAndPackFloat64_BB__40_19:
		next_state = LEGUP_F_roundAndPackFloat64_BB__40_20;
LEGUP_F_roundAndPackFloat64_BB__40_20:
		next_state = LEGUP_F_roundAndPackFloat64_BB__40_21;
LEGUP_F_roundAndPackFloat64_BB__40_21:
		next_state = LEGUP_F_roundAndPackFloat64_BB__40_22;
LEGUP_F_roundAndPackFloat64_BB__40_22:
		next_state = LEGUP_F_roundAndPackFloat64_BB_thread6_23;
LEGUP_F_roundAndPackFloat64_BB__4_2:
	if ((roundAndPackFloat64_4_5 == 1'd1))
		next_state = LEGUP_F_roundAndPackFloat64_BB__11_5;
	else if ((roundAndPackFloat64_4_5 == 1'd0))
		next_state = LEGUP_F_roundAndPackFloat64_BB__6_3;
LEGUP_F_roundAndPackFloat64_BB__57_24:
		next_state = LEGUP_0;
LEGUP_F_roundAndPackFloat64_BB__6_3:
	if ((roundAndPackFloat64_6_7 == 1'd1))
		next_state = LEGUP_F_roundAndPackFloat64_BB__8_4;
	else if ((roundAndPackFloat64_6_7 == 1'd0))
		next_state = LEGUP_F_roundAndPackFloat64_BB__17_9;
LEGUP_F_roundAndPackFloat64_BB__8_4:
	if ((roundAndPackFloat64_8_10 == 1'd1))
		next_state = LEGUP_F_roundAndPackFloat64_BB__11_5;
	else if ((roundAndPackFloat64_8_10 == 1'd0))
		next_state = LEGUP_F_roundAndPackFloat64_BB_thread_18;
LEGUP_F_roundAndPackFloat64_BB_shift64RightJammingexit_13:
	if ((roundAndPackFloat64_shift64RightJammingexit_35 == 1'd1))
		next_state = LEGUP_F_roundAndPackFloat64_BB_thread6_23;
	else if ((roundAndPackFloat64_shift64RightJammingexit_35 == 1'd0))
		next_state = LEGUP_F_roundAndPackFloat64_BB__36_14;
LEGUP_F_roundAndPackFloat64_BB_thread6_23:
		next_state = LEGUP_F_roundAndPackFloat64_BB__57_24;
LEGUP_F_roundAndPackFloat64_BB_thread_18:
	if ((roundAndPackFloat64_thread_39 == 1'd1))
		next_state = LEGUP_F_roundAndPackFloat64_BB_thread6_23;
	else if ((roundAndPackFloat64_thread_39 == 1'd0))
		next_state = LEGUP_F_roundAndPackFloat64_BB__40_19;
default:
	next_state = cur_state;
endcase

end
always @(*) begin
	/* roundAndPackFloat64: %0*/
	/*   %.tr = trunc i64 %zSig to i32*/
		roundAndPackFloat64_0_tr = arg_zSig[31:0];
end
always @(posedge clk) begin
	/* roundAndPackFloat64: %0*/
	/*   %.tr = trunc i64 %zSig to i32*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB__0_1)) begin
		roundAndPackFloat64_0_tr_reg <= roundAndPackFloat64_0_tr;
		if (start == 1'b0 && ^(roundAndPackFloat64_0_tr) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_0_tr_reg"); $finish; end
	end
end
always @(*) begin
	/* roundAndPackFloat64: %0*/
	/*   %1 = and i32 %.tr, 1023*/
		roundAndPackFloat64_0_1 = (roundAndPackFloat64_0_tr & 32'd1023);
end
always @(posedge clk) begin
	/* roundAndPackFloat64: %0*/
	/*   %1 = and i32 %.tr, 1023*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB__0_1)) begin
		roundAndPackFloat64_0_1_reg <= roundAndPackFloat64_0_1;
		if (start == 1'b0 && ^(roundAndPackFloat64_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_0_1_reg"); $finish; end
	end
end
always @(*) begin
	/* roundAndPackFloat64: %0*/
	/*   %2 = and i32 %zExp, 65535*/
		roundAndPackFloat64_0_2 = (arg_zExp & 32'd65535);
end
always @(posedge clk) begin
	/* roundAndPackFloat64: %0*/
	/*   %2 = and i32 %zExp, 65535*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB__0_1)) begin
		roundAndPackFloat64_0_2_reg <= roundAndPackFloat64_0_2;
		if (start == 1'b0 && ^(roundAndPackFloat64_0_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_0_2_reg"); $finish; end
	end
end
always @(*) begin
	/* roundAndPackFloat64: %0*/
	/*   %3 = icmp ugt i32 %2, 2044*/
		roundAndPackFloat64_0_3 = (roundAndPackFloat64_0_2 > 32'd2044);
end
always @(posedge clk) begin
	/* roundAndPackFloat64: %0*/
	/*   %3 = icmp ugt i32 %2, 2044*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB__0_1)) begin
		roundAndPackFloat64_0_3_reg <= roundAndPackFloat64_0_3;
		if (start == 1'b0 && ^(roundAndPackFloat64_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_0_3_reg"); $finish; end
	end
end
always @(*) begin
	/* roundAndPackFloat64: %4*/
	/*   %5 = icmp sgt i32 %zExp, 2045*/
		roundAndPackFloat64_4_5 = ($signed(arg_zExp) > $signed(32'd2045));
end
always @(posedge clk) begin
	/* roundAndPackFloat64: %4*/
	/*   %5 = icmp sgt i32 %zExp, 2045*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB__4_2)) begin
		roundAndPackFloat64_4_5_reg <= roundAndPackFloat64_4_5;
		if (start == 1'b0 && ^(roundAndPackFloat64_4_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_4_5_reg"); $finish; end
	end
end
always @(*) begin
	/* roundAndPackFloat64: %6*/
	/*   %7 = icmp eq i32 %zExp, 2045*/
		roundAndPackFloat64_6_7 = (arg_zExp == 32'd2045);
end
always @(posedge clk) begin
	/* roundAndPackFloat64: %6*/
	/*   %7 = icmp eq i32 %zExp, 2045*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB__6_3)) begin
		roundAndPackFloat64_6_7_reg <= roundAndPackFloat64_6_7;
		if (start == 1'b0 && ^(roundAndPackFloat64_6_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_6_7_reg"); $finish; end
	end
end
always @(*) begin
	/* roundAndPackFloat64: %8*/
	/*   %9 = add i64 512, %zSig*/
		roundAndPackFloat64_8_9 = roundAndPackFloat64_signed_add_64_0;
end
always @(posedge clk) begin
	/* roundAndPackFloat64: %8*/
	/*   %9 = add i64 512, %zSig*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB__8_4)) begin
		roundAndPackFloat64_8_9_reg <= roundAndPackFloat64_8_9;
		if (start == 1'b0 && ^(roundAndPackFloat64_8_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_8_9_reg"); $finish; end
	end
	/* roundAndPackFloat64: %.thread6*/
	/*   %43 = add i64 %zSig57, 512*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB_thread6_23)) begin
		roundAndPackFloat64_8_9_reg <= roundAndPackFloat64_thread6_43;
		if (start == 1'b0 && ^(roundAndPackFloat64_thread6_43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_8_9_reg"); $finish; end
	end
end
always @(*) begin
	/* roundAndPackFloat64: %8*/
	/*   %10 = icmp slt i64 %9, 0*/
		roundAndPackFloat64_8_10 = ($signed(roundAndPackFloat64_8_9) < $signed(64'd0));
end
always @(posedge clk) begin
	/* roundAndPackFloat64: %8*/
	/*   %10 = icmp slt i64 %9, 0*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB__8_4)) begin
		roundAndPackFloat64_8_10_reg <= roundAndPackFloat64_8_10;
		if (start == 1'b0 && ^(roundAndPackFloat64_8_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_8_10_reg"); $finish; end
	end
end
always @(*) begin
	/* roundAndPackFloat64: %11*/
	/*   %12 = load i32* @float_exception_flags, align 4, !tbaa !1*/
		roundAndPackFloat64_11_12 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* roundAndPackFloat64: %11*/
	/*   %12 = load i32* @float_exception_flags, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB__11_7)) begin
		roundAndPackFloat64_11_12_reg <= roundAndPackFloat64_11_12;
		if (start == 1'b0 && ^(roundAndPackFloat64_11_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_11_12_reg"); $finish; end
	end
end
always @(*) begin
	/* roundAndPackFloat64: %11*/
	/*   %13 = or i32 %12, 9*/
		roundAndPackFloat64_11_13 = (roundAndPackFloat64_11_12 | 32'd9);
end
always @(posedge clk) begin
	/* roundAndPackFloat64: %11*/
	/*   %13 = or i32 %12, 9*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB__11_7)) begin
		roundAndPackFloat64_11_13_reg <= roundAndPackFloat64_11_13;
		if (start == 1'b0 && ^(roundAndPackFloat64_11_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_11_13_reg"); $finish; end
	end
end
always @(*) begin
	/* roundAndPackFloat64: %11*/
	/*   %14 = zext i32 %zSign to i64*/
		roundAndPackFloat64_11_14 = arg_zSign;
end
always @(posedge clk) begin
	/* roundAndPackFloat64: %11*/
	/*   %14 = zext i32 %zSign to i64*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB__11_5)) begin
		roundAndPackFloat64_11_14_reg <= roundAndPackFloat64_11_14;
		if (start == 1'b0 && ^(roundAndPackFloat64_11_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_11_14_reg"); $finish; end
	end
end
always @(*) begin
	/* roundAndPackFloat64: %11*/
	/*   %15 = shl i64 %14, 63*/
		roundAndPackFloat64_11_15 = (roundAndPackFloat64_11_14 <<< (64'd63 % 64'd64));
end
always @(posedge clk) begin
	/* roundAndPackFloat64: %11*/
	/*   %15 = shl i64 %14, 63*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB__11_5)) begin
		roundAndPackFloat64_11_15_reg <= roundAndPackFloat64_11_15;
		if (start == 1'b0 && ^(roundAndPackFloat64_11_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_11_15_reg"); $finish; end
	end
end
always @(*) begin
	/* roundAndPackFloat64: %11*/
	/*   %16 = or i64 %15, 9218868437227405312*/
		roundAndPackFloat64_11_16 = (roundAndPackFloat64_11_15 | 64'd9218868437227405312);
end
always @(posedge clk) begin
	/* roundAndPackFloat64: %11*/
	/*   %16 = or i64 %15, 9218868437227405312*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB__11_5)) begin
		roundAndPackFloat64_11_16_reg <= roundAndPackFloat64_11_16;
		if (start == 1'b0 && ^(roundAndPackFloat64_11_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_11_16_reg"); $finish; end
	end
end
always @(*) begin
	/* roundAndPackFloat64: %17*/
	/*   %18 = icmp slt i32 %zExp, 0*/
		roundAndPackFloat64_17_18 = ($signed(arg_zExp) < $signed(32'd0));
end
always @(posedge clk) begin
	/* roundAndPackFloat64: %17*/
	/*   %18 = icmp slt i32 %zExp, 0*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB__17_9)) begin
		roundAndPackFloat64_17_18_reg <= roundAndPackFloat64_17_18;
		if (start == 1'b0 && ^(roundAndPackFloat64_17_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_17_18_reg"); $finish; end
	end
end
always @(*) begin
	/* roundAndPackFloat64: %19*/
	/*   %20 = icmp sgt i32 %zExp, -64*/
		roundAndPackFloat64_19_20 = ($signed(arg_zExp) > $signed(-32'd64));
end
always @(posedge clk) begin
	/* roundAndPackFloat64: %19*/
	/*   %20 = icmp sgt i32 %zExp, -64*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB__19_10)) begin
		roundAndPackFloat64_19_20_reg <= roundAndPackFloat64_19_20;
		if (start == 1'b0 && ^(roundAndPackFloat64_19_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_19_20_reg"); $finish; end
	end
end
always @(*) begin
	/* roundAndPackFloat64: %21*/
	/*   %22 = sub nsw i32 0, %zExp*/
		roundAndPackFloat64_21_22 = roundAndPackFloat64_signed_subtract_32_0;
end
always @(posedge clk) begin
	/* roundAndPackFloat64: %21*/
	/*   %22 = sub nsw i32 0, %zExp*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB__21_11)) begin
		roundAndPackFloat64_21_22_reg <= roundAndPackFloat64_21_22;
		if (start == 1'b0 && ^(roundAndPackFloat64_21_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_21_22_reg"); $finish; end
	end
end
always @(*) begin
	/* roundAndPackFloat64: %21*/
	/*   %23 = zext i32 %22 to i64*/
		roundAndPackFloat64_21_23 = roundAndPackFloat64_21_22;
end
always @(posedge clk) begin
	/* roundAndPackFloat64: %21*/
	/*   %23 = zext i32 %22 to i64*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB__21_11)) begin
		roundAndPackFloat64_21_23_reg <= roundAndPackFloat64_21_23;
		if (start == 1'b0 && ^(roundAndPackFloat64_21_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_21_23_reg"); $finish; end
	end
end
always @(*) begin
	/* roundAndPackFloat64: %21*/
	/*   %24 = lshr i64 %zSig, %23*/
		roundAndPackFloat64_21_24 = (arg_zSig >>> (roundAndPackFloat64_21_23 % 64'd64));
end
always @(posedge clk) begin
	/* roundAndPackFloat64: %21*/
	/*   %24 = lshr i64 %zSig, %23*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB__21_11)) begin
		roundAndPackFloat64_21_24_reg <= roundAndPackFloat64_21_24;
		if (start == 1'b0 && ^(roundAndPackFloat64_21_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_21_24_reg"); $finish; end
	end
end
always @(*) begin
	/* roundAndPackFloat64: %21*/
	/*   %25 = and i32 %zExp, 63*/
		roundAndPackFloat64_21_25 = (arg_zExp & 32'd63);
end
always @(posedge clk) begin
	/* roundAndPackFloat64: %21*/
	/*   %25 = and i32 %zExp, 63*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB__21_11)) begin
		roundAndPackFloat64_21_25_reg <= roundAndPackFloat64_21_25;
		if (start == 1'b0 && ^(roundAndPackFloat64_21_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_21_25_reg"); $finish; end
	end
end
always @(*) begin
	/* roundAndPackFloat64: %21*/
	/*   %26 = zext i32 %25 to i64*/
		roundAndPackFloat64_21_26 = roundAndPackFloat64_21_25;
end
always @(posedge clk) begin
	/* roundAndPackFloat64: %21*/
	/*   %26 = zext i32 %25 to i64*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB__21_11)) begin
		roundAndPackFloat64_21_26_reg <= roundAndPackFloat64_21_26;
		if (start == 1'b0 && ^(roundAndPackFloat64_21_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_21_26_reg"); $finish; end
	end
end
always @(*) begin
	/* roundAndPackFloat64: %21*/
	/*   %27 = shl i64 %zSig, %26*/
		roundAndPackFloat64_21_27 = (arg_zSig <<< (roundAndPackFloat64_21_26 % 64'd64));
end
always @(posedge clk) begin
	/* roundAndPackFloat64: %21*/
	/*   %27 = shl i64 %zSig, %26*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB__21_11)) begin
		roundAndPackFloat64_21_27_reg <= roundAndPackFloat64_21_27;
		if (start == 1'b0 && ^(roundAndPackFloat64_21_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_21_27_reg"); $finish; end
	end
end
always @(*) begin
	/* roundAndPackFloat64: %21*/
	/*   %28 = icmp ne i64 %27, 0*/
		roundAndPackFloat64_21_28 = (roundAndPackFloat64_21_27 != 64'd0);
end
always @(posedge clk) begin
	/* roundAndPackFloat64: %21*/
	/*   %28 = icmp ne i64 %27, 0*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB__21_11)) begin
		roundAndPackFloat64_21_28_reg <= roundAndPackFloat64_21_28;
		if (start == 1'b0 && ^(roundAndPackFloat64_21_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_21_28_reg"); $finish; end
	end
end
always @(*) begin
	/* roundAndPackFloat64: %21*/
	/*   %29 = zext i1 %28 to i64*/
		roundAndPackFloat64_21_29 = roundAndPackFloat64_21_28;
end
always @(posedge clk) begin
	/* roundAndPackFloat64: %21*/
	/*   %29 = zext i1 %28 to i64*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB__21_11)) begin
		roundAndPackFloat64_21_29_reg <= roundAndPackFloat64_21_29;
		if (start == 1'b0 && ^(roundAndPackFloat64_21_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_21_29_reg"); $finish; end
	end
end
always @(*) begin
	/* roundAndPackFloat64: %21*/
	/*   %30 = or i64 %29, %24*/
		roundAndPackFloat64_21_30 = (roundAndPackFloat64_21_29 | roundAndPackFloat64_21_24);
end
always @(posedge clk) begin
	/* roundAndPackFloat64: %21*/
	/*   %30 = or i64 %29, %24*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB__21_11)) begin
		roundAndPackFloat64_21_30_reg <= roundAndPackFloat64_21_30;
		if (start == 1'b0 && ^(roundAndPackFloat64_21_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_21_30_reg"); $finish; end
	end
end
always @(*) begin
	/* roundAndPackFloat64: %31*/
	/*   %32 = icmp ne i64 %zSig, 0*/
		roundAndPackFloat64_31_32 = (arg_zSig != 64'd0);
end
always @(posedge clk) begin
	/* roundAndPackFloat64: %31*/
	/*   %32 = icmp ne i64 %zSig, 0*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB__31_12)) begin
		roundAndPackFloat64_31_32_reg <= roundAndPackFloat64_31_32;
		if (start == 1'b0 && ^(roundAndPackFloat64_31_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_31_32_reg"); $finish; end
	end
end
always @(*) begin
	/* roundAndPackFloat64: %31*/
	/*   %33 = zext i1 %32 to i64*/
		roundAndPackFloat64_31_33 = roundAndPackFloat64_31_32;
end
always @(posedge clk) begin
	/* roundAndPackFloat64: %31*/
	/*   %33 = zext i1 %32 to i64*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB__31_12)) begin
		roundAndPackFloat64_31_33_reg <= roundAndPackFloat64_31_33;
		if (start == 1'b0 && ^(roundAndPackFloat64_31_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_31_33_reg"); $finish; end
	end
end
always @(*) begin
	/* roundAndPackFloat64: %shift64RightJamming.exit*/
	/*   %z.0.i = phi i64 [ %30, %21 ], [ %33, %31 ]*/
	if (((cur_state == LEGUP_F_roundAndPackFloat64_BB__21_11) & (memory_controller_waitrequest == 1'd0))) begin
		roundAndPackFloat64_shift64RightJammingexit_z0i = roundAndPackFloat64_21_30;
	end
	/* roundAndPackFloat64: %shift64RightJamming.exit*/
	/*   %z.0.i = phi i64 [ %30, %21 ], [ %33, %31 ]*/
	else /* if (((cur_state == LEGUP_F_roundAndPackFloat64_BB__31_12) & (memory_controller_waitrequest == 1'd0))) */ begin
		roundAndPackFloat64_shift64RightJammingexit_z0i = roundAndPackFloat64_31_33;
	end
end
always @(posedge clk) begin
	/* roundAndPackFloat64: %shift64RightJamming.exit*/
	/*   %z.0.i = phi i64 [ %30, %21 ], [ %33, %31 ]*/
	if (((cur_state == LEGUP_F_roundAndPackFloat64_BB__21_11) & (memory_controller_waitrequest == 1'd0))) begin
		roundAndPackFloat64_shift64RightJammingexit_z0i_reg <= roundAndPackFloat64_shift64RightJammingexit_z0i;
		if (start == 1'b0 && ^(roundAndPackFloat64_shift64RightJammingexit_z0i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_shift64RightJammingexit_z0i_reg"); $finish; end
	end
	/* roundAndPackFloat64: %shift64RightJamming.exit*/
	/*   %z.0.i = phi i64 [ %30, %21 ], [ %33, %31 ]*/
	if (((cur_state == LEGUP_F_roundAndPackFloat64_BB__31_12) & (memory_controller_waitrequest == 1'd0))) begin
		roundAndPackFloat64_shift64RightJammingexit_z0i_reg <= roundAndPackFloat64_shift64RightJammingexit_z0i;
		if (start == 1'b0 && ^(roundAndPackFloat64_shift64RightJammingexit_z0i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_shift64RightJammingexit_z0i_reg"); $finish; end
	end
end
always @(*) begin
	/* roundAndPackFloat64: %shift64RightJamming.exit*/
	/*   %.tr3 = trunc i64 %z.0.i to i32*/
		roundAndPackFloat64_shift64RightJammingexit_tr3 = roundAndPackFloat64_shift64RightJammingexit_z0i_reg[31:0];
end
always @(posedge clk) begin
	/* roundAndPackFloat64: %shift64RightJamming.exit*/
	/*   %.tr3 = trunc i64 %z.0.i to i32*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB_shift64RightJammingexit_13)) begin
		roundAndPackFloat64_shift64RightJammingexit_tr3_reg <= roundAndPackFloat64_shift64RightJammingexit_tr3;
		if (start == 1'b0 && ^(roundAndPackFloat64_shift64RightJammingexit_tr3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_shift64RightJammingexit_tr3_reg"); $finish; end
	end
end
always @(*) begin
	/* roundAndPackFloat64: %shift64RightJamming.exit*/
	/*   %34 = and i32 %.tr3, 1023*/
		roundAndPackFloat64_shift64RightJammingexit_34 = (roundAndPackFloat64_shift64RightJammingexit_tr3 & 32'd1023);
end
always @(posedge clk) begin
	/* roundAndPackFloat64: %shift64RightJamming.exit*/
	/*   %34 = and i32 %.tr3, 1023*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB_shift64RightJammingexit_13)) begin
		roundAndPackFloat64_shift64RightJammingexit_34_reg <= roundAndPackFloat64_shift64RightJammingexit_34;
		if (start == 1'b0 && ^(roundAndPackFloat64_shift64RightJammingexit_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_shift64RightJammingexit_34_reg"); $finish; end
	end
end
always @(*) begin
	/* roundAndPackFloat64: %shift64RightJamming.exit*/
	/*   %35 = icmp eq i32 %34, 0*/
		roundAndPackFloat64_shift64RightJammingexit_35 = (roundAndPackFloat64_shift64RightJammingexit_34 == 32'd0);
end
always @(posedge clk) begin
	/* roundAndPackFloat64: %shift64RightJamming.exit*/
	/*   %35 = icmp eq i32 %34, 0*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB_shift64RightJammingexit_13)) begin
		roundAndPackFloat64_shift64RightJammingexit_35_reg <= roundAndPackFloat64_shift64RightJammingexit_35;
		if (start == 1'b0 && ^(roundAndPackFloat64_shift64RightJammingexit_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_shift64RightJammingexit_35_reg"); $finish; end
	end
end
always @(*) begin
	/* roundAndPackFloat64: %36*/
	/*   %37 = load i32* @float_exception_flags, align 4, !tbaa !1*/
		roundAndPackFloat64_36_37 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* roundAndPackFloat64: %36*/
	/*   %37 = load i32* @float_exception_flags, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB__36_16)) begin
		roundAndPackFloat64_36_37_reg <= roundAndPackFloat64_36_37;
		if (start == 1'b0 && ^(roundAndPackFloat64_36_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_36_37_reg"); $finish; end
	end
end
always @(*) begin
	/* roundAndPackFloat64: %36*/
	/*   %38 = or i32 %37, 4*/
		roundAndPackFloat64_36_38 = (roundAndPackFloat64_36_37 | 32'd4);
end
always @(posedge clk) begin
	/* roundAndPackFloat64: %36*/
	/*   %38 = or i32 %37, 4*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB__36_16)) begin
		roundAndPackFloat64_36_38_reg <= roundAndPackFloat64_36_38;
		if (start == 1'b0 && ^(roundAndPackFloat64_36_38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_36_38_reg"); $finish; end
	end
end
always @(*) begin
	/* roundAndPackFloat64: %.thread*/
	/*   %zSig5 = phi i64 [ %z.0.i, %36 ], [ %zSig, %17 ], [ %zSig, %0 ], [ %zSig, %8 ]*/
	if ((((cur_state == LEGUP_F_roundAndPackFloat64_BB__0_1) & (memory_controller_waitrequest == 1'd0)) & (roundAndPackFloat64_0_3 == 1'd0))) begin
		roundAndPackFloat64_thread_zSig5 = arg_zSig;
	end
	/* roundAndPackFloat64: %.thread*/
	/*   %zSig5 = phi i64 [ %z.0.i, %36 ], [ %zSig, %17 ], [ %zSig, %0 ], [ %zSig, %8 ]*/
	else if ((((cur_state == LEGUP_F_roundAndPackFloat64_BB__8_4) & (memory_controller_waitrequest == 1'd0)) & (roundAndPackFloat64_8_10 == 1'd0))) begin
		roundAndPackFloat64_thread_zSig5 = arg_zSig;
	end
	/* roundAndPackFloat64: %.thread*/
	/*   %zSig5 = phi i64 [ %z.0.i, %36 ], [ %zSig, %17 ], [ %zSig, %0 ], [ %zSig, %8 ]*/
	else if ((((cur_state == LEGUP_F_roundAndPackFloat64_BB__17_9) & (memory_controller_waitrequest == 1'd0)) & (roundAndPackFloat64_17_18 == 1'd0))) begin
		roundAndPackFloat64_thread_zSig5 = arg_zSig;
	end
	/* roundAndPackFloat64: %.thread*/
	/*   %zSig5 = phi i64 [ %z.0.i, %36 ], [ %zSig, %17 ], [ %zSig, %0 ], [ %zSig, %8 ]*/
	else /* if (((cur_state == LEGUP_F_roundAndPackFloat64_BB__36_17) & (memory_controller_waitrequest == 1'd0))) */ begin
		roundAndPackFloat64_thread_zSig5 = roundAndPackFloat64_shift64RightJammingexit_z0i_reg;
	end
end
always @(posedge clk) begin
	/* roundAndPackFloat64: %.thread*/
	/*   %zSig5 = phi i64 [ %z.0.i, %36 ], [ %zSig, %17 ], [ %zSig, %0 ], [ %zSig, %8 ]*/
	if ((((cur_state == LEGUP_F_roundAndPackFloat64_BB__0_1) & (memory_controller_waitrequest == 1'd0)) & (roundAndPackFloat64_0_3 == 1'd0))) begin
		roundAndPackFloat64_thread_zSig5_reg <= roundAndPackFloat64_thread_zSig5;
		if (start == 1'b0 && ^(roundAndPackFloat64_thread_zSig5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_thread_zSig5_reg"); $finish; end
	end
	/* roundAndPackFloat64: %.thread*/
	/*   %zSig5 = phi i64 [ %z.0.i, %36 ], [ %zSig, %17 ], [ %zSig, %0 ], [ %zSig, %8 ]*/
	if ((((cur_state == LEGUP_F_roundAndPackFloat64_BB__8_4) & (memory_controller_waitrequest == 1'd0)) & (roundAndPackFloat64_8_10 == 1'd0))) begin
		roundAndPackFloat64_thread_zSig5_reg <= roundAndPackFloat64_thread_zSig5;
		if (start == 1'b0 && ^(roundAndPackFloat64_thread_zSig5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_thread_zSig5_reg"); $finish; end
	end
	/* roundAndPackFloat64: %.thread*/
	/*   %zSig5 = phi i64 [ %z.0.i, %36 ], [ %zSig, %17 ], [ %zSig, %0 ], [ %zSig, %8 ]*/
	if ((((cur_state == LEGUP_F_roundAndPackFloat64_BB__17_9) & (memory_controller_waitrequest == 1'd0)) & (roundAndPackFloat64_17_18 == 1'd0))) begin
		roundAndPackFloat64_thread_zSig5_reg <= roundAndPackFloat64_thread_zSig5;
		if (start == 1'b0 && ^(roundAndPackFloat64_thread_zSig5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_thread_zSig5_reg"); $finish; end
	end
	/* roundAndPackFloat64: %.thread*/
	/*   %zSig5 = phi i64 [ %z.0.i, %36 ], [ %zSig, %17 ], [ %zSig, %0 ], [ %zSig, %8 ]*/
	if (((cur_state == LEGUP_F_roundAndPackFloat64_BB__36_17) & (memory_controller_waitrequest == 1'd0))) begin
		roundAndPackFloat64_thread_zSig5_reg <= roundAndPackFloat64_thread_zSig5;
		if (start == 1'b0 && ^(roundAndPackFloat64_thread_zSig5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_thread_zSig5_reg"); $finish; end
	end
end
always @(*) begin
	/* roundAndPackFloat64: %.thread*/
	/*   %.02 = phi i32 [ 0, %36 ], [ %zExp, %17 ], [ %zExp, %0 ], [ 2045, %8 ]*/
	if ((((cur_state == LEGUP_F_roundAndPackFloat64_BB__0_1) & (memory_controller_waitrequest == 1'd0)) & (roundAndPackFloat64_0_3 == 1'd0))) begin
		roundAndPackFloat64_thread_02 = arg_zExp;
	end
	/* roundAndPackFloat64: %.thread*/
	/*   %.02 = phi i32 [ 0, %36 ], [ %zExp, %17 ], [ %zExp, %0 ], [ 2045, %8 ]*/
	else if ((((cur_state == LEGUP_F_roundAndPackFloat64_BB__8_4) & (memory_controller_waitrequest == 1'd0)) & (roundAndPackFloat64_8_10 == 1'd0))) begin
		roundAndPackFloat64_thread_02 = 32'd2045;
	end
	/* roundAndPackFloat64: %.thread*/
	/*   %.02 = phi i32 [ 0, %36 ], [ %zExp, %17 ], [ %zExp, %0 ], [ 2045, %8 ]*/
	else if ((((cur_state == LEGUP_F_roundAndPackFloat64_BB__17_9) & (memory_controller_waitrequest == 1'd0)) & (roundAndPackFloat64_17_18 == 1'd0))) begin
		roundAndPackFloat64_thread_02 = arg_zExp;
	end
	/* roundAndPackFloat64: %.thread*/
	/*   %.02 = phi i32 [ 0, %36 ], [ %zExp, %17 ], [ %zExp, %0 ], [ 2045, %8 ]*/
	else /* if (((cur_state == LEGUP_F_roundAndPackFloat64_BB__36_17) & (memory_controller_waitrequest == 1'd0))) */ begin
		roundAndPackFloat64_thread_02 = 32'd0;
	end
end
always @(posedge clk) begin
	/* roundAndPackFloat64: %.thread*/
	/*   %.02 = phi i32 [ 0, %36 ], [ %zExp, %17 ], [ %zExp, %0 ], [ 2045, %8 ]*/
	if ((((cur_state == LEGUP_F_roundAndPackFloat64_BB__0_1) & (memory_controller_waitrequest == 1'd0)) & (roundAndPackFloat64_0_3 == 1'd0))) begin
		roundAndPackFloat64_thread_02_reg <= roundAndPackFloat64_thread_02;
		if (start == 1'b0 && ^(roundAndPackFloat64_thread_02) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_thread_02_reg"); $finish; end
	end
	/* roundAndPackFloat64: %.thread*/
	/*   %.02 = phi i32 [ 0, %36 ], [ %zExp, %17 ], [ %zExp, %0 ], [ 2045, %8 ]*/
	if ((((cur_state == LEGUP_F_roundAndPackFloat64_BB__8_4) & (memory_controller_waitrequest == 1'd0)) & (roundAndPackFloat64_8_10 == 1'd0))) begin
		roundAndPackFloat64_thread_02_reg <= roundAndPackFloat64_thread_02;
		if (start == 1'b0 && ^(roundAndPackFloat64_thread_02) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_thread_02_reg"); $finish; end
	end
	/* roundAndPackFloat64: %.thread*/
	/*   %.02 = phi i32 [ 0, %36 ], [ %zExp, %17 ], [ %zExp, %0 ], [ 2045, %8 ]*/
	if ((((cur_state == LEGUP_F_roundAndPackFloat64_BB__17_9) & (memory_controller_waitrequest == 1'd0)) & (roundAndPackFloat64_17_18 == 1'd0))) begin
		roundAndPackFloat64_thread_02_reg <= roundAndPackFloat64_thread_02;
		if (start == 1'b0 && ^(roundAndPackFloat64_thread_02) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_thread_02_reg"); $finish; end
	end
	/* roundAndPackFloat64: %.thread*/
	/*   %.02 = phi i32 [ 0, %36 ], [ %zExp, %17 ], [ %zExp, %0 ], [ 2045, %8 ]*/
	if (((cur_state == LEGUP_F_roundAndPackFloat64_BB__36_17) & (memory_controller_waitrequest == 1'd0))) begin
		roundAndPackFloat64_thread_02_reg <= roundAndPackFloat64_thread_02;
		if (start == 1'b0 && ^(roundAndPackFloat64_thread_02) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_thread_02_reg"); $finish; end
	end
end
always @(*) begin
	/* roundAndPackFloat64: %.thread*/
	/*   %roundBits.0 = phi i32 [ %34, %36 ], [ %1, %17 ], [ %1, %0 ], [ %1, %8 ]*/
	if ((((cur_state == LEGUP_F_roundAndPackFloat64_BB__0_1) & (memory_controller_waitrequest == 1'd0)) & (roundAndPackFloat64_0_3 == 1'd0))) begin
		roundAndPackFloat64_thread_roundBits0 = roundAndPackFloat64_0_1;
	end
	/* roundAndPackFloat64: %.thread*/
	/*   %roundBits.0 = phi i32 [ %34, %36 ], [ %1, %17 ], [ %1, %0 ], [ %1, %8 ]*/
	else if ((((cur_state == LEGUP_F_roundAndPackFloat64_BB__8_4) & (memory_controller_waitrequest == 1'd0)) & (roundAndPackFloat64_8_10 == 1'd0))) begin
		roundAndPackFloat64_thread_roundBits0 = roundAndPackFloat64_0_1_reg;
	end
	/* roundAndPackFloat64: %.thread*/
	/*   %roundBits.0 = phi i32 [ %34, %36 ], [ %1, %17 ], [ %1, %0 ], [ %1, %8 ]*/
	else if ((((cur_state == LEGUP_F_roundAndPackFloat64_BB__17_9) & (memory_controller_waitrequest == 1'd0)) & (roundAndPackFloat64_17_18 == 1'd0))) begin
		roundAndPackFloat64_thread_roundBits0 = roundAndPackFloat64_0_1_reg;
	end
	/* roundAndPackFloat64: %.thread*/
	/*   %roundBits.0 = phi i32 [ %34, %36 ], [ %1, %17 ], [ %1, %0 ], [ %1, %8 ]*/
	else /* if (((cur_state == LEGUP_F_roundAndPackFloat64_BB__36_17) & (memory_controller_waitrequest == 1'd0))) */ begin
		roundAndPackFloat64_thread_roundBits0 = roundAndPackFloat64_shift64RightJammingexit_34_reg;
	end
end
always @(posedge clk) begin
	/* roundAndPackFloat64: %.thread*/
	/*   %roundBits.0 = phi i32 [ %34, %36 ], [ %1, %17 ], [ %1, %0 ], [ %1, %8 ]*/
	if ((((cur_state == LEGUP_F_roundAndPackFloat64_BB__0_1) & (memory_controller_waitrequest == 1'd0)) & (roundAndPackFloat64_0_3 == 1'd0))) begin
		roundAndPackFloat64_thread_roundBits0_reg <= roundAndPackFloat64_thread_roundBits0;
		if (start == 1'b0 && ^(roundAndPackFloat64_thread_roundBits0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_thread_roundBits0_reg"); $finish; end
	end
	/* roundAndPackFloat64: %.thread*/
	/*   %roundBits.0 = phi i32 [ %34, %36 ], [ %1, %17 ], [ %1, %0 ], [ %1, %8 ]*/
	if ((((cur_state == LEGUP_F_roundAndPackFloat64_BB__8_4) & (memory_controller_waitrequest == 1'd0)) & (roundAndPackFloat64_8_10 == 1'd0))) begin
		roundAndPackFloat64_thread_roundBits0_reg <= roundAndPackFloat64_thread_roundBits0;
		if (start == 1'b0 && ^(roundAndPackFloat64_thread_roundBits0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_thread_roundBits0_reg"); $finish; end
	end
	/* roundAndPackFloat64: %.thread*/
	/*   %roundBits.0 = phi i32 [ %34, %36 ], [ %1, %17 ], [ %1, %0 ], [ %1, %8 ]*/
	if ((((cur_state == LEGUP_F_roundAndPackFloat64_BB__17_9) & (memory_controller_waitrequest == 1'd0)) & (roundAndPackFloat64_17_18 == 1'd0))) begin
		roundAndPackFloat64_thread_roundBits0_reg <= roundAndPackFloat64_thread_roundBits0;
		if (start == 1'b0 && ^(roundAndPackFloat64_thread_roundBits0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_thread_roundBits0_reg"); $finish; end
	end
	/* roundAndPackFloat64: %.thread*/
	/*   %roundBits.0 = phi i32 [ %34, %36 ], [ %1, %17 ], [ %1, %0 ], [ %1, %8 ]*/
	if (((cur_state == LEGUP_F_roundAndPackFloat64_BB__36_17) & (memory_controller_waitrequest == 1'd0))) begin
		roundAndPackFloat64_thread_roundBits0_reg <= roundAndPackFloat64_thread_roundBits0;
		if (start == 1'b0 && ^(roundAndPackFloat64_thread_roundBits0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_thread_roundBits0_reg"); $finish; end
	end
end
always @(*) begin
	/* roundAndPackFloat64: %.thread*/
	/*   %39 = icmp eq i32 %roundBits.0, 0*/
		roundAndPackFloat64_thread_39 = (roundAndPackFloat64_thread_roundBits0_reg == 32'd0);
end
always @(posedge clk) begin
	/* roundAndPackFloat64: %.thread*/
	/*   %39 = icmp eq i32 %roundBits.0, 0*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB_thread_18)) begin
		roundAndPackFloat64_thread_39_reg <= roundAndPackFloat64_thread_39;
		if (start == 1'b0 && ^(roundAndPackFloat64_thread_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_thread_39_reg"); $finish; end
	end
end
always @(*) begin
	/* roundAndPackFloat64: %40*/
	/*   %41 = load i32* @float_exception_flags, align 4, !tbaa !1*/
		roundAndPackFloat64_40_41 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* roundAndPackFloat64: %40*/
	/*   %41 = load i32* @float_exception_flags, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB__40_21)) begin
		roundAndPackFloat64_40_41_reg <= roundAndPackFloat64_40_41;
		if (start == 1'b0 && ^(roundAndPackFloat64_40_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_40_41_reg"); $finish; end
	end
end
always @(*) begin
	/* roundAndPackFloat64: %40*/
	/*   %42 = or i32 %41, 1*/
		roundAndPackFloat64_40_42 = (roundAndPackFloat64_40_41 | 32'd1);
end
always @(posedge clk) begin
	/* roundAndPackFloat64: %40*/
	/*   %42 = or i32 %41, 1*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB__40_21)) begin
		roundAndPackFloat64_40_42_reg <= roundAndPackFloat64_40_42;
		if (start == 1'b0 && ^(roundAndPackFloat64_40_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_40_42_reg"); $finish; end
	end
end
always @(*) begin
	/* roundAndPackFloat64: %.thread6*/
	/*   %roundBits.09 = phi i32 [ 0, %.thread ], [ %roundBits.0, %40 ], [ 0, %shift64RightJamming.exit ]*/
	if ((((cur_state == LEGUP_F_roundAndPackFloat64_BB_shift64RightJammingexit_13) & (memory_controller_waitrequest == 1'd0)) & (roundAndPackFloat64_shift64RightJammingexit_35 == 1'd1))) begin
		roundAndPackFloat64_thread6_roundBits09 = 32'd0;
	end
	/* roundAndPackFloat64: %.thread6*/
	/*   %roundBits.09 = phi i32 [ 0, %.thread ], [ %roundBits.0, %40 ], [ 0, %shift64RightJamming.exit ]*/
	else if ((((cur_state == LEGUP_F_roundAndPackFloat64_BB_thread_18) & (memory_controller_waitrequest == 1'd0)) & (roundAndPackFloat64_thread_39 == 1'd1))) begin
		roundAndPackFloat64_thread6_roundBits09 = 32'd0;
	end
	/* roundAndPackFloat64: %.thread6*/
	/*   %roundBits.09 = phi i32 [ 0, %.thread ], [ %roundBits.0, %40 ], [ 0, %shift64RightJamming.exit ]*/
	else /* if (((cur_state == LEGUP_F_roundAndPackFloat64_BB__40_22) & (memory_controller_waitrequest == 1'd0))) */ begin
		roundAndPackFloat64_thread6_roundBits09 = roundAndPackFloat64_thread_roundBits0_reg;
	end
end
always @(posedge clk) begin
	/* roundAndPackFloat64: %.thread6*/
	/*   %roundBits.09 = phi i32 [ 0, %.thread ], [ %roundBits.0, %40 ], [ 0, %shift64RightJamming.exit ]*/
	if ((((cur_state == LEGUP_F_roundAndPackFloat64_BB_shift64RightJammingexit_13) & (memory_controller_waitrequest == 1'd0)) & (roundAndPackFloat64_shift64RightJammingexit_35 == 1'd1))) begin
		roundAndPackFloat64_thread6_roundBits09_reg <= roundAndPackFloat64_thread6_roundBits09;
		if (start == 1'b0 && ^(roundAndPackFloat64_thread6_roundBits09) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_thread6_roundBits09_reg"); $finish; end
	end
	/* roundAndPackFloat64: %.thread6*/
	/*   %roundBits.09 = phi i32 [ 0, %.thread ], [ %roundBits.0, %40 ], [ 0, %shift64RightJamming.exit ]*/
	if ((((cur_state == LEGUP_F_roundAndPackFloat64_BB_thread_18) & (memory_controller_waitrequest == 1'd0)) & (roundAndPackFloat64_thread_39 == 1'd1))) begin
		roundAndPackFloat64_thread6_roundBits09_reg <= roundAndPackFloat64_thread6_roundBits09;
		if (start == 1'b0 && ^(roundAndPackFloat64_thread6_roundBits09) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_thread6_roundBits09_reg"); $finish; end
	end
	/* roundAndPackFloat64: %.thread6*/
	/*   %roundBits.09 = phi i32 [ 0, %.thread ], [ %roundBits.0, %40 ], [ 0, %shift64RightJamming.exit ]*/
	if (((cur_state == LEGUP_F_roundAndPackFloat64_BB__40_22) & (memory_controller_waitrequest == 1'd0))) begin
		roundAndPackFloat64_thread6_roundBits09_reg <= roundAndPackFloat64_thread6_roundBits09;
		if (start == 1'b0 && ^(roundAndPackFloat64_thread6_roundBits09) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_thread6_roundBits09_reg"); $finish; end
	end
end
always @(*) begin
	/* roundAndPackFloat64: %.thread6*/
	/*   %.028 = phi i32 [ %.02, %.thread ], [ %.02, %40 ], [ 0, %shift64RightJamming.exit ]*/
	if ((((cur_state == LEGUP_F_roundAndPackFloat64_BB_shift64RightJammingexit_13) & (memory_controller_waitrequest == 1'd0)) & (roundAndPackFloat64_shift64RightJammingexit_35 == 1'd1))) begin
		roundAndPackFloat64_thread6_028 = 32'd0;
	end
	/* roundAndPackFloat64: %.thread6*/
	/*   %.028 = phi i32 [ %.02, %.thread ], [ %.02, %40 ], [ 0, %shift64RightJamming.exit ]*/
	else if ((((cur_state == LEGUP_F_roundAndPackFloat64_BB_thread_18) & (memory_controller_waitrequest == 1'd0)) & (roundAndPackFloat64_thread_39 == 1'd1))) begin
		roundAndPackFloat64_thread6_028 = roundAndPackFloat64_thread_02_reg;
	end
	/* roundAndPackFloat64: %.thread6*/
	/*   %.028 = phi i32 [ %.02, %.thread ], [ %.02, %40 ], [ 0, %shift64RightJamming.exit ]*/
	else /* if (((cur_state == LEGUP_F_roundAndPackFloat64_BB__40_22) & (memory_controller_waitrequest == 1'd0))) */ begin
		roundAndPackFloat64_thread6_028 = roundAndPackFloat64_thread_02_reg;
	end
end
always @(posedge clk) begin
	/* roundAndPackFloat64: %.thread6*/
	/*   %.028 = phi i32 [ %.02, %.thread ], [ %.02, %40 ], [ 0, %shift64RightJamming.exit ]*/
	if ((((cur_state == LEGUP_F_roundAndPackFloat64_BB_shift64RightJammingexit_13) & (memory_controller_waitrequest == 1'd0)) & (roundAndPackFloat64_shift64RightJammingexit_35 == 1'd1))) begin
		roundAndPackFloat64_thread6_028_reg <= roundAndPackFloat64_thread6_028;
		if (start == 1'b0 && ^(roundAndPackFloat64_thread6_028) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_thread6_028_reg"); $finish; end
	end
	/* roundAndPackFloat64: %.thread6*/
	/*   %.028 = phi i32 [ %.02, %.thread ], [ %.02, %40 ], [ 0, %shift64RightJamming.exit ]*/
	if ((((cur_state == LEGUP_F_roundAndPackFloat64_BB_thread_18) & (memory_controller_waitrequest == 1'd0)) & (roundAndPackFloat64_thread_39 == 1'd1))) begin
		roundAndPackFloat64_thread6_028_reg <= roundAndPackFloat64_thread6_028;
		if (start == 1'b0 && ^(roundAndPackFloat64_thread6_028) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_thread6_028_reg"); $finish; end
	end
	/* roundAndPackFloat64: %.thread6*/
	/*   %.028 = phi i32 [ %.02, %.thread ], [ %.02, %40 ], [ 0, %shift64RightJamming.exit ]*/
	if (((cur_state == LEGUP_F_roundAndPackFloat64_BB__40_22) & (memory_controller_waitrequest == 1'd0))) begin
		roundAndPackFloat64_thread6_028_reg <= roundAndPackFloat64_thread6_028;
		if (start == 1'b0 && ^(roundAndPackFloat64_thread6_028) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_thread6_028_reg"); $finish; end
	end
end
always @(*) begin
	/* roundAndPackFloat64: %.thread6*/
	/*   %zSig57 = phi i64 [ %zSig5, %.thread ], [ %zSig5, %40 ], [ %z.0.i, %shift64RightJamming.exit ]*/
	if ((((cur_state == LEGUP_F_roundAndPackFloat64_BB_shift64RightJammingexit_13) & (memory_controller_waitrequest == 1'd0)) & (roundAndPackFloat64_shift64RightJammingexit_35 == 1'd1))) begin
		roundAndPackFloat64_thread6_zSig57 = roundAndPackFloat64_shift64RightJammingexit_z0i_reg;
	end
	/* roundAndPackFloat64: %.thread6*/
	/*   %zSig57 = phi i64 [ %zSig5, %.thread ], [ %zSig5, %40 ], [ %z.0.i, %shift64RightJamming.exit ]*/
	else if ((((cur_state == LEGUP_F_roundAndPackFloat64_BB_thread_18) & (memory_controller_waitrequest == 1'd0)) & (roundAndPackFloat64_thread_39 == 1'd1))) begin
		roundAndPackFloat64_thread6_zSig57 = roundAndPackFloat64_thread_zSig5_reg;
	end
	/* roundAndPackFloat64: %.thread6*/
	/*   %zSig57 = phi i64 [ %zSig5, %.thread ], [ %zSig5, %40 ], [ %z.0.i, %shift64RightJamming.exit ]*/
	else /* if (((cur_state == LEGUP_F_roundAndPackFloat64_BB__40_22) & (memory_controller_waitrequest == 1'd0))) */ begin
		roundAndPackFloat64_thread6_zSig57 = roundAndPackFloat64_thread_zSig5_reg;
	end
end
always @(posedge clk) begin
	/* roundAndPackFloat64: %.thread6*/
	/*   %zSig57 = phi i64 [ %zSig5, %.thread ], [ %zSig5, %40 ], [ %z.0.i, %shift64RightJamming.exit ]*/
	if ((((cur_state == LEGUP_F_roundAndPackFloat64_BB_shift64RightJammingexit_13) & (memory_controller_waitrequest == 1'd0)) & (roundAndPackFloat64_shift64RightJammingexit_35 == 1'd1))) begin
		roundAndPackFloat64_thread6_zSig57_reg <= roundAndPackFloat64_thread6_zSig57;
		if (start == 1'b0 && ^(roundAndPackFloat64_thread6_zSig57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_thread6_zSig57_reg"); $finish; end
	end
	/* roundAndPackFloat64: %.thread6*/
	/*   %zSig57 = phi i64 [ %zSig5, %.thread ], [ %zSig5, %40 ], [ %z.0.i, %shift64RightJamming.exit ]*/
	if ((((cur_state == LEGUP_F_roundAndPackFloat64_BB_thread_18) & (memory_controller_waitrequest == 1'd0)) & (roundAndPackFloat64_thread_39 == 1'd1))) begin
		roundAndPackFloat64_thread6_zSig57_reg <= roundAndPackFloat64_thread6_zSig57;
		if (start == 1'b0 && ^(roundAndPackFloat64_thread6_zSig57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_thread6_zSig57_reg"); $finish; end
	end
	/* roundAndPackFloat64: %.thread6*/
	/*   %zSig57 = phi i64 [ %zSig5, %.thread ], [ %zSig5, %40 ], [ %z.0.i, %shift64RightJamming.exit ]*/
	if (((cur_state == LEGUP_F_roundAndPackFloat64_BB__40_22) & (memory_controller_waitrequest == 1'd0))) begin
		roundAndPackFloat64_thread6_zSig57_reg <= roundAndPackFloat64_thread6_zSig57;
		if (start == 1'b0 && ^(roundAndPackFloat64_thread6_zSig57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_thread6_zSig57_reg"); $finish; end
	end
end
always @(*) begin
	/* roundAndPackFloat64: %.thread6*/
	/*   %43 = add i64 %zSig57, 512*/
		roundAndPackFloat64_thread6_43 = roundAndPackFloat64_signed_add_64_0;
end
always @(*) begin
/* roundAndPackFloat64: %.thread6*/
/*   %43 = add i64 %zSig57, 512*/
	roundAndPackFloat64_thread6_43_reg = roundAndPackFloat64_8_9_reg;
end
always @(*) begin
	/* roundAndPackFloat64: %.thread6*/
	/*   %44 = lshr i64 %43, 10*/
		roundAndPackFloat64_thread6_44 = (roundAndPackFloat64_thread6_43 >>> (64'd10 % 64'd64));
end
always @(posedge clk) begin
	/* roundAndPackFloat64: %.thread6*/
	/*   %44 = lshr i64 %43, 10*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB_thread6_23)) begin
		roundAndPackFloat64_thread6_44_reg <= roundAndPackFloat64_thread6_44;
		if (start == 1'b0 && ^(roundAndPackFloat64_thread6_44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_thread6_44_reg"); $finish; end
	end
end
always @(*) begin
	/* roundAndPackFloat64: %.thread6*/
	/*   %45 = icmp eq i32 %roundBits.09, 512*/
		roundAndPackFloat64_thread6_45 = (roundAndPackFloat64_thread6_roundBits09_reg == 32'd512);
end
always @(posedge clk) begin
	/* roundAndPackFloat64: %.thread6*/
	/*   %45 = icmp eq i32 %roundBits.09, 512*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB_thread6_23)) begin
		roundAndPackFloat64_thread6_45_reg <= roundAndPackFloat64_thread6_45;
		if (start == 1'b0 && ^(roundAndPackFloat64_thread6_45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_thread6_45_reg"); $finish; end
	end
end
always @(*) begin
	/* roundAndPackFloat64: %.thread6*/
	/*   %46 = zext i1 %45 to i32*/
		roundAndPackFloat64_thread6_46 = roundAndPackFloat64_thread6_45;
end
always @(posedge clk) begin
	/* roundAndPackFloat64: %.thread6*/
	/*   %46 = zext i1 %45 to i32*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB_thread6_23)) begin
		roundAndPackFloat64_thread6_46_reg <= roundAndPackFloat64_thread6_46;
		if (start == 1'b0 && ^(roundAndPackFloat64_thread6_46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_thread6_46_reg"); $finish; end
	end
end
always @(*) begin
	/* roundAndPackFloat64: %.thread6*/
	/*   %47 = xor i32 %46, -1*/
		roundAndPackFloat64_thread6_47 = (roundAndPackFloat64_thread6_46 ^ -32'd1);
end
always @(posedge clk) begin
	/* roundAndPackFloat64: %.thread6*/
	/*   %47 = xor i32 %46, -1*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB_thread6_23)) begin
		roundAndPackFloat64_thread6_47_reg <= roundAndPackFloat64_thread6_47;
		if (start == 1'b0 && ^(roundAndPackFloat64_thread6_47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_thread6_47_reg"); $finish; end
	end
end
always @(*) begin
	/* roundAndPackFloat64: %.thread6*/
	/*   %48 = sext i32 %47 to i64*/
		roundAndPackFloat64_thread6_48 = $signed(roundAndPackFloat64_thread6_47);
end
always @(posedge clk) begin
	/* roundAndPackFloat64: %.thread6*/
	/*   %48 = sext i32 %47 to i64*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB_thread6_23)) begin
		roundAndPackFloat64_thread6_48_reg <= roundAndPackFloat64_thread6_48;
		if (start == 1'b0 && ^(roundAndPackFloat64_thread6_48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_thread6_48_reg"); $finish; end
	end
end
always @(*) begin
	/* roundAndPackFloat64: %.thread6*/
	/*   %49 = and i64 %44, %48*/
		roundAndPackFloat64_thread6_49 = (roundAndPackFloat64_thread6_44 & roundAndPackFloat64_thread6_48);
end
always @(posedge clk) begin
	/* roundAndPackFloat64: %.thread6*/
	/*   %49 = and i64 %44, %48*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB_thread6_23)) begin
		roundAndPackFloat64_thread6_49_reg <= roundAndPackFloat64_thread6_49;
		if (start == 1'b0 && ^(roundAndPackFloat64_thread6_49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_thread6_49_reg"); $finish; end
	end
end
always @(*) begin
	/* roundAndPackFloat64: %.thread6*/
	/*   %50 = icmp eq i64 %49, 0*/
		roundAndPackFloat64_thread6_50 = (roundAndPackFloat64_thread6_49 == 64'd0);
end
always @(posedge clk) begin
	/* roundAndPackFloat64: %.thread6*/
	/*   %50 = icmp eq i64 %49, 0*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB_thread6_23)) begin
		roundAndPackFloat64_thread6_50_reg <= roundAndPackFloat64_thread6_50;
		if (start == 1'b0 && ^(roundAndPackFloat64_thread6_50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_thread6_50_reg"); $finish; end
	end
end
always @(*) begin
	/* roundAndPackFloat64: %.thread6*/
	/*   %51 = zext i32 %zSign to i64*/
		roundAndPackFloat64_thread6_51 = arg_zSign;
end
always @(posedge clk) begin
	/* roundAndPackFloat64: %.thread6*/
	/*   %51 = zext i32 %zSign to i64*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB_thread6_23)) begin
		roundAndPackFloat64_thread6_51_reg <= roundAndPackFloat64_thread6_51;
		if (start == 1'b0 && ^(roundAndPackFloat64_thread6_51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_thread6_51_reg"); $finish; end
	end
end
always @(*) begin
	/* roundAndPackFloat64: %.thread6*/
	/*   %52 = shl i64 %51, 63*/
		roundAndPackFloat64_thread6_52 = (roundAndPackFloat64_thread6_51 <<< (64'd63 % 64'd64));
end
always @(posedge clk) begin
	/* roundAndPackFloat64: %.thread6*/
	/*   %52 = shl i64 %51, 63*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB_thread6_23)) begin
		roundAndPackFloat64_thread6_52_reg <= roundAndPackFloat64_thread6_52;
		if (start == 1'b0 && ^(roundAndPackFloat64_thread6_52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_thread6_52_reg"); $finish; end
	end
end
always @(*) begin
	/* roundAndPackFloat64: %.thread6*/
	/*   %53 = zext i32 %.028 to i64*/
		roundAndPackFloat64_thread6_53 = roundAndPackFloat64_thread6_028_reg;
end
always @(posedge clk) begin
	/* roundAndPackFloat64: %.thread6*/
	/*   %53 = zext i32 %.028 to i64*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB_thread6_23)) begin
		roundAndPackFloat64_thread6_53_reg <= roundAndPackFloat64_thread6_53;
		if (start == 1'b0 && ^(roundAndPackFloat64_thread6_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_thread6_53_reg"); $finish; end
	end
end
always @(*) begin
	/* roundAndPackFloat64: %.thread6*/
	/*   %.op = shl i64 %53, 52*/
		roundAndPackFloat64_thread6_op = (roundAndPackFloat64_thread6_53 <<< (64'd52 % 64'd64));
end
always @(posedge clk) begin
	/* roundAndPackFloat64: %.thread6*/
	/*   %.op = shl i64 %53, 52*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB_thread6_23)) begin
		roundAndPackFloat64_thread6_op_reg <= roundAndPackFloat64_thread6_op;
		if (start == 1'b0 && ^(roundAndPackFloat64_thread6_op) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_thread6_op_reg"); $finish; end
	end
end
always @(*) begin
	/* roundAndPackFloat64: %.thread6*/
	/*   %54 = select i1 %50, i64 0, i64 %.op*/
		roundAndPackFloat64_thread6_54 = (roundAndPackFloat64_thread6_50 ? 64'd0 : roundAndPackFloat64_thread6_op);
end
always @(posedge clk) begin
	/* roundAndPackFloat64: %.thread6*/
	/*   %54 = select i1 %50, i64 0, i64 %.op*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB_thread6_23)) begin
		roundAndPackFloat64_thread6_54_reg <= roundAndPackFloat64_thread6_54;
		if (start == 1'b0 && ^(roundAndPackFloat64_thread6_54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_thread6_54_reg"); $finish; end
	end
end
always @(*) begin
	/* roundAndPackFloat64: %.thread6*/
	/*   %55 = or i64 %49, %52*/
		roundAndPackFloat64_thread6_55 = (roundAndPackFloat64_thread6_49 | roundAndPackFloat64_thread6_52);
end
always @(posedge clk) begin
	/* roundAndPackFloat64: %.thread6*/
	/*   %55 = or i64 %49, %52*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB_thread6_23)) begin
		roundAndPackFloat64_thread6_55_reg <= roundAndPackFloat64_thread6_55;
		if (start == 1'b0 && ^(roundAndPackFloat64_thread6_55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_thread6_55_reg"); $finish; end
	end
end
always @(*) begin
	/* roundAndPackFloat64: %.thread6*/
	/*   %56 = add i64 %54, %55*/
		roundAndPackFloat64_thread6_56 = roundAndPackFloat64_signed_add_64_1;
end
always @(posedge clk) begin
	/* roundAndPackFloat64: %.thread6*/
	/*   %56 = add i64 %54, %55*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB_thread6_23)) begin
		roundAndPackFloat64_thread6_56_reg <= roundAndPackFloat64_thread6_56;
		if (start == 1'b0 && ^(roundAndPackFloat64_thread6_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_thread6_56_reg"); $finish; end
	end
end
always @(*) begin
	/* roundAndPackFloat64: %57*/
	/*   %.0 = phi i64 [ %16, %11 ], [ %56, %.thread6 ]*/
	if (((cur_state == LEGUP_F_roundAndPackFloat64_BB__11_8) & (memory_controller_waitrequest == 1'd0))) begin
		roundAndPackFloat64_57_0 = roundAndPackFloat64_11_16_reg;
	end
	/* roundAndPackFloat64: %57*/
	/*   %.0 = phi i64 [ %16, %11 ], [ %56, %.thread6 ]*/
	else /* if (((cur_state == LEGUP_F_roundAndPackFloat64_BB_thread6_23) & (memory_controller_waitrequest == 1'd0))) */ begin
		roundAndPackFloat64_57_0 = roundAndPackFloat64_thread6_56;
	end
end
always @(posedge clk) begin
	/* roundAndPackFloat64: %57*/
	/*   %.0 = phi i64 [ %16, %11 ], [ %56, %.thread6 ]*/
	if (((cur_state == LEGUP_F_roundAndPackFloat64_BB__11_8) & (memory_controller_waitrequest == 1'd0))) begin
		roundAndPackFloat64_57_0_reg <= roundAndPackFloat64_57_0;
		if (start == 1'b0 && ^(roundAndPackFloat64_57_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_57_0_reg"); $finish; end
	end
	/* roundAndPackFloat64: %57*/
	/*   %.0 = phi i64 [ %16, %11 ], [ %56, %.thread6 ]*/
	if (((cur_state == LEGUP_F_roundAndPackFloat64_BB_thread6_23) & (memory_controller_waitrequest == 1'd0))) begin
		roundAndPackFloat64_57_0_reg <= roundAndPackFloat64_57_0;
		if (start == 1'b0 && ^(roundAndPackFloat64_57_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_57_0_reg"); $finish; end
	end
end
always @(*) begin
	/* roundAndPackFloat64: %8*/
	/*   %9 = add i64 512, %zSig*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB__8_4)) begin
		roundAndPackFloat64_signed_add_64_0_op0 = 64'd512;
	end
	/* roundAndPackFloat64: %.thread6*/
	/*   %43 = add i64 %zSig57, 512*/
	else /* if ((cur_state == LEGUP_F_roundAndPackFloat64_BB_thread6_23)) */ begin
		roundAndPackFloat64_signed_add_64_0_op0 = roundAndPackFloat64_thread6_zSig57_reg;
	end
end
always @(*) begin
	/* roundAndPackFloat64: %8*/
	/*   %9 = add i64 512, %zSig*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB__8_4)) begin
		roundAndPackFloat64_signed_add_64_0_op1 = arg_zSig;
	end
	/* roundAndPackFloat64: %.thread6*/
	/*   %43 = add i64 %zSig57, 512*/
	else /* if ((cur_state == LEGUP_F_roundAndPackFloat64_BB_thread6_23)) */ begin
		roundAndPackFloat64_signed_add_64_0_op1 = 64'd512;
	end
end
always @(*) begin
	roundAndPackFloat64_signed_add_64_0 = (roundAndPackFloat64_signed_add_64_0_op0 + roundAndPackFloat64_signed_add_64_0_op1);
end
always @(*) begin
	/* roundAndPackFloat64: %21*/
	/*   %22 = sub nsw i32 0, %zExp*/
if (reset) begin roundAndPackFloat64_signed_subtract_32_0_op0 = 0; end
		roundAndPackFloat64_signed_subtract_32_0_op0 = 32'd0;
end
always @(*) begin
	/* roundAndPackFloat64: %21*/
	/*   %22 = sub nsw i32 0, %zExp*/
		roundAndPackFloat64_signed_subtract_32_0_op1 = arg_zExp;
end
always @(*) begin
	roundAndPackFloat64_signed_subtract_32_0 = (roundAndPackFloat64_signed_subtract_32_0_op0 - roundAndPackFloat64_signed_subtract_32_0_op1);
end
always @(*) begin
	/* roundAndPackFloat64: %.thread6*/
	/*   %56 = add i64 %54, %55*/
		roundAndPackFloat64_signed_add_64_1_op0 = roundAndPackFloat64_thread6_54;
end
always @(*) begin
	/* roundAndPackFloat64: %.thread6*/
	/*   %56 = add i64 %54, %55*/
		roundAndPackFloat64_signed_add_64_1_op1 = roundAndPackFloat64_thread6_55;
end
always @(*) begin
	roundAndPackFloat64_signed_add_64_1 = (roundAndPackFloat64_signed_add_64_1_op0 + roundAndPackFloat64_signed_add_64_1_op1);
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		finish <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
	/* roundAndPackFloat64: %57*/
	/*   ret i64 %.0*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB__57_24)) begin
		finish <= (memory_controller_waitrequest == 1'd0);
		if (start == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
end
always @(*) begin
	memory_controller_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_a = 1'd0;
	end
	/* roundAndPackFloat64: %11*/
	/*   %12 = load i32* @float_exception_flags, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB__11_5)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* roundAndPackFloat64: %11*/
	/*   store i32 %13, i32* @float_exception_flags, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB__11_7)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* roundAndPackFloat64: %36*/
	/*   %37 = load i32* @float_exception_flags, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB__36_14)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* roundAndPackFloat64: %36*/
	/*   store i32 %38, i32* @float_exception_flags, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB__36_16)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* roundAndPackFloat64: %40*/
	/*   %41 = load i32* @float_exception_flags, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB__40_19)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* roundAndPackFloat64: %40*/
	/*   store i32 %42, i32* @float_exception_flags, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB__40_21)) begin
		memory_controller_enable_a = 1'd1;
	end
end
always @(*) begin
	memory_controller_address_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_a = 1'd0;
	end
	/* roundAndPackFloat64: %11*/
	/*   %12 = load i32* @float_exception_flags, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB__11_5)) begin
		memory_controller_address_a = `TAG_g_float_exception_flags_a;
	end
	/* roundAndPackFloat64: %11*/
	/*   store i32 %13, i32* @float_exception_flags, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB__11_7)) begin
		memory_controller_address_a = `TAG_g_float_exception_flags_a;
	end
	/* roundAndPackFloat64: %36*/
	/*   %37 = load i32* @float_exception_flags, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB__36_14)) begin
		memory_controller_address_a = `TAG_g_float_exception_flags_a;
	end
	/* roundAndPackFloat64: %36*/
	/*   store i32 %38, i32* @float_exception_flags, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB__36_16)) begin
		memory_controller_address_a = `TAG_g_float_exception_flags_a;
	end
	/* roundAndPackFloat64: %40*/
	/*   %41 = load i32* @float_exception_flags, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB__40_19)) begin
		memory_controller_address_a = `TAG_g_float_exception_flags_a;
	end
	/* roundAndPackFloat64: %40*/
	/*   store i32 %42, i32* @float_exception_flags, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB__40_21)) begin
		memory_controller_address_a = `TAG_g_float_exception_flags_a;
	end
end
always @(*) begin
	memory_controller_write_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* roundAndPackFloat64: %11*/
	/*   %12 = load i32* @float_exception_flags, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB__11_5)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* roundAndPackFloat64: %11*/
	/*   store i32 %13, i32* @float_exception_flags, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB__11_7)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* roundAndPackFloat64: %36*/
	/*   %37 = load i32* @float_exception_flags, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB__36_14)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* roundAndPackFloat64: %36*/
	/*   store i32 %38, i32* @float_exception_flags, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB__36_16)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* roundAndPackFloat64: %40*/
	/*   %41 = load i32* @float_exception_flags, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB__40_19)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* roundAndPackFloat64: %40*/
	/*   store i32 %42, i32* @float_exception_flags, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB__40_21)) begin
		memory_controller_write_enable_a = 1'd1;
	end
end
always @(*) begin
	memory_controller_in_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_a = 1'd0;
	end
	/* roundAndPackFloat64: %11*/
	/*   store i32 %13, i32* @float_exception_flags, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB__11_7)) begin
		memory_controller_in_a = roundAndPackFloat64_11_13;
	end
	/* roundAndPackFloat64: %36*/
	/*   store i32 %38, i32* @float_exception_flags, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB__36_16)) begin
		memory_controller_in_a = roundAndPackFloat64_36_38;
	end
	/* roundAndPackFloat64: %40*/
	/*   store i32 %42, i32* @float_exception_flags, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB__40_21)) begin
		memory_controller_in_a = roundAndPackFloat64_40_42;
	end
end
always @(*) begin
	memory_controller_size_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_a = 1'd0;
	end
	/* roundAndPackFloat64: %11*/
	/*   %12 = load i32* @float_exception_flags, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB__11_5)) begin
		memory_controller_size_a = 2'd2;
	end
	/* roundAndPackFloat64: %11*/
	/*   store i32 %13, i32* @float_exception_flags, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB__11_7)) begin
		memory_controller_size_a = 2'd2;
	end
	/* roundAndPackFloat64: %36*/
	/*   %37 = load i32* @float_exception_flags, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB__36_14)) begin
		memory_controller_size_a = 2'd2;
	end
	/* roundAndPackFloat64: %36*/
	/*   store i32 %38, i32* @float_exception_flags, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB__36_16)) begin
		memory_controller_size_a = 2'd2;
	end
	/* roundAndPackFloat64: %40*/
	/*   %41 = load i32* @float_exception_flags, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB__40_19)) begin
		memory_controller_size_a = 2'd2;
	end
	/* roundAndPackFloat64: %40*/
	/*   store i32 %42, i32* @float_exception_flags, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB__40_21)) begin
		memory_controller_size_a = 2'd2;
	end
end
always @(*) begin
	memory_controller_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_address_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_write_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_size_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_b = 1'd0;
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		return_val <= 64'd0;
		if (start == 1'b0 && ^(64'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
	/* roundAndPackFloat64: %57*/
	/*   ret i64 %.0*/
	if ((cur_state == LEGUP_F_roundAndPackFloat64_BB__57_24)) begin
		return_val <= roundAndPackFloat64_57_0_reg;
		if (start == 1'b0 && ^(roundAndPackFloat64_57_0_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
end

endmodule 
`timescale 1 ns / 1 ns
module main
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_waitrequest,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	return_val
);

parameter [7:0] LEGUP_0 = 8'd0;
parameter [7:0] LEGUP_F_main_BB__1_1 = 8'd1;
parameter [7:0] LEGUP_F_main_BB__1_2 = 8'd2;
parameter [7:0] LEGUP_F_main_BB__1_3 = 8'd3;
parameter [7:0] LEGUP_F_main_BB__16_4 = 8'd4;
parameter [7:0] LEGUP_F_main_BB__22_5 = 8'd5;
parameter [7:0] LEGUP_F_main_BB__24_6 = 8'd6;
parameter [7:0] LEGUP_F_main_BB__26_7 = 8'd7;
parameter [7:0] LEGUP_F_main_BB__29_8 = 8'd8;
parameter [7:0] LEGUP_F_main_BB_float64_is_signaling_nanexit1i10ii_9 = 8'd9;
parameter [7:0] LEGUP_F_main_BB__37_10 = 8'd10;
parameter [7:0] LEGUP_F_main_BB_float64_is_signaling_nanexiti11ii_11 = 8'd11;
parameter [7:0] LEGUP_F_main_BB_threadi12ii_12 = 8'd12;
parameter [7:0] LEGUP_F_main_BB_threadi12ii_13 = 8'd13;
parameter [7:0] LEGUP_F_main_BB_threadi12ii_14 = 8'd14;
parameter [7:0] LEGUP_F_main_BB_threadi12ii_15 = 8'd15;
parameter [7:0] LEGUP_F_main_BB_propagateFloat64NaNexit16ii_16 = 8'd16;
parameter [7:0] LEGUP_F_main_BB__44_17 = 8'd17;
parameter [7:0] LEGUP_F_main_BB__50_18 = 8'd18;
parameter [7:0] LEGUP_F_main_BB__52_19 = 8'd19;
parameter [7:0] LEGUP_F_main_BB__62_20 = 8'd20;
parameter [7:0] LEGUP_F_main_BB__65_21 = 8'd21;
parameter [7:0] LEGUP_F_main_BB__67_22 = 8'd22;
parameter [7:0] LEGUP_F_main_BB__69_23 = 8'd23;
parameter [7:0] LEGUP_F_main_BB__71_24 = 8'd24;
parameter [7:0] LEGUP_F_main_BB__74_25 = 8'd25;
parameter [7:0] LEGUP_F_main_BB_float64_is_signaling_nanexit1i1ii_26 = 8'd26;
parameter [7:0] LEGUP_F_main_BB__82_27 = 8'd27;
parameter [7:0] LEGUP_F_main_BB_float64_is_signaling_nanexiti2ii_28 = 8'd28;
parameter [7:0] LEGUP_F_main_BB_threadi3ii_29 = 8'd29;
parameter [7:0] LEGUP_F_main_BB_threadi3ii_30 = 8'd30;
parameter [7:0] LEGUP_F_main_BB_threadi3ii_31 = 8'd31;
parameter [7:0] LEGUP_F_main_BB_threadi3ii_32 = 8'd32;
parameter [7:0] LEGUP_F_main_BB_propagateFloat64NaNexit7ii_33 = 8'd33;
parameter [7:0] LEGUP_F_main_BB__89_34 = 8'd34;
parameter [7:0] LEGUP_F_main_BB__92_35 = 8'd35;
parameter [7:0] LEGUP_F_main_BB__99_36 = 8'd36;
parameter [7:0] LEGUP_F_main_BB__101_37 = 8'd37;
parameter [7:0] LEGUP_F_main_BB__110_38 = 8'd38;
parameter [7:0] LEGUP_F_main_BB__113_39 = 8'd39;
parameter [7:0] LEGUP_F_main_BB__114_40 = 8'd40;
parameter [7:0] LEGUP_F_main_BB__117_41 = 8'd41;
parameter [7:0] LEGUP_F_main_BB__120_42 = 8'd42;
parameter [7:0] LEGUP_F_main_BB_float64_is_signaling_nanexit1ii4i_43 = 8'd43;
parameter [7:0] LEGUP_F_main_BB__128_44 = 8'd44;
parameter [7:0] LEGUP_F_main_BB_float64_is_signaling_nanexitii5i_45 = 8'd45;
parameter [7:0] LEGUP_F_main_BB_threadii6i_46 = 8'd46;
parameter [7:0] LEGUP_F_main_BB_threadii6i_47 = 8'd47;
parameter [7:0] LEGUP_F_main_BB_threadii6i_48 = 8'd48;
parameter [7:0] LEGUP_F_main_BB_threadii6i_49 = 8'd49;
parameter [7:0] LEGUP_F_main_BB_propagateFloat64NaNexiti10i_50 = 8'd50;
parameter [7:0] LEGUP_F_main_BB__135_51 = 8'd51;
parameter [7:0] LEGUP_F_main_BB__140_52 = 8'd52;
parameter [7:0] LEGUP_F_main_BB_shift64RightJammingexit9ii_53 = 8'd53;
parameter [7:0] LEGUP_F_main_BB_shift64RightJammingexit9ii_54 = 8'd54;
parameter [7:0] LEGUP_F_main_BB_shift64RightJammingexit9ii_55 = 8'd55;
parameter [7:0] LEGUP_F_main_BB__150_56 = 8'd56;
parameter [7:0] LEGUP_F_main_BB__150_58 = 8'd58;
parameter [7:0] LEGUP_F_main_BB__152_59 = 8'd59;
parameter [7:0] LEGUP_F_main_BB__158_60 = 8'd60;
parameter [7:0] LEGUP_F_main_BB__160_61 = 8'd61;
parameter [7:0] LEGUP_F_main_BB__161_62 = 8'd62;
parameter [7:0] LEGUP_F_main_BB__164_63 = 8'd63;
parameter [7:0] LEGUP_F_main_BB__167_64 = 8'd64;
parameter [7:0] LEGUP_F_main_BB_float64_is_signaling_nanexit1i11ii_65 = 8'd65;
parameter [7:0] LEGUP_F_main_BB__175_66 = 8'd66;
parameter [7:0] LEGUP_F_main_BB_float64_is_signaling_nanexiti12ii_67 = 8'd67;
parameter [7:0] LEGUP_F_main_BB_threadi13ii_68 = 8'd68;
parameter [7:0] LEGUP_F_main_BB_threadi13ii_69 = 8'd69;
parameter [7:0] LEGUP_F_main_BB_threadi13ii_70 = 8'd70;
parameter [7:0] LEGUP_F_main_BB_threadi13ii_71 = 8'd71;
parameter [7:0] LEGUP_F_main_BB_propagateFloat64NaNexit17ii_72 = 8'd72;
parameter [7:0] LEGUP_F_main_BB__182_73 = 8'd73;
parameter [7:0] LEGUP_F_main_BB__182_74 = 8'd74;
parameter [7:0] LEGUP_F_main_BB__182_75 = 8'd75;
parameter [7:0] LEGUP_F_main_BB__182_76 = 8'd76;
parameter [7:0] LEGUP_F_main_BB__185_77 = 8'd77;
parameter [7:0] LEGUP_F_main_BB__186_78 = 8'd78;
parameter [7:0] LEGUP_F_main_BB__188_79 = 8'd79;
parameter [7:0] LEGUP_F_main_BB__190_80 = 8'd80;
parameter [7:0] LEGUP_F_main_BB__192_81 = 8'd81;
parameter [7:0] LEGUP_F_main_BB__194_82 = 8'd82;
parameter [7:0] LEGUP_F_main_BB__197_83 = 8'd83;
parameter [7:0] LEGUP_F_main_BB_float64_is_signaling_nanexit1i4ii_84 = 8'd84;
parameter [7:0] LEGUP_F_main_BB__205_85 = 8'd85;
parameter [7:0] LEGUP_F_main_BB_float64_is_signaling_nanexiti5ii_86 = 8'd86;
parameter [7:0] LEGUP_F_main_BB_threadi6ii_87 = 8'd87;
parameter [7:0] LEGUP_F_main_BB_threadi6ii_88 = 8'd88;
parameter [7:0] LEGUP_F_main_BB_threadi6ii_89 = 8'd89;
parameter [7:0] LEGUP_F_main_BB_threadi6ii_90 = 8'd90;
parameter [7:0] LEGUP_F_main_BB_propagateFloat64NaNexit10ii_91 = 8'd91;
parameter [7:0] LEGUP_F_main_BB__212_92 = 8'd92;
parameter [7:0] LEGUP_F_main_BB__217_93 = 8'd93;
parameter [7:0] LEGUP_F_main_BB__224_94 = 8'd94;
parameter [7:0] LEGUP_F_main_BB__226_95 = 8'd95;
parameter [7:0] LEGUP_F_main_BB__235_96 = 8'd96;
parameter [7:0] LEGUP_F_main_BB_shift64RightJammingexit3ii_97 = 8'd97;
parameter [7:0] LEGUP_F_main_BB__239_98 = 8'd98;
parameter [7:0] LEGUP_F_main_BB__244_99 = 8'd99;
parameter [7:0] LEGUP_F_main_BB__246_100 = 8'd100;
parameter [7:0] LEGUP_F_main_BB__248_101 = 8'd101;
parameter [7:0] LEGUP_F_main_BB__251_102 = 8'd102;
parameter [7:0] LEGUP_F_main_BB_float64_is_signaling_nanexit1iii_103 = 8'd103;
parameter [7:0] LEGUP_F_main_BB__259_104 = 8'd104;
parameter [7:0] LEGUP_F_main_BB_float64_is_signaling_nanexitiii_105 = 8'd105;
parameter [7:0] LEGUP_F_main_BB_threadiii_106 = 8'd106;
parameter [7:0] LEGUP_F_main_BB_threadiii_107 = 8'd107;
parameter [7:0] LEGUP_F_main_BB_threadiii_108 = 8'd108;
parameter [7:0] LEGUP_F_main_BB_threadiii_109 = 8'd109;
parameter [7:0] LEGUP_F_main_BB_propagateFloat64NaNexitii_110 = 8'd110;
parameter [7:0] LEGUP_F_main_BB__266_111 = 8'd111;
parameter [7:0] LEGUP_F_main_BB__272_112 = 8'd112;
parameter [7:0] LEGUP_F_main_BB__274_113 = 8'd113;
parameter [7:0] LEGUP_F_main_BB__284_114 = 8'd114;
parameter [7:0] LEGUP_F_main_BB_shift64RightJammingexitii_115 = 8'd115;
parameter [7:0] LEGUP_F_main_BB__288_116 = 8'd116;
parameter [7:0] LEGUP_F_main_BB__292_117 = 8'd117;
parameter [7:0] LEGUP_F_main_BB__299_118 = 8'd118;
parameter [7:0] LEGUP_F_main_BB_normalizeRoundAndPackFloat64exitii_119 = 8'd119;
parameter [7:0] LEGUP_F_main_BB_normalizeRoundAndPackFloat64exitii_120 = 8'd120;
parameter [7:0] LEGUP_F_main_BB_normalizeRoundAndPackFloat64exitii_121 = 8'd121;
parameter [7:0] LEGUP_F_main_BB_normalizeRoundAndPackFloat64exitii_123 = 8'd123;
parameter [7:0] LEGUP_F_main_BB_float64_addexit_124 = 8'd124;
parameter [7:0] LEGUP_F_main_BB_float64_addexit_125 = 8'd125;
parameter [7:0] LEGUP_F_main_BB_float64_addexit_126 = 8'd126;
parameter [7:0] LEGUP_F_main_BB__319_127 = 8'd127;
parameter [7:0] LEGUP_F_main_BB__322_128 = 8'd128;
parameter [7:0] LEGUP_F_main_BB__324_129 = 8'd129;
parameter [7:0] LEGUP_F_main_BB__326_130 = 8'd130;
parameter [8:0] tag_offset = 9'd0;
parameter [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tag_addr_offset = {tag_offset, 23'd0};
parameter [7:0] LEGUP_function_call_57 = 8'd57;
parameter [7:0] LEGUP_function_call_122 = 8'd122;

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
input  memory_controller_waitrequest;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
output reg [31:0] return_val;
reg [7:0] cur_state;
reg [7:0] next_state;
reg [31:0] main_1_main_result02;
reg [31:0] main_1_main_result02_reg;
reg [31:0] main_1_i01;
reg [31:0] main_1_i01_reg;
reg [31:0] main_1_gep_int;
reg [31:0] main_1_gep_int_reg;
reg [31:0] main_1_gep_array;
reg [31:0] main_1_gep_array_reg;
reg [31:0] main_1_gep;
reg [31:0] main_1_gep_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_2;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_2_reg;
reg [63:0] main_1_3;
reg [63:0] main_1_3_reg;
reg [31:0] main_1_gep_int1;
reg [31:0] main_1_gep_int1_reg;
reg [31:0] main_1_gep_array2;
reg [31:0] main_1_gep_array2_reg;
reg [31:0] main_1_gep3;
reg [31:0] main_1_gep3_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_4;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_4_reg;
reg [63:0] main_1_5;
reg [63:0] main_1_5_reg;
reg [63:0] main_1_6;
reg [63:0] main_1_6_reg;
reg [31:0] main_1_7;
reg [31:0] main_1_7_reg;
reg [63:0] main_1_8;
reg [63:0] main_1_8_reg;
reg [31:0] main_1_9;
reg [31:0] main_1_9_reg;
reg  main_1_10;
reg  main_1_10_reg;
reg [63:0] main_1_11;
reg [63:0] main_1_11_reg;
reg [31:0] main_1_trii1i;
reg [31:0] main_1_trii1i_reg;
reg [31:0] main_1_12;
reg [31:0] main_1_12_reg;
reg [63:0] main_1_13;
reg [63:0] main_1_13_reg;
reg [31:0] main_1_tri17ii;
reg [31:0] main_1_tri17ii_reg;
reg [31:0] main_1_14;
reg [31:0] main_1_14_reg;
reg [31:0] main_1_15;
reg [31:0] main_1_15_reg;
reg [63:0] main_16_17;
reg [63:0] main_16_17_reg;
reg [63:0] main_16_18;
reg [63:0] main_16_18_reg;
reg [63:0] main_16_19;
reg [63:0] main_16_19_reg;
reg [63:0] main_16_20;
reg [63:0] main_16_20_reg;
reg  main_16_21;
reg  main_16_21_reg;
reg  main_22_23;
reg  main_22_23_reg;
reg  main_24_25;
reg  main_24_25_reg;
reg [63:0] main_26_27;
reg [63:0] main_26_27_reg;
reg  main_26_28;
reg  main_26_28_reg;
reg [63:0] main_29_30;
reg [63:0] main_29_30_reg;
reg  main_29_31;
reg  main_29_31_reg;
reg  main_float64_is_signaling_nanexit1i10ii_32;
reg  main_float64_is_signaling_nanexit1i10ii_32_reg;
reg [62:0] main_float64_is_signaling_nanexit1i10ii_33;
reg [62:0] main_float64_is_signaling_nanexit1i10ii_33_reg;
reg  main_float64_is_signaling_nanexit1i10ii_34;
reg  main_float64_is_signaling_nanexit1i10ii_34_reg;
reg [63:0] main_float64_is_signaling_nanexit1i10ii_35;
reg [63:0] main_float64_is_signaling_nanexit1i10ii_35_reg;
reg  main_float64_is_signaling_nanexit1i10ii_36;
reg  main_float64_is_signaling_nanexit1i10ii_36_reg;
reg [63:0] main_37_38;
reg [63:0] main_37_38_reg;
reg  main_37_39;
reg  main_37_39_reg;
reg  main_float64_is_signaling_nanexiti11ii_40;
reg  main_float64_is_signaling_nanexiti11ii_40_reg;
reg  main_float64_is_signaling_nanexiti11ii_41;
reg  main_float64_is_signaling_nanexiti11ii_41_reg;
reg [31:0] main_threadi12ii_42;
reg [31:0] main_threadi12ii_42_reg;
reg [31:0] main_threadi12ii_43;
reg [31:0] main_threadi12ii_43_reg;
reg  main_propagateFloat64NaNexit16ii_sinki13ii;
reg  main_propagateFloat64NaNexit16ii_sinki13ii_reg;
reg [63:0] main_propagateFloat64NaNexit16ii_mux2vi14ii;
reg [63:0] main_propagateFloat64NaNexit16ii_mux2vi14ii_reg;
reg [63:0] main_propagateFloat64NaNexit16ii_mux2i15ii;
reg [63:0] main_propagateFloat64NaNexit16ii_mux2i15ii_reg;
reg  main_44_45;
reg  main_44_45_reg;
reg [63:0] main_44_46;
reg [63:0] main_44_46_reg;
reg [63:0] main_44_47;
reg [63:0] main_44_47_reg;
reg [31:0] main_44_48;
reg [31:0] main_44_48_reg;
reg [31:0] main_44_expDiff0i2i;
reg [31:0] main_44_expDiff0i2i_reg;
reg  main_44_49;
reg  main_44_49_reg;
reg  main_50_51;
reg  main_50_51_reg;
reg [63:0] main_52_53;
reg [63:0] main_52_53_reg;
reg [63:0] main_52_54;
reg [63:0] main_52_54_reg;
reg [31:0] main_52_55;
reg [31:0] main_52_55_reg;
reg [31:0] main_52_56;
reg [31:0] main_52_56_reg;
reg [63:0] main_52_57;
reg [63:0] main_52_57_reg;
reg [63:0] main_52_58;
reg [63:0] main_52_58_reg;
reg  main_52_59;
reg  main_52_59_reg;
reg [63:0] main_52_60;
reg [63:0] main_52_60_reg;
reg [63:0] main_52_61;
reg [63:0] main_52_61_reg;
reg  main_62_63;
reg  main_62_63_reg;
reg [63:0] main_62_64;
reg [63:0] main_62_64_reg;
reg  main_65_66;
reg  main_65_66_reg;
reg  main_67_68;
reg  main_67_68_reg;
reg  main_69_70;
reg  main_69_70_reg;
reg [63:0] main_71_72;
reg [63:0] main_71_72_reg;
reg  main_71_73;
reg  main_71_73_reg;
reg [63:0] main_74_75;
reg [63:0] main_74_75_reg;
reg  main_74_76;
reg  main_74_76_reg;
reg  main_float64_is_signaling_nanexit1i1ii_77;
reg  main_float64_is_signaling_nanexit1i1ii_77_reg;
reg [62:0] main_float64_is_signaling_nanexit1i1ii_78;
reg [62:0] main_float64_is_signaling_nanexit1i1ii_78_reg;
reg  main_float64_is_signaling_nanexit1i1ii_79;
reg  main_float64_is_signaling_nanexit1i1ii_79_reg;
reg [63:0] main_float64_is_signaling_nanexit1i1ii_80;
reg [63:0] main_float64_is_signaling_nanexit1i1ii_80_reg;
reg  main_float64_is_signaling_nanexit1i1ii_81;
reg  main_float64_is_signaling_nanexit1i1ii_81_reg;
reg [63:0] main_82_83;
reg [63:0] main_82_83_reg;
reg  main_82_84;
reg  main_82_84_reg;
reg  main_float64_is_signaling_nanexiti2ii_85;
reg  main_float64_is_signaling_nanexiti2ii_85_reg;
reg  main_float64_is_signaling_nanexiti2ii_86;
reg  main_float64_is_signaling_nanexiti2ii_86_reg;
reg [31:0] main_threadi3ii_87;
reg [31:0] main_threadi3ii_87_reg;
reg [31:0] main_threadi3ii_88;
reg [31:0] main_threadi3ii_88_reg;
reg  main_propagateFloat64NaNexit7ii_sinki4ii;
reg  main_propagateFloat64NaNexit7ii_sinki4ii_reg;
reg [63:0] main_propagateFloat64NaNexit7ii_mux2vi5ii;
reg [63:0] main_propagateFloat64NaNexit7ii_mux2vi5ii_reg;
reg [63:0] main_propagateFloat64NaNexit7ii_mux2i6ii;
reg [63:0] main_propagateFloat64NaNexit7ii_mux2i6ii_reg;
reg [63:0] main_89_90;
reg [63:0] main_89_90_reg;
reg [63:0] main_89_91;
reg [63:0] main_89_91_reg;
reg  main_92_93;
reg  main_92_93_reg;
reg [63:0] main_92_94;
reg [63:0] main_92_94_reg;
reg [63:0] main_92_95;
reg [63:0] main_92_95_reg;
reg [31:0] main_92_96;
reg [31:0] main_92_96_reg;
reg [31:0] main_92_expDiff1i3i;
reg [31:0] main_92_expDiff1i3i_reg;
reg [31:0] main_92_97;
reg [31:0] main_92_97_reg;
reg  main_92_98;
reg  main_92_98_reg;
reg  main_99_100;
reg  main_99_100_reg;
reg [63:0] main_101_102;
reg [63:0] main_101_102_reg;
reg [63:0] main_101_103;
reg [63:0] main_101_103_reg;
reg [31:0] main_101_104;
reg [31:0] main_101_104_reg;
reg [63:0] main_101_105;
reg [63:0] main_101_105_reg;
reg [63:0] main_101_106;
reg [63:0] main_101_106_reg;
reg  main_101_107;
reg  main_101_107_reg;
reg [63:0] main_101_108;
reg [63:0] main_101_108_reg;
reg [63:0] main_101_109;
reg [63:0] main_101_109_reg;
reg  main_110_111;
reg  main_110_111_reg;
reg [63:0] main_110_112;
reg [63:0] main_110_112_reg;
reg [63:0] main_114_115;
reg [63:0] main_114_115_reg;
reg  main_114_116;
reg  main_114_116_reg;
reg [63:0] main_117_118;
reg [63:0] main_117_118_reg;
reg  main_117_119;
reg  main_117_119_reg;
reg [63:0] main_120_121;
reg [63:0] main_120_121_reg;
reg  main_120_122;
reg  main_120_122_reg;
reg  main_float64_is_signaling_nanexit1ii4i_123;
reg  main_float64_is_signaling_nanexit1ii4i_123_reg;
reg [62:0] main_float64_is_signaling_nanexit1ii4i_124;
reg [62:0] main_float64_is_signaling_nanexit1ii4i_124_reg;
reg  main_float64_is_signaling_nanexit1ii4i_125;
reg  main_float64_is_signaling_nanexit1ii4i_125_reg;
reg [63:0] main_float64_is_signaling_nanexit1ii4i_126;
reg [63:0] main_float64_is_signaling_nanexit1ii4i_126_reg;
reg  main_float64_is_signaling_nanexit1ii4i_127;
reg  main_float64_is_signaling_nanexit1ii4i_127_reg;
reg [63:0] main_128_129;
reg [63:0] main_128_129_reg;
reg  main_128_130;
reg  main_128_130_reg;
reg  main_float64_is_signaling_nanexitii5i_131;
reg  main_float64_is_signaling_nanexitii5i_131_reg;
reg  main_float64_is_signaling_nanexitii5i_132;
reg  main_float64_is_signaling_nanexitii5i_132_reg;
reg [31:0] main_threadii6i_133;
reg [31:0] main_threadii6i_133_reg;
reg [31:0] main_threadii6i_134;
reg [31:0] main_threadii6i_134_reg;
reg  main_propagateFloat64NaNexiti10i_sinkii7i;
reg  main_propagateFloat64NaNexiti10i_sinkii7i_reg;
reg [63:0] main_propagateFloat64NaNexiti10i_mux2vii8i;
reg [63:0] main_propagateFloat64NaNexiti10i_mux2vii8i_reg;
reg [63:0] main_propagateFloat64NaNexiti10i_mux2ii9i;
reg [63:0] main_propagateFloat64NaNexiti10i_mux2ii9i_reg;
reg [63:0] main_135_136;
reg [63:0] main_135_136_reg;
reg [63:0] main_135_137;
reg [63:0] main_135_137_reg;
reg [63:0] main_135_138;
reg [63:0] main_135_138_reg;
reg [63:0] main_135_139;
reg [63:0] main_135_139_reg;
reg [63:0] main_140_141;
reg [63:0] main_140_141_reg;
reg [63:0] main_140_142;
reg [63:0] main_140_142_reg;
reg [63:0] main_shift64RightJammingexit9ii_143;
reg [63:0] main_shift64RightJammingexit9ii_143_reg;
reg [63:0] main_shift64RightJammingexit9ii_144;
reg [63:0] main_shift64RightJammingexit9ii_144_reg;
reg [31:0] main_shift64RightJammingexit9ii_zExp0i11i;
reg [31:0] main_shift64RightJammingexit9ii_zExp0i11i_reg;
reg [63:0] main_shift64RightJammingexit9ii_145;
reg [63:0] main_shift64RightJammingexit9ii_145_reg;
reg [63:0] main_shift64RightJammingexit9ii_146;
reg [63:0] main_shift64RightJammingexit9ii_146_reg;
reg [63:0] main_shift64RightJammingexit9ii_147;
reg [63:0] main_shift64RightJammingexit9ii_147_reg;
reg  main_shift64RightJammingexit9ii_148;
reg  main_shift64RightJammingexit9ii_148_reg;
reg  main_shift64RightJammingexit9ii_notii;
reg  main_shift64RightJammingexit9ii_notii_reg;
reg [31:0] main_shift64RightJammingexit9ii_149;
reg [31:0] main_shift64RightJammingexit9ii_149_reg;
reg [31:0] main_shift64RightJammingexit9ii_zExp0ii;
reg [31:0] main_shift64RightJammingexit9ii_zExp0ii_reg;
reg [63:0] main_shift64RightJammingexit9ii_ii;
reg [63:0] main_shift64RightJammingexit9ii_ii_reg;
reg [31:0] main_150_zExp1ii;
reg [31:0] main_150_zExp1ii_reg;
reg [63:0] main_150_zSig0i12i;
reg [63:0] main_150_zSig0i12i_reg;
reg [63:0] main_150_151;
reg [63:0] main_150_151_reg;
reg [63:0] main_152_153;
reg [63:0] main_152_153_reg;
reg [63:0] main_152_154;
reg [63:0] main_152_154_reg;
reg [63:0] main_152_155;
reg [63:0] main_152_155_reg;
reg [63:0] main_152_156;
reg [63:0] main_152_156_reg;
reg  main_152_157;
reg  main_152_157_reg;
reg  main_158_159;
reg  main_158_159_reg;
reg [63:0] main_161_162;
reg [63:0] main_161_162_reg;
reg  main_161_163;
reg  main_161_163_reg;
reg [63:0] main_164_165;
reg [63:0] main_164_165_reg;
reg  main_164_166;
reg  main_164_166_reg;
reg [63:0] main_167_168;
reg [63:0] main_167_168_reg;
reg  main_167_169;
reg  main_167_169_reg;
reg  main_float64_is_signaling_nanexit1i11ii_170;
reg  main_float64_is_signaling_nanexit1i11ii_170_reg;
reg [62:0] main_float64_is_signaling_nanexit1i11ii_171;
reg [62:0] main_float64_is_signaling_nanexit1i11ii_171_reg;
reg  main_float64_is_signaling_nanexit1i11ii_172;
reg  main_float64_is_signaling_nanexit1i11ii_172_reg;
reg [63:0] main_float64_is_signaling_nanexit1i11ii_173;
reg [63:0] main_float64_is_signaling_nanexit1i11ii_173_reg;
reg  main_float64_is_signaling_nanexit1i11ii_174;
reg  main_float64_is_signaling_nanexit1i11ii_174_reg;
reg [63:0] main_175_176;
reg [63:0] main_175_176_reg;
reg  main_175_177;
reg  main_175_177_reg;
reg  main_float64_is_signaling_nanexiti12ii_178;
reg  main_float64_is_signaling_nanexiti12ii_178_reg;
reg  main_float64_is_signaling_nanexiti12ii_179;
reg  main_float64_is_signaling_nanexiti12ii_179_reg;
reg [31:0] main_threadi13ii_180;
reg [31:0] main_threadi13ii_180_reg;
reg [31:0] main_threadi13ii_181;
reg [31:0] main_threadi13ii_181_reg;
reg  main_propagateFloat64NaNexit17ii_sinki14ii;
reg  main_propagateFloat64NaNexit17ii_sinki14ii_reg;
reg [63:0] main_propagateFloat64NaNexit17ii_mux2vi15ii;
reg [63:0] main_propagateFloat64NaNexit17ii_mux2vi15ii_reg;
reg [63:0] main_propagateFloat64NaNexit17ii_mux2i16ii;
reg [63:0] main_propagateFloat64NaNexit17ii_mux2i16ii_reg;
reg [31:0] main_182_183;
reg [31:0] main_182_183_reg;
reg [31:0] main_182_184;
reg [31:0] main_182_184_reg;
reg [31:0] main_186_aExp0ii;
reg [31:0] main_186_aExp0ii_reg;
reg [31:0] main_186_bExp0ii;
reg [31:0] main_186_bExp0ii_reg;
reg  main_186_187;
reg  main_186_187_reg;
reg  main_188_189;
reg  main_188_189_reg;
reg  main_190_191;
reg  main_190_191_reg;
reg  main_192_193;
reg  main_192_193_reg;
reg [63:0] main_194_195;
reg [63:0] main_194_195_reg;
reg  main_194_196;
reg  main_194_196_reg;
reg [63:0] main_197_198;
reg [63:0] main_197_198_reg;
reg  main_197_199;
reg  main_197_199_reg;
reg  main_float64_is_signaling_nanexit1i4ii_200;
reg  main_float64_is_signaling_nanexit1i4ii_200_reg;
reg [62:0] main_float64_is_signaling_nanexit1i4ii_201;
reg [62:0] main_float64_is_signaling_nanexit1i4ii_201_reg;
reg  main_float64_is_signaling_nanexit1i4ii_202;
reg  main_float64_is_signaling_nanexit1i4ii_202_reg;
reg [63:0] main_float64_is_signaling_nanexit1i4ii_203;
reg [63:0] main_float64_is_signaling_nanexit1i4ii_203_reg;
reg  main_float64_is_signaling_nanexit1i4ii_204;
reg  main_float64_is_signaling_nanexit1i4ii_204_reg;
reg [63:0] main_205_206;
reg [63:0] main_205_206_reg;
reg  main_205_207;
reg  main_205_207_reg;
reg  main_float64_is_signaling_nanexiti5ii_208;
reg  main_float64_is_signaling_nanexiti5ii_208_reg;
reg  main_float64_is_signaling_nanexiti5ii_209;
reg  main_float64_is_signaling_nanexiti5ii_209_reg;
reg [31:0] main_threadi6ii_210;
reg [31:0] main_threadi6ii_210_reg;
reg [31:0] main_threadi6ii_211;
reg [31:0] main_threadi6ii_211_reg;
reg  main_propagateFloat64NaNexit10ii_sinki7ii;
reg  main_propagateFloat64NaNexit10ii_sinki7ii_reg;
reg [63:0] main_propagateFloat64NaNexit10ii_mux2vi8ii;
reg [63:0] main_propagateFloat64NaNexit10ii_mux2vi8ii_reg;
reg [63:0] main_propagateFloat64NaNexit10ii_mux2i9ii;
reg [63:0] main_propagateFloat64NaNexit10ii_mux2i9ii_reg;
reg [31:0] main_212_213;
reg [31:0] main_212_213_reg;
reg [63:0] main_212_214;
reg [63:0] main_212_214_reg;
reg [63:0] main_212_215;
reg [63:0] main_212_215_reg;
reg [63:0] main_212_216;
reg [63:0] main_212_216_reg;
reg  main_217_218;
reg  main_217_218_reg;
reg [63:0] main_217_219;
reg [63:0] main_217_219_reg;
reg [63:0] main_217_220;
reg [63:0] main_217_220_reg;
reg [31:0] main_217_221;
reg [31:0] main_217_221_reg;
reg [31:0] main_217_expDiff0ii;
reg [31:0] main_217_expDiff0ii_reg;
reg [31:0] main_217_222;
reg [31:0] main_217_222_reg;
reg  main_217_223;
reg  main_217_223_reg;
reg  main_224_225;
reg  main_224_225_reg;
reg [63:0] main_226_227;
reg [63:0] main_226_227_reg;
reg [63:0] main_226_228;
reg [63:0] main_226_228_reg;
reg [31:0] main_226_229;
reg [31:0] main_226_229_reg;
reg [63:0] main_226_230;
reg [63:0] main_226_230_reg;
reg [63:0] main_226_231;
reg [63:0] main_226_231_reg;
reg  main_226_232;
reg  main_226_232_reg;
reg [63:0] main_226_233;
reg [63:0] main_226_233_reg;
reg [63:0] main_226_234;
reg [63:0] main_226_234_reg;
reg  main_235_236;
reg  main_235_236_reg;
reg [63:0] main_235_237;
reg [63:0] main_235_237_reg;
reg [63:0] main_shift64RightJammingexit3ii_z0i2ii;
reg [63:0] main_shift64RightJammingexit3ii_z0i2ii_reg;
reg [63:0] main_shift64RightJammingexit3ii_238;
reg [63:0] main_shift64RightJammingexit3ii_238_reg;
reg [63:0] main_239_240;
reg [63:0] main_239_240_reg;
reg [63:0] main_239_241;
reg [63:0] main_239_241_reg;
reg [31:0] main_239_bExp1ii;
reg [31:0] main_239_bExp1ii_reg;
reg [63:0] main_239_242;
reg [63:0] main_239_242_reg;
reg [31:0] main_239_243;
reg [31:0] main_239_243_reg;
reg  main_244_245;
reg  main_244_245_reg;
reg  main_246_247;
reg  main_246_247_reg;
reg [63:0] main_248_249;
reg [63:0] main_248_249_reg;
reg  main_248_250;
reg  main_248_250_reg;
reg [63:0] main_251_252;
reg [63:0] main_251_252_reg;
reg  main_251_253;
reg  main_251_253_reg;
reg  main_float64_is_signaling_nanexit1iii_254;
reg  main_float64_is_signaling_nanexit1iii_254_reg;
reg [62:0] main_float64_is_signaling_nanexit1iii_255;
reg [62:0] main_float64_is_signaling_nanexit1iii_255_reg;
reg  main_float64_is_signaling_nanexit1iii_256;
reg  main_float64_is_signaling_nanexit1iii_256_reg;
reg [63:0] main_float64_is_signaling_nanexit1iii_257;
reg [63:0] main_float64_is_signaling_nanexit1iii_257_reg;
reg  main_float64_is_signaling_nanexit1iii_258;
reg  main_float64_is_signaling_nanexit1iii_258_reg;
reg [63:0] main_259_260;
reg [63:0] main_259_260_reg;
reg  main_259_261;
reg  main_259_261_reg;
reg  main_float64_is_signaling_nanexitiii_262;
reg  main_float64_is_signaling_nanexitiii_262_reg;
reg  main_float64_is_signaling_nanexitiii_263;
reg  main_float64_is_signaling_nanexitiii_263_reg;
reg [31:0] main_threadiii_264;
reg [31:0] main_threadiii_264_reg;
reg [31:0] main_threadiii_265;
reg [31:0] main_threadiii_265_reg;
reg  main_propagateFloat64NaNexitii_sinkiii;
reg  main_propagateFloat64NaNexitii_sinkiii_reg;
reg [63:0] main_propagateFloat64NaNexitii_mux2viii;
reg [63:0] main_propagateFloat64NaNexitii_mux2viii_reg;
reg [63:0] main_propagateFloat64NaNexitii_mux2iii;
reg [63:0] main_propagateFloat64NaNexitii_mux2iii_reg;
reg  main_266_267;
reg  main_266_267_reg;
reg [63:0] main_266_268;
reg [63:0] main_266_268_reg;
reg [63:0] main_266_269;
reg [63:0] main_266_269_reg;
reg [31:0] main_266_270;
reg [31:0] main_266_270_reg;
reg [31:0] main_266_expDiff1ii;
reg [31:0] main_266_expDiff1ii_reg;
reg  main_266_271;
reg  main_266_271_reg;
reg  main_272_273;
reg  main_272_273_reg;
reg [63:0] main_274_275;
reg [63:0] main_274_275_reg;
reg [63:0] main_274_276;
reg [63:0] main_274_276_reg;
reg [31:0] main_274_277;
reg [31:0] main_274_277_reg;
reg [31:0] main_274_278;
reg [31:0] main_274_278_reg;
reg [63:0] main_274_279;
reg [63:0] main_274_279_reg;
reg [63:0] main_274_280;
reg [63:0] main_274_280_reg;
reg  main_274_281;
reg  main_274_281_reg;
reg [63:0] main_274_282;
reg [63:0] main_274_282_reg;
reg [63:0] main_274_283;
reg [63:0] main_274_283_reg;
reg  main_284_285;
reg  main_284_285_reg;
reg [63:0] main_284_286;
reg [63:0] main_284_286_reg;
reg [63:0] main_shift64RightJammingexitii_z0iii;
reg [63:0] main_shift64RightJammingexitii_z0iii_reg;
reg [63:0] main_shift64RightJammingexitii_287;
reg [63:0] main_shift64RightJammingexitii_287_reg;
reg [63:0] main_288_289;
reg [63:0] main_288_289_reg;
reg [63:0] main_288_290;
reg [63:0] main_288_290_reg;
reg [31:0] main_288_aExp1ii;
reg [31:0] main_288_aExp1ii_reg;
reg [63:0] main_288_291;
reg [63:0] main_288_291_reg;
reg [31:0] main_292_0ii;
reg [31:0] main_292_0ii_reg;
reg [31:0] main_292_zExp0ii;
reg [31:0] main_292_zExp0ii_reg;
reg [63:0] main_292_zSig0ii;
reg [63:0] main_292_zSig0ii_reg;
reg [31:0] main_292_293;
reg [31:0] main_292_293_reg;
reg  main_292_294;
reg  main_292_294_reg;
reg [63:0] main_292_295;
reg [63:0] main_292_295_reg;
reg [63:0] main_292_asinkiiii;
reg [63:0] main_292_asinkiiii_reg;
reg [31:0] main_292_extracttiiii;
reg [31:0] main_292_extracttiiii_reg;
reg  main_292_296;
reg  main_292_296_reg;
reg [31:0] main_292_297;
reg [31:0] main_292_297_reg;
reg [31:0] main_292_aiiiii;
reg [31:0] main_292_aiiiii_reg;
reg [31:0] main_292_iiiii;
reg [31:0] main_292_iiiii_reg;
reg  main_292_298;
reg  main_292_298_reg;
reg [31:0] main_299_300;
reg [31:0] main_299_300_reg;
reg [31:0] main_299_301;
reg [31:0] main_299_301_reg;
reg [31:0] main_normalizeRoundAndPackFloat64exitii_1iiiii;
reg [31:0] main_normalizeRoundAndPackFloat64exitii_1iiiii_reg;
reg [31:0] main_normalizeRoundAndPackFloat64exitii_shiftCount1iiiii;
reg [31:0] main_normalizeRoundAndPackFloat64exitii_shiftCount1iiiii_reg;
reg [31:0] main_normalizeRoundAndPackFloat64exitii_302;
reg [31:0] main_normalizeRoundAndPackFloat64exitii_302_reg;
reg [31:0] main_normalizeRoundAndPackFloat64exitii_gep_int4;
reg [31:0] main_normalizeRoundAndPackFloat64exitii_gep_int4_reg;
reg [31:0] main_normalizeRoundAndPackFloat64exitii_gep_array5;
reg [31:0] main_normalizeRoundAndPackFloat64exitii_gep_array5_reg;
reg [31:0] main_normalizeRoundAndPackFloat64exitii_gep6;
reg [31:0] main_normalizeRoundAndPackFloat64exitii_gep6_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_normalizeRoundAndPackFloat64exitii_303;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_normalizeRoundAndPackFloat64exitii_303_reg;
reg [31:0] main_normalizeRoundAndPackFloat64exitii_304;
reg [31:0] main_normalizeRoundAndPackFloat64exitii_304_reg;
reg [31:0] main_normalizeRoundAndPackFloat64exitii_305;
reg [31:0] main_normalizeRoundAndPackFloat64exitii_305_reg;
reg [31:0] main_normalizeRoundAndPackFloat64exitii_306;
reg [31:0] main_normalizeRoundAndPackFloat64exitii_306_reg;
reg [31:0] main_normalizeRoundAndPackFloat64exitii_307;
reg [31:0] main_normalizeRoundAndPackFloat64exitii_307_reg;
reg [31:0] main_normalizeRoundAndPackFloat64exitii_308;
reg [31:0] main_normalizeRoundAndPackFloat64exitii_308_reg;
reg [63:0] main_normalizeRoundAndPackFloat64exitii_309;
reg [63:0] main_normalizeRoundAndPackFloat64exitii_309_reg;
reg [63:0] main_normalizeRoundAndPackFloat64exitii_310;
reg [63:0] main_normalizeRoundAndPackFloat64exitii_310_reg;
reg [63:0] main_normalizeRoundAndPackFloat64exitii_311;
reg [63:0] main_normalizeRoundAndPackFloat64exitii_311_reg;
reg [63:0] main_float64_addexit_0i;
reg [63:0] main_float64_addexit_0i_reg;
reg [31:0] main_float64_addexit_gep_int7;
reg [31:0] main_float64_addexit_gep_int7_reg;
reg [31:0] main_float64_addexit_gep_array8;
reg [31:0] main_float64_addexit_gep_array8_reg;
reg [31:0] main_float64_addexit_gep9;
reg [31:0] main_float64_addexit_gep9_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_float64_addexit_312;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_float64_addexit_312_reg;
reg [63:0] main_float64_addexit_313;
reg [63:0] main_float64_addexit_313_reg;
reg  main_float64_addexit_314;
reg  main_float64_addexit_314_reg;
reg [31:0] main_float64_addexit_315;
reg [31:0] main_float64_addexit_315_reg;
reg [31:0] main_float64_addexit_316;
reg [31:0] main_float64_addexit_316_reg;
reg [31:0] main_float64_addexit_318;
reg [31:0] main_float64_addexit_318_reg;
reg  main_float64_addexit_exitcond;
reg  main_float64_addexit_exitcond_reg;
reg [31:0] main_319_lcssa;
reg [31:0] main_319_lcssa_reg;
reg  main_319_321;
reg  main_319_321_reg;
wire  ram_32_address_a;
wire  ram_32_write_enable_a;
wire [31:0] ram_32_in_a;
wire [31:0] ram_32_out_a;
wire  ram_32_address_b;
wire  ram_32_write_enable_b;
wire [31:0] ram_32_in_b;
wire [31:0] ram_32_out_b;
reg [5:0] a_input_address_a;
reg  a_input_write_enable_a;
wire [63:0] a_input_in_a;
wire [63:0] a_input_out_a;
wire [5:0] a_input_address_b;
wire  a_input_write_enable_b;
wire [63:0] a_input_in_b;
wire [63:0] a_input_out_b;
reg [5:0] b_input_address_a;
reg  b_input_write_enable_a;
wire [63:0] b_input_in_a;
wire [63:0] b_input_out_a;
wire [5:0] b_input_address_b;
wire  b_input_write_enable_b;
wire [63:0] b_input_in_b;
wire [63:0] b_input_out_b;
reg [5:0] z_output_address_a;
reg  z_output_write_enable_a;
wire [63:0] z_output_in_a;
wire [63:0] z_output_out_a;
wire [5:0] z_output_address_b;
wire  z_output_write_enable_b;
wire [63:0] z_output_in_b;
wire [63:0] z_output_out_b;
reg [7:0] countLeadingZeros32countLeadingZerosHigh_address_a;
reg  countLeadingZeros32countLeadingZerosHigh_write_enable_a;
wire [31:0] countLeadingZeros32countLeadingZerosHigh_in_a;
wire [31:0] countLeadingZeros32countLeadingZerosHigh_out_a;
wire [7:0] countLeadingZeros32countLeadingZerosHigh_address_b;
wire  countLeadingZeros32countLeadingZerosHigh_write_enable_b;
wire [31:0] countLeadingZeros32countLeadingZerosHigh_in_b;
wire [31:0] countLeadingZeros32countLeadingZerosHigh_out_b;
reg  roundAndPackFloat64_start;
reg [31:0] roundAndPackFloat64_arg_zSign;
reg [31:0] roundAndPackFloat64_arg_zExp;
reg [63:0] roundAndPackFloat64_arg_zSig;
wire  roundAndPackFloat64_memory_controller_enable_a;
wire  roundAndPackFloat64_memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] roundAndPackFloat64_memory_controller_address_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] roundAndPackFloat64_memory_controller_in_a;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] roundAndPackFloat64_memory_controller_out_a;
wire [1:0] roundAndPackFloat64_memory_controller_size_a;
wire  roundAndPackFloat64_memory_controller_enable_b;
wire  roundAndPackFloat64_memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] roundAndPackFloat64_memory_controller_address_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] roundAndPackFloat64_memory_controller_in_b;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] roundAndPackFloat64_memory_controller_out_b;
wire [1:0] roundAndPackFloat64_memory_controller_size_b;
reg  roundAndPackFloat64_memory_controller_waitrequest;
reg  roundAndPackFloat64_finish_final;
reg  roundAndPackFloat64_finish_reg;
wire  roundAndPackFloat64_finish;
wire [63:0] roundAndPackFloat64_return_val;
reg [63:0] roundAndPackFloat64_return_val_reg;
reg  legup_function_call;
wire [15:0] legup_pthreadpoll_threadID;
wire [15:0] legup_pthreadpoll_functionID;
reg [31:0] main_signed_add_32_0_op0;
reg [31:0] main_signed_add_32_0_op1;
reg [31:0] main_signed_add_32_0;
reg [31:0] main_signed_add_32_1_op0;
reg [31:0] main_signed_add_32_1_op1;
reg [31:0] main_signed_add_32_1;
reg [31:0] main_signed_subtract_32_0_op0;
reg [31:0] main_signed_subtract_32_0_op1;
reg [31:0] main_signed_subtract_32_0;
reg [63:0] main_signed_add_64_0_op0;
reg [63:0] main_signed_add_64_0_op1;
reg [63:0] main_signed_add_64_0;
reg [63:0] main_signed_subtract_64_0_op0;
reg [63:0] main_signed_subtract_64_0_op1;
reg [63:0] main_signed_subtract_64_0;


roundAndPackFloat64 roundAndPackFloat64 (
	.memory_controller_waitrequest (memory_controller_waitrequest),
	.memory_controller_enable_a (roundAndPackFloat64_memory_controller_enable_a),
	.memory_controller_address_a (roundAndPackFloat64_memory_controller_address_a),
	.memory_controller_write_enable_a (roundAndPackFloat64_memory_controller_write_enable_a),
	.memory_controller_in_a (roundAndPackFloat64_memory_controller_in_a),
	.memory_controller_size_a (roundAndPackFloat64_memory_controller_size_a),
	.memory_controller_out_a (memory_controller_out_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.memory_controller_enable_b (roundAndPackFloat64_memory_controller_enable_b),
	.memory_controller_address_b (roundAndPackFloat64_memory_controller_address_b),
	.memory_controller_write_enable_b (roundAndPackFloat64_memory_controller_write_enable_b),
	.memory_controller_in_b (roundAndPackFloat64_memory_controller_in_b),
	.memory_controller_size_b (roundAndPackFloat64_memory_controller_size_b),
	.memory_controller_out_b (memory_controller_out_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (roundAndPackFloat64_start),
	.finish (roundAndPackFloat64_finish),
	.return_val (roundAndPackFloat64_return_val),
	.arg_zSign (roundAndPackFloat64_arg_zSign),
	.arg_zExp (roundAndPackFloat64_arg_zExp),
	.arg_zSig (roundAndPackFloat64_arg_zSig)
);

defparam
	roundAndPackFloat64.tag_offset = tag_offset;

// Local Rams


// @a_input = internal unnamed_addr constant [46 x i64] [i64 9221120237041090560, i64 9218868437227405312, i64 4611686018427387904, i64 4611686018427387904, i64 4607182418800017408, i64 46071824188000174...
rom_dual_port a_input (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( a_input_address_a ),
	.address_b( a_input_address_b ),
	.q_a( a_input_out_a ),
	.q_b( a_input_out_b)
);
defparam a_input.width_a = 64;
defparam a_input.width_b = 64;
defparam a_input.widthad_a = 6;
defparam a_input.widthad_b = 6;
defparam a_input.numwords_a = 46;
defparam a_input.numwords_b = 46;
defparam a_input.latency = 1;
defparam a_input.init_file = "a_input.mif";


// @b_input = internal unnamed_addr constant [46 x i64] [i64 4607182418800017408, i64 4607182418800017408, i64 0, i64 4609434218613702656, i64 9221120237041090560, i64 9218868437227405312, i64 4611686018...
rom_dual_port b_input (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( b_input_address_a ),
	.address_b( b_input_address_b ),
	.q_a( b_input_out_a ),
	.q_b( b_input_out_b)
);
defparam b_input.width_a = 64;
defparam b_input.width_b = 64;
defparam b_input.widthad_a = 6;
defparam b_input.widthad_b = 6;
defparam b_input.numwords_a = 46;
defparam b_input.numwords_b = 46;
defparam b_input.latency = 1;
defparam b_input.init_file = "b_input.mif";


// @z_output = internal unnamed_addr constant [46 x i64] [i64 9221120237041090560, i64 9218868437227405312, i64 4611686018427387904, i64 4615063718147915776, i64 9221120237041090560, i64 9218868437227405...
rom_dual_port z_output (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( z_output_address_a ),
	.address_b( z_output_address_b ),
	.q_a( z_output_out_a ),
	.q_b( z_output_out_b)
);
defparam z_output.width_a = 64;
defparam z_output.width_b = 64;
defparam z_output.widthad_a = 6;
defparam z_output.widthad_b = 6;
defparam z_output.numwords_a = 46;
defparam z_output.numwords_b = 46;
defparam z_output.latency = 1;
defparam z_output.init_file = "z_output.mif";


// @countLeadingZeros32.countLeadingZerosHigh = internal unnamed_addr constant [256 x i32] [i32 8, i32 7, i32 6, i32 6, i32 5, i32 5, i32 5, i32 5, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4,...
rom_dual_port countLeadingZeros32countLeadingZerosHigh (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( countLeadingZeros32countLeadingZerosHigh_address_a ),
	.address_b( countLeadingZeros32countLeadingZerosHigh_address_b ),
	.q_a( countLeadingZeros32countLeadingZerosHigh_out_a ),
	.q_b( countLeadingZeros32countLeadingZerosHigh_out_b)
);
defparam countLeadingZeros32countLeadingZerosHigh.width_a = 32;
defparam countLeadingZeros32countLeadingZerosHigh.width_b = 32;
defparam countLeadingZeros32countLeadingZerosHigh.widthad_a = 8;
defparam countLeadingZeros32countLeadingZerosHigh.widthad_b = 8;
defparam countLeadingZeros32countLeadingZerosHigh.numwords_a = 256;
defparam countLeadingZeros32countLeadingZerosHigh.numwords_b = 256;
defparam countLeadingZeros32countLeadingZerosHigh.latency = 1;
defparam countLeadingZeros32countLeadingZerosHigh.init_file = "countLeadingZeros32countLeadingZerosHigh.mif";


/* Unsynthesizable Statements */
always @(posedge clk)
	if (!memory_controller_waitrequest) begin
	/* main: %float64_add.exit*/
	/*   %317 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([65 x i8]* @.str, i32 0, i32 0), i64 %3, i64 %5, i64 %313, i64 %.0.i) #1*/
	if ((cur_state == LEGUP_F_main_BB_float64_addexit_126)) begin
		$write("a_input=%0x b_input=%0x expected=%0x output=%0x\n", $signed(main_1_3_reg), $signed(main_1_5_reg), $signed(main_float64_addexit_313), $signed(main_float64_addexit_0i_reg));
		// to fix quartus warning
		if (reset == 1'b0 && ^(main_1_3_reg) === 1'bX) finish <= 0;
		if (reset == 1'b0 && ^(main_1_5_reg) === 1'bX) finish <= 0;
		if (reset == 1'b0 && ^(main_float64_addexit_313) === 1'bX) finish <= 0;
		if (reset == 1'b0 && ^(main_float64_addexit_0i_reg) === 1'bX) finish <= 0;
	end
	/* main: %319*/
	/*   %320 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([12 x i8]* @.str1, i32 0, i32 0), i32 %.lcssa) #1*/
	if ((cur_state == LEGUP_F_main_BB__319_127)) begin
		$write("Result: %d\n", $signed(main_319_lcssa_reg));
		// to fix quartus warning
		if (reset == 1'b0 && ^(main_319_lcssa_reg) === 1'bX) finish <= 0;
	end
	/* main: %322*/
	/*   %323 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([14 x i8]* @.str2, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_F_main_BB__322_128)) begin
		$write("RESULT: PASS\n");
	end
	/* main: %324*/
	/*   %325 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([14 x i8]* @.str3, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_F_main_BB__324_129)) begin
		$write("RESULT: FAIL\n");
	end
end
always @(posedge clk) begin
if (reset == 1'b1)
	cur_state <= LEGUP_0;
else if (memory_controller_waitrequest == 1'd1)
	cur_state <= cur_state;
else
	cur_state <= next_state;
end

always @(*)
begin
next_state = cur_state;
case(cur_state)  // synthesis parallel_case  
LEGUP_0:
	if ((start == 1'd1))
		next_state = LEGUP_F_main_BB__1_1;
LEGUP_F_main_BB__101_37:
		next_state = LEGUP_F_main_BB_shift64RightJammingexit9ii_53;
LEGUP_F_main_BB__110_38:
		next_state = LEGUP_F_main_BB_shift64RightJammingexit9ii_53;
LEGUP_F_main_BB__113_39:
	if ((main_1_12_reg == 32'd2047))
		next_state = LEGUP_F_main_BB__114_40;
	else if ((main_1_12_reg == 32'd0))
		next_state = LEGUP_F_main_BB__135_51;
	else if ((main_1_12_reg != 32'd2047) && (main_1_12_reg != 32'd0))
		next_state = LEGUP_F_main_BB__140_52;
LEGUP_F_main_BB__114_40:
	if ((main_114_116 == 1'd1))
		next_state = LEGUP_F_main_BB_float64_addexit_124;
	else if ((main_114_116 == 1'd0))
		next_state = LEGUP_F_main_BB__117_41;
LEGUP_F_main_BB__117_41:
	if ((main_117_119 == 1'd1))
		next_state = LEGUP_F_main_BB__120_42;
	else if ((main_117_119 == 1'd0))
		next_state = LEGUP_F_main_BB_float64_is_signaling_nanexit1ii4i_43;
LEGUP_F_main_BB__120_42:
		next_state = LEGUP_F_main_BB_float64_is_signaling_nanexit1ii4i_43;
LEGUP_F_main_BB__128_44:
		next_state = LEGUP_F_main_BB_float64_is_signaling_nanexitii5i_45;
LEGUP_F_main_BB__135_51:
		next_state = LEGUP_F_main_BB_float64_addexit_124;
LEGUP_F_main_BB__140_52:
		next_state = LEGUP_F_main_BB__150_56;
LEGUP_F_main_BB__150_56:
		next_state = LEGUP_function_call_57;
LEGUP_F_main_BB__150_58:
		next_state = LEGUP_F_main_BB_float64_addexit_124;
LEGUP_F_main_BB__152_59:
	if ((main_152_157 == 1'd1))
		next_state = LEGUP_F_main_BB__244_99;
	else if ((main_152_157 == 1'd0))
		next_state = LEGUP_F_main_BB__158_60;
LEGUP_F_main_BB__158_60:
	if ((main_158_159 == 1'd1))
		next_state = LEGUP_F_main_BB__190_80;
	else if ((main_158_159 == 1'd0))
		next_state = LEGUP_F_main_BB__160_61;
LEGUP_F_main_BB__160_61:
	if ((main_1_12_reg == 32'd2047))
		next_state = LEGUP_F_main_BB__161_62;
	else if ((main_1_12_reg == 32'd0))
		next_state = LEGUP_F_main_BB__185_77;
	else if ((main_1_12_reg != 32'd2047) && (main_1_12_reg != 32'd0))
		next_state = LEGUP_F_main_BB__186_78;
LEGUP_F_main_BB__161_62:
	if ((main_161_163 == 1'd1))
		next_state = LEGUP_F_main_BB__182_73;
	else if ((main_161_163 == 1'd0))
		next_state = LEGUP_F_main_BB__164_63;
LEGUP_F_main_BB__164_63:
	if ((main_164_166 == 1'd1))
		next_state = LEGUP_F_main_BB__167_64;
	else if ((main_164_166 == 1'd0))
		next_state = LEGUP_F_main_BB_float64_is_signaling_nanexit1i11ii_65;
LEGUP_F_main_BB__167_64:
		next_state = LEGUP_F_main_BB_float64_is_signaling_nanexit1i11ii_65;
LEGUP_F_main_BB__16_4:
	if ((main_16_21 == 1'd1))
		next_state = LEGUP_F_main_BB__22_5;
	else if ((main_16_21 == 1'd0))
		next_state = LEGUP_F_main_BB__65_21;
LEGUP_F_main_BB__175_66:
		next_state = LEGUP_F_main_BB_float64_is_signaling_nanexiti12ii_67;
LEGUP_F_main_BB__182_73:
		next_state = LEGUP_F_main_BB__182_74;
LEGUP_F_main_BB__182_74:
		next_state = LEGUP_F_main_BB__182_75;
LEGUP_F_main_BB__182_75:
		next_state = LEGUP_F_main_BB__182_76;
LEGUP_F_main_BB__182_76:
		next_state = LEGUP_F_main_BB_float64_addexit_124;
LEGUP_F_main_BB__185_77:
		next_state = LEGUP_F_main_BB__186_78;
LEGUP_F_main_BB__186_78:
	if ((main_186_187 == 1'd1))
		next_state = LEGUP_F_main_BB__288_116;
	else if ((main_186_187 == 1'd0))
		next_state = LEGUP_F_main_BB__188_79;
LEGUP_F_main_BB__188_79:
	if ((main_188_189 == 1'd1))
		next_state = LEGUP_F_main_BB__239_98;
	else if ((main_188_189 == 1'd0))
		next_state = LEGUP_F_main_BB_float64_addexit_124;
LEGUP_F_main_BB__190_80:
	if ((main_190_191 == 1'd1))
		next_state = LEGUP_F_main_BB__192_81;
	else if ((main_190_191 == 1'd0))
		next_state = LEGUP_F_main_BB__217_93;
LEGUP_F_main_BB__192_81:
	if ((main_192_193 == 1'd1))
		next_state = LEGUP_F_main_BB__212_92;
	else if ((main_192_193 == 1'd0))
		next_state = LEGUP_F_main_BB__194_82;
LEGUP_F_main_BB__194_82:
	if ((main_194_196 == 1'd1))
		next_state = LEGUP_F_main_BB__197_83;
	else if ((main_194_196 == 1'd0))
		next_state = LEGUP_F_main_BB_float64_is_signaling_nanexit1i4ii_84;
LEGUP_F_main_BB__197_83:
		next_state = LEGUP_F_main_BB_float64_is_signaling_nanexit1i4ii_84;
LEGUP_F_main_BB__1_1:
		next_state = LEGUP_F_main_BB__1_2;
LEGUP_F_main_BB__1_2:
		next_state = LEGUP_F_main_BB__1_3;
LEGUP_F_main_BB__1_3:
	if ((main_1_10 == 1'd1))
		next_state = LEGUP_F_main_BB__16_4;
	else if ((main_1_10 == 1'd0))
		next_state = LEGUP_F_main_BB__152_59;
LEGUP_F_main_BB__205_85:
		next_state = LEGUP_F_main_BB_float64_is_signaling_nanexiti5ii_86;
LEGUP_F_main_BB__212_92:
		next_state = LEGUP_F_main_BB_float64_addexit_124;
LEGUP_F_main_BB__217_93:
	if ((main_217_223 == 1'd1))
		next_state = LEGUP_F_main_BB_shift64RightJammingexit3ii_97;
	else if ((main_217_223 == 1'd0))
		next_state = LEGUP_F_main_BB__224_94;
LEGUP_F_main_BB__224_94:
	if ((main_224_225 == 1'd1))
		next_state = LEGUP_F_main_BB__226_95;
	else if ((main_224_225 == 1'd0))
		next_state = LEGUP_F_main_BB__235_96;
LEGUP_F_main_BB__226_95:
		next_state = LEGUP_F_main_BB_shift64RightJammingexit3ii_97;
LEGUP_F_main_BB__22_5:
	if ((main_22_23 == 1'd1))
		next_state = LEGUP_F_main_BB__24_6;
	else if ((main_22_23 == 1'd0))
		next_state = LEGUP_F_main_BB__44_17;
LEGUP_F_main_BB__235_96:
		next_state = LEGUP_F_main_BB_shift64RightJammingexit3ii_97;
LEGUP_F_main_BB__239_98:
		next_state = LEGUP_F_main_BB__292_117;
LEGUP_F_main_BB__244_99:
	if ((main_244_245 == 1'd1))
		next_state = LEGUP_F_main_BB__246_100;
	else if ((main_244_245 == 1'd0))
		next_state = LEGUP_F_main_BB__266_111;
LEGUP_F_main_BB__246_100:
	if ((main_246_247 == 1'd1))
		next_state = LEGUP_F_main_BB_float64_addexit_124;
	else if ((main_246_247 == 1'd0))
		next_state = LEGUP_F_main_BB__248_101;
LEGUP_F_main_BB__248_101:
	if ((main_248_250 == 1'd1))
		next_state = LEGUP_F_main_BB__251_102;
	else if ((main_248_250 == 1'd0))
		next_state = LEGUP_F_main_BB_float64_is_signaling_nanexit1iii_103;
LEGUP_F_main_BB__24_6:
	if ((main_24_25 == 1'd1))
		next_state = LEGUP_F_main_BB_float64_addexit_124;
	else if ((main_24_25 == 1'd0))
		next_state = LEGUP_F_main_BB__26_7;
LEGUP_F_main_BB__251_102:
		next_state = LEGUP_F_main_BB_float64_is_signaling_nanexit1iii_103;
LEGUP_F_main_BB__259_104:
		next_state = LEGUP_F_main_BB_float64_is_signaling_nanexitiii_105;
LEGUP_F_main_BB__266_111:
	if ((main_266_271 == 1'd1))
		next_state = LEGUP_F_main_BB_shift64RightJammingexitii_115;
	else if ((main_266_271 == 1'd0))
		next_state = LEGUP_F_main_BB__272_112;
LEGUP_F_main_BB__26_7:
	if ((main_26_28 == 1'd1))
		next_state = LEGUP_F_main_BB__29_8;
	else if ((main_26_28 == 1'd0))
		next_state = LEGUP_F_main_BB_float64_is_signaling_nanexit1i10ii_9;
LEGUP_F_main_BB__272_112:
	if ((main_272_273 == 1'd1))
		next_state = LEGUP_F_main_BB__274_113;
	else if ((main_272_273 == 1'd0))
		next_state = LEGUP_F_main_BB__284_114;
LEGUP_F_main_BB__274_113:
		next_state = LEGUP_F_main_BB_shift64RightJammingexitii_115;
LEGUP_F_main_BB__284_114:
		next_state = LEGUP_F_main_BB_shift64RightJammingexitii_115;
LEGUP_F_main_BB__288_116:
		next_state = LEGUP_F_main_BB__292_117;
LEGUP_F_main_BB__292_117:
	if ((main_292_298 == 1'd1))
		next_state = LEGUP_F_main_BB__299_118;
	else if ((main_292_298 == 1'd0))
		next_state = LEGUP_F_main_BB_normalizeRoundAndPackFloat64exitii_119;
LEGUP_F_main_BB__299_118:
		next_state = LEGUP_F_main_BB_normalizeRoundAndPackFloat64exitii_119;
LEGUP_F_main_BB__29_8:
		next_state = LEGUP_F_main_BB_float64_is_signaling_nanexit1i10ii_9;
LEGUP_F_main_BB__319_127:
	if ((main_319_321 == 1'd1))
		next_state = LEGUP_F_main_BB__322_128;
	else if ((main_319_321 == 1'd0))
		next_state = LEGUP_F_main_BB__324_129;
LEGUP_F_main_BB__322_128:
		next_state = LEGUP_F_main_BB__326_130;
LEGUP_F_main_BB__324_129:
		next_state = LEGUP_F_main_BB__326_130;
LEGUP_F_main_BB__326_130:
		next_state = LEGUP_0;
LEGUP_F_main_BB__37_10:
		next_state = LEGUP_F_main_BB_float64_is_signaling_nanexiti11ii_11;
LEGUP_F_main_BB__44_17:
	if ((main_44_49 == 1'd1))
		next_state = LEGUP_F_main_BB_shift64RightJammingexit9ii_53;
	else if ((main_44_49 == 1'd0))
		next_state = LEGUP_F_main_BB__50_18;
LEGUP_F_main_BB__50_18:
	if ((main_50_51 == 1'd1))
		next_state = LEGUP_F_main_BB__52_19;
	else if ((main_50_51 == 1'd0))
		next_state = LEGUP_F_main_BB__62_20;
LEGUP_F_main_BB__52_19:
		next_state = LEGUP_F_main_BB_shift64RightJammingexit9ii_53;
LEGUP_F_main_BB__62_20:
		next_state = LEGUP_F_main_BB_shift64RightJammingexit9ii_53;
LEGUP_F_main_BB__65_21:
	if ((main_65_66 == 1'd1))
		next_state = LEGUP_F_main_BB__67_22;
	else if ((main_65_66 == 1'd0))
		next_state = LEGUP_F_main_BB__113_39;
LEGUP_F_main_BB__67_22:
	if ((main_67_68 == 1'd1))
		next_state = LEGUP_F_main_BB__69_23;
	else if ((main_67_68 == 1'd0))
		next_state = LEGUP_F_main_BB__92_35;
LEGUP_F_main_BB__69_23:
	if ((main_69_70 == 1'd1))
		next_state = LEGUP_F_main_BB__89_34;
	else if ((main_69_70 == 1'd0))
		next_state = LEGUP_F_main_BB__71_24;
LEGUP_F_main_BB__71_24:
	if ((main_71_73 == 1'd1))
		next_state = LEGUP_F_main_BB__74_25;
	else if ((main_71_73 == 1'd0))
		next_state = LEGUP_F_main_BB_float64_is_signaling_nanexit1i1ii_26;
LEGUP_F_main_BB__74_25:
		next_state = LEGUP_F_main_BB_float64_is_signaling_nanexit1i1ii_26;
LEGUP_F_main_BB__82_27:
		next_state = LEGUP_F_main_BB_float64_is_signaling_nanexiti2ii_28;
LEGUP_F_main_BB__89_34:
		next_state = LEGUP_F_main_BB_float64_addexit_124;
LEGUP_F_main_BB__92_35:
	if ((main_92_98 == 1'd1))
		next_state = LEGUP_F_main_BB_shift64RightJammingexit9ii_53;
	else if ((main_92_98 == 1'd0))
		next_state = LEGUP_F_main_BB__99_36;
LEGUP_F_main_BB__99_36:
	if ((main_99_100 == 1'd1))
		next_state = LEGUP_F_main_BB__101_37;
	else if ((main_99_100 == 1'd0))
		next_state = LEGUP_F_main_BB__110_38;
LEGUP_F_main_BB_float64_addexit_124:
		next_state = LEGUP_F_main_BB_float64_addexit_125;
LEGUP_F_main_BB_float64_addexit_125:
		next_state = LEGUP_F_main_BB_float64_addexit_126;
LEGUP_F_main_BB_float64_addexit_126:
	if ((main_float64_addexit_exitcond_reg == 1'd1))
		next_state = LEGUP_F_main_BB__319_127;
	else if ((main_float64_addexit_exitcond_reg == 1'd0))
		next_state = LEGUP_F_main_BB__1_1;
LEGUP_F_main_BB_float64_is_signaling_nanexit1i10ii_9:
	if ((main_float64_is_signaling_nanexit1i10ii_36 == 1'd1))
		next_state = LEGUP_F_main_BB__37_10;
	else if ((main_float64_is_signaling_nanexit1i10ii_36 == 1'd0))
		next_state = LEGUP_F_main_BB_float64_is_signaling_nanexiti11ii_11;
LEGUP_F_main_BB_float64_is_signaling_nanexit1i11ii_65:
	if ((main_float64_is_signaling_nanexit1i11ii_174 == 1'd1))
		next_state = LEGUP_F_main_BB__175_66;
	else if ((main_float64_is_signaling_nanexit1i11ii_174 == 1'd0))
		next_state = LEGUP_F_main_BB_float64_is_signaling_nanexiti12ii_67;
LEGUP_F_main_BB_float64_is_signaling_nanexit1i1ii_26:
	if ((main_float64_is_signaling_nanexit1i1ii_81 == 1'd1))
		next_state = LEGUP_F_main_BB__82_27;
	else if ((main_float64_is_signaling_nanexit1i1ii_81 == 1'd0))
		next_state = LEGUP_F_main_BB_float64_is_signaling_nanexiti2ii_28;
LEGUP_F_main_BB_float64_is_signaling_nanexit1i4ii_84:
	if ((main_float64_is_signaling_nanexit1i4ii_204 == 1'd1))
		next_state = LEGUP_F_main_BB__205_85;
	else if ((main_float64_is_signaling_nanexit1i4ii_204 == 1'd0))
		next_state = LEGUP_F_main_BB_float64_is_signaling_nanexiti5ii_86;
LEGUP_F_main_BB_float64_is_signaling_nanexit1ii4i_43:
	if ((main_float64_is_signaling_nanexit1ii4i_127 == 1'd1))
		next_state = LEGUP_F_main_BB__128_44;
	else if ((main_float64_is_signaling_nanexit1ii4i_127 == 1'd0))
		next_state = LEGUP_F_main_BB_float64_is_signaling_nanexitii5i_45;
LEGUP_F_main_BB_float64_is_signaling_nanexit1iii_103:
	if ((main_float64_is_signaling_nanexit1iii_258 == 1'd1))
		next_state = LEGUP_F_main_BB__259_104;
	else if ((main_float64_is_signaling_nanexit1iii_258 == 1'd0))
		next_state = LEGUP_F_main_BB_float64_is_signaling_nanexitiii_105;
LEGUP_F_main_BB_float64_is_signaling_nanexiti11ii_11:
	if ((main_float64_is_signaling_nanexiti11ii_41 == 1'd1))
		next_state = LEGUP_F_main_BB_threadi12ii_12;
	else if ((main_float64_is_signaling_nanexiti11ii_41 == 1'd0))
		next_state = LEGUP_F_main_BB_propagateFloat64NaNexit16ii_16;
LEGUP_F_main_BB_float64_is_signaling_nanexiti12ii_67:
	if ((main_float64_is_signaling_nanexiti12ii_179 == 1'd1))
		next_state = LEGUP_F_main_BB_threadi13ii_68;
	else if ((main_float64_is_signaling_nanexiti12ii_179 == 1'd0))
		next_state = LEGUP_F_main_BB_propagateFloat64NaNexit17ii_72;
LEGUP_F_main_BB_float64_is_signaling_nanexiti2ii_28:
	if ((main_float64_is_signaling_nanexiti2ii_86 == 1'd1))
		next_state = LEGUP_F_main_BB_threadi3ii_29;
	else if ((main_float64_is_signaling_nanexiti2ii_86 == 1'd0))
		next_state = LEGUP_F_main_BB_propagateFloat64NaNexit7ii_33;
LEGUP_F_main_BB_float64_is_signaling_nanexiti5ii_86:
	if ((main_float64_is_signaling_nanexiti5ii_209 == 1'd1))
		next_state = LEGUP_F_main_BB_threadi6ii_87;
	else if ((main_float64_is_signaling_nanexiti5ii_209 == 1'd0))
		next_state = LEGUP_F_main_BB_propagateFloat64NaNexit10ii_91;
LEGUP_F_main_BB_float64_is_signaling_nanexitii5i_45:
	if ((main_float64_is_signaling_nanexitii5i_132 == 1'd1))
		next_state = LEGUP_F_main_BB_threadii6i_46;
	else if ((main_float64_is_signaling_nanexitii5i_132 == 1'd0))
		next_state = LEGUP_F_main_BB_propagateFloat64NaNexiti10i_50;
LEGUP_F_main_BB_float64_is_signaling_nanexitiii_105:
	if ((main_float64_is_signaling_nanexitiii_263 == 1'd1))
		next_state = LEGUP_F_main_BB_threadiii_106;
	else if ((main_float64_is_signaling_nanexitiii_263 == 1'd0))
		next_state = LEGUP_F_main_BB_propagateFloat64NaNexitii_110;
LEGUP_F_main_BB_normalizeRoundAndPackFloat64exitii_119:
		next_state = LEGUP_F_main_BB_normalizeRoundAndPackFloat64exitii_120;
LEGUP_F_main_BB_normalizeRoundAndPackFloat64exitii_120:
		next_state = LEGUP_F_main_BB_normalizeRoundAndPackFloat64exitii_121;
LEGUP_F_main_BB_normalizeRoundAndPackFloat64exitii_121:
		next_state = LEGUP_function_call_122;
LEGUP_F_main_BB_normalizeRoundAndPackFloat64exitii_123:
		next_state = LEGUP_F_main_BB_float64_addexit_124;
LEGUP_F_main_BB_propagateFloat64NaNexit10ii_91:
		next_state = LEGUP_F_main_BB_float64_addexit_124;
LEGUP_F_main_BB_propagateFloat64NaNexit16ii_16:
		next_state = LEGUP_F_main_BB_float64_addexit_124;
LEGUP_F_main_BB_propagateFloat64NaNexit17ii_72:
		next_state = LEGUP_F_main_BB_float64_addexit_124;
LEGUP_F_main_BB_propagateFloat64NaNexit7ii_33:
		next_state = LEGUP_F_main_BB_float64_addexit_124;
LEGUP_F_main_BB_propagateFloat64NaNexiti10i_50:
		next_state = LEGUP_F_main_BB_float64_addexit_124;
LEGUP_F_main_BB_propagateFloat64NaNexitii_110:
		next_state = LEGUP_F_main_BB_float64_addexit_124;
LEGUP_F_main_BB_shift64RightJammingexit3ii_97:
		next_state = LEGUP_F_main_BB__239_98;
LEGUP_F_main_BB_shift64RightJammingexit9ii_53:
		next_state = LEGUP_F_main_BB_shift64RightJammingexit9ii_54;
LEGUP_F_main_BB_shift64RightJammingexit9ii_54:
		next_state = LEGUP_F_main_BB_shift64RightJammingexit9ii_55;
LEGUP_F_main_BB_shift64RightJammingexit9ii_55:
		next_state = LEGUP_F_main_BB__150_56;
LEGUP_F_main_BB_shift64RightJammingexitii_115:
		next_state = LEGUP_F_main_BB__288_116;
LEGUP_F_main_BB_threadi12ii_12:
		next_state = LEGUP_F_main_BB_threadi12ii_13;
LEGUP_F_main_BB_threadi12ii_13:
		next_state = LEGUP_F_main_BB_threadi12ii_14;
LEGUP_F_main_BB_threadi12ii_14:
		next_state = LEGUP_F_main_BB_threadi12ii_15;
LEGUP_F_main_BB_threadi12ii_15:
		next_state = LEGUP_F_main_BB_propagateFloat64NaNexit16ii_16;
LEGUP_F_main_BB_threadi13ii_68:
		next_state = LEGUP_F_main_BB_threadi13ii_69;
LEGUP_F_main_BB_threadi13ii_69:
		next_state = LEGUP_F_main_BB_threadi13ii_70;
LEGUP_F_main_BB_threadi13ii_70:
		next_state = LEGUP_F_main_BB_threadi13ii_71;
LEGUP_F_main_BB_threadi13ii_71:
		next_state = LEGUP_F_main_BB_propagateFloat64NaNexit17ii_72;
LEGUP_F_main_BB_threadi3ii_29:
		next_state = LEGUP_F_main_BB_threadi3ii_30;
LEGUP_F_main_BB_threadi3ii_30:
		next_state = LEGUP_F_main_BB_threadi3ii_31;
LEGUP_F_main_BB_threadi3ii_31:
		next_state = LEGUP_F_main_BB_threadi3ii_32;
LEGUP_F_main_BB_threadi3ii_32:
		next_state = LEGUP_F_main_BB_propagateFloat64NaNexit7ii_33;
LEGUP_F_main_BB_threadi6ii_87:
		next_state = LEGUP_F_main_BB_threadi6ii_88;
LEGUP_F_main_BB_threadi6ii_88:
		next_state = LEGUP_F_main_BB_threadi6ii_89;
LEGUP_F_main_BB_threadi6ii_89:
		next_state = LEGUP_F_main_BB_threadi6ii_90;
LEGUP_F_main_BB_threadi6ii_90:
		next_state = LEGUP_F_main_BB_propagateFloat64NaNexit10ii_91;
LEGUP_F_main_BB_threadii6i_46:
		next_state = LEGUP_F_main_BB_threadii6i_47;
LEGUP_F_main_BB_threadii6i_47:
		next_state = LEGUP_F_main_BB_threadii6i_48;
LEGUP_F_main_BB_threadii6i_48:
		next_state = LEGUP_F_main_BB_threadii6i_49;
LEGUP_F_main_BB_threadii6i_49:
		next_state = LEGUP_F_main_BB_propagateFloat64NaNexiti10i_50;
LEGUP_F_main_BB_threadiii_106:
		next_state = LEGUP_F_main_BB_threadiii_107;
LEGUP_F_main_BB_threadiii_107:
		next_state = LEGUP_F_main_BB_threadiii_108;
LEGUP_F_main_BB_threadiii_108:
		next_state = LEGUP_F_main_BB_threadiii_109;
LEGUP_F_main_BB_threadiii_109:
		next_state = LEGUP_F_main_BB_propagateFloat64NaNexitii_110;
LEGUP_function_call_122:
	if ((roundAndPackFloat64_finish_final == 1'd1))
		next_state = LEGUP_F_main_BB_normalizeRoundAndPackFloat64exitii_123;
LEGUP_function_call_57:
	if ((roundAndPackFloat64_finish_final == 1'd1))
		next_state = LEGUP_F_main_BB__150_58;
default:
	next_state = cur_state;
endcase

end
always @(*) begin
	/* main: %1*/
	/*   %main_result.02 = phi i32 [ 0, %0 ], [ %316, %float64_add.exit ]*/
	if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1))) begin
		main_1_main_result02 = 32'd0;
	end
	/* main: %1*/
	/*   %main_result.02 = phi i32 [ 0, %0 ], [ %316, %float64_add.exit ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_float64_addexit_126) & (memory_controller_waitrequest == 1'd0)) & (main_float64_addexit_exitcond_reg == 1'd0))) */ begin
		main_1_main_result02 = main_float64_addexit_316;
	end
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %main_result.02 = phi i32 [ 0, %0 ], [ %316, %float64_add.exit ]*/
	if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1))) begin
		main_1_main_result02_reg <= main_1_main_result02;
		if (start == 1'b0 && ^(main_1_main_result02) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_main_result02_reg"); $finish; end
	end
	/* main: %1*/
	/*   %main_result.02 = phi i32 [ 0, %0 ], [ %316, %float64_add.exit ]*/
	if ((((cur_state == LEGUP_F_main_BB_float64_addexit_126) & (memory_controller_waitrequest == 1'd0)) & (main_float64_addexit_exitcond_reg == 1'd0))) begin
		main_1_main_result02_reg <= main_1_main_result02;
		if (start == 1'b0 && ^(main_1_main_result02) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_main_result02_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %i.01 = phi i32 [ 0, %0 ], [ %318, %float64_add.exit ]*/
	if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1))) begin
		main_1_i01 = 32'd0;
	end
	/* main: %1*/
	/*   %i.01 = phi i32 [ 0, %0 ], [ %318, %float64_add.exit ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_float64_addexit_126) & (memory_controller_waitrequest == 1'd0)) & (main_float64_addexit_exitcond_reg == 1'd0))) */ begin
		main_1_i01 = main_float64_addexit_318_reg;
	end
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %i.01 = phi i32 [ 0, %0 ], [ %318, %float64_add.exit ]*/
	if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1))) begin
		main_1_i01_reg <= main_1_i01;
		if (start == 1'b0 && ^(main_1_i01) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_i01_reg"); $finish; end
	end
	/* main: %1*/
	/*   %i.01 = phi i32 [ 0, %0 ], [ %318, %float64_add.exit ]*/
	if ((((cur_state == LEGUP_F_main_BB_float64_addexit_126) & (memory_controller_waitrequest == 1'd0)) & (main_float64_addexit_exitcond_reg == 1'd0))) begin
		main_1_i01_reg <= main_1_i01;
		if (start == 1'b0 && ^(main_1_i01) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_i01_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %gep_int = ptrtoint [46 x i64]* @a_input to i32*/
if (reset) begin main_1_gep_int = 0; end
		main_1_gep_int = 1'd0;
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %gep_int = ptrtoint [46 x i64]* @a_input to i32*/
	if ((cur_state == LEGUP_F_main_BB__1_1)) begin
		main_1_gep_int_reg <= main_1_gep_int;
		if (start == 1'b0 && ^(main_1_gep_int) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_gep_int_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %gep_array = mul i32 %i.01, 8*/
		main_1_gep_array = (main_1_i01_reg * 32'd8);
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %gep_array = mul i32 %i.01, 8*/
	if ((cur_state == LEGUP_F_main_BB__1_1)) begin
		main_1_gep_array_reg <= main_1_gep_array;
		if (start == 1'b0 && ^(main_1_gep_array) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_gep_array_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %gep = add i32 %gep_int, %gep_array*/
		main_1_gep = main_signed_add_32_0;
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %gep = add i32 %gep_int, %gep_array*/
	if ((cur_state == LEGUP_F_main_BB__1_2)) begin
		main_1_gep_reg <= main_1_gep;
		if (start == 1'b0 && ^(main_1_gep) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_gep_reg"); $finish; end
	end
	/* main: %44*/
	/*   %expDiff.0.i2.i = add nsw i32 %48, %15*/
	if ((cur_state == LEGUP_F_main_BB__44_17)) begin
		main_1_gep_reg <= main_44_expDiff0i2i;
		if (start == 1'b0 && ^(main_44_expDiff0i2i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_gep_reg"); $finish; end
	end
	/* main: %92*/
	/*   %expDiff.1.i3.i = add nsw i32 %15, %96*/
	if ((cur_state == LEGUP_F_main_BB__92_35)) begin
		main_1_gep_reg <= main_92_expDiff1i3i;
		if (start == 1'b0 && ^(main_92_expDiff1i3i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_gep_reg"); $finish; end
	end
	/* main: %float64_add.exit*/
	/*   %316 = add nsw i32 %315, %main_result.02*/
	if ((cur_state == LEGUP_F_main_BB_float64_addexit_126)) begin
		main_1_gep_reg <= main_float64_addexit_316;
		if (start == 1'b0 && ^(main_float64_addexit_316) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_gep_reg"); $finish; end
	end
	/* main: %shift64RightJamming.exit9.i.i*/
	/*   %zExp.0..i.i = add nsw i32 %149, %zExp.0.i11.i*/
	if ((cur_state == LEGUP_F_main_BB_shift64RightJammingexit9ii_55)) begin
		main_1_gep_reg <= main_shift64RightJammingexit9ii_zExp0ii;
		if (start == 1'b0 && ^(main_shift64RightJammingexit9ii_zExp0ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_gep_reg"); $finish; end
	end
	/* main: %217*/
	/*   %expDiff.0.i.i = add nsw i32 %15, %221*/
	if ((cur_state == LEGUP_F_main_BB__217_93)) begin
		main_1_gep_reg <= main_217_expDiff0ii;
		if (start == 1'b0 && ^(main_217_expDiff0ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_gep_reg"); $finish; end
	end
	/* main: %266*/
	/*   %expDiff.1.i.i = add nsw i32 %270, %15*/
	if ((cur_state == LEGUP_F_main_BB__266_111)) begin
		main_1_gep_reg <= main_266_expDiff1ii;
		if (start == 1'b0 && ^(main_266_expDiff1ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_gep_reg"); $finish; end
	end
	/* main: %292*/
	/*   %293 = add nsw i32 %zExp.0.i.i, -1*/
	if ((cur_state == LEGUP_F_main_BB__292_117)) begin
		main_1_gep_reg <= main_292_293;
		if (start == 1'b0 && ^(main_292_293) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_gep_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %2 = inttoptr i32 %gep to i64**/
		main_1_2 = main_1_gep;
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %2 = inttoptr i32 %gep to i64**/
	if ((cur_state == LEGUP_F_main_BB__1_2)) begin
		main_1_2_reg <= main_1_2;
		if (start == 1'b0 && ^(main_1_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_2_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %3 = load i64* %2, align 8, !tbaa !1*/
		main_1_3 = a_input_out_a;
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %3 = load i64* %2, align 8, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_3)) begin
		main_1_3_reg <= main_1_3;
		if (start == 1'b0 && ^(main_1_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_3_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %gep_int1 = ptrtoint [46 x i64]* @b_input to i32*/
if (reset) begin main_1_gep_int1 = 0; end
		main_1_gep_int1 = 1'd0;
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %gep_int1 = ptrtoint [46 x i64]* @b_input to i32*/
	if ((cur_state == LEGUP_F_main_BB__1_1)) begin
		main_1_gep_int1_reg <= main_1_gep_int1;
		if (start == 1'b0 && ^(main_1_gep_int1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_gep_int1_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %gep_array2 = mul i32 %i.01, 8*/
		main_1_gep_array2 = (main_1_i01_reg * 32'd8);
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %gep_array2 = mul i32 %i.01, 8*/
	if ((cur_state == LEGUP_F_main_BB__1_1)) begin
		main_1_gep_array2_reg <= main_1_gep_array2;
		if (start == 1'b0 && ^(main_1_gep_array2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_gep_array2_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %gep3 = add i32 %gep_int1, %gep_array2*/
		main_1_gep3 = main_signed_add_32_1;
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %gep3 = add i32 %gep_int1, %gep_array2*/
	if ((cur_state == LEGUP_F_main_BB__1_2)) begin
		main_1_gep3_reg <= main_1_gep3;
		if (start == 1'b0 && ^(main_1_gep3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_gep3_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %4 = inttoptr i32 %gep3 to i64**/
		main_1_4 = main_1_gep3;
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %4 = inttoptr i32 %gep3 to i64**/
	if ((cur_state == LEGUP_F_main_BB__1_2)) begin
		main_1_4_reg <= main_1_4;
		if (start == 1'b0 && ^(main_1_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_4_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %5 = load i64* %4, align 8, !tbaa !1*/
		main_1_5 = b_input_out_a;
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %5 = load i64* %4, align 8, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_3)) begin
		main_1_5_reg <= main_1_5;
		if (start == 1'b0 && ^(main_1_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_5_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %6 = lshr i64 %3, 63*/
		main_1_6 = (main_1_3 >>> (64'd63 % 64'd64));
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %6 = lshr i64 %3, 63*/
	if ((cur_state == LEGUP_F_main_BB__1_3)) begin
		main_1_6_reg <= main_1_6;
		if (start == 1'b0 && ^(main_1_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_6_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %7 = trunc i64 %6 to i32*/
		main_1_7 = main_1_6[31:0];
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %7 = trunc i64 %6 to i32*/
	if ((cur_state == LEGUP_F_main_BB__1_3)) begin
		main_1_7_reg <= main_1_7;
		if (start == 1'b0 && ^(main_1_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_7_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %8 = lshr i64 %5, 63*/
		main_1_8 = (main_1_5 >>> (64'd63 % 64'd64));
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %8 = lshr i64 %5, 63*/
	if ((cur_state == LEGUP_F_main_BB__1_3)) begin
		main_1_8_reg <= main_1_8;
		if (start == 1'b0 && ^(main_1_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_8_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %9 = trunc i64 %8 to i32*/
		main_1_9 = main_1_8[31:0];
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %9 = trunc i64 %8 to i32*/
	if ((cur_state == LEGUP_F_main_BB__1_3)) begin
		main_1_9_reg <= main_1_9;
		if (start == 1'b0 && ^(main_1_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_9_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %10 = icmp eq i32 %7, %9*/
		main_1_10 = (main_1_7 == main_1_9);
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %10 = icmp eq i32 %7, %9*/
	if ((cur_state == LEGUP_F_main_BB__1_3)) begin
		main_1_10_reg <= main_1_10;
		if (start == 1'b0 && ^(main_1_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_10_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %11 = lshr i64 %3, 52*/
		main_1_11 = (main_1_3 >>> (64'd52 % 64'd64));
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %11 = lshr i64 %3, 52*/
	if ((cur_state == LEGUP_F_main_BB__1_3)) begin
		main_1_11_reg <= main_1_11;
		if (start == 1'b0 && ^(main_1_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_11_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %.tr.i.i1.i = trunc i64 %11 to i32*/
		main_1_trii1i = main_1_11[31:0];
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %.tr.i.i1.i = trunc i64 %11 to i32*/
	if ((cur_state == LEGUP_F_main_BB__1_3)) begin
		main_1_trii1i_reg <= main_1_trii1i;
		if (start == 1'b0 && ^(main_1_trii1i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_trii1i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %12 = and i32 %.tr.i.i1.i, 2047*/
		main_1_12 = (main_1_trii1i & 32'd2047);
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %12 = and i32 %.tr.i.i1.i, 2047*/
	if ((cur_state == LEGUP_F_main_BB__1_3)) begin
		main_1_12_reg <= main_1_12;
		if (start == 1'b0 && ^(main_1_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_12_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %13 = lshr i64 %5, 52*/
		main_1_13 = (main_1_5 >>> (64'd52 % 64'd64));
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %13 = lshr i64 %5, 52*/
	if ((cur_state == LEGUP_F_main_BB__1_3)) begin
		main_1_13_reg <= main_1_13;
		if (start == 1'b0 && ^(main_1_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_13_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %.tr.i17.i.i = trunc i64 %13 to i32*/
		main_1_tri17ii = main_1_13[31:0];
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %.tr.i17.i.i = trunc i64 %13 to i32*/
	if ((cur_state == LEGUP_F_main_BB__1_3)) begin
		main_1_tri17ii_reg <= main_1_tri17ii;
		if (start == 1'b0 && ^(main_1_tri17ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_tri17ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %14 = and i32 %.tr.i17.i.i, 2047*/
		main_1_14 = (main_1_tri17ii & 32'd2047);
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %14 = and i32 %.tr.i17.i.i, 2047*/
	if ((cur_state == LEGUP_F_main_BB__1_3)) begin
		main_1_14_reg <= main_1_14;
		if (start == 1'b0 && ^(main_1_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_14_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %15 = sub nsw i32 %12, %14*/
		main_1_15 = main_signed_subtract_32_0;
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %15 = sub nsw i32 %12, %14*/
	if ((cur_state == LEGUP_F_main_BB__1_3)) begin
		main_1_15_reg <= main_1_15;
		if (start == 1'b0 && ^(main_1_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_15_reg"); $finish; end
	end
	/* main: %52*/
	/*   %55 = sub nsw i32 0, %expDiff.0.i2.i*/
	if ((cur_state == LEGUP_F_main_BB__52_19)) begin
		main_1_15_reg <= main_52_55;
		if (start == 1'b0 && ^(main_52_55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_15_reg"); $finish; end
	end
	/* main: %274*/
	/*   %277 = sub nsw i32 0, %expDiff.1.i.i*/
	if ((cur_state == LEGUP_F_main_BB__274_113)) begin
		main_1_15_reg <= main_274_277;
		if (start == 1'b0 && ^(main_274_277) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_15_reg"); $finish; end
	end
	/* main: %normalizeRoundAndPackFloat64.exit.i.i*/
	/*   %308 = sub i32 %293, %307*/
	if ((cur_state == LEGUP_F_main_BB_normalizeRoundAndPackFloat64exitii_121)) begin
		main_1_15_reg <= main_normalizeRoundAndPackFloat64exitii_308;
		if (start == 1'b0 && ^(main_normalizeRoundAndPackFloat64exitii_308) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_15_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %16*/
	/*   %17 = shl i64 %3, 9*/
		main_16_17 = (main_1_3_reg <<< (64'd9 % 64'd64));
end
always @(posedge clk) begin
	/* main: %16*/
	/*   %17 = shl i64 %3, 9*/
	if ((cur_state == LEGUP_F_main_BB__16_4)) begin
		main_16_17_reg <= main_16_17;
		if (start == 1'b0 && ^(main_16_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_16_17_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %16*/
	/*   %18 = and i64 %17, 2305843009213693440*/
		main_16_18 = (main_16_17 & 64'd2305843009213693440);
end
always @(posedge clk) begin
	/* main: %16*/
	/*   %18 = and i64 %17, 2305843009213693440*/
	if ((cur_state == LEGUP_F_main_BB__16_4)) begin
		main_16_18_reg <= main_16_18;
		if (start == 1'b0 && ^(main_16_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_16_18_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %16*/
	/*   %19 = shl i64 %5, 9*/
		main_16_19 = (main_1_5_reg <<< (64'd9 % 64'd64));
end
always @(posedge clk) begin
	/* main: %16*/
	/*   %19 = shl i64 %5, 9*/
	if ((cur_state == LEGUP_F_main_BB__16_4)) begin
		main_16_19_reg <= main_16_19;
		if (start == 1'b0 && ^(main_16_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_16_19_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %16*/
	/*   %20 = and i64 %19, 2305843009213693440*/
		main_16_20 = (main_16_19 & 64'd2305843009213693440);
end
always @(posedge clk) begin
	/* main: %16*/
	/*   %20 = and i64 %19, 2305843009213693440*/
	if ((cur_state == LEGUP_F_main_BB__16_4)) begin
		main_16_20_reg <= main_16_20;
		if (start == 1'b0 && ^(main_16_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_16_20_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %16*/
	/*   %21 = icmp sgt i32 %15, 0*/
		main_16_21 = ($signed(main_1_15_reg) > $signed(32'd0));
end
always @(posedge clk) begin
	/* main: %16*/
	/*   %21 = icmp sgt i32 %15, 0*/
	if ((cur_state == LEGUP_F_main_BB__16_4)) begin
		main_16_21_reg <= main_16_21;
		if (start == 1'b0 && ^(main_16_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_16_21_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %22*/
	/*   %23 = icmp eq i32 %12, 2047*/
		main_22_23 = (main_1_12_reg == 32'd2047);
end
always @(posedge clk) begin
	/* main: %22*/
	/*   %23 = icmp eq i32 %12, 2047*/
	if ((cur_state == LEGUP_F_main_BB__22_5)) begin
		main_22_23_reg <= main_22_23;
		if (start == 1'b0 && ^(main_22_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_22_23_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %24*/
	/*   %25 = icmp eq i64 %18, 0*/
		main_24_25 = (main_16_18_reg == 64'd0);
end
always @(posedge clk) begin
	/* main: %24*/
	/*   %25 = icmp eq i64 %18, 0*/
	if ((cur_state == LEGUP_F_main_BB__24_6)) begin
		main_24_25_reg <= main_24_25;
		if (start == 1'b0 && ^(main_24_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_24_25_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %26*/
	/*   %27 = and i64 %3, 9221120237041090560*/
		main_26_27 = (main_1_3_reg & 64'd9221120237041090560);
end
always @(posedge clk) begin
	/* main: %26*/
	/*   %27 = and i64 %3, 9221120237041090560*/
	if ((cur_state == LEGUP_F_main_BB__26_7)) begin
		main_26_27_reg <= main_26_27;
		if (start == 1'b0 && ^(main_26_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_26_27_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %26*/
	/*   %28 = icmp eq i64 %27, 9218868437227405312*/
		main_26_28 = (main_26_27 == 64'd9218868437227405312);
end
always @(posedge clk) begin
	/* main: %26*/
	/*   %28 = icmp eq i64 %27, 9218868437227405312*/
	if ((cur_state == LEGUP_F_main_BB__26_7)) begin
		main_26_28_reg <= main_26_28;
		if (start == 1'b0 && ^(main_26_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_26_28_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %29*/
	/*   %30 = and i64 %3, 2251799813685247*/
		main_29_30 = (main_1_3_reg & 64'd2251799813685247);
end
always @(posedge clk) begin
	/* main: %29*/
	/*   %30 = and i64 %3, 2251799813685247*/
	if ((cur_state == LEGUP_F_main_BB__29_8)) begin
		main_29_30_reg <= main_29_30;
		if (start == 1'b0 && ^(main_29_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_29_30_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %29*/
	/*   %31 = icmp ne i64 %30, 0*/
		main_29_31 = (main_29_30 != 64'd0);
end
always @(posedge clk) begin
	/* main: %29*/
	/*   %31 = icmp ne i64 %30, 0*/
	if ((cur_state == LEGUP_F_main_BB__29_8)) begin
		main_29_31_reg <= main_29_31;
		if (start == 1'b0 && ^(main_29_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_29_31_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit1.i10.i.i*/
	/*   %32 = phi i1 [ false, %26 ], [ %31, %29 ]*/
	if ((((cur_state == LEGUP_F_main_BB__26_7) & (memory_controller_waitrequest == 1'd0)) & (main_26_28 == 1'd0))) begin
		main_float64_is_signaling_nanexit1i10ii_32 = 1'd0;
	end
	/* main: %float64_is_signaling_nan.exit1.i10.i.i*/
	/*   %32 = phi i1 [ false, %26 ], [ %31, %29 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__29_8) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_float64_is_signaling_nanexit1i10ii_32 = main_29_31;
	end
end
always @(posedge clk) begin
	/* main: %float64_is_signaling_nan.exit1.i10.i.i*/
	/*   %32 = phi i1 [ false, %26 ], [ %31, %29 ]*/
	if ((((cur_state == LEGUP_F_main_BB__26_7) & (memory_controller_waitrequest == 1'd0)) & (main_26_28 == 1'd0))) begin
		main_float64_is_signaling_nanexit1i10ii_32_reg <= main_float64_is_signaling_nanexit1i10ii_32;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexit1i10ii_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexit1i10ii_32_reg"); $finish; end
	end
	/* main: %float64_is_signaling_nan.exit1.i10.i.i*/
	/*   %32 = phi i1 [ false, %26 ], [ %31, %29 ]*/
	if (((cur_state == LEGUP_F_main_BB__29_8) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_is_signaling_nanexit1i10ii_32_reg <= main_float64_is_signaling_nanexit1i10ii_32;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexit1i10ii_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexit1i10ii_32_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit1.i10.i.i*/
	/*   %33 = trunc i64 %5 to i63*/
		main_float64_is_signaling_nanexit1i10ii_33 = main_1_5_reg[62:0];
end
always @(posedge clk) begin
	/* main: %float64_is_signaling_nan.exit1.i10.i.i*/
	/*   %33 = trunc i64 %5 to i63*/
	if ((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexit1i10ii_9)) begin
		main_float64_is_signaling_nanexit1i10ii_33_reg <= main_float64_is_signaling_nanexit1i10ii_33;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexit1i10ii_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexit1i10ii_33_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit1.i10.i.i*/
	/*   %34 = icmp ugt i63 %33, -4503599627370496*/
		main_float64_is_signaling_nanexit1i10ii_34 = (main_float64_is_signaling_nanexit1i10ii_33 > -63'd4503599627370496);
end
always @(posedge clk) begin
	/* main: %float64_is_signaling_nan.exit1.i10.i.i*/
	/*   %34 = icmp ugt i63 %33, -4503599627370496*/
	if ((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexit1i10ii_9)) begin
		main_float64_is_signaling_nanexit1i10ii_34_reg <= main_float64_is_signaling_nanexit1i10ii_34;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexit1i10ii_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexit1i10ii_34_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit1.i10.i.i*/
	/*   %35 = and i64 %5, 9221120237041090560*/
		main_float64_is_signaling_nanexit1i10ii_35 = (main_1_5_reg & 64'd9221120237041090560);
end
always @(posedge clk) begin
	/* main: %float64_is_signaling_nan.exit1.i10.i.i*/
	/*   %35 = and i64 %5, 9221120237041090560*/
	if ((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexit1i10ii_9)) begin
		main_float64_is_signaling_nanexit1i10ii_35_reg <= main_float64_is_signaling_nanexit1i10ii_35;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexit1i10ii_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexit1i10ii_35_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit1.i10.i.i*/
	/*   %36 = icmp eq i64 %35, 9218868437227405312*/
		main_float64_is_signaling_nanexit1i10ii_36 = (main_float64_is_signaling_nanexit1i10ii_35 == 64'd9218868437227405312);
end
always @(posedge clk) begin
	/* main: %float64_is_signaling_nan.exit1.i10.i.i*/
	/*   %36 = icmp eq i64 %35, 9218868437227405312*/
	if ((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexit1i10ii_9)) begin
		main_float64_is_signaling_nanexit1i10ii_36_reg <= main_float64_is_signaling_nanexit1i10ii_36;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexit1i10ii_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexit1i10ii_36_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %37*/
	/*   %38 = and i64 %5, 2251799813685247*/
		main_37_38 = (main_1_5_reg & 64'd2251799813685247);
end
always @(posedge clk) begin
	/* main: %37*/
	/*   %38 = and i64 %5, 2251799813685247*/
	if ((cur_state == LEGUP_F_main_BB__37_10)) begin
		main_37_38_reg <= main_37_38;
		if (start == 1'b0 && ^(main_37_38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_37_38_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %37*/
	/*   %39 = icmp ne i64 %38, 0*/
		main_37_39 = (main_37_38 != 64'd0);
end
always @(posedge clk) begin
	/* main: %37*/
	/*   %39 = icmp ne i64 %38, 0*/
	if ((cur_state == LEGUP_F_main_BB__37_10)) begin
		main_37_39_reg <= main_37_39;
		if (start == 1'b0 && ^(main_37_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_37_39_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit.i11.i.i*/
	/*   %40 = phi i1 [ false, %float64_is_signaling_nan.exit1.i10.i.i ], [ %39, %37 ]*/
	if ((((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexit1i10ii_9) & (memory_controller_waitrequest == 1'd0)) & (main_float64_is_signaling_nanexit1i10ii_36 == 1'd0))) begin
		main_float64_is_signaling_nanexiti11ii_40 = 1'd0;
	end
	/* main: %float64_is_signaling_nan.exit.i11.i.i*/
	/*   %40 = phi i1 [ false, %float64_is_signaling_nan.exit1.i10.i.i ], [ %39, %37 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__37_10) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_float64_is_signaling_nanexiti11ii_40 = main_37_39;
	end
end
always @(posedge clk) begin
	/* main: %float64_is_signaling_nan.exit.i11.i.i*/
	/*   %40 = phi i1 [ false, %float64_is_signaling_nan.exit1.i10.i.i ], [ %39, %37 ]*/
	if ((((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexit1i10ii_9) & (memory_controller_waitrequest == 1'd0)) & (main_float64_is_signaling_nanexit1i10ii_36 == 1'd0))) begin
		main_float64_is_signaling_nanexiti11ii_40_reg <= main_float64_is_signaling_nanexiti11ii_40;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexiti11ii_40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexiti11ii_40_reg"); $finish; end
	end
	/* main: %float64_is_signaling_nan.exit.i11.i.i*/
	/*   %40 = phi i1 [ false, %float64_is_signaling_nan.exit1.i10.i.i ], [ %39, %37 ]*/
	if (((cur_state == LEGUP_F_main_BB__37_10) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_is_signaling_nanexiti11ii_40_reg <= main_float64_is_signaling_nanexiti11ii_40;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexiti11ii_40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexiti11ii_40_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit.i11.i.i*/
	/*   %41 = or i1 %32, %40*/
		main_float64_is_signaling_nanexiti11ii_41 = (main_float64_is_signaling_nanexit1i10ii_32_reg | main_float64_is_signaling_nanexiti11ii_40_reg);
end
always @(posedge clk) begin
	/* main: %float64_is_signaling_nan.exit.i11.i.i*/
	/*   %41 = or i1 %32, %40*/
	if ((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexiti11ii_11)) begin
		main_float64_is_signaling_nanexiti11ii_41_reg <= main_float64_is_signaling_nanexiti11ii_41;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexiti11ii_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexiti11ii_41_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.thread.i12.i.i*/
	/*   %42 = load i32* @float_exception_flags, align 4, !tbaa !5*/
		main_threadi12ii_42 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %.thread.i12.i.i*/
	/*   %42 = load i32* @float_exception_flags, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_threadi12ii_14)) begin
		main_threadi12ii_42_reg <= main_threadi12ii_42;
		if (start == 1'b0 && ^(main_threadi12ii_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi12ii_42_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.thread.i12.i.i*/
	/*   %43 = or i32 %42, 16*/
		main_threadi12ii_43 = (main_threadi12ii_42 | 32'd16);
end
always @(posedge clk) begin
	/* main: %.thread.i12.i.i*/
	/*   %43 = or i32 %42, 16*/
	if ((cur_state == LEGUP_F_main_BB_threadi12ii_14)) begin
		main_threadi12ii_43_reg <= main_threadi12ii_43;
		if (start == 1'b0 && ^(main_threadi12ii_43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi12ii_43_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %propagateFloat64NaN.exit16.i.i*/
	/*   %.sink.i13.i.i = phi i1 [ %40, %.thread.i12.i.i ], [ %34, %float64_is_signaling_nan.exit.i11.i.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexiti11ii_11) & (memory_controller_waitrequest == 1'd0)) & (main_float64_is_signaling_nanexiti11ii_41 == 1'd0))) begin
		main_propagateFloat64NaNexit16ii_sinki13ii = main_float64_is_signaling_nanexit1i10ii_34_reg;
	end
	/* main: %propagateFloat64NaN.exit16.i.i*/
	/*   %.sink.i13.i.i = phi i1 [ %40, %.thread.i12.i.i ], [ %34, %float64_is_signaling_nan.exit.i11.i.i ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_threadi12ii_15) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_propagateFloat64NaNexit16ii_sinki13ii = main_float64_is_signaling_nanexiti11ii_40_reg;
	end
end
always @(posedge clk) begin
	/* main: %propagateFloat64NaN.exit16.i.i*/
	/*   %.sink.i13.i.i = phi i1 [ %40, %.thread.i12.i.i ], [ %34, %float64_is_signaling_nan.exit.i11.i.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexiti11ii_11) & (memory_controller_waitrequest == 1'd0)) & (main_float64_is_signaling_nanexiti11ii_41 == 1'd0))) begin
		main_propagateFloat64NaNexit16ii_sinki13ii_reg <= main_propagateFloat64NaNexit16ii_sinki13ii;
		if (start == 1'b0 && ^(main_propagateFloat64NaNexit16ii_sinki13ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_propagateFloat64NaNexit16ii_sinki13ii_reg"); $finish; end
	end
	/* main: %propagateFloat64NaN.exit16.i.i*/
	/*   %.sink.i13.i.i = phi i1 [ %40, %.thread.i12.i.i ], [ %34, %float64_is_signaling_nan.exit.i11.i.i ]*/
	if (((cur_state == LEGUP_F_main_BB_threadi12ii_15) & (memory_controller_waitrequest == 1'd0))) begin
		main_propagateFloat64NaNexit16ii_sinki13ii_reg <= main_propagateFloat64NaNexit16ii_sinki13ii;
		if (start == 1'b0 && ^(main_propagateFloat64NaNexit16ii_sinki13ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_propagateFloat64NaNexit16ii_sinki13ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %propagateFloat64NaN.exit16.i.i*/
	/*   %.mux2.v.i14.i.i = select i1 %.sink.i13.i.i, i64 %5, i64 %3*/
		main_propagateFloat64NaNexit16ii_mux2vi14ii = (main_propagateFloat64NaNexit16ii_sinki13ii_reg ? main_1_5_reg : main_1_3_reg);
end
always @(posedge clk) begin
	/* main: %propagateFloat64NaN.exit16.i.i*/
	/*   %.mux2.v.i14.i.i = select i1 %.sink.i13.i.i, i64 %5, i64 %3*/
	if ((cur_state == LEGUP_F_main_BB_propagateFloat64NaNexit16ii_16)) begin
		main_propagateFloat64NaNexit16ii_mux2vi14ii_reg <= main_propagateFloat64NaNexit16ii_mux2vi14ii;
		if (start == 1'b0 && ^(main_propagateFloat64NaNexit16ii_mux2vi14ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_propagateFloat64NaNexit16ii_mux2vi14ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %propagateFloat64NaN.exit16.i.i*/
	/*   %.mux2.i15.i.i = or i64 %.mux2.v.i14.i.i, 2251799813685248*/
		main_propagateFloat64NaNexit16ii_mux2i15ii = (main_propagateFloat64NaNexit16ii_mux2vi14ii | 64'd2251799813685248);
end
always @(posedge clk) begin
	/* main: %propagateFloat64NaN.exit16.i.i*/
	/*   %.mux2.i15.i.i = or i64 %.mux2.v.i14.i.i, 2251799813685248*/
	if ((cur_state == LEGUP_F_main_BB_propagateFloat64NaNexit16ii_16)) begin
		main_propagateFloat64NaNexit16ii_mux2i15ii_reg <= main_propagateFloat64NaNexit16ii_mux2i15ii;
		if (start == 1'b0 && ^(main_propagateFloat64NaNexit16ii_mux2i15ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_propagateFloat64NaNexit16ii_mux2i15ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %44*/
	/*   %45 = icmp eq i32 %14, 0*/
		main_44_45 = (main_1_14_reg == 32'd0);
end
always @(posedge clk) begin
	/* main: %44*/
	/*   %45 = icmp eq i32 %14, 0*/
	if ((cur_state == LEGUP_F_main_BB__44_17)) begin
		main_44_45_reg <= main_44_45;
		if (start == 1'b0 && ^(main_44_45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_44_45_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %44*/
	/*   %46 = or i64 %20, 2305843009213693952*/
		main_44_46 = (main_16_20_reg | 64'd2305843009213693952);
end
always @(posedge clk) begin
	/* main: %44*/
	/*   %46 = or i64 %20, 2305843009213693952*/
	if ((cur_state == LEGUP_F_main_BB__44_17)) begin
		main_44_46_reg <= main_44_46;
		if (start == 1'b0 && ^(main_44_46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_44_46_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %44*/
	/*   %47 = select i1 %45, i64 %20, i64 %46*/
		main_44_47 = (main_44_45 ? main_16_20_reg : main_44_46);
end
always @(posedge clk) begin
	/* main: %44*/
	/*   %47 = select i1 %45, i64 %20, i64 %46*/
	if ((cur_state == LEGUP_F_main_BB__44_17)) begin
		main_44_47_reg <= main_44_47;
		if (start == 1'b0 && ^(main_44_47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_44_47_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %44*/
	/*   %48 = sext i1 %45 to i32*/
		main_44_48 = $signed(main_44_45);
end
always @(posedge clk) begin
	/* main: %44*/
	/*   %48 = sext i1 %45 to i32*/
	if ((cur_state == LEGUP_F_main_BB__44_17)) begin
		main_44_48_reg <= main_44_48;
		if (start == 1'b0 && ^(main_44_48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_44_48_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %44*/
	/*   %expDiff.0.i2.i = add nsw i32 %48, %15*/
		main_44_expDiff0i2i = main_signed_add_32_0;
end
always @(*) begin
/* main: %44*/
/*   %expDiff.0.i2.i = add nsw i32 %48, %15*/
	main_44_expDiff0i2i_reg = main_1_gep_reg;
end
always @(*) begin
	/* main: %44*/
	/*   %49 = icmp eq i32 %expDiff.0.i2.i, 0*/
		main_44_49 = (main_44_expDiff0i2i == 32'd0);
end
always @(posedge clk) begin
	/* main: %44*/
	/*   %49 = icmp eq i32 %expDiff.0.i2.i, 0*/
	if ((cur_state == LEGUP_F_main_BB__44_17)) begin
		main_44_49_reg <= main_44_49;
		if (start == 1'b0 && ^(main_44_49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_44_49_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %50*/
	/*   %51 = icmp slt i32 %expDiff.0.i2.i, 64*/
		main_50_51 = ($signed(main_44_expDiff0i2i_reg) < $signed(32'd64));
end
always @(posedge clk) begin
	/* main: %50*/
	/*   %51 = icmp slt i32 %expDiff.0.i2.i, 64*/
	if ((cur_state == LEGUP_F_main_BB__50_18)) begin
		main_50_51_reg <= main_50_51;
		if (start == 1'b0 && ^(main_50_51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_50_51_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %52*/
	/*   %53 = zext i32 %expDiff.0.i2.i to i64*/
		main_52_53 = main_44_expDiff0i2i_reg;
end
always @(posedge clk) begin
	/* main: %52*/
	/*   %53 = zext i32 %expDiff.0.i2.i to i64*/
	if ((cur_state == LEGUP_F_main_BB__52_19)) begin
		main_52_53_reg <= main_52_53;
		if (start == 1'b0 && ^(main_52_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_52_53_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %52*/
	/*   %54 = lshr i64 %47, %53*/
		main_52_54 = (main_44_47_reg >>> (main_52_53 % 64'd64));
end
always @(posedge clk) begin
	/* main: %52*/
	/*   %54 = lshr i64 %47, %53*/
	if ((cur_state == LEGUP_F_main_BB__52_19)) begin
		main_52_54_reg <= main_52_54;
		if (start == 1'b0 && ^(main_52_54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_52_54_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %52*/
	/*   %55 = sub nsw i32 0, %expDiff.0.i2.i*/
		main_52_55 = main_signed_subtract_32_0;
end
always @(*) begin
/* main: %52*/
/*   %55 = sub nsw i32 0, %expDiff.0.i2.i*/
	main_52_55_reg = main_1_15_reg;
end
always @(*) begin
	/* main: %52*/
	/*   %56 = and i32 %55, 63*/
		main_52_56 = (main_52_55 & 32'd63);
end
always @(posedge clk) begin
	/* main: %52*/
	/*   %56 = and i32 %55, 63*/
	if ((cur_state == LEGUP_F_main_BB__52_19)) begin
		main_52_56_reg <= main_52_56;
		if (start == 1'b0 && ^(main_52_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_52_56_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %52*/
	/*   %57 = zext i32 %56 to i64*/
		main_52_57 = main_52_56;
end
always @(posedge clk) begin
	/* main: %52*/
	/*   %57 = zext i32 %56 to i64*/
	if ((cur_state == LEGUP_F_main_BB__52_19)) begin
		main_52_57_reg <= main_52_57;
		if (start == 1'b0 && ^(main_52_57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_52_57_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %52*/
	/*   %58 = shl i64 %47, %57*/
		main_52_58 = (main_44_47_reg <<< (main_52_57 % 64'd64));
end
always @(posedge clk) begin
	/* main: %52*/
	/*   %58 = shl i64 %47, %57*/
	if ((cur_state == LEGUP_F_main_BB__52_19)) begin
		main_52_58_reg <= main_52_58;
		if (start == 1'b0 && ^(main_52_58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_52_58_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %52*/
	/*   %59 = icmp ne i64 %58, 0*/
		main_52_59 = (main_52_58 != 64'd0);
end
always @(posedge clk) begin
	/* main: %52*/
	/*   %59 = icmp ne i64 %58, 0*/
	if ((cur_state == LEGUP_F_main_BB__52_19)) begin
		main_52_59_reg <= main_52_59;
		if (start == 1'b0 && ^(main_52_59) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_52_59_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %52*/
	/*   %60 = zext i1 %59 to i64*/
		main_52_60 = main_52_59;
end
always @(posedge clk) begin
	/* main: %52*/
	/*   %60 = zext i1 %59 to i64*/
	if ((cur_state == LEGUP_F_main_BB__52_19)) begin
		main_52_60_reg <= main_52_60;
		if (start == 1'b0 && ^(main_52_60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_52_60_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %52*/
	/*   %61 = or i64 %60, %54*/
		main_52_61 = (main_52_60 | main_52_54);
end
always @(posedge clk) begin
	/* main: %52*/
	/*   %61 = or i64 %60, %54*/
	if ((cur_state == LEGUP_F_main_BB__52_19)) begin
		main_52_61_reg <= main_52_61;
		if (start == 1'b0 && ^(main_52_61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_52_61_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %62*/
	/*   %63 = icmp ne i64 %47, 0*/
		main_62_63 = (main_44_47_reg != 64'd0);
end
always @(posedge clk) begin
	/* main: %62*/
	/*   %63 = icmp ne i64 %47, 0*/
	if ((cur_state == LEGUP_F_main_BB__62_20)) begin
		main_62_63_reg <= main_62_63;
		if (start == 1'b0 && ^(main_62_63) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_62_63_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %62*/
	/*   %64 = zext i1 %63 to i64*/
		main_62_64 = main_62_63;
end
always @(posedge clk) begin
	/* main: %62*/
	/*   %64 = zext i1 %63 to i64*/
	if ((cur_state == LEGUP_F_main_BB__62_20)) begin
		main_62_64_reg <= main_62_64;
		if (start == 1'b0 && ^(main_62_64) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_62_64_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %65*/
	/*   %66 = icmp slt i32 %15, 0*/
		main_65_66 = ($signed(main_1_15_reg) < $signed(32'd0));
end
always @(posedge clk) begin
	/* main: %65*/
	/*   %66 = icmp slt i32 %15, 0*/
	if ((cur_state == LEGUP_F_main_BB__65_21)) begin
		main_65_66_reg <= main_65_66;
		if (start == 1'b0 && ^(main_65_66) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_65_66_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %67*/
	/*   %68 = icmp eq i32 %14, 2047*/
		main_67_68 = (main_1_14_reg == 32'd2047);
end
always @(posedge clk) begin
	/* main: %67*/
	/*   %68 = icmp eq i32 %14, 2047*/
	if ((cur_state == LEGUP_F_main_BB__67_22)) begin
		main_67_68_reg <= main_67_68;
		if (start == 1'b0 && ^(main_67_68) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_67_68_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %69*/
	/*   %70 = icmp eq i64 %20, 0*/
		main_69_70 = (main_16_20_reg == 64'd0);
end
always @(posedge clk) begin
	/* main: %69*/
	/*   %70 = icmp eq i64 %20, 0*/
	if ((cur_state == LEGUP_F_main_BB__69_23)) begin
		main_69_70_reg <= main_69_70;
		if (start == 1'b0 && ^(main_69_70) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_69_70_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %71*/
	/*   %72 = and i64 %3, 9221120237041090560*/
		main_71_72 = (main_1_3_reg & 64'd9221120237041090560);
end
always @(posedge clk) begin
	/* main: %71*/
	/*   %72 = and i64 %3, 9221120237041090560*/
	if ((cur_state == LEGUP_F_main_BB__71_24)) begin
		main_71_72_reg <= main_71_72;
		if (start == 1'b0 && ^(main_71_72) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_71_72_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %71*/
	/*   %73 = icmp eq i64 %72, 9218868437227405312*/
		main_71_73 = (main_71_72 == 64'd9218868437227405312);
end
always @(posedge clk) begin
	/* main: %71*/
	/*   %73 = icmp eq i64 %72, 9218868437227405312*/
	if ((cur_state == LEGUP_F_main_BB__71_24)) begin
		main_71_73_reg <= main_71_73;
		if (start == 1'b0 && ^(main_71_73) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_71_73_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %74*/
	/*   %75 = and i64 %3, 2251799813685247*/
		main_74_75 = (main_1_3_reg & 64'd2251799813685247);
end
always @(posedge clk) begin
	/* main: %74*/
	/*   %75 = and i64 %3, 2251799813685247*/
	if ((cur_state == LEGUP_F_main_BB__74_25)) begin
		main_74_75_reg <= main_74_75;
		if (start == 1'b0 && ^(main_74_75) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_74_75_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %74*/
	/*   %76 = icmp ne i64 %75, 0*/
		main_74_76 = (main_74_75 != 64'd0);
end
always @(posedge clk) begin
	/* main: %74*/
	/*   %76 = icmp ne i64 %75, 0*/
	if ((cur_state == LEGUP_F_main_BB__74_25)) begin
		main_74_76_reg <= main_74_76;
		if (start == 1'b0 && ^(main_74_76) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_74_76_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit1.i1.i.i*/
	/*   %77 = phi i1 [ false, %71 ], [ %76, %74 ]*/
	if ((((cur_state == LEGUP_F_main_BB__71_24) & (memory_controller_waitrequest == 1'd0)) & (main_71_73 == 1'd0))) begin
		main_float64_is_signaling_nanexit1i1ii_77 = 1'd0;
	end
	/* main: %float64_is_signaling_nan.exit1.i1.i.i*/
	/*   %77 = phi i1 [ false, %71 ], [ %76, %74 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__74_25) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_float64_is_signaling_nanexit1i1ii_77 = main_74_76;
	end
end
always @(posedge clk) begin
	/* main: %float64_is_signaling_nan.exit1.i1.i.i*/
	/*   %77 = phi i1 [ false, %71 ], [ %76, %74 ]*/
	if ((((cur_state == LEGUP_F_main_BB__71_24) & (memory_controller_waitrequest == 1'd0)) & (main_71_73 == 1'd0))) begin
		main_float64_is_signaling_nanexit1i1ii_77_reg <= main_float64_is_signaling_nanexit1i1ii_77;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexit1i1ii_77) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexit1i1ii_77_reg"); $finish; end
	end
	/* main: %float64_is_signaling_nan.exit1.i1.i.i*/
	/*   %77 = phi i1 [ false, %71 ], [ %76, %74 ]*/
	if (((cur_state == LEGUP_F_main_BB__74_25) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_is_signaling_nanexit1i1ii_77_reg <= main_float64_is_signaling_nanexit1i1ii_77;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexit1i1ii_77) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexit1i1ii_77_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit1.i1.i.i*/
	/*   %78 = trunc i64 %5 to i63*/
		main_float64_is_signaling_nanexit1i1ii_78 = main_1_5_reg[62:0];
end
always @(posedge clk) begin
	/* main: %float64_is_signaling_nan.exit1.i1.i.i*/
	/*   %78 = trunc i64 %5 to i63*/
	if ((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexit1i1ii_26)) begin
		main_float64_is_signaling_nanexit1i1ii_78_reg <= main_float64_is_signaling_nanexit1i1ii_78;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexit1i1ii_78) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexit1i1ii_78_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit1.i1.i.i*/
	/*   %79 = icmp ugt i63 %78, -4503599627370496*/
		main_float64_is_signaling_nanexit1i1ii_79 = (main_float64_is_signaling_nanexit1i1ii_78 > -63'd4503599627370496);
end
always @(posedge clk) begin
	/* main: %float64_is_signaling_nan.exit1.i1.i.i*/
	/*   %79 = icmp ugt i63 %78, -4503599627370496*/
	if ((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexit1i1ii_26)) begin
		main_float64_is_signaling_nanexit1i1ii_79_reg <= main_float64_is_signaling_nanexit1i1ii_79;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexit1i1ii_79) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexit1i1ii_79_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit1.i1.i.i*/
	/*   %80 = and i64 %5, 9221120237041090560*/
		main_float64_is_signaling_nanexit1i1ii_80 = (main_1_5_reg & 64'd9221120237041090560);
end
always @(posedge clk) begin
	/* main: %float64_is_signaling_nan.exit1.i1.i.i*/
	/*   %80 = and i64 %5, 9221120237041090560*/
	if ((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexit1i1ii_26)) begin
		main_float64_is_signaling_nanexit1i1ii_80_reg <= main_float64_is_signaling_nanexit1i1ii_80;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexit1i1ii_80) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexit1i1ii_80_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit1.i1.i.i*/
	/*   %81 = icmp eq i64 %80, 9218868437227405312*/
		main_float64_is_signaling_nanexit1i1ii_81 = (main_float64_is_signaling_nanexit1i1ii_80 == 64'd9218868437227405312);
end
always @(posedge clk) begin
	/* main: %float64_is_signaling_nan.exit1.i1.i.i*/
	/*   %81 = icmp eq i64 %80, 9218868437227405312*/
	if ((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexit1i1ii_26)) begin
		main_float64_is_signaling_nanexit1i1ii_81_reg <= main_float64_is_signaling_nanexit1i1ii_81;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexit1i1ii_81) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexit1i1ii_81_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %82*/
	/*   %83 = and i64 %5, 2251799813685247*/
		main_82_83 = (main_1_5_reg & 64'd2251799813685247);
end
always @(posedge clk) begin
	/* main: %82*/
	/*   %83 = and i64 %5, 2251799813685247*/
	if ((cur_state == LEGUP_F_main_BB__82_27)) begin
		main_82_83_reg <= main_82_83;
		if (start == 1'b0 && ^(main_82_83) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_82_83_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %82*/
	/*   %84 = icmp ne i64 %83, 0*/
		main_82_84 = (main_82_83 != 64'd0);
end
always @(posedge clk) begin
	/* main: %82*/
	/*   %84 = icmp ne i64 %83, 0*/
	if ((cur_state == LEGUP_F_main_BB__82_27)) begin
		main_82_84_reg <= main_82_84;
		if (start == 1'b0 && ^(main_82_84) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_82_84_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit.i2.i.i*/
	/*   %85 = phi i1 [ false, %float64_is_signaling_nan.exit1.i1.i.i ], [ %84, %82 ]*/
	if ((((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexit1i1ii_26) & (memory_controller_waitrequest == 1'd0)) & (main_float64_is_signaling_nanexit1i1ii_81 == 1'd0))) begin
		main_float64_is_signaling_nanexiti2ii_85 = 1'd0;
	end
	/* main: %float64_is_signaling_nan.exit.i2.i.i*/
	/*   %85 = phi i1 [ false, %float64_is_signaling_nan.exit1.i1.i.i ], [ %84, %82 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__82_27) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_float64_is_signaling_nanexiti2ii_85 = main_82_84;
	end
end
always @(posedge clk) begin
	/* main: %float64_is_signaling_nan.exit.i2.i.i*/
	/*   %85 = phi i1 [ false, %float64_is_signaling_nan.exit1.i1.i.i ], [ %84, %82 ]*/
	if ((((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexit1i1ii_26) & (memory_controller_waitrequest == 1'd0)) & (main_float64_is_signaling_nanexit1i1ii_81 == 1'd0))) begin
		main_float64_is_signaling_nanexiti2ii_85_reg <= main_float64_is_signaling_nanexiti2ii_85;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexiti2ii_85) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexiti2ii_85_reg"); $finish; end
	end
	/* main: %float64_is_signaling_nan.exit.i2.i.i*/
	/*   %85 = phi i1 [ false, %float64_is_signaling_nan.exit1.i1.i.i ], [ %84, %82 ]*/
	if (((cur_state == LEGUP_F_main_BB__82_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_is_signaling_nanexiti2ii_85_reg <= main_float64_is_signaling_nanexiti2ii_85;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexiti2ii_85) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexiti2ii_85_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit.i2.i.i*/
	/*   %86 = or i1 %77, %85*/
		main_float64_is_signaling_nanexiti2ii_86 = (main_float64_is_signaling_nanexit1i1ii_77_reg | main_float64_is_signaling_nanexiti2ii_85_reg);
end
always @(posedge clk) begin
	/* main: %float64_is_signaling_nan.exit.i2.i.i*/
	/*   %86 = or i1 %77, %85*/
	if ((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexiti2ii_28)) begin
		main_float64_is_signaling_nanexiti2ii_86_reg <= main_float64_is_signaling_nanexiti2ii_86;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexiti2ii_86) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexiti2ii_86_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.thread.i3.i.i*/
	/*   %87 = load i32* @float_exception_flags, align 4, !tbaa !5*/
		main_threadi3ii_87 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %.thread.i3.i.i*/
	/*   %87 = load i32* @float_exception_flags, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_threadi3ii_31)) begin
		main_threadi3ii_87_reg <= main_threadi3ii_87;
		if (start == 1'b0 && ^(main_threadi3ii_87) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi3ii_87_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.thread.i3.i.i*/
	/*   %88 = or i32 %87, 16*/
		main_threadi3ii_88 = (main_threadi3ii_87 | 32'd16);
end
always @(posedge clk) begin
	/* main: %.thread.i3.i.i*/
	/*   %88 = or i32 %87, 16*/
	if ((cur_state == LEGUP_F_main_BB_threadi3ii_31)) begin
		main_threadi3ii_88_reg <= main_threadi3ii_88;
		if (start == 1'b0 && ^(main_threadi3ii_88) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi3ii_88_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %propagateFloat64NaN.exit7.i.i*/
	/*   %.sink.i4.i.i = phi i1 [ %85, %.thread.i3.i.i ], [ %79, %float64_is_signaling_nan.exit.i2.i.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexiti2ii_28) & (memory_controller_waitrequest == 1'd0)) & (main_float64_is_signaling_nanexiti2ii_86 == 1'd0))) begin
		main_propagateFloat64NaNexit7ii_sinki4ii = main_float64_is_signaling_nanexit1i1ii_79_reg;
	end
	/* main: %propagateFloat64NaN.exit7.i.i*/
	/*   %.sink.i4.i.i = phi i1 [ %85, %.thread.i3.i.i ], [ %79, %float64_is_signaling_nan.exit.i2.i.i ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_threadi3ii_32) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_propagateFloat64NaNexit7ii_sinki4ii = main_float64_is_signaling_nanexiti2ii_85_reg;
	end
end
always @(posedge clk) begin
	/* main: %propagateFloat64NaN.exit7.i.i*/
	/*   %.sink.i4.i.i = phi i1 [ %85, %.thread.i3.i.i ], [ %79, %float64_is_signaling_nan.exit.i2.i.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexiti2ii_28) & (memory_controller_waitrequest == 1'd0)) & (main_float64_is_signaling_nanexiti2ii_86 == 1'd0))) begin
		main_propagateFloat64NaNexit7ii_sinki4ii_reg <= main_propagateFloat64NaNexit7ii_sinki4ii;
		if (start == 1'b0 && ^(main_propagateFloat64NaNexit7ii_sinki4ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_propagateFloat64NaNexit7ii_sinki4ii_reg"); $finish; end
	end
	/* main: %propagateFloat64NaN.exit7.i.i*/
	/*   %.sink.i4.i.i = phi i1 [ %85, %.thread.i3.i.i ], [ %79, %float64_is_signaling_nan.exit.i2.i.i ]*/
	if (((cur_state == LEGUP_F_main_BB_threadi3ii_32) & (memory_controller_waitrequest == 1'd0))) begin
		main_propagateFloat64NaNexit7ii_sinki4ii_reg <= main_propagateFloat64NaNexit7ii_sinki4ii;
		if (start == 1'b0 && ^(main_propagateFloat64NaNexit7ii_sinki4ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_propagateFloat64NaNexit7ii_sinki4ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %propagateFloat64NaN.exit7.i.i*/
	/*   %.mux2.v.i5.i.i = select i1 %.sink.i4.i.i, i64 %5, i64 %3*/
		main_propagateFloat64NaNexit7ii_mux2vi5ii = (main_propagateFloat64NaNexit7ii_sinki4ii_reg ? main_1_5_reg : main_1_3_reg);
end
always @(posedge clk) begin
	/* main: %propagateFloat64NaN.exit7.i.i*/
	/*   %.mux2.v.i5.i.i = select i1 %.sink.i4.i.i, i64 %5, i64 %3*/
	if ((cur_state == LEGUP_F_main_BB_propagateFloat64NaNexit7ii_33)) begin
		main_propagateFloat64NaNexit7ii_mux2vi5ii_reg <= main_propagateFloat64NaNexit7ii_mux2vi5ii;
		if (start == 1'b0 && ^(main_propagateFloat64NaNexit7ii_mux2vi5ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_propagateFloat64NaNexit7ii_mux2vi5ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %propagateFloat64NaN.exit7.i.i*/
	/*   %.mux2.i6.i.i = or i64 %.mux2.v.i5.i.i, 2251799813685248*/
		main_propagateFloat64NaNexit7ii_mux2i6ii = (main_propagateFloat64NaNexit7ii_mux2vi5ii | 64'd2251799813685248);
end
always @(posedge clk) begin
	/* main: %propagateFloat64NaN.exit7.i.i*/
	/*   %.mux2.i6.i.i = or i64 %.mux2.v.i5.i.i, 2251799813685248*/
	if ((cur_state == LEGUP_F_main_BB_propagateFloat64NaNexit7ii_33)) begin
		main_propagateFloat64NaNexit7ii_mux2i6ii_reg <= main_propagateFloat64NaNexit7ii_mux2i6ii;
		if (start == 1'b0 && ^(main_propagateFloat64NaNexit7ii_mux2i6ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_propagateFloat64NaNexit7ii_mux2i6ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %89*/
	/*   %90 = shl nuw i64 %6, 63*/
		main_89_90 = (main_1_6_reg <<< (64'd63 % 64'd64));
end
always @(posedge clk) begin
	/* main: %89*/
	/*   %90 = shl nuw i64 %6, 63*/
	if ((cur_state == LEGUP_F_main_BB__89_34)) begin
		main_89_90_reg <= main_89_90;
		if (start == 1'b0 && ^(main_89_90) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_89_90_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %89*/
	/*   %91 = or i64 %90, 9218868437227405312*/
		main_89_91 = (main_89_90 | 64'd9218868437227405312);
end
always @(posedge clk) begin
	/* main: %89*/
	/*   %91 = or i64 %90, 9218868437227405312*/
	if ((cur_state == LEGUP_F_main_BB__89_34)) begin
		main_89_91_reg <= main_89_91;
		if (start == 1'b0 && ^(main_89_91) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_89_91_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %92*/
	/*   %93 = icmp eq i32 %12, 0*/
		main_92_93 = (main_1_12_reg == 32'd0);
end
always @(posedge clk) begin
	/* main: %92*/
	/*   %93 = icmp eq i32 %12, 0*/
	if ((cur_state == LEGUP_F_main_BB__92_35)) begin
		main_92_93_reg <= main_92_93;
		if (start == 1'b0 && ^(main_92_93) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_92_93_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %92*/
	/*   %94 = or i64 %18, 2305843009213693952*/
		main_92_94 = (main_16_18_reg | 64'd2305843009213693952);
end
always @(posedge clk) begin
	/* main: %92*/
	/*   %94 = or i64 %18, 2305843009213693952*/
	if ((cur_state == LEGUP_F_main_BB__92_35)) begin
		main_92_94_reg <= main_92_94;
		if (start == 1'b0 && ^(main_92_94) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_92_94_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %92*/
	/*   %95 = select i1 %93, i64 %18, i64 %94*/
		main_92_95 = (main_92_93 ? main_16_18_reg : main_92_94);
end
always @(posedge clk) begin
	/* main: %92*/
	/*   %95 = select i1 %93, i64 %18, i64 %94*/
	if ((cur_state == LEGUP_F_main_BB__92_35)) begin
		main_92_95_reg <= main_92_95;
		if (start == 1'b0 && ^(main_92_95) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_92_95_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %92*/
	/*   %96 = zext i1 %93 to i32*/
		main_92_96 = main_92_93;
end
always @(posedge clk) begin
	/* main: %92*/
	/*   %96 = zext i1 %93 to i32*/
	if ((cur_state == LEGUP_F_main_BB__92_35)) begin
		main_92_96_reg <= main_92_96;
		if (start == 1'b0 && ^(main_92_96) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_92_96_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %92*/
	/*   %expDiff.1.i3.i = add nsw i32 %15, %96*/
		main_92_expDiff1i3i = main_signed_add_32_0;
end
always @(*) begin
/* main: %92*/
/*   %expDiff.1.i3.i = add nsw i32 %15, %96*/
	main_92_expDiff1i3i_reg = main_1_gep_reg;
end
always @(*) begin
	/* main: %92*/
	/*   %97 = sub nsw i32 0, %expDiff.1.i3.i*/
		main_92_97 = main_signed_subtract_32_0;
end
always @(posedge clk) begin
	/* main: %92*/
	/*   %97 = sub nsw i32 0, %expDiff.1.i3.i*/
	if ((cur_state == LEGUP_F_main_BB__92_35)) begin
		main_92_97_reg <= main_92_97;
		if (start == 1'b0 && ^(main_92_97) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_92_97_reg"); $finish; end
	end
	/* main: %217*/
	/*   %222 = sub nsw i32 0, %expDiff.0.i.i*/
	if ((cur_state == LEGUP_F_main_BB__217_93)) begin
		main_92_97_reg <= main_217_222;
		if (start == 1'b0 && ^(main_217_222) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_92_97_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %92*/
	/*   %98 = icmp eq i32 %expDiff.1.i3.i, 0*/
		main_92_98 = (main_92_expDiff1i3i == 32'd0);
end
always @(posedge clk) begin
	/* main: %92*/
	/*   %98 = icmp eq i32 %expDiff.1.i3.i, 0*/
	if ((cur_state == LEGUP_F_main_BB__92_35)) begin
		main_92_98_reg <= main_92_98;
		if (start == 1'b0 && ^(main_92_98) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_92_98_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %99*/
	/*   %100 = icmp sgt i32 %expDiff.1.i3.i, -64*/
		main_99_100 = ($signed(main_92_expDiff1i3i_reg) > $signed(-32'd64));
end
always @(posedge clk) begin
	/* main: %99*/
	/*   %100 = icmp sgt i32 %expDiff.1.i3.i, -64*/
	if ((cur_state == LEGUP_F_main_BB__99_36)) begin
		main_99_100_reg <= main_99_100;
		if (start == 1'b0 && ^(main_99_100) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_99_100_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %101*/
	/*   %102 = zext i32 %97 to i64*/
		main_101_102 = main_92_97_reg;
end
always @(posedge clk) begin
	/* main: %101*/
	/*   %102 = zext i32 %97 to i64*/
	if ((cur_state == LEGUP_F_main_BB__101_37)) begin
		main_101_102_reg <= main_101_102;
		if (start == 1'b0 && ^(main_101_102) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_101_102_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %101*/
	/*   %103 = lshr i64 %95, %102*/
		main_101_103 = (main_92_95_reg >>> (main_101_102 % 64'd64));
end
always @(posedge clk) begin
	/* main: %101*/
	/*   %103 = lshr i64 %95, %102*/
	if ((cur_state == LEGUP_F_main_BB__101_37)) begin
		main_101_103_reg <= main_101_103;
		if (start == 1'b0 && ^(main_101_103) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_101_103_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %101*/
	/*   %104 = and i32 %expDiff.1.i3.i, 63*/
		main_101_104 = (main_92_expDiff1i3i_reg & 32'd63);
end
always @(posedge clk) begin
	/* main: %101*/
	/*   %104 = and i32 %expDiff.1.i3.i, 63*/
	if ((cur_state == LEGUP_F_main_BB__101_37)) begin
		main_101_104_reg <= main_101_104;
		if (start == 1'b0 && ^(main_101_104) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_101_104_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %101*/
	/*   %105 = zext i32 %104 to i64*/
		main_101_105 = main_101_104;
end
always @(posedge clk) begin
	/* main: %101*/
	/*   %105 = zext i32 %104 to i64*/
	if ((cur_state == LEGUP_F_main_BB__101_37)) begin
		main_101_105_reg <= main_101_105;
		if (start == 1'b0 && ^(main_101_105) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_101_105_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %101*/
	/*   %106 = shl i64 %95, %105*/
		main_101_106 = (main_92_95_reg <<< (main_101_105 % 64'd64));
end
always @(posedge clk) begin
	/* main: %101*/
	/*   %106 = shl i64 %95, %105*/
	if ((cur_state == LEGUP_F_main_BB__101_37)) begin
		main_101_106_reg <= main_101_106;
		if (start == 1'b0 && ^(main_101_106) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_101_106_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %101*/
	/*   %107 = icmp ne i64 %106, 0*/
		main_101_107 = (main_101_106 != 64'd0);
end
always @(posedge clk) begin
	/* main: %101*/
	/*   %107 = icmp ne i64 %106, 0*/
	if ((cur_state == LEGUP_F_main_BB__101_37)) begin
		main_101_107_reg <= main_101_107;
		if (start == 1'b0 && ^(main_101_107) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_101_107_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %101*/
	/*   %108 = zext i1 %107 to i64*/
		main_101_108 = main_101_107;
end
always @(posedge clk) begin
	/* main: %101*/
	/*   %108 = zext i1 %107 to i64*/
	if ((cur_state == LEGUP_F_main_BB__101_37)) begin
		main_101_108_reg <= main_101_108;
		if (start == 1'b0 && ^(main_101_108) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_101_108_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %101*/
	/*   %109 = or i64 %108, %103*/
		main_101_109 = (main_101_108 | main_101_103);
end
always @(posedge clk) begin
	/* main: %101*/
	/*   %109 = or i64 %108, %103*/
	if ((cur_state == LEGUP_F_main_BB__101_37)) begin
		main_101_109_reg <= main_101_109;
		if (start == 1'b0 && ^(main_101_109) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_101_109_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %110*/
	/*   %111 = icmp ne i64 %95, 0*/
		main_110_111 = (main_92_95_reg != 64'd0);
end
always @(posedge clk) begin
	/* main: %110*/
	/*   %111 = icmp ne i64 %95, 0*/
	if ((cur_state == LEGUP_F_main_BB__110_38)) begin
		main_110_111_reg <= main_110_111;
		if (start == 1'b0 && ^(main_110_111) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_110_111_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %110*/
	/*   %112 = zext i1 %111 to i64*/
		main_110_112 = main_110_111;
end
always @(posedge clk) begin
	/* main: %110*/
	/*   %112 = zext i1 %111 to i64*/
	if ((cur_state == LEGUP_F_main_BB__110_38)) begin
		main_110_112_reg <= main_110_112;
		if (start == 1'b0 && ^(main_110_112) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_110_112_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %114*/
	/*   %115 = or i64 %20, %18*/
		main_114_115 = (main_16_20_reg | main_16_18_reg);
end
always @(posedge clk) begin
	/* main: %114*/
	/*   %115 = or i64 %20, %18*/
	if ((cur_state == LEGUP_F_main_BB__114_40)) begin
		main_114_115_reg <= main_114_115;
		if (start == 1'b0 && ^(main_114_115) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_114_115_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %114*/
	/*   %116 = icmp eq i64 %115, 0*/
		main_114_116 = (main_114_115 == 64'd0);
end
always @(posedge clk) begin
	/* main: %114*/
	/*   %116 = icmp eq i64 %115, 0*/
	if ((cur_state == LEGUP_F_main_BB__114_40)) begin
		main_114_116_reg <= main_114_116;
		if (start == 1'b0 && ^(main_114_116) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_114_116_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %117*/
	/*   %118 = and i64 %3, 9221120237041090560*/
		main_117_118 = (main_1_3_reg & 64'd9221120237041090560);
end
always @(posedge clk) begin
	/* main: %117*/
	/*   %118 = and i64 %3, 9221120237041090560*/
	if ((cur_state == LEGUP_F_main_BB__117_41)) begin
		main_117_118_reg <= main_117_118;
		if (start == 1'b0 && ^(main_117_118) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_117_118_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %117*/
	/*   %119 = icmp eq i64 %118, 9218868437227405312*/
		main_117_119 = (main_117_118 == 64'd9218868437227405312);
end
always @(posedge clk) begin
	/* main: %117*/
	/*   %119 = icmp eq i64 %118, 9218868437227405312*/
	if ((cur_state == LEGUP_F_main_BB__117_41)) begin
		main_117_119_reg <= main_117_119;
		if (start == 1'b0 && ^(main_117_119) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_117_119_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %120*/
	/*   %121 = and i64 %3, 2251799813685247*/
		main_120_121 = (main_1_3_reg & 64'd2251799813685247);
end
always @(posedge clk) begin
	/* main: %120*/
	/*   %121 = and i64 %3, 2251799813685247*/
	if ((cur_state == LEGUP_F_main_BB__120_42)) begin
		main_120_121_reg <= main_120_121;
		if (start == 1'b0 && ^(main_120_121) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_120_121_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %120*/
	/*   %122 = icmp ne i64 %121, 0*/
		main_120_122 = (main_120_121 != 64'd0);
end
always @(posedge clk) begin
	/* main: %120*/
	/*   %122 = icmp ne i64 %121, 0*/
	if ((cur_state == LEGUP_F_main_BB__120_42)) begin
		main_120_122_reg <= main_120_122;
		if (start == 1'b0 && ^(main_120_122) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_120_122_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit1.i.i4.i*/
	/*   %123 = phi i1 [ false, %117 ], [ %122, %120 ]*/
	if ((((cur_state == LEGUP_F_main_BB__117_41) & (memory_controller_waitrequest == 1'd0)) & (main_117_119 == 1'd0))) begin
		main_float64_is_signaling_nanexit1ii4i_123 = 1'd0;
	end
	/* main: %float64_is_signaling_nan.exit1.i.i4.i*/
	/*   %123 = phi i1 [ false, %117 ], [ %122, %120 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__120_42) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_float64_is_signaling_nanexit1ii4i_123 = main_120_122;
	end
end
always @(posedge clk) begin
	/* main: %float64_is_signaling_nan.exit1.i.i4.i*/
	/*   %123 = phi i1 [ false, %117 ], [ %122, %120 ]*/
	if ((((cur_state == LEGUP_F_main_BB__117_41) & (memory_controller_waitrequest == 1'd0)) & (main_117_119 == 1'd0))) begin
		main_float64_is_signaling_nanexit1ii4i_123_reg <= main_float64_is_signaling_nanexit1ii4i_123;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexit1ii4i_123) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexit1ii4i_123_reg"); $finish; end
	end
	/* main: %float64_is_signaling_nan.exit1.i.i4.i*/
	/*   %123 = phi i1 [ false, %117 ], [ %122, %120 ]*/
	if (((cur_state == LEGUP_F_main_BB__120_42) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_is_signaling_nanexit1ii4i_123_reg <= main_float64_is_signaling_nanexit1ii4i_123;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexit1ii4i_123) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexit1ii4i_123_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit1.i.i4.i*/
	/*   %124 = trunc i64 %5 to i63*/
		main_float64_is_signaling_nanexit1ii4i_124 = main_1_5_reg[62:0];
end
always @(posedge clk) begin
	/* main: %float64_is_signaling_nan.exit1.i.i4.i*/
	/*   %124 = trunc i64 %5 to i63*/
	if ((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexit1ii4i_43)) begin
		main_float64_is_signaling_nanexit1ii4i_124_reg <= main_float64_is_signaling_nanexit1ii4i_124;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexit1ii4i_124) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexit1ii4i_124_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit1.i.i4.i*/
	/*   %125 = icmp ugt i63 %124, -4503599627370496*/
		main_float64_is_signaling_nanexit1ii4i_125 = (main_float64_is_signaling_nanexit1ii4i_124 > -63'd4503599627370496);
end
always @(posedge clk) begin
	/* main: %float64_is_signaling_nan.exit1.i.i4.i*/
	/*   %125 = icmp ugt i63 %124, -4503599627370496*/
	if ((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexit1ii4i_43)) begin
		main_float64_is_signaling_nanexit1ii4i_125_reg <= main_float64_is_signaling_nanexit1ii4i_125;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexit1ii4i_125) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexit1ii4i_125_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit1.i.i4.i*/
	/*   %126 = and i64 %5, 9221120237041090560*/
		main_float64_is_signaling_nanexit1ii4i_126 = (main_1_5_reg & 64'd9221120237041090560);
end
always @(posedge clk) begin
	/* main: %float64_is_signaling_nan.exit1.i.i4.i*/
	/*   %126 = and i64 %5, 9221120237041090560*/
	if ((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexit1ii4i_43)) begin
		main_float64_is_signaling_nanexit1ii4i_126_reg <= main_float64_is_signaling_nanexit1ii4i_126;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexit1ii4i_126) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexit1ii4i_126_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit1.i.i4.i*/
	/*   %127 = icmp eq i64 %126, 9218868437227405312*/
		main_float64_is_signaling_nanexit1ii4i_127 = (main_float64_is_signaling_nanexit1ii4i_126 == 64'd9218868437227405312);
end
always @(posedge clk) begin
	/* main: %float64_is_signaling_nan.exit1.i.i4.i*/
	/*   %127 = icmp eq i64 %126, 9218868437227405312*/
	if ((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexit1ii4i_43)) begin
		main_float64_is_signaling_nanexit1ii4i_127_reg <= main_float64_is_signaling_nanexit1ii4i_127;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexit1ii4i_127) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexit1ii4i_127_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %128*/
	/*   %129 = and i64 %5, 2251799813685247*/
		main_128_129 = (main_1_5_reg & 64'd2251799813685247);
end
always @(posedge clk) begin
	/* main: %128*/
	/*   %129 = and i64 %5, 2251799813685247*/
	if ((cur_state == LEGUP_F_main_BB__128_44)) begin
		main_128_129_reg <= main_128_129;
		if (start == 1'b0 && ^(main_128_129) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_128_129_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %128*/
	/*   %130 = icmp ne i64 %129, 0*/
		main_128_130 = (main_128_129 != 64'd0);
end
always @(posedge clk) begin
	/* main: %128*/
	/*   %130 = icmp ne i64 %129, 0*/
	if ((cur_state == LEGUP_F_main_BB__128_44)) begin
		main_128_130_reg <= main_128_130;
		if (start == 1'b0 && ^(main_128_130) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_128_130_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit.i.i5.i*/
	/*   %131 = phi i1 [ false, %float64_is_signaling_nan.exit1.i.i4.i ], [ %130, %128 ]*/
	if ((((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexit1ii4i_43) & (memory_controller_waitrequest == 1'd0)) & (main_float64_is_signaling_nanexit1ii4i_127 == 1'd0))) begin
		main_float64_is_signaling_nanexitii5i_131 = 1'd0;
	end
	/* main: %float64_is_signaling_nan.exit.i.i5.i*/
	/*   %131 = phi i1 [ false, %float64_is_signaling_nan.exit1.i.i4.i ], [ %130, %128 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__128_44) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_float64_is_signaling_nanexitii5i_131 = main_128_130;
	end
end
always @(posedge clk) begin
	/* main: %float64_is_signaling_nan.exit.i.i5.i*/
	/*   %131 = phi i1 [ false, %float64_is_signaling_nan.exit1.i.i4.i ], [ %130, %128 ]*/
	if ((((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexit1ii4i_43) & (memory_controller_waitrequest == 1'd0)) & (main_float64_is_signaling_nanexit1ii4i_127 == 1'd0))) begin
		main_float64_is_signaling_nanexitii5i_131_reg <= main_float64_is_signaling_nanexitii5i_131;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexitii5i_131) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexitii5i_131_reg"); $finish; end
	end
	/* main: %float64_is_signaling_nan.exit.i.i5.i*/
	/*   %131 = phi i1 [ false, %float64_is_signaling_nan.exit1.i.i4.i ], [ %130, %128 ]*/
	if (((cur_state == LEGUP_F_main_BB__128_44) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_is_signaling_nanexitii5i_131_reg <= main_float64_is_signaling_nanexitii5i_131;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexitii5i_131) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexitii5i_131_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit.i.i5.i*/
	/*   %132 = or i1 %123, %131*/
		main_float64_is_signaling_nanexitii5i_132 = (main_float64_is_signaling_nanexit1ii4i_123_reg | main_float64_is_signaling_nanexitii5i_131_reg);
end
always @(posedge clk) begin
	/* main: %float64_is_signaling_nan.exit.i.i5.i*/
	/*   %132 = or i1 %123, %131*/
	if ((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexitii5i_45)) begin
		main_float64_is_signaling_nanexitii5i_132_reg <= main_float64_is_signaling_nanexitii5i_132;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexitii5i_132) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexitii5i_132_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.thread.i.i6.i*/
	/*   %133 = load i32* @float_exception_flags, align 4, !tbaa !5*/
		main_threadii6i_133 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %.thread.i.i6.i*/
	/*   %133 = load i32* @float_exception_flags, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_threadii6i_48)) begin
		main_threadii6i_133_reg <= main_threadii6i_133;
		if (start == 1'b0 && ^(main_threadii6i_133) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadii6i_133_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.thread.i.i6.i*/
	/*   %134 = or i32 %133, 16*/
		main_threadii6i_134 = (main_threadii6i_133 | 32'd16);
end
always @(posedge clk) begin
	/* main: %.thread.i.i6.i*/
	/*   %134 = or i32 %133, 16*/
	if ((cur_state == LEGUP_F_main_BB_threadii6i_48)) begin
		main_threadii6i_134_reg <= main_threadii6i_134;
		if (start == 1'b0 && ^(main_threadii6i_134) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadii6i_134_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %propagateFloat64NaN.exit.i10.i*/
	/*   %.sink.i.i7.i = phi i1 [ %131, %.thread.i.i6.i ], [ %125, %float64_is_signaling_nan.exit.i.i5.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexitii5i_45) & (memory_controller_waitrequest == 1'd0)) & (main_float64_is_signaling_nanexitii5i_132 == 1'd0))) begin
		main_propagateFloat64NaNexiti10i_sinkii7i = main_float64_is_signaling_nanexit1ii4i_125_reg;
	end
	/* main: %propagateFloat64NaN.exit.i10.i*/
	/*   %.sink.i.i7.i = phi i1 [ %131, %.thread.i.i6.i ], [ %125, %float64_is_signaling_nan.exit.i.i5.i ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_threadii6i_49) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_propagateFloat64NaNexiti10i_sinkii7i = main_float64_is_signaling_nanexitii5i_131_reg;
	end
end
always @(posedge clk) begin
	/* main: %propagateFloat64NaN.exit.i10.i*/
	/*   %.sink.i.i7.i = phi i1 [ %131, %.thread.i.i6.i ], [ %125, %float64_is_signaling_nan.exit.i.i5.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexitii5i_45) & (memory_controller_waitrequest == 1'd0)) & (main_float64_is_signaling_nanexitii5i_132 == 1'd0))) begin
		main_propagateFloat64NaNexiti10i_sinkii7i_reg <= main_propagateFloat64NaNexiti10i_sinkii7i;
		if (start == 1'b0 && ^(main_propagateFloat64NaNexiti10i_sinkii7i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_propagateFloat64NaNexiti10i_sinkii7i_reg"); $finish; end
	end
	/* main: %propagateFloat64NaN.exit.i10.i*/
	/*   %.sink.i.i7.i = phi i1 [ %131, %.thread.i.i6.i ], [ %125, %float64_is_signaling_nan.exit.i.i5.i ]*/
	if (((cur_state == LEGUP_F_main_BB_threadii6i_49) & (memory_controller_waitrequest == 1'd0))) begin
		main_propagateFloat64NaNexiti10i_sinkii7i_reg <= main_propagateFloat64NaNexiti10i_sinkii7i;
		if (start == 1'b0 && ^(main_propagateFloat64NaNexiti10i_sinkii7i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_propagateFloat64NaNexiti10i_sinkii7i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %propagateFloat64NaN.exit.i10.i*/
	/*   %.mux2.v.i.i8.i = select i1 %.sink.i.i7.i, i64 %5, i64 %3*/
		main_propagateFloat64NaNexiti10i_mux2vii8i = (main_propagateFloat64NaNexiti10i_sinkii7i_reg ? main_1_5_reg : main_1_3_reg);
end
always @(posedge clk) begin
	/* main: %propagateFloat64NaN.exit.i10.i*/
	/*   %.mux2.v.i.i8.i = select i1 %.sink.i.i7.i, i64 %5, i64 %3*/
	if ((cur_state == LEGUP_F_main_BB_propagateFloat64NaNexiti10i_50)) begin
		main_propagateFloat64NaNexiti10i_mux2vii8i_reg <= main_propagateFloat64NaNexiti10i_mux2vii8i;
		if (start == 1'b0 && ^(main_propagateFloat64NaNexiti10i_mux2vii8i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_propagateFloat64NaNexiti10i_mux2vii8i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %propagateFloat64NaN.exit.i10.i*/
	/*   %.mux2.i.i9.i = or i64 %.mux2.v.i.i8.i, 2251799813685248*/
		main_propagateFloat64NaNexiti10i_mux2ii9i = (main_propagateFloat64NaNexiti10i_mux2vii8i | 64'd2251799813685248);
end
always @(posedge clk) begin
	/* main: %propagateFloat64NaN.exit.i10.i*/
	/*   %.mux2.i.i9.i = or i64 %.mux2.v.i.i8.i, 2251799813685248*/
	if ((cur_state == LEGUP_F_main_BB_propagateFloat64NaNexiti10i_50)) begin
		main_propagateFloat64NaNexiti10i_mux2ii9i_reg <= main_propagateFloat64NaNexiti10i_mux2ii9i;
		if (start == 1'b0 && ^(main_propagateFloat64NaNexiti10i_mux2ii9i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_propagateFloat64NaNexiti10i_mux2ii9i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %135*/
	/*   %136 = add nuw nsw i64 %20, %18*/
		main_135_136 = main_signed_add_64_0;
end
always @(posedge clk) begin
	/* main: %135*/
	/*   %136 = add nuw nsw i64 %20, %18*/
	if ((cur_state == LEGUP_F_main_BB__135_51)) begin
		main_135_136_reg <= main_135_136;
		if (start == 1'b0 && ^(main_135_136) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_135_136_reg"); $finish; end
	end
	/* main: %140*/
	/*   %142 = add nuw i64 %141, %20*/
	if ((cur_state == LEGUP_F_main_BB__140_52)) begin
		main_135_136_reg <= main_140_142;
		if (start == 1'b0 && ^(main_140_142) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_135_136_reg"); $finish; end
	end
	/* main: %shift64RightJamming.exit9.i.i*/
	/*   %146 = add i64 %145, %144*/
	if ((cur_state == LEGUP_F_main_BB_shift64RightJammingexit9ii_53)) begin
		main_135_136_reg <= main_shift64RightJammingexit9ii_146;
		if (start == 1'b0 && ^(main_shift64RightJammingexit9ii_146) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_135_136_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %135*/
	/*   %137 = lshr exact i64 %136, 9*/
		main_135_137 = (main_135_136 >>> (64'd9 % 64'd64));
end
always @(posedge clk) begin
	/* main: %135*/
	/*   %137 = lshr exact i64 %136, 9*/
	if ((cur_state == LEGUP_F_main_BB__135_51)) begin
		main_135_137_reg <= main_135_137;
		if (start == 1'b0 && ^(main_135_137) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_135_137_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %135*/
	/*   %138 = shl nuw i64 %6, 63*/
		main_135_138 = (main_1_6_reg <<< (64'd63 % 64'd64));
end
always @(posedge clk) begin
	/* main: %135*/
	/*   %138 = shl nuw i64 %6, 63*/
	if ((cur_state == LEGUP_F_main_BB__135_51)) begin
		main_135_138_reg <= main_135_138;
		if (start == 1'b0 && ^(main_135_138) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_135_138_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %135*/
	/*   %139 = or i64 %137, %138*/
		main_135_139 = (main_135_137 | main_135_138);
end
always @(posedge clk) begin
	/* main: %135*/
	/*   %139 = or i64 %137, %138*/
	if ((cur_state == LEGUP_F_main_BB__135_51)) begin
		main_135_139_reg <= main_135_139;
		if (start == 1'b0 && ^(main_135_139) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_135_139_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %140*/
	/*   %141 = or i64 %18, 4611686018427387904*/
		main_140_141 = (main_16_18_reg | 64'd4611686018427387904);
end
always @(posedge clk) begin
	/* main: %140*/
	/*   %141 = or i64 %18, 4611686018427387904*/
	if ((cur_state == LEGUP_F_main_BB__140_52)) begin
		main_140_141_reg <= main_140_141;
		if (start == 1'b0 && ^(main_140_141) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_140_141_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %140*/
	/*   %142 = add nuw i64 %141, %20*/
		main_140_142 = main_signed_add_64_0;
end
always @(*) begin
/* main: %140*/
/*   %142 = add nuw i64 %141, %20*/
	main_140_142_reg = main_135_136_reg;
end
always @(*) begin
	/* main: %shift64RightJamming.exit9.i.i*/
	/*   %143 = phi i64 [ %18, %44 ], [ %18, %52 ], [ %18, %62 ], [ %109, %101 ], [ %112, %110 ], [ %95, %92 ]*/
	if ((((cur_state == LEGUP_F_main_BB__44_17) & (memory_controller_waitrequest == 1'd0)) & (main_44_49 == 1'd1))) begin
		main_shift64RightJammingexit9ii_143 = main_16_18_reg;
	end
	/* main: %shift64RightJamming.exit9.i.i*/
	/*   %143 = phi i64 [ %18, %44 ], [ %18, %52 ], [ %18, %62 ], [ %109, %101 ], [ %112, %110 ], [ %95, %92 ]*/
	else if (((cur_state == LEGUP_F_main_BB__52_19) & (memory_controller_waitrequest == 1'd0))) begin
		main_shift64RightJammingexit9ii_143 = main_16_18_reg;
	end
	/* main: %shift64RightJamming.exit9.i.i*/
	/*   %143 = phi i64 [ %18, %44 ], [ %18, %52 ], [ %18, %62 ], [ %109, %101 ], [ %112, %110 ], [ %95, %92 ]*/
	else if (((cur_state == LEGUP_F_main_BB__62_20) & (memory_controller_waitrequest == 1'd0))) begin
		main_shift64RightJammingexit9ii_143 = main_16_18_reg;
	end
	/* main: %shift64RightJamming.exit9.i.i*/
	/*   %143 = phi i64 [ %18, %44 ], [ %18, %52 ], [ %18, %62 ], [ %109, %101 ], [ %112, %110 ], [ %95, %92 ]*/
	else if ((((cur_state == LEGUP_F_main_BB__92_35) & (memory_controller_waitrequest == 1'd0)) & (main_92_98 == 1'd1))) begin
		main_shift64RightJammingexit9ii_143 = main_92_95;
	end
	/* main: %shift64RightJamming.exit9.i.i*/
	/*   %143 = phi i64 [ %18, %44 ], [ %18, %52 ], [ %18, %62 ], [ %109, %101 ], [ %112, %110 ], [ %95, %92 ]*/
	else if (((cur_state == LEGUP_F_main_BB__101_37) & (memory_controller_waitrequest == 1'd0))) begin
		main_shift64RightJammingexit9ii_143 = main_101_109;
	end
	/* main: %shift64RightJamming.exit9.i.i*/
	/*   %143 = phi i64 [ %18, %44 ], [ %18, %52 ], [ %18, %62 ], [ %109, %101 ], [ %112, %110 ], [ %95, %92 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__110_38) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_shift64RightJammingexit9ii_143 = main_110_112;
	end
end
always @(posedge clk) begin
	/* main: %shift64RightJamming.exit9.i.i*/
	/*   %143 = phi i64 [ %18, %44 ], [ %18, %52 ], [ %18, %62 ], [ %109, %101 ], [ %112, %110 ], [ %95, %92 ]*/
	if ((((cur_state == LEGUP_F_main_BB__44_17) & (memory_controller_waitrequest == 1'd0)) & (main_44_49 == 1'd1))) begin
		main_shift64RightJammingexit9ii_143_reg <= main_shift64RightJammingexit9ii_143;
		if (start == 1'b0 && ^(main_shift64RightJammingexit9ii_143) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_shift64RightJammingexit9ii_143_reg"); $finish; end
	end
	/* main: %shift64RightJamming.exit9.i.i*/
	/*   %143 = phi i64 [ %18, %44 ], [ %18, %52 ], [ %18, %62 ], [ %109, %101 ], [ %112, %110 ], [ %95, %92 ]*/
	if (((cur_state == LEGUP_F_main_BB__52_19) & (memory_controller_waitrequest == 1'd0))) begin
		main_shift64RightJammingexit9ii_143_reg <= main_shift64RightJammingexit9ii_143;
		if (start == 1'b0 && ^(main_shift64RightJammingexit9ii_143) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_shift64RightJammingexit9ii_143_reg"); $finish; end
	end
	/* main: %shift64RightJamming.exit9.i.i*/
	/*   %143 = phi i64 [ %18, %44 ], [ %18, %52 ], [ %18, %62 ], [ %109, %101 ], [ %112, %110 ], [ %95, %92 ]*/
	if (((cur_state == LEGUP_F_main_BB__62_20) & (memory_controller_waitrequest == 1'd0))) begin
		main_shift64RightJammingexit9ii_143_reg <= main_shift64RightJammingexit9ii_143;
		if (start == 1'b0 && ^(main_shift64RightJammingexit9ii_143) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_shift64RightJammingexit9ii_143_reg"); $finish; end
	end
	/* main: %shift64RightJamming.exit9.i.i*/
	/*   %143 = phi i64 [ %18, %44 ], [ %18, %52 ], [ %18, %62 ], [ %109, %101 ], [ %112, %110 ], [ %95, %92 ]*/
	if ((((cur_state == LEGUP_F_main_BB__92_35) & (memory_controller_waitrequest == 1'd0)) & (main_92_98 == 1'd1))) begin
		main_shift64RightJammingexit9ii_143_reg <= main_shift64RightJammingexit9ii_143;
		if (start == 1'b0 && ^(main_shift64RightJammingexit9ii_143) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_shift64RightJammingexit9ii_143_reg"); $finish; end
	end
	/* main: %shift64RightJamming.exit9.i.i*/
	/*   %143 = phi i64 [ %18, %44 ], [ %18, %52 ], [ %18, %62 ], [ %109, %101 ], [ %112, %110 ], [ %95, %92 ]*/
	if (((cur_state == LEGUP_F_main_BB__101_37) & (memory_controller_waitrequest == 1'd0))) begin
		main_shift64RightJammingexit9ii_143_reg <= main_shift64RightJammingexit9ii_143;
		if (start == 1'b0 && ^(main_shift64RightJammingexit9ii_143) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_shift64RightJammingexit9ii_143_reg"); $finish; end
	end
	/* main: %shift64RightJamming.exit9.i.i*/
	/*   %143 = phi i64 [ %18, %44 ], [ %18, %52 ], [ %18, %62 ], [ %109, %101 ], [ %112, %110 ], [ %95, %92 ]*/
	if (((cur_state == LEGUP_F_main_BB__110_38) & (memory_controller_waitrequest == 1'd0))) begin
		main_shift64RightJammingexit9ii_143_reg <= main_shift64RightJammingexit9ii_143;
		if (start == 1'b0 && ^(main_shift64RightJammingexit9ii_143) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_shift64RightJammingexit9ii_143_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %shift64RightJamming.exit9.i.i*/
	/*   %144 = phi i64 [ %47, %44 ], [ %61, %52 ], [ %64, %62 ], [ %20, %101 ], [ %20, %110 ], [ %20, %92 ]*/
	if ((((cur_state == LEGUP_F_main_BB__44_17) & (memory_controller_waitrequest == 1'd0)) & (main_44_49 == 1'd1))) begin
		main_shift64RightJammingexit9ii_144 = main_44_47;
	end
	/* main: %shift64RightJamming.exit9.i.i*/
	/*   %144 = phi i64 [ %47, %44 ], [ %61, %52 ], [ %64, %62 ], [ %20, %101 ], [ %20, %110 ], [ %20, %92 ]*/
	else if (((cur_state == LEGUP_F_main_BB__52_19) & (memory_controller_waitrequest == 1'd0))) begin
		main_shift64RightJammingexit9ii_144 = main_52_61;
	end
	/* main: %shift64RightJamming.exit9.i.i*/
	/*   %144 = phi i64 [ %47, %44 ], [ %61, %52 ], [ %64, %62 ], [ %20, %101 ], [ %20, %110 ], [ %20, %92 ]*/
	else if (((cur_state == LEGUP_F_main_BB__62_20) & (memory_controller_waitrequest == 1'd0))) begin
		main_shift64RightJammingexit9ii_144 = main_62_64;
	end
	/* main: %shift64RightJamming.exit9.i.i*/
	/*   %144 = phi i64 [ %47, %44 ], [ %61, %52 ], [ %64, %62 ], [ %20, %101 ], [ %20, %110 ], [ %20, %92 ]*/
	else if ((((cur_state == LEGUP_F_main_BB__92_35) & (memory_controller_waitrequest == 1'd0)) & (main_92_98 == 1'd1))) begin
		main_shift64RightJammingexit9ii_144 = main_16_20_reg;
	end
	/* main: %shift64RightJamming.exit9.i.i*/
	/*   %144 = phi i64 [ %47, %44 ], [ %61, %52 ], [ %64, %62 ], [ %20, %101 ], [ %20, %110 ], [ %20, %92 ]*/
	else if (((cur_state == LEGUP_F_main_BB__101_37) & (memory_controller_waitrequest == 1'd0))) begin
		main_shift64RightJammingexit9ii_144 = main_16_20_reg;
	end
	/* main: %shift64RightJamming.exit9.i.i*/
	/*   %144 = phi i64 [ %47, %44 ], [ %61, %52 ], [ %64, %62 ], [ %20, %101 ], [ %20, %110 ], [ %20, %92 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__110_38) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_shift64RightJammingexit9ii_144 = main_16_20_reg;
	end
end
always @(posedge clk) begin
	/* main: %shift64RightJamming.exit9.i.i*/
	/*   %144 = phi i64 [ %47, %44 ], [ %61, %52 ], [ %64, %62 ], [ %20, %101 ], [ %20, %110 ], [ %20, %92 ]*/
	if ((((cur_state == LEGUP_F_main_BB__44_17) & (memory_controller_waitrequest == 1'd0)) & (main_44_49 == 1'd1))) begin
		main_shift64RightJammingexit9ii_144_reg <= main_shift64RightJammingexit9ii_144;
		if (start == 1'b0 && ^(main_shift64RightJammingexit9ii_144) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_shift64RightJammingexit9ii_144_reg"); $finish; end
	end
	/* main: %shift64RightJamming.exit9.i.i*/
	/*   %144 = phi i64 [ %47, %44 ], [ %61, %52 ], [ %64, %62 ], [ %20, %101 ], [ %20, %110 ], [ %20, %92 ]*/
	if (((cur_state == LEGUP_F_main_BB__52_19) & (memory_controller_waitrequest == 1'd0))) begin
		main_shift64RightJammingexit9ii_144_reg <= main_shift64RightJammingexit9ii_144;
		if (start == 1'b0 && ^(main_shift64RightJammingexit9ii_144) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_shift64RightJammingexit9ii_144_reg"); $finish; end
	end
	/* main: %shift64RightJamming.exit9.i.i*/
	/*   %144 = phi i64 [ %47, %44 ], [ %61, %52 ], [ %64, %62 ], [ %20, %101 ], [ %20, %110 ], [ %20, %92 ]*/
	if (((cur_state == LEGUP_F_main_BB__62_20) & (memory_controller_waitrequest == 1'd0))) begin
		main_shift64RightJammingexit9ii_144_reg <= main_shift64RightJammingexit9ii_144;
		if (start == 1'b0 && ^(main_shift64RightJammingexit9ii_144) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_shift64RightJammingexit9ii_144_reg"); $finish; end
	end
	/* main: %shift64RightJamming.exit9.i.i*/
	/*   %144 = phi i64 [ %47, %44 ], [ %61, %52 ], [ %64, %62 ], [ %20, %101 ], [ %20, %110 ], [ %20, %92 ]*/
	if ((((cur_state == LEGUP_F_main_BB__92_35) & (memory_controller_waitrequest == 1'd0)) & (main_92_98 == 1'd1))) begin
		main_shift64RightJammingexit9ii_144_reg <= main_shift64RightJammingexit9ii_144;
		if (start == 1'b0 && ^(main_shift64RightJammingexit9ii_144) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_shift64RightJammingexit9ii_144_reg"); $finish; end
	end
	/* main: %shift64RightJamming.exit9.i.i*/
	/*   %144 = phi i64 [ %47, %44 ], [ %61, %52 ], [ %64, %62 ], [ %20, %101 ], [ %20, %110 ], [ %20, %92 ]*/
	if (((cur_state == LEGUP_F_main_BB__101_37) & (memory_controller_waitrequest == 1'd0))) begin
		main_shift64RightJammingexit9ii_144_reg <= main_shift64RightJammingexit9ii_144;
		if (start == 1'b0 && ^(main_shift64RightJammingexit9ii_144) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_shift64RightJammingexit9ii_144_reg"); $finish; end
	end
	/* main: %shift64RightJamming.exit9.i.i*/
	/*   %144 = phi i64 [ %47, %44 ], [ %61, %52 ], [ %64, %62 ], [ %20, %101 ], [ %20, %110 ], [ %20, %92 ]*/
	if (((cur_state == LEGUP_F_main_BB__110_38) & (memory_controller_waitrequest == 1'd0))) begin
		main_shift64RightJammingexit9ii_144_reg <= main_shift64RightJammingexit9ii_144;
		if (start == 1'b0 && ^(main_shift64RightJammingexit9ii_144) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_shift64RightJammingexit9ii_144_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %shift64RightJamming.exit9.i.i*/
	/*   %zExp.0.i11.i = phi i32 [ %12, %44 ], [ %12, %52 ], [ %12, %62 ], [ %14, %101 ], [ %14, %110 ], [ %14, %92 ]*/
	if ((((cur_state == LEGUP_F_main_BB__44_17) & (memory_controller_waitrequest == 1'd0)) & (main_44_49 == 1'd1))) begin
		main_shift64RightJammingexit9ii_zExp0i11i = main_1_12_reg;
	end
	/* main: %shift64RightJamming.exit9.i.i*/
	/*   %zExp.0.i11.i = phi i32 [ %12, %44 ], [ %12, %52 ], [ %12, %62 ], [ %14, %101 ], [ %14, %110 ], [ %14, %92 ]*/
	else if (((cur_state == LEGUP_F_main_BB__52_19) & (memory_controller_waitrequest == 1'd0))) begin
		main_shift64RightJammingexit9ii_zExp0i11i = main_1_12_reg;
	end
	/* main: %shift64RightJamming.exit9.i.i*/
	/*   %zExp.0.i11.i = phi i32 [ %12, %44 ], [ %12, %52 ], [ %12, %62 ], [ %14, %101 ], [ %14, %110 ], [ %14, %92 ]*/
	else if (((cur_state == LEGUP_F_main_BB__62_20) & (memory_controller_waitrequest == 1'd0))) begin
		main_shift64RightJammingexit9ii_zExp0i11i = main_1_12_reg;
	end
	/* main: %shift64RightJamming.exit9.i.i*/
	/*   %zExp.0.i11.i = phi i32 [ %12, %44 ], [ %12, %52 ], [ %12, %62 ], [ %14, %101 ], [ %14, %110 ], [ %14, %92 ]*/
	else if ((((cur_state == LEGUP_F_main_BB__92_35) & (memory_controller_waitrequest == 1'd0)) & (main_92_98 == 1'd1))) begin
		main_shift64RightJammingexit9ii_zExp0i11i = main_1_14_reg;
	end
	/* main: %shift64RightJamming.exit9.i.i*/
	/*   %zExp.0.i11.i = phi i32 [ %12, %44 ], [ %12, %52 ], [ %12, %62 ], [ %14, %101 ], [ %14, %110 ], [ %14, %92 ]*/
	else if (((cur_state == LEGUP_F_main_BB__101_37) & (memory_controller_waitrequest == 1'd0))) begin
		main_shift64RightJammingexit9ii_zExp0i11i = main_1_14_reg;
	end
	/* main: %shift64RightJamming.exit9.i.i*/
	/*   %zExp.0.i11.i = phi i32 [ %12, %44 ], [ %12, %52 ], [ %12, %62 ], [ %14, %101 ], [ %14, %110 ], [ %14, %92 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__110_38) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_shift64RightJammingexit9ii_zExp0i11i = main_1_14_reg;
	end
end
always @(posedge clk) begin
	/* main: %shift64RightJamming.exit9.i.i*/
	/*   %zExp.0.i11.i = phi i32 [ %12, %44 ], [ %12, %52 ], [ %12, %62 ], [ %14, %101 ], [ %14, %110 ], [ %14, %92 ]*/
	if ((((cur_state == LEGUP_F_main_BB__44_17) & (memory_controller_waitrequest == 1'd0)) & (main_44_49 == 1'd1))) begin
		main_shift64RightJammingexit9ii_zExp0i11i_reg <= main_shift64RightJammingexit9ii_zExp0i11i;
		if (start == 1'b0 && ^(main_shift64RightJammingexit9ii_zExp0i11i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_shift64RightJammingexit9ii_zExp0i11i_reg"); $finish; end
	end
	/* main: %shift64RightJamming.exit9.i.i*/
	/*   %zExp.0.i11.i = phi i32 [ %12, %44 ], [ %12, %52 ], [ %12, %62 ], [ %14, %101 ], [ %14, %110 ], [ %14, %92 ]*/
	if (((cur_state == LEGUP_F_main_BB__52_19) & (memory_controller_waitrequest == 1'd0))) begin
		main_shift64RightJammingexit9ii_zExp0i11i_reg <= main_shift64RightJammingexit9ii_zExp0i11i;
		if (start == 1'b0 && ^(main_shift64RightJammingexit9ii_zExp0i11i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_shift64RightJammingexit9ii_zExp0i11i_reg"); $finish; end
	end
	/* main: %shift64RightJamming.exit9.i.i*/
	/*   %zExp.0.i11.i = phi i32 [ %12, %44 ], [ %12, %52 ], [ %12, %62 ], [ %14, %101 ], [ %14, %110 ], [ %14, %92 ]*/
	if (((cur_state == LEGUP_F_main_BB__62_20) & (memory_controller_waitrequest == 1'd0))) begin
		main_shift64RightJammingexit9ii_zExp0i11i_reg <= main_shift64RightJammingexit9ii_zExp0i11i;
		if (start == 1'b0 && ^(main_shift64RightJammingexit9ii_zExp0i11i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_shift64RightJammingexit9ii_zExp0i11i_reg"); $finish; end
	end
	/* main: %shift64RightJamming.exit9.i.i*/
	/*   %zExp.0.i11.i = phi i32 [ %12, %44 ], [ %12, %52 ], [ %12, %62 ], [ %14, %101 ], [ %14, %110 ], [ %14, %92 ]*/
	if ((((cur_state == LEGUP_F_main_BB__92_35) & (memory_controller_waitrequest == 1'd0)) & (main_92_98 == 1'd1))) begin
		main_shift64RightJammingexit9ii_zExp0i11i_reg <= main_shift64RightJammingexit9ii_zExp0i11i;
		if (start == 1'b0 && ^(main_shift64RightJammingexit9ii_zExp0i11i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_shift64RightJammingexit9ii_zExp0i11i_reg"); $finish; end
	end
	/* main: %shift64RightJamming.exit9.i.i*/
	/*   %zExp.0.i11.i = phi i32 [ %12, %44 ], [ %12, %52 ], [ %12, %62 ], [ %14, %101 ], [ %14, %110 ], [ %14, %92 ]*/
	if (((cur_state == LEGUP_F_main_BB__101_37) & (memory_controller_waitrequest == 1'd0))) begin
		main_shift64RightJammingexit9ii_zExp0i11i_reg <= main_shift64RightJammingexit9ii_zExp0i11i;
		if (start == 1'b0 && ^(main_shift64RightJammingexit9ii_zExp0i11i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_shift64RightJammingexit9ii_zExp0i11i_reg"); $finish; end
	end
	/* main: %shift64RightJamming.exit9.i.i*/
	/*   %zExp.0.i11.i = phi i32 [ %12, %44 ], [ %12, %52 ], [ %12, %62 ], [ %14, %101 ], [ %14, %110 ], [ %14, %92 ]*/
	if (((cur_state == LEGUP_F_main_BB__110_38) & (memory_controller_waitrequest == 1'd0))) begin
		main_shift64RightJammingexit9ii_zExp0i11i_reg <= main_shift64RightJammingexit9ii_zExp0i11i;
		if (start == 1'b0 && ^(main_shift64RightJammingexit9ii_zExp0i11i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_shift64RightJammingexit9ii_zExp0i11i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %shift64RightJamming.exit9.i.i*/
	/*   %145 = or i64 %143, 2305843009213693952*/
		main_shift64RightJammingexit9ii_145 = (main_shift64RightJammingexit9ii_143_reg | 64'd2305843009213693952);
end
always @(posedge clk) begin
	/* main: %shift64RightJamming.exit9.i.i*/
	/*   %145 = or i64 %143, 2305843009213693952*/
	if ((cur_state == LEGUP_F_main_BB_shift64RightJammingexit9ii_53)) begin
		main_shift64RightJammingexit9ii_145_reg <= main_shift64RightJammingexit9ii_145;
		if (start == 1'b0 && ^(main_shift64RightJammingexit9ii_145) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_shift64RightJammingexit9ii_145_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %shift64RightJamming.exit9.i.i*/
	/*   %146 = add i64 %145, %144*/
		main_shift64RightJammingexit9ii_146 = main_signed_add_64_0;
end
always @(*) begin
/* main: %shift64RightJamming.exit9.i.i*/
/*   %146 = add i64 %145, %144*/
	main_shift64RightJammingexit9ii_146_reg = main_135_136_reg;
end
always @(*) begin
	/* main: %shift64RightJamming.exit9.i.i*/
	/*   %147 = shl i64 %146, 1*/
		main_shift64RightJammingexit9ii_147 = (main_shift64RightJammingexit9ii_146 <<< (64'd1 % 64'd64));
end
always @(posedge clk) begin
	/* main: %shift64RightJamming.exit9.i.i*/
	/*   %147 = shl i64 %146, 1*/
	if ((cur_state == LEGUP_F_main_BB_shift64RightJammingexit9ii_53)) begin
		main_shift64RightJammingexit9ii_147_reg <= main_shift64RightJammingexit9ii_147;
		if (start == 1'b0 && ^(main_shift64RightJammingexit9ii_147) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_shift64RightJammingexit9ii_147_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %shift64RightJamming.exit9.i.i*/
	/*   %148 = icmp slt i64 %147, 0*/
		main_shift64RightJammingexit9ii_148 = ($signed(main_shift64RightJammingexit9ii_147) < $signed(64'd0));
end
always @(posedge clk) begin
	/* main: %shift64RightJamming.exit9.i.i*/
	/*   %148 = icmp slt i64 %147, 0*/
	if ((cur_state == LEGUP_F_main_BB_shift64RightJammingexit9ii_53)) begin
		main_shift64RightJammingexit9ii_148_reg <= main_shift64RightJammingexit9ii_148;
		if (start == 1'b0 && ^(main_shift64RightJammingexit9ii_148) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_shift64RightJammingexit9ii_148_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %shift64RightJamming.exit9.i.i*/
	/*   %not..i.i = xor i1 %148, true*/
		main_shift64RightJammingexit9ii_notii = (main_shift64RightJammingexit9ii_148_reg ^ 1'd1);
end
always @(posedge clk) begin
	/* main: %shift64RightJamming.exit9.i.i*/
	/*   %not..i.i = xor i1 %148, true*/
	if ((cur_state == LEGUP_F_main_BB_shift64RightJammingexit9ii_54)) begin
		main_shift64RightJammingexit9ii_notii_reg <= main_shift64RightJammingexit9ii_notii;
		if (start == 1'b0 && ^(main_shift64RightJammingexit9ii_notii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_shift64RightJammingexit9ii_notii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %shift64RightJamming.exit9.i.i*/
	/*   %149 = sext i1 %not..i.i to i32*/
		main_shift64RightJammingexit9ii_149 = $signed(main_shift64RightJammingexit9ii_notii);
end
always @(posedge clk) begin
	/* main: %shift64RightJamming.exit9.i.i*/
	/*   %149 = sext i1 %not..i.i to i32*/
	if ((cur_state == LEGUP_F_main_BB_shift64RightJammingexit9ii_54)) begin
		main_shift64RightJammingexit9ii_149_reg <= main_shift64RightJammingexit9ii_149;
		if (start == 1'b0 && ^(main_shift64RightJammingexit9ii_149) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_shift64RightJammingexit9ii_149_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %shift64RightJamming.exit9.i.i*/
	/*   %zExp.0..i.i = add nsw i32 %149, %zExp.0.i11.i*/
		main_shift64RightJammingexit9ii_zExp0ii = main_signed_add_32_0;
end
always @(*) begin
/* main: %shift64RightJamming.exit9.i.i*/
/*   %zExp.0..i.i = add nsw i32 %149, %zExp.0.i11.i*/
	main_shift64RightJammingexit9ii_zExp0ii_reg = main_1_gep_reg;
end
always @(*) begin
	/* main: %shift64RightJamming.exit9.i.i*/
	/*   %..i.i = select i1 %148, i64 %146, i64 %147*/
		main_shift64RightJammingexit9ii_ii = (main_shift64RightJammingexit9ii_148 ? main_shift64RightJammingexit9ii_146 : main_shift64RightJammingexit9ii_147);
end
always @(posedge clk) begin
	/* main: %shift64RightJamming.exit9.i.i*/
	/*   %..i.i = select i1 %148, i64 %146, i64 %147*/
	if ((cur_state == LEGUP_F_main_BB_shift64RightJammingexit9ii_53)) begin
		main_shift64RightJammingexit9ii_ii_reg <= main_shift64RightJammingexit9ii_ii;
		if (start == 1'b0 && ^(main_shift64RightJammingexit9ii_ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_shift64RightJammingexit9ii_ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %150*/
	/*   %zExp.1.i.i = phi i32 [ %12, %140 ], [ %zExp.0..i.i, %shift64RightJamming.exit9.i.i ]*/
	if (((cur_state == LEGUP_F_main_BB__140_52) & (memory_controller_waitrequest == 1'd0))) begin
		main_150_zExp1ii = main_1_12_reg;
	end
	/* main: %150*/
	/*   %zExp.1.i.i = phi i32 [ %12, %140 ], [ %zExp.0..i.i, %shift64RightJamming.exit9.i.i ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_shift64RightJammingexit9ii_55) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_150_zExp1ii = main_shift64RightJammingexit9ii_zExp0ii;
	end
end
always @(posedge clk) begin
	/* main: %150*/
	/*   %zExp.1.i.i = phi i32 [ %12, %140 ], [ %zExp.0..i.i, %shift64RightJamming.exit9.i.i ]*/
	if (((cur_state == LEGUP_F_main_BB__140_52) & (memory_controller_waitrequest == 1'd0))) begin
		main_150_zExp1ii_reg <= main_150_zExp1ii;
		if (start == 1'b0 && ^(main_150_zExp1ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_150_zExp1ii_reg"); $finish; end
	end
	/* main: %150*/
	/*   %zExp.1.i.i = phi i32 [ %12, %140 ], [ %zExp.0..i.i, %shift64RightJamming.exit9.i.i ]*/
	if (((cur_state == LEGUP_F_main_BB_shift64RightJammingexit9ii_55) & (memory_controller_waitrequest == 1'd0))) begin
		main_150_zExp1ii_reg <= main_150_zExp1ii;
		if (start == 1'b0 && ^(main_150_zExp1ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_150_zExp1ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %150*/
	/*   %zSig.0.i12.i = phi i64 [ %142, %140 ], [ %..i.i, %shift64RightJamming.exit9.i.i ]*/
	if (((cur_state == LEGUP_F_main_BB__140_52) & (memory_controller_waitrequest == 1'd0))) begin
		main_150_zSig0i12i = main_140_142;
	end
	/* main: %150*/
	/*   %zSig.0.i12.i = phi i64 [ %142, %140 ], [ %..i.i, %shift64RightJamming.exit9.i.i ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_shift64RightJammingexit9ii_55) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_150_zSig0i12i = main_shift64RightJammingexit9ii_ii_reg;
	end
end
always @(posedge clk) begin
	/* main: %150*/
	/*   %zSig.0.i12.i = phi i64 [ %142, %140 ], [ %..i.i, %shift64RightJamming.exit9.i.i ]*/
	if (((cur_state == LEGUP_F_main_BB__140_52) & (memory_controller_waitrequest == 1'd0))) begin
		main_150_zSig0i12i_reg <= main_150_zSig0i12i;
		if (start == 1'b0 && ^(main_150_zSig0i12i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_150_zSig0i12i_reg"); $finish; end
	end
	/* main: %150*/
	/*   %zSig.0.i12.i = phi i64 [ %142, %140 ], [ %..i.i, %shift64RightJamming.exit9.i.i ]*/
	if (((cur_state == LEGUP_F_main_BB_shift64RightJammingexit9ii_55) & (memory_controller_waitrequest == 1'd0))) begin
		main_150_zSig0i12i_reg <= main_150_zSig0i12i;
		if (start == 1'b0 && ^(main_150_zSig0i12i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_150_zSig0i12i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %150*/
	/*   %151 = tail call fastcc i64 @roundAndPackFloat64(i32 %7, i32 %zExp.1.i.i, i64 %zSig.0.i12.i) #1*/
		main_150_151 = roundAndPackFloat64_return_val_reg;
end
always @(posedge clk) begin
	/* main: %150*/
	/*   %151 = tail call fastcc i64 @roundAndPackFloat64(i32 %7, i32 %zExp.1.i.i, i64 %zSig.0.i12.i) #1*/
	if ((cur_state == LEGUP_function_call_57)) begin
		main_150_151_reg <= main_150_151;
		if (start == 1'b0 && ^(main_150_151) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_150_151_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %152*/
	/*   %153 = shl i64 %3, 10*/
		main_152_153 = (main_1_3_reg <<< (64'd10 % 64'd64));
end
always @(posedge clk) begin
	/* main: %152*/
	/*   %153 = shl i64 %3, 10*/
	if ((cur_state == LEGUP_F_main_BB__152_59)) begin
		main_152_153_reg <= main_152_153;
		if (start == 1'b0 && ^(main_152_153) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_152_153_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %152*/
	/*   %154 = and i64 %153, 4611686018427386880*/
		main_152_154 = (main_152_153 & 64'd4611686018427386880);
end
always @(posedge clk) begin
	/* main: %152*/
	/*   %154 = and i64 %153, 4611686018427386880*/
	if ((cur_state == LEGUP_F_main_BB__152_59)) begin
		main_152_154_reg <= main_152_154;
		if (start == 1'b0 && ^(main_152_154) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_152_154_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %152*/
	/*   %155 = shl i64 %5, 10*/
		main_152_155 = (main_1_5_reg <<< (64'd10 % 64'd64));
end
always @(posedge clk) begin
	/* main: %152*/
	/*   %155 = shl i64 %5, 10*/
	if ((cur_state == LEGUP_F_main_BB__152_59)) begin
		main_152_155_reg <= main_152_155;
		if (start == 1'b0 && ^(main_152_155) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_152_155_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %152*/
	/*   %156 = and i64 %155, 4611686018427386880*/
		main_152_156 = (main_152_155 & 64'd4611686018427386880);
end
always @(posedge clk) begin
	/* main: %152*/
	/*   %156 = and i64 %155, 4611686018427386880*/
	if ((cur_state == LEGUP_F_main_BB__152_59)) begin
		main_152_156_reg <= main_152_156;
		if (start == 1'b0 && ^(main_152_156) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_152_156_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %152*/
	/*   %157 = icmp sgt i32 %15, 0*/
		main_152_157 = ($signed(main_1_15_reg) > $signed(32'd0));
end
always @(posedge clk) begin
	/* main: %152*/
	/*   %157 = icmp sgt i32 %15, 0*/
	if ((cur_state == LEGUP_F_main_BB__152_59)) begin
		main_152_157_reg <= main_152_157;
		if (start == 1'b0 && ^(main_152_157) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_152_157_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %158*/
	/*   %159 = icmp slt i32 %15, 0*/
		main_158_159 = ($signed(main_1_15_reg) < $signed(32'd0));
end
always @(posedge clk) begin
	/* main: %158*/
	/*   %159 = icmp slt i32 %15, 0*/
	if ((cur_state == LEGUP_F_main_BB__158_60)) begin
		main_158_159_reg <= main_158_159;
		if (start == 1'b0 && ^(main_158_159) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_158_159_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %161*/
	/*   %162 = or i64 %156, %154*/
		main_161_162 = (main_152_156_reg | main_152_154_reg);
end
always @(posedge clk) begin
	/* main: %161*/
	/*   %162 = or i64 %156, %154*/
	if ((cur_state == LEGUP_F_main_BB__161_62)) begin
		main_161_162_reg <= main_161_162;
		if (start == 1'b0 && ^(main_161_162) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_161_162_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %161*/
	/*   %163 = icmp eq i64 %162, 0*/
		main_161_163 = (main_161_162 == 64'd0);
end
always @(posedge clk) begin
	/* main: %161*/
	/*   %163 = icmp eq i64 %162, 0*/
	if ((cur_state == LEGUP_F_main_BB__161_62)) begin
		main_161_163_reg <= main_161_163;
		if (start == 1'b0 && ^(main_161_163) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_161_163_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %164*/
	/*   %165 = and i64 %3, 9221120237041090560*/
		main_164_165 = (main_1_3_reg & 64'd9221120237041090560);
end
always @(posedge clk) begin
	/* main: %164*/
	/*   %165 = and i64 %3, 9221120237041090560*/
	if ((cur_state == LEGUP_F_main_BB__164_63)) begin
		main_164_165_reg <= main_164_165;
		if (start == 1'b0 && ^(main_164_165) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_164_165_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %164*/
	/*   %166 = icmp eq i64 %165, 9218868437227405312*/
		main_164_166 = (main_164_165 == 64'd9218868437227405312);
end
always @(posedge clk) begin
	/* main: %164*/
	/*   %166 = icmp eq i64 %165, 9218868437227405312*/
	if ((cur_state == LEGUP_F_main_BB__164_63)) begin
		main_164_166_reg <= main_164_166;
		if (start == 1'b0 && ^(main_164_166) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_164_166_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %167*/
	/*   %168 = and i64 %3, 2251799813685247*/
		main_167_168 = (main_1_3_reg & 64'd2251799813685247);
end
always @(posedge clk) begin
	/* main: %167*/
	/*   %168 = and i64 %3, 2251799813685247*/
	if ((cur_state == LEGUP_F_main_BB__167_64)) begin
		main_167_168_reg <= main_167_168;
		if (start == 1'b0 && ^(main_167_168) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_167_168_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %167*/
	/*   %169 = icmp ne i64 %168, 0*/
		main_167_169 = (main_167_168 != 64'd0);
end
always @(posedge clk) begin
	/* main: %167*/
	/*   %169 = icmp ne i64 %168, 0*/
	if ((cur_state == LEGUP_F_main_BB__167_64)) begin
		main_167_169_reg <= main_167_169;
		if (start == 1'b0 && ^(main_167_169) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_167_169_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit1.i11.i.i*/
	/*   %170 = phi i1 [ false, %164 ], [ %169, %167 ]*/
	if ((((cur_state == LEGUP_F_main_BB__164_63) & (memory_controller_waitrequest == 1'd0)) & (main_164_166 == 1'd0))) begin
		main_float64_is_signaling_nanexit1i11ii_170 = 1'd0;
	end
	/* main: %float64_is_signaling_nan.exit1.i11.i.i*/
	/*   %170 = phi i1 [ false, %164 ], [ %169, %167 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__167_64) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_float64_is_signaling_nanexit1i11ii_170 = main_167_169;
	end
end
always @(posedge clk) begin
	/* main: %float64_is_signaling_nan.exit1.i11.i.i*/
	/*   %170 = phi i1 [ false, %164 ], [ %169, %167 ]*/
	if ((((cur_state == LEGUP_F_main_BB__164_63) & (memory_controller_waitrequest == 1'd0)) & (main_164_166 == 1'd0))) begin
		main_float64_is_signaling_nanexit1i11ii_170_reg <= main_float64_is_signaling_nanexit1i11ii_170;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexit1i11ii_170) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexit1i11ii_170_reg"); $finish; end
	end
	/* main: %float64_is_signaling_nan.exit1.i11.i.i*/
	/*   %170 = phi i1 [ false, %164 ], [ %169, %167 ]*/
	if (((cur_state == LEGUP_F_main_BB__167_64) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_is_signaling_nanexit1i11ii_170_reg <= main_float64_is_signaling_nanexit1i11ii_170;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexit1i11ii_170) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexit1i11ii_170_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit1.i11.i.i*/
	/*   %171 = trunc i64 %5 to i63*/
		main_float64_is_signaling_nanexit1i11ii_171 = main_1_5_reg[62:0];
end
always @(posedge clk) begin
	/* main: %float64_is_signaling_nan.exit1.i11.i.i*/
	/*   %171 = trunc i64 %5 to i63*/
	if ((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexit1i11ii_65)) begin
		main_float64_is_signaling_nanexit1i11ii_171_reg <= main_float64_is_signaling_nanexit1i11ii_171;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexit1i11ii_171) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexit1i11ii_171_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit1.i11.i.i*/
	/*   %172 = icmp ugt i63 %171, -4503599627370496*/
		main_float64_is_signaling_nanexit1i11ii_172 = (main_float64_is_signaling_nanexit1i11ii_171 > -63'd4503599627370496);
end
always @(posedge clk) begin
	/* main: %float64_is_signaling_nan.exit1.i11.i.i*/
	/*   %172 = icmp ugt i63 %171, -4503599627370496*/
	if ((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexit1i11ii_65)) begin
		main_float64_is_signaling_nanexit1i11ii_172_reg <= main_float64_is_signaling_nanexit1i11ii_172;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexit1i11ii_172) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexit1i11ii_172_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit1.i11.i.i*/
	/*   %173 = and i64 %5, 9221120237041090560*/
		main_float64_is_signaling_nanexit1i11ii_173 = (main_1_5_reg & 64'd9221120237041090560);
end
always @(posedge clk) begin
	/* main: %float64_is_signaling_nan.exit1.i11.i.i*/
	/*   %173 = and i64 %5, 9221120237041090560*/
	if ((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexit1i11ii_65)) begin
		main_float64_is_signaling_nanexit1i11ii_173_reg <= main_float64_is_signaling_nanexit1i11ii_173;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexit1i11ii_173) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexit1i11ii_173_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit1.i11.i.i*/
	/*   %174 = icmp eq i64 %173, 9218868437227405312*/
		main_float64_is_signaling_nanexit1i11ii_174 = (main_float64_is_signaling_nanexit1i11ii_173 == 64'd9218868437227405312);
end
always @(posedge clk) begin
	/* main: %float64_is_signaling_nan.exit1.i11.i.i*/
	/*   %174 = icmp eq i64 %173, 9218868437227405312*/
	if ((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexit1i11ii_65)) begin
		main_float64_is_signaling_nanexit1i11ii_174_reg <= main_float64_is_signaling_nanexit1i11ii_174;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexit1i11ii_174) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexit1i11ii_174_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %175*/
	/*   %176 = and i64 %5, 2251799813685247*/
		main_175_176 = (main_1_5_reg & 64'd2251799813685247);
end
always @(posedge clk) begin
	/* main: %175*/
	/*   %176 = and i64 %5, 2251799813685247*/
	if ((cur_state == LEGUP_F_main_BB__175_66)) begin
		main_175_176_reg <= main_175_176;
		if (start == 1'b0 && ^(main_175_176) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_175_176_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %175*/
	/*   %177 = icmp ne i64 %176, 0*/
		main_175_177 = (main_175_176 != 64'd0);
end
always @(posedge clk) begin
	/* main: %175*/
	/*   %177 = icmp ne i64 %176, 0*/
	if ((cur_state == LEGUP_F_main_BB__175_66)) begin
		main_175_177_reg <= main_175_177;
		if (start == 1'b0 && ^(main_175_177) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_175_177_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit.i12.i.i*/
	/*   %178 = phi i1 [ false, %float64_is_signaling_nan.exit1.i11.i.i ], [ %177, %175 ]*/
	if ((((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexit1i11ii_65) & (memory_controller_waitrequest == 1'd0)) & (main_float64_is_signaling_nanexit1i11ii_174 == 1'd0))) begin
		main_float64_is_signaling_nanexiti12ii_178 = 1'd0;
	end
	/* main: %float64_is_signaling_nan.exit.i12.i.i*/
	/*   %178 = phi i1 [ false, %float64_is_signaling_nan.exit1.i11.i.i ], [ %177, %175 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__175_66) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_float64_is_signaling_nanexiti12ii_178 = main_175_177;
	end
end
always @(posedge clk) begin
	/* main: %float64_is_signaling_nan.exit.i12.i.i*/
	/*   %178 = phi i1 [ false, %float64_is_signaling_nan.exit1.i11.i.i ], [ %177, %175 ]*/
	if ((((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexit1i11ii_65) & (memory_controller_waitrequest == 1'd0)) & (main_float64_is_signaling_nanexit1i11ii_174 == 1'd0))) begin
		main_float64_is_signaling_nanexiti12ii_178_reg <= main_float64_is_signaling_nanexiti12ii_178;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexiti12ii_178) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexiti12ii_178_reg"); $finish; end
	end
	/* main: %float64_is_signaling_nan.exit.i12.i.i*/
	/*   %178 = phi i1 [ false, %float64_is_signaling_nan.exit1.i11.i.i ], [ %177, %175 ]*/
	if (((cur_state == LEGUP_F_main_BB__175_66) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_is_signaling_nanexiti12ii_178_reg <= main_float64_is_signaling_nanexiti12ii_178;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexiti12ii_178) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexiti12ii_178_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit.i12.i.i*/
	/*   %179 = or i1 %170, %178*/
		main_float64_is_signaling_nanexiti12ii_179 = (main_float64_is_signaling_nanexit1i11ii_170_reg | main_float64_is_signaling_nanexiti12ii_178_reg);
end
always @(posedge clk) begin
	/* main: %float64_is_signaling_nan.exit.i12.i.i*/
	/*   %179 = or i1 %170, %178*/
	if ((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexiti12ii_67)) begin
		main_float64_is_signaling_nanexiti12ii_179_reg <= main_float64_is_signaling_nanexiti12ii_179;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexiti12ii_179) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexiti12ii_179_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.thread.i13.i.i*/
	/*   %180 = load i32* @float_exception_flags, align 4, !tbaa !5*/
		main_threadi13ii_180 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %.thread.i13.i.i*/
	/*   %180 = load i32* @float_exception_flags, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_threadi13ii_70)) begin
		main_threadi13ii_180_reg <= main_threadi13ii_180;
		if (start == 1'b0 && ^(main_threadi13ii_180) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi13ii_180_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.thread.i13.i.i*/
	/*   %181 = or i32 %180, 16*/
		main_threadi13ii_181 = (main_threadi13ii_180 | 32'd16);
end
always @(posedge clk) begin
	/* main: %.thread.i13.i.i*/
	/*   %181 = or i32 %180, 16*/
	if ((cur_state == LEGUP_F_main_BB_threadi13ii_70)) begin
		main_threadi13ii_181_reg <= main_threadi13ii_181;
		if (start == 1'b0 && ^(main_threadi13ii_181) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi13ii_181_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %propagateFloat64NaN.exit17.i.i*/
	/*   %.sink.i14.i.i = phi i1 [ %178, %.thread.i13.i.i ], [ %172, %float64_is_signaling_nan.exit.i12.i.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexiti12ii_67) & (memory_controller_waitrequest == 1'd0)) & (main_float64_is_signaling_nanexiti12ii_179 == 1'd0))) begin
		main_propagateFloat64NaNexit17ii_sinki14ii = main_float64_is_signaling_nanexit1i11ii_172_reg;
	end
	/* main: %propagateFloat64NaN.exit17.i.i*/
	/*   %.sink.i14.i.i = phi i1 [ %178, %.thread.i13.i.i ], [ %172, %float64_is_signaling_nan.exit.i12.i.i ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_threadi13ii_71) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_propagateFloat64NaNexit17ii_sinki14ii = main_float64_is_signaling_nanexiti12ii_178_reg;
	end
end
always @(posedge clk) begin
	/* main: %propagateFloat64NaN.exit17.i.i*/
	/*   %.sink.i14.i.i = phi i1 [ %178, %.thread.i13.i.i ], [ %172, %float64_is_signaling_nan.exit.i12.i.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexiti12ii_67) & (memory_controller_waitrequest == 1'd0)) & (main_float64_is_signaling_nanexiti12ii_179 == 1'd0))) begin
		main_propagateFloat64NaNexit17ii_sinki14ii_reg <= main_propagateFloat64NaNexit17ii_sinki14ii;
		if (start == 1'b0 && ^(main_propagateFloat64NaNexit17ii_sinki14ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_propagateFloat64NaNexit17ii_sinki14ii_reg"); $finish; end
	end
	/* main: %propagateFloat64NaN.exit17.i.i*/
	/*   %.sink.i14.i.i = phi i1 [ %178, %.thread.i13.i.i ], [ %172, %float64_is_signaling_nan.exit.i12.i.i ]*/
	if (((cur_state == LEGUP_F_main_BB_threadi13ii_71) & (memory_controller_waitrequest == 1'd0))) begin
		main_propagateFloat64NaNexit17ii_sinki14ii_reg <= main_propagateFloat64NaNexit17ii_sinki14ii;
		if (start == 1'b0 && ^(main_propagateFloat64NaNexit17ii_sinki14ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_propagateFloat64NaNexit17ii_sinki14ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %propagateFloat64NaN.exit17.i.i*/
	/*   %.mux2.v.i15.i.i = select i1 %.sink.i14.i.i, i64 %5, i64 %3*/
		main_propagateFloat64NaNexit17ii_mux2vi15ii = (main_propagateFloat64NaNexit17ii_sinki14ii_reg ? main_1_5_reg : main_1_3_reg);
end
always @(posedge clk) begin
	/* main: %propagateFloat64NaN.exit17.i.i*/
	/*   %.mux2.v.i15.i.i = select i1 %.sink.i14.i.i, i64 %5, i64 %3*/
	if ((cur_state == LEGUP_F_main_BB_propagateFloat64NaNexit17ii_72)) begin
		main_propagateFloat64NaNexit17ii_mux2vi15ii_reg <= main_propagateFloat64NaNexit17ii_mux2vi15ii;
		if (start == 1'b0 && ^(main_propagateFloat64NaNexit17ii_mux2vi15ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_propagateFloat64NaNexit17ii_mux2vi15ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %propagateFloat64NaN.exit17.i.i*/
	/*   %.mux2.i16.i.i = or i64 %.mux2.v.i15.i.i, 2251799813685248*/
		main_propagateFloat64NaNexit17ii_mux2i16ii = (main_propagateFloat64NaNexit17ii_mux2vi15ii | 64'd2251799813685248);
end
always @(posedge clk) begin
	/* main: %propagateFloat64NaN.exit17.i.i*/
	/*   %.mux2.i16.i.i = or i64 %.mux2.v.i15.i.i, 2251799813685248*/
	if ((cur_state == LEGUP_F_main_BB_propagateFloat64NaNexit17ii_72)) begin
		main_propagateFloat64NaNexit17ii_mux2i16ii_reg <= main_propagateFloat64NaNexit17ii_mux2i16ii;
		if (start == 1'b0 && ^(main_propagateFloat64NaNexit17ii_mux2i16ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_propagateFloat64NaNexit17ii_mux2i16ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %182*/
	/*   %183 = load i32* @float_exception_flags, align 4, !tbaa !5*/
		main_182_183 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %182*/
	/*   %183 = load i32* @float_exception_flags, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__182_75)) begin
		main_182_183_reg <= main_182_183;
		if (start == 1'b0 && ^(main_182_183) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_182_183_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %182*/
	/*   %184 = or i32 %183, 16*/
		main_182_184 = (main_182_183 | 32'd16);
end
always @(posedge clk) begin
	/* main: %182*/
	/*   %184 = or i32 %183, 16*/
	if ((cur_state == LEGUP_F_main_BB__182_75)) begin
		main_182_184_reg <= main_182_184;
		if (start == 1'b0 && ^(main_182_184) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_182_184_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %186*/
	/*   %aExp.0.i.i = phi i32 [ 1, %185 ], [ %12, %160 ]*/
	if (((((cur_state == LEGUP_F_main_BB__160_61) & (memory_controller_waitrequest == 1'd0)) & (main_1_12_reg != 32'd2047)) & (main_1_12_reg != 32'd0))) begin
		main_186_aExp0ii = main_1_12_reg;
	end
	/* main: %186*/
	/*   %aExp.0.i.i = phi i32 [ 1, %185 ], [ %12, %160 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__185_77) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_186_aExp0ii = 32'd1;
	end
end
always @(posedge clk) begin
	/* main: %186*/
	/*   %aExp.0.i.i = phi i32 [ 1, %185 ], [ %12, %160 ]*/
	if (((((cur_state == LEGUP_F_main_BB__160_61) & (memory_controller_waitrequest == 1'd0)) & (main_1_12_reg != 32'd2047)) & (main_1_12_reg != 32'd0))) begin
		main_186_aExp0ii_reg <= main_186_aExp0ii;
		if (start == 1'b0 && ^(main_186_aExp0ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_186_aExp0ii_reg"); $finish; end
	end
	/* main: %186*/
	/*   %aExp.0.i.i = phi i32 [ 1, %185 ], [ %12, %160 ]*/
	if (((cur_state == LEGUP_F_main_BB__185_77) & (memory_controller_waitrequest == 1'd0))) begin
		main_186_aExp0ii_reg <= main_186_aExp0ii;
		if (start == 1'b0 && ^(main_186_aExp0ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_186_aExp0ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %186*/
	/*   %bExp.0.i.i = phi i32 [ 1, %185 ], [ %14, %160 ]*/
	if (((((cur_state == LEGUP_F_main_BB__160_61) & (memory_controller_waitrequest == 1'd0)) & (main_1_12_reg != 32'd2047)) & (main_1_12_reg != 32'd0))) begin
		main_186_bExp0ii = main_1_14_reg;
	end
	/* main: %186*/
	/*   %bExp.0.i.i = phi i32 [ 1, %185 ], [ %14, %160 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__185_77) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_186_bExp0ii = 32'd1;
	end
end
always @(posedge clk) begin
	/* main: %186*/
	/*   %bExp.0.i.i = phi i32 [ 1, %185 ], [ %14, %160 ]*/
	if (((((cur_state == LEGUP_F_main_BB__160_61) & (memory_controller_waitrequest == 1'd0)) & (main_1_12_reg != 32'd2047)) & (main_1_12_reg != 32'd0))) begin
		main_186_bExp0ii_reg <= main_186_bExp0ii;
		if (start == 1'b0 && ^(main_186_bExp0ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_186_bExp0ii_reg"); $finish; end
	end
	/* main: %186*/
	/*   %bExp.0.i.i = phi i32 [ 1, %185 ], [ %14, %160 ]*/
	if (((cur_state == LEGUP_F_main_BB__185_77) & (memory_controller_waitrequest == 1'd0))) begin
		main_186_bExp0ii_reg <= main_186_bExp0ii;
		if (start == 1'b0 && ^(main_186_bExp0ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_186_bExp0ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %186*/
	/*   %187 = icmp ult i64 %156, %154*/
		main_186_187 = (main_152_156_reg < main_152_154_reg);
end
always @(posedge clk) begin
	/* main: %186*/
	/*   %187 = icmp ult i64 %156, %154*/
	if ((cur_state == LEGUP_F_main_BB__186_78)) begin
		main_186_187_reg <= main_186_187;
		if (start == 1'b0 && ^(main_186_187) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_186_187_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %188*/
	/*   %189 = icmp ult i64 %154, %156*/
		main_188_189 = (main_152_154_reg < main_152_156_reg);
end
always @(posedge clk) begin
	/* main: %188*/
	/*   %189 = icmp ult i64 %154, %156*/
	if ((cur_state == LEGUP_F_main_BB__188_79)) begin
		main_188_189_reg <= main_188_189;
		if (start == 1'b0 && ^(main_188_189) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_188_189_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %190*/
	/*   %191 = icmp eq i32 %14, 2047*/
		main_190_191 = (main_1_14_reg == 32'd2047);
end
always @(posedge clk) begin
	/* main: %190*/
	/*   %191 = icmp eq i32 %14, 2047*/
	if ((cur_state == LEGUP_F_main_BB__190_80)) begin
		main_190_191_reg <= main_190_191;
		if (start == 1'b0 && ^(main_190_191) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_190_191_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %192*/
	/*   %193 = icmp eq i64 %156, 0*/
		main_192_193 = (main_152_156_reg == 64'd0);
end
always @(posedge clk) begin
	/* main: %192*/
	/*   %193 = icmp eq i64 %156, 0*/
	if ((cur_state == LEGUP_F_main_BB__192_81)) begin
		main_192_193_reg <= main_192_193;
		if (start == 1'b0 && ^(main_192_193) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_192_193_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %194*/
	/*   %195 = and i64 %3, 9221120237041090560*/
		main_194_195 = (main_1_3_reg & 64'd9221120237041090560);
end
always @(posedge clk) begin
	/* main: %194*/
	/*   %195 = and i64 %3, 9221120237041090560*/
	if ((cur_state == LEGUP_F_main_BB__194_82)) begin
		main_194_195_reg <= main_194_195;
		if (start == 1'b0 && ^(main_194_195) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_194_195_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %194*/
	/*   %196 = icmp eq i64 %195, 9218868437227405312*/
		main_194_196 = (main_194_195 == 64'd9218868437227405312);
end
always @(posedge clk) begin
	/* main: %194*/
	/*   %196 = icmp eq i64 %195, 9218868437227405312*/
	if ((cur_state == LEGUP_F_main_BB__194_82)) begin
		main_194_196_reg <= main_194_196;
		if (start == 1'b0 && ^(main_194_196) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_194_196_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %197*/
	/*   %198 = and i64 %3, 2251799813685247*/
		main_197_198 = (main_1_3_reg & 64'd2251799813685247);
end
always @(posedge clk) begin
	/* main: %197*/
	/*   %198 = and i64 %3, 2251799813685247*/
	if ((cur_state == LEGUP_F_main_BB__197_83)) begin
		main_197_198_reg <= main_197_198;
		if (start == 1'b0 && ^(main_197_198) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_197_198_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %197*/
	/*   %199 = icmp ne i64 %198, 0*/
		main_197_199 = (main_197_198 != 64'd0);
end
always @(posedge clk) begin
	/* main: %197*/
	/*   %199 = icmp ne i64 %198, 0*/
	if ((cur_state == LEGUP_F_main_BB__197_83)) begin
		main_197_199_reg <= main_197_199;
		if (start == 1'b0 && ^(main_197_199) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_197_199_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit1.i4.i.i*/
	/*   %200 = phi i1 [ false, %194 ], [ %199, %197 ]*/
	if ((((cur_state == LEGUP_F_main_BB__194_82) & (memory_controller_waitrequest == 1'd0)) & (main_194_196 == 1'd0))) begin
		main_float64_is_signaling_nanexit1i4ii_200 = 1'd0;
	end
	/* main: %float64_is_signaling_nan.exit1.i4.i.i*/
	/*   %200 = phi i1 [ false, %194 ], [ %199, %197 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__197_83) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_float64_is_signaling_nanexit1i4ii_200 = main_197_199;
	end
end
always @(posedge clk) begin
	/* main: %float64_is_signaling_nan.exit1.i4.i.i*/
	/*   %200 = phi i1 [ false, %194 ], [ %199, %197 ]*/
	if ((((cur_state == LEGUP_F_main_BB__194_82) & (memory_controller_waitrequest == 1'd0)) & (main_194_196 == 1'd0))) begin
		main_float64_is_signaling_nanexit1i4ii_200_reg <= main_float64_is_signaling_nanexit1i4ii_200;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexit1i4ii_200) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexit1i4ii_200_reg"); $finish; end
	end
	/* main: %float64_is_signaling_nan.exit1.i4.i.i*/
	/*   %200 = phi i1 [ false, %194 ], [ %199, %197 ]*/
	if (((cur_state == LEGUP_F_main_BB__197_83) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_is_signaling_nanexit1i4ii_200_reg <= main_float64_is_signaling_nanexit1i4ii_200;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexit1i4ii_200) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexit1i4ii_200_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit1.i4.i.i*/
	/*   %201 = trunc i64 %5 to i63*/
		main_float64_is_signaling_nanexit1i4ii_201 = main_1_5_reg[62:0];
end
always @(posedge clk) begin
	/* main: %float64_is_signaling_nan.exit1.i4.i.i*/
	/*   %201 = trunc i64 %5 to i63*/
	if ((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexit1i4ii_84)) begin
		main_float64_is_signaling_nanexit1i4ii_201_reg <= main_float64_is_signaling_nanexit1i4ii_201;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexit1i4ii_201) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexit1i4ii_201_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit1.i4.i.i*/
	/*   %202 = icmp ugt i63 %201, -4503599627370496*/
		main_float64_is_signaling_nanexit1i4ii_202 = (main_float64_is_signaling_nanexit1i4ii_201 > -63'd4503599627370496);
end
always @(posedge clk) begin
	/* main: %float64_is_signaling_nan.exit1.i4.i.i*/
	/*   %202 = icmp ugt i63 %201, -4503599627370496*/
	if ((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexit1i4ii_84)) begin
		main_float64_is_signaling_nanexit1i4ii_202_reg <= main_float64_is_signaling_nanexit1i4ii_202;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexit1i4ii_202) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexit1i4ii_202_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit1.i4.i.i*/
	/*   %203 = and i64 %5, 9221120237041090560*/
		main_float64_is_signaling_nanexit1i4ii_203 = (main_1_5_reg & 64'd9221120237041090560);
end
always @(posedge clk) begin
	/* main: %float64_is_signaling_nan.exit1.i4.i.i*/
	/*   %203 = and i64 %5, 9221120237041090560*/
	if ((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexit1i4ii_84)) begin
		main_float64_is_signaling_nanexit1i4ii_203_reg <= main_float64_is_signaling_nanexit1i4ii_203;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexit1i4ii_203) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexit1i4ii_203_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit1.i4.i.i*/
	/*   %204 = icmp eq i64 %203, 9218868437227405312*/
		main_float64_is_signaling_nanexit1i4ii_204 = (main_float64_is_signaling_nanexit1i4ii_203 == 64'd9218868437227405312);
end
always @(posedge clk) begin
	/* main: %float64_is_signaling_nan.exit1.i4.i.i*/
	/*   %204 = icmp eq i64 %203, 9218868437227405312*/
	if ((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexit1i4ii_84)) begin
		main_float64_is_signaling_nanexit1i4ii_204_reg <= main_float64_is_signaling_nanexit1i4ii_204;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexit1i4ii_204) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexit1i4ii_204_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %205*/
	/*   %206 = and i64 %5, 2251799813685247*/
		main_205_206 = (main_1_5_reg & 64'd2251799813685247);
end
always @(posedge clk) begin
	/* main: %205*/
	/*   %206 = and i64 %5, 2251799813685247*/
	if ((cur_state == LEGUP_F_main_BB__205_85)) begin
		main_205_206_reg <= main_205_206;
		if (start == 1'b0 && ^(main_205_206) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_205_206_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %205*/
	/*   %207 = icmp ne i64 %206, 0*/
		main_205_207 = (main_205_206 != 64'd0);
end
always @(posedge clk) begin
	/* main: %205*/
	/*   %207 = icmp ne i64 %206, 0*/
	if ((cur_state == LEGUP_F_main_BB__205_85)) begin
		main_205_207_reg <= main_205_207;
		if (start == 1'b0 && ^(main_205_207) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_205_207_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit.i5.i.i*/
	/*   %208 = phi i1 [ false, %float64_is_signaling_nan.exit1.i4.i.i ], [ %207, %205 ]*/
	if ((((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexit1i4ii_84) & (memory_controller_waitrequest == 1'd0)) & (main_float64_is_signaling_nanexit1i4ii_204 == 1'd0))) begin
		main_float64_is_signaling_nanexiti5ii_208 = 1'd0;
	end
	/* main: %float64_is_signaling_nan.exit.i5.i.i*/
	/*   %208 = phi i1 [ false, %float64_is_signaling_nan.exit1.i4.i.i ], [ %207, %205 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__205_85) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_float64_is_signaling_nanexiti5ii_208 = main_205_207;
	end
end
always @(posedge clk) begin
	/* main: %float64_is_signaling_nan.exit.i5.i.i*/
	/*   %208 = phi i1 [ false, %float64_is_signaling_nan.exit1.i4.i.i ], [ %207, %205 ]*/
	if ((((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexit1i4ii_84) & (memory_controller_waitrequest == 1'd0)) & (main_float64_is_signaling_nanexit1i4ii_204 == 1'd0))) begin
		main_float64_is_signaling_nanexiti5ii_208_reg <= main_float64_is_signaling_nanexiti5ii_208;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexiti5ii_208) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexiti5ii_208_reg"); $finish; end
	end
	/* main: %float64_is_signaling_nan.exit.i5.i.i*/
	/*   %208 = phi i1 [ false, %float64_is_signaling_nan.exit1.i4.i.i ], [ %207, %205 ]*/
	if (((cur_state == LEGUP_F_main_BB__205_85) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_is_signaling_nanexiti5ii_208_reg <= main_float64_is_signaling_nanexiti5ii_208;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexiti5ii_208) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexiti5ii_208_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit.i5.i.i*/
	/*   %209 = or i1 %200, %208*/
		main_float64_is_signaling_nanexiti5ii_209 = (main_float64_is_signaling_nanexit1i4ii_200_reg | main_float64_is_signaling_nanexiti5ii_208_reg);
end
always @(posedge clk) begin
	/* main: %float64_is_signaling_nan.exit.i5.i.i*/
	/*   %209 = or i1 %200, %208*/
	if ((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexiti5ii_86)) begin
		main_float64_is_signaling_nanexiti5ii_209_reg <= main_float64_is_signaling_nanexiti5ii_209;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexiti5ii_209) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexiti5ii_209_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.thread.i6.i.i*/
	/*   %210 = load i32* @float_exception_flags, align 4, !tbaa !5*/
		main_threadi6ii_210 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %.thread.i6.i.i*/
	/*   %210 = load i32* @float_exception_flags, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_threadi6ii_89)) begin
		main_threadi6ii_210_reg <= main_threadi6ii_210;
		if (start == 1'b0 && ^(main_threadi6ii_210) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi6ii_210_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.thread.i6.i.i*/
	/*   %211 = or i32 %210, 16*/
		main_threadi6ii_211 = (main_threadi6ii_210 | 32'd16);
end
always @(posedge clk) begin
	/* main: %.thread.i6.i.i*/
	/*   %211 = or i32 %210, 16*/
	if ((cur_state == LEGUP_F_main_BB_threadi6ii_89)) begin
		main_threadi6ii_211_reg <= main_threadi6ii_211;
		if (start == 1'b0 && ^(main_threadi6ii_211) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi6ii_211_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %propagateFloat64NaN.exit10.i.i*/
	/*   %.sink.i7.i.i = phi i1 [ %208, %.thread.i6.i.i ], [ %202, %float64_is_signaling_nan.exit.i5.i.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexiti5ii_86) & (memory_controller_waitrequest == 1'd0)) & (main_float64_is_signaling_nanexiti5ii_209 == 1'd0))) begin
		main_propagateFloat64NaNexit10ii_sinki7ii = main_float64_is_signaling_nanexit1i4ii_202_reg;
	end
	/* main: %propagateFloat64NaN.exit10.i.i*/
	/*   %.sink.i7.i.i = phi i1 [ %208, %.thread.i6.i.i ], [ %202, %float64_is_signaling_nan.exit.i5.i.i ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_threadi6ii_90) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_propagateFloat64NaNexit10ii_sinki7ii = main_float64_is_signaling_nanexiti5ii_208_reg;
	end
end
always @(posedge clk) begin
	/* main: %propagateFloat64NaN.exit10.i.i*/
	/*   %.sink.i7.i.i = phi i1 [ %208, %.thread.i6.i.i ], [ %202, %float64_is_signaling_nan.exit.i5.i.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexiti5ii_86) & (memory_controller_waitrequest == 1'd0)) & (main_float64_is_signaling_nanexiti5ii_209 == 1'd0))) begin
		main_propagateFloat64NaNexit10ii_sinki7ii_reg <= main_propagateFloat64NaNexit10ii_sinki7ii;
		if (start == 1'b0 && ^(main_propagateFloat64NaNexit10ii_sinki7ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_propagateFloat64NaNexit10ii_sinki7ii_reg"); $finish; end
	end
	/* main: %propagateFloat64NaN.exit10.i.i*/
	/*   %.sink.i7.i.i = phi i1 [ %208, %.thread.i6.i.i ], [ %202, %float64_is_signaling_nan.exit.i5.i.i ]*/
	if (((cur_state == LEGUP_F_main_BB_threadi6ii_90) & (memory_controller_waitrequest == 1'd0))) begin
		main_propagateFloat64NaNexit10ii_sinki7ii_reg <= main_propagateFloat64NaNexit10ii_sinki7ii;
		if (start == 1'b0 && ^(main_propagateFloat64NaNexit10ii_sinki7ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_propagateFloat64NaNexit10ii_sinki7ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %propagateFloat64NaN.exit10.i.i*/
	/*   %.mux2.v.i8.i.i = select i1 %.sink.i7.i.i, i64 %5, i64 %3*/
		main_propagateFloat64NaNexit10ii_mux2vi8ii = (main_propagateFloat64NaNexit10ii_sinki7ii_reg ? main_1_5_reg : main_1_3_reg);
end
always @(posedge clk) begin
	/* main: %propagateFloat64NaN.exit10.i.i*/
	/*   %.mux2.v.i8.i.i = select i1 %.sink.i7.i.i, i64 %5, i64 %3*/
	if ((cur_state == LEGUP_F_main_BB_propagateFloat64NaNexit10ii_91)) begin
		main_propagateFloat64NaNexit10ii_mux2vi8ii_reg <= main_propagateFloat64NaNexit10ii_mux2vi8ii;
		if (start == 1'b0 && ^(main_propagateFloat64NaNexit10ii_mux2vi8ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_propagateFloat64NaNexit10ii_mux2vi8ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %propagateFloat64NaN.exit10.i.i*/
	/*   %.mux2.i9.i.i = or i64 %.mux2.v.i8.i.i, 2251799813685248*/
		main_propagateFloat64NaNexit10ii_mux2i9ii = (main_propagateFloat64NaNexit10ii_mux2vi8ii | 64'd2251799813685248);
end
always @(posedge clk) begin
	/* main: %propagateFloat64NaN.exit10.i.i*/
	/*   %.mux2.i9.i.i = or i64 %.mux2.v.i8.i.i, 2251799813685248*/
	if ((cur_state == LEGUP_F_main_BB_propagateFloat64NaNexit10ii_91)) begin
		main_propagateFloat64NaNexit10ii_mux2i9ii_reg <= main_propagateFloat64NaNexit10ii_mux2i9ii;
		if (start == 1'b0 && ^(main_propagateFloat64NaNexit10ii_mux2i9ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_propagateFloat64NaNexit10ii_mux2i9ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %212*/
	/*   %213 = xor i32 %7, 1*/
		main_212_213 = (main_1_7_reg ^ 32'd1);
end
always @(posedge clk) begin
	/* main: %212*/
	/*   %213 = xor i32 %7, 1*/
	if ((cur_state == LEGUP_F_main_BB__212_92)) begin
		main_212_213_reg <= main_212_213;
		if (start == 1'b0 && ^(main_212_213) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_212_213_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %212*/
	/*   %214 = zext i32 %213 to i64*/
		main_212_214 = main_212_213;
end
always @(posedge clk) begin
	/* main: %212*/
	/*   %214 = zext i32 %213 to i64*/
	if ((cur_state == LEGUP_F_main_BB__212_92)) begin
		main_212_214_reg <= main_212_214;
		if (start == 1'b0 && ^(main_212_214) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_212_214_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %212*/
	/*   %215 = shl nuw i64 %214, 63*/
		main_212_215 = (main_212_214 <<< (64'd63 % 64'd64));
end
always @(posedge clk) begin
	/* main: %212*/
	/*   %215 = shl nuw i64 %214, 63*/
	if ((cur_state == LEGUP_F_main_BB__212_92)) begin
		main_212_215_reg <= main_212_215;
		if (start == 1'b0 && ^(main_212_215) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_212_215_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %212*/
	/*   %216 = or i64 %215, 9218868437227405312*/
		main_212_216 = (main_212_215 | 64'd9218868437227405312);
end
always @(posedge clk) begin
	/* main: %212*/
	/*   %216 = or i64 %215, 9218868437227405312*/
	if ((cur_state == LEGUP_F_main_BB__212_92)) begin
		main_212_216_reg <= main_212_216;
		if (start == 1'b0 && ^(main_212_216) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_212_216_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %217*/
	/*   %218 = icmp eq i32 %12, 0*/
		main_217_218 = (main_1_12_reg == 32'd0);
end
always @(posedge clk) begin
	/* main: %217*/
	/*   %218 = icmp eq i32 %12, 0*/
	if ((cur_state == LEGUP_F_main_BB__217_93)) begin
		main_217_218_reg <= main_217_218;
		if (start == 1'b0 && ^(main_217_218) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_217_218_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %217*/
	/*   %219 = or i64 %154, 4611686018427387904*/
		main_217_219 = (main_152_154_reg | 64'd4611686018427387904);
end
always @(posedge clk) begin
	/* main: %217*/
	/*   %219 = or i64 %154, 4611686018427387904*/
	if ((cur_state == LEGUP_F_main_BB__217_93)) begin
		main_217_219_reg <= main_217_219;
		if (start == 1'b0 && ^(main_217_219) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_217_219_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %217*/
	/*   %220 = select i1 %218, i64 %154, i64 %219*/
		main_217_220 = (main_217_218 ? main_152_154_reg : main_217_219);
end
always @(posedge clk) begin
	/* main: %217*/
	/*   %220 = select i1 %218, i64 %154, i64 %219*/
	if ((cur_state == LEGUP_F_main_BB__217_93)) begin
		main_217_220_reg <= main_217_220;
		if (start == 1'b0 && ^(main_217_220) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_217_220_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %217*/
	/*   %221 = zext i1 %218 to i32*/
		main_217_221 = main_217_218;
end
always @(posedge clk) begin
	/* main: %217*/
	/*   %221 = zext i1 %218 to i32*/
	if ((cur_state == LEGUP_F_main_BB__217_93)) begin
		main_217_221_reg <= main_217_221;
		if (start == 1'b0 && ^(main_217_221) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_217_221_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %217*/
	/*   %expDiff.0.i.i = add nsw i32 %15, %221*/
		main_217_expDiff0ii = main_signed_add_32_0;
end
always @(*) begin
/* main: %217*/
/*   %expDiff.0.i.i = add nsw i32 %15, %221*/
	main_217_expDiff0ii_reg = main_1_gep_reg;
end
always @(*) begin
	/* main: %217*/
	/*   %222 = sub nsw i32 0, %expDiff.0.i.i*/
		main_217_222 = main_signed_subtract_32_0;
end
always @(*) begin
/* main: %217*/
/*   %222 = sub nsw i32 0, %expDiff.0.i.i*/
	main_217_222_reg = main_92_97_reg;
end
always @(*) begin
	/* main: %217*/
	/*   %223 = icmp eq i32 %expDiff.0.i.i, 0*/
		main_217_223 = (main_217_expDiff0ii == 32'd0);
end
always @(posedge clk) begin
	/* main: %217*/
	/*   %223 = icmp eq i32 %expDiff.0.i.i, 0*/
	if ((cur_state == LEGUP_F_main_BB__217_93)) begin
		main_217_223_reg <= main_217_223;
		if (start == 1'b0 && ^(main_217_223) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_217_223_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %224*/
	/*   %225 = icmp sgt i32 %expDiff.0.i.i, -64*/
		main_224_225 = ($signed(main_217_expDiff0ii_reg) > $signed(-32'd64));
end
always @(posedge clk) begin
	/* main: %224*/
	/*   %225 = icmp sgt i32 %expDiff.0.i.i, -64*/
	if ((cur_state == LEGUP_F_main_BB__224_94)) begin
		main_224_225_reg <= main_224_225;
		if (start == 1'b0 && ^(main_224_225) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_224_225_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %226*/
	/*   %227 = zext i32 %222 to i64*/
		main_226_227 = main_217_222_reg;
end
always @(posedge clk) begin
	/* main: %226*/
	/*   %227 = zext i32 %222 to i64*/
	if ((cur_state == LEGUP_F_main_BB__226_95)) begin
		main_226_227_reg <= main_226_227;
		if (start == 1'b0 && ^(main_226_227) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_226_227_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %226*/
	/*   %228 = lshr i64 %220, %227*/
		main_226_228 = (main_217_220_reg >>> (main_226_227 % 64'd64));
end
always @(posedge clk) begin
	/* main: %226*/
	/*   %228 = lshr i64 %220, %227*/
	if ((cur_state == LEGUP_F_main_BB__226_95)) begin
		main_226_228_reg <= main_226_228;
		if (start == 1'b0 && ^(main_226_228) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_226_228_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %226*/
	/*   %229 = and i32 %expDiff.0.i.i, 63*/
		main_226_229 = (main_217_expDiff0ii_reg & 32'd63);
end
always @(posedge clk) begin
	/* main: %226*/
	/*   %229 = and i32 %expDiff.0.i.i, 63*/
	if ((cur_state == LEGUP_F_main_BB__226_95)) begin
		main_226_229_reg <= main_226_229;
		if (start == 1'b0 && ^(main_226_229) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_226_229_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %226*/
	/*   %230 = zext i32 %229 to i64*/
		main_226_230 = main_226_229;
end
always @(posedge clk) begin
	/* main: %226*/
	/*   %230 = zext i32 %229 to i64*/
	if ((cur_state == LEGUP_F_main_BB__226_95)) begin
		main_226_230_reg <= main_226_230;
		if (start == 1'b0 && ^(main_226_230) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_226_230_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %226*/
	/*   %231 = shl i64 %220, %230*/
		main_226_231 = (main_217_220_reg <<< (main_226_230 % 64'd64));
end
always @(posedge clk) begin
	/* main: %226*/
	/*   %231 = shl i64 %220, %230*/
	if ((cur_state == LEGUP_F_main_BB__226_95)) begin
		main_226_231_reg <= main_226_231;
		if (start == 1'b0 && ^(main_226_231) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_226_231_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %226*/
	/*   %232 = icmp ne i64 %231, 0*/
		main_226_232 = (main_226_231 != 64'd0);
end
always @(posedge clk) begin
	/* main: %226*/
	/*   %232 = icmp ne i64 %231, 0*/
	if ((cur_state == LEGUP_F_main_BB__226_95)) begin
		main_226_232_reg <= main_226_232;
		if (start == 1'b0 && ^(main_226_232) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_226_232_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %226*/
	/*   %233 = zext i1 %232 to i64*/
		main_226_233 = main_226_232;
end
always @(posedge clk) begin
	/* main: %226*/
	/*   %233 = zext i1 %232 to i64*/
	if ((cur_state == LEGUP_F_main_BB__226_95)) begin
		main_226_233_reg <= main_226_233;
		if (start == 1'b0 && ^(main_226_233) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_226_233_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %226*/
	/*   %234 = or i64 %233, %228*/
		main_226_234 = (main_226_233 | main_226_228);
end
always @(posedge clk) begin
	/* main: %226*/
	/*   %234 = or i64 %233, %228*/
	if ((cur_state == LEGUP_F_main_BB__226_95)) begin
		main_226_234_reg <= main_226_234;
		if (start == 1'b0 && ^(main_226_234) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_226_234_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %235*/
	/*   %236 = icmp ne i64 %220, 0*/
		main_235_236 = (main_217_220_reg != 64'd0);
end
always @(posedge clk) begin
	/* main: %235*/
	/*   %236 = icmp ne i64 %220, 0*/
	if ((cur_state == LEGUP_F_main_BB__235_96)) begin
		main_235_236_reg <= main_235_236;
		if (start == 1'b0 && ^(main_235_236) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_235_236_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %235*/
	/*   %237 = zext i1 %236 to i64*/
		main_235_237 = main_235_236;
end
always @(posedge clk) begin
	/* main: %235*/
	/*   %237 = zext i1 %236 to i64*/
	if ((cur_state == LEGUP_F_main_BB__235_96)) begin
		main_235_237_reg <= main_235_237;
		if (start == 1'b0 && ^(main_235_237) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_235_237_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %shift64RightJamming.exit3.i.i*/
	/*   %z.0.i2.i.i = phi i64 [ %234, %226 ], [ %237, %235 ], [ %220, %217 ]*/
	if ((((cur_state == LEGUP_F_main_BB__217_93) & (memory_controller_waitrequest == 1'd0)) & (main_217_223 == 1'd1))) begin
		main_shift64RightJammingexit3ii_z0i2ii = main_217_220;
	end
	/* main: %shift64RightJamming.exit3.i.i*/
	/*   %z.0.i2.i.i = phi i64 [ %234, %226 ], [ %237, %235 ], [ %220, %217 ]*/
	else if (((cur_state == LEGUP_F_main_BB__226_95) & (memory_controller_waitrequest == 1'd0))) begin
		main_shift64RightJammingexit3ii_z0i2ii = main_226_234;
	end
	/* main: %shift64RightJamming.exit3.i.i*/
	/*   %z.0.i2.i.i = phi i64 [ %234, %226 ], [ %237, %235 ], [ %220, %217 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__235_96) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_shift64RightJammingexit3ii_z0i2ii = main_235_237;
	end
end
always @(posedge clk) begin
	/* main: %shift64RightJamming.exit3.i.i*/
	/*   %z.0.i2.i.i = phi i64 [ %234, %226 ], [ %237, %235 ], [ %220, %217 ]*/
	if ((((cur_state == LEGUP_F_main_BB__217_93) & (memory_controller_waitrequest == 1'd0)) & (main_217_223 == 1'd1))) begin
		main_shift64RightJammingexit3ii_z0i2ii_reg <= main_shift64RightJammingexit3ii_z0i2ii;
		if (start == 1'b0 && ^(main_shift64RightJammingexit3ii_z0i2ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_shift64RightJammingexit3ii_z0i2ii_reg"); $finish; end
	end
	/* main: %shift64RightJamming.exit3.i.i*/
	/*   %z.0.i2.i.i = phi i64 [ %234, %226 ], [ %237, %235 ], [ %220, %217 ]*/
	if (((cur_state == LEGUP_F_main_BB__226_95) & (memory_controller_waitrequest == 1'd0))) begin
		main_shift64RightJammingexit3ii_z0i2ii_reg <= main_shift64RightJammingexit3ii_z0i2ii;
		if (start == 1'b0 && ^(main_shift64RightJammingexit3ii_z0i2ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_shift64RightJammingexit3ii_z0i2ii_reg"); $finish; end
	end
	/* main: %shift64RightJamming.exit3.i.i*/
	/*   %z.0.i2.i.i = phi i64 [ %234, %226 ], [ %237, %235 ], [ %220, %217 ]*/
	if (((cur_state == LEGUP_F_main_BB__235_96) & (memory_controller_waitrequest == 1'd0))) begin
		main_shift64RightJammingexit3ii_z0i2ii_reg <= main_shift64RightJammingexit3ii_z0i2ii;
		if (start == 1'b0 && ^(main_shift64RightJammingexit3ii_z0i2ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_shift64RightJammingexit3ii_z0i2ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %shift64RightJamming.exit3.i.i*/
	/*   %238 = or i64 %156, 4611686018427387904*/
		main_shift64RightJammingexit3ii_238 = (main_152_156_reg | 64'd4611686018427387904);
end
always @(posedge clk) begin
	/* main: %shift64RightJamming.exit3.i.i*/
	/*   %238 = or i64 %156, 4611686018427387904*/
	if ((cur_state == LEGUP_F_main_BB_shift64RightJammingexit3ii_97)) begin
		main_shift64RightJammingexit3ii_238_reg <= main_shift64RightJammingexit3ii_238;
		if (start == 1'b0 && ^(main_shift64RightJammingexit3ii_238) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_shift64RightJammingexit3ii_238_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %239*/
	/*   %240 = phi i64 [ %z.0.i2.i.i, %shift64RightJamming.exit3.i.i ], [ %154, %188 ]*/
	if ((((cur_state == LEGUP_F_main_BB__188_79) & (memory_controller_waitrequest == 1'd0)) & (main_188_189 == 1'd1))) begin
		main_239_240 = main_152_154_reg;
	end
	/* main: %239*/
	/*   %240 = phi i64 [ %z.0.i2.i.i, %shift64RightJamming.exit3.i.i ], [ %154, %188 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_shift64RightJammingexit3ii_97) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_239_240 = main_shift64RightJammingexit3ii_z0i2ii_reg;
	end
end
always @(posedge clk) begin
	/* main: %239*/
	/*   %240 = phi i64 [ %z.0.i2.i.i, %shift64RightJamming.exit3.i.i ], [ %154, %188 ]*/
	if ((((cur_state == LEGUP_F_main_BB__188_79) & (memory_controller_waitrequest == 1'd0)) & (main_188_189 == 1'd1))) begin
		main_239_240_reg <= main_239_240;
		if (start == 1'b0 && ^(main_239_240) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_239_240_reg"); $finish; end
	end
	/* main: %239*/
	/*   %240 = phi i64 [ %z.0.i2.i.i, %shift64RightJamming.exit3.i.i ], [ %154, %188 ]*/
	if (((cur_state == LEGUP_F_main_BB_shift64RightJammingexit3ii_97) & (memory_controller_waitrequest == 1'd0))) begin
		main_239_240_reg <= main_239_240;
		if (start == 1'b0 && ^(main_239_240) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_239_240_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %239*/
	/*   %241 = phi i64 [ %238, %shift64RightJamming.exit3.i.i ], [ %156, %188 ]*/
	if ((((cur_state == LEGUP_F_main_BB__188_79) & (memory_controller_waitrequest == 1'd0)) & (main_188_189 == 1'd1))) begin
		main_239_241 = main_152_156_reg;
	end
	/* main: %239*/
	/*   %241 = phi i64 [ %238, %shift64RightJamming.exit3.i.i ], [ %156, %188 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_shift64RightJammingexit3ii_97) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_239_241 = main_shift64RightJammingexit3ii_238;
	end
end
always @(posedge clk) begin
	/* main: %239*/
	/*   %241 = phi i64 [ %238, %shift64RightJamming.exit3.i.i ], [ %156, %188 ]*/
	if ((((cur_state == LEGUP_F_main_BB__188_79) & (memory_controller_waitrequest == 1'd0)) & (main_188_189 == 1'd1))) begin
		main_239_241_reg <= main_239_241;
		if (start == 1'b0 && ^(main_239_241) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_239_241_reg"); $finish; end
	end
	/* main: %239*/
	/*   %241 = phi i64 [ %238, %shift64RightJamming.exit3.i.i ], [ %156, %188 ]*/
	if (((cur_state == LEGUP_F_main_BB_shift64RightJammingexit3ii_97) & (memory_controller_waitrequest == 1'd0))) begin
		main_239_241_reg <= main_239_241;
		if (start == 1'b0 && ^(main_239_241) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_239_241_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %239*/
	/*   %bExp.1.i.i = phi i32 [ %14, %shift64RightJamming.exit3.i.i ], [ %bExp.0.i.i, %188 ]*/
	if ((((cur_state == LEGUP_F_main_BB__188_79) & (memory_controller_waitrequest == 1'd0)) & (main_188_189 == 1'd1))) begin
		main_239_bExp1ii = main_186_bExp0ii_reg;
	end
	/* main: %239*/
	/*   %bExp.1.i.i = phi i32 [ %14, %shift64RightJamming.exit3.i.i ], [ %bExp.0.i.i, %188 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_shift64RightJammingexit3ii_97) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_239_bExp1ii = main_1_14_reg;
	end
end
always @(posedge clk) begin
	/* main: %239*/
	/*   %bExp.1.i.i = phi i32 [ %14, %shift64RightJamming.exit3.i.i ], [ %bExp.0.i.i, %188 ]*/
	if ((((cur_state == LEGUP_F_main_BB__188_79) & (memory_controller_waitrequest == 1'd0)) & (main_188_189 == 1'd1))) begin
		main_239_bExp1ii_reg <= main_239_bExp1ii;
		if (start == 1'b0 && ^(main_239_bExp1ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_239_bExp1ii_reg"); $finish; end
	end
	/* main: %239*/
	/*   %bExp.1.i.i = phi i32 [ %14, %shift64RightJamming.exit3.i.i ], [ %bExp.0.i.i, %188 ]*/
	if (((cur_state == LEGUP_F_main_BB_shift64RightJammingexit3ii_97) & (memory_controller_waitrequest == 1'd0))) begin
		main_239_bExp1ii_reg <= main_239_bExp1ii;
		if (start == 1'b0 && ^(main_239_bExp1ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_239_bExp1ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %239*/
	/*   %242 = sub i64 %241, %240*/
		main_239_242 = main_signed_subtract_64_0;
end
always @(posedge clk) begin
	/* main: %239*/
	/*   %242 = sub i64 %241, %240*/
	if ((cur_state == LEGUP_F_main_BB__239_98)) begin
		main_239_242_reg <= main_239_242;
		if (start == 1'b0 && ^(main_239_242) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_239_242_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %239*/
	/*   %243 = xor i32 %7, 1*/
		main_239_243 = (main_1_7_reg ^ 32'd1);
end
always @(posedge clk) begin
	/* main: %239*/
	/*   %243 = xor i32 %7, 1*/
	if ((cur_state == LEGUP_F_main_BB__239_98)) begin
		main_239_243_reg <= main_239_243;
		if (start == 1'b0 && ^(main_239_243) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_239_243_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %244*/
	/*   %245 = icmp eq i32 %12, 2047*/
		main_244_245 = (main_1_12_reg == 32'd2047);
end
always @(posedge clk) begin
	/* main: %244*/
	/*   %245 = icmp eq i32 %12, 2047*/
	if ((cur_state == LEGUP_F_main_BB__244_99)) begin
		main_244_245_reg <= main_244_245;
		if (start == 1'b0 && ^(main_244_245) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_244_245_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %246*/
	/*   %247 = icmp eq i64 %154, 0*/
		main_246_247 = (main_152_154_reg == 64'd0);
end
always @(posedge clk) begin
	/* main: %246*/
	/*   %247 = icmp eq i64 %154, 0*/
	if ((cur_state == LEGUP_F_main_BB__246_100)) begin
		main_246_247_reg <= main_246_247;
		if (start == 1'b0 && ^(main_246_247) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_246_247_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %248*/
	/*   %249 = and i64 %3, 9221120237041090560*/
		main_248_249 = (main_1_3_reg & 64'd9221120237041090560);
end
always @(posedge clk) begin
	/* main: %248*/
	/*   %249 = and i64 %3, 9221120237041090560*/
	if ((cur_state == LEGUP_F_main_BB__248_101)) begin
		main_248_249_reg <= main_248_249;
		if (start == 1'b0 && ^(main_248_249) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_248_249_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %248*/
	/*   %250 = icmp eq i64 %249, 9218868437227405312*/
		main_248_250 = (main_248_249 == 64'd9218868437227405312);
end
always @(posedge clk) begin
	/* main: %248*/
	/*   %250 = icmp eq i64 %249, 9218868437227405312*/
	if ((cur_state == LEGUP_F_main_BB__248_101)) begin
		main_248_250_reg <= main_248_250;
		if (start == 1'b0 && ^(main_248_250) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_248_250_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %251*/
	/*   %252 = and i64 %3, 2251799813685247*/
		main_251_252 = (main_1_3_reg & 64'd2251799813685247);
end
always @(posedge clk) begin
	/* main: %251*/
	/*   %252 = and i64 %3, 2251799813685247*/
	if ((cur_state == LEGUP_F_main_BB__251_102)) begin
		main_251_252_reg <= main_251_252;
		if (start == 1'b0 && ^(main_251_252) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_251_252_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %251*/
	/*   %253 = icmp ne i64 %252, 0*/
		main_251_253 = (main_251_252 != 64'd0);
end
always @(posedge clk) begin
	/* main: %251*/
	/*   %253 = icmp ne i64 %252, 0*/
	if ((cur_state == LEGUP_F_main_BB__251_102)) begin
		main_251_253_reg <= main_251_253;
		if (start == 1'b0 && ^(main_251_253) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_251_253_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit1.i.i.i*/
	/*   %254 = phi i1 [ false, %248 ], [ %253, %251 ]*/
	if ((((cur_state == LEGUP_F_main_BB__248_101) & (memory_controller_waitrequest == 1'd0)) & (main_248_250 == 1'd0))) begin
		main_float64_is_signaling_nanexit1iii_254 = 1'd0;
	end
	/* main: %float64_is_signaling_nan.exit1.i.i.i*/
	/*   %254 = phi i1 [ false, %248 ], [ %253, %251 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__251_102) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_float64_is_signaling_nanexit1iii_254 = main_251_253;
	end
end
always @(posedge clk) begin
	/* main: %float64_is_signaling_nan.exit1.i.i.i*/
	/*   %254 = phi i1 [ false, %248 ], [ %253, %251 ]*/
	if ((((cur_state == LEGUP_F_main_BB__248_101) & (memory_controller_waitrequest == 1'd0)) & (main_248_250 == 1'd0))) begin
		main_float64_is_signaling_nanexit1iii_254_reg <= main_float64_is_signaling_nanexit1iii_254;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexit1iii_254) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexit1iii_254_reg"); $finish; end
	end
	/* main: %float64_is_signaling_nan.exit1.i.i.i*/
	/*   %254 = phi i1 [ false, %248 ], [ %253, %251 ]*/
	if (((cur_state == LEGUP_F_main_BB__251_102) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_is_signaling_nanexit1iii_254_reg <= main_float64_is_signaling_nanexit1iii_254;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexit1iii_254) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexit1iii_254_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit1.i.i.i*/
	/*   %255 = trunc i64 %5 to i63*/
		main_float64_is_signaling_nanexit1iii_255 = main_1_5_reg[62:0];
end
always @(posedge clk) begin
	/* main: %float64_is_signaling_nan.exit1.i.i.i*/
	/*   %255 = trunc i64 %5 to i63*/
	if ((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexit1iii_103)) begin
		main_float64_is_signaling_nanexit1iii_255_reg <= main_float64_is_signaling_nanexit1iii_255;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexit1iii_255) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexit1iii_255_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit1.i.i.i*/
	/*   %256 = icmp ugt i63 %255, -4503599627370496*/
		main_float64_is_signaling_nanexit1iii_256 = (main_float64_is_signaling_nanexit1iii_255 > -63'd4503599627370496);
end
always @(posedge clk) begin
	/* main: %float64_is_signaling_nan.exit1.i.i.i*/
	/*   %256 = icmp ugt i63 %255, -4503599627370496*/
	if ((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexit1iii_103)) begin
		main_float64_is_signaling_nanexit1iii_256_reg <= main_float64_is_signaling_nanexit1iii_256;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexit1iii_256) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexit1iii_256_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit1.i.i.i*/
	/*   %257 = and i64 %5, 9221120237041090560*/
		main_float64_is_signaling_nanexit1iii_257 = (main_1_5_reg & 64'd9221120237041090560);
end
always @(posedge clk) begin
	/* main: %float64_is_signaling_nan.exit1.i.i.i*/
	/*   %257 = and i64 %5, 9221120237041090560*/
	if ((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexit1iii_103)) begin
		main_float64_is_signaling_nanexit1iii_257_reg <= main_float64_is_signaling_nanexit1iii_257;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexit1iii_257) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexit1iii_257_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit1.i.i.i*/
	/*   %258 = icmp eq i64 %257, 9218868437227405312*/
		main_float64_is_signaling_nanexit1iii_258 = (main_float64_is_signaling_nanexit1iii_257 == 64'd9218868437227405312);
end
always @(posedge clk) begin
	/* main: %float64_is_signaling_nan.exit1.i.i.i*/
	/*   %258 = icmp eq i64 %257, 9218868437227405312*/
	if ((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexit1iii_103)) begin
		main_float64_is_signaling_nanexit1iii_258_reg <= main_float64_is_signaling_nanexit1iii_258;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexit1iii_258) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexit1iii_258_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %259*/
	/*   %260 = and i64 %5, 2251799813685247*/
		main_259_260 = (main_1_5_reg & 64'd2251799813685247);
end
always @(posedge clk) begin
	/* main: %259*/
	/*   %260 = and i64 %5, 2251799813685247*/
	if ((cur_state == LEGUP_F_main_BB__259_104)) begin
		main_259_260_reg <= main_259_260;
		if (start == 1'b0 && ^(main_259_260) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_259_260_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %259*/
	/*   %261 = icmp ne i64 %260, 0*/
		main_259_261 = (main_259_260 != 64'd0);
end
always @(posedge clk) begin
	/* main: %259*/
	/*   %261 = icmp ne i64 %260, 0*/
	if ((cur_state == LEGUP_F_main_BB__259_104)) begin
		main_259_261_reg <= main_259_261;
		if (start == 1'b0 && ^(main_259_261) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_259_261_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit.i.i.i*/
	/*   %262 = phi i1 [ false, %float64_is_signaling_nan.exit1.i.i.i ], [ %261, %259 ]*/
	if ((((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexit1iii_103) & (memory_controller_waitrequest == 1'd0)) & (main_float64_is_signaling_nanexit1iii_258 == 1'd0))) begin
		main_float64_is_signaling_nanexitiii_262 = 1'd0;
	end
	/* main: %float64_is_signaling_nan.exit.i.i.i*/
	/*   %262 = phi i1 [ false, %float64_is_signaling_nan.exit1.i.i.i ], [ %261, %259 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__259_104) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_float64_is_signaling_nanexitiii_262 = main_259_261;
	end
end
always @(posedge clk) begin
	/* main: %float64_is_signaling_nan.exit.i.i.i*/
	/*   %262 = phi i1 [ false, %float64_is_signaling_nan.exit1.i.i.i ], [ %261, %259 ]*/
	if ((((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexit1iii_103) & (memory_controller_waitrequest == 1'd0)) & (main_float64_is_signaling_nanexit1iii_258 == 1'd0))) begin
		main_float64_is_signaling_nanexitiii_262_reg <= main_float64_is_signaling_nanexitiii_262;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexitiii_262) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexitiii_262_reg"); $finish; end
	end
	/* main: %float64_is_signaling_nan.exit.i.i.i*/
	/*   %262 = phi i1 [ false, %float64_is_signaling_nan.exit1.i.i.i ], [ %261, %259 ]*/
	if (((cur_state == LEGUP_F_main_BB__259_104) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_is_signaling_nanexitiii_262_reg <= main_float64_is_signaling_nanexitiii_262;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexitiii_262) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexitiii_262_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_is_signaling_nan.exit.i.i.i*/
	/*   %263 = or i1 %254, %262*/
		main_float64_is_signaling_nanexitiii_263 = (main_float64_is_signaling_nanexit1iii_254_reg | main_float64_is_signaling_nanexitiii_262_reg);
end
always @(posedge clk) begin
	/* main: %float64_is_signaling_nan.exit.i.i.i*/
	/*   %263 = or i1 %254, %262*/
	if ((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexitiii_105)) begin
		main_float64_is_signaling_nanexitiii_263_reg <= main_float64_is_signaling_nanexitiii_263;
		if (start == 1'b0 && ^(main_float64_is_signaling_nanexitiii_263) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_is_signaling_nanexitiii_263_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.thread.i.i.i*/
	/*   %264 = load i32* @float_exception_flags, align 4, !tbaa !5*/
		main_threadiii_264 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %.thread.i.i.i*/
	/*   %264 = load i32* @float_exception_flags, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_threadiii_108)) begin
		main_threadiii_264_reg <= main_threadiii_264;
		if (start == 1'b0 && ^(main_threadiii_264) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadiii_264_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.thread.i.i.i*/
	/*   %265 = or i32 %264, 16*/
		main_threadiii_265 = (main_threadiii_264 | 32'd16);
end
always @(posedge clk) begin
	/* main: %.thread.i.i.i*/
	/*   %265 = or i32 %264, 16*/
	if ((cur_state == LEGUP_F_main_BB_threadiii_108)) begin
		main_threadiii_265_reg <= main_threadiii_265;
		if (start == 1'b0 && ^(main_threadiii_265) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadiii_265_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %propagateFloat64NaN.exit.i.i*/
	/*   %.sink.i.i.i = phi i1 [ %262, %.thread.i.i.i ], [ %256, %float64_is_signaling_nan.exit.i.i.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexitiii_105) & (memory_controller_waitrequest == 1'd0)) & (main_float64_is_signaling_nanexitiii_263 == 1'd0))) begin
		main_propagateFloat64NaNexitii_sinkiii = main_float64_is_signaling_nanexit1iii_256_reg;
	end
	/* main: %propagateFloat64NaN.exit.i.i*/
	/*   %.sink.i.i.i = phi i1 [ %262, %.thread.i.i.i ], [ %256, %float64_is_signaling_nan.exit.i.i.i ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_threadiii_109) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_propagateFloat64NaNexitii_sinkiii = main_float64_is_signaling_nanexitiii_262_reg;
	end
end
always @(posedge clk) begin
	/* main: %propagateFloat64NaN.exit.i.i*/
	/*   %.sink.i.i.i = phi i1 [ %262, %.thread.i.i.i ], [ %256, %float64_is_signaling_nan.exit.i.i.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_float64_is_signaling_nanexitiii_105) & (memory_controller_waitrequest == 1'd0)) & (main_float64_is_signaling_nanexitiii_263 == 1'd0))) begin
		main_propagateFloat64NaNexitii_sinkiii_reg <= main_propagateFloat64NaNexitii_sinkiii;
		if (start == 1'b0 && ^(main_propagateFloat64NaNexitii_sinkiii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_propagateFloat64NaNexitii_sinkiii_reg"); $finish; end
	end
	/* main: %propagateFloat64NaN.exit.i.i*/
	/*   %.sink.i.i.i = phi i1 [ %262, %.thread.i.i.i ], [ %256, %float64_is_signaling_nan.exit.i.i.i ]*/
	if (((cur_state == LEGUP_F_main_BB_threadiii_109) & (memory_controller_waitrequest == 1'd0))) begin
		main_propagateFloat64NaNexitii_sinkiii_reg <= main_propagateFloat64NaNexitii_sinkiii;
		if (start == 1'b0 && ^(main_propagateFloat64NaNexitii_sinkiii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_propagateFloat64NaNexitii_sinkiii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %propagateFloat64NaN.exit.i.i*/
	/*   %.mux2.v.i.i.i = select i1 %.sink.i.i.i, i64 %5, i64 %3*/
		main_propagateFloat64NaNexitii_mux2viii = (main_propagateFloat64NaNexitii_sinkiii_reg ? main_1_5_reg : main_1_3_reg);
end
always @(posedge clk) begin
	/* main: %propagateFloat64NaN.exit.i.i*/
	/*   %.mux2.v.i.i.i = select i1 %.sink.i.i.i, i64 %5, i64 %3*/
	if ((cur_state == LEGUP_F_main_BB_propagateFloat64NaNexitii_110)) begin
		main_propagateFloat64NaNexitii_mux2viii_reg <= main_propagateFloat64NaNexitii_mux2viii;
		if (start == 1'b0 && ^(main_propagateFloat64NaNexitii_mux2viii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_propagateFloat64NaNexitii_mux2viii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %propagateFloat64NaN.exit.i.i*/
	/*   %.mux2.i.i.i = or i64 %.mux2.v.i.i.i, 2251799813685248*/
		main_propagateFloat64NaNexitii_mux2iii = (main_propagateFloat64NaNexitii_mux2viii | 64'd2251799813685248);
end
always @(posedge clk) begin
	/* main: %propagateFloat64NaN.exit.i.i*/
	/*   %.mux2.i.i.i = or i64 %.mux2.v.i.i.i, 2251799813685248*/
	if ((cur_state == LEGUP_F_main_BB_propagateFloat64NaNexitii_110)) begin
		main_propagateFloat64NaNexitii_mux2iii_reg <= main_propagateFloat64NaNexitii_mux2iii;
		if (start == 1'b0 && ^(main_propagateFloat64NaNexitii_mux2iii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_propagateFloat64NaNexitii_mux2iii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %266*/
	/*   %267 = icmp eq i32 %14, 0*/
		main_266_267 = (main_1_14_reg == 32'd0);
end
always @(posedge clk) begin
	/* main: %266*/
	/*   %267 = icmp eq i32 %14, 0*/
	if ((cur_state == LEGUP_F_main_BB__266_111)) begin
		main_266_267_reg <= main_266_267;
		if (start == 1'b0 && ^(main_266_267) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_266_267_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %266*/
	/*   %268 = or i64 %156, 4611686018427387904*/
		main_266_268 = (main_152_156_reg | 64'd4611686018427387904);
end
always @(posedge clk) begin
	/* main: %266*/
	/*   %268 = or i64 %156, 4611686018427387904*/
	if ((cur_state == LEGUP_F_main_BB__266_111)) begin
		main_266_268_reg <= main_266_268;
		if (start == 1'b0 && ^(main_266_268) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_266_268_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %266*/
	/*   %269 = select i1 %267, i64 %156, i64 %268*/
		main_266_269 = (main_266_267 ? main_152_156_reg : main_266_268);
end
always @(posedge clk) begin
	/* main: %266*/
	/*   %269 = select i1 %267, i64 %156, i64 %268*/
	if ((cur_state == LEGUP_F_main_BB__266_111)) begin
		main_266_269_reg <= main_266_269;
		if (start == 1'b0 && ^(main_266_269) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_266_269_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %266*/
	/*   %270 = sext i1 %267 to i32*/
		main_266_270 = $signed(main_266_267);
end
always @(posedge clk) begin
	/* main: %266*/
	/*   %270 = sext i1 %267 to i32*/
	if ((cur_state == LEGUP_F_main_BB__266_111)) begin
		main_266_270_reg <= main_266_270;
		if (start == 1'b0 && ^(main_266_270) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_266_270_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %266*/
	/*   %expDiff.1.i.i = add nsw i32 %270, %15*/
		main_266_expDiff1ii = main_signed_add_32_0;
end
always @(*) begin
/* main: %266*/
/*   %expDiff.1.i.i = add nsw i32 %270, %15*/
	main_266_expDiff1ii_reg = main_1_gep_reg;
end
always @(*) begin
	/* main: %266*/
	/*   %271 = icmp eq i32 %expDiff.1.i.i, 0*/
		main_266_271 = (main_266_expDiff1ii == 32'd0);
end
always @(posedge clk) begin
	/* main: %266*/
	/*   %271 = icmp eq i32 %expDiff.1.i.i, 0*/
	if ((cur_state == LEGUP_F_main_BB__266_111)) begin
		main_266_271_reg <= main_266_271;
		if (start == 1'b0 && ^(main_266_271) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_266_271_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %272*/
	/*   %273 = icmp slt i32 %expDiff.1.i.i, 64*/
		main_272_273 = ($signed(main_266_expDiff1ii_reg) < $signed(32'd64));
end
always @(posedge clk) begin
	/* main: %272*/
	/*   %273 = icmp slt i32 %expDiff.1.i.i, 64*/
	if ((cur_state == LEGUP_F_main_BB__272_112)) begin
		main_272_273_reg <= main_272_273;
		if (start == 1'b0 && ^(main_272_273) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_272_273_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %274*/
	/*   %275 = zext i32 %expDiff.1.i.i to i64*/
		main_274_275 = main_266_expDiff1ii_reg;
end
always @(posedge clk) begin
	/* main: %274*/
	/*   %275 = zext i32 %expDiff.1.i.i to i64*/
	if ((cur_state == LEGUP_F_main_BB__274_113)) begin
		main_274_275_reg <= main_274_275;
		if (start == 1'b0 && ^(main_274_275) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_274_275_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %274*/
	/*   %276 = lshr i64 %269, %275*/
		main_274_276 = (main_266_269_reg >>> (main_274_275 % 64'd64));
end
always @(posedge clk) begin
	/* main: %274*/
	/*   %276 = lshr i64 %269, %275*/
	if ((cur_state == LEGUP_F_main_BB__274_113)) begin
		main_274_276_reg <= main_274_276;
		if (start == 1'b0 && ^(main_274_276) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_274_276_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %274*/
	/*   %277 = sub nsw i32 0, %expDiff.1.i.i*/
		main_274_277 = main_signed_subtract_32_0;
end
always @(*) begin
/* main: %274*/
/*   %277 = sub nsw i32 0, %expDiff.1.i.i*/
	main_274_277_reg = main_1_15_reg;
end
always @(*) begin
	/* main: %274*/
	/*   %278 = and i32 %277, 63*/
		main_274_278 = (main_274_277 & 32'd63);
end
always @(posedge clk) begin
	/* main: %274*/
	/*   %278 = and i32 %277, 63*/
	if ((cur_state == LEGUP_F_main_BB__274_113)) begin
		main_274_278_reg <= main_274_278;
		if (start == 1'b0 && ^(main_274_278) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_274_278_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %274*/
	/*   %279 = zext i32 %278 to i64*/
		main_274_279 = main_274_278;
end
always @(posedge clk) begin
	/* main: %274*/
	/*   %279 = zext i32 %278 to i64*/
	if ((cur_state == LEGUP_F_main_BB__274_113)) begin
		main_274_279_reg <= main_274_279;
		if (start == 1'b0 && ^(main_274_279) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_274_279_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %274*/
	/*   %280 = shl i64 %269, %279*/
		main_274_280 = (main_266_269_reg <<< (main_274_279 % 64'd64));
end
always @(posedge clk) begin
	/* main: %274*/
	/*   %280 = shl i64 %269, %279*/
	if ((cur_state == LEGUP_F_main_BB__274_113)) begin
		main_274_280_reg <= main_274_280;
		if (start == 1'b0 && ^(main_274_280) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_274_280_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %274*/
	/*   %281 = icmp ne i64 %280, 0*/
		main_274_281 = (main_274_280 != 64'd0);
end
always @(posedge clk) begin
	/* main: %274*/
	/*   %281 = icmp ne i64 %280, 0*/
	if ((cur_state == LEGUP_F_main_BB__274_113)) begin
		main_274_281_reg <= main_274_281;
		if (start == 1'b0 && ^(main_274_281) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_274_281_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %274*/
	/*   %282 = zext i1 %281 to i64*/
		main_274_282 = main_274_281;
end
always @(posedge clk) begin
	/* main: %274*/
	/*   %282 = zext i1 %281 to i64*/
	if ((cur_state == LEGUP_F_main_BB__274_113)) begin
		main_274_282_reg <= main_274_282;
		if (start == 1'b0 && ^(main_274_282) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_274_282_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %274*/
	/*   %283 = or i64 %282, %276*/
		main_274_283 = (main_274_282 | main_274_276);
end
always @(posedge clk) begin
	/* main: %274*/
	/*   %283 = or i64 %282, %276*/
	if ((cur_state == LEGUP_F_main_BB__274_113)) begin
		main_274_283_reg <= main_274_283;
		if (start == 1'b0 && ^(main_274_283) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_274_283_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %284*/
	/*   %285 = icmp ne i64 %269, 0*/
		main_284_285 = (main_266_269_reg != 64'd0);
end
always @(posedge clk) begin
	/* main: %284*/
	/*   %285 = icmp ne i64 %269, 0*/
	if ((cur_state == LEGUP_F_main_BB__284_114)) begin
		main_284_285_reg <= main_284_285;
		if (start == 1'b0 && ^(main_284_285) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_284_285_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %284*/
	/*   %286 = zext i1 %285 to i64*/
		main_284_286 = main_284_285;
end
always @(posedge clk) begin
	/* main: %284*/
	/*   %286 = zext i1 %285 to i64*/
	if ((cur_state == LEGUP_F_main_BB__284_114)) begin
		main_284_286_reg <= main_284_286;
		if (start == 1'b0 && ^(main_284_286) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_284_286_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %shift64RightJamming.exit.i.i*/
	/*   %z.0.i.i.i = phi i64 [ %283, %274 ], [ %286, %284 ], [ %269, %266 ]*/
	if ((((cur_state == LEGUP_F_main_BB__266_111) & (memory_controller_waitrequest == 1'd0)) & (main_266_271 == 1'd1))) begin
		main_shift64RightJammingexitii_z0iii = main_266_269;
	end
	/* main: %shift64RightJamming.exit.i.i*/
	/*   %z.0.i.i.i = phi i64 [ %283, %274 ], [ %286, %284 ], [ %269, %266 ]*/
	else if (((cur_state == LEGUP_F_main_BB__274_113) & (memory_controller_waitrequest == 1'd0))) begin
		main_shift64RightJammingexitii_z0iii = main_274_283;
	end
	/* main: %shift64RightJamming.exit.i.i*/
	/*   %z.0.i.i.i = phi i64 [ %283, %274 ], [ %286, %284 ], [ %269, %266 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__284_114) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_shift64RightJammingexitii_z0iii = main_284_286;
	end
end
always @(posedge clk) begin
	/* main: %shift64RightJamming.exit.i.i*/
	/*   %z.0.i.i.i = phi i64 [ %283, %274 ], [ %286, %284 ], [ %269, %266 ]*/
	if ((((cur_state == LEGUP_F_main_BB__266_111) & (memory_controller_waitrequest == 1'd0)) & (main_266_271 == 1'd1))) begin
		main_shift64RightJammingexitii_z0iii_reg <= main_shift64RightJammingexitii_z0iii;
		if (start == 1'b0 && ^(main_shift64RightJammingexitii_z0iii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_shift64RightJammingexitii_z0iii_reg"); $finish; end
	end
	/* main: %shift64RightJamming.exit.i.i*/
	/*   %z.0.i.i.i = phi i64 [ %283, %274 ], [ %286, %284 ], [ %269, %266 ]*/
	if (((cur_state == LEGUP_F_main_BB__274_113) & (memory_controller_waitrequest == 1'd0))) begin
		main_shift64RightJammingexitii_z0iii_reg <= main_shift64RightJammingexitii_z0iii;
		if (start == 1'b0 && ^(main_shift64RightJammingexitii_z0iii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_shift64RightJammingexitii_z0iii_reg"); $finish; end
	end
	/* main: %shift64RightJamming.exit.i.i*/
	/*   %z.0.i.i.i = phi i64 [ %283, %274 ], [ %286, %284 ], [ %269, %266 ]*/
	if (((cur_state == LEGUP_F_main_BB__284_114) & (memory_controller_waitrequest == 1'd0))) begin
		main_shift64RightJammingexitii_z0iii_reg <= main_shift64RightJammingexitii_z0iii;
		if (start == 1'b0 && ^(main_shift64RightJammingexitii_z0iii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_shift64RightJammingexitii_z0iii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %shift64RightJamming.exit.i.i*/
	/*   %287 = or i64 %154, 4611686018427387904*/
		main_shift64RightJammingexitii_287 = (main_152_154_reg | 64'd4611686018427387904);
end
always @(posedge clk) begin
	/* main: %shift64RightJamming.exit.i.i*/
	/*   %287 = or i64 %154, 4611686018427387904*/
	if ((cur_state == LEGUP_F_main_BB_shift64RightJammingexitii_115)) begin
		main_shift64RightJammingexitii_287_reg <= main_shift64RightJammingexitii_287;
		if (start == 1'b0 && ^(main_shift64RightJammingexitii_287) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_shift64RightJammingexitii_287_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %288*/
	/*   %289 = phi i64 [ %287, %shift64RightJamming.exit.i.i ], [ %154, %186 ]*/
	if ((((cur_state == LEGUP_F_main_BB__186_78) & (memory_controller_waitrequest == 1'd0)) & (main_186_187 == 1'd1))) begin
		main_288_289 = main_152_154_reg;
	end
	/* main: %288*/
	/*   %289 = phi i64 [ %287, %shift64RightJamming.exit.i.i ], [ %154, %186 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_shift64RightJammingexitii_115) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_288_289 = main_shift64RightJammingexitii_287;
	end
end
always @(posedge clk) begin
	/* main: %288*/
	/*   %289 = phi i64 [ %287, %shift64RightJamming.exit.i.i ], [ %154, %186 ]*/
	if ((((cur_state == LEGUP_F_main_BB__186_78) & (memory_controller_waitrequest == 1'd0)) & (main_186_187 == 1'd1))) begin
		main_288_289_reg <= main_288_289;
		if (start == 1'b0 && ^(main_288_289) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_288_289_reg"); $finish; end
	end
	/* main: %288*/
	/*   %289 = phi i64 [ %287, %shift64RightJamming.exit.i.i ], [ %154, %186 ]*/
	if (((cur_state == LEGUP_F_main_BB_shift64RightJammingexitii_115) & (memory_controller_waitrequest == 1'd0))) begin
		main_288_289_reg <= main_288_289;
		if (start == 1'b0 && ^(main_288_289) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_288_289_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %288*/
	/*   %290 = phi i64 [ %z.0.i.i.i, %shift64RightJamming.exit.i.i ], [ %156, %186 ]*/
	if ((((cur_state == LEGUP_F_main_BB__186_78) & (memory_controller_waitrequest == 1'd0)) & (main_186_187 == 1'd1))) begin
		main_288_290 = main_152_156_reg;
	end
	/* main: %288*/
	/*   %290 = phi i64 [ %z.0.i.i.i, %shift64RightJamming.exit.i.i ], [ %156, %186 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_shift64RightJammingexitii_115) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_288_290 = main_shift64RightJammingexitii_z0iii_reg;
	end
end
always @(posedge clk) begin
	/* main: %288*/
	/*   %290 = phi i64 [ %z.0.i.i.i, %shift64RightJamming.exit.i.i ], [ %156, %186 ]*/
	if ((((cur_state == LEGUP_F_main_BB__186_78) & (memory_controller_waitrequest == 1'd0)) & (main_186_187 == 1'd1))) begin
		main_288_290_reg <= main_288_290;
		if (start == 1'b0 && ^(main_288_290) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_288_290_reg"); $finish; end
	end
	/* main: %288*/
	/*   %290 = phi i64 [ %z.0.i.i.i, %shift64RightJamming.exit.i.i ], [ %156, %186 ]*/
	if (((cur_state == LEGUP_F_main_BB_shift64RightJammingexitii_115) & (memory_controller_waitrequest == 1'd0))) begin
		main_288_290_reg <= main_288_290;
		if (start == 1'b0 && ^(main_288_290) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_288_290_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %288*/
	/*   %aExp.1.i.i = phi i32 [ %12, %shift64RightJamming.exit.i.i ], [ %aExp.0.i.i, %186 ]*/
	if ((((cur_state == LEGUP_F_main_BB__186_78) & (memory_controller_waitrequest == 1'd0)) & (main_186_187 == 1'd1))) begin
		main_288_aExp1ii = main_186_aExp0ii_reg;
	end
	/* main: %288*/
	/*   %aExp.1.i.i = phi i32 [ %12, %shift64RightJamming.exit.i.i ], [ %aExp.0.i.i, %186 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_shift64RightJammingexitii_115) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_288_aExp1ii = main_1_12_reg;
	end
end
always @(posedge clk) begin
	/* main: %288*/
	/*   %aExp.1.i.i = phi i32 [ %12, %shift64RightJamming.exit.i.i ], [ %aExp.0.i.i, %186 ]*/
	if ((((cur_state == LEGUP_F_main_BB__186_78) & (memory_controller_waitrequest == 1'd0)) & (main_186_187 == 1'd1))) begin
		main_288_aExp1ii_reg <= main_288_aExp1ii;
		if (start == 1'b0 && ^(main_288_aExp1ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_288_aExp1ii_reg"); $finish; end
	end
	/* main: %288*/
	/*   %aExp.1.i.i = phi i32 [ %12, %shift64RightJamming.exit.i.i ], [ %aExp.0.i.i, %186 ]*/
	if (((cur_state == LEGUP_F_main_BB_shift64RightJammingexitii_115) & (memory_controller_waitrequest == 1'd0))) begin
		main_288_aExp1ii_reg <= main_288_aExp1ii;
		if (start == 1'b0 && ^(main_288_aExp1ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_288_aExp1ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %288*/
	/*   %291 = sub i64 %289, %290*/
		main_288_291 = main_signed_subtract_64_0;
end
always @(posedge clk) begin
	/* main: %288*/
	/*   %291 = sub i64 %289, %290*/
	if ((cur_state == LEGUP_F_main_BB__288_116)) begin
		main_288_291_reg <= main_288_291;
		if (start == 1'b0 && ^(main_288_291) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_288_291_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %292*/
	/*   %.0.i.i = phi i32 [ %7, %288 ], [ %243, %239 ]*/
	if (((cur_state == LEGUP_F_main_BB__239_98) & (memory_controller_waitrequest == 1'd0))) begin
		main_292_0ii = main_239_243;
	end
	/* main: %292*/
	/*   %.0.i.i = phi i32 [ %7, %288 ], [ %243, %239 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__288_116) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_292_0ii = main_1_7_reg;
	end
end
always @(posedge clk) begin
	/* main: %292*/
	/*   %.0.i.i = phi i32 [ %7, %288 ], [ %243, %239 ]*/
	if (((cur_state == LEGUP_F_main_BB__239_98) & (memory_controller_waitrequest == 1'd0))) begin
		main_292_0ii_reg <= main_292_0ii;
		if (start == 1'b0 && ^(main_292_0ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_292_0ii_reg"); $finish; end
	end
	/* main: %292*/
	/*   %.0.i.i = phi i32 [ %7, %288 ], [ %243, %239 ]*/
	if (((cur_state == LEGUP_F_main_BB__288_116) & (memory_controller_waitrequest == 1'd0))) begin
		main_292_0ii_reg <= main_292_0ii;
		if (start == 1'b0 && ^(main_292_0ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_292_0ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %292*/
	/*   %zExp.0.i.i = phi i32 [ %aExp.1.i.i, %288 ], [ %bExp.1.i.i, %239 ]*/
	if (((cur_state == LEGUP_F_main_BB__239_98) & (memory_controller_waitrequest == 1'd0))) begin
		main_292_zExp0ii = main_239_bExp1ii_reg;
	end
	/* main: %292*/
	/*   %zExp.0.i.i = phi i32 [ %aExp.1.i.i, %288 ], [ %bExp.1.i.i, %239 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__288_116) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_292_zExp0ii = main_288_aExp1ii_reg;
	end
end
always @(posedge clk) begin
	/* main: %292*/
	/*   %zExp.0.i.i = phi i32 [ %aExp.1.i.i, %288 ], [ %bExp.1.i.i, %239 ]*/
	if (((cur_state == LEGUP_F_main_BB__239_98) & (memory_controller_waitrequest == 1'd0))) begin
		main_292_zExp0ii_reg <= main_292_zExp0ii;
		if (start == 1'b0 && ^(main_292_zExp0ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_292_zExp0ii_reg"); $finish; end
	end
	/* main: %292*/
	/*   %zExp.0.i.i = phi i32 [ %aExp.1.i.i, %288 ], [ %bExp.1.i.i, %239 ]*/
	if (((cur_state == LEGUP_F_main_BB__288_116) & (memory_controller_waitrequest == 1'd0))) begin
		main_292_zExp0ii_reg <= main_292_zExp0ii;
		if (start == 1'b0 && ^(main_292_zExp0ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_292_zExp0ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %292*/
	/*   %zSig.0.i.i = phi i64 [ %291, %288 ], [ %242, %239 ]*/
	if (((cur_state == LEGUP_F_main_BB__239_98) & (memory_controller_waitrequest == 1'd0))) begin
		main_292_zSig0ii = main_239_242;
	end
	/* main: %292*/
	/*   %zSig.0.i.i = phi i64 [ %291, %288 ], [ %242, %239 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__288_116) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_292_zSig0ii = main_288_291;
	end
end
always @(posedge clk) begin
	/* main: %292*/
	/*   %zSig.0.i.i = phi i64 [ %291, %288 ], [ %242, %239 ]*/
	if (((cur_state == LEGUP_F_main_BB__239_98) & (memory_controller_waitrequest == 1'd0))) begin
		main_292_zSig0ii_reg <= main_292_zSig0ii;
		if (start == 1'b0 && ^(main_292_zSig0ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_292_zSig0ii_reg"); $finish; end
	end
	/* main: %292*/
	/*   %zSig.0.i.i = phi i64 [ %291, %288 ], [ %242, %239 ]*/
	if (((cur_state == LEGUP_F_main_BB__288_116) & (memory_controller_waitrequest == 1'd0))) begin
		main_292_zSig0ii_reg <= main_292_zSig0ii;
		if (start == 1'b0 && ^(main_292_zSig0ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_292_zSig0ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %292*/
	/*   %293 = add nsw i32 %zExp.0.i.i, -1*/
		main_292_293 = main_signed_add_32_0;
end
always @(*) begin
/* main: %292*/
/*   %293 = add nsw i32 %zExp.0.i.i, -1*/
	main_292_293_reg = main_1_gep_reg;
end
always @(*) begin
	/* main: %292*/
	/*   %294 = icmp ult i64 %zSig.0.i.i, 4294967296*/
		main_292_294 = (main_292_zSig0ii_reg < 64'd4294967296);
end
always @(posedge clk) begin
	/* main: %292*/
	/*   %294 = icmp ult i64 %zSig.0.i.i, 4294967296*/
	if ((cur_state == LEGUP_F_main_BB__292_117)) begin
		main_292_294_reg <= main_292_294;
		if (start == 1'b0 && ^(main_292_294) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_292_294_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %292*/
	/*   %295 = lshr i64 %zSig.0.i.i, 32*/
		main_292_295 = (main_292_zSig0ii_reg >>> (64'd32 % 64'd64));
end
always @(posedge clk) begin
	/* main: %292*/
	/*   %295 = lshr i64 %zSig.0.i.i, 32*/
	if ((cur_state == LEGUP_F_main_BB__292_117)) begin
		main_292_295_reg <= main_292_295;
		if (start == 1'b0 && ^(main_292_295) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_292_295_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %292*/
	/*   %a.sink.i.i.i.i = select i1 %294, i64 %zSig.0.i.i, i64 %295*/
		main_292_asinkiiii = (main_292_294 ? main_292_zSig0ii_reg : main_292_295);
end
always @(posedge clk) begin
	/* main: %292*/
	/*   %a.sink.i.i.i.i = select i1 %294, i64 %zSig.0.i.i, i64 %295*/
	if ((cur_state == LEGUP_F_main_BB__292_117)) begin
		main_292_asinkiiii_reg <= main_292_asinkiiii;
		if (start == 1'b0 && ^(main_292_asinkiiii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_292_asinkiiii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %292*/
	/*   %extract.t.i.i.i.i = trunc i64 %a.sink.i.i.i.i to i32*/
		main_292_extracttiiii = main_292_asinkiiii[31:0];
end
always @(posedge clk) begin
	/* main: %292*/
	/*   %extract.t.i.i.i.i = trunc i64 %a.sink.i.i.i.i to i32*/
	if ((cur_state == LEGUP_F_main_BB__292_117)) begin
		main_292_extracttiiii_reg <= main_292_extracttiiii;
		if (start == 1'b0 && ^(main_292_extracttiiii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_292_extracttiiii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %292*/
	/*   %296 = icmp ult i32 %extract.t.i.i.i.i, 65536*/
		main_292_296 = (main_292_extracttiiii < 32'd65536);
end
always @(posedge clk) begin
	/* main: %292*/
	/*   %296 = icmp ult i32 %extract.t.i.i.i.i, 65536*/
	if ((cur_state == LEGUP_F_main_BB__292_117)) begin
		main_292_296_reg <= main_292_296;
		if (start == 1'b0 && ^(main_292_296) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_292_296_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %292*/
	/*   %297 = shl i32 %extract.t.i.i.i.i, 16*/
		main_292_297 = (main_292_extracttiiii <<< (32'd16 % 32));
end
always @(posedge clk) begin
	/* main: %292*/
	/*   %297 = shl i32 %extract.t.i.i.i.i, 16*/
	if ((cur_state == LEGUP_F_main_BB__292_117)) begin
		main_292_297_reg <= main_292_297;
		if (start == 1'b0 && ^(main_292_297) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_292_297_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %292*/
	/*   %.a.i.i.i.i.i = select i1 %296, i32 %297, i32 %extract.t.i.i.i.i*/
		main_292_aiiiii = (main_292_296 ? main_292_297 : main_292_extracttiiii);
end
always @(posedge clk) begin
	/* main: %292*/
	/*   %.a.i.i.i.i.i = select i1 %296, i32 %297, i32 %extract.t.i.i.i.i*/
	if ((cur_state == LEGUP_F_main_BB__292_117)) begin
		main_292_aiiiii_reg <= main_292_aiiiii;
		if (start == 1'b0 && ^(main_292_aiiiii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_292_aiiiii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %292*/
	/*   %..i.i.i.i.i = select i1 %296, i32 16, i32 0*/
		main_292_iiiii = (main_292_296 ? 32'd16 : 32'd0);
end
always @(posedge clk) begin
	/* main: %292*/
	/*   %..i.i.i.i.i = select i1 %296, i32 16, i32 0*/
	if ((cur_state == LEGUP_F_main_BB__292_117)) begin
		main_292_iiiii_reg <= main_292_iiiii;
		if (start == 1'b0 && ^(main_292_iiiii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_292_iiiii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %292*/
	/*   %298 = icmp ult i32 %.a.i.i.i.i.i, 16777216*/
		main_292_298 = (main_292_aiiiii < 32'd16777216);
end
always @(posedge clk) begin
	/* main: %292*/
	/*   %298 = icmp ult i32 %.a.i.i.i.i.i, 16777216*/
	if ((cur_state == LEGUP_F_main_BB__292_117)) begin
		main_292_298_reg <= main_292_298;
		if (start == 1'b0 && ^(main_292_298) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_292_298_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %299*/
	/*   %300 = or i32 %..i.i.i.i.i, 8*/
		main_299_300 = (main_292_iiiii_reg | 32'd8);
end
always @(posedge clk) begin
	/* main: %299*/
	/*   %300 = or i32 %..i.i.i.i.i, 8*/
	if ((cur_state == LEGUP_F_main_BB__299_118)) begin
		main_299_300_reg <= main_299_300;
		if (start == 1'b0 && ^(main_299_300) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_299_300_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %299*/
	/*   %301 = shl i32 %.a.i.i.i.i.i, 8*/
		main_299_301 = (main_292_aiiiii_reg <<< (32'd8 % 32));
end
always @(posedge clk) begin
	/* main: %299*/
	/*   %301 = shl i32 %.a.i.i.i.i.i, 8*/
	if ((cur_state == LEGUP_F_main_BB__299_118)) begin
		main_299_301_reg <= main_299_301;
		if (start == 1'b0 && ^(main_299_301) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_299_301_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %normalizeRoundAndPackFloat64.exit.i.i*/
	/*   %.1.i.i.i.i.i = phi i32 [ %301, %299 ], [ %.a.i.i.i.i.i, %292 ]*/
	if ((((cur_state == LEGUP_F_main_BB__292_117) & (memory_controller_waitrequest == 1'd0)) & (main_292_298 == 1'd0))) begin
		main_normalizeRoundAndPackFloat64exitii_1iiiii = main_292_aiiiii;
	end
	/* main: %normalizeRoundAndPackFloat64.exit.i.i*/
	/*   %.1.i.i.i.i.i = phi i32 [ %301, %299 ], [ %.a.i.i.i.i.i, %292 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__299_118) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_normalizeRoundAndPackFloat64exitii_1iiiii = main_299_301;
	end
end
always @(posedge clk) begin
	/* main: %normalizeRoundAndPackFloat64.exit.i.i*/
	/*   %.1.i.i.i.i.i = phi i32 [ %301, %299 ], [ %.a.i.i.i.i.i, %292 ]*/
	if ((((cur_state == LEGUP_F_main_BB__292_117) & (memory_controller_waitrequest == 1'd0)) & (main_292_298 == 1'd0))) begin
		main_normalizeRoundAndPackFloat64exitii_1iiiii_reg <= main_normalizeRoundAndPackFloat64exitii_1iiiii;
		if (start == 1'b0 && ^(main_normalizeRoundAndPackFloat64exitii_1iiiii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_normalizeRoundAndPackFloat64exitii_1iiiii_reg"); $finish; end
	end
	/* main: %normalizeRoundAndPackFloat64.exit.i.i*/
	/*   %.1.i.i.i.i.i = phi i32 [ %301, %299 ], [ %.a.i.i.i.i.i, %292 ]*/
	if (((cur_state == LEGUP_F_main_BB__299_118) & (memory_controller_waitrequest == 1'd0))) begin
		main_normalizeRoundAndPackFloat64exitii_1iiiii_reg <= main_normalizeRoundAndPackFloat64exitii_1iiiii;
		if (start == 1'b0 && ^(main_normalizeRoundAndPackFloat64exitii_1iiiii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_normalizeRoundAndPackFloat64exitii_1iiiii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %normalizeRoundAndPackFloat64.exit.i.i*/
	/*   %shiftCount.1.i.i.i.i.i = phi i32 [ %300, %299 ], [ %..i.i.i.i.i, %292 ]*/
	if ((((cur_state == LEGUP_F_main_BB__292_117) & (memory_controller_waitrequest == 1'd0)) & (main_292_298 == 1'd0))) begin
		main_normalizeRoundAndPackFloat64exitii_shiftCount1iiiii = main_292_iiiii;
	end
	/* main: %normalizeRoundAndPackFloat64.exit.i.i*/
	/*   %shiftCount.1.i.i.i.i.i = phi i32 [ %300, %299 ], [ %..i.i.i.i.i, %292 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__299_118) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_normalizeRoundAndPackFloat64exitii_shiftCount1iiiii = main_299_300;
	end
end
always @(posedge clk) begin
	/* main: %normalizeRoundAndPackFloat64.exit.i.i*/
	/*   %shiftCount.1.i.i.i.i.i = phi i32 [ %300, %299 ], [ %..i.i.i.i.i, %292 ]*/
	if ((((cur_state == LEGUP_F_main_BB__292_117) & (memory_controller_waitrequest == 1'd0)) & (main_292_298 == 1'd0))) begin
		main_normalizeRoundAndPackFloat64exitii_shiftCount1iiiii_reg <= main_normalizeRoundAndPackFloat64exitii_shiftCount1iiiii;
		if (start == 1'b0 && ^(main_normalizeRoundAndPackFloat64exitii_shiftCount1iiiii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_normalizeRoundAndPackFloat64exitii_shiftCount1iiiii_reg"); $finish; end
	end
	/* main: %normalizeRoundAndPackFloat64.exit.i.i*/
	/*   %shiftCount.1.i.i.i.i.i = phi i32 [ %300, %299 ], [ %..i.i.i.i.i, %292 ]*/
	if (((cur_state == LEGUP_F_main_BB__299_118) & (memory_controller_waitrequest == 1'd0))) begin
		main_normalizeRoundAndPackFloat64exitii_shiftCount1iiiii_reg <= main_normalizeRoundAndPackFloat64exitii_shiftCount1iiiii;
		if (start == 1'b0 && ^(main_normalizeRoundAndPackFloat64exitii_shiftCount1iiiii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_normalizeRoundAndPackFloat64exitii_shiftCount1iiiii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %normalizeRoundAndPackFloat64.exit.i.i*/
	/*   %302 = lshr i32 %.1.i.i.i.i.i, 24*/
		main_normalizeRoundAndPackFloat64exitii_302 = (main_normalizeRoundAndPackFloat64exitii_1iiiii_reg >>> (32'd24 % 32));
end
always @(posedge clk) begin
	/* main: %normalizeRoundAndPackFloat64.exit.i.i*/
	/*   %302 = lshr i32 %.1.i.i.i.i.i, 24*/
	if ((cur_state == LEGUP_F_main_BB_normalizeRoundAndPackFloat64exitii_119)) begin
		main_normalizeRoundAndPackFloat64exitii_302_reg <= main_normalizeRoundAndPackFloat64exitii_302;
		if (start == 1'b0 && ^(main_normalizeRoundAndPackFloat64exitii_302) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_normalizeRoundAndPackFloat64exitii_302_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %normalizeRoundAndPackFloat64.exit.i.i*/
	/*   %gep_int4 = ptrtoint [256 x i32]* @countLeadingZeros32.countLeadingZerosHigh to i32*/
if (reset) begin main_normalizeRoundAndPackFloat64exitii_gep_int4 = 0; end
		main_normalizeRoundAndPackFloat64exitii_gep_int4 = 1'd0;
end
always @(posedge clk) begin
	/* main: %normalizeRoundAndPackFloat64.exit.i.i*/
	/*   %gep_int4 = ptrtoint [256 x i32]* @countLeadingZeros32.countLeadingZerosHigh to i32*/
	if ((cur_state == LEGUP_F_main_BB_normalizeRoundAndPackFloat64exitii_119)) begin
		main_normalizeRoundAndPackFloat64exitii_gep_int4_reg <= main_normalizeRoundAndPackFloat64exitii_gep_int4;
		if (start == 1'b0 && ^(main_normalizeRoundAndPackFloat64exitii_gep_int4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_normalizeRoundAndPackFloat64exitii_gep_int4_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %normalizeRoundAndPackFloat64.exit.i.i*/
	/*   %gep_array5 = mul i32 %302, 4*/
		main_normalizeRoundAndPackFloat64exitii_gep_array5 = (main_normalizeRoundAndPackFloat64exitii_302 * 32'd4);
end
always @(posedge clk) begin
	/* main: %normalizeRoundAndPackFloat64.exit.i.i*/
	/*   %gep_array5 = mul i32 %302, 4*/
	if ((cur_state == LEGUP_F_main_BB_normalizeRoundAndPackFloat64exitii_119)) begin
		main_normalizeRoundAndPackFloat64exitii_gep_array5_reg <= main_normalizeRoundAndPackFloat64exitii_gep_array5;
		if (start == 1'b0 && ^(main_normalizeRoundAndPackFloat64exitii_gep_array5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_normalizeRoundAndPackFloat64exitii_gep_array5_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %normalizeRoundAndPackFloat64.exit.i.i*/
	/*   %gep6 = add i32 %gep_int4, %gep_array5*/
		main_normalizeRoundAndPackFloat64exitii_gep6 = main_signed_add_32_0;
end
always @(*) begin
/* main: %normalizeRoundAndPackFloat64.exit.i.i*/
/*   %gep6 = add i32 %gep_int4, %gep_array5*/
	main_normalizeRoundAndPackFloat64exitii_gep6_reg = main_float64_addexit_318_reg;
end
always @(*) begin
	/* main: %normalizeRoundAndPackFloat64.exit.i.i*/
	/*   %303 = inttoptr i32 %gep6 to i32**/
		main_normalizeRoundAndPackFloat64exitii_303 = main_normalizeRoundAndPackFloat64exitii_gep6;
end
always @(posedge clk) begin
	/* main: %normalizeRoundAndPackFloat64.exit.i.i*/
	/*   %303 = inttoptr i32 %gep6 to i32**/
	if ((cur_state == LEGUP_F_main_BB_normalizeRoundAndPackFloat64exitii_120)) begin
		main_normalizeRoundAndPackFloat64exitii_303_reg <= main_normalizeRoundAndPackFloat64exitii_303;
		if (start == 1'b0 && ^(main_normalizeRoundAndPackFloat64exitii_303) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_normalizeRoundAndPackFloat64exitii_303_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %normalizeRoundAndPackFloat64.exit.i.i*/
	/*   %304 = load i32* %303, align 4, !tbaa !5*/
		main_normalizeRoundAndPackFloat64exitii_304 = countLeadingZeros32countLeadingZerosHigh_out_a;
end
always @(posedge clk) begin
	/* main: %normalizeRoundAndPackFloat64.exit.i.i*/
	/*   %304 = load i32* %303, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_normalizeRoundAndPackFloat64exitii_121)) begin
		main_normalizeRoundAndPackFloat64exitii_304_reg <= main_normalizeRoundAndPackFloat64exitii_304;
		if (start == 1'b0 && ^(main_normalizeRoundAndPackFloat64exitii_304) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_normalizeRoundAndPackFloat64exitii_304_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %normalizeRoundAndPackFloat64.exit.i.i*/
	/*   %305 = select i1 %294, i32 31, i32 -1*/
		main_normalizeRoundAndPackFloat64exitii_305 = (main_292_294_reg ? 32'd31 : -32'd1);
end
always @(posedge clk) begin
	/* main: %normalizeRoundAndPackFloat64.exit.i.i*/
	/*   %305 = select i1 %294, i32 31, i32 -1*/
	if ((cur_state == LEGUP_F_main_BB_normalizeRoundAndPackFloat64exitii_119)) begin
		main_normalizeRoundAndPackFloat64exitii_305_reg <= main_normalizeRoundAndPackFloat64exitii_305;
		if (start == 1'b0 && ^(main_normalizeRoundAndPackFloat64exitii_305) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_normalizeRoundAndPackFloat64exitii_305_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %normalizeRoundAndPackFloat64.exit.i.i*/
	/*   %306 = add nsw i32 %shiftCount.1.i.i.i.i.i, %305*/
		main_normalizeRoundAndPackFloat64exitii_306 = main_signed_add_32_0;
end
always @(posedge clk) begin
	/* main: %normalizeRoundAndPackFloat64.exit.i.i*/
	/*   %306 = add nsw i32 %shiftCount.1.i.i.i.i.i, %305*/
	if ((cur_state == LEGUP_F_main_BB_normalizeRoundAndPackFloat64exitii_119)) begin
		main_normalizeRoundAndPackFloat64exitii_306_reg <= main_normalizeRoundAndPackFloat64exitii_306;
		if (start == 1'b0 && ^(main_normalizeRoundAndPackFloat64exitii_306) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_normalizeRoundAndPackFloat64exitii_306_reg"); $finish; end
	end
	/* main: %float64_add.exit*/
	/*   %gep9 = add i32 %gep_int7, %gep_array8*/
	if ((cur_state == LEGUP_F_main_BB_float64_addexit_125)) begin
		main_normalizeRoundAndPackFloat64exitii_306_reg <= main_float64_addexit_gep9;
		if (start == 1'b0 && ^(main_float64_addexit_gep9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_normalizeRoundAndPackFloat64exitii_306_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %normalizeRoundAndPackFloat64.exit.i.i*/
	/*   %307 = add i32 %306, %304*/
		main_normalizeRoundAndPackFloat64exitii_307 = main_signed_add_32_0;
end
always @(*) begin
/* main: %normalizeRoundAndPackFloat64.exit.i.i*/
/*   %307 = add i32 %306, %304*/
	main_normalizeRoundAndPackFloat64exitii_307_reg = main_float64_addexit_318_reg;
end
always @(*) begin
	/* main: %normalizeRoundAndPackFloat64.exit.i.i*/
	/*   %308 = sub i32 %293, %307*/
		main_normalizeRoundAndPackFloat64exitii_308 = main_signed_subtract_32_0;
end
always @(*) begin
/* main: %normalizeRoundAndPackFloat64.exit.i.i*/
/*   %308 = sub i32 %293, %307*/
	main_normalizeRoundAndPackFloat64exitii_308_reg = main_1_15_reg;
end
always @(*) begin
	/* main: %normalizeRoundAndPackFloat64.exit.i.i*/
	/*   %309 = zext i32 %307 to i64*/
		main_normalizeRoundAndPackFloat64exitii_309 = main_normalizeRoundAndPackFloat64exitii_307;
end
always @(posedge clk) begin
	/* main: %normalizeRoundAndPackFloat64.exit.i.i*/
	/*   %309 = zext i32 %307 to i64*/
	if ((cur_state == LEGUP_F_main_BB_normalizeRoundAndPackFloat64exitii_121)) begin
		main_normalizeRoundAndPackFloat64exitii_309_reg <= main_normalizeRoundAndPackFloat64exitii_309;
		if (start == 1'b0 && ^(main_normalizeRoundAndPackFloat64exitii_309) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_normalizeRoundAndPackFloat64exitii_309_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %normalizeRoundAndPackFloat64.exit.i.i*/
	/*   %310 = shl i64 %zSig.0.i.i, %309*/
		main_normalizeRoundAndPackFloat64exitii_310 = (main_292_zSig0ii_reg <<< (main_normalizeRoundAndPackFloat64exitii_309 % 64'd64));
end
always @(posedge clk) begin
	/* main: %normalizeRoundAndPackFloat64.exit.i.i*/
	/*   %310 = shl i64 %zSig.0.i.i, %309*/
	if ((cur_state == LEGUP_F_main_BB_normalizeRoundAndPackFloat64exitii_121)) begin
		main_normalizeRoundAndPackFloat64exitii_310_reg <= main_normalizeRoundAndPackFloat64exitii_310;
		if (start == 1'b0 && ^(main_normalizeRoundAndPackFloat64exitii_310) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_normalizeRoundAndPackFloat64exitii_310_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %normalizeRoundAndPackFloat64.exit.i.i*/
	/*   %311 = tail call fastcc i64 @roundAndPackFloat64(i32 %.0.i.i, i32 %308, i64 %310) #1*/
		main_normalizeRoundAndPackFloat64exitii_311 = roundAndPackFloat64_return_val_reg;
end
always @(posedge clk) begin
	/* main: %normalizeRoundAndPackFloat64.exit.i.i*/
	/*   %311 = tail call fastcc i64 @roundAndPackFloat64(i32 %.0.i.i, i32 %308, i64 %310) #1*/
	if ((cur_state == LEGUP_function_call_122)) begin
		main_normalizeRoundAndPackFloat64exitii_311_reg <= main_normalizeRoundAndPackFloat64exitii_311;
		if (start == 1'b0 && ^(main_normalizeRoundAndPackFloat64exitii_311) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_normalizeRoundAndPackFloat64exitii_311_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_add.exit*/
	/*   %.0.i = phi i64 [ %.mux2.i15.i.i, %propagateFloat64NaN.exit16.i.i ], [ %151, %150 ], [ %.mux2.i6.i.i, %propagateFloat64NaN.exit7.i.i ], [ %91, %89 ], [ %.mux2.i.i9.i, %propagateFloat64NaN.exit.i10.i ], [ %139, %135 ], [ %3, %24 ], [ %3, %114 ], [ %.mux2.i.i.i, %propagateFloat64NaN.exit.i.i ], [ %311, %normalizeRoundAndPackFloat64.exit.i.i ], [ %.mux2.i9.i.i, %propagateFloat64NaN.exit10.i.i ], [ %216, %212 ], [ %.mux2.i16.i.i, %propagateFloat64NaN.exit17.i.i ], [ 9223372036854775807, %182 ], [ %3, %246 ], [ 0, %188 ]*/
	if ((((cur_state == LEGUP_F_main_BB__24_6) & (memory_controller_waitrequest == 1'd0)) & (main_24_25 == 1'd1))) begin
		main_float64_addexit_0i = main_1_3_reg;
	end
	/* main: %float64_add.exit*/
	/*   %.0.i = phi i64 [ %.mux2.i15.i.i, %propagateFloat64NaN.exit16.i.i ], [ %151, %150 ], [ %.mux2.i6.i.i, %propagateFloat64NaN.exit7.i.i ], [ %91, %89 ], [ %.mux2.i.i9.i, %propagateFloat64NaN.exit.i10.i ], [ %139, %135 ], [ %3, %24 ], [ %3, %114 ], [ %.mux2.i.i.i, %propagateFloat64NaN.exit.i.i ], [ %311, %normalizeRoundAndPackFloat64.exit.i.i ], [ %.mux2.i9.i.i, %propagateFloat64NaN.exit10.i.i ], [ %216, %212 ], [ %.mux2.i16.i.i, %propagateFloat64NaN.exit17.i.i ], [ 9223372036854775807, %182 ], [ %3, %246 ], [ 0, %188 ]*/
	else if (((cur_state == LEGUP_F_main_BB_propagateFloat64NaNexit16ii_16) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_addexit_0i = main_propagateFloat64NaNexit16ii_mux2i15ii;
	end
	/* main: %float64_add.exit*/
	/*   %.0.i = phi i64 [ %.mux2.i15.i.i, %propagateFloat64NaN.exit16.i.i ], [ %151, %150 ], [ %.mux2.i6.i.i, %propagateFloat64NaN.exit7.i.i ], [ %91, %89 ], [ %.mux2.i.i9.i, %propagateFloat64NaN.exit.i10.i ], [ %139, %135 ], [ %3, %24 ], [ %3, %114 ], [ %.mux2.i.i.i, %propagateFloat64NaN.exit.i.i ], [ %311, %normalizeRoundAndPackFloat64.exit.i.i ], [ %.mux2.i9.i.i, %propagateFloat64NaN.exit10.i.i ], [ %216, %212 ], [ %.mux2.i16.i.i, %propagateFloat64NaN.exit17.i.i ], [ 9223372036854775807, %182 ], [ %3, %246 ], [ 0, %188 ]*/
	else if (((cur_state == LEGUP_F_main_BB_propagateFloat64NaNexit7ii_33) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_addexit_0i = main_propagateFloat64NaNexit7ii_mux2i6ii;
	end
	/* main: %float64_add.exit*/
	/*   %.0.i = phi i64 [ %.mux2.i15.i.i, %propagateFloat64NaN.exit16.i.i ], [ %151, %150 ], [ %.mux2.i6.i.i, %propagateFloat64NaN.exit7.i.i ], [ %91, %89 ], [ %.mux2.i.i9.i, %propagateFloat64NaN.exit.i10.i ], [ %139, %135 ], [ %3, %24 ], [ %3, %114 ], [ %.mux2.i.i.i, %propagateFloat64NaN.exit.i.i ], [ %311, %normalizeRoundAndPackFloat64.exit.i.i ], [ %.mux2.i9.i.i, %propagateFloat64NaN.exit10.i.i ], [ %216, %212 ], [ %.mux2.i16.i.i, %propagateFloat64NaN.exit17.i.i ], [ 9223372036854775807, %182 ], [ %3, %246 ], [ 0, %188 ]*/
	else if (((cur_state == LEGUP_F_main_BB__89_34) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_addexit_0i = main_89_91;
	end
	/* main: %float64_add.exit*/
	/*   %.0.i = phi i64 [ %.mux2.i15.i.i, %propagateFloat64NaN.exit16.i.i ], [ %151, %150 ], [ %.mux2.i6.i.i, %propagateFloat64NaN.exit7.i.i ], [ %91, %89 ], [ %.mux2.i.i9.i, %propagateFloat64NaN.exit.i10.i ], [ %139, %135 ], [ %3, %24 ], [ %3, %114 ], [ %.mux2.i.i.i, %propagateFloat64NaN.exit.i.i ], [ %311, %normalizeRoundAndPackFloat64.exit.i.i ], [ %.mux2.i9.i.i, %propagateFloat64NaN.exit10.i.i ], [ %216, %212 ], [ %.mux2.i16.i.i, %propagateFloat64NaN.exit17.i.i ], [ 9223372036854775807, %182 ], [ %3, %246 ], [ 0, %188 ]*/
	else if ((((cur_state == LEGUP_F_main_BB__114_40) & (memory_controller_waitrequest == 1'd0)) & (main_114_116 == 1'd1))) begin
		main_float64_addexit_0i = main_1_3_reg;
	end
	/* main: %float64_add.exit*/
	/*   %.0.i = phi i64 [ %.mux2.i15.i.i, %propagateFloat64NaN.exit16.i.i ], [ %151, %150 ], [ %.mux2.i6.i.i, %propagateFloat64NaN.exit7.i.i ], [ %91, %89 ], [ %.mux2.i.i9.i, %propagateFloat64NaN.exit.i10.i ], [ %139, %135 ], [ %3, %24 ], [ %3, %114 ], [ %.mux2.i.i.i, %propagateFloat64NaN.exit.i.i ], [ %311, %normalizeRoundAndPackFloat64.exit.i.i ], [ %.mux2.i9.i.i, %propagateFloat64NaN.exit10.i.i ], [ %216, %212 ], [ %.mux2.i16.i.i, %propagateFloat64NaN.exit17.i.i ], [ 9223372036854775807, %182 ], [ %3, %246 ], [ 0, %188 ]*/
	else if (((cur_state == LEGUP_F_main_BB_propagateFloat64NaNexiti10i_50) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_addexit_0i = main_propagateFloat64NaNexiti10i_mux2ii9i;
	end
	/* main: %float64_add.exit*/
	/*   %.0.i = phi i64 [ %.mux2.i15.i.i, %propagateFloat64NaN.exit16.i.i ], [ %151, %150 ], [ %.mux2.i6.i.i, %propagateFloat64NaN.exit7.i.i ], [ %91, %89 ], [ %.mux2.i.i9.i, %propagateFloat64NaN.exit.i10.i ], [ %139, %135 ], [ %3, %24 ], [ %3, %114 ], [ %.mux2.i.i.i, %propagateFloat64NaN.exit.i.i ], [ %311, %normalizeRoundAndPackFloat64.exit.i.i ], [ %.mux2.i9.i.i, %propagateFloat64NaN.exit10.i.i ], [ %216, %212 ], [ %.mux2.i16.i.i, %propagateFloat64NaN.exit17.i.i ], [ 9223372036854775807, %182 ], [ %3, %246 ], [ 0, %188 ]*/
	else if (((cur_state == LEGUP_F_main_BB__135_51) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_addexit_0i = main_135_139;
	end
	/* main: %float64_add.exit*/
	/*   %.0.i = phi i64 [ %.mux2.i15.i.i, %propagateFloat64NaN.exit16.i.i ], [ %151, %150 ], [ %.mux2.i6.i.i, %propagateFloat64NaN.exit7.i.i ], [ %91, %89 ], [ %.mux2.i.i9.i, %propagateFloat64NaN.exit.i10.i ], [ %139, %135 ], [ %3, %24 ], [ %3, %114 ], [ %.mux2.i.i.i, %propagateFloat64NaN.exit.i.i ], [ %311, %normalizeRoundAndPackFloat64.exit.i.i ], [ %.mux2.i9.i.i, %propagateFloat64NaN.exit10.i.i ], [ %216, %212 ], [ %.mux2.i16.i.i, %propagateFloat64NaN.exit17.i.i ], [ 9223372036854775807, %182 ], [ %3, %246 ], [ 0, %188 ]*/
	else if (((cur_state == LEGUP_F_main_BB__150_58) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_addexit_0i = main_150_151_reg;
	end
	/* main: %float64_add.exit*/
	/*   %.0.i = phi i64 [ %.mux2.i15.i.i, %propagateFloat64NaN.exit16.i.i ], [ %151, %150 ], [ %.mux2.i6.i.i, %propagateFloat64NaN.exit7.i.i ], [ %91, %89 ], [ %.mux2.i.i9.i, %propagateFloat64NaN.exit.i10.i ], [ %139, %135 ], [ %3, %24 ], [ %3, %114 ], [ %.mux2.i.i.i, %propagateFloat64NaN.exit.i.i ], [ %311, %normalizeRoundAndPackFloat64.exit.i.i ], [ %.mux2.i9.i.i, %propagateFloat64NaN.exit10.i.i ], [ %216, %212 ], [ %.mux2.i16.i.i, %propagateFloat64NaN.exit17.i.i ], [ 9223372036854775807, %182 ], [ %3, %246 ], [ 0, %188 ]*/
	else if (((cur_state == LEGUP_F_main_BB_propagateFloat64NaNexit17ii_72) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_addexit_0i = main_propagateFloat64NaNexit17ii_mux2i16ii;
	end
	/* main: %float64_add.exit*/
	/*   %.0.i = phi i64 [ %.mux2.i15.i.i, %propagateFloat64NaN.exit16.i.i ], [ %151, %150 ], [ %.mux2.i6.i.i, %propagateFloat64NaN.exit7.i.i ], [ %91, %89 ], [ %.mux2.i.i9.i, %propagateFloat64NaN.exit.i10.i ], [ %139, %135 ], [ %3, %24 ], [ %3, %114 ], [ %.mux2.i.i.i, %propagateFloat64NaN.exit.i.i ], [ %311, %normalizeRoundAndPackFloat64.exit.i.i ], [ %.mux2.i9.i.i, %propagateFloat64NaN.exit10.i.i ], [ %216, %212 ], [ %.mux2.i16.i.i, %propagateFloat64NaN.exit17.i.i ], [ 9223372036854775807, %182 ], [ %3, %246 ], [ 0, %188 ]*/
	else if (((cur_state == LEGUP_F_main_BB__182_76) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_addexit_0i = 64'd9223372036854775807;
	end
	/* main: %float64_add.exit*/
	/*   %.0.i = phi i64 [ %.mux2.i15.i.i, %propagateFloat64NaN.exit16.i.i ], [ %151, %150 ], [ %.mux2.i6.i.i, %propagateFloat64NaN.exit7.i.i ], [ %91, %89 ], [ %.mux2.i.i9.i, %propagateFloat64NaN.exit.i10.i ], [ %139, %135 ], [ %3, %24 ], [ %3, %114 ], [ %.mux2.i.i.i, %propagateFloat64NaN.exit.i.i ], [ %311, %normalizeRoundAndPackFloat64.exit.i.i ], [ %.mux2.i9.i.i, %propagateFloat64NaN.exit10.i.i ], [ %216, %212 ], [ %.mux2.i16.i.i, %propagateFloat64NaN.exit17.i.i ], [ 9223372036854775807, %182 ], [ %3, %246 ], [ 0, %188 ]*/
	else if ((((cur_state == LEGUP_F_main_BB__188_79) & (memory_controller_waitrequest == 1'd0)) & (main_188_189 == 1'd0))) begin
		main_float64_addexit_0i = 64'd0;
	end
	/* main: %float64_add.exit*/
	/*   %.0.i = phi i64 [ %.mux2.i15.i.i, %propagateFloat64NaN.exit16.i.i ], [ %151, %150 ], [ %.mux2.i6.i.i, %propagateFloat64NaN.exit7.i.i ], [ %91, %89 ], [ %.mux2.i.i9.i, %propagateFloat64NaN.exit.i10.i ], [ %139, %135 ], [ %3, %24 ], [ %3, %114 ], [ %.mux2.i.i.i, %propagateFloat64NaN.exit.i.i ], [ %311, %normalizeRoundAndPackFloat64.exit.i.i ], [ %.mux2.i9.i.i, %propagateFloat64NaN.exit10.i.i ], [ %216, %212 ], [ %.mux2.i16.i.i, %propagateFloat64NaN.exit17.i.i ], [ 9223372036854775807, %182 ], [ %3, %246 ], [ 0, %188 ]*/
	else if (((cur_state == LEGUP_F_main_BB_propagateFloat64NaNexit10ii_91) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_addexit_0i = main_propagateFloat64NaNexit10ii_mux2i9ii;
	end
	/* main: %float64_add.exit*/
	/*   %.0.i = phi i64 [ %.mux2.i15.i.i, %propagateFloat64NaN.exit16.i.i ], [ %151, %150 ], [ %.mux2.i6.i.i, %propagateFloat64NaN.exit7.i.i ], [ %91, %89 ], [ %.mux2.i.i9.i, %propagateFloat64NaN.exit.i10.i ], [ %139, %135 ], [ %3, %24 ], [ %3, %114 ], [ %.mux2.i.i.i, %propagateFloat64NaN.exit.i.i ], [ %311, %normalizeRoundAndPackFloat64.exit.i.i ], [ %.mux2.i9.i.i, %propagateFloat64NaN.exit10.i.i ], [ %216, %212 ], [ %.mux2.i16.i.i, %propagateFloat64NaN.exit17.i.i ], [ 9223372036854775807, %182 ], [ %3, %246 ], [ 0, %188 ]*/
	else if (((cur_state == LEGUP_F_main_BB__212_92) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_addexit_0i = main_212_216;
	end
	/* main: %float64_add.exit*/
	/*   %.0.i = phi i64 [ %.mux2.i15.i.i, %propagateFloat64NaN.exit16.i.i ], [ %151, %150 ], [ %.mux2.i6.i.i, %propagateFloat64NaN.exit7.i.i ], [ %91, %89 ], [ %.mux2.i.i9.i, %propagateFloat64NaN.exit.i10.i ], [ %139, %135 ], [ %3, %24 ], [ %3, %114 ], [ %.mux2.i.i.i, %propagateFloat64NaN.exit.i.i ], [ %311, %normalizeRoundAndPackFloat64.exit.i.i ], [ %.mux2.i9.i.i, %propagateFloat64NaN.exit10.i.i ], [ %216, %212 ], [ %.mux2.i16.i.i, %propagateFloat64NaN.exit17.i.i ], [ 9223372036854775807, %182 ], [ %3, %246 ], [ 0, %188 ]*/
	else if ((((cur_state == LEGUP_F_main_BB__246_100) & (memory_controller_waitrequest == 1'd0)) & (main_246_247 == 1'd1))) begin
		main_float64_addexit_0i = main_1_3_reg;
	end
	/* main: %float64_add.exit*/
	/*   %.0.i = phi i64 [ %.mux2.i15.i.i, %propagateFloat64NaN.exit16.i.i ], [ %151, %150 ], [ %.mux2.i6.i.i, %propagateFloat64NaN.exit7.i.i ], [ %91, %89 ], [ %.mux2.i.i9.i, %propagateFloat64NaN.exit.i10.i ], [ %139, %135 ], [ %3, %24 ], [ %3, %114 ], [ %.mux2.i.i.i, %propagateFloat64NaN.exit.i.i ], [ %311, %normalizeRoundAndPackFloat64.exit.i.i ], [ %.mux2.i9.i.i, %propagateFloat64NaN.exit10.i.i ], [ %216, %212 ], [ %.mux2.i16.i.i, %propagateFloat64NaN.exit17.i.i ], [ 9223372036854775807, %182 ], [ %3, %246 ], [ 0, %188 ]*/
	else if (((cur_state == LEGUP_F_main_BB_propagateFloat64NaNexitii_110) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_addexit_0i = main_propagateFloat64NaNexitii_mux2iii;
	end
	/* main: %float64_add.exit*/
	/*   %.0.i = phi i64 [ %.mux2.i15.i.i, %propagateFloat64NaN.exit16.i.i ], [ %151, %150 ], [ %.mux2.i6.i.i, %propagateFloat64NaN.exit7.i.i ], [ %91, %89 ], [ %.mux2.i.i9.i, %propagateFloat64NaN.exit.i10.i ], [ %139, %135 ], [ %3, %24 ], [ %3, %114 ], [ %.mux2.i.i.i, %propagateFloat64NaN.exit.i.i ], [ %311, %normalizeRoundAndPackFloat64.exit.i.i ], [ %.mux2.i9.i.i, %propagateFloat64NaN.exit10.i.i ], [ %216, %212 ], [ %.mux2.i16.i.i, %propagateFloat64NaN.exit17.i.i ], [ 9223372036854775807, %182 ], [ %3, %246 ], [ 0, %188 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_normalizeRoundAndPackFloat64exitii_123) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_float64_addexit_0i = main_normalizeRoundAndPackFloat64exitii_311_reg;
	end
end
always @(posedge clk) begin
	/* main: %float64_add.exit*/
	/*   %.0.i = phi i64 [ %.mux2.i15.i.i, %propagateFloat64NaN.exit16.i.i ], [ %151, %150 ], [ %.mux2.i6.i.i, %propagateFloat64NaN.exit7.i.i ], [ %91, %89 ], [ %.mux2.i.i9.i, %propagateFloat64NaN.exit.i10.i ], [ %139, %135 ], [ %3, %24 ], [ %3, %114 ], [ %.mux2.i.i.i, %propagateFloat64NaN.exit.i.i ], [ %311, %normalizeRoundAndPackFloat64.exit.i.i ], [ %.mux2.i9.i.i, %propagateFloat64NaN.exit10.i.i ], [ %216, %212 ], [ %.mux2.i16.i.i, %propagateFloat64NaN.exit17.i.i ], [ 9223372036854775807, %182 ], [ %3, %246 ], [ 0, %188 ]*/
	if ((((cur_state == LEGUP_F_main_BB__24_6) & (memory_controller_waitrequest == 1'd0)) & (main_24_25 == 1'd1))) begin
		main_float64_addexit_0i_reg <= main_float64_addexit_0i;
		if (start == 1'b0 && ^(main_float64_addexit_0i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_addexit_0i_reg"); $finish; end
	end
	/* main: %float64_add.exit*/
	/*   %.0.i = phi i64 [ %.mux2.i15.i.i, %propagateFloat64NaN.exit16.i.i ], [ %151, %150 ], [ %.mux2.i6.i.i, %propagateFloat64NaN.exit7.i.i ], [ %91, %89 ], [ %.mux2.i.i9.i, %propagateFloat64NaN.exit.i10.i ], [ %139, %135 ], [ %3, %24 ], [ %3, %114 ], [ %.mux2.i.i.i, %propagateFloat64NaN.exit.i.i ], [ %311, %normalizeRoundAndPackFloat64.exit.i.i ], [ %.mux2.i9.i.i, %propagateFloat64NaN.exit10.i.i ], [ %216, %212 ], [ %.mux2.i16.i.i, %propagateFloat64NaN.exit17.i.i ], [ 9223372036854775807, %182 ], [ %3, %246 ], [ 0, %188 ]*/
	if (((cur_state == LEGUP_F_main_BB_propagateFloat64NaNexit16ii_16) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_addexit_0i_reg <= main_float64_addexit_0i;
		if (start == 1'b0 && ^(main_float64_addexit_0i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_addexit_0i_reg"); $finish; end
	end
	/* main: %float64_add.exit*/
	/*   %.0.i = phi i64 [ %.mux2.i15.i.i, %propagateFloat64NaN.exit16.i.i ], [ %151, %150 ], [ %.mux2.i6.i.i, %propagateFloat64NaN.exit7.i.i ], [ %91, %89 ], [ %.mux2.i.i9.i, %propagateFloat64NaN.exit.i10.i ], [ %139, %135 ], [ %3, %24 ], [ %3, %114 ], [ %.mux2.i.i.i, %propagateFloat64NaN.exit.i.i ], [ %311, %normalizeRoundAndPackFloat64.exit.i.i ], [ %.mux2.i9.i.i, %propagateFloat64NaN.exit10.i.i ], [ %216, %212 ], [ %.mux2.i16.i.i, %propagateFloat64NaN.exit17.i.i ], [ 9223372036854775807, %182 ], [ %3, %246 ], [ 0, %188 ]*/
	if (((cur_state == LEGUP_F_main_BB_propagateFloat64NaNexit7ii_33) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_addexit_0i_reg <= main_float64_addexit_0i;
		if (start == 1'b0 && ^(main_float64_addexit_0i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_addexit_0i_reg"); $finish; end
	end
	/* main: %float64_add.exit*/
	/*   %.0.i = phi i64 [ %.mux2.i15.i.i, %propagateFloat64NaN.exit16.i.i ], [ %151, %150 ], [ %.mux2.i6.i.i, %propagateFloat64NaN.exit7.i.i ], [ %91, %89 ], [ %.mux2.i.i9.i, %propagateFloat64NaN.exit.i10.i ], [ %139, %135 ], [ %3, %24 ], [ %3, %114 ], [ %.mux2.i.i.i, %propagateFloat64NaN.exit.i.i ], [ %311, %normalizeRoundAndPackFloat64.exit.i.i ], [ %.mux2.i9.i.i, %propagateFloat64NaN.exit10.i.i ], [ %216, %212 ], [ %.mux2.i16.i.i, %propagateFloat64NaN.exit17.i.i ], [ 9223372036854775807, %182 ], [ %3, %246 ], [ 0, %188 ]*/
	if (((cur_state == LEGUP_F_main_BB__89_34) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_addexit_0i_reg <= main_float64_addexit_0i;
		if (start == 1'b0 && ^(main_float64_addexit_0i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_addexit_0i_reg"); $finish; end
	end
	/* main: %float64_add.exit*/
	/*   %.0.i = phi i64 [ %.mux2.i15.i.i, %propagateFloat64NaN.exit16.i.i ], [ %151, %150 ], [ %.mux2.i6.i.i, %propagateFloat64NaN.exit7.i.i ], [ %91, %89 ], [ %.mux2.i.i9.i, %propagateFloat64NaN.exit.i10.i ], [ %139, %135 ], [ %3, %24 ], [ %3, %114 ], [ %.mux2.i.i.i, %propagateFloat64NaN.exit.i.i ], [ %311, %normalizeRoundAndPackFloat64.exit.i.i ], [ %.mux2.i9.i.i, %propagateFloat64NaN.exit10.i.i ], [ %216, %212 ], [ %.mux2.i16.i.i, %propagateFloat64NaN.exit17.i.i ], [ 9223372036854775807, %182 ], [ %3, %246 ], [ 0, %188 ]*/
	if ((((cur_state == LEGUP_F_main_BB__114_40) & (memory_controller_waitrequest == 1'd0)) & (main_114_116 == 1'd1))) begin
		main_float64_addexit_0i_reg <= main_float64_addexit_0i;
		if (start == 1'b0 && ^(main_float64_addexit_0i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_addexit_0i_reg"); $finish; end
	end
	/* main: %float64_add.exit*/
	/*   %.0.i = phi i64 [ %.mux2.i15.i.i, %propagateFloat64NaN.exit16.i.i ], [ %151, %150 ], [ %.mux2.i6.i.i, %propagateFloat64NaN.exit7.i.i ], [ %91, %89 ], [ %.mux2.i.i9.i, %propagateFloat64NaN.exit.i10.i ], [ %139, %135 ], [ %3, %24 ], [ %3, %114 ], [ %.mux2.i.i.i, %propagateFloat64NaN.exit.i.i ], [ %311, %normalizeRoundAndPackFloat64.exit.i.i ], [ %.mux2.i9.i.i, %propagateFloat64NaN.exit10.i.i ], [ %216, %212 ], [ %.mux2.i16.i.i, %propagateFloat64NaN.exit17.i.i ], [ 9223372036854775807, %182 ], [ %3, %246 ], [ 0, %188 ]*/
	if (((cur_state == LEGUP_F_main_BB_propagateFloat64NaNexiti10i_50) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_addexit_0i_reg <= main_float64_addexit_0i;
		if (start == 1'b0 && ^(main_float64_addexit_0i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_addexit_0i_reg"); $finish; end
	end
	/* main: %float64_add.exit*/
	/*   %.0.i = phi i64 [ %.mux2.i15.i.i, %propagateFloat64NaN.exit16.i.i ], [ %151, %150 ], [ %.mux2.i6.i.i, %propagateFloat64NaN.exit7.i.i ], [ %91, %89 ], [ %.mux2.i.i9.i, %propagateFloat64NaN.exit.i10.i ], [ %139, %135 ], [ %3, %24 ], [ %3, %114 ], [ %.mux2.i.i.i, %propagateFloat64NaN.exit.i.i ], [ %311, %normalizeRoundAndPackFloat64.exit.i.i ], [ %.mux2.i9.i.i, %propagateFloat64NaN.exit10.i.i ], [ %216, %212 ], [ %.mux2.i16.i.i, %propagateFloat64NaN.exit17.i.i ], [ 9223372036854775807, %182 ], [ %3, %246 ], [ 0, %188 ]*/
	if (((cur_state == LEGUP_F_main_BB__135_51) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_addexit_0i_reg <= main_float64_addexit_0i;
		if (start == 1'b0 && ^(main_float64_addexit_0i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_addexit_0i_reg"); $finish; end
	end
	/* main: %float64_add.exit*/
	/*   %.0.i = phi i64 [ %.mux2.i15.i.i, %propagateFloat64NaN.exit16.i.i ], [ %151, %150 ], [ %.mux2.i6.i.i, %propagateFloat64NaN.exit7.i.i ], [ %91, %89 ], [ %.mux2.i.i9.i, %propagateFloat64NaN.exit.i10.i ], [ %139, %135 ], [ %3, %24 ], [ %3, %114 ], [ %.mux2.i.i.i, %propagateFloat64NaN.exit.i.i ], [ %311, %normalizeRoundAndPackFloat64.exit.i.i ], [ %.mux2.i9.i.i, %propagateFloat64NaN.exit10.i.i ], [ %216, %212 ], [ %.mux2.i16.i.i, %propagateFloat64NaN.exit17.i.i ], [ 9223372036854775807, %182 ], [ %3, %246 ], [ 0, %188 ]*/
	if (((cur_state == LEGUP_F_main_BB__150_58) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_addexit_0i_reg <= main_float64_addexit_0i;
		if (start == 1'b0 && ^(main_float64_addexit_0i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_addexit_0i_reg"); $finish; end
	end
	/* main: %float64_add.exit*/
	/*   %.0.i = phi i64 [ %.mux2.i15.i.i, %propagateFloat64NaN.exit16.i.i ], [ %151, %150 ], [ %.mux2.i6.i.i, %propagateFloat64NaN.exit7.i.i ], [ %91, %89 ], [ %.mux2.i.i9.i, %propagateFloat64NaN.exit.i10.i ], [ %139, %135 ], [ %3, %24 ], [ %3, %114 ], [ %.mux2.i.i.i, %propagateFloat64NaN.exit.i.i ], [ %311, %normalizeRoundAndPackFloat64.exit.i.i ], [ %.mux2.i9.i.i, %propagateFloat64NaN.exit10.i.i ], [ %216, %212 ], [ %.mux2.i16.i.i, %propagateFloat64NaN.exit17.i.i ], [ 9223372036854775807, %182 ], [ %3, %246 ], [ 0, %188 ]*/
	if (((cur_state == LEGUP_F_main_BB_propagateFloat64NaNexit17ii_72) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_addexit_0i_reg <= main_float64_addexit_0i;
		if (start == 1'b0 && ^(main_float64_addexit_0i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_addexit_0i_reg"); $finish; end
	end
	/* main: %float64_add.exit*/
	/*   %.0.i = phi i64 [ %.mux2.i15.i.i, %propagateFloat64NaN.exit16.i.i ], [ %151, %150 ], [ %.mux2.i6.i.i, %propagateFloat64NaN.exit7.i.i ], [ %91, %89 ], [ %.mux2.i.i9.i, %propagateFloat64NaN.exit.i10.i ], [ %139, %135 ], [ %3, %24 ], [ %3, %114 ], [ %.mux2.i.i.i, %propagateFloat64NaN.exit.i.i ], [ %311, %normalizeRoundAndPackFloat64.exit.i.i ], [ %.mux2.i9.i.i, %propagateFloat64NaN.exit10.i.i ], [ %216, %212 ], [ %.mux2.i16.i.i, %propagateFloat64NaN.exit17.i.i ], [ 9223372036854775807, %182 ], [ %3, %246 ], [ 0, %188 ]*/
	if (((cur_state == LEGUP_F_main_BB__182_76) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_addexit_0i_reg <= main_float64_addexit_0i;
		if (start == 1'b0 && ^(main_float64_addexit_0i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_addexit_0i_reg"); $finish; end
	end
	/* main: %float64_add.exit*/
	/*   %.0.i = phi i64 [ %.mux2.i15.i.i, %propagateFloat64NaN.exit16.i.i ], [ %151, %150 ], [ %.mux2.i6.i.i, %propagateFloat64NaN.exit7.i.i ], [ %91, %89 ], [ %.mux2.i.i9.i, %propagateFloat64NaN.exit.i10.i ], [ %139, %135 ], [ %3, %24 ], [ %3, %114 ], [ %.mux2.i.i.i, %propagateFloat64NaN.exit.i.i ], [ %311, %normalizeRoundAndPackFloat64.exit.i.i ], [ %.mux2.i9.i.i, %propagateFloat64NaN.exit10.i.i ], [ %216, %212 ], [ %.mux2.i16.i.i, %propagateFloat64NaN.exit17.i.i ], [ 9223372036854775807, %182 ], [ %3, %246 ], [ 0, %188 ]*/
	if ((((cur_state == LEGUP_F_main_BB__188_79) & (memory_controller_waitrequest == 1'd0)) & (main_188_189 == 1'd0))) begin
		main_float64_addexit_0i_reg <= main_float64_addexit_0i;
		if (start == 1'b0 && ^(main_float64_addexit_0i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_addexit_0i_reg"); $finish; end
	end
	/* main: %float64_add.exit*/
	/*   %.0.i = phi i64 [ %.mux2.i15.i.i, %propagateFloat64NaN.exit16.i.i ], [ %151, %150 ], [ %.mux2.i6.i.i, %propagateFloat64NaN.exit7.i.i ], [ %91, %89 ], [ %.mux2.i.i9.i, %propagateFloat64NaN.exit.i10.i ], [ %139, %135 ], [ %3, %24 ], [ %3, %114 ], [ %.mux2.i.i.i, %propagateFloat64NaN.exit.i.i ], [ %311, %normalizeRoundAndPackFloat64.exit.i.i ], [ %.mux2.i9.i.i, %propagateFloat64NaN.exit10.i.i ], [ %216, %212 ], [ %.mux2.i16.i.i, %propagateFloat64NaN.exit17.i.i ], [ 9223372036854775807, %182 ], [ %3, %246 ], [ 0, %188 ]*/
	if (((cur_state == LEGUP_F_main_BB_propagateFloat64NaNexit10ii_91) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_addexit_0i_reg <= main_float64_addexit_0i;
		if (start == 1'b0 && ^(main_float64_addexit_0i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_addexit_0i_reg"); $finish; end
	end
	/* main: %float64_add.exit*/
	/*   %.0.i = phi i64 [ %.mux2.i15.i.i, %propagateFloat64NaN.exit16.i.i ], [ %151, %150 ], [ %.mux2.i6.i.i, %propagateFloat64NaN.exit7.i.i ], [ %91, %89 ], [ %.mux2.i.i9.i, %propagateFloat64NaN.exit.i10.i ], [ %139, %135 ], [ %3, %24 ], [ %3, %114 ], [ %.mux2.i.i.i, %propagateFloat64NaN.exit.i.i ], [ %311, %normalizeRoundAndPackFloat64.exit.i.i ], [ %.mux2.i9.i.i, %propagateFloat64NaN.exit10.i.i ], [ %216, %212 ], [ %.mux2.i16.i.i, %propagateFloat64NaN.exit17.i.i ], [ 9223372036854775807, %182 ], [ %3, %246 ], [ 0, %188 ]*/
	if (((cur_state == LEGUP_F_main_BB__212_92) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_addexit_0i_reg <= main_float64_addexit_0i;
		if (start == 1'b0 && ^(main_float64_addexit_0i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_addexit_0i_reg"); $finish; end
	end
	/* main: %float64_add.exit*/
	/*   %.0.i = phi i64 [ %.mux2.i15.i.i, %propagateFloat64NaN.exit16.i.i ], [ %151, %150 ], [ %.mux2.i6.i.i, %propagateFloat64NaN.exit7.i.i ], [ %91, %89 ], [ %.mux2.i.i9.i, %propagateFloat64NaN.exit.i10.i ], [ %139, %135 ], [ %3, %24 ], [ %3, %114 ], [ %.mux2.i.i.i, %propagateFloat64NaN.exit.i.i ], [ %311, %normalizeRoundAndPackFloat64.exit.i.i ], [ %.mux2.i9.i.i, %propagateFloat64NaN.exit10.i.i ], [ %216, %212 ], [ %.mux2.i16.i.i, %propagateFloat64NaN.exit17.i.i ], [ 9223372036854775807, %182 ], [ %3, %246 ], [ 0, %188 ]*/
	if ((((cur_state == LEGUP_F_main_BB__246_100) & (memory_controller_waitrequest == 1'd0)) & (main_246_247 == 1'd1))) begin
		main_float64_addexit_0i_reg <= main_float64_addexit_0i;
		if (start == 1'b0 && ^(main_float64_addexit_0i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_addexit_0i_reg"); $finish; end
	end
	/* main: %float64_add.exit*/
	/*   %.0.i = phi i64 [ %.mux2.i15.i.i, %propagateFloat64NaN.exit16.i.i ], [ %151, %150 ], [ %.mux2.i6.i.i, %propagateFloat64NaN.exit7.i.i ], [ %91, %89 ], [ %.mux2.i.i9.i, %propagateFloat64NaN.exit.i10.i ], [ %139, %135 ], [ %3, %24 ], [ %3, %114 ], [ %.mux2.i.i.i, %propagateFloat64NaN.exit.i.i ], [ %311, %normalizeRoundAndPackFloat64.exit.i.i ], [ %.mux2.i9.i.i, %propagateFloat64NaN.exit10.i.i ], [ %216, %212 ], [ %.mux2.i16.i.i, %propagateFloat64NaN.exit17.i.i ], [ 9223372036854775807, %182 ], [ %3, %246 ], [ 0, %188 ]*/
	if (((cur_state == LEGUP_F_main_BB_propagateFloat64NaNexitii_110) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_addexit_0i_reg <= main_float64_addexit_0i;
		if (start == 1'b0 && ^(main_float64_addexit_0i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_addexit_0i_reg"); $finish; end
	end
	/* main: %float64_add.exit*/
	/*   %.0.i = phi i64 [ %.mux2.i15.i.i, %propagateFloat64NaN.exit16.i.i ], [ %151, %150 ], [ %.mux2.i6.i.i, %propagateFloat64NaN.exit7.i.i ], [ %91, %89 ], [ %.mux2.i.i9.i, %propagateFloat64NaN.exit.i10.i ], [ %139, %135 ], [ %3, %24 ], [ %3, %114 ], [ %.mux2.i.i.i, %propagateFloat64NaN.exit.i.i ], [ %311, %normalizeRoundAndPackFloat64.exit.i.i ], [ %.mux2.i9.i.i, %propagateFloat64NaN.exit10.i.i ], [ %216, %212 ], [ %.mux2.i16.i.i, %propagateFloat64NaN.exit17.i.i ], [ 9223372036854775807, %182 ], [ %3, %246 ], [ 0, %188 ]*/
	if (((cur_state == LEGUP_F_main_BB_normalizeRoundAndPackFloat64exitii_123) & (memory_controller_waitrequest == 1'd0))) begin
		main_float64_addexit_0i_reg <= main_float64_addexit_0i;
		if (start == 1'b0 && ^(main_float64_addexit_0i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_addexit_0i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_add.exit*/
	/*   %gep_int7 = ptrtoint [46 x i64]* @z_output to i32*/
if (reset) begin main_float64_addexit_gep_int7 = 0; end
		main_float64_addexit_gep_int7 = 1'd0;
end
always @(posedge clk) begin
	/* main: %float64_add.exit*/
	/*   %gep_int7 = ptrtoint [46 x i64]* @z_output to i32*/
	if ((cur_state == LEGUP_F_main_BB_float64_addexit_124)) begin
		main_float64_addexit_gep_int7_reg <= main_float64_addexit_gep_int7;
		if (start == 1'b0 && ^(main_float64_addexit_gep_int7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_addexit_gep_int7_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_add.exit*/
	/*   %gep_array8 = mul i32 %i.01, 8*/
		main_float64_addexit_gep_array8 = (main_1_i01_reg * 32'd8);
end
always @(posedge clk) begin
	/* main: %float64_add.exit*/
	/*   %gep_array8 = mul i32 %i.01, 8*/
	if ((cur_state == LEGUP_F_main_BB_float64_addexit_124)) begin
		main_float64_addexit_gep_array8_reg <= main_float64_addexit_gep_array8;
		if (start == 1'b0 && ^(main_float64_addexit_gep_array8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_addexit_gep_array8_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_add.exit*/
	/*   %gep9 = add i32 %gep_int7, %gep_array8*/
		main_float64_addexit_gep9 = main_signed_add_32_0;
end
always @(*) begin
/* main: %float64_add.exit*/
/*   %gep9 = add i32 %gep_int7, %gep_array8*/
	main_float64_addexit_gep9_reg = main_normalizeRoundAndPackFloat64exitii_306_reg;
end
always @(*) begin
	/* main: %float64_add.exit*/
	/*   %312 = inttoptr i32 %gep9 to i64**/
		main_float64_addexit_312 = main_float64_addexit_gep9;
end
always @(posedge clk) begin
	/* main: %float64_add.exit*/
	/*   %312 = inttoptr i32 %gep9 to i64**/
	if ((cur_state == LEGUP_F_main_BB_float64_addexit_125)) begin
		main_float64_addexit_312_reg <= main_float64_addexit_312;
		if (start == 1'b0 && ^(main_float64_addexit_312) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_addexit_312_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_add.exit*/
	/*   %313 = load i64* %312, align 8, !tbaa !1*/
		main_float64_addexit_313 = z_output_out_a;
end
always @(posedge clk) begin
	/* main: %float64_add.exit*/
	/*   %313 = load i64* %312, align 8, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_float64_addexit_126)) begin
		main_float64_addexit_313_reg <= main_float64_addexit_313;
		if (start == 1'b0 && ^(main_float64_addexit_313) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_addexit_313_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_add.exit*/
	/*   %314 = icmp eq i64 %.0.i, %313*/
		main_float64_addexit_314 = (main_float64_addexit_0i_reg == main_float64_addexit_313);
end
always @(posedge clk) begin
	/* main: %float64_add.exit*/
	/*   %314 = icmp eq i64 %.0.i, %313*/
	if ((cur_state == LEGUP_F_main_BB_float64_addexit_126)) begin
		main_float64_addexit_314_reg <= main_float64_addexit_314;
		if (start == 1'b0 && ^(main_float64_addexit_314) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_addexit_314_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_add.exit*/
	/*   %315 = zext i1 %314 to i32*/
		main_float64_addexit_315 = main_float64_addexit_314;
end
always @(posedge clk) begin
	/* main: %float64_add.exit*/
	/*   %315 = zext i1 %314 to i32*/
	if ((cur_state == LEGUP_F_main_BB_float64_addexit_126)) begin
		main_float64_addexit_315_reg <= main_float64_addexit_315;
		if (start == 1'b0 && ^(main_float64_addexit_315) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_addexit_315_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_add.exit*/
	/*   %316 = add nsw i32 %315, %main_result.02*/
		main_float64_addexit_316 = main_signed_add_32_0;
end
always @(*) begin
/* main: %float64_add.exit*/
/*   %316 = add nsw i32 %315, %main_result.02*/
	main_float64_addexit_316_reg = main_1_gep_reg;
end
always @(*) begin
	/* main: %float64_add.exit*/
	/*   %318 = add nsw i32 %i.01, 1*/
		main_float64_addexit_318 = main_signed_add_32_0;
end
always @(posedge clk) begin
	/* main: %float64_add.exit*/
	/*   %318 = add nsw i32 %i.01, 1*/
	if ((cur_state == LEGUP_F_main_BB_float64_addexit_124)) begin
		main_float64_addexit_318_reg <= main_float64_addexit_318;
		if (start == 1'b0 && ^(main_float64_addexit_318) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_addexit_318_reg"); $finish; end
	end
	/* main: %normalizeRoundAndPackFloat64.exit.i.i*/
	/*   %gep6 = add i32 %gep_int4, %gep_array5*/
	if ((cur_state == LEGUP_F_main_BB_normalizeRoundAndPackFloat64exitii_120)) begin
		main_float64_addexit_318_reg <= main_normalizeRoundAndPackFloat64exitii_gep6;
		if (start == 1'b0 && ^(main_normalizeRoundAndPackFloat64exitii_gep6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_addexit_318_reg"); $finish; end
	end
	/* main: %normalizeRoundAndPackFloat64.exit.i.i*/
	/*   %307 = add i32 %306, %304*/
	if ((cur_state == LEGUP_F_main_BB_normalizeRoundAndPackFloat64exitii_121)) begin
		main_float64_addexit_318_reg <= main_normalizeRoundAndPackFloat64exitii_307;
		if (start == 1'b0 && ^(main_normalizeRoundAndPackFloat64exitii_307) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_addexit_318_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %float64_add.exit*/
	/*   %exitcond = icmp eq i32 %318, 46*/
		main_float64_addexit_exitcond = (main_float64_addexit_318 == 32'd46);
end
always @(posedge clk) begin
	/* main: %float64_add.exit*/
	/*   %exitcond = icmp eq i32 %318, 46*/
	if ((cur_state == LEGUP_F_main_BB_float64_addexit_124)) begin
		main_float64_addexit_exitcond_reg <= main_float64_addexit_exitcond;
		if (start == 1'b0 && ^(main_float64_addexit_exitcond) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_float64_addexit_exitcond_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %319*/
	/*   %.lcssa = phi i32 [ %316, %float64_add.exit ]*/
		main_319_lcssa = main_float64_addexit_316;
end
always @(posedge clk) begin
	/* main: %319*/
	/*   %.lcssa = phi i32 [ %316, %float64_add.exit ]*/
	if ((((cur_state == LEGUP_F_main_BB_float64_addexit_126) & (memory_controller_waitrequest == 1'd0)) & (main_float64_addexit_exitcond_reg == 1'd1))) begin
		main_319_lcssa_reg <= main_319_lcssa;
		if (start == 1'b0 && ^(main_319_lcssa) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_319_lcssa_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %319*/
	/*   %321 = icmp eq i32 %.lcssa, 46*/
		main_319_321 = (main_319_lcssa_reg == 32'd46);
end
always @(posedge clk) begin
	/* main: %319*/
	/*   %321 = icmp eq i32 %.lcssa, 46*/
	if ((cur_state == LEGUP_F_main_BB__319_127)) begin
		main_319_321_reg <= main_319_321;
		if (start == 1'b0 && ^(main_319_321) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_319_321_reg"); $finish; end
	end
end
always @(*) begin
	a_input_address_a = 1'd0;
	/* main: %1*/
	/*   %3 = load i64* %2, align 8, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_2)) begin
		a_input_address_a = (main_1_2 >>> 3'd3);
	end
end
always @(*) begin
	a_input_write_enable_a = 1'd0;
	/* main: %1*/
	/*   %3 = load i64* %2, align 8, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_2)) begin
		a_input_write_enable_a = 1'd0;
	end
end
always @(*) begin
	b_input_address_a = 1'd0;
	/* main: %1*/
	/*   %5 = load i64* %4, align 8, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_2)) begin
		b_input_address_a = (main_1_4 >>> 3'd3);
	end
end
always @(*) begin
	b_input_write_enable_a = 1'd0;
	/* main: %1*/
	/*   %5 = load i64* %4, align 8, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_2)) begin
		b_input_write_enable_a = 1'd0;
	end
end
always @(*) begin
	z_output_address_a = 1'd0;
	/* main: %float64_add.exit*/
	/*   %313 = load i64* %312, align 8, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_float64_addexit_125)) begin
		z_output_address_a = (main_float64_addexit_312 >>> 3'd3);
	end
end
always @(*) begin
	z_output_write_enable_a = 1'd0;
	/* main: %float64_add.exit*/
	/*   %313 = load i64* %312, align 8, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_float64_addexit_125)) begin
		z_output_write_enable_a = 1'd0;
	end
end
always @(*) begin
	countLeadingZeros32countLeadingZerosHigh_address_a = 1'd0;
	/* main: %normalizeRoundAndPackFloat64.exit.i.i*/
	/*   %304 = load i32* %303, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_normalizeRoundAndPackFloat64exitii_120)) begin
		countLeadingZeros32countLeadingZerosHigh_address_a = (main_normalizeRoundAndPackFloat64exitii_303 >>> 3'd2);
	end
end
always @(*) begin
	countLeadingZeros32countLeadingZerosHigh_write_enable_a = 1'd0;
	/* main: %normalizeRoundAndPackFloat64.exit.i.i*/
	/*   %304 = load i32* %303, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_normalizeRoundAndPackFloat64exitii_120)) begin
		countLeadingZeros32countLeadingZerosHigh_write_enable_a = 1'd0;
	end
end
always @(posedge clk) begin
	/* main: %150*/
	/*   %151 = tail call fastcc i64 @roundAndPackFloat64(i32 %7, i32 %zExp.1.i.i, i64 %zSig.0.i12.i) #1*/
	if ((cur_state == LEGUP_F_main_BB__150_56)) begin
		roundAndPackFloat64_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_57)) begin
		roundAndPackFloat64_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_start"); $finish; end
	end
	/* main: %normalizeRoundAndPackFloat64.exit.i.i*/
	/*   %311 = tail call fastcc i64 @roundAndPackFloat64(i32 %.0.i.i, i32 %308, i64 %310) #1*/
	if ((cur_state == LEGUP_F_main_BB_normalizeRoundAndPackFloat64exitii_121)) begin
		roundAndPackFloat64_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_122)) begin
		roundAndPackFloat64_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_start"); $finish; end
	end
end
always @(posedge clk) begin
	/* main: %150*/
	/*   %151 = tail call fastcc i64 @roundAndPackFloat64(i32 %7, i32 %zExp.1.i.i, i64 %zSig.0.i12.i) #1*/
	if ((cur_state == LEGUP_F_main_BB__150_56)) begin
		roundAndPackFloat64_arg_zSign <= main_1_7_reg;
		if (start == 1'b0 && ^(main_1_7_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_arg_zSign"); $finish; end
	end
	/* main: %normalizeRoundAndPackFloat64.exit.i.i*/
	/*   %311 = tail call fastcc i64 @roundAndPackFloat64(i32 %.0.i.i, i32 %308, i64 %310) #1*/
	if ((cur_state == LEGUP_F_main_BB_normalizeRoundAndPackFloat64exitii_121)) begin
		roundAndPackFloat64_arg_zSign <= main_292_0ii_reg;
		if (start == 1'b0 && ^(main_292_0ii_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_arg_zSign"); $finish; end
	end
end
always @(posedge clk) begin
	/* main: %150*/
	/*   %151 = tail call fastcc i64 @roundAndPackFloat64(i32 %7, i32 %zExp.1.i.i, i64 %zSig.0.i12.i) #1*/
	if ((cur_state == LEGUP_F_main_BB__150_56)) begin
		roundAndPackFloat64_arg_zExp <= main_150_zExp1ii_reg;
		if (start == 1'b0 && ^(main_150_zExp1ii_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_arg_zExp"); $finish; end
	end
	/* main: %normalizeRoundAndPackFloat64.exit.i.i*/
	/*   %311 = tail call fastcc i64 @roundAndPackFloat64(i32 %.0.i.i, i32 %308, i64 %310) #1*/
	if ((cur_state == LEGUP_F_main_BB_normalizeRoundAndPackFloat64exitii_121)) begin
		roundAndPackFloat64_arg_zExp <= main_normalizeRoundAndPackFloat64exitii_308;
		if (start == 1'b0 && ^(main_normalizeRoundAndPackFloat64exitii_308) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_arg_zExp"); $finish; end
	end
end
always @(posedge clk) begin
	/* main: %150*/
	/*   %151 = tail call fastcc i64 @roundAndPackFloat64(i32 %7, i32 %zExp.1.i.i, i64 %zSig.0.i12.i) #1*/
	if ((cur_state == LEGUP_F_main_BB__150_56)) begin
		roundAndPackFloat64_arg_zSig <= main_150_zSig0i12i_reg;
		if (start == 1'b0 && ^(main_150_zSig0i12i_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_arg_zSig"); $finish; end
	end
	/* main: %normalizeRoundAndPackFloat64.exit.i.i*/
	/*   %311 = tail call fastcc i64 @roundAndPackFloat64(i32 %.0.i.i, i32 %308, i64 %310) #1*/
	if ((cur_state == LEGUP_F_main_BB_normalizeRoundAndPackFloat64exitii_121)) begin
		roundAndPackFloat64_arg_zSig <= main_normalizeRoundAndPackFloat64exitii_310;
		if (start == 1'b0 && ^(main_normalizeRoundAndPackFloat64exitii_310) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_arg_zSig"); $finish; end
	end
end
always @(*) begin
	/* main: %150*/
	/*   %151 = tail call fastcc i64 @roundAndPackFloat64(i32 %7, i32 %zExp.1.i.i, i64 %zSig.0.i12.i) #1*/
	if ((cur_state == LEGUP_function_call_57)) begin
		roundAndPackFloat64_memory_controller_out_a = memory_controller_out_a;
	end
	/* main: %normalizeRoundAndPackFloat64.exit.i.i*/
	/*   %311 = tail call fastcc i64 @roundAndPackFloat64(i32 %.0.i.i, i32 %308, i64 %310) #1*/
	else /* if ((cur_state == LEGUP_function_call_122)) */ begin
		roundAndPackFloat64_memory_controller_out_a = memory_controller_out_a;
	end
end
always @(*) begin
	/* main: %150*/
	/*   %151 = tail call fastcc i64 @roundAndPackFloat64(i32 %7, i32 %zExp.1.i.i, i64 %zSig.0.i12.i) #1*/
	if ((cur_state == LEGUP_function_call_57)) begin
		roundAndPackFloat64_memory_controller_out_b = memory_controller_out_b;
	end
	/* main: %normalizeRoundAndPackFloat64.exit.i.i*/
	/*   %311 = tail call fastcc i64 @roundAndPackFloat64(i32 %.0.i.i, i32 %308, i64 %310) #1*/
	else /* if ((cur_state == LEGUP_function_call_122)) */ begin
		roundAndPackFloat64_memory_controller_out_b = memory_controller_out_b;
	end
end
always @(*) begin
	roundAndPackFloat64_memory_controller_waitrequest = memory_controller_waitrequest;
end
always @(*) begin
	roundAndPackFloat64_finish_final = roundAndPackFloat64_finish_reg;
end
always @(posedge clk) begin
	if ((reset | (cur_state == LEGUP_F_main_BB__150_56))) begin
		roundAndPackFloat64_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_finish_reg"); $finish; end
	end
	if (roundAndPackFloat64_finish) begin
		roundAndPackFloat64_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_finish_reg"); $finish; end
	end
	if ((reset | (cur_state == LEGUP_F_main_BB_normalizeRoundAndPackFloat64exitii_121))) begin
		roundAndPackFloat64_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_finish_reg"); $finish; end
	end
	if (roundAndPackFloat64_finish) begin
		roundAndPackFloat64_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_finish_reg"); $finish; end
	end
end
always @(posedge clk) begin
	if ((reset | (cur_state == LEGUP_F_main_BB__150_56))) begin
		roundAndPackFloat64_return_val_reg <= 64'd0;
		if (start == 1'b0 && ^(64'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_return_val_reg"); $finish; end
	end
	if (roundAndPackFloat64_finish) begin
		roundAndPackFloat64_return_val_reg <= roundAndPackFloat64_return_val;
		if (start == 1'b0 && ^(roundAndPackFloat64_return_val) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_return_val_reg"); $finish; end
	end
	if ((reset | (cur_state == LEGUP_F_main_BB_normalizeRoundAndPackFloat64exitii_121))) begin
		roundAndPackFloat64_return_val_reg <= 64'd0;
		if (start == 1'b0 && ^(64'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_return_val_reg"); $finish; end
	end
	if (roundAndPackFloat64_finish) begin
		roundAndPackFloat64_return_val_reg <= roundAndPackFloat64_return_val;
		if (start == 1'b0 && ^(roundAndPackFloat64_return_val) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to roundAndPackFloat64_return_val_reg"); $finish; end
	end
end
always @(*) begin
	legup_function_call = 1'd0;
	/* main: %150*/
	/*   %151 = tail call fastcc i64 @roundAndPackFloat64(i32 %7, i32 %zExp.1.i.i, i64 %zSig.0.i12.i) #1*/
	if ((cur_state == LEGUP_function_call_57)) begin
		legup_function_call = 1'd1;
	end
	/* main: %normalizeRoundAndPackFloat64.exit.i.i*/
	/*   %311 = tail call fastcc i64 @roundAndPackFloat64(i32 %.0.i.i, i32 %308, i64 %310) #1*/
	if ((cur_state == LEGUP_function_call_122)) begin
		legup_function_call = 1'd1;
	end
end
always @(*) begin
	/* main: %1*/
	/*   %gep = add i32 %gep_int, %gep_array*/
	if ((cur_state == LEGUP_F_main_BB__1_2)) begin
		main_signed_add_32_0_op0 = main_1_gep_int_reg;
	end
	/* main: %44*/
	/*   %expDiff.0.i2.i = add nsw i32 %48, %15*/
	else if ((cur_state == LEGUP_F_main_BB__44_17)) begin
		main_signed_add_32_0_op0 = main_44_48;
	end
	/* main: %92*/
	/*   %expDiff.1.i3.i = add nsw i32 %15, %96*/
	else if ((cur_state == LEGUP_F_main_BB__92_35)) begin
		main_signed_add_32_0_op0 = main_1_15_reg;
	end
	/* main: %shift64RightJamming.exit9.i.i*/
	/*   %zExp.0..i.i = add nsw i32 %149, %zExp.0.i11.i*/
	else if ((cur_state == LEGUP_F_main_BB_shift64RightJammingexit9ii_55)) begin
		main_signed_add_32_0_op0 = main_shift64RightJammingexit9ii_149_reg;
	end
	/* main: %217*/
	/*   %expDiff.0.i.i = add nsw i32 %15, %221*/
	else if ((cur_state == LEGUP_F_main_BB__217_93)) begin
		main_signed_add_32_0_op0 = main_1_15_reg;
	end
	/* main: %266*/
	/*   %expDiff.1.i.i = add nsw i32 %270, %15*/
	else if ((cur_state == LEGUP_F_main_BB__266_111)) begin
		main_signed_add_32_0_op0 = main_266_270;
	end
	/* main: %292*/
	/*   %293 = add nsw i32 %zExp.0.i.i, -1*/
	else if ((cur_state == LEGUP_F_main_BB__292_117)) begin
		main_signed_add_32_0_op0 = main_292_zExp0ii_reg;
	end
	/* main: %normalizeRoundAndPackFloat64.exit.i.i*/
	/*   %306 = add nsw i32 %shiftCount.1.i.i.i.i.i, %305*/
	else if ((cur_state == LEGUP_F_main_BB_normalizeRoundAndPackFloat64exitii_119)) begin
		main_signed_add_32_0_op0 = main_normalizeRoundAndPackFloat64exitii_shiftCount1iiiii_reg;
	end
	/* main: %normalizeRoundAndPackFloat64.exit.i.i*/
	/*   %gep6 = add i32 %gep_int4, %gep_array5*/
	else if ((cur_state == LEGUP_F_main_BB_normalizeRoundAndPackFloat64exitii_120)) begin
		main_signed_add_32_0_op0 = main_normalizeRoundAndPackFloat64exitii_gep_int4_reg;
	end
	/* main: %normalizeRoundAndPackFloat64.exit.i.i*/
	/*   %307 = add i32 %306, %304*/
	else if ((cur_state == LEGUP_F_main_BB_normalizeRoundAndPackFloat64exitii_121)) begin
		main_signed_add_32_0_op0 = main_normalizeRoundAndPackFloat64exitii_306_reg;
	end
	/* main: %float64_add.exit*/
	/*   %318 = add nsw i32 %i.01, 1*/
	else if ((cur_state == LEGUP_F_main_BB_float64_addexit_124)) begin
		main_signed_add_32_0_op0 = main_1_i01_reg;
	end
	/* main: %float64_add.exit*/
	/*   %gep9 = add i32 %gep_int7, %gep_array8*/
	else if ((cur_state == LEGUP_F_main_BB_float64_addexit_125)) begin
		main_signed_add_32_0_op0 = main_float64_addexit_gep_int7_reg;
	end
	/* main: %float64_add.exit*/
	/*   %316 = add nsw i32 %315, %main_result.02*/
	else /* if ((cur_state == LEGUP_F_main_BB_float64_addexit_126)) */ begin
		main_signed_add_32_0_op0 = main_float64_addexit_315;
	end
end
always @(*) begin
	/* main: %1*/
	/*   %gep = add i32 %gep_int, %gep_array*/
	if ((cur_state == LEGUP_F_main_BB__1_2)) begin
		main_signed_add_32_0_op1 = main_1_gep_array_reg;
	end
	/* main: %44*/
	/*   %expDiff.0.i2.i = add nsw i32 %48, %15*/
	else if ((cur_state == LEGUP_F_main_BB__44_17)) begin
		main_signed_add_32_0_op1 = main_1_15_reg;
	end
	/* main: %92*/
	/*   %expDiff.1.i3.i = add nsw i32 %15, %96*/
	else if ((cur_state == LEGUP_F_main_BB__92_35)) begin
		main_signed_add_32_0_op1 = main_92_96;
	end
	/* main: %shift64RightJamming.exit9.i.i*/
	/*   %zExp.0..i.i = add nsw i32 %149, %zExp.0.i11.i*/
	else if ((cur_state == LEGUP_F_main_BB_shift64RightJammingexit9ii_55)) begin
		main_signed_add_32_0_op1 = main_shift64RightJammingexit9ii_zExp0i11i_reg;
	end
	/* main: %217*/
	/*   %expDiff.0.i.i = add nsw i32 %15, %221*/
	else if ((cur_state == LEGUP_F_main_BB__217_93)) begin
		main_signed_add_32_0_op1 = main_217_221;
	end
	/* main: %266*/
	/*   %expDiff.1.i.i = add nsw i32 %270, %15*/
	else if ((cur_state == LEGUP_F_main_BB__266_111)) begin
		main_signed_add_32_0_op1 = main_1_15_reg;
	end
	/* main: %292*/
	/*   %293 = add nsw i32 %zExp.0.i.i, -1*/
	else if ((cur_state == LEGUP_F_main_BB__292_117)) begin
		main_signed_add_32_0_op1 = -32'd1;
	end
	/* main: %normalizeRoundAndPackFloat64.exit.i.i*/
	/*   %306 = add nsw i32 %shiftCount.1.i.i.i.i.i, %305*/
	else if ((cur_state == LEGUP_F_main_BB_normalizeRoundAndPackFloat64exitii_119)) begin
		main_signed_add_32_0_op1 = main_normalizeRoundAndPackFloat64exitii_305;
	end
	/* main: %normalizeRoundAndPackFloat64.exit.i.i*/
	/*   %gep6 = add i32 %gep_int4, %gep_array5*/
	else if ((cur_state == LEGUP_F_main_BB_normalizeRoundAndPackFloat64exitii_120)) begin
		main_signed_add_32_0_op1 = main_normalizeRoundAndPackFloat64exitii_gep_array5_reg;
	end
	/* main: %normalizeRoundAndPackFloat64.exit.i.i*/
	/*   %307 = add i32 %306, %304*/
	else if ((cur_state == LEGUP_F_main_BB_normalizeRoundAndPackFloat64exitii_121)) begin
		main_signed_add_32_0_op1 = main_normalizeRoundAndPackFloat64exitii_304;
	end
	/* main: %float64_add.exit*/
	/*   %318 = add nsw i32 %i.01, 1*/
	else if ((cur_state == LEGUP_F_main_BB_float64_addexit_124)) begin
		main_signed_add_32_0_op1 = 32'd1;
	end
	/* main: %float64_add.exit*/
	/*   %gep9 = add i32 %gep_int7, %gep_array8*/
	else if ((cur_state == LEGUP_F_main_BB_float64_addexit_125)) begin
		main_signed_add_32_0_op1 = main_float64_addexit_gep_array8_reg;
	end
	/* main: %float64_add.exit*/
	/*   %316 = add nsw i32 %315, %main_result.02*/
	else /* if ((cur_state == LEGUP_F_main_BB_float64_addexit_126)) */ begin
		main_signed_add_32_0_op1 = main_1_main_result02_reg;
	end
end
always @(*) begin
	main_signed_add_32_0 = (main_signed_add_32_0_op0 + main_signed_add_32_0_op1);
end
always @(*) begin
	/* main: %1*/
	/*   %gep3 = add i32 %gep_int1, %gep_array2*/
		main_signed_add_32_1_op0 = main_1_gep_int1_reg;
end
always @(*) begin
	/* main: %1*/
	/*   %gep3 = add i32 %gep_int1, %gep_array2*/
		main_signed_add_32_1_op1 = main_1_gep_array2_reg;
end
always @(*) begin
	main_signed_add_32_1 = (main_signed_add_32_1_op0 + main_signed_add_32_1_op1);
end
always @(*) begin
	/* main: %1*/
	/*   %15 = sub nsw i32 %12, %14*/
	if ((cur_state == LEGUP_F_main_BB__1_3)) begin
		main_signed_subtract_32_0_op0 = main_1_12;
	end
	/* main: %52*/
	/*   %55 = sub nsw i32 0, %expDiff.0.i2.i*/
	else if ((cur_state == LEGUP_F_main_BB__52_19)) begin
		main_signed_subtract_32_0_op0 = 32'd0;
	end
	/* main: %92*/
	/*   %97 = sub nsw i32 0, %expDiff.1.i3.i*/
	else if ((cur_state == LEGUP_F_main_BB__92_35)) begin
		main_signed_subtract_32_0_op0 = 32'd0;
	end
	/* main: %217*/
	/*   %222 = sub nsw i32 0, %expDiff.0.i.i*/
	else if ((cur_state == LEGUP_F_main_BB__217_93)) begin
		main_signed_subtract_32_0_op0 = 32'd0;
	end
	/* main: %274*/
	/*   %277 = sub nsw i32 0, %expDiff.1.i.i*/
	else if ((cur_state == LEGUP_F_main_BB__274_113)) begin
		main_signed_subtract_32_0_op0 = 32'd0;
	end
	/* main: %normalizeRoundAndPackFloat64.exit.i.i*/
	/*   %308 = sub i32 %293, %307*/
	else /* if ((cur_state == LEGUP_F_main_BB_normalizeRoundAndPackFloat64exitii_121)) */ begin
		main_signed_subtract_32_0_op0 = main_292_293_reg;
	end
end
always @(*) begin
	/* main: %1*/
	/*   %15 = sub nsw i32 %12, %14*/
	if ((cur_state == LEGUP_F_main_BB__1_3)) begin
		main_signed_subtract_32_0_op1 = main_1_14;
	end
	/* main: %52*/
	/*   %55 = sub nsw i32 0, %expDiff.0.i2.i*/
	else if ((cur_state == LEGUP_F_main_BB__52_19)) begin
		main_signed_subtract_32_0_op1 = main_44_expDiff0i2i_reg;
	end
	/* main: %92*/
	/*   %97 = sub nsw i32 0, %expDiff.1.i3.i*/
	else if ((cur_state == LEGUP_F_main_BB__92_35)) begin
		main_signed_subtract_32_0_op1 = main_92_expDiff1i3i;
	end
	/* main: %217*/
	/*   %222 = sub nsw i32 0, %expDiff.0.i.i*/
	else if ((cur_state == LEGUP_F_main_BB__217_93)) begin
		main_signed_subtract_32_0_op1 = main_217_expDiff0ii;
	end
	/* main: %274*/
	/*   %277 = sub nsw i32 0, %expDiff.1.i.i*/
	else if ((cur_state == LEGUP_F_main_BB__274_113)) begin
		main_signed_subtract_32_0_op1 = main_266_expDiff1ii_reg;
	end
	/* main: %normalizeRoundAndPackFloat64.exit.i.i*/
	/*   %308 = sub i32 %293, %307*/
	else /* if ((cur_state == LEGUP_F_main_BB_normalizeRoundAndPackFloat64exitii_121)) */ begin
		main_signed_subtract_32_0_op1 = main_normalizeRoundAndPackFloat64exitii_307;
	end
end
always @(*) begin
	main_signed_subtract_32_0 = (main_signed_subtract_32_0_op0 - main_signed_subtract_32_0_op1);
end
always @(*) begin
	/* main: %135*/
	/*   %136 = add nuw nsw i64 %20, %18*/
	if ((cur_state == LEGUP_F_main_BB__135_51)) begin
		main_signed_add_64_0_op0 = main_16_20_reg;
	end
	/* main: %140*/
	/*   %142 = add nuw i64 %141, %20*/
	else if ((cur_state == LEGUP_F_main_BB__140_52)) begin
		main_signed_add_64_0_op0 = main_140_141;
	end
	/* main: %shift64RightJamming.exit9.i.i*/
	/*   %146 = add i64 %145, %144*/
	else /* if ((cur_state == LEGUP_F_main_BB_shift64RightJammingexit9ii_53)) */ begin
		main_signed_add_64_0_op0 = main_shift64RightJammingexit9ii_145;
	end
end
always @(*) begin
	/* main: %135*/
	/*   %136 = add nuw nsw i64 %20, %18*/
	if ((cur_state == LEGUP_F_main_BB__135_51)) begin
		main_signed_add_64_0_op1 = main_16_18_reg;
	end
	/* main: %140*/
	/*   %142 = add nuw i64 %141, %20*/
	else if ((cur_state == LEGUP_F_main_BB__140_52)) begin
		main_signed_add_64_0_op1 = main_16_20_reg;
	end
	/* main: %shift64RightJamming.exit9.i.i*/
	/*   %146 = add i64 %145, %144*/
	else /* if ((cur_state == LEGUP_F_main_BB_shift64RightJammingexit9ii_53)) */ begin
		main_signed_add_64_0_op1 = main_shift64RightJammingexit9ii_144_reg;
	end
end
always @(*) begin
	main_signed_add_64_0 = (main_signed_add_64_0_op0 + main_signed_add_64_0_op1);
end
always @(*) begin
	/* main: %239*/
	/*   %242 = sub i64 %241, %240*/
	if ((cur_state == LEGUP_F_main_BB__239_98)) begin
		main_signed_subtract_64_0_op0 = main_239_241_reg;
	end
	/* main: %288*/
	/*   %291 = sub i64 %289, %290*/
	else /* if ((cur_state == LEGUP_F_main_BB__288_116)) */ begin
		main_signed_subtract_64_0_op0 = main_288_289_reg;
	end
end
always @(*) begin
	/* main: %239*/
	/*   %242 = sub i64 %241, %240*/
	if ((cur_state == LEGUP_F_main_BB__239_98)) begin
		main_signed_subtract_64_0_op1 = main_239_240_reg;
	end
	/* main: %288*/
	/*   %291 = sub i64 %289, %290*/
	else /* if ((cur_state == LEGUP_F_main_BB__288_116)) */ begin
		main_signed_subtract_64_0_op1 = main_288_290_reg;
	end
end
always @(*) begin
	main_signed_subtract_64_0 = (main_signed_subtract_64_0_op0 - main_signed_subtract_64_0_op1);
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		finish <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
	/* main: %326*/
	/*   ret i32 %.lcssa*/
	if ((cur_state == LEGUP_F_main_BB__326_130)) begin
		finish <= (memory_controller_waitrequest == 1'd0);
		if (start == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
end
always @(*) begin
	memory_controller_enable_a = 1'd0;
	/* main: %150*/
	/*   %151 = tail call fastcc i64 @roundAndPackFloat64(i32 %7, i32 %zExp.1.i.i, i64 %zSig.0.i12.i) #1*/
	if ((cur_state == LEGUP_function_call_57)) begin
		memory_controller_enable_a = roundAndPackFloat64_memory_controller_enable_a;
	end
	/* main: %150*/
	/*   %151 = tail call fastcc i64 @roundAndPackFloat64(i32 %7, i32 %zExp.1.i.i, i64 %zSig.0.i12.i) #1*/
	if ((cur_state == LEGUP_function_call_57)) begin
		memory_controller_enable_a = roundAndPackFloat64_memory_controller_enable_a;
	end
	/* main: %normalizeRoundAndPackFloat64.exit.i.i*/
	/*   %311 = tail call fastcc i64 @roundAndPackFloat64(i32 %.0.i.i, i32 %308, i64 %310) #1*/
	if ((cur_state == LEGUP_function_call_122)) begin
		memory_controller_enable_a = roundAndPackFloat64_memory_controller_enable_a;
	end
	/* main: %normalizeRoundAndPackFloat64.exit.i.i*/
	/*   %311 = tail call fastcc i64 @roundAndPackFloat64(i32 %.0.i.i, i32 %308, i64 %310) #1*/
	if ((cur_state == LEGUP_function_call_122)) begin
		memory_controller_enable_a = roundAndPackFloat64_memory_controller_enable_a;
	end
	/* main: %.thread.i12.i.i*/
	/*   %42 = load i32* @float_exception_flags, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_threadi12ii_12)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.thread.i12.i.i*/
	/*   store i32 %43, i32* @float_exception_flags, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_threadi12ii_14)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.thread.i3.i.i*/
	/*   %87 = load i32* @float_exception_flags, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_threadi3ii_29)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.thread.i3.i.i*/
	/*   store i32 %88, i32* @float_exception_flags, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_threadi3ii_31)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.thread.i.i6.i*/
	/*   %133 = load i32* @float_exception_flags, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_threadii6i_46)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.thread.i.i6.i*/
	/*   store i32 %134, i32* @float_exception_flags, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_threadii6i_48)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.thread.i13.i.i*/
	/*   %180 = load i32* @float_exception_flags, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_threadi13ii_68)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.thread.i13.i.i*/
	/*   store i32 %181, i32* @float_exception_flags, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_threadi13ii_70)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %182*/
	/*   %183 = load i32* @float_exception_flags, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__182_73)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %182*/
	/*   store i32 %184, i32* @float_exception_flags, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__182_75)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.thread.i6.i.i*/
	/*   %210 = load i32* @float_exception_flags, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_threadi6ii_87)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.thread.i6.i.i*/
	/*   store i32 %211, i32* @float_exception_flags, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_threadi6ii_89)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.thread.i.i.i*/
	/*   %264 = load i32* @float_exception_flags, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_threadiii_106)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.thread.i.i.i*/
	/*   store i32 %265, i32* @float_exception_flags, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_threadiii_108)) begin
		memory_controller_enable_a = 1'd1;
	end
end
always @(*) begin
	memory_controller_address_a = 1'd0;
	/* main: %150*/
	/*   %151 = tail call fastcc i64 @roundAndPackFloat64(i32 %7, i32 %zExp.1.i.i, i64 %zSig.0.i12.i) #1*/
	if ((cur_state == LEGUP_function_call_57)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = roundAndPackFloat64_memory_controller_address_a;
	end
	/* main: %150*/
	/*   %151 = tail call fastcc i64 @roundAndPackFloat64(i32 %7, i32 %zExp.1.i.i, i64 %zSig.0.i12.i) #1*/
	if ((cur_state == LEGUP_function_call_57)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = roundAndPackFloat64_memory_controller_address_a;
	end
	/* main: %normalizeRoundAndPackFloat64.exit.i.i*/
	/*   %311 = tail call fastcc i64 @roundAndPackFloat64(i32 %.0.i.i, i32 %308, i64 %310) #1*/
	if ((cur_state == LEGUP_function_call_122)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = roundAndPackFloat64_memory_controller_address_a;
	end
	/* main: %normalizeRoundAndPackFloat64.exit.i.i*/
	/*   %311 = tail call fastcc i64 @roundAndPackFloat64(i32 %.0.i.i, i32 %308, i64 %310) #1*/
	if ((cur_state == LEGUP_function_call_122)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = roundAndPackFloat64_memory_controller_address_a;
	end
	/* main: %.thread.i12.i.i*/
	/*   %42 = load i32* @float_exception_flags, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_threadi12ii_12)) begin
		memory_controller_address_a = `TAG_g_float_exception_flags_a;
	end
	/* main: %.thread.i12.i.i*/
	/*   store i32 %43, i32* @float_exception_flags, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_threadi12ii_14)) begin
		memory_controller_address_a = `TAG_g_float_exception_flags_a;
	end
	/* main: %.thread.i3.i.i*/
	/*   %87 = load i32* @float_exception_flags, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_threadi3ii_29)) begin
		memory_controller_address_a = `TAG_g_float_exception_flags_a;
	end
	/* main: %.thread.i3.i.i*/
	/*   store i32 %88, i32* @float_exception_flags, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_threadi3ii_31)) begin
		memory_controller_address_a = `TAG_g_float_exception_flags_a;
	end
	/* main: %.thread.i.i6.i*/
	/*   %133 = load i32* @float_exception_flags, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_threadii6i_46)) begin
		memory_controller_address_a = `TAG_g_float_exception_flags_a;
	end
	/* main: %.thread.i.i6.i*/
	/*   store i32 %134, i32* @float_exception_flags, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_threadii6i_48)) begin
		memory_controller_address_a = `TAG_g_float_exception_flags_a;
	end
	/* main: %.thread.i13.i.i*/
	/*   %180 = load i32* @float_exception_flags, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_threadi13ii_68)) begin
		memory_controller_address_a = `TAG_g_float_exception_flags_a;
	end
	/* main: %.thread.i13.i.i*/
	/*   store i32 %181, i32* @float_exception_flags, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_threadi13ii_70)) begin
		memory_controller_address_a = `TAG_g_float_exception_flags_a;
	end
	/* main: %182*/
	/*   %183 = load i32* @float_exception_flags, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__182_73)) begin
		memory_controller_address_a = `TAG_g_float_exception_flags_a;
	end
	/* main: %182*/
	/*   store i32 %184, i32* @float_exception_flags, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__182_75)) begin
		memory_controller_address_a = `TAG_g_float_exception_flags_a;
	end
	/* main: %.thread.i6.i.i*/
	/*   %210 = load i32* @float_exception_flags, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_threadi6ii_87)) begin
		memory_controller_address_a = `TAG_g_float_exception_flags_a;
	end
	/* main: %.thread.i6.i.i*/
	/*   store i32 %211, i32* @float_exception_flags, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_threadi6ii_89)) begin
		memory_controller_address_a = `TAG_g_float_exception_flags_a;
	end
	/* main: %.thread.i.i.i*/
	/*   %264 = load i32* @float_exception_flags, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_threadiii_106)) begin
		memory_controller_address_a = `TAG_g_float_exception_flags_a;
	end
	/* main: %.thread.i.i.i*/
	/*   store i32 %265, i32* @float_exception_flags, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_threadiii_108)) begin
		memory_controller_address_a = `TAG_g_float_exception_flags_a;
	end
end
always @(*) begin
	memory_controller_write_enable_a = 1'd0;
	/* main: %150*/
	/*   %151 = tail call fastcc i64 @roundAndPackFloat64(i32 %7, i32 %zExp.1.i.i, i64 %zSig.0.i12.i) #1*/
	if ((cur_state == LEGUP_function_call_57)) begin
		memory_controller_write_enable_a = roundAndPackFloat64_memory_controller_write_enable_a;
	end
	/* main: %150*/
	/*   %151 = tail call fastcc i64 @roundAndPackFloat64(i32 %7, i32 %zExp.1.i.i, i64 %zSig.0.i12.i) #1*/
	if ((cur_state == LEGUP_function_call_57)) begin
		memory_controller_write_enable_a = roundAndPackFloat64_memory_controller_write_enable_a;
	end
	/* main: %normalizeRoundAndPackFloat64.exit.i.i*/
	/*   %311 = tail call fastcc i64 @roundAndPackFloat64(i32 %.0.i.i, i32 %308, i64 %310) #1*/
	if ((cur_state == LEGUP_function_call_122)) begin
		memory_controller_write_enable_a = roundAndPackFloat64_memory_controller_write_enable_a;
	end
	/* main: %normalizeRoundAndPackFloat64.exit.i.i*/
	/*   %311 = tail call fastcc i64 @roundAndPackFloat64(i32 %.0.i.i, i32 %308, i64 %310) #1*/
	if ((cur_state == LEGUP_function_call_122)) begin
		memory_controller_write_enable_a = roundAndPackFloat64_memory_controller_write_enable_a;
	end
	/* main: %.thread.i12.i.i*/
	/*   %42 = load i32* @float_exception_flags, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_threadi12ii_12)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %.thread.i12.i.i*/
	/*   store i32 %43, i32* @float_exception_flags, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_threadi12ii_14)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %.thread.i3.i.i*/
	/*   %87 = load i32* @float_exception_flags, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_threadi3ii_29)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %.thread.i3.i.i*/
	/*   store i32 %88, i32* @float_exception_flags, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_threadi3ii_31)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %.thread.i.i6.i*/
	/*   %133 = load i32* @float_exception_flags, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_threadii6i_46)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %.thread.i.i6.i*/
	/*   store i32 %134, i32* @float_exception_flags, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_threadii6i_48)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %.thread.i13.i.i*/
	/*   %180 = load i32* @float_exception_flags, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_threadi13ii_68)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %.thread.i13.i.i*/
	/*   store i32 %181, i32* @float_exception_flags, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_threadi13ii_70)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %182*/
	/*   %183 = load i32* @float_exception_flags, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__182_73)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %182*/
	/*   store i32 %184, i32* @float_exception_flags, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__182_75)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %.thread.i6.i.i*/
	/*   %210 = load i32* @float_exception_flags, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_threadi6ii_87)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %.thread.i6.i.i*/
	/*   store i32 %211, i32* @float_exception_flags, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_threadi6ii_89)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %.thread.i.i.i*/
	/*   %264 = load i32* @float_exception_flags, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_threadiii_106)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %.thread.i.i.i*/
	/*   store i32 %265, i32* @float_exception_flags, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_threadiii_108)) begin
		memory_controller_write_enable_a = 1'd1;
	end
end
always @(*) begin
	memory_controller_in_a = 1'd0;
	/* main: %150*/
	/*   %151 = tail call fastcc i64 @roundAndPackFloat64(i32 %7, i32 %zExp.1.i.i, i64 %zSig.0.i12.i) #1*/
	if ((cur_state == LEGUP_function_call_57)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = roundAndPackFloat64_memory_controller_in_a;
	end
	/* main: %150*/
	/*   %151 = tail call fastcc i64 @roundAndPackFloat64(i32 %7, i32 %zExp.1.i.i, i64 %zSig.0.i12.i) #1*/
	if ((cur_state == LEGUP_function_call_57)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = roundAndPackFloat64_memory_controller_in_a;
	end
	/* main: %normalizeRoundAndPackFloat64.exit.i.i*/
	/*   %311 = tail call fastcc i64 @roundAndPackFloat64(i32 %.0.i.i, i32 %308, i64 %310) #1*/
	if ((cur_state == LEGUP_function_call_122)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = roundAndPackFloat64_memory_controller_in_a;
	end
	/* main: %normalizeRoundAndPackFloat64.exit.i.i*/
	/*   %311 = tail call fastcc i64 @roundAndPackFloat64(i32 %.0.i.i, i32 %308, i64 %310) #1*/
	if ((cur_state == LEGUP_function_call_122)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = roundAndPackFloat64_memory_controller_in_a;
	end
	/* main: %.thread.i12.i.i*/
	/*   store i32 %43, i32* @float_exception_flags, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_threadi12ii_14)) begin
		memory_controller_in_a = main_threadi12ii_43;
	end
	/* main: %.thread.i3.i.i*/
	/*   store i32 %88, i32* @float_exception_flags, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_threadi3ii_31)) begin
		memory_controller_in_a = main_threadi3ii_88;
	end
	/* main: %.thread.i.i6.i*/
	/*   store i32 %134, i32* @float_exception_flags, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_threadii6i_48)) begin
		memory_controller_in_a = main_threadii6i_134;
	end
	/* main: %.thread.i13.i.i*/
	/*   store i32 %181, i32* @float_exception_flags, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_threadi13ii_70)) begin
		memory_controller_in_a = main_threadi13ii_181;
	end
	/* main: %182*/
	/*   store i32 %184, i32* @float_exception_flags, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__182_75)) begin
		memory_controller_in_a = main_182_184;
	end
	/* main: %.thread.i6.i.i*/
	/*   store i32 %211, i32* @float_exception_flags, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_threadi6ii_89)) begin
		memory_controller_in_a = main_threadi6ii_211;
	end
	/* main: %.thread.i.i.i*/
	/*   store i32 %265, i32* @float_exception_flags, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_threadiii_108)) begin
		memory_controller_in_a = main_threadiii_265;
	end
end
always @(*) begin
	memory_controller_size_a = 1'd0;
	if ((cur_state == LEGUP_function_call_57)) begin
		memory_controller_size_a[1:0] = roundAndPackFloat64_memory_controller_size_a;
	end
	/* main: %150*/
	/*   %151 = tail call fastcc i64 @roundAndPackFloat64(i32 %7, i32 %zExp.1.i.i, i64 %zSig.0.i12.i) #1*/
	if ((cur_state == LEGUP_function_call_57)) begin
		memory_controller_size_a[1:0] = roundAndPackFloat64_memory_controller_size_a;
	end
	if ((cur_state == LEGUP_function_call_122)) begin
		memory_controller_size_a[1:0] = roundAndPackFloat64_memory_controller_size_a;
	end
	/* main: %normalizeRoundAndPackFloat64.exit.i.i*/
	/*   %311 = tail call fastcc i64 @roundAndPackFloat64(i32 %.0.i.i, i32 %308, i64 %310) #1*/
	if ((cur_state == LEGUP_function_call_122)) begin
		memory_controller_size_a[1:0] = roundAndPackFloat64_memory_controller_size_a;
	end
	/* main: %.thread.i12.i.i*/
	/*   %42 = load i32* @float_exception_flags, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_threadi12ii_12)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.thread.i12.i.i*/
	/*   store i32 %43, i32* @float_exception_flags, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_threadi12ii_14)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.thread.i3.i.i*/
	/*   %87 = load i32* @float_exception_flags, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_threadi3ii_29)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.thread.i3.i.i*/
	/*   store i32 %88, i32* @float_exception_flags, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_threadi3ii_31)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.thread.i.i6.i*/
	/*   %133 = load i32* @float_exception_flags, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_threadii6i_46)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.thread.i.i6.i*/
	/*   store i32 %134, i32* @float_exception_flags, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_threadii6i_48)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.thread.i13.i.i*/
	/*   %180 = load i32* @float_exception_flags, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_threadi13ii_68)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.thread.i13.i.i*/
	/*   store i32 %181, i32* @float_exception_flags, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_threadi13ii_70)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %182*/
	/*   %183 = load i32* @float_exception_flags, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__182_73)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %182*/
	/*   store i32 %184, i32* @float_exception_flags, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__182_75)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.thread.i6.i.i*/
	/*   %210 = load i32* @float_exception_flags, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_threadi6ii_87)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.thread.i6.i.i*/
	/*   store i32 %211, i32* @float_exception_flags, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_threadi6ii_89)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.thread.i.i.i*/
	/*   %264 = load i32* @float_exception_flags, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_threadiii_106)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.thread.i.i.i*/
	/*   store i32 %265, i32* @float_exception_flags, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_threadiii_108)) begin
		memory_controller_size_a = 2'd2;
	end
end
always @(*) begin
	memory_controller_enable_b = 1'd0;
	/* main: %150*/
	/*   %151 = tail call fastcc i64 @roundAndPackFloat64(i32 %7, i32 %zExp.1.i.i, i64 %zSig.0.i12.i) #1*/
	if ((cur_state == LEGUP_function_call_57)) begin
		memory_controller_enable_b = roundAndPackFloat64_memory_controller_enable_b;
	end
	/* main: %150*/
	/*   %151 = tail call fastcc i64 @roundAndPackFloat64(i32 %7, i32 %zExp.1.i.i, i64 %zSig.0.i12.i) #1*/
	if ((cur_state == LEGUP_function_call_57)) begin
		memory_controller_enable_b = roundAndPackFloat64_memory_controller_enable_b;
	end
	/* main: %normalizeRoundAndPackFloat64.exit.i.i*/
	/*   %311 = tail call fastcc i64 @roundAndPackFloat64(i32 %.0.i.i, i32 %308, i64 %310) #1*/
	if ((cur_state == LEGUP_function_call_122)) begin
		memory_controller_enable_b = roundAndPackFloat64_memory_controller_enable_b;
	end
	/* main: %normalizeRoundAndPackFloat64.exit.i.i*/
	/*   %311 = tail call fastcc i64 @roundAndPackFloat64(i32 %.0.i.i, i32 %308, i64 %310) #1*/
	if ((cur_state == LEGUP_function_call_122)) begin
		memory_controller_enable_b = roundAndPackFloat64_memory_controller_enable_b;
	end
end
always @(*) begin
	memory_controller_address_b = 1'd0;
	/* main: %150*/
	/*   %151 = tail call fastcc i64 @roundAndPackFloat64(i32 %7, i32 %zExp.1.i.i, i64 %zSig.0.i12.i) #1*/
	if ((cur_state == LEGUP_function_call_57)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = roundAndPackFloat64_memory_controller_address_b;
	end
	/* main: %150*/
	/*   %151 = tail call fastcc i64 @roundAndPackFloat64(i32 %7, i32 %zExp.1.i.i, i64 %zSig.0.i12.i) #1*/
	if ((cur_state == LEGUP_function_call_57)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = roundAndPackFloat64_memory_controller_address_b;
	end
	/* main: %normalizeRoundAndPackFloat64.exit.i.i*/
	/*   %311 = tail call fastcc i64 @roundAndPackFloat64(i32 %.0.i.i, i32 %308, i64 %310) #1*/
	if ((cur_state == LEGUP_function_call_122)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = roundAndPackFloat64_memory_controller_address_b;
	end
	/* main: %normalizeRoundAndPackFloat64.exit.i.i*/
	/*   %311 = tail call fastcc i64 @roundAndPackFloat64(i32 %.0.i.i, i32 %308, i64 %310) #1*/
	if ((cur_state == LEGUP_function_call_122)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = roundAndPackFloat64_memory_controller_address_b;
	end
end
always @(*) begin
	memory_controller_write_enable_b = 1'd0;
	/* main: %150*/
	/*   %151 = tail call fastcc i64 @roundAndPackFloat64(i32 %7, i32 %zExp.1.i.i, i64 %zSig.0.i12.i) #1*/
	if ((cur_state == LEGUP_function_call_57)) begin
		memory_controller_write_enable_b = roundAndPackFloat64_memory_controller_write_enable_b;
	end
	/* main: %150*/
	/*   %151 = tail call fastcc i64 @roundAndPackFloat64(i32 %7, i32 %zExp.1.i.i, i64 %zSig.0.i12.i) #1*/
	if ((cur_state == LEGUP_function_call_57)) begin
		memory_controller_write_enable_b = roundAndPackFloat64_memory_controller_write_enable_b;
	end
	/* main: %normalizeRoundAndPackFloat64.exit.i.i*/
	/*   %311 = tail call fastcc i64 @roundAndPackFloat64(i32 %.0.i.i, i32 %308, i64 %310) #1*/
	if ((cur_state == LEGUP_function_call_122)) begin
		memory_controller_write_enable_b = roundAndPackFloat64_memory_controller_write_enable_b;
	end
	/* main: %normalizeRoundAndPackFloat64.exit.i.i*/
	/*   %311 = tail call fastcc i64 @roundAndPackFloat64(i32 %.0.i.i, i32 %308, i64 %310) #1*/
	if ((cur_state == LEGUP_function_call_122)) begin
		memory_controller_write_enable_b = roundAndPackFloat64_memory_controller_write_enable_b;
	end
end
always @(*) begin
	memory_controller_in_b = 1'd0;
	/* main: %150*/
	/*   %151 = tail call fastcc i64 @roundAndPackFloat64(i32 %7, i32 %zExp.1.i.i, i64 %zSig.0.i12.i) #1*/
	if ((cur_state == LEGUP_function_call_57)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = roundAndPackFloat64_memory_controller_in_b;
	end
	/* main: %150*/
	/*   %151 = tail call fastcc i64 @roundAndPackFloat64(i32 %7, i32 %zExp.1.i.i, i64 %zSig.0.i12.i) #1*/
	if ((cur_state == LEGUP_function_call_57)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = roundAndPackFloat64_memory_controller_in_b;
	end
	/* main: %normalizeRoundAndPackFloat64.exit.i.i*/
	/*   %311 = tail call fastcc i64 @roundAndPackFloat64(i32 %.0.i.i, i32 %308, i64 %310) #1*/
	if ((cur_state == LEGUP_function_call_122)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = roundAndPackFloat64_memory_controller_in_b;
	end
	/* main: %normalizeRoundAndPackFloat64.exit.i.i*/
	/*   %311 = tail call fastcc i64 @roundAndPackFloat64(i32 %.0.i.i, i32 %308, i64 %310) #1*/
	if ((cur_state == LEGUP_function_call_122)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = roundAndPackFloat64_memory_controller_in_b;
	end
end
always @(*) begin
	memory_controller_size_b = 1'd0;
	if ((cur_state == LEGUP_function_call_57)) begin
		memory_controller_size_b[1:0] = roundAndPackFloat64_memory_controller_size_b;
	end
	/* main: %150*/
	/*   %151 = tail call fastcc i64 @roundAndPackFloat64(i32 %7, i32 %zExp.1.i.i, i64 %zSig.0.i12.i) #1*/
	if ((cur_state == LEGUP_function_call_57)) begin
		memory_controller_size_b[1:0] = roundAndPackFloat64_memory_controller_size_b;
	end
	if ((cur_state == LEGUP_function_call_122)) begin
		memory_controller_size_b[1:0] = roundAndPackFloat64_memory_controller_size_b;
	end
	/* main: %normalizeRoundAndPackFloat64.exit.i.i*/
	/*   %311 = tail call fastcc i64 @roundAndPackFloat64(i32 %.0.i.i, i32 %308, i64 %310) #1*/
	if ((cur_state == LEGUP_function_call_122)) begin
		memory_controller_size_b[1:0] = roundAndPackFloat64_memory_controller_size_b;
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		return_val <= 0;
		if (start == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
	/* main: %326*/
	/*   ret i32 %.lcssa*/
	if ((cur_state == LEGUP_F_main_BB__326_130)) begin
		return_val <= main_319_lcssa_reg;
		if (start == 1'b0 && ^(main_319_lcssa_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
end

endmodule 
module ram_dual_port
(
	clk,
	clken,
	address_a,
	address_b,
	wren_a,
	wren_b,
	data_a,
	data_b,
	byteena_a,
	byteena_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED.mif";
parameter  width_be_a = 1'd0;
parameter  width_be_b = 1'd0;
parameter  latency = 1;

input  clk;
input  clken;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output wire [(width_a-1):0] q_a;
output wire [(width_b-1):0] q_b;
reg [(width_a-1):0] q_a_wire;
reg [(width_b-1):0] q_b_wire;
input  wren_a;
input  wren_b;
input [(width_a-1):0] data_a;
input [(width_b-1):0] data_b;
// byte enable is unsupported by inferred RAMs
input [width_be_a-1:0] byteena_a;
input [width_be_b-1:0] byteena_b;

(* ramstyle = "no_rw_check", ram_init_file = init_file *) reg [width_a-1:0] ram[numwords_a-1:0];

/* synthesis translate_off */
integer i;
ALTERA_MF_MEMORY_INITIALIZATION mem ();
reg [8*256:1] ram_ver_file;
initial begin
	if (init_file == "UNUSED.mif")
    begin
		for (i = 0; i < numwords_a; i = i + 1)
			ram[i] = 0;
    end
	else
    begin
        // modelsim can't read .mif files directly. So use Altera function to
        // convert them to .ver files
        mem.convert_to_ver_file(init_file, width_a, ram_ver_file);
        $readmemh(ram_ver_file, ram);
    end
end
/* synthesis translate_on */

always @ (posedge clk)
if (clken)
begin // Port A
if (wren_a)
begin
    ram[address_a] <= data_a;
    q_a_wire <= {width_a{1'bX}};
end
else
    q_a_wire <= ram[address_a];
end
always @ (posedge clk)
if (clken)
begin // Port b
if (wren_b)
begin
    ram[address_b] <= data_b;
    q_b_wire <= {width_b{1'bX}};
end
else
    q_b_wire <= ram[address_b];
end



integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
if (clken)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = (clken) ? q_a_reg[latency] : 0;
assign q_b = (clken) ? q_b_reg[latency] : 0;


endmodule
module rom_dual_port
(
	clk,
	clken,
	address_a,
	address_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED.mif";
parameter  latency = 1;

input  clk;
input  clken;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output wire [(width_a-1):0] q_a;
output wire [(width_b-1):0] q_b;
reg [(width_a-1):0] q_a_wire;
reg [(width_b-1):0] q_b_wire;

(* ramstyle = "no_rw_check", ram_init_file = init_file *) reg [width_a-1:0] ram[numwords_a-1:0];

/* synthesis translate_off */
integer i;
ALTERA_MF_MEMORY_INITIALIZATION mem ();
reg [8*256:1] ram_ver_file;
initial begin
	if (init_file == "UNUSED.mif")
    begin
		for (i = 0; i < numwords_a; i = i + 1)
			ram[i] = 0;
    end
	else
    begin
        // modelsim can't read .mif files directly. So use Altera function to
        // convert them to .ver files
        mem.convert_to_ver_file(init_file, width_a, ram_ver_file);
        $readmemh(ram_ver_file, ram);
    end
end
/* synthesis translate_on */

always @ (posedge clk)
if (clken)
begin
    q_a_wire <= ram[address_a];
    q_b_wire <= ram[address_b];
end



integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
if (clken)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = (clken) ? q_a_reg[latency] : 0;
assign q_b = (clken) ? q_b_reg[latency] : 0;


endmodule
// Adding code from verilog file: ../../../boards/Virtex6/ML605/top.v


module ML605 (
       USER_CLOCK,
	    KEY,
	    SW,	    
       LED,
       LEDG,
		UART_RXD,
		UART_TXD

	    );

   input USER_CLOCK;
   input [4:0] KEY;
   input [7:0] SW;
   output [7:0] LED;
   output [7:0] LEDG;
   wire CLOCK_50;

    input UART_RXD;
    output UART_TXD;    
	wire clk = CLOCK_50;
	wire go = ~KEY[1];



   wire 	reset = ~KEY[0];
   wire 	start;
   wire [31:0] 	return_val;
   reg  [31:0] 	return_val_reg;
   wire 	finish;
   wire [3:0]	state;
   
   reg [6:0]   hex0, hex1, hex2, hex3, hex4, hex5, hex6, hex7;

   assign CLOCK_50 = USER_CLOCK;
   assign LED = 0;
   
	always @ (*) begin
		hex7 <= return_val_reg[31:28];
		hex6 <= return_val_reg[27:24];
		hex5 <= return_val_reg[23:20];
		hex4 <= return_val_reg[19:16];
		hex3 <= return_val_reg[15:12];
		hex2 <= return_val_reg[11:8];
		hex1 <= return_val_reg[7:4];
		hex0 <= return_val_reg[3:0];
	end
assign UART_TXD = 1'b0;

    parameter s_WAIT = 3'b001, s_START = 3'b010, s_EXE = 3'b011,
                s_DONE = 3'b100;

    // state registers
    reg [3:0] y_Q, Y_D;

    assign LEDG[3:0] = y_Q;

    // next state
    always @(*)
    begin
        case (y_Q)
            s_WAIT: if (go) Y_D = s_START; else Y_D = y_Q;

            s_START: Y_D = s_EXE;

            s_EXE: if (!finish) Y_D = s_EXE; else Y_D = s_DONE;

            s_DONE: Y_D = s_DONE;

            default: Y_D = 3'bxxx;
        endcase
    end

    // current state
    always @(posedge clk)
    begin
        if (reset) // synchronous clear
            y_Q <= s_WAIT;
        else
            y_Q <= Y_D;
    end

    always @(posedge clk)
        if (y_Q == s_EXE && finish)
            return_val_reg <= return_val;
        else if (y_Q == s_DONE)
            return_val_reg <= return_val_reg;
        else
            return_val_reg <= 0;


    assign start = (y_Q == s_START);

   
   top top_inst (
      .clk (clk),
      .reset (reset),
      .finish (finish),
      .return_val (return_val),
        .start (start)

    );

   

endmodule

// Adding code from verilog file: ../../../boards/StratixIV/DE4/top.v


module de4 ( 
    	     OSC_50_BANK2, 
             BUTTON, 
             LED, 
    	     SEG0_D, 
    	     SEG1_D 
	     ); 
   input OSC_50_BANK2; 
   input [1:0] BUTTON; 
   output [6:0] SEG0_D; 
   output [6:0] SEG1_D; 
   output [7:0] LED; 
   
   de2 de2_inst ( 
		  .CLOCK_50 (OSC_50_BANK2), 
		  .LEDG (LED), 
		  .KEY (BUTTON), 
		  .SW (), 
		  .HEX0 (SEG0_D), 
		  .HEX1 (SEG1_D), 
		  .HEX2 (), 
		  .HEX3 (), 
		  .HEX4 (), 
		  .HEX5 (), 
		  .HEX6 (), 
		  .HEX7 () 
		  ); 
   
endmodule
// Adding code from verilog file: ../../../boards/CycloneII/DE2/top.v


module de2 (
	    CLOCK_50,
	    KEY,
	    SW,
	    HEX0,
	    HEX1,
	    HEX2,
	    HEX3,
	    HEX4,
	    HEX5,
	    HEX6,
	    HEX7,
	    LEDG,
		UART_RXD,
		UART_TXD

	    );

   input CLOCK_50;
   input [3:0] KEY;
   input [17:0] SW;
   output [6:0] HEX0, HEX1,  HEX2,  HEX3,  HEX4,  HEX5,  HEX6,  HEX7;
   reg [6:0] 	hex0, hex1, hex2, hex3, hex4, hex5, hex6, hex7;
   

   output [7:0] LEDG;
    input UART_RXD;
    output UART_TXD;    
	wire clk = CLOCK_50;
	wire go = ~KEY[1];



   wire 	reset = ~KEY[0];
   wire 	start;
   wire [31:0] 	return_val;
   reg  [31:0] 	return_val_reg;
   wire 	finish;
   wire [3:0]	state;

   hex_digits h7( .x(hex7), .hex_LEDs(HEX7));
   hex_digits h6( .x(hex6), .hex_LEDs(HEX6));
   hex_digits h5( .x(hex5), .hex_LEDs(HEX5));
   hex_digits h4( .x(hex4), .hex_LEDs(HEX4));
   hex_digits h3( .x(hex3), .hex_LEDs(HEX3));
   hex_digits h2( .x(hex2), .hex_LEDs(HEX2));
   hex_digits h1( .x(hex1), .hex_LEDs(HEX1));
   hex_digits h0( .x(hex0), .hex_LEDs(HEX0));
   
	always @ (*) begin
		hex7 <= return_val_reg[31:28];
		hex6 <= return_val_reg[27:24];
		hex5 <= return_val_reg[23:20];
		hex4 <= return_val_reg[19:16];
		hex3 <= return_val_reg[15:12];
		hex2 <= return_val_reg[11:8];
		hex1 <= return_val_reg[7:4];
		hex0 <= return_val_reg[3:0];
	end
assign UART_TXD = 1'b0;

    parameter s_WAIT = 3'b001, s_START = 3'b010, s_EXE = 3'b011,
                s_DONE = 3'b100;

    // state registers
    reg [3:0] y_Q, Y_D;

    assign LEDG[3:0] = y_Q;

    // next state
    always @(*)
    begin
        case (y_Q)
            s_WAIT: if (go) Y_D = s_START; else Y_D = y_Q;

            s_START: Y_D = s_EXE;

            s_EXE: if (!finish) Y_D = s_EXE; else Y_D = s_DONE;

            s_DONE: Y_D = s_DONE;

            default: Y_D = 3'bxxx;
        endcase
    end

    // current state
    always @(posedge clk)
    begin
        if (reset) // synchronous clear
            y_Q <= s_WAIT;
        else
            y_Q <= Y_D;
    end

    always @(posedge clk)
        if (y_Q == s_EXE && finish)
            return_val_reg <= return_val;
        else if (y_Q == s_DONE)
            return_val_reg <= return_val_reg;
        else
            return_val_reg <= 0;


    assign start = (y_Q == s_START);

   
   top top_inst (
      .clk (clk),
      .reset (reset),
      .finish (finish),
      .return_val (return_val),
        .start (start)

    );

endmodule

module circuit_start_control (
    go,
    control_key
);
    input control_key;
    output go;
    assign go = control_key;
endmodule
module hex_digits(x, hex_LEDs);
    input [3:0] x;
    output [6:0] hex_LEDs;
    
    assign hex_LEDs[0] = (~x[3] & ~x[2] & ~x[1] & x[0]) |
                            (~x[3] & x[2] & ~x[1] & ~x[0]) |
                            (x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & ~x[2] & x[1] & x[0]);
    assign hex_LEDs[1] = (~x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & x[1] & x[0]) |
                            (x[3] & x[2] & ~x[0]) |
                            (x[2] & x[1] & ~x[0]);
    assign hex_LEDs[2] = (x[3] & x[2] & ~x[0]) |
                            (x[3] & x[2] & x[1]) |
                            (~x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[3] = (~x[3] & ~x[2] & ~x[1] & x[0]) | 
                            (~x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (x[2] & x[1] & x[0]) | 
                            (x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[4] = (~x[3] & x[0]) |
                            (~x[3] & x[2] & ~x[1]) |
                            (~x[2] & ~x[1] & x[0]);
    assign hex_LEDs[5] = (~x[3] & ~x[2] & x[0]) | 
                            (~x[3] & ~x[2] & x[1]) | 
                            (~x[3] & x[1] & x[0]) | 
                            (x[3] & x[2] & ~x[1] & x[0]);
    assign hex_LEDs[6] = (~x[3] & ~x[2] & ~x[1]) | 
                            (x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (~x[3] & x[2] & x[1] & x[0]);
    
endmodule
`timescale 1 ns / 1 ns
module main_tb
(
);

reg  clk;
reg  reset;
reg  start;
reg  waitrequest;
wire [31:0] return_val;
wire  finish;


top top_inst (
	.clk (clk),
	.reset (reset),
	.start (start),
	.waitrequest (waitrequest),
	.finish (finish),
	.return_val (return_val)
);


// Local Rams



initial 
    clk = 0;
always @(clk)
    clk <= #10 ~clk;

initial begin
//$monitor("At t=%t clk=%b %b %b %b %d", $time, clk, reset, start, finish, return_val);
@(negedge clk);
reset <= 1;
@(negedge clk);
reset <= 0;
start <= 1;
@(negedge clk);
start <= 0;
end

always@(finish) begin
    if (finish == 1) begin
        $display("At t=%t clk=%b finish=%b return_val=%d", $time, clk, finish, return_val);
        $display("Cycles: %d", ($time-50)/20);
        $finish;
    end
end

initial begin
waitrequest <= 1;
@(negedge clk);
@(negedge clk);
waitrequest <= 0;
end


endmodule 

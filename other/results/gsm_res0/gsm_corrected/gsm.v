//----------------------------------------------------------------------------//
// Generated by LegUp High-Level Synthesis Tool Version 4.0 (http://legup.org)
// Compiled: Sun Jul 26 12:56:54 2015
// University of Toronto
// For research and academic purposes only. Commercial use is prohibited.
// Please send bugs to: legup@eecg.toronto.edu
// Date: Mon Apr  1 08:22:55 2019
//----------------------------------------------------------------------------//

`define MEMORY_CONTROLLER_ADDR_SIZE 32
`define MEMORY_CONTROLLER_DATA_SIZE 64
// Number of RAM elements: 12
`define MEMORY_CONTROLLER_TAG_SIZE 9
//   %LARc = alloca [8 x i16], align 2
`define TAG_main_0_LARc `MEMORY_CONTROLLER_TAG_SIZE'd2
`define TAG_main_0_LARc_a {`TAG_main_0_LARc, 23'd0}

// Turn off warning 'ignoring unsupported system task'
// altera message_off 10175

`timescale 1 ns / 1 ns
module top
	(
		clk,
		reset,
		start,
		finish,
		waitrequest,
		return_val
	);
input clk;
input reset;
input start;
output wire finish;
input waitrequest;
output wire [31:0] return_val;
wire memory_controller_waitrequest;
wire memory_controller_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
wire memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
wire [1:0] memory_controller_size_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;

wire memory_controller_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
wire memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
wire [1:0] memory_controller_size_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;

/* synthesis translate_off */
assign memory_controller_waitrequest = waitrequest;
/* synthesis translate_on */

memory_controller memory_controller_inst (
	.clk( clk ),
	.memory_controller_enable_a( memory_controller_enable_a ),
	.memory_controller_enable_b( memory_controller_enable_b ),
	.memory_controller_address_a( memory_controller_address_a ),
	.memory_controller_address_b( memory_controller_address_b ),
	.memory_controller_write_enable_a( memory_controller_write_enable_a ),
	.memory_controller_write_enable_b( memory_controller_write_enable_b ),
	.memory_controller_in_a( memory_controller_in_a ),
	.memory_controller_in_b( memory_controller_in_b ),
	.memory_controller_size_a( memory_controller_size_a ),
	.memory_controller_size_b( memory_controller_size_b ),
	.memory_controller_waitrequest( memory_controller_waitrequest ),
	.memory_controller_out_reg_a( memory_controller_out_a ),
	.memory_controller_out_reg_b( memory_controller_out_b )
);

main main_inst(
	.clk( clk ),
	.clk2x( clk2x ),
	.clk1x_follower( clk1x_follower ),
	.reset( reset ),
	.start( start ),
	.finish( finish ),
	.return_val( return_val ),
	.memory_controller_waitrequest(memory_controller_waitrequest),
	.memory_controller_enable_a(memory_controller_enable_a),
	.memory_controller_address_a(memory_controller_address_a),
	.memory_controller_write_enable_a(memory_controller_write_enable_a),
	.memory_controller_in_a(memory_controller_in_a),
	.memory_controller_size_a(memory_controller_size_a),
	.memory_controller_out_a(memory_controller_out_a),
	.memory_controller_enable_b(memory_controller_enable_b),
	.memory_controller_address_b(memory_controller_address_b),
	.memory_controller_write_enable_b(memory_controller_write_enable_b),
	.memory_controller_in_b(memory_controller_in_b),
	.memory_controller_size_b(memory_controller_size_b),
	.memory_controller_out_b(memory_controller_out_b)
);

endmodule

`timescale 1 ns / 1 ns
module memory_controller
(
	clk,
	memory_controller_address_a,
	memory_controller_address_b,
	memory_controller_enable_a,
	memory_controller_enable_b,
	memory_controller_write_enable_a,
	memory_controller_write_enable_b,
	memory_controller_in_a,
	memory_controller_in_b,
	memory_controller_size_a,
	memory_controller_size_b,
	memory_controller_waitrequest,
	memory_controller_out_reg_a,
	memory_controller_out_reg_b
);

parameter latency = 2;

parameter ram_latency = latency-1;

integer j;

input clk;
input memory_controller_waitrequest;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
input memory_controller_enable_a;
input memory_controller_write_enable_a;
input [64-1:0] memory_controller_in_a;
input [1:0] memory_controller_size_a;
output reg [64-1:0] memory_controller_out_reg_a;
reg [64-1:0] memory_controller_out_prev_a;
reg [64-1:0] memory_controller_out_a;

reg memory_controller_enable_reg_a;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
input memory_controller_enable_b;
input memory_controller_write_enable_b;
input [64-1:0] memory_controller_in_b;
input [1:0] memory_controller_size_b;
output reg [64-1:0] memory_controller_out_reg_b;
reg [64-1:0] memory_controller_out_prev_b;
reg [64-1:0] memory_controller_out_b;

reg memory_controller_enable_reg_b;

reg [2:0] ram_16_address_a;
reg [2:0] ram_16_address_b;
reg ram_16_write_enable_a;
reg ram_16_write_enable_b;
reg [15:0] ram_16_in_a;
reg [15:0] ram_16_in_b;
wire [15:0] ram_16_out_a;
wire [15:0] ram_16_out_b;

//   %LARc = alloca [8 x i16], align 2
ram_dual_port ram_16 (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( ram_16_address_a ),
	.address_b( ram_16_address_b ),
	.wren_a( ram_16_write_enable_a ),
	.wren_b( ram_16_write_enable_b ),
	.data_a( ram_16_in_a ),
	.data_b( ram_16_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( ram_16_out_a ),
	.q_b( ram_16_out_b)
);
defparam ram_16.width_a = 16;
defparam ram_16.width_b = 16;
defparam ram_16.widthad_a = 3;
defparam ram_16.widthad_b = 3;
defparam ram_16.width_be_a = 1;
defparam ram_16.width_be_b = 1;
defparam ram_16.numwords_a = 8;
defparam ram_16.numwords_b = 8;
defparam ram_16.latency = ram_latency;
wire [`MEMORY_CONTROLLER_TAG_SIZE-1:0] tag_a;
assign tag_a = memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:`MEMORY_CONTROLLER_ADDR_SIZE-`MEMORY_CONTROLLER_TAG_SIZE];
always @(*)
if (memory_controller_enable_a & (tag_a == 0))
begin
   $display("Error: Null pointer exception! Are you trying to read from a local ram? Use: 'set_memory_global <ram_name>' To debug this error try: 'set_parameter PRINT_STATES 1'");
   $finish;
end
reg [2:0] prevAddr_a;
reg [1:0] prevSize_a;
reg [2:0] prevSize_a_and;

always @(posedge clk)
if (!memory_controller_waitrequest)
begin
	prevAddr_a <= memory_controller_address_a[2:0];
	prevSize_a <= memory_controller_size_a;
end
wire [`MEMORY_CONTROLLER_TAG_SIZE-1:0] tag_b;
assign tag_b = memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:`MEMORY_CONTROLLER_ADDR_SIZE-`MEMORY_CONTROLLER_TAG_SIZE];
always @(*)
if (memory_controller_enable_b & (tag_b == 0))
begin
   $display("Error: Null pointer exception! Are you trying to read from a local ram? Use: 'set_memory_global <ram_name>' To debug this error try: 'set_parameter PRINT_STATES 1'");
   $finish;
end
reg [2:0] prevAddr_b;
reg [1:0] prevSize_b;
reg [2:0] prevSize_b_and;

always @(posedge clk)
if (!memory_controller_waitrequest)
begin
	prevAddr_b <= memory_controller_address_b[2:0];
	prevSize_b <= memory_controller_size_b;
end

reg [2:0] select_not_struct_a;

wire select_ram_16_a;
assign select_ram_16_a = (tag_a == 2);
reg [ram_latency:0] select_ram_16_reg_a;
wire [15:0] memory_controller_ram_16_out_a;
assign memory_controller_ram_16_out_a = {16{ select_ram_16_reg_a[ram_latency]}} & ram_16_out_a;

always @(*)
begin
	ram_16_address_a = memory_controller_address_a [3-1+1:1] & {3{select_ram_16_a}};
	ram_16_write_enable_a = memory_controller_write_enable_a & select_ram_16_a;
	ram_16_in_a [16-1:0] = memory_controller_in_a[16-1:0];

end
always @(*)
begin
	select_not_struct_a [2:0] = 3'b0 | {1{select_ram_16_reg_a[ram_latency]}};
	if (prevAddr_a[2:0] & select_not_struct_a[2:0] != 0 && memory_controller_enable_a)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end

	prevSize_a_and[0] = prevSize_a[1] | prevSize_a[0];
	prevSize_a_and[1] = prevSize_a[1];
	prevSize_a_and[2] = prevSize_a[1] & prevSize_a[0];
	if ((prevAddr_a & prevSize_a_and) != 0 && memory_controller_enable_a)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end
	memory_controller_out_prev_a = memory_controller_out_reg_a & { 64{!memory_controller_enable_reg_a}};
	memory_controller_out_a = 1'b0 | memory_controller_out_prev_a | memory_controller_ram_16_out_a;
end

always @(posedge clk)
if (!memory_controller_waitrequest)
begin
memory_controller_out_reg_a <= memory_controller_out_a;
memory_controller_enable_reg_a <= memory_controller_enable_a;
end

always @(posedge clk)
if (!memory_controller_waitrequest)
for (j = 0; j < ram_latency; j=j+1)
begin
select_ram_16_reg_a[j+1] <= select_ram_16_reg_a[j];
end
always @(*)
begin
select_ram_16_reg_a[0] <= select_ram_16_a;
end

reg [2:0] select_not_struct_b;

wire select_ram_16_b;
assign select_ram_16_b = (tag_b == 2);
reg [ram_latency:0] select_ram_16_reg_b;
wire [15:0] memory_controller_ram_16_out_b;
assign memory_controller_ram_16_out_b = {16{ select_ram_16_reg_b[ram_latency]}} & ram_16_out_b;

always @(*)
begin
	ram_16_address_b = memory_controller_address_b [3-1+1:1] & {3{select_ram_16_b}};
	ram_16_write_enable_b = memory_controller_write_enable_b & select_ram_16_b;
	ram_16_in_b [16-1:0] = memory_controller_in_b[16-1:0];

end
always @(*)
begin
	select_not_struct_b [2:0] = 3'b0 | {1{select_ram_16_reg_b[ram_latency]}};
	if (prevAddr_b[2:0] & select_not_struct_b[2:0] != 0 && memory_controller_enable_b)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end

	prevSize_b_and[0] = prevSize_b[1] | prevSize_b[0];
	prevSize_b_and[1] = prevSize_b[1];
	prevSize_b_and[2] = prevSize_b[1] & prevSize_b[0];
	if ((prevAddr_b & prevSize_b_and) != 0 && memory_controller_enable_b)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end
	memory_controller_out_prev_b = memory_controller_out_reg_b & { 64{!memory_controller_enable_reg_b}};
	memory_controller_out_b = 1'b0 | memory_controller_out_prev_b | memory_controller_ram_16_out_b;
end

always @(posedge clk)
if (!memory_controller_waitrequest)
begin
memory_controller_out_reg_b <= memory_controller_out_b;
memory_controller_enable_reg_b <= memory_controller_enable_b;
end

always @(posedge clk)
if (!memory_controller_waitrequest)
for (j = 0; j < ram_latency; j=j+1)
begin
select_ram_16_reg_b[j+1] <= select_ram_16_reg_b[j];
end
always @(*)
begin
select_ram_16_reg_b[0] <= select_ram_16_b;
end

endmodule 

`timescale 1 ns / 1 ns
module legup_memset_2_i64
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_waitrequest,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	arg_m,
	arg_c1,
	arg_n
);

parameter [3:0] LEGUP_0 = 4'd0;
parameter [3:0] LEGUP_F_legup_memset_2_i64_BB__0_1 = 4'd1;
parameter [3:0] LEGUP_F_legup_memset_2_i64_BB__0_2 = 4'd2;
parameter [3:0] LEGUP_F_legup_memset_2_i64_BB__0_3 = 4'd3;
parameter [3:0] LEGUP_F_legup_memset_2_i64_BB__0_4 = 4'd4;
parameter [3:0] LEGUP_F_legup_memset_2_i64_BB__0_5 = 4'd5;
parameter [3:0] LEGUP_F_legup_memset_2_i64_BB__0_6 = 4'd6;
parameter [3:0] LEGUP_F_legup_memset_2_i64_BB__17_7 = 4'd7;
parameter [3:0] LEGUP_F_legup_memset_2_i64_BB__17_8 = 4'd8;
parameter [3:0] LEGUP_F_legup_memset_2_i64_BB__17_9 = 4'd9;
parameter [3:0] LEGUP_F_legup_memset_2_i64_BB__21_10 = 4'd10;
parameter [3:0] LEGUP_F_legup_memset_2_i64_BB__21_11 = 4'd11;
parameter [3:0] LEGUP_F_legup_memset_2_i64_BB__21_12 = 4'd12;
parameter [3:0] LEGUP_F_legup_memset_2_i64_BB__25_13 = 4'd13;
parameter [8:0] tag_offset = 9'd0;
parameter [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tag_addr_offset = {tag_offset, 23'd0};

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
input  memory_controller_waitrequest;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] arg_m;
input [7:0] arg_c1;
input [63:0] arg_n;
reg [3:0] cur_state;
reg [3:0] next_state;
reg [7:0] legup_memset_2_i64_0_4;
reg [7:0] legup_memset_2_i64_0_4_reg;
reg [15:0] legup_memset_2_i64_0_5;
reg [15:0] legup_memset_2_i64_0_5_reg;
reg [15:0] legup_memset_2_i64_0_6;
reg [15:0] legup_memset_2_i64_0_6_reg;
reg [31:0] legup_memset_2_i64_0_7;
reg [31:0] legup_memset_2_i64_0_7_reg;
reg [31:0] legup_memset_2_i64_0_8;
reg [31:0] legup_memset_2_i64_0_8_reg;
reg [15:0] legup_memset_2_i64_0_9;
reg [15:0] legup_memset_2_i64_0_9_reg;
reg [31:0] legup_memset_2_i64_0_10;
reg [31:0] legup_memset_2_i64_0_10_reg;
reg [31:0] legup_memset_2_i64_0_11;
reg [31:0] legup_memset_2_i64_0_11_reg;
reg [15:0] legup_memset_2_i64_0_12;
reg [15:0] legup_memset_2_i64_0_12_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] legup_memset_2_i64_0_13;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] legup_memset_2_i64_0_13_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] legup_memset_2_i64_0_14;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] legup_memset_2_i64_0_14_reg;
reg [63:0] legup_memset_2_i64_0_15;
reg [63:0] legup_memset_2_i64_0_15_reg;
reg [63:0] legup_memset_2_i64_0_16;
reg [63:0] legup_memset_2_i64_0_16_reg;
reg [63:0] legup_memset_2_i64_17_18;
reg [63:0] legup_memset_2_i64_17_18_reg;
reg [63:0] legup_memset_2_i64_17_19;
reg [63:0] legup_memset_2_i64_17_19_reg;
reg  legup_memset_2_i64_17_20;
reg  legup_memset_2_i64_17_20_reg;
reg [15:0] legup_memset_2_i64_21_22;
reg [15:0] legup_memset_2_i64_21_22_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] legup_memset_2_i64_21_23;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] legup_memset_2_i64_21_23_reg;
reg [31:0] legup_memset_2_i64_21_gep_int;
reg [31:0] legup_memset_2_i64_21_gep_int_reg;
reg [31:0] legup_memset_2_i64_21_gep;
reg [31:0] legup_memset_2_i64_21_gep_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] legup_memset_2_i64_21_24;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] legup_memset_2_i64_21_24_reg;
wire [7:0] bitoff_address_a;
wire  bitoff_write_enable_a;
wire [7:0] bitoff_in_a;
wire [7:0] bitoff_out_a;
wire [7:0] bitoff_address_b;
wire  bitoff_write_enable_b;
wire [7:0] bitoff_in_b;
wire [7:0] bitoff_out_b;
wire [7:0] inData_address_a;
wire  inData_write_enable_a;
wire [15:0] inData_in_a;
wire [15:0] inData_out_a;
wire [7:0] inData_address_b;
wire  inData_write_enable_b;
wire [15:0] inData_in_b;
wire [15:0] inData_out_b;
wire [7:0] outData_address_a;
wire  outData_write_enable_a;
wire [15:0] outData_in_a;
wire [15:0] outData_out_a;
wire [7:0] outData_address_b;
wire  outData_write_enable_b;
wire [15:0] outData_in_b;
wire [15:0] outData_out_b;
wire [3:0] main_0_Pi_address_a;
wire  main_0_Pi_write_enable_a;
wire [15:0] main_0_Pi_in_a;
wire [15:0] main_0_Pi_out_a;
wire [3:0] main_0_Pi_address_b;
wire  main_0_Pi_write_enable_b;
wire [15:0] main_0_Pi_in_b;
wire [15:0] main_0_Pi_out_b;
wire [3:0] main_0_Ki_address_a;
wire  main_0_Ki_write_enable_a;
wire [15:0] main_0_Ki_in_a;
wire [15:0] main_0_Ki_out_a;
wire [3:0] main_0_Ki_address_b;
wire  main_0_Ki_write_enable_b;
wire [15:0] main_0_Ki_in_b;
wire [15:0] main_0_Ki_out_b;
wire [7:0] main_0_so_address_a;
wire  main_0_so_write_enable_a;
wire [15:0] main_0_so_in_a;
wire [15:0] main_0_so_out_a;
wire [7:0] main_0_so_address_b;
wire  main_0_so_write_enable_b;
wire [15:0] main_0_so_in_b;
wire [15:0] main_0_so_out_b;
wire [2:0] ram_16_address_a;
wire  ram_16_write_enable_a;
wire [15:0] ram_16_in_a;
wire [15:0] ram_16_out_a;
wire [2:0] ram_16_address_b;
wire  ram_16_write_enable_b;
wire [15:0] ram_16_in_b;
wire [15:0] ram_16_out_b;
reg  legup_memset_2_i64_0_1_address_a;
reg  legup_memset_2_i64_0_1_write_enable_a;
reg [31:0] legup_memset_2_i64_0_1_in_a;
wire [31:0] legup_memset_2_i64_0_1_out_a;
wire  legup_memset_2_i64_0_1_address_b;
wire  legup_memset_2_i64_0_1_write_enable_b;
wire [31:0] legup_memset_2_i64_0_1_in_b;
wire [31:0] legup_memset_2_i64_0_1_out_b;
reg  legup_memset_2_i64_0_2_address_a;
reg  legup_memset_2_i64_0_2_write_enable_a;
reg [7:0] legup_memset_2_i64_0_2_in_a;
wire [7:0] legup_memset_2_i64_0_2_out_a;
wire  legup_memset_2_i64_0_2_address_b;
wire  legup_memset_2_i64_0_2_write_enable_b;
wire [7:0] legup_memset_2_i64_0_2_in_b;
wire [7:0] legup_memset_2_i64_0_2_out_b;
reg  legup_memset_2_i64_0_3_address_a;
reg  legup_memset_2_i64_0_3_write_enable_a;
reg [63:0] legup_memset_2_i64_0_3_in_a;
wire [63:0] legup_memset_2_i64_0_3_out_a;
wire  legup_memset_2_i64_0_3_address_b;
wire  legup_memset_2_i64_0_3_write_enable_b;
wire [63:0] legup_memset_2_i64_0_3_in_b;
wire [63:0] legup_memset_2_i64_0_3_out_b;
reg  legup_memset_2_i64_0_c_address_a;
reg  legup_memset_2_i64_0_c_write_enable_a;
reg [15:0] legup_memset_2_i64_0_c_in_a;
wire [15:0] legup_memset_2_i64_0_c_out_a;
reg  legup_memset_2_i64_0_c_address_b;
reg  legup_memset_2_i64_0_c_write_enable_b;
wire [15:0] legup_memset_2_i64_0_c_in_b;
wire [15:0] legup_memset_2_i64_0_c_out_b;
reg  legup_memset_2_i64_0_s_address_a;
reg  legup_memset_2_i64_0_s_write_enable_a;
reg [31:0] legup_memset_2_i64_0_s_in_a;
wire [31:0] legup_memset_2_i64_0_s_out_a;
reg  legup_memset_2_i64_0_s_address_b;
reg  legup_memset_2_i64_0_s_write_enable_b;
reg [31:0] legup_memset_2_i64_0_s_in_b;
wire [31:0] legup_memset_2_i64_0_s_out_b;
reg [63:0] legup_memset_2_i64_signed_add_64_0_op0;
reg [63:0] legup_memset_2_i64_signed_add_64_0_op1;
reg [63:0] legup_memset_2_i64_signed_add_64_0;
reg [31:0] legup_memset_2_i64_signed_add_32_0_op0;
reg [31:0] legup_memset_2_i64_signed_add_32_0_op1;
reg [31:0] legup_memset_2_i64_signed_add_32_0;

// Local Rams


//   %1 = alloca i8*, align 4
ram_dual_port legup_memset_2_i64_0_1 (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( legup_memset_2_i64_0_1_address_a ),
	.address_b( legup_memset_2_i64_0_1_address_b ),
	.wren_a( legup_memset_2_i64_0_1_write_enable_a ),
	.wren_b( legup_memset_2_i64_0_1_write_enable_b ),
	.data_a( legup_memset_2_i64_0_1_in_a ),
	.data_b( legup_memset_2_i64_0_1_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( legup_memset_2_i64_0_1_out_a ),
	.q_b( legup_memset_2_i64_0_1_out_b)
);
defparam legup_memset_2_i64_0_1.width_a = 32;
defparam legup_memset_2_i64_0_1.width_b = 32;
defparam legup_memset_2_i64_0_1.widthad_a = 1;
defparam legup_memset_2_i64_0_1.widthad_b = 1;
defparam legup_memset_2_i64_0_1.width_be_a = 1;
defparam legup_memset_2_i64_0_1.width_be_b = 1;
defparam legup_memset_2_i64_0_1.numwords_a = 1;
defparam legup_memset_2_i64_0_1.numwords_b = 1;
defparam legup_memset_2_i64_0_1.latency = 1;


//   %2 = alloca i8, align 1
ram_dual_port legup_memset_2_i64_0_2 (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( legup_memset_2_i64_0_2_address_a ),
	.address_b( legup_memset_2_i64_0_2_address_b ),
	.wren_a( legup_memset_2_i64_0_2_write_enable_a ),
	.wren_b( legup_memset_2_i64_0_2_write_enable_b ),
	.data_a( legup_memset_2_i64_0_2_in_a ),
	.data_b( legup_memset_2_i64_0_2_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( legup_memset_2_i64_0_2_out_a ),
	.q_b( legup_memset_2_i64_0_2_out_b)
);
defparam legup_memset_2_i64_0_2.width_a = 8;
defparam legup_memset_2_i64_0_2.width_b = 8;
defparam legup_memset_2_i64_0_2.widthad_a = 1;
defparam legup_memset_2_i64_0_2.widthad_b = 1;
defparam legup_memset_2_i64_0_2.width_be_a = 1;
defparam legup_memset_2_i64_0_2.width_be_b = 1;
defparam legup_memset_2_i64_0_2.numwords_a = 1;
defparam legup_memset_2_i64_0_2.numwords_b = 1;
defparam legup_memset_2_i64_0_2.latency = 1;


//   %3 = alloca i64, align 8
ram_dual_port legup_memset_2_i64_0_3 (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( legup_memset_2_i64_0_3_address_a ),
	.address_b( legup_memset_2_i64_0_3_address_b ),
	.wren_a( legup_memset_2_i64_0_3_write_enable_a ),
	.wren_b( legup_memset_2_i64_0_3_write_enable_b ),
	.data_a( legup_memset_2_i64_0_3_in_a ),
	.data_b( legup_memset_2_i64_0_3_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( legup_memset_2_i64_0_3_out_a ),
	.q_b( legup_memset_2_i64_0_3_out_b)
);
defparam legup_memset_2_i64_0_3.width_a = 64;
defparam legup_memset_2_i64_0_3.width_b = 64;
defparam legup_memset_2_i64_0_3.widthad_a = 1;
defparam legup_memset_2_i64_0_3.widthad_b = 1;
defparam legup_memset_2_i64_0_3.width_be_a = 1;
defparam legup_memset_2_i64_0_3.width_be_b = 1;
defparam legup_memset_2_i64_0_3.numwords_a = 1;
defparam legup_memset_2_i64_0_3.numwords_b = 1;
defparam legup_memset_2_i64_0_3.latency = 1;


//   %c = alloca i16, align 2
ram_dual_port legup_memset_2_i64_0_c (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( legup_memset_2_i64_0_c_address_a ),
	.address_b( legup_memset_2_i64_0_c_address_b ),
	.wren_a( legup_memset_2_i64_0_c_write_enable_a ),
	.wren_b( legup_memset_2_i64_0_c_write_enable_b ),
	.data_a( legup_memset_2_i64_0_c_in_a ),
	.data_b( legup_memset_2_i64_0_c_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( legup_memset_2_i64_0_c_out_a ),
	.q_b( legup_memset_2_i64_0_c_out_b)
);
defparam legup_memset_2_i64_0_c.width_a = 16;
defparam legup_memset_2_i64_0_c.width_b = 16;
defparam legup_memset_2_i64_0_c.widthad_a = 1;
defparam legup_memset_2_i64_0_c.widthad_b = 1;
defparam legup_memset_2_i64_0_c.width_be_a = 1;
defparam legup_memset_2_i64_0_c.width_be_b = 1;
defparam legup_memset_2_i64_0_c.numwords_a = 1;
defparam legup_memset_2_i64_0_c.numwords_b = 1;
defparam legup_memset_2_i64_0_c.latency = 1;


//   %s = alloca i16*, align 4
ram_dual_port legup_memset_2_i64_0_s (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( legup_memset_2_i64_0_s_address_a ),
	.address_b( legup_memset_2_i64_0_s_address_b ),
	.wren_a( legup_memset_2_i64_0_s_write_enable_a ),
	.wren_b( legup_memset_2_i64_0_s_write_enable_b ),
	.data_a( legup_memset_2_i64_0_s_in_a ),
	.data_b( legup_memset_2_i64_0_s_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( legup_memset_2_i64_0_s_out_a ),
	.q_b( legup_memset_2_i64_0_s_out_b)
);
defparam legup_memset_2_i64_0_s.width_a = 32;
defparam legup_memset_2_i64_0_s.width_b = 32;
defparam legup_memset_2_i64_0_s.widthad_a = 1;
defparam legup_memset_2_i64_0_s.widthad_b = 1;
defparam legup_memset_2_i64_0_s.width_be_a = 1;
defparam legup_memset_2_i64_0_s.width_be_b = 1;
defparam legup_memset_2_i64_0_s.numwords_a = 1;
defparam legup_memset_2_i64_0_s.numwords_b = 1;
defparam legup_memset_2_i64_0_s.latency = 1;


always @(posedge clk) begin
if (reset == 1'b1)
	cur_state <= LEGUP_0;
else if (memory_controller_waitrequest == 1'd1)
	cur_state <= cur_state;
else
	cur_state <= next_state;
end

always @(*)
begin
next_state = cur_state;
case(cur_state)  // synthesis parallel_case  
LEGUP_0:
	if ((start == 1'd1))
		next_state = LEGUP_F_legup_memset_2_i64_BB__0_1;
LEGUP_F_legup_memset_2_i64_BB__0_1:
		next_state = LEGUP_F_legup_memset_2_i64_BB__0_2;
LEGUP_F_legup_memset_2_i64_BB__0_2:
		next_state = LEGUP_F_legup_memset_2_i64_BB__0_3;
LEGUP_F_legup_memset_2_i64_BB__0_3:
		next_state = LEGUP_F_legup_memset_2_i64_BB__0_4;
LEGUP_F_legup_memset_2_i64_BB__0_4:
		next_state = LEGUP_F_legup_memset_2_i64_BB__0_5;
LEGUP_F_legup_memset_2_i64_BB__0_5:
		next_state = LEGUP_F_legup_memset_2_i64_BB__0_6;
LEGUP_F_legup_memset_2_i64_BB__0_6:
		next_state = LEGUP_F_legup_memset_2_i64_BB__17_7;
LEGUP_F_legup_memset_2_i64_BB__17_7:
		next_state = LEGUP_F_legup_memset_2_i64_BB__17_8;
LEGUP_F_legup_memset_2_i64_BB__17_8:
		next_state = LEGUP_F_legup_memset_2_i64_BB__17_9;
LEGUP_F_legup_memset_2_i64_BB__17_9:
	if ((legup_memset_2_i64_17_20_reg == 1'd1))
		next_state = LEGUP_F_legup_memset_2_i64_BB__21_10;
	else if ((legup_memset_2_i64_17_20_reg == 1'd0))
		next_state = LEGUP_F_legup_memset_2_i64_BB__25_13;
LEGUP_F_legup_memset_2_i64_BB__21_10:
		next_state = LEGUP_F_legup_memset_2_i64_BB__21_11;
LEGUP_F_legup_memset_2_i64_BB__21_11:
		next_state = LEGUP_F_legup_memset_2_i64_BB__21_12;
LEGUP_F_legup_memset_2_i64_BB__21_12:
		next_state = LEGUP_F_legup_memset_2_i64_BB__17_7;
LEGUP_F_legup_memset_2_i64_BB__25_13:
		next_state = LEGUP_0;
default:
	next_state = cur_state;
endcase

end
always @(*) begin
	/* legup_memset_2_i64: %0*/
	/*   %4 = load i8* %2, align 1*/
		legup_memset_2_i64_0_4 = legup_memset_2_i64_0_2_out_a;
end
always @(posedge clk) begin
	/* legup_memset_2_i64: %0*/
	/*   %4 = load i8* %2, align 1*/
	if ((cur_state == LEGUP_F_legup_memset_2_i64_BB__0_3)) begin
		legup_memset_2_i64_0_4_reg <= legup_memset_2_i64_0_4;
		if (start == 1'b0 && ^(legup_memset_2_i64_0_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_memset_2_i64_0_4_reg"); $finish; end
	end
end
always @(*) begin
	/* legup_memset_2_i64: %0*/
	/*   %5 = zext i8 %4 to i16*/
		legup_memset_2_i64_0_5 = legup_memset_2_i64_0_4;
end
always @(posedge clk) begin
	/* legup_memset_2_i64: %0*/
	/*   %5 = zext i8 %4 to i16*/
	if ((cur_state == LEGUP_F_legup_memset_2_i64_BB__0_3)) begin
		legup_memset_2_i64_0_5_reg <= legup_memset_2_i64_0_5;
		if (start == 1'b0 && ^(legup_memset_2_i64_0_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_memset_2_i64_0_5_reg"); $finish; end
	end
end
always @(*) begin
	/* legup_memset_2_i64: %0*/
	/*   %6 = load i16* %c, align 2*/
		legup_memset_2_i64_0_6 = legup_memset_2_i64_0_c_out_a;
end
always @(posedge clk) begin
	/* legup_memset_2_i64: %0*/
	/*   %6 = load i16* %c, align 2*/
	if ((cur_state == LEGUP_F_legup_memset_2_i64_BB__0_5)) begin
		legup_memset_2_i64_0_6_reg <= legup_memset_2_i64_0_6;
		if (start == 1'b0 && ^(legup_memset_2_i64_0_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_memset_2_i64_0_6_reg"); $finish; end
	end
end
always @(*) begin
	/* legup_memset_2_i64: %0*/
	/*   %7 = zext i16 %6 to i32*/
		legup_memset_2_i64_0_7 = legup_memset_2_i64_0_6;
end
always @(posedge clk) begin
	/* legup_memset_2_i64: %0*/
	/*   %7 = zext i16 %6 to i32*/
	if ((cur_state == LEGUP_F_legup_memset_2_i64_BB__0_5)) begin
		legup_memset_2_i64_0_7_reg <= legup_memset_2_i64_0_7;
		if (start == 1'b0 && ^(legup_memset_2_i64_0_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_memset_2_i64_0_7_reg"); $finish; end
	end
end
always @(*) begin
	/* legup_memset_2_i64: %0*/
	/*   %8 = shl i32 %7, 8*/
		legup_memset_2_i64_0_8 = (legup_memset_2_i64_0_7 <<< (32'd8 % 32));
end
always @(posedge clk) begin
	/* legup_memset_2_i64: %0*/
	/*   %8 = shl i32 %7, 8*/
	if ((cur_state == LEGUP_F_legup_memset_2_i64_BB__0_5)) begin
		legup_memset_2_i64_0_8_reg <= legup_memset_2_i64_0_8;
		if (start == 1'b0 && ^(legup_memset_2_i64_0_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_memset_2_i64_0_8_reg"); $finish; end
	end
end
always @(*) begin
	/* legup_memset_2_i64: %0*/
	/*   %9 = load i16* %c, align 2*/
		legup_memset_2_i64_0_9 = legup_memset_2_i64_0_c_out_b;
end
always @(posedge clk) begin
	/* legup_memset_2_i64: %0*/
	/*   %9 = load i16* %c, align 2*/
	if ((cur_state == LEGUP_F_legup_memset_2_i64_BB__0_5)) begin
		legup_memset_2_i64_0_9_reg <= legup_memset_2_i64_0_9;
		if (start == 1'b0 && ^(legup_memset_2_i64_0_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_memset_2_i64_0_9_reg"); $finish; end
	end
end
always @(*) begin
	/* legup_memset_2_i64: %0*/
	/*   %10 = zext i16 %9 to i32*/
		legup_memset_2_i64_0_10 = legup_memset_2_i64_0_9;
end
always @(posedge clk) begin
	/* legup_memset_2_i64: %0*/
	/*   %10 = zext i16 %9 to i32*/
	if ((cur_state == LEGUP_F_legup_memset_2_i64_BB__0_5)) begin
		legup_memset_2_i64_0_10_reg <= legup_memset_2_i64_0_10;
		if (start == 1'b0 && ^(legup_memset_2_i64_0_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_memset_2_i64_0_10_reg"); $finish; end
	end
end
always @(*) begin
	/* legup_memset_2_i64: %0*/
	/*   %11 = or i32 %10, %8*/
		legup_memset_2_i64_0_11 = (legup_memset_2_i64_0_10 | legup_memset_2_i64_0_8);
end
always @(posedge clk) begin
	/* legup_memset_2_i64: %0*/
	/*   %11 = or i32 %10, %8*/
	if ((cur_state == LEGUP_F_legup_memset_2_i64_BB__0_5)) begin
		legup_memset_2_i64_0_11_reg <= legup_memset_2_i64_0_11;
		if (start == 1'b0 && ^(legup_memset_2_i64_0_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_memset_2_i64_0_11_reg"); $finish; end
	end
end
always @(*) begin
	/* legup_memset_2_i64: %0*/
	/*   %12 = trunc i32 %11 to i16*/
		legup_memset_2_i64_0_12 = legup_memset_2_i64_0_11[15:0];
end
always @(posedge clk) begin
	/* legup_memset_2_i64: %0*/
	/*   %12 = trunc i32 %11 to i16*/
	if ((cur_state == LEGUP_F_legup_memset_2_i64_BB__0_5)) begin
		legup_memset_2_i64_0_12_reg <= legup_memset_2_i64_0_12;
		if (start == 1'b0 && ^(legup_memset_2_i64_0_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_memset_2_i64_0_12_reg"); $finish; end
	end
end
always @(*) begin
	/* legup_memset_2_i64: %0*/
	/*   %13 = load i8** %1, align 4*/
		legup_memset_2_i64_0_13 = legup_memset_2_i64_0_1_out_a;
end
always @(posedge clk) begin
	/* legup_memset_2_i64: %0*/
	/*   %13 = load i8** %1, align 4*/
	if ((cur_state == LEGUP_F_legup_memset_2_i64_BB__0_3)) begin
		legup_memset_2_i64_0_13_reg <= legup_memset_2_i64_0_13;
		if (start == 1'b0 && ^(legup_memset_2_i64_0_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_memset_2_i64_0_13_reg"); $finish; end
	end
end
always @(*) begin
	/* legup_memset_2_i64: %0*/
	/*   %14 = bitcast i8* %13 to i16**/
		legup_memset_2_i64_0_14 = legup_memset_2_i64_0_13;
end
always @(posedge clk) begin
	/* legup_memset_2_i64: %0*/
	/*   %14 = bitcast i8* %13 to i16**/
	if ((cur_state == LEGUP_F_legup_memset_2_i64_BB__0_3)) begin
		legup_memset_2_i64_0_14_reg <= legup_memset_2_i64_0_14;
		if (start == 1'b0 && ^(legup_memset_2_i64_0_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_memset_2_i64_0_14_reg"); $finish; end
	end
end
always @(*) begin
	/* legup_memset_2_i64: %0*/
	/*   %15 = load i64* %3, align 8*/
		legup_memset_2_i64_0_15 = legup_memset_2_i64_0_3_out_a;
end
always @(posedge clk) begin
	/* legup_memset_2_i64: %0*/
	/*   %15 = load i64* %3, align 8*/
	if ((cur_state == LEGUP_F_legup_memset_2_i64_BB__0_3)) begin
		legup_memset_2_i64_0_15_reg <= legup_memset_2_i64_0_15;
		if (start == 1'b0 && ^(legup_memset_2_i64_0_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_memset_2_i64_0_15_reg"); $finish; end
	end
end
always @(*) begin
	/* legup_memset_2_i64: %0*/
	/*   %16 = lshr i64 %15, 1*/
		legup_memset_2_i64_0_16 = (legup_memset_2_i64_0_15 >>> (64'd1 % 64'd64));
end
always @(posedge clk) begin
	/* legup_memset_2_i64: %0*/
	/*   %16 = lshr i64 %15, 1*/
	if ((cur_state == LEGUP_F_legup_memset_2_i64_BB__0_3)) begin
		legup_memset_2_i64_0_16_reg <= legup_memset_2_i64_0_16;
		if (start == 1'b0 && ^(legup_memset_2_i64_0_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_memset_2_i64_0_16_reg"); $finish; end
	end
end
always @(*) begin
	/* legup_memset_2_i64: %17*/
	/*   %18 = load i64* %3, align 8*/
		legup_memset_2_i64_17_18 = legup_memset_2_i64_0_3_out_a;
end
always @(posedge clk) begin
	/* legup_memset_2_i64: %17*/
	/*   %18 = load i64* %3, align 8*/
	if ((cur_state == LEGUP_F_legup_memset_2_i64_BB__17_8)) begin
		legup_memset_2_i64_17_18_reg <= legup_memset_2_i64_17_18;
		if (start == 1'b0 && ^(legup_memset_2_i64_17_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_memset_2_i64_17_18_reg"); $finish; end
	end
end
always @(*) begin
	/* legup_memset_2_i64: %17*/
	/*   %19 = add i64 %18, -1*/
		legup_memset_2_i64_17_19 = legup_memset_2_i64_signed_add_64_0;
end
always @(posedge clk) begin
	/* legup_memset_2_i64: %17*/
	/*   %19 = add i64 %18, -1*/
	if ((cur_state == LEGUP_F_legup_memset_2_i64_BB__17_8)) begin
		legup_memset_2_i64_17_19_reg <= legup_memset_2_i64_17_19;
		if (start == 1'b0 && ^(legup_memset_2_i64_17_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_memset_2_i64_17_19_reg"); $finish; end
	end
end
always @(*) begin
	/* legup_memset_2_i64: %17*/
	/*   %20 = icmp ne i64 %18, 0*/
		legup_memset_2_i64_17_20 = (legup_memset_2_i64_17_18 != 64'd0);
end
always @(posedge clk) begin
	/* legup_memset_2_i64: %17*/
	/*   %20 = icmp ne i64 %18, 0*/
	if ((cur_state == LEGUP_F_legup_memset_2_i64_BB__17_8)) begin
		legup_memset_2_i64_17_20_reg <= legup_memset_2_i64_17_20;
		if (start == 1'b0 && ^(legup_memset_2_i64_17_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_memset_2_i64_17_20_reg"); $finish; end
	end
end
always @(*) begin
	/* legup_memset_2_i64: %21*/
	/*   %22 = load i16* %c, align 2*/
		legup_memset_2_i64_21_22 = legup_memset_2_i64_0_c_out_a;
end
always @(posedge clk) begin
	/* legup_memset_2_i64: %21*/
	/*   %22 = load i16* %c, align 2*/
	if ((cur_state == LEGUP_F_legup_memset_2_i64_BB__21_11)) begin
		legup_memset_2_i64_21_22_reg <= legup_memset_2_i64_21_22;
		if (start == 1'b0 && ^(legup_memset_2_i64_21_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_memset_2_i64_21_22_reg"); $finish; end
	end
end
always @(*) begin
	/* legup_memset_2_i64: %21*/
	/*   %23 = load i16** %s, align 4*/
		legup_memset_2_i64_21_23 = legup_memset_2_i64_0_s_out_a;
end
always @(posedge clk) begin
	/* legup_memset_2_i64: %21*/
	/*   %23 = load i16** %s, align 4*/
	if ((cur_state == LEGUP_F_legup_memset_2_i64_BB__21_11)) begin
		legup_memset_2_i64_21_23_reg <= legup_memset_2_i64_21_23;
		if (start == 1'b0 && ^(legup_memset_2_i64_21_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_memset_2_i64_21_23_reg"); $finish; end
	end
end
always @(*) begin
	/* legup_memset_2_i64: %21*/
	/*   %gep_int = ptrtoint i16* %23 to i32*/
		legup_memset_2_i64_21_gep_int = legup_memset_2_i64_21_23;
end
always @(posedge clk) begin
	/* legup_memset_2_i64: %21*/
	/*   %gep_int = ptrtoint i16* %23 to i32*/
	if ((cur_state == LEGUP_F_legup_memset_2_i64_BB__21_11)) begin
		legup_memset_2_i64_21_gep_int_reg <= legup_memset_2_i64_21_gep_int;
		if (start == 1'b0 && ^(legup_memset_2_i64_21_gep_int) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_memset_2_i64_21_gep_int_reg"); $finish; end
	end
end
always @(*) begin
	/* legup_memset_2_i64: %21*/
	/*   %gep = add i32 %gep_int, 2*/
		legup_memset_2_i64_21_gep = legup_memset_2_i64_signed_add_32_0;
end
always @(posedge clk) begin
	/* legup_memset_2_i64: %21*/
	/*   %gep = add i32 %gep_int, 2*/
	if ((cur_state == LEGUP_F_legup_memset_2_i64_BB__21_11)) begin
		legup_memset_2_i64_21_gep_reg <= legup_memset_2_i64_21_gep;
		if (start == 1'b0 && ^(legup_memset_2_i64_21_gep) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_memset_2_i64_21_gep_reg"); $finish; end
	end
end
always @(*) begin
	/* legup_memset_2_i64: %21*/
	/*   %24 = inttoptr i32 %gep to i16**/
		legup_memset_2_i64_21_24 = legup_memset_2_i64_21_gep;
end
always @(posedge clk) begin
	/* legup_memset_2_i64: %21*/
	/*   %24 = inttoptr i32 %gep to i16**/
	if ((cur_state == LEGUP_F_legup_memset_2_i64_BB__21_11)) begin
		legup_memset_2_i64_21_24_reg <= legup_memset_2_i64_21_24;
		if (start == 1'b0 && ^(legup_memset_2_i64_21_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_memset_2_i64_21_24_reg"); $finish; end
	end
end
always @(*) begin
	legup_memset_2_i64_0_1_address_a = 1'd0;
	/* legup_memset_2_i64: %0*/
	/*   store i8* %m, i8** %1, align 4*/
	if ((cur_state == LEGUP_F_legup_memset_2_i64_BB__0_1)) begin
		legup_memset_2_i64_0_1_address_a = (1'd0 >>> 3'd2);
	end
	/* legup_memset_2_i64: %0*/
	/*   %13 = load i8** %1, align 4*/
	if ((cur_state == LEGUP_F_legup_memset_2_i64_BB__0_2)) begin
		legup_memset_2_i64_0_1_address_a = (1'd0 >>> 3'd2);
	end
end
always @(*) begin
	legup_memset_2_i64_0_1_write_enable_a = 1'd0;
	/* legup_memset_2_i64: %0*/
	/*   store i8* %m, i8** %1, align 4*/
	if ((cur_state == LEGUP_F_legup_memset_2_i64_BB__0_1)) begin
		legup_memset_2_i64_0_1_write_enable_a = 1'd1;
	end
	/* legup_memset_2_i64: %0*/
	/*   %13 = load i8** %1, align 4*/
	if ((cur_state == LEGUP_F_legup_memset_2_i64_BB__0_2)) begin
		legup_memset_2_i64_0_1_write_enable_a = 1'd0;
	end
end
always @(*) begin
	legup_memset_2_i64_0_1_in_a = 1'd0;
	/* legup_memset_2_i64: %0*/
	/*   store i8* %m, i8** %1, align 4*/
	if ((cur_state == LEGUP_F_legup_memset_2_i64_BB__0_1)) begin
		legup_memset_2_i64_0_1_in_a = arg_m;
	end
end
always @(*) begin
	legup_memset_2_i64_0_2_address_a = 1'd0;
	/* legup_memset_2_i64: %0*/
	/*   store i8 %c1, i8* %2, align 1*/
	if ((cur_state == LEGUP_F_legup_memset_2_i64_BB__0_1)) begin
		legup_memset_2_i64_0_2_address_a = (1'd0 >>> 3'd0);
	end
	/* legup_memset_2_i64: %0*/
	/*   %4 = load i8* %2, align 1*/
	if ((cur_state == LEGUP_F_legup_memset_2_i64_BB__0_2)) begin
		legup_memset_2_i64_0_2_address_a = (1'd0 >>> 3'd0);
	end
end
always @(*) begin
	legup_memset_2_i64_0_2_write_enable_a = 1'd0;
	/* legup_memset_2_i64: %0*/
	/*   store i8 %c1, i8* %2, align 1*/
	if ((cur_state == LEGUP_F_legup_memset_2_i64_BB__0_1)) begin
		legup_memset_2_i64_0_2_write_enable_a = 1'd1;
	end
	/* legup_memset_2_i64: %0*/
	/*   %4 = load i8* %2, align 1*/
	if ((cur_state == LEGUP_F_legup_memset_2_i64_BB__0_2)) begin
		legup_memset_2_i64_0_2_write_enable_a = 1'd0;
	end
end
always @(*) begin
	legup_memset_2_i64_0_2_in_a = 1'd0;
	/* legup_memset_2_i64: %0*/
	/*   store i8 %c1, i8* %2, align 1*/
	if ((cur_state == LEGUP_F_legup_memset_2_i64_BB__0_1)) begin
		legup_memset_2_i64_0_2_in_a = arg_c1;
	end
end
always @(*) begin
	legup_memset_2_i64_0_3_address_a = 1'd0;
	/* legup_memset_2_i64: %0*/
	/*   store i64 %n, i64* %3, align 8*/
	if ((cur_state == LEGUP_F_legup_memset_2_i64_BB__0_1)) begin
		legup_memset_2_i64_0_3_address_a = (1'd0 >>> 3'd3);
	end
	/* legup_memset_2_i64: %0*/
	/*   %15 = load i64* %3, align 8*/
	if ((cur_state == LEGUP_F_legup_memset_2_i64_BB__0_2)) begin
		legup_memset_2_i64_0_3_address_a = (1'd0 >>> 3'd3);
	end
	/* legup_memset_2_i64: %0*/
	/*   store i64 %16, i64* %3, align 8*/
	if ((cur_state == LEGUP_F_legup_memset_2_i64_BB__0_3)) begin
		legup_memset_2_i64_0_3_address_a = (1'd0 >>> 3'd3);
	end
	/* legup_memset_2_i64: %17*/
	/*   %18 = load i64* %3, align 8*/
	if ((cur_state == LEGUP_F_legup_memset_2_i64_BB__17_7)) begin
		legup_memset_2_i64_0_3_address_a = (1'd0 >>> 3'd3);
	end
	/* legup_memset_2_i64: %17*/
	/*   store i64 %19, i64* %3, align 8*/
	if ((cur_state == LEGUP_F_legup_memset_2_i64_BB__17_8)) begin
		legup_memset_2_i64_0_3_address_a = (1'd0 >>> 3'd3);
	end
end
always @(*) begin
	legup_memset_2_i64_0_3_write_enable_a = 1'd0;
	/* legup_memset_2_i64: %0*/
	/*   store i64 %n, i64* %3, align 8*/
	if ((cur_state == LEGUP_F_legup_memset_2_i64_BB__0_1)) begin
		legup_memset_2_i64_0_3_write_enable_a = 1'd1;
	end
	/* legup_memset_2_i64: %0*/
	/*   %15 = load i64* %3, align 8*/
	if ((cur_state == LEGUP_F_legup_memset_2_i64_BB__0_2)) begin
		legup_memset_2_i64_0_3_write_enable_a = 1'd0;
	end
	/* legup_memset_2_i64: %0*/
	/*   store i64 %16, i64* %3, align 8*/
	if ((cur_state == LEGUP_F_legup_memset_2_i64_BB__0_3)) begin
		legup_memset_2_i64_0_3_write_enable_a = 1'd1;
	end
	/* legup_memset_2_i64: %17*/
	/*   %18 = load i64* %3, align 8*/
	if ((cur_state == LEGUP_F_legup_memset_2_i64_BB__17_7)) begin
		legup_memset_2_i64_0_3_write_enable_a = 1'd0;
	end
	/* legup_memset_2_i64: %17*/
	/*   store i64 %19, i64* %3, align 8*/
	if ((cur_state == LEGUP_F_legup_memset_2_i64_BB__17_8)) begin
		legup_memset_2_i64_0_3_write_enable_a = 1'd1;
	end
end
always @(*) begin
	legup_memset_2_i64_0_3_in_a = 1'd0;
	/* legup_memset_2_i64: %0*/
	/*   store i64 %n, i64* %3, align 8*/
	if ((cur_state == LEGUP_F_legup_memset_2_i64_BB__0_1)) begin
		legup_memset_2_i64_0_3_in_a = arg_n;
	end
	/* legup_memset_2_i64: %0*/
	/*   store i64 %16, i64* %3, align 8*/
	if ((cur_state == LEGUP_F_legup_memset_2_i64_BB__0_3)) begin
		legup_memset_2_i64_0_3_in_a = legup_memset_2_i64_0_16;
	end
	/* legup_memset_2_i64: %17*/
	/*   store i64 %19, i64* %3, align 8*/
	if ((cur_state == LEGUP_F_legup_memset_2_i64_BB__17_8)) begin
		legup_memset_2_i64_0_3_in_a = legup_memset_2_i64_17_19;
	end
end
always @(*) begin
	legup_memset_2_i64_0_c_address_a = 1'd0;
	/* legup_memset_2_i64: %0*/
	/*   store i16 %5, i16* %c, align 2*/
	if ((cur_state == LEGUP_F_legup_memset_2_i64_BB__0_3)) begin
		legup_memset_2_i64_0_c_address_a = (1'd0 >>> 3'd1);
	end
	/* legup_memset_2_i64: %0*/
	/*   %6 = load i16* %c, align 2*/
	if ((cur_state == LEGUP_F_legup_memset_2_i64_BB__0_4)) begin
		legup_memset_2_i64_0_c_address_a = (1'd0 >>> 3'd1);
	end
	/* legup_memset_2_i64: %0*/
	/*   store i16 %12, i16* %c, align 2*/
	if ((cur_state == LEGUP_F_legup_memset_2_i64_BB__0_5)) begin
		legup_memset_2_i64_0_c_address_a = (1'd0 >>> 3'd1);
	end
	/* legup_memset_2_i64: %21*/
	/*   %22 = load i16* %c, align 2*/
	if ((cur_state == LEGUP_F_legup_memset_2_i64_BB__21_10)) begin
		legup_memset_2_i64_0_c_address_a = (1'd0 >>> 3'd1);
	end
end
always @(*) begin
	legup_memset_2_i64_0_c_write_enable_a = 1'd0;
	/* legup_memset_2_i64: %0*/
	/*   store i16 %5, i16* %c, align 2*/
	if ((cur_state == LEGUP_F_legup_memset_2_i64_BB__0_3)) begin
		legup_memset_2_i64_0_c_write_enable_a = 1'd1;
	end
	/* legup_memset_2_i64: %0*/
	/*   %6 = load i16* %c, align 2*/
	if ((cur_state == LEGUP_F_legup_memset_2_i64_BB__0_4)) begin
		legup_memset_2_i64_0_c_write_enable_a = 1'd0;
	end
	/* legup_memset_2_i64: %0*/
	/*   store i16 %12, i16* %c, align 2*/
	if ((cur_state == LEGUP_F_legup_memset_2_i64_BB__0_5)) begin
		legup_memset_2_i64_0_c_write_enable_a = 1'd1;
	end
	/* legup_memset_2_i64: %21*/
	/*   %22 = load i16* %c, align 2*/
	if ((cur_state == LEGUP_F_legup_memset_2_i64_BB__21_10)) begin
		legup_memset_2_i64_0_c_write_enable_a = 1'd0;
	end
end
always @(*) begin
	legup_memset_2_i64_0_c_in_a = 1'd0;
	/* legup_memset_2_i64: %0*/
	/*   store i16 %5, i16* %c, align 2*/
	if ((cur_state == LEGUP_F_legup_memset_2_i64_BB__0_3)) begin
		legup_memset_2_i64_0_c_in_a = legup_memset_2_i64_0_5;
	end
	/* legup_memset_2_i64: %0*/
	/*   store i16 %12, i16* %c, align 2*/
	if ((cur_state == LEGUP_F_legup_memset_2_i64_BB__0_5)) begin
		legup_memset_2_i64_0_c_in_a = legup_memset_2_i64_0_12;
	end
end
always @(*) begin
	legup_memset_2_i64_0_c_address_b = 1'd0;
	/* legup_memset_2_i64: %0*/
	/*   %9 = load i16* %c, align 2*/
	if ((cur_state == LEGUP_F_legup_memset_2_i64_BB__0_4)) begin
		legup_memset_2_i64_0_c_address_b = (1'd0 >>> 3'd1);
	end
end
always @(*) begin
	legup_memset_2_i64_0_c_write_enable_b = 1'd0;
	/* legup_memset_2_i64: %0*/
	/*   %9 = load i16* %c, align 2*/
	if ((cur_state == LEGUP_F_legup_memset_2_i64_BB__0_4)) begin
		legup_memset_2_i64_0_c_write_enable_b = 1'd0;
	end
end
always @(*) begin
	legup_memset_2_i64_0_s_address_a = 1'd0;
	/* legup_memset_2_i64: %0*/
	/*   store i16* %14, i16** %s, align 4*/
	if ((cur_state == LEGUP_F_legup_memset_2_i64_BB__0_3)) begin
		legup_memset_2_i64_0_s_address_a = (1'd0 >>> 3'd2);
	end
	/* legup_memset_2_i64: %21*/
	/*   %23 = load i16** %s, align 4*/
	if ((cur_state == LEGUP_F_legup_memset_2_i64_BB__21_10)) begin
		legup_memset_2_i64_0_s_address_a = (1'd0 >>> 3'd2);
	end
	/* legup_memset_2_i64: %21*/
	/*   store i16 %22, i16* %23, align 2*/
	if ((cur_state == LEGUP_F_legup_memset_2_i64_BB__21_11)) begin
		legup_memset_2_i64_0_s_address_a = (legup_memset_2_i64_21_23 >>> 3'd2);
	end
end
always @(*) begin
	legup_memset_2_i64_0_s_write_enable_a = 1'd0;
	/* legup_memset_2_i64: %0*/
	/*   store i16* %14, i16** %s, align 4*/
	if ((cur_state == LEGUP_F_legup_memset_2_i64_BB__0_3)) begin
		legup_memset_2_i64_0_s_write_enable_a = 1'd1;
	end
	/* legup_memset_2_i64: %21*/
	/*   %23 = load i16** %s, align 4*/
	if ((cur_state == LEGUP_F_legup_memset_2_i64_BB__21_10)) begin
		legup_memset_2_i64_0_s_write_enable_a = 1'd0;
	end
	/* legup_memset_2_i64: %21*/
	/*   store i16 %22, i16* %23, align 2*/
	if ((cur_state == LEGUP_F_legup_memset_2_i64_BB__21_11)) begin
		legup_memset_2_i64_0_s_write_enable_a = 1'd1;
	end
end
always @(*) begin
	legup_memset_2_i64_0_s_in_a = 1'd0;
	/* legup_memset_2_i64: %0*/
	/*   store i16* %14, i16** %s, align 4*/
	if ((cur_state == LEGUP_F_legup_memset_2_i64_BB__0_3)) begin
		legup_memset_2_i64_0_s_in_a = legup_memset_2_i64_0_14;
	end
	/* legup_memset_2_i64: %21*/
	/*   store i16 %22, i16* %23, align 2*/
	if ((cur_state == LEGUP_F_legup_memset_2_i64_BB__21_11)) begin
		legup_memset_2_i64_0_s_in_a = legup_memset_2_i64_21_22;
	end
end
always @(*) begin
	legup_memset_2_i64_0_s_address_b = 1'd0;
	/* legup_memset_2_i64: %21*/
	/*   store i16* %24, i16** %s, align 4*/
	if ((cur_state == LEGUP_F_legup_memset_2_i64_BB__21_11)) begin
		legup_memset_2_i64_0_s_address_b = (1'd0 >>> 3'd2);
	end
end
always @(*) begin
	legup_memset_2_i64_0_s_write_enable_b = 1'd0;
	/* legup_memset_2_i64: %21*/
	/*   store i16* %24, i16** %s, align 4*/
	if ((cur_state == LEGUP_F_legup_memset_2_i64_BB__21_11)) begin
		legup_memset_2_i64_0_s_write_enable_b = 1'd1;
	end
end
always @(*) begin
	legup_memset_2_i64_0_s_in_b = 1'd0;
	/* legup_memset_2_i64: %21*/
	/*   store i16* %24, i16** %s, align 4*/
	if ((cur_state == LEGUP_F_legup_memset_2_i64_BB__21_11)) begin
		legup_memset_2_i64_0_s_in_b = legup_memset_2_i64_21_24;
	end
end
always @(*) begin
	/* legup_memset_2_i64: %17*/
	/*   %19 = add i64 %18, -1*/
		legup_memset_2_i64_signed_add_64_0_op0 = legup_memset_2_i64_17_18;
end
always @(*) begin
	/* legup_memset_2_i64: %17*/
	/*   %19 = add i64 %18, -1*/
if (reset) begin legup_memset_2_i64_signed_add_64_0_op1 = 0; end
		legup_memset_2_i64_signed_add_64_0_op1 = -64'd1;
end
always @(*) begin
	legup_memset_2_i64_signed_add_64_0 = (legup_memset_2_i64_signed_add_64_0_op0 + legup_memset_2_i64_signed_add_64_0_op1);
end
always @(*) begin
	/* legup_memset_2_i64: %21*/
	/*   %gep = add i32 %gep_int, 2*/
		legup_memset_2_i64_signed_add_32_0_op0 = legup_memset_2_i64_21_gep_int;
end
always @(*) begin
	/* legup_memset_2_i64: %21*/
	/*   %gep = add i32 %gep_int, 2*/
if (reset) begin legup_memset_2_i64_signed_add_32_0_op1 = 0; end
		legup_memset_2_i64_signed_add_32_0_op1 = 32'd2;
end
always @(*) begin
	legup_memset_2_i64_signed_add_32_0 = (legup_memset_2_i64_signed_add_32_0_op0 + legup_memset_2_i64_signed_add_32_0_op1);
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		finish <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
	/* legup_memset_2_i64: %25*/
	/*   ret void*/
	if ((cur_state == LEGUP_F_legup_memset_2_i64_BB__25_13)) begin
		finish <= (memory_controller_waitrequest == 1'd0);
		if (start == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
end
always @(*) begin
	memory_controller_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_address_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_write_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_size_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_address_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_write_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_size_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_b = 1'd0;
	end
end

endmodule 
`timescale 1 ns / 1 ns
module main
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_waitrequest,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	return_val
);

parameter [8:0] LEGUP_0 = 9'd0;
parameter [8:0] LEGUP_F_main_BB__0_1 = 9'd1;
parameter [8:0] LEGUP_F_main_BB__1_2 = 9'd2;
parameter [8:0] LEGUP_F_main_BB__1_3 = 9'd3;
parameter [8:0] LEGUP_F_main_BB__1_4 = 9'd4;
parameter [8:0] LEGUP_F_main_BB__1_5 = 9'd5;
parameter [8:0] LEGUP_F_main_BB__6_6 = 9'd6;
parameter [8:0] LEGUP_F_main_BB__8_7 = 9'd7;
parameter [8:0] LEGUP_F_main_BB__8_8 = 9'd8;
parameter [8:0] LEGUP_F_main_BB__8_9 = 9'd9;
parameter [8:0] LEGUP_F_main_BB__12_10 = 9'd10;
parameter [8:0] LEGUP_F_main_BB_gsm_absexiti_11 = 9'd11;
parameter [8:0] LEGUP_F_main_BB__18_12 = 9'd12;
parameter [8:0] LEGUP_F_main_BB__21_13 = 9'd13;
parameter [8:0] LEGUP_F_main_BB__25_14 = 9'd14;
parameter [8:0] LEGUP_F_main_BB__27_15 = 9'd15;
parameter [8:0] LEGUP_F_main_BB__29_16 = 9'd16;
parameter [8:0] LEGUP_F_main_BB__31_17 = 9'd17;
parameter [8:0] LEGUP_F_main_BB__33_18 = 9'd18;
parameter [8:0] LEGUP_F_main_BB__33_19 = 9'd19;
parameter [8:0] LEGUP_F_main_BB__39_20 = 9'd20;
parameter [8:0] LEGUP_F_main_BB__39_21 = 9'd21;
parameter [8:0] LEGUP_F_main_BB__46_22 = 9'd22;
parameter [8:0] LEGUP_F_main_BB__49_23 = 9'd23;
parameter [8:0] LEGUP_F_main_BB__49_24 = 9'd24;
parameter [8:0] LEGUP_F_main_BB__56_25 = 9'd25;
parameter [8:0] LEGUP_F_main_BB__56_26 = 9'd26;
parameter [8:0] LEGUP_F_main_BB__62_27 = 9'd27;
parameter [8:0] LEGUP_F_main_BB_preheader6i_28 = 9'd28;
parameter [8:0] LEGUP_F_main_BB_preheader6splitusi_29 = 9'd29;
parameter [8:0] LEGUP_F_main_BB_preheader6splitusi_30 = 9'd30;
parameter [8:0] LEGUP_F_main_BB_preheader6splitusi_31 = 9'd31;
parameter [8:0] LEGUP_F_main_BB__74_32 = 9'd32;
parameter [8:0] LEGUP_F_main_BB__74_33 = 9'd33;
parameter [8:0] LEGUP_F_main_BB_gsm_mult_rexitusi_34 = 9'd34;
parameter [8:0] LEGUP_F_main_BB_gsm_mult_rexitusi_35 = 9'd35;
parameter [8:0] LEGUP_F_main_BB_gsm_mult_rexiti_36 = 9'd36;
parameter [8:0] LEGUP_F_main_BB_gsm_mult_rexiti_37 = 9'd37;
parameter [8:0] LEGUP_F_main_BB_gsm_mult_rexiti_38 = 9'd38;
parameter [8:0] LEGUP_F_main_BB_gsm_mult_rexiti_39 = 9'd39;
parameter [8:0] LEGUP_F_main_BB_gsm_mult_rexiti_40 = 9'd40;
parameter [8:0] LEGUP_F_main_BB_threadi_41 = 9'd41;
parameter [8:0] LEGUP_F_main_BB_threadi_42 = 9'd42;
parameter [8:0] LEGUP_F_main_BB_threadi_43 = 9'd43;
parameter [8:0] LEGUP_F_main_BB_threadi_44 = 9'd44;
parameter [8:0] LEGUP_F_main_BB_threadi_45 = 9'd45;
parameter [8:0] LEGUP_F_main_BB_threadi_46 = 9'd46;
parameter [8:0] LEGUP_F_main_BB_preheader5i_47 = 9'd47;
parameter [8:0] LEGUP_F_main_BB__187_48 = 9'd48;
parameter [8:0] LEGUP_F_main_BB__187_49 = 9'd49;
parameter [8:0] LEGUP_F_main_BB__187_50 = 9'd50;
parameter [8:0] LEGUP_F_main_BB__187_51 = 9'd51;
parameter [8:0] LEGUP_F_main_BB__187_52 = 9'd52;
parameter [8:0] LEGUP_F_main_BB__187_53 = 9'd53;
parameter [8:0] LEGUP_F_main_BB_preheaderi_54 = 9'd54;
parameter [8:0] LEGUP_F_main_BB_preheaderi_55 = 9'd55;
parameter [8:0] LEGUP_F_main_BB__crit_edgei_56 = 9'd56;
parameter [8:0] LEGUP_F_main_BB__crit_edgei_57 = 9'd57;
parameter [8:0] LEGUP_F_main_BB_Autocorrelationexit_58 = 9'd58;
parameter [8:0] LEGUP_F_main_BB_preheaderi5_59 = 9'd59;
parameter [8:0] LEGUP_F_main_BB_preheaderi5_61 = 9'd61;
parameter [8:0] LEGUP_F_main_BB__251_62 = 9'd62;
parameter [8:0] LEGUP_F_main_BB__253_63 = 9'd63;
parameter [8:0] LEGUP_F_main_BB__255_64 = 9'd64;
parameter [8:0] LEGUP_F_main_BB__257_65 = 9'd65;
parameter [8:0] LEGUP_F_main_BB__259_66 = 9'd66;
parameter [8:0] LEGUP_F_main_BB__261_67 = 9'd67;
parameter [8:0] LEGUP_F_main_BB__261_68 = 9'd68;
parameter [8:0] LEGUP_F_main_BB__267_69 = 9'd69;
parameter [8:0] LEGUP_F_main_BB__267_70 = 9'd70;
parameter [8:0] LEGUP_F_main_BB__274_71 = 9'd71;
parameter [8:0] LEGUP_F_main_BB__277_72 = 9'd72;
parameter [8:0] LEGUP_F_main_BB__277_73 = 9'd73;
parameter [8:0] LEGUP_F_main_BB__284_74 = 9'd74;
parameter [8:0] LEGUP_F_main_BB__284_75 = 9'd75;
parameter [8:0] LEGUP_F_main_BB_gsm_normexiti_76 = 9'd76;
parameter [8:0] LEGUP_F_main_BB_gsm_normexiti_77 = 9'd77;
parameter [8:0] LEGUP_F_main_BB_gsm_normexiti_78 = 9'd78;
parameter [8:0] LEGUP_F_main_BB_gsm_normexiti_79 = 9'd79;
parameter [8:0] LEGUP_F_main_BB_gsm_normexiti_80 = 9'd80;
parameter [8:0] LEGUP_F_main_BB_gsm_normexiti_81 = 9'd81;
parameter [8:0] LEGUP_F_main_BB_gsm_normexiti_82 = 9'd82;
parameter [8:0] LEGUP_F_main_BB_gsm_normexiti_83 = 9'd83;
parameter [8:0] LEGUP_F_main_BB_gsm_normexiti_84 = 9'd84;
parameter [8:0] LEGUP_F_main_BB_gsm_normexiti_85 = 9'd85;
parameter [8:0] LEGUP_F_main_BB_gsm_normexiti_86 = 9'd86;
parameter [8:0] LEGUP_F_main_BB_gsm_normexiti_87 = 9'd87;
parameter [8:0] LEGUP_F_main_BB_gsm_normexiti_88 = 9'd88;
parameter [8:0] LEGUP_F_main_BB_gsm_normexiti_89 = 9'd89;
parameter [8:0] LEGUP_F_main_BB_gsm_normexiti_90 = 9'd90;
parameter [8:0] LEGUP_F_main_BB_gsm_normexiti_91 = 9'd91;
parameter [8:0] LEGUP_F_main_BB_gsm_normexiti_92 = 9'd92;
parameter [8:0] LEGUP_F_main_BB__334_93 = 9'd93;
parameter [8:0] LEGUP_F_main_BB__337_94 = 9'd94;
parameter [8:0] LEGUP_F_main_BB_gsm_absexiti9_95 = 9'd95;
parameter [8:0] LEGUP_F_main_BB_gsm_absexiti9_96 = 9'd96;
parameter [8:0] LEGUP_F_main_BB_preheader14i_97 = 9'd97;
parameter [8:0] LEGUP_F_main_BB_lrphi_98 = 9'd98;
parameter [8:0] LEGUP_F_main_BB_lrphi_99 = 9'd99;
parameter [8:0] LEGUP_F_main_BB__346_100 = 9'd100;
parameter [8:0] LEGUP_F_main_BB_preheaderii_101 = 9'd101;
parameter [8:0] LEGUP_F_main_BB__355_102 = 9'd102;
parameter [8:0] LEGUP_F_main_BB_backedge1ii_103 = 9'd103;
parameter [8:0] LEGUP_F_main_BB__361_104 = 9'd104;
parameter [8:0] LEGUP_F_main_BB_backedge2ii_105 = 9'd105;
parameter [8:0] LEGUP_F_main_BB__367_106 = 9'd106;
parameter [8:0] LEGUP_F_main_BB_backedge3ii_107 = 9'd107;
parameter [8:0] LEGUP_F_main_BB__373_108 = 9'd108;
parameter [8:0] LEGUP_F_main_BB_backedge4ii_109 = 9'd109;
parameter [8:0] LEGUP_F_main_BB__379_110 = 9'd110;
parameter [8:0] LEGUP_F_main_BB_backedge5ii_111 = 9'd111;
parameter [8:0] LEGUP_F_main_BB__385_112 = 9'd112;
parameter [8:0] LEGUP_F_main_BB_backedge6ii_113 = 9'd113;
parameter [8:0] LEGUP_F_main_BB__391_114 = 9'd114;
parameter [8:0] LEGUP_F_main_BB_backedge7ii_115 = 9'd115;
parameter [8:0] LEGUP_F_main_BB__397_116 = 9'd116;
parameter [8:0] LEGUP_F_main_BB_backedge8ii_117 = 9'd117;
parameter [8:0] LEGUP_F_main_BB__403_118 = 9'd118;
parameter [8:0] LEGUP_F_main_BB_backedge9ii_119 = 9'd119;
parameter [8:0] LEGUP_F_main_BB__409_120 = 9'd120;
parameter [8:0] LEGUP_F_main_BB_backedge10ii_121 = 9'd121;
parameter [8:0] LEGUP_F_main_BB__415_122 = 9'd122;
parameter [8:0] LEGUP_F_main_BB_backedge11ii_123 = 9'd123;
parameter [8:0] LEGUP_F_main_BB__421_124 = 9'd124;
parameter [8:0] LEGUP_F_main_BB_backedge12ii_125 = 9'd125;
parameter [8:0] LEGUP_F_main_BB__427_126 = 9'd126;
parameter [8:0] LEGUP_F_main_BB_backedge13ii_127 = 9'd127;
parameter [8:0] LEGUP_F_main_BB_gsm_divexiti_128 = 9'd128;
parameter [8:0] LEGUP_F_main_BB_gsm_divexiti_129 = 9'd129;
parameter [8:0] LEGUP_F_main_BB_gsm_divexiti_130 = 9'd130;
parameter [8:0] LEGUP_F_main_BB__436_131 = 9'd131;
parameter [8:0] LEGUP_F_main_BB__436_132 = 9'd132;
parameter [8:0] LEGUP_F_main_BB__438_133 = 9'd133;
parameter [8:0] LEGUP_F_main_BB__441_134 = 9'd134;
parameter [8:0] LEGUP_F_main_BB__441_135 = 9'd135;
parameter [8:0] LEGUP_F_main_BB__445_136 = 9'd136;
parameter [8:0] LEGUP_F_main_BB__445_137 = 9'd137;
parameter [8:0] LEGUP_F_main_BB_gsm_mult_rexit11i_138 = 9'd138;
parameter [8:0] LEGUP_F_main_BB_gsm_mult_rexit11i_139 = 9'd139;
parameter [8:0] LEGUP_F_main_BB__456_140 = 9'd140;
parameter [8:0] LEGUP_F_main_BB_gsm_addexit8i_141 = 9'd141;
parameter [8:0] LEGUP_F_main_BB_gsm_addexit8i_142 = 9'd142;
parameter [8:0] LEGUP_F_main_BB_lrph27i_143 = 9'd143;
parameter [8:0] LEGUP_F_main_BB_lrph27i_144 = 9'd144;
parameter [8:0] LEGUP_F_main_BB_lrph27i_145 = 9'd145;
parameter [8:0] LEGUP_F_main_BB__467_146 = 9'd146;
parameter [8:0] LEGUP_F_main_BB__467_147 = 9'd147;
parameter [8:0] LEGUP_F_main_BB_gsm_mult_rexit6i_148 = 9'd148;
parameter [8:0] LEGUP_F_main_BB_gsm_mult_rexit6i_149 = 9'd149;
parameter [8:0] LEGUP_F_main_BB_gsm_mult_rexit6i_150 = 9'd150;
parameter [8:0] LEGUP_F_main_BB_gsm_mult_rexit6i_151 = 9'd151;
parameter [8:0] LEGUP_F_main_BB__480_152 = 9'd152;
parameter [8:0] LEGUP_F_main_BB_gsm_addexit3i_153 = 9'd153;
parameter [8:0] LEGUP_F_main_BB_gsm_addexit3i_154 = 9'd154;
parameter [8:0] LEGUP_F_main_BB_gsm_addexit3i_155 = 9'd155;
parameter [8:0] LEGUP_F_main_BB_gsm_addexit3i_156 = 9'd156;
parameter [8:0] LEGUP_F_main_BB_gsm_addexit3i_157 = 9'd157;
parameter [8:0] LEGUP_F_main_BB__488_158 = 9'd158;
parameter [8:0] LEGUP_F_main_BB__488_159 = 9'd159;
parameter [8:0] LEGUP_F_main_BB_gsm_mult_rexiti13_160 = 9'd160;
parameter [8:0] LEGUP_F_main_BB__497_161 = 9'd161;
parameter [8:0] LEGUP_F_main_BB_gsm_addexiti_162 = 9'd162;
parameter [8:0] LEGUP_F_main_BB_gsm_addexiti_163 = 9'd163;
parameter [8:0] LEGUP_F_main_BB__crit_edgei14_164 = 9'd164;
parameter [8:0] LEGUP_F_main_BB__crit_edge43i_165 = 9'd165;
parameter [8:0] LEGUP_F_main_BB__crit_edge43i_166 = 9'd166;
parameter [8:0] LEGUP_F_main_BB_Reflection_coefficientsexit_167 = 9'd167;
parameter [8:0] LEGUP_F_main_BB_Reflection_coefficientsexit_168 = 9'd168;
parameter [8:0] LEGUP_F_main_BB_Reflection_coefficientsexit_169 = 9'd169;
parameter [8:0] LEGUP_F_main_BB__506_170 = 9'd170;
parameter [8:0] LEGUP_F_main_BB_gsm_absexitii_171 = 9'd171;
parameter [8:0] LEGUP_F_main_BB__511_172 = 9'd172;
parameter [8:0] LEGUP_F_main_BB__515_173 = 9'd173;
parameter [8:0] LEGUP_F_main_BB__517_174 = 9'd174;
parameter [8:0] LEGUP_F_main_BB_threadii_175 = 9'd175;
parameter [8:0] LEGUP_F_main_BB__522_176 = 9'd176;
parameter [8:0] LEGUP_F_main_BB__522_177 = 9'd177;
parameter [8:0] LEGUP_F_main_BB_Gsm_LPC_Analysisexit_178 = 9'd178;
parameter [8:0] LEGUP_F_main_BB_Gsm_LPC_Analysisexit_179 = 9'd179;
parameter [8:0] LEGUP_F_main_BB_Gsm_LPC_Analysisexit_180 = 9'd180;
parameter [8:0] LEGUP_F_main_BB_Gsm_LPC_Analysisexit_181 = 9'd181;
parameter [8:0] LEGUP_F_main_BB__534_182 = 9'd182;
parameter [8:0] LEGUP_F_main_BB__537_183 = 9'd183;
parameter [8:0] LEGUP_F_main_BB__539_184 = 9'd184;
parameter [8:0] LEGUP_F_main_BB_threadi4_185 = 9'd185;
parameter [8:0] LEGUP_F_main_BB_threadi4_186 = 9'd186;
parameter [8:0] LEGUP_F_main_BB_threadi4_187 = 9'd187;
parameter [8:0] LEGUP_F_main_BB_threadi4_188 = 9'd188;
parameter [8:0] LEGUP_F_main_BB_threadi4_189 = 9'd189;
parameter [8:0] LEGUP_F_main_BB__550_190 = 9'd190;
parameter [8:0] LEGUP_F_main_BB__553_191 = 9'd191;
parameter [8:0] LEGUP_F_main_BB__555_192 = 9'd192;
parameter [8:0] LEGUP_F_main_BB_thread98i_193 = 9'd193;
parameter [8:0] LEGUP_F_main_BB_thread98i_194 = 9'd194;
parameter [8:0] LEGUP_F_main_BB_thread98i_195 = 9'd195;
parameter [8:0] LEGUP_F_main_BB_thread98i_196 = 9'd196;
parameter [8:0] LEGUP_F_main_BB_thread98i_197 = 9'd197;
parameter [8:0] LEGUP_F_main_BB__566_198 = 9'd198;
parameter [8:0] LEGUP_F_main_BB_gsm_addexit29i_199 = 9'd199;
parameter [8:0] LEGUP_F_main_BB_gsm_addexit29threadi_200 = 9'd200;
parameter [8:0] LEGUP_F_main_BB__572_201 = 9'd201;
parameter [8:0] LEGUP_F_main_BB__574_202 = 9'd202;
parameter [8:0] LEGUP_F_main_BB_thread102i_203 = 9'd203;
parameter [8:0] LEGUP_F_main_BB_thread102i_204 = 9'd204;
parameter [8:0] LEGUP_F_main_BB_thread102i_205 = 9'd205;
parameter [8:0] LEGUP_F_main_BB_thread102i_206 = 9'd206;
parameter [8:0] LEGUP_F_main_BB_thread102i_207 = 9'd207;
parameter [8:0] LEGUP_F_main_BB__585_208 = 9'd208;
parameter [8:0] LEGUP_F_main_BB_gsm_addexit25i_209 = 9'd209;
parameter [8:0] LEGUP_F_main_BB_gsm_addexit25threadi_210 = 9'd210;
parameter [8:0] LEGUP_F_main_BB__591_211 = 9'd211;
parameter [8:0] LEGUP_F_main_BB__593_212 = 9'd212;
parameter [8:0] LEGUP_F_main_BB_thread107i_213 = 9'd213;
parameter [8:0] LEGUP_F_main_BB_thread107i_214 = 9'd214;
parameter [8:0] LEGUP_F_main_BB_thread107i_215 = 9'd215;
parameter [8:0] LEGUP_F_main_BB_thread107i_216 = 9'd216;
parameter [8:0] LEGUP_F_main_BB_thread107i_217 = 9'd217;
parameter [8:0] LEGUP_F_main_BB__604_218 = 9'd218;
parameter [8:0] LEGUP_F_main_BB_gsm_addexit21i_219 = 9'd219;
parameter [8:0] LEGUP_F_main_BB_gsm_addexit21threadi_220 = 9'd220;
parameter [8:0] LEGUP_F_main_BB__610_221 = 9'd221;
parameter [8:0] LEGUP_F_main_BB__612_222 = 9'd222;
parameter [8:0] LEGUP_F_main_BB_thread112i_223 = 9'd223;
parameter [8:0] LEGUP_F_main_BB_thread112i_224 = 9'd224;
parameter [8:0] LEGUP_F_main_BB_thread112i_225 = 9'd225;
parameter [8:0] LEGUP_F_main_BB_thread112i_226 = 9'd226;
parameter [8:0] LEGUP_F_main_BB_thread112i_227 = 9'd227;
parameter [8:0] LEGUP_F_main_BB__623_228 = 9'd228;
parameter [8:0] LEGUP_F_main_BB_gsm_addexit17i_229 = 9'd229;
parameter [8:0] LEGUP_F_main_BB_gsm_addexit17threadi_230 = 9'd230;
parameter [8:0] LEGUP_F_main_BB__629_231 = 9'd231;
parameter [8:0] LEGUP_F_main_BB__631_232 = 9'd232;
parameter [8:0] LEGUP_F_main_BB_thread117i_233 = 9'd233;
parameter [8:0] LEGUP_F_main_BB_thread117i_234 = 9'd234;
parameter [8:0] LEGUP_F_main_BB_thread117i_235 = 9'd235;
parameter [8:0] LEGUP_F_main_BB_thread117i_236 = 9'd236;
parameter [8:0] LEGUP_F_main_BB_thread117i_237 = 9'd237;
parameter [8:0] LEGUP_F_main_BB__642_238 = 9'd238;
parameter [8:0] LEGUP_F_main_BB_gsm_addexit13i_239 = 9'd239;
parameter [8:0] LEGUP_F_main_BB_gsm_addexit13threadi_240 = 9'd240;
parameter [8:0] LEGUP_F_main_BB__648_241 = 9'd241;
parameter [8:0] LEGUP_F_main_BB__650_242 = 9'd242;
parameter [8:0] LEGUP_F_main_BB_thread122i_243 = 9'd243;
parameter [8:0] LEGUP_F_main_BB_thread122i_244 = 9'd244;
parameter [8:0] LEGUP_F_main_BB_thread122i_245 = 9'd245;
parameter [8:0] LEGUP_F_main_BB_thread122i_246 = 9'd246;
parameter [8:0] LEGUP_F_main_BB_thread122i_247 = 9'd247;
parameter [8:0] LEGUP_F_main_BB__661_248 = 9'd248;
parameter [8:0] LEGUP_F_main_BB_gsm_addexit9i_249 = 9'd249;
parameter [8:0] LEGUP_F_main_BB_gsm_addexit9threadi_250 = 9'd250;
parameter [8:0] LEGUP_F_main_BB__667_251 = 9'd251;
parameter [8:0] LEGUP_F_main_BB__669_252 = 9'd252;
parameter [8:0] LEGUP_F_main_BB_Quantization_and_codingexit_253 = 9'd253;
parameter [8:0] LEGUP_F_main_BB_Quantization_and_codingexit_254 = 9'd254;
parameter [8:0] LEGUP_F_main_BB_preheader_255 = 9'd255;
parameter [8:0] LEGUP_F_main_BB_preheader_256 = 9'd256;
parameter [8:0] LEGUP_F_main_BB__698_257 = 9'd257;
parameter [8:0] LEGUP_F_main_BB__698_258 = 9'd258;
parameter [8:0] LEGUP_F_main_BB__698_259 = 9'd259;
parameter [8:0] LEGUP_F_main_BB__707_260 = 9'd260;
parameter [8:0] LEGUP_F_main_BB__709_261 = 9'd261;
parameter [8:0] LEGUP_F_main_BB__711_262 = 9'd262;
parameter [8:0] tag_offset = 9'd0;
parameter [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tag_addr_offset = {tag_offset, 23'd0};
parameter [8:0] LEGUP_function_call_60 = 9'd60;

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
input  memory_controller_waitrequest;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
output reg [31:0] return_val;
reg [8:0] cur_state;
reg [8:0] next_state;
reg [31:0] main_1_i05;
reg [31:0] main_1_i05_reg;
reg [31:0] main_1_gep_int;
reg [31:0] main_1_gep_int_reg;
reg [31:0] main_1_gep_array;
reg [31:0] main_1_gep_array_reg;
reg [31:0] main_1_gep;
reg [31:0] main_1_gep_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_2;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_2_reg;
reg [15:0] main_1_3;
reg [15:0] main_1_3_reg;
reg [31:0] main_1_gep_int1;
reg [31:0] main_1_gep_int1_reg;
reg [31:0] main_1_gep_array2;
reg [31:0] main_1_gep_array2_reg;
reg [31:0] main_1_gep3;
reg [31:0] main_1_gep3_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_4;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_4_reg;
reg [31:0] main_1_5;
reg [31:0] main_1_5_reg;
reg  main_1_exitcond7;
reg  main_1_exitcond7_reg;
reg [31:0] main_6_gep_int4;
reg [31:0] main_6_gep_int4_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_7;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_7_reg;
reg [15:0] main_8_smax030i;
reg [15:0] main_8_smax030i_reg;
reg [31:0] main_8_k029i;
reg [31:0] main_8_k029i_reg;
reg [31:0] main_8_gep_int5;
reg [31:0] main_8_gep_int5_reg;
reg [31:0] main_8_gep_array6;
reg [31:0] main_8_gep_array6_reg;
reg [31:0] main_8_gep7;
reg [31:0] main_8_gep7_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_8_9;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_8_9_reg;
reg [15:0] main_8_10;
reg [15:0] main_8_10_reg;
reg  main_8_11;
reg  main_8_11_reg;
reg  main_12_13;
reg  main_12_13_reg;
reg [15:0] main_12_14;
reg [15:0] main_12_14_reg;
reg [15:0] main_12_ii;
reg [15:0] main_12_ii_reg;
reg [15:0] main_gsm_absexiti_15;
reg [15:0] main_gsm_absexiti_15_reg;
reg  main_gsm_absexiti_16;
reg  main_gsm_absexiti_16_reg;
reg [15:0] main_gsm_absexiti_smax0i;
reg [15:0] main_gsm_absexiti_smax0i_reg;
reg [31:0] main_gsm_absexiti_17;
reg [31:0] main_gsm_absexiti_17_reg;
reg  main_gsm_absexiti_exitcond40i;
reg  main_gsm_absexiti_exitcond40i_reg;
reg [15:0] main_18_smax0ilcssa;
reg [15:0] main_18_smax0ilcssa_reg;
reg [31:0] main_18_gep_int8;
reg [31:0] main_18_gep_int8_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_18_19;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_18_19_reg;
reg  main_18_20;
reg  main_18_20_reg;
reg [31:0] main_21_22;
reg [31:0] main_21_22_reg;
reg [31:0] main_21_23;
reg [31:0] main_21_23_reg;
reg  main_21_24;
reg  main_21_24_reg;
reg  main_25_26;
reg  main_25_26_reg;
reg [31:0] main_27_28;
reg [31:0] main_27_28_reg;
reg [31:0] main_29_0i1i;
reg [31:0] main_29_0i1i_reg;
reg  main_29_30;
reg  main_29_30_reg;
reg  main_31_32;
reg  main_31_32_reg;
reg [31:0] main_33_34;
reg [31:0] main_33_34_reg;
reg [31:0] main_33_gep_int9;
reg [31:0] main_33_gep_int9_reg;
reg [31:0] main_33_gep10;
reg [31:0] main_33_gep10_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_33_35;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_33_35_reg;
reg [7:0] main_33_36;
reg [7:0] main_33_36_reg;
reg [31:0] main_33_37;
reg [31:0] main_33_37_reg;
reg [31:0] main_33_38;
reg [31:0] main_33_38_reg;
reg [31:0] main_39_40;
reg [31:0] main_39_40_reg;
reg [31:0] main_39_41;
reg [31:0] main_39_41_reg;
reg [31:0] main_39_gep_int11;
reg [31:0] main_39_gep_int11_reg;
reg [31:0] main_39_gep12;
reg [31:0] main_39_gep12_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_39_42;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_39_42_reg;
reg [7:0] main_39_43;
reg [7:0] main_39_43_reg;
reg [31:0] main_39_44;
reg [31:0] main_39_44_reg;
reg [31:0] main_39_45;
reg [31:0] main_39_45_reg;
reg [31:0] main_46_47;
reg [31:0] main_46_47_reg;
reg  main_46_48;
reg  main_46_48_reg;
reg [31:0] main_49_50;
reg [31:0] main_49_50_reg;
reg [31:0] main_49_51;
reg [31:0] main_49_51_reg;
reg [31:0] main_49_gep_int13;
reg [31:0] main_49_gep_int13_reg;
reg [31:0] main_49_gep14;
reg [31:0] main_49_gep14_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_49_52;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_49_52_reg;
reg [7:0] main_49_53;
reg [7:0] main_49_53_reg;
reg [31:0] main_49_54;
reg [31:0] main_49_54_reg;
reg [31:0] main_49_55;
reg [31:0] main_49_55_reg;
reg [31:0] main_56_57;
reg [31:0] main_56_57_reg;
reg [31:0] main_56_gep_int15;
reg [31:0] main_56_gep_int15_reg;
reg [31:0] main_56_gep16;
reg [31:0] main_56_gep16_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_56_58;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_56_58_reg;
reg [7:0] main_56_59;
reg [7:0] main_56_59_reg;
reg [31:0] main_56_60;
reg [31:0] main_56_60_reg;
reg [31:0] main_56_61;
reg [31:0] main_56_61_reg;
reg [31:0] main_62_01ii1;
reg [31:0] main_62_01ii1_reg;
reg [31:0] main_62_63;
reg [31:0] main_62_63_reg;
reg [31:0] main_62_sexti;
reg [31:0] main_62_sexti_reg;
reg [31:0] main_62_phitmpi;
reg [31:0] main_62_phitmpi_reg;
reg  main_62_64;
reg  main_62_64_reg;
reg [31:0] main_62_sextoffi;
reg [31:0] main_62_sextoffi_reg;
reg  main_62_65;
reg  main_62_65_reg;
reg [31:0] main_preheader6i_66;
reg [31:0] main_preheader6i_66_reg;
reg [31:0] main_preheader6i_67;
reg [31:0] main_preheader6i_67_reg;
reg [15:0] main_preheader6i_68;
reg [15:0] main_preheader6i_68_reg;
reg  main_preheader6i_69;
reg  main_preheader6i_69_reg;
reg [31:0] main_preheader6i_sext4i;
reg [31:0] main_preheader6i_sext4i_reg;
reg [31:0] main_preheader6i_70;
reg [31:0] main_preheader6i_70_reg;
reg [31:0] main_preheader6splitusi_k128usi;
reg [31:0] main_preheader6splitusi_k128usi_reg;
reg [31:0] main_preheader6splitusi_gep_int17;
reg [31:0] main_preheader6splitusi_gep_int17_reg;
reg [31:0] main_preheader6splitusi_gep_array18;
reg [31:0] main_preheader6splitusi_gep_array18_reg;
reg [31:0] main_preheader6splitusi_gep19;
reg [31:0] main_preheader6splitusi_gep19_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader6splitusi_71;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader6splitusi_71_reg;
reg [15:0] main_preheader6splitusi_72;
reg [15:0] main_preheader6splitusi_72_reg;
reg  main_preheader6splitusi_73;
reg  main_preheader6splitusi_73_reg;
reg [31:0] main_74_75;
reg [31:0] main_74_75_reg;
reg [31:0] main_74_76;
reg [31:0] main_74_76_reg;
reg [31:0] main_74_77;
reg [31:0] main_74_77_reg;
reg [31:0] main_74_78;
reg [31:0] main_74_78_reg;
reg [31:0] main_74_79;
reg [31:0] main_74_79_reg;
reg [15:0] main_74_80;
reg [15:0] main_74_80_reg;
reg [15:0] main_gsm_mult_rexitusi_0iusi;
reg [15:0] main_gsm_mult_rexitusi_0iusi_reg;
reg [31:0] main_gsm_mult_rexitusi_81;
reg [31:0] main_gsm_mult_rexitusi_81_reg;
reg  main_gsm_mult_rexitusi_exitcond41i;
reg  main_gsm_mult_rexitusi_exitcond41i_reg;
reg [31:0] main_gsm_mult_rexiti_k128i;
reg [31:0] main_gsm_mult_rexiti_k128i_reg;
reg [31:0] main_gsm_mult_rexiti_gep_int20;
reg [31:0] main_gsm_mult_rexiti_gep_int20_reg;
reg [31:0] main_gsm_mult_rexiti_gep_array21;
reg [31:0] main_gsm_mult_rexiti_gep_array21_reg;
reg [31:0] main_gsm_mult_rexiti_gep22;
reg [31:0] main_gsm_mult_rexiti_gep22_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_gsm_mult_rexiti_82;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_gsm_mult_rexiti_82_reg;
reg [15:0] main_gsm_mult_rexiti_83;
reg [15:0] main_gsm_mult_rexiti_83_reg;
reg [31:0] main_gsm_mult_rexiti_84;
reg [31:0] main_gsm_mult_rexiti_84_reg;
reg [31:0] main_gsm_mult_rexiti_85;
reg [31:0] main_gsm_mult_rexiti_85_reg;
reg [31:0] main_gsm_mult_rexiti_86;
reg [31:0] main_gsm_mult_rexiti_86_reg;
reg [31:0] main_gsm_mult_rexiti_87;
reg [31:0] main_gsm_mult_rexiti_87_reg;
reg [31:0] main_gsm_mult_rexiti_88;
reg [31:0] main_gsm_mult_rexiti_88_reg;
reg [15:0] main_gsm_mult_rexiti_89;
reg [15:0] main_gsm_mult_rexiti_89_reg;
reg [31:0] main_gsm_mult_rexiti_90;
reg [31:0] main_gsm_mult_rexiti_90_reg;
reg  main_gsm_mult_rexiti_exitcond39i;
reg  main_gsm_mult_rexiti_exitcond39i_reg;
reg  main_threadi_91;
reg  main_threadi_91_reg;
reg [31:0] main_threadi_scalauto03i;
reg [31:0] main_threadi_scalauto03i_reg;
reg [15:0] main_threadi_92;
reg [15:0] main_threadi_92_reg;
reg [31:0] main_threadi_93;
reg [31:0] main_threadi_93_reg;
reg [31:0] main_threadi_94;
reg [31:0] main_threadi_94_reg;
reg [31:0] main_threadi_gep_int23;
reg [31:0] main_threadi_gep_int23_reg;
reg [31:0] main_threadi_gep24;
reg [31:0] main_threadi_gep24_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_threadi_95;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_threadi_95_reg;
reg [15:0] main_threadi_96;
reg [15:0] main_threadi_96_reg;
reg [31:0] main_threadi_97;
reg [31:0] main_threadi_97_reg;
reg [31:0] main_threadi_98;
reg [31:0] main_threadi_98_reg;
reg [31:0] main_threadi_99;
reg [31:0] main_threadi_99_reg;
reg [31:0] main_threadi_gep_int25;
reg [31:0] main_threadi_gep_int25_reg;
reg [31:0] main_threadi_gep26;
reg [31:0] main_threadi_gep26_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_threadi_100;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_threadi_100_reg;
reg [15:0] main_threadi_101;
reg [15:0] main_threadi_101_reg;
reg [31:0] main_threadi_102;
reg [31:0] main_threadi_102_reg;
reg [31:0] main_threadi_103;
reg [31:0] main_threadi_103_reg;
reg [31:0] main_threadi_104;
reg [31:0] main_threadi_104_reg;
reg [31:0] main_threadi_105;
reg [31:0] main_threadi_105_reg;
reg [31:0] main_threadi_106;
reg [31:0] main_threadi_106_reg;
reg [31:0] main_threadi_107;
reg [31:0] main_threadi_107_reg;
reg [31:0] main_threadi_gep_int27;
reg [31:0] main_threadi_gep_int27_reg;
reg [31:0] main_threadi_gep28;
reg [31:0] main_threadi_gep28_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_threadi_108;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_threadi_108_reg;
reg [15:0] main_threadi_109;
reg [15:0] main_threadi_109_reg;
reg [31:0] main_threadi_110;
reg [31:0] main_threadi_110_reg;
reg [31:0] main_threadi_111;
reg [31:0] main_threadi_111_reg;
reg [31:0] main_threadi_112;
reg [31:0] main_threadi_112_reg;
reg [31:0] main_threadi_113;
reg [31:0] main_threadi_113_reg;
reg [31:0] main_threadi_114;
reg [31:0] main_threadi_114_reg;
reg [31:0] main_threadi_115;
reg [31:0] main_threadi_115_reg;
reg [31:0] main_threadi_116;
reg [31:0] main_threadi_116_reg;
reg [31:0] main_threadi_117;
reg [31:0] main_threadi_117_reg;
reg [31:0] main_threadi_gep_int29;
reg [31:0] main_threadi_gep_int29_reg;
reg [31:0] main_threadi_gep30;
reg [31:0] main_threadi_gep30_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_threadi_118;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_threadi_118_reg;
reg [15:0] main_threadi_119;
reg [15:0] main_threadi_119_reg;
reg [31:0] main_threadi_120;
reg [31:0] main_threadi_120_reg;
reg [31:0] main_threadi_121;
reg [31:0] main_threadi_121_reg;
reg [31:0] main_threadi_122;
reg [31:0] main_threadi_122_reg;
reg [31:0] main_threadi_123;
reg [31:0] main_threadi_123_reg;
reg [31:0] main_threadi_124;
reg [31:0] main_threadi_124_reg;
reg [31:0] main_threadi_125;
reg [31:0] main_threadi_125_reg;
reg [31:0] main_threadi_126;
reg [31:0] main_threadi_126_reg;
reg [31:0] main_threadi_127;
reg [31:0] main_threadi_127_reg;
reg [31:0] main_threadi_128;
reg [31:0] main_threadi_128_reg;
reg [31:0] main_threadi_129;
reg [31:0] main_threadi_129_reg;
reg [31:0] main_threadi_gep_int31;
reg [31:0] main_threadi_gep_int31_reg;
reg [31:0] main_threadi_gep32;
reg [31:0] main_threadi_gep32_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_threadi_130;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_threadi_130_reg;
reg [15:0] main_threadi_131;
reg [15:0] main_threadi_131_reg;
reg [31:0] main_threadi_132;
reg [31:0] main_threadi_132_reg;
reg [31:0] main_threadi_133;
reg [31:0] main_threadi_133_reg;
reg [31:0] main_threadi_134;
reg [31:0] main_threadi_134_reg;
reg [31:0] main_threadi_135;
reg [31:0] main_threadi_135_reg;
reg [31:0] main_threadi_136;
reg [31:0] main_threadi_136_reg;
reg [31:0] main_threadi_137;
reg [31:0] main_threadi_137_reg;
reg [31:0] main_threadi_138;
reg [31:0] main_threadi_138_reg;
reg [31:0] main_threadi_139;
reg [31:0] main_threadi_139_reg;
reg [31:0] main_threadi_140;
reg [31:0] main_threadi_140_reg;
reg [31:0] main_threadi_141;
reg [31:0] main_threadi_141_reg;
reg [31:0] main_threadi_142;
reg [31:0] main_threadi_142_reg;
reg [31:0] main_threadi_143;
reg [31:0] main_threadi_143_reg;
reg [31:0] main_threadi_gep_int33;
reg [31:0] main_threadi_gep_int33_reg;
reg [31:0] main_threadi_gep34;
reg [31:0] main_threadi_gep34_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_threadi_144;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_threadi_144_reg;
reg [15:0] main_threadi_145;
reg [15:0] main_threadi_145_reg;
reg [31:0] main_threadi_146;
reg [31:0] main_threadi_146_reg;
reg [31:0] main_threadi_147;
reg [31:0] main_threadi_147_reg;
reg [31:0] main_threadi_148;
reg [31:0] main_threadi_148_reg;
reg [31:0] main_threadi_149;
reg [31:0] main_threadi_149_reg;
reg [31:0] main_threadi_150;
reg [31:0] main_threadi_150_reg;
reg [31:0] main_threadi_151;
reg [31:0] main_threadi_151_reg;
reg [31:0] main_threadi_152;
reg [31:0] main_threadi_152_reg;
reg [31:0] main_threadi_153;
reg [31:0] main_threadi_153_reg;
reg [31:0] main_threadi_154;
reg [31:0] main_threadi_154_reg;
reg [31:0] main_threadi_155;
reg [31:0] main_threadi_155_reg;
reg [31:0] main_threadi_156;
reg [31:0] main_threadi_156_reg;
reg [31:0] main_threadi_157;
reg [31:0] main_threadi_157_reg;
reg [31:0] main_threadi_158;
reg [31:0] main_threadi_158_reg;
reg [31:0] main_threadi_159;
reg [31:0] main_threadi_159_reg;
reg [31:0] main_threadi_gep_int35;
reg [31:0] main_threadi_gep_int35_reg;
reg [31:0] main_threadi_gep36;
reg [31:0] main_threadi_gep36_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_threadi_160;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_threadi_160_reg;
reg [15:0] main_threadi_161;
reg [15:0] main_threadi_161_reg;
reg [31:0] main_threadi_162;
reg [31:0] main_threadi_162_reg;
reg [31:0] main_threadi_163;
reg [31:0] main_threadi_163_reg;
reg [31:0] main_threadi_164;
reg [31:0] main_threadi_164_reg;
reg [31:0] main_threadi_165;
reg [31:0] main_threadi_165_reg;
reg [31:0] main_threadi_166;
reg [31:0] main_threadi_166_reg;
reg [31:0] main_threadi_167;
reg [31:0] main_threadi_167_reg;
reg [31:0] main_threadi_168;
reg [31:0] main_threadi_168_reg;
reg [31:0] main_threadi_169;
reg [31:0] main_threadi_169_reg;
reg [31:0] main_threadi_170;
reg [31:0] main_threadi_170_reg;
reg [31:0] main_threadi_171;
reg [31:0] main_threadi_171_reg;
reg [31:0] main_threadi_172;
reg [31:0] main_threadi_172_reg;
reg [31:0] main_threadi_173;
reg [31:0] main_threadi_173_reg;
reg [31:0] main_threadi_174;
reg [31:0] main_threadi_174_reg;
reg [31:0] main_threadi_175;
reg [31:0] main_threadi_175_reg;
reg [31:0] main_threadi_176;
reg [31:0] main_threadi_176_reg;
reg [31:0] main_threadi_177;
reg [31:0] main_threadi_177_reg;
reg [31:0] main_preheader5i_lcssa13;
reg [31:0] main_preheader5i_lcssa13_reg;
reg [31:0] main_preheader5i_lcssa12;
reg [31:0] main_preheader5i_lcssa12_reg;
reg [31:0] main_preheader5i_lcssa11;
reg [31:0] main_preheader5i_lcssa11_reg;
reg [31:0] main_preheader5i_lcssa10;
reg [31:0] main_preheader5i_lcssa10_reg;
reg [31:0] main_preheader5i_lcssa9;
reg [31:0] main_preheader5i_lcssa9_reg;
reg [31:0] main_preheader5i_lcssa8;
reg [31:0] main_preheader5i_lcssa8_reg;
reg [31:0] main_preheader5i_lcssa7;
reg [31:0] main_preheader5i_lcssa7_reg;
reg [31:0] main_preheader5i_lcssa6;
reg [31:0] main_preheader5i_lcssa6_reg;
reg [31:0] main_preheader5i_lcssa5;
reg [31:0] main_preheader5i_lcssa5_reg;
reg [31:0] main_preheader5i_178;
reg [31:0] main_preheader5i_178_reg;
reg [31:0] main_preheader5i_179;
reg [31:0] main_preheader5i_179_reg;
reg [31:0] main_preheader5i_180;
reg [31:0] main_preheader5i_180_reg;
reg [31:0] main_preheader5i_181;
reg [31:0] main_preheader5i_181_reg;
reg [31:0] main_preheader5i_182;
reg [31:0] main_preheader5i_182_reg;
reg [31:0] main_preheader5i_183;
reg [31:0] main_preheader5i_183_reg;
reg [31:0] main_preheader5i_184;
reg [31:0] main_preheader5i_184_reg;
reg [31:0] main_preheader5i_185;
reg [31:0] main_preheader5i_185_reg;
reg [31:0] main_preheader5i_186;
reg [31:0] main_preheader5i_186_reg;
reg [15:0] main_187_188;
reg [15:0] main_187_188_reg;
reg [31:0] main_187_189;
reg [31:0] main_187_189_reg;
reg [31:0] main_187_190;
reg [31:0] main_187_190_reg;
reg [31:0] main_187_191;
reg [31:0] main_187_191_reg;
reg [31:0] main_187_192;
reg [31:0] main_187_192_reg;
reg [31:0] main_187_193;
reg [31:0] main_187_193_reg;
reg [31:0] main_187_194;
reg [31:0] main_187_194_reg;
reg [31:0] main_187_195;
reg [31:0] main_187_195_reg;
reg [31:0] main_187_196;
reg [31:0] main_187_196_reg;
reg [31:0] main_187_197;
reg [31:0] main_187_197_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_187_sp011i;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_187_sp011i_reg;
reg [31:0] main_187_i010i;
reg [31:0] main_187_i010i_reg;
reg [31:0] main_187_gep_int37;
reg [31:0] main_187_gep_int37_reg;
reg [31:0] main_187_gep38;
reg [31:0] main_187_gep38_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_187_198;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_187_198_reg;
reg [15:0] main_187_199;
reg [15:0] main_187_199_reg;
reg [31:0] main_187_200;
reg [31:0] main_187_200_reg;
reg [31:0] main_187_201;
reg [31:0] main_187_201_reg;
reg [31:0] main_187_202;
reg [31:0] main_187_202_reg;
reg [31:0] main_187_203;
reg [31:0] main_187_203_reg;
reg [31:0] main_187_204;
reg [31:0] main_187_204_reg;
reg [31:0] main_187_205;
reg [31:0] main_187_205_reg;
reg [31:0] main_187_gep_int39;
reg [31:0] main_187_gep_int39_reg;
reg [31:0] main_187_gep40;
reg [31:0] main_187_gep40_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_187_206;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_187_206_reg;
reg [15:0] main_187_207;
reg [15:0] main_187_207_reg;
reg [31:0] main_187_208;
reg [31:0] main_187_208_reg;
reg [31:0] main_187_209;
reg [31:0] main_187_209_reg;
reg [31:0] main_187_210;
reg [31:0] main_187_210_reg;
reg [31:0] main_187_gep_int41;
reg [31:0] main_187_gep_int41_reg;
reg [31:0] main_187_gep42;
reg [31:0] main_187_gep42_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_187_211;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_187_211_reg;
reg [15:0] main_187_212;
reg [15:0] main_187_212_reg;
reg [31:0] main_187_213;
reg [31:0] main_187_213_reg;
reg [31:0] main_187_214;
reg [31:0] main_187_214_reg;
reg [31:0] main_187_215;
reg [31:0] main_187_215_reg;
reg [31:0] main_187_gep_int43;
reg [31:0] main_187_gep_int43_reg;
reg [31:0] main_187_gep44;
reg [31:0] main_187_gep44_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_187_216;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_187_216_reg;
reg [15:0] main_187_217;
reg [15:0] main_187_217_reg;
reg [31:0] main_187_218;
reg [31:0] main_187_218_reg;
reg [31:0] main_187_219;
reg [31:0] main_187_219_reg;
reg [31:0] main_187_220;
reg [31:0] main_187_220_reg;
reg [31:0] main_187_gep_int45;
reg [31:0] main_187_gep_int45_reg;
reg [31:0] main_187_gep46;
reg [31:0] main_187_gep46_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_187_221;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_187_221_reg;
reg [15:0] main_187_222;
reg [15:0] main_187_222_reg;
reg [31:0] main_187_223;
reg [31:0] main_187_223_reg;
reg [31:0] main_187_224;
reg [31:0] main_187_224_reg;
reg [31:0] main_187_225;
reg [31:0] main_187_225_reg;
reg [31:0] main_187_gep_int47;
reg [31:0] main_187_gep_int47_reg;
reg [31:0] main_187_gep48;
reg [31:0] main_187_gep48_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_187_226;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_187_226_reg;
reg [15:0] main_187_227;
reg [15:0] main_187_227_reg;
reg [31:0] main_187_228;
reg [31:0] main_187_228_reg;
reg [31:0] main_187_229;
reg [31:0] main_187_229_reg;
reg [31:0] main_187_230;
reg [31:0] main_187_230_reg;
reg [31:0] main_187_gep_int49;
reg [31:0] main_187_gep_int49_reg;
reg [31:0] main_187_gep50;
reg [31:0] main_187_gep50_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_187_231;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_187_231_reg;
reg [15:0] main_187_232;
reg [15:0] main_187_232_reg;
reg [31:0] main_187_233;
reg [31:0] main_187_233_reg;
reg [31:0] main_187_234;
reg [31:0] main_187_234_reg;
reg [31:0] main_187_235;
reg [31:0] main_187_235_reg;
reg [31:0] main_187_gep_int51;
reg [31:0] main_187_gep_int51_reg;
reg [31:0] main_187_gep52;
reg [31:0] main_187_gep52_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_187_236;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_187_236_reg;
reg [15:0] main_187_237;
reg [15:0] main_187_237_reg;
reg [31:0] main_187_238;
reg [31:0] main_187_238_reg;
reg [31:0] main_187_239;
reg [31:0] main_187_239_reg;
reg [31:0] main_187_240;
reg [31:0] main_187_240_reg;
reg [31:0] main_187_241;
reg [31:0] main_187_241_reg;
reg  main_187_exitcondi;
reg  main_187_exitcondi_reg;
reg [15:0] main_preheaderi_242;
reg [15:0] main_preheaderi_242_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderi_08i;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderi_08i_reg;
reg [31:0] main_preheaderi_k47i;
reg [31:0] main_preheaderi_k47i_reg;
reg [31:0] main_preheaderi_gep_int53;
reg [31:0] main_preheaderi_gep_int53_reg;
reg [31:0] main_preheaderi_gep54;
reg [31:0] main_preheaderi_gep54_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderi_243;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderi_243_reg;
reg [31:0] main_preheaderi_244;
reg [31:0] main_preheaderi_244_reg;
reg [31:0] main_preheaderi_245;
reg [31:0] main_preheaderi_245_reg;
reg [15:0] main_preheaderi_246;
reg [15:0] main_preheaderi_246_reg;
reg  main_preheaderi_247;
reg  main_preheaderi_247_reg;
reg [31:0] main__crit_edgei_248;
reg [31:0] main__crit_edgei_248_reg;
reg [15:0] main__crit_edgei_prei;
reg [15:0] main__crit_edgei_prei_reg;
reg  main_Autocorrelationexit_249;
reg  main_Autocorrelationexit_249_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderi5_250;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderi5_250_reg;
reg  main_251_252;
reg  main_251_252_reg;
reg  main_253_254;
reg  main_253_254_reg;
reg [31:0] main_255_256;
reg [31:0] main_255_256_reg;
reg [31:0] main_257_0ii;
reg [31:0] main_257_0ii_reg;
reg  main_257_258;
reg  main_257_258_reg;
reg  main_259_260;
reg  main_259_260_reg;
reg [31:0] main_261_262;
reg [31:0] main_261_262_reg;
reg [31:0] main_261_gep_int69;
reg [31:0] main_261_gep_int69_reg;
reg [31:0] main_261_gep70;
reg [31:0] main_261_gep70_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_261_263;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_261_263_reg;
reg [7:0] main_261_264;
reg [7:0] main_261_264_reg;
reg [31:0] main_261_265;
reg [31:0] main_261_265_reg;
reg [31:0] main_261_266;
reg [31:0] main_261_266_reg;
reg [31:0] main_267_268;
reg [31:0] main_267_268_reg;
reg [31:0] main_267_269;
reg [31:0] main_267_269_reg;
reg [31:0] main_267_gep_int71;
reg [31:0] main_267_gep_int71_reg;
reg [31:0] main_267_gep72;
reg [31:0] main_267_gep72_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_267_270;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_267_270_reg;
reg [7:0] main_267_271;
reg [7:0] main_267_271_reg;
reg [31:0] main_267_272;
reg [31:0] main_267_272_reg;
reg [31:0] main_267_273;
reg [31:0] main_267_273_reg;
reg [31:0] main_274_275;
reg [31:0] main_274_275_reg;
reg  main_274_276;
reg  main_274_276_reg;
reg [31:0] main_277_278;
reg [31:0] main_277_278_reg;
reg [31:0] main_277_279;
reg [31:0] main_277_279_reg;
reg [31:0] main_277_gep_int73;
reg [31:0] main_277_gep_int73_reg;
reg [31:0] main_277_gep74;
reg [31:0] main_277_gep74_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_277_280;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_277_280_reg;
reg [7:0] main_277_281;
reg [7:0] main_277_281_reg;
reg [31:0] main_277_282;
reg [31:0] main_277_282_reg;
reg [31:0] main_277_283;
reg [31:0] main_277_283_reg;
reg [31:0] main_284_285;
reg [31:0] main_284_285_reg;
reg [31:0] main_284_gep_int75;
reg [31:0] main_284_gep_int75_reg;
reg [31:0] main_284_gep76;
reg [31:0] main_284_gep76_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_284_286;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_284_286_reg;
reg [7:0] main_284_287;
reg [7:0] main_284_287_reg;
reg [31:0] main_284_288;
reg [31:0] main_284_288_reg;
reg [31:0] main_284_289;
reg [31:0] main_284_289_reg;
reg [31:0] main_gsm_normexiti_01ii6;
reg [31:0] main_gsm_normexiti_01ii6_reg;
reg [31:0] main_gsm_normexiti_sexti7;
reg [31:0] main_gsm_normexiti_sexti7_reg;
reg [31:0] main_gsm_normexiti_290;
reg [31:0] main_gsm_normexiti_290_reg;
reg [31:0] main_gsm_normexiti_291;
reg [31:0] main_gsm_normexiti_291_reg;
reg [31:0] main_gsm_normexiti_292;
reg [31:0] main_gsm_normexiti_292_reg;
reg [15:0] main_gsm_normexiti_293;
reg [15:0] main_gsm_normexiti_293_reg;
reg [31:0] main_gsm_normexiti_294;
reg [31:0] main_gsm_normexiti_294_reg;
reg [31:0] main_gsm_normexiti_295;
reg [31:0] main_gsm_normexiti_295_reg;
reg [15:0] main_gsm_normexiti_296;
reg [15:0] main_gsm_normexiti_296_reg;
reg [31:0] main_gsm_normexiti_297;
reg [31:0] main_gsm_normexiti_297_reg;
reg [31:0] main_gsm_normexiti_298;
reg [31:0] main_gsm_normexiti_298_reg;
reg [15:0] main_gsm_normexiti_299;
reg [15:0] main_gsm_normexiti_299_reg;
reg [31:0] main_gsm_normexiti_300;
reg [31:0] main_gsm_normexiti_300_reg;
reg [31:0] main_gsm_normexiti_301;
reg [31:0] main_gsm_normexiti_301_reg;
reg [15:0] main_gsm_normexiti_302;
reg [15:0] main_gsm_normexiti_302_reg;
reg [31:0] main_gsm_normexiti_303;
reg [31:0] main_gsm_normexiti_303_reg;
reg [31:0] main_gsm_normexiti_304;
reg [31:0] main_gsm_normexiti_304_reg;
reg [15:0] main_gsm_normexiti_305;
reg [15:0] main_gsm_normexiti_305_reg;
reg [31:0] main_gsm_normexiti_306;
reg [31:0] main_gsm_normexiti_306_reg;
reg [31:0] main_gsm_normexiti_307;
reg [31:0] main_gsm_normexiti_307_reg;
reg [15:0] main_gsm_normexiti_308;
reg [15:0] main_gsm_normexiti_308_reg;
reg [31:0] main_gsm_normexiti_309;
reg [31:0] main_gsm_normexiti_309_reg;
reg [31:0] main_gsm_normexiti_310;
reg [31:0] main_gsm_normexiti_310_reg;
reg [15:0] main_gsm_normexiti_311;
reg [15:0] main_gsm_normexiti_311_reg;
reg [31:0] main_gsm_normexiti_312;
reg [31:0] main_gsm_normexiti_312_reg;
reg [31:0] main_gsm_normexiti_313;
reg [31:0] main_gsm_normexiti_313_reg;
reg [15:0] main_gsm_normexiti_314;
reg [15:0] main_gsm_normexiti_314_reg;
reg [31:0] main_gsm_normexiti_315;
reg [31:0] main_gsm_normexiti_315_reg;
reg [31:0] main_gsm_normexiti_316;
reg [31:0] main_gsm_normexiti_316_reg;
reg [15:0] main_gsm_normexiti_317;
reg [15:0] main_gsm_normexiti_317_reg;
reg [31:0] main_gsm_normexiti_gep_int77;
reg [31:0] main_gsm_normexiti_gep_int77_reg;
reg [31:0] main_gsm_normexiti_gep78;
reg [31:0] main_gsm_normexiti_gep78_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_gsm_normexiti_318;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_gsm_normexiti_318_reg;
reg [31:0] main_gsm_normexiti_gep_int79;
reg [31:0] main_gsm_normexiti_gep_int79_reg;
reg [31:0] main_gsm_normexiti_gep80;
reg [31:0] main_gsm_normexiti_gep80_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_gsm_normexiti_319;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_gsm_normexiti_319_reg;
reg [31:0] main_gsm_normexiti_gep_int81;
reg [31:0] main_gsm_normexiti_gep_int81_reg;
reg [31:0] main_gsm_normexiti_gep82;
reg [31:0] main_gsm_normexiti_gep82_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_gsm_normexiti_320;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_gsm_normexiti_320_reg;
reg [31:0] main_gsm_normexiti_gep_int83;
reg [31:0] main_gsm_normexiti_gep_int83_reg;
reg [31:0] main_gsm_normexiti_gep84;
reg [31:0] main_gsm_normexiti_gep84_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_gsm_normexiti_321;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_gsm_normexiti_321_reg;
reg [31:0] main_gsm_normexiti_gep_int85;
reg [31:0] main_gsm_normexiti_gep_int85_reg;
reg [31:0] main_gsm_normexiti_gep86;
reg [31:0] main_gsm_normexiti_gep86_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_gsm_normexiti_322;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_gsm_normexiti_322_reg;
reg [31:0] main_gsm_normexiti_gep_int87;
reg [31:0] main_gsm_normexiti_gep_int87_reg;
reg [31:0] main_gsm_normexiti_gep88;
reg [31:0] main_gsm_normexiti_gep88_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_gsm_normexiti_323;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_gsm_normexiti_323_reg;
reg [31:0] main_gsm_normexiti_gep_int89;
reg [31:0] main_gsm_normexiti_gep_int89_reg;
reg [31:0] main_gsm_normexiti_gep90;
reg [31:0] main_gsm_normexiti_gep90_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_gsm_normexiti_324;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_gsm_normexiti_324_reg;
reg [31:0] main_gsm_normexiti_gep_int91;
reg [31:0] main_gsm_normexiti_gep_int91_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_gsm_normexiti_325;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_gsm_normexiti_325_reg;
reg [31:0] main_gsm_normexiti_gep_int92;
reg [31:0] main_gsm_normexiti_gep_int92_reg;
reg [31:0] main_gsm_normexiti_gep93;
reg [31:0] main_gsm_normexiti_gep93_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_gsm_normexiti_326;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_gsm_normexiti_326_reg;
reg [31:0] main_gsm_normexiti_gep_int94;
reg [31:0] main_gsm_normexiti_gep_int94_reg;
reg [31:0] main_gsm_normexiti_gep95;
reg [31:0] main_gsm_normexiti_gep95_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_gsm_normexiti_327;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_gsm_normexiti_327_reg;
reg [31:0] main_gsm_normexiti_gep_int96;
reg [31:0] main_gsm_normexiti_gep_int96_reg;
reg [31:0] main_gsm_normexiti_gep97;
reg [31:0] main_gsm_normexiti_gep97_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_gsm_normexiti_328;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_gsm_normexiti_328_reg;
reg [31:0] main_gsm_normexiti_gep_int98;
reg [31:0] main_gsm_normexiti_gep_int98_reg;
reg [31:0] main_gsm_normexiti_gep99;
reg [31:0] main_gsm_normexiti_gep99_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_gsm_normexiti_329;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_gsm_normexiti_329_reg;
reg [31:0] main_gsm_normexiti_gep_int100;
reg [31:0] main_gsm_normexiti_gep_int100_reg;
reg [31:0] main_gsm_normexiti_gep101;
reg [31:0] main_gsm_normexiti_gep101_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_gsm_normexiti_330;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_gsm_normexiti_330_reg;
reg [31:0] main_gsm_normexiti_gep_int102;
reg [31:0] main_gsm_normexiti_gep_int102_reg;
reg [31:0] main_gsm_normexiti_gep103;
reg [31:0] main_gsm_normexiti_gep103_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_gsm_normexiti_331;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_gsm_normexiti_331_reg;
reg [31:0] main_gsm_normexiti_gep_int104;
reg [31:0] main_gsm_normexiti_gep_int104_reg;
reg [31:0] main_gsm_normexiti_gep105;
reg [31:0] main_gsm_normexiti_gep105_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_gsm_normexiti_332;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_gsm_normexiti_332_reg;
reg [31:0] main_gsm_normexiti_gep_int106;
reg [31:0] main_gsm_normexiti_gep_int106_reg;
reg [31:0] main_gsm_normexiti_gep107;
reg [31:0] main_gsm_normexiti_gep107_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_gsm_normexiti_333;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_gsm_normexiti_333_reg;
reg [15:0] main_334_335;
reg [15:0] main_334_335_reg;
reg [31:0] main_334_indvarsivi;
reg [31:0] main_334_indvarsivi_reg;
reg [31:0] main_334_n029i;
reg [31:0] main_334_n029i_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_334_128i;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_334_128i_reg;
reg  main_334_336;
reg  main_334_336_reg;
reg  main_337_338;
reg  main_337_338_reg;
reg [15:0] main_337_339;
reg [15:0] main_337_339_reg;
reg [15:0] main_337_ii8;
reg [15:0] main_337_ii8_reg;
reg [15:0] main_gsm_absexiti9_340;
reg [15:0] main_gsm_absexiti9_340_reg;
reg [15:0] main_gsm_absexiti9_341;
reg [15:0] main_gsm_absexiti9_341_reg;
reg  main_gsm_absexiti9_342;
reg  main_gsm_absexiti9_342_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader14i_128ilcssa;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader14i_128ilcssa_reg;
reg [31:0] main_preheader14i_n029ilcssa;
reg [31:0] main_preheader14i_n029ilcssa_reg;
reg  main_preheader14i_343;
reg  main_preheader14i_343_reg;
reg [31:0] main_lrphi_i425i;
reg [31:0] main_lrphi_i425i_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrphi_224i;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrphi_224i_reg;
reg [31:0] main_lrphi_gep_int108;
reg [31:0] main_lrphi_gep_int108_reg;
reg [31:0] main_lrphi_gep109;
reg [31:0] main_lrphi_gep109_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrphi_344;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrphi_344_reg;
reg [31:0] main_lrphi_345;
reg [31:0] main_lrphi_345_reg;
reg  main_lrphi_exitcondi10;
reg  main_lrphi_exitcondi10_reg;
reg [31:0] main_346_347;
reg [31:0] main_346_347_reg;
reg  main_346_348;
reg  main_346_348_reg;
reg [31:0] main_preheaderii_349;
reg [31:0] main_preheaderii_349_reg;
reg [31:0] main_preheaderii_350;
reg [31:0] main_preheaderii_350_reg;
reg  main_preheaderii_351;
reg  main_preheaderii_351_reg;
reg [31:0] main_preheaderii_352;
reg [31:0] main_preheaderii_352_reg;
reg [31:0] main_preheaderii_i1i;
reg [31:0] main_preheaderii_i1i_reg;
reg [15:0] main_preheaderii_3ii;
reg [15:0] main_preheaderii_3ii_reg;
reg [31:0] main_preheaderii_353;
reg [31:0] main_preheaderii_353_reg;
reg  main_preheaderii_354;
reg  main_preheaderii_354_reg;
reg [31:0] main_355_356;
reg [31:0] main_355_356_reg;
reg [15:0] main_355_357;
reg [15:0] main_355_357_reg;
reg [31:0] main_backedge1ii_L_num0be1ii;
reg [31:0] main_backedge1ii_L_num0be1ii_reg;
reg [15:0] main_backedge1ii_div0be1ii;
reg [15:0] main_backedge1ii_div0be1ii_reg;
reg [15:0] main_backedge1ii_358;
reg [15:0] main_backedge1ii_358_reg;
reg [31:0] main_backedge1ii_359;
reg [31:0] main_backedge1ii_359_reg;
reg  main_backedge1ii_360;
reg  main_backedge1ii_360_reg;
reg [31:0] main_361_362;
reg [31:0] main_361_362_reg;
reg [15:0] main_361_363;
reg [15:0] main_361_363_reg;
reg [31:0] main_backedge2ii_L_num0be2ii;
reg [31:0] main_backedge2ii_L_num0be2ii_reg;
reg [15:0] main_backedge2ii_div0be2ii;
reg [15:0] main_backedge2ii_div0be2ii_reg;
reg [15:0] main_backedge2ii_364;
reg [15:0] main_backedge2ii_364_reg;
reg [31:0] main_backedge2ii_365;
reg [31:0] main_backedge2ii_365_reg;
reg  main_backedge2ii_366;
reg  main_backedge2ii_366_reg;
reg [31:0] main_367_368;
reg [31:0] main_367_368_reg;
reg [15:0] main_367_369;
reg [15:0] main_367_369_reg;
reg [31:0] main_backedge3ii_L_num0be3ii;
reg [31:0] main_backedge3ii_L_num0be3ii_reg;
reg [15:0] main_backedge3ii_div0be3ii;
reg [15:0] main_backedge3ii_div0be3ii_reg;
reg [15:0] main_backedge3ii_370;
reg [15:0] main_backedge3ii_370_reg;
reg [31:0] main_backedge3ii_371;
reg [31:0] main_backedge3ii_371_reg;
reg  main_backedge3ii_372;
reg  main_backedge3ii_372_reg;
reg [31:0] main_373_374;
reg [31:0] main_373_374_reg;
reg [15:0] main_373_375;
reg [15:0] main_373_375_reg;
reg [31:0] main_backedge4ii_L_num0be4ii;
reg [31:0] main_backedge4ii_L_num0be4ii_reg;
reg [15:0] main_backedge4ii_div0be4ii;
reg [15:0] main_backedge4ii_div0be4ii_reg;
reg [15:0] main_backedge4ii_376;
reg [15:0] main_backedge4ii_376_reg;
reg [31:0] main_backedge4ii_377;
reg [31:0] main_backedge4ii_377_reg;
reg  main_backedge4ii_378;
reg  main_backedge4ii_378_reg;
reg [31:0] main_379_380;
reg [31:0] main_379_380_reg;
reg [15:0] main_379_381;
reg [15:0] main_379_381_reg;
reg [31:0] main_backedge5ii_L_num0be5ii;
reg [31:0] main_backedge5ii_L_num0be5ii_reg;
reg [15:0] main_backedge5ii_div0be5ii;
reg [15:0] main_backedge5ii_div0be5ii_reg;
reg [15:0] main_backedge5ii_382;
reg [15:0] main_backedge5ii_382_reg;
reg [31:0] main_backedge5ii_383;
reg [31:0] main_backedge5ii_383_reg;
reg  main_backedge5ii_384;
reg  main_backedge5ii_384_reg;
reg [31:0] main_385_386;
reg [31:0] main_385_386_reg;
reg [15:0] main_385_387;
reg [15:0] main_385_387_reg;
reg [31:0] main_backedge6ii_L_num0be6ii;
reg [31:0] main_backedge6ii_L_num0be6ii_reg;
reg [15:0] main_backedge6ii_div0be6ii;
reg [15:0] main_backedge6ii_div0be6ii_reg;
reg [15:0] main_backedge6ii_388;
reg [15:0] main_backedge6ii_388_reg;
reg [31:0] main_backedge6ii_389;
reg [31:0] main_backedge6ii_389_reg;
reg  main_backedge6ii_390;
reg  main_backedge6ii_390_reg;
reg [31:0] main_391_392;
reg [31:0] main_391_392_reg;
reg [15:0] main_391_393;
reg [15:0] main_391_393_reg;
reg [31:0] main_backedge7ii_L_num0be7ii;
reg [31:0] main_backedge7ii_L_num0be7ii_reg;
reg [15:0] main_backedge7ii_div0be7ii;
reg [15:0] main_backedge7ii_div0be7ii_reg;
reg [15:0] main_backedge7ii_394;
reg [15:0] main_backedge7ii_394_reg;
reg [31:0] main_backedge7ii_395;
reg [31:0] main_backedge7ii_395_reg;
reg  main_backedge7ii_396;
reg  main_backedge7ii_396_reg;
reg [31:0] main_397_398;
reg [31:0] main_397_398_reg;
reg [15:0] main_397_399;
reg [15:0] main_397_399_reg;
reg [31:0] main_backedge8ii_L_num0be8ii;
reg [31:0] main_backedge8ii_L_num0be8ii_reg;
reg [15:0] main_backedge8ii_div0be8ii;
reg [15:0] main_backedge8ii_div0be8ii_reg;
reg [15:0] main_backedge8ii_400;
reg [15:0] main_backedge8ii_400_reg;
reg [31:0] main_backedge8ii_401;
reg [31:0] main_backedge8ii_401_reg;
reg  main_backedge8ii_402;
reg  main_backedge8ii_402_reg;
reg [31:0] main_403_404;
reg [31:0] main_403_404_reg;
reg [15:0] main_403_405;
reg [15:0] main_403_405_reg;
reg [31:0] main_backedge9ii_L_num0be9ii;
reg [31:0] main_backedge9ii_L_num0be9ii_reg;
reg [15:0] main_backedge9ii_div0be9ii;
reg [15:0] main_backedge9ii_div0be9ii_reg;
reg [15:0] main_backedge9ii_406;
reg [15:0] main_backedge9ii_406_reg;
reg [31:0] main_backedge9ii_407;
reg [31:0] main_backedge9ii_407_reg;
reg  main_backedge9ii_408;
reg  main_backedge9ii_408_reg;
reg [31:0] main_409_410;
reg [31:0] main_409_410_reg;
reg [15:0] main_409_411;
reg [15:0] main_409_411_reg;
reg [31:0] main_backedge10ii_L_num0be10ii;
reg [31:0] main_backedge10ii_L_num0be10ii_reg;
reg [15:0] main_backedge10ii_div0be10ii;
reg [15:0] main_backedge10ii_div0be10ii_reg;
reg [15:0] main_backedge10ii_412;
reg [15:0] main_backedge10ii_412_reg;
reg [31:0] main_backedge10ii_413;
reg [31:0] main_backedge10ii_413_reg;
reg  main_backedge10ii_414;
reg  main_backedge10ii_414_reg;
reg [31:0] main_415_416;
reg [31:0] main_415_416_reg;
reg [15:0] main_415_417;
reg [15:0] main_415_417_reg;
reg [31:0] main_backedge11ii_L_num0be11ii;
reg [31:0] main_backedge11ii_L_num0be11ii_reg;
reg [15:0] main_backedge11ii_div0be11ii;
reg [15:0] main_backedge11ii_div0be11ii_reg;
reg [15:0] main_backedge11ii_418;
reg [15:0] main_backedge11ii_418_reg;
reg [31:0] main_backedge11ii_419;
reg [31:0] main_backedge11ii_419_reg;
reg  main_backedge11ii_420;
reg  main_backedge11ii_420_reg;
reg [31:0] main_421_422;
reg [31:0] main_421_422_reg;
reg [15:0] main_421_423;
reg [15:0] main_421_423_reg;
reg [31:0] main_backedge12ii_L_num0be12ii;
reg [31:0] main_backedge12ii_L_num0be12ii_reg;
reg [15:0] main_backedge12ii_div0be12ii;
reg [15:0] main_backedge12ii_div0be12ii_reg;
reg [15:0] main_backedge12ii_424;
reg [15:0] main_backedge12ii_424_reg;
reg [31:0] main_backedge12ii_425;
reg [31:0] main_backedge12ii_425_reg;
reg  main_backedge12ii_426;
reg  main_backedge12ii_426_reg;
reg [31:0] main_427_428;
reg [31:0] main_427_428_reg;
reg [15:0] main_427_429;
reg [15:0] main_427_429_reg;
reg [31:0] main_backedge13ii_L_num0be13ii;
reg [31:0] main_backedge13ii_L_num0be13ii_reg;
reg [15:0] main_backedge13ii_div0be13ii;
reg [15:0] main_backedge13ii_div0be13ii_reg;
reg [15:0] main_backedge13ii_430;
reg [15:0] main_backedge13ii_430_reg;
reg [31:0] main_backedge13ii_431;
reg [31:0] main_backedge13ii_431_reg;
reg  main_backedge13ii_notii;
reg  main_backedge13ii_notii_reg;
reg [15:0] main_backedge13ii_432;
reg [15:0] main_backedge13ii_432_reg;
reg [15:0] main_backedge13ii_4ii;
reg [15:0] main_backedge13ii_4ii_reg;
reg [15:0] main_gsm_divexiti_433;
reg [15:0] main_gsm_divexiti_433_reg;
reg [15:0] main_gsm_divexiti_434;
reg [15:0] main_gsm_divexiti_434_reg;
reg  main_gsm_divexiti_435;
reg  main_gsm_divexiti_435_reg;
reg [15:0] main_436_437;
reg [15:0] main_436_437_reg;
reg [15:0] main_438_439;
reg [15:0] main_438_439_reg;
reg  main_438_440;
reg  main_438_440_reg;
reg [15:0] main_441_442;
reg [15:0] main_441_442_reg;
reg  main_441_443;
reg  main_441_443_reg;
reg  main_441_444;
reg  main_441_444_reg;
reg  main_441_orcondi9i;
reg  main_441_orcondi9i_reg;
reg [31:0] main_445_446;
reg [31:0] main_445_446_reg;
reg [31:0] main_445_447;
reg [31:0] main_445_447_reg;
reg [31:0] main_445_448;
reg [31:0] main_445_448_reg;
reg [31:0] main_445_449;
reg [31:0] main_445_449_reg;
reg [31:0] main_445_450;
reg [31:0] main_445_450_reg;
reg [31:0] main_445_451;
reg [31:0] main_445_451_reg;
reg [31:0] main_445_phitmpi11;
reg [31:0] main_445_phitmpi11_reg;
reg [31:0] main_gsm_mult_rexit11i_0i10i;
reg [31:0] main_gsm_mult_rexit11i_0i10i_reg;
reg [15:0] main_gsm_mult_rexit11i_452;
reg [15:0] main_gsm_mult_rexit11i_452_reg;
reg [31:0] main_gsm_mult_rexit11i_453;
reg [31:0] main_gsm_mult_rexit11i_453_reg;
reg [31:0] main_gsm_mult_rexit11i_454;
reg [31:0] main_gsm_mult_rexit11i_454_reg;
reg  main_gsm_mult_rexit11i_455;
reg  main_gsm_mult_rexit11i_455_reg;
reg  main_456_457;
reg  main_456_457_reg;
reg [15:0] main_456_458;
reg [15:0] main_456_458_reg;
reg [15:0] main_456_phitmpi7i;
reg [15:0] main_456_phitmpi7i_reg;
reg [15:0] main_gsm_addexit8i_459;
reg [15:0] main_gsm_addexit8i_459_reg;
reg [31:0] main_gsm_addexit8i_460;
reg [31:0] main_gsm_addexit8i_460_reg;
reg  main_gsm_addexit8i_461;
reg  main_gsm_addexit8i_461_reg;
reg [31:0] main_lrph27i_m026i;
reg [31:0] main_lrph27i_m026i_reg;
reg [31:0] main_lrph27i_gep_int110;
reg [31:0] main_lrph27i_gep_int110_reg;
reg [31:0] main_lrph27i_gep_array111;
reg [31:0] main_lrph27i_gep_array111_reg;
reg [31:0] main_lrph27i_gep112;
reg [31:0] main_lrph27i_gep112_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrph27i_462;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrph27i_462_reg;
reg [15:0] main_lrph27i_463;
reg [15:0] main_lrph27i_463_reg;
reg [15:0] main_lrph27i_464;
reg [15:0] main_lrph27i_464_reg;
reg  main_lrph27i_465;
reg  main_lrph27i_465_reg;
reg  main_lrph27i_466;
reg  main_lrph27i_466_reg;
reg  main_lrph27i_orcondi4i;
reg  main_lrph27i_orcondi4i_reg;
reg [31:0] main_467_468;
reg [31:0] main_467_468_reg;
reg [31:0] main_467_469;
reg [31:0] main_467_469_reg;
reg [31:0] main_467_470;
reg [31:0] main_467_470_reg;
reg [31:0] main_467_471;
reg [31:0] main_467_471_reg;
reg [31:0] main_467_472;
reg [31:0] main_467_472_reg;
reg [31:0] main_467_473;
reg [31:0] main_467_473_reg;
reg [31:0] main_467_phitmp12i;
reg [31:0] main_467_phitmp12i_reg;
reg [31:0] main_gsm_mult_rexit6i_0i5i;
reg [31:0] main_gsm_mult_rexit6i_0i5i_reg;
reg [31:0] main_gsm_mult_rexit6i_474;
reg [31:0] main_gsm_mult_rexit6i_474_reg;
reg [31:0] main_gsm_mult_rexit6i_gep_int113;
reg [31:0] main_gsm_mult_rexit6i_gep_int113_reg;
reg [31:0] main_gsm_mult_rexit6i_gep_array114;
reg [31:0] main_gsm_mult_rexit6i_gep_array114_reg;
reg [31:0] main_gsm_mult_rexit6i_gep115;
reg [31:0] main_gsm_mult_rexit6i_gep115_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_gsm_mult_rexit6i_475;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_gsm_mult_rexit6i_475_reg;
reg [15:0] main_gsm_mult_rexit6i_476;
reg [15:0] main_gsm_mult_rexit6i_476_reg;
reg [31:0] main_gsm_mult_rexit6i_477;
reg [31:0] main_gsm_mult_rexit6i_477_reg;
reg [31:0] main_gsm_mult_rexit6i_478;
reg [31:0] main_gsm_mult_rexit6i_478_reg;
reg  main_gsm_mult_rexit6i_479;
reg  main_gsm_mult_rexit6i_479_reg;
reg  main_480_481;
reg  main_480_481_reg;
reg [15:0] main_480_482;
reg [15:0] main_480_482_reg;
reg [15:0] main_480_phitmpi2i;
reg [15:0] main_480_phitmpi2i_reg;
reg [15:0] main_gsm_addexit3i_483;
reg [15:0] main_gsm_addexit3i_483_reg;
reg [31:0] main_gsm_addexit3i_gep_int116;
reg [31:0] main_gsm_addexit3i_gep_int116_reg;
reg [31:0] main_gsm_addexit3i_gep_array117;
reg [31:0] main_gsm_addexit3i_gep_array117_reg;
reg [31:0] main_gsm_addexit3i_gep118;
reg [31:0] main_gsm_addexit3i_gep118_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_gsm_addexit3i_484;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_gsm_addexit3i_484_reg;
reg [15:0] main_gsm_addexit3i_485;
reg [15:0] main_gsm_addexit3i_485_reg;
reg  main_gsm_addexit3i_486;
reg  main_gsm_addexit3i_486_reg;
reg  main_gsm_addexit3i_487;
reg  main_gsm_addexit3i_487_reg;
reg  main_gsm_addexit3i_orcondii;
reg  main_gsm_addexit3i_orcondii_reg;
reg [31:0] main_488_489;
reg [31:0] main_488_489_reg;
reg [31:0] main_488_490;
reg [31:0] main_488_490_reg;
reg [31:0] main_488_491;
reg [31:0] main_488_491_reg;
reg [31:0] main_488_492;
reg [31:0] main_488_492_reg;
reg [31:0] main_488_493;
reg [31:0] main_488_493_reg;
reg [31:0] main_488_phitmp13i;
reg [31:0] main_488_phitmp13i_reg;
reg [31:0] main_gsm_mult_rexiti13_0i1i12;
reg [31:0] main_gsm_mult_rexiti13_0i1i12_reg;
reg [31:0] main_gsm_mult_rexiti13_494;
reg [31:0] main_gsm_mult_rexiti13_494_reg;
reg [31:0] main_gsm_mult_rexiti13_495;
reg [31:0] main_gsm_mult_rexiti13_495_reg;
reg  main_gsm_mult_rexiti13_496;
reg  main_gsm_mult_rexiti13_496_reg;
reg  main_497_498;
reg  main_497_498_reg;
reg [15:0] main_497_499;
reg [15:0] main_497_499_reg;
reg [15:0] main_497_phitmpii;
reg [15:0] main_497_phitmpii_reg;
reg [15:0] main_gsm_addexiti_500;
reg [15:0] main_gsm_addexiti_500_reg;
reg  main_gsm_addexiti_exitcond36i;
reg  main_gsm_addexiti_exitcond36i_reg;
reg [31:0] main__crit_edgei14_501;
reg [31:0] main__crit_edgei14_501_reg;
reg  main__crit_edgei14_502;
reg  main__crit_edgei14_502_reg;
reg [31:0] main__crit_edge43i_indvarsivnexti;
reg [31:0] main__crit_edge43i_indvarsivnexti_reg;
reg [31:0] main__crit_edge43i_gep_int119;
reg [31:0] main__crit_edge43i_gep_int119_reg;
reg [31:0] main__crit_edge43i_gep120;
reg [31:0] main__crit_edge43i_gep120_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__crit_edge43i_503;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__crit_edge43i_503_reg;
reg [15:0] main__crit_edge43i_prei15;
reg [15:0] main__crit_edge43i_prei15_reg;
reg [31:0] main_Reflection_coefficientsexit_i02ii;
reg [31:0] main_Reflection_coefficientsexit_i02ii_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_Reflection_coefficientsexit_01ii;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_Reflection_coefficientsexit_01ii_reg;
reg [15:0] main_Reflection_coefficientsexit_504;
reg [15:0] main_Reflection_coefficientsexit_504_reg;
reg  main_Reflection_coefficientsexit_505;
reg  main_Reflection_coefficientsexit_505_reg;
reg  main_506_507;
reg  main_506_507_reg;
reg [15:0] main_506_508;
reg [15:0] main_506_508_reg;
reg [15:0] main_gsm_absexitii_509;
reg [15:0] main_gsm_absexitii_509_reg;
reg  main_gsm_absexitii_510;
reg  main_gsm_absexitii_510_reg;
reg [31:0] main_511_512;
reg [31:0] main_511_512_reg;
reg [31:0] main_511_513;
reg [31:0] main_511_513_reg;
reg [15:0] main_511_514;
reg [15:0] main_511_514_reg;
reg  main_515_516;
reg  main_515_516_reg;
reg [15:0] main_517_518;
reg [15:0] main_517_518_reg;
reg [15:0] main_threadii_519;
reg [15:0] main_threadii_519_reg;
reg [15:0] main_threadii_520;
reg [15:0] main_threadii_520_reg;
reg [15:0] main_threadii_521;
reg [15:0] main_threadii_521_reg;
reg [15:0] main_522_temp0ii;
reg [15:0] main_522_temp0ii_reg;
reg [15:0] main_522_523;
reg [15:0] main_522_523_reg;
reg [15:0] main_522_524;
reg [15:0] main_522_524_reg;
reg [31:0] main_522_525;
reg [31:0] main_522_525_reg;
reg [31:0] main_522_gep_int121;
reg [31:0] main_522_gep_int121_reg;
reg [31:0] main_522_gep122;
reg [31:0] main_522_gep122_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_522_526;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_522_526_reg;
reg  main_522_exitcondii;
reg  main_522_exitcondii_reg;
reg [15:0] main_Gsm_LPC_Analysisexit_527;
reg [15:0] main_Gsm_LPC_Analysisexit_527_reg;
reg [31:0] main_Gsm_LPC_Analysisexit_528;
reg [31:0] main_Gsm_LPC_Analysisexit_528_reg;
reg [31:0] main_Gsm_LPC_Analysisexit_529;
reg [31:0] main_Gsm_LPC_Analysisexit_529_reg;
reg [31:0] main_Gsm_LPC_Analysisexit_530;
reg [31:0] main_Gsm_LPC_Analysisexit_530_reg;
reg [31:0] main_Gsm_LPC_Analysisexit_531;
reg [31:0] main_Gsm_LPC_Analysisexit_531_reg;
reg [31:0] main_Gsm_LPC_Analysisexit_532;
reg [31:0] main_Gsm_LPC_Analysisexit_532_reg;
reg  main_Gsm_LPC_Analysisexit_533;
reg  main_Gsm_LPC_Analysisexit_533_reg;
reg  main_534_535;
reg  main_534_535_reg;
reg [31:0] main_534_sexti2;
reg [31:0] main_534_sexti2_reg;
reg [31:0] main_534_opi;
reg [31:0] main_534_opi_reg;
reg  main_534_536;
reg  main_534_536_reg;
reg  main_534_orcondi;
reg  main_534_orcondi_reg;
reg  main_537_538;
reg  main_537_538_reg;
reg [31:0] main_539_540;
reg [31:0] main_539_540_reg;
reg [15:0] main_539_phitmpi3;
reg [15:0] main_539_phitmpi3_reg;
reg [15:0] main_threadi4_541;
reg [15:0] main_threadi4_541_reg;
reg [31:0] main_threadi4_gep_int123;
reg [31:0] main_threadi4_gep_int123_reg;
reg [31:0] main_threadi4_gep124;
reg [31:0] main_threadi4_gep124_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_threadi4_542;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_threadi4_542_reg;
reg [15:0] main_threadi4_543;
reg [15:0] main_threadi4_543_reg;
reg [31:0] main_threadi4_544;
reg [31:0] main_threadi4_544_reg;
reg [31:0] main_threadi4_545;
reg [31:0] main_threadi4_545_reg;
reg [31:0] main_threadi4_546;
reg [31:0] main_threadi4_546_reg;
reg [31:0] main_threadi4_547;
reg [31:0] main_threadi4_547_reg;
reg [31:0] main_threadi4_548;
reg [31:0] main_threadi4_548_reg;
reg  main_threadi4_549;
reg  main_threadi4_549_reg;
reg  main_550_551;
reg  main_550_551_reg;
reg [31:0] main_550_sext38i;
reg [31:0] main_550_sext38i_reg;
reg [31:0] main_550_op40i;
reg [31:0] main_550_op40i_reg;
reg  main_550_552;
reg  main_550_552_reg;
reg  main_550_orcond164i;
reg  main_550_orcond164i_reg;
reg  main_553_554;
reg  main_553_554_reg;
reg [31:0] main_555_556;
reg [31:0] main_555_556_reg;
reg [15:0] main_555_phitmp1i;
reg [15:0] main_555_phitmp1i_reg;
reg [15:0] main_thread98i_557;
reg [15:0] main_thread98i_557_reg;
reg [31:0] main_thread98i_gep_int125;
reg [31:0] main_thread98i_gep_int125_reg;
reg [31:0] main_thread98i_gep126;
reg [31:0] main_thread98i_gep126_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_thread98i_558;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_thread98i_558_reg;
reg [15:0] main_thread98i_559;
reg [15:0] main_thread98i_559_reg;
reg [31:0] main_thread98i_560;
reg [31:0] main_thread98i_560_reg;
reg [31:0] main_thread98i_561;
reg [31:0] main_thread98i_561_reg;
reg [31:0] main_thread98i_562;
reg [31:0] main_thread98i_562_reg;
reg [31:0] main_thread98i_563;
reg [31:0] main_thread98i_563_reg;
reg [31:0] main_thread98i_564;
reg [31:0] main_thread98i_564_reg;
reg  main_thread98i_565;
reg  main_thread98i_565_reg;
reg  main_566_567;
reg  main_566_567_reg;
reg [31:0] main_566_sext43i;
reg [31:0] main_566_sext43i_reg;
reg [31:0] main_566_568;
reg [31:0] main_566_568_reg;
reg [31:0] main_566_op45i;
reg [31:0] main_566_op45i_reg;
reg  main_gsm_addexit29i_569;
reg  main_gsm_addexit29i_569_reg;
reg  main_gsm_addexit29threadi_570;
reg  main_gsm_addexit29threadi_570_reg;
reg [31:0] main_gsm_addexit29threadi_sext47i;
reg [31:0] main_gsm_addexit29threadi_sext47i_reg;
reg [31:0] main_gsm_addexit29threadi_op49i;
reg [31:0] main_gsm_addexit29threadi_op49i_reg;
reg  main_gsm_addexit29threadi_571;
reg  main_gsm_addexit29threadi_571_reg;
reg  main_gsm_addexit29threadi_orcond165i;
reg  main_gsm_addexit29threadi_orcond165i_reg;
reg  main_572_573;
reg  main_572_573_reg;
reg [31:0] main_574_575;
reg [31:0] main_574_575_reg;
reg [15:0] main_574_phitmp2i;
reg [15:0] main_574_phitmp2i_reg;
reg [15:0] main_thread102i_576;
reg [15:0] main_thread102i_576_reg;
reg [31:0] main_thread102i_gep_int127;
reg [31:0] main_thread102i_gep_int127_reg;
reg [31:0] main_thread102i_gep128;
reg [31:0] main_thread102i_gep128_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_thread102i_577;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_thread102i_577_reg;
reg [15:0] main_thread102i_578;
reg [15:0] main_thread102i_578_reg;
reg [31:0] main_thread102i_579;
reg [31:0] main_thread102i_579_reg;
reg [31:0] main_thread102i_580;
reg [31:0] main_thread102i_580_reg;
reg [31:0] main_thread102i_581;
reg [31:0] main_thread102i_581_reg;
reg [31:0] main_thread102i_582;
reg [31:0] main_thread102i_582_reg;
reg [31:0] main_thread102i_583;
reg [31:0] main_thread102i_583_reg;
reg  main_thread102i_584;
reg  main_thread102i_584_reg;
reg  main_585_586;
reg  main_585_586_reg;
reg [31:0] main_585_sext52i;
reg [31:0] main_585_sext52i_reg;
reg [31:0] main_585_587;
reg [31:0] main_585_587_reg;
reg [31:0] main_585_op54i;
reg [31:0] main_585_op54i_reg;
reg  main_gsm_addexit25i_588;
reg  main_gsm_addexit25i_588_reg;
reg  main_gsm_addexit25threadi_589;
reg  main_gsm_addexit25threadi_589_reg;
reg [31:0] main_gsm_addexit25threadi_sext56i;
reg [31:0] main_gsm_addexit25threadi_sext56i_reg;
reg [31:0] main_gsm_addexit25threadi_op58i;
reg [31:0] main_gsm_addexit25threadi_op58i_reg;
reg  main_gsm_addexit25threadi_590;
reg  main_gsm_addexit25threadi_590_reg;
reg  main_gsm_addexit25threadi_orcond166i;
reg  main_gsm_addexit25threadi_orcond166i_reg;
reg  main_591_592;
reg  main_591_592_reg;
reg [31:0] main_593_594;
reg [31:0] main_593_594_reg;
reg [15:0] main_593_phitmp3i;
reg [15:0] main_593_phitmp3i_reg;
reg [15:0] main_thread107i_595;
reg [15:0] main_thread107i_595_reg;
reg [31:0] main_thread107i_gep_int129;
reg [31:0] main_thread107i_gep_int129_reg;
reg [31:0] main_thread107i_gep130;
reg [31:0] main_thread107i_gep130_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_thread107i_596;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_thread107i_596_reg;
reg [15:0] main_thread107i_597;
reg [15:0] main_thread107i_597_reg;
reg [31:0] main_thread107i_598;
reg [31:0] main_thread107i_598_reg;
reg [31:0] main_thread107i_599;
reg [31:0] main_thread107i_599_reg;
reg [31:0] main_thread107i_600;
reg [31:0] main_thread107i_600_reg;
reg [31:0] main_thread107i_601;
reg [31:0] main_thread107i_601_reg;
reg [31:0] main_thread107i_602;
reg [31:0] main_thread107i_602_reg;
reg  main_thread107i_603;
reg  main_thread107i_603_reg;
reg  main_604_605;
reg  main_604_605_reg;
reg [31:0] main_604_sext61i;
reg [31:0] main_604_sext61i_reg;
reg [31:0] main_604_606;
reg [31:0] main_604_606_reg;
reg [31:0] main_604_op63i;
reg [31:0] main_604_op63i_reg;
reg  main_gsm_addexit21i_607;
reg  main_gsm_addexit21i_607_reg;
reg  main_gsm_addexit21threadi_608;
reg  main_gsm_addexit21threadi_608_reg;
reg [31:0] main_gsm_addexit21threadi_sext65i;
reg [31:0] main_gsm_addexit21threadi_sext65i_reg;
reg [31:0] main_gsm_addexit21threadi_op67i;
reg [31:0] main_gsm_addexit21threadi_op67i_reg;
reg  main_gsm_addexit21threadi_609;
reg  main_gsm_addexit21threadi_609_reg;
reg  main_gsm_addexit21threadi_orcond167i;
reg  main_gsm_addexit21threadi_orcond167i_reg;
reg  main_610_611;
reg  main_610_611_reg;
reg [31:0] main_612_613;
reg [31:0] main_612_613_reg;
reg [15:0] main_612_phitmp4i;
reg [15:0] main_612_phitmp4i_reg;
reg [15:0] main_thread112i_614;
reg [15:0] main_thread112i_614_reg;
reg [31:0] main_thread112i_gep_int131;
reg [31:0] main_thread112i_gep_int131_reg;
reg [31:0] main_thread112i_gep132;
reg [31:0] main_thread112i_gep132_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_thread112i_615;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_thread112i_615_reg;
reg [15:0] main_thread112i_616;
reg [15:0] main_thread112i_616_reg;
reg [31:0] main_thread112i_617;
reg [31:0] main_thread112i_617_reg;
reg [31:0] main_thread112i_618;
reg [31:0] main_thread112i_618_reg;
reg [31:0] main_thread112i_619;
reg [31:0] main_thread112i_619_reg;
reg [31:0] main_thread112i_620;
reg [31:0] main_thread112i_620_reg;
reg [31:0] main_thread112i_621;
reg [31:0] main_thread112i_621_reg;
reg  main_thread112i_622;
reg  main_thread112i_622_reg;
reg  main_623_624;
reg  main_623_624_reg;
reg [31:0] main_623_sext70i;
reg [31:0] main_623_sext70i_reg;
reg [31:0] main_623_625;
reg [31:0] main_623_625_reg;
reg [31:0] main_623_op72i;
reg [31:0] main_623_op72i_reg;
reg  main_gsm_addexit17i_626;
reg  main_gsm_addexit17i_626_reg;
reg  main_gsm_addexit17threadi_627;
reg  main_gsm_addexit17threadi_627_reg;
reg [31:0] main_gsm_addexit17threadi_sext74i;
reg [31:0] main_gsm_addexit17threadi_sext74i_reg;
reg [31:0] main_gsm_addexit17threadi_op76i;
reg [31:0] main_gsm_addexit17threadi_op76i_reg;
reg  main_gsm_addexit17threadi_628;
reg  main_gsm_addexit17threadi_628_reg;
reg  main_gsm_addexit17threadi_orcond168i;
reg  main_gsm_addexit17threadi_orcond168i_reg;
reg  main_629_630;
reg  main_629_630_reg;
reg [31:0] main_631_632;
reg [31:0] main_631_632_reg;
reg [15:0] main_631_phitmp5i;
reg [15:0] main_631_phitmp5i_reg;
reg [15:0] main_thread117i_633;
reg [15:0] main_thread117i_633_reg;
reg [31:0] main_thread117i_gep_int133;
reg [31:0] main_thread117i_gep_int133_reg;
reg [31:0] main_thread117i_gep134;
reg [31:0] main_thread117i_gep134_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_thread117i_634;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_thread117i_634_reg;
reg [15:0] main_thread117i_635;
reg [15:0] main_thread117i_635_reg;
reg [31:0] main_thread117i_636;
reg [31:0] main_thread117i_636_reg;
reg [31:0] main_thread117i_637;
reg [31:0] main_thread117i_637_reg;
reg [31:0] main_thread117i_638;
reg [31:0] main_thread117i_638_reg;
reg [31:0] main_thread117i_639;
reg [31:0] main_thread117i_639_reg;
reg [31:0] main_thread117i_640;
reg [31:0] main_thread117i_640_reg;
reg  main_thread117i_641;
reg  main_thread117i_641_reg;
reg  main_642_643;
reg  main_642_643_reg;
reg [31:0] main_642_sext79i;
reg [31:0] main_642_sext79i_reg;
reg [31:0] main_642_644;
reg [31:0] main_642_644_reg;
reg [31:0] main_642_op81i;
reg [31:0] main_642_op81i_reg;
reg  main_gsm_addexit13i_645;
reg  main_gsm_addexit13i_645_reg;
reg  main_gsm_addexit13threadi_646;
reg  main_gsm_addexit13threadi_646_reg;
reg [31:0] main_gsm_addexit13threadi_sext83i;
reg [31:0] main_gsm_addexit13threadi_sext83i_reg;
reg [31:0] main_gsm_addexit13threadi_op85i;
reg [31:0] main_gsm_addexit13threadi_op85i_reg;
reg  main_gsm_addexit13threadi_647;
reg  main_gsm_addexit13threadi_647_reg;
reg  main_gsm_addexit13threadi_orcond169i;
reg  main_gsm_addexit13threadi_orcond169i_reg;
reg  main_648_649;
reg  main_648_649_reg;
reg [31:0] main_650_651;
reg [31:0] main_650_651_reg;
reg [15:0] main_650_phitmp6i;
reg [15:0] main_650_phitmp6i_reg;
reg [15:0] main_thread122i_652;
reg [15:0] main_thread122i_652_reg;
reg [31:0] main_thread122i_gep_int135;
reg [31:0] main_thread122i_gep_int135_reg;
reg [31:0] main_thread122i_gep136;
reg [31:0] main_thread122i_gep136_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_thread122i_653;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_thread122i_653_reg;
reg [15:0] main_thread122i_654;
reg [15:0] main_thread122i_654_reg;
reg [31:0] main_thread122i_655;
reg [31:0] main_thread122i_655_reg;
reg [31:0] main_thread122i_656;
reg [31:0] main_thread122i_656_reg;
reg [31:0] main_thread122i_657;
reg [31:0] main_thread122i_657_reg;
reg [31:0] main_thread122i_658;
reg [31:0] main_thread122i_658_reg;
reg [31:0] main_thread122i_659;
reg [31:0] main_thread122i_659_reg;
reg  main_thread122i_660;
reg  main_thread122i_660_reg;
reg  main_661_662;
reg  main_661_662_reg;
reg [31:0] main_661_sext88i;
reg [31:0] main_661_sext88i_reg;
reg [31:0] main_661_663;
reg [31:0] main_661_663_reg;
reg [31:0] main_661_op90i;
reg [31:0] main_661_op90i_reg;
reg  main_gsm_addexit9i_664;
reg  main_gsm_addexit9i_664_reg;
reg  main_gsm_addexit9threadi_665;
reg  main_gsm_addexit9threadi_665_reg;
reg [31:0] main_gsm_addexit9threadi_sext92i;
reg [31:0] main_gsm_addexit9threadi_sext92i_reg;
reg [31:0] main_gsm_addexit9threadi_op94i;
reg [31:0] main_gsm_addexit9threadi_op94i_reg;
reg  main_gsm_addexit9threadi_666;
reg  main_gsm_addexit9threadi_666_reg;
reg  main_gsm_addexit9threadi_orcond170i;
reg  main_gsm_addexit9threadi_orcond170i_reg;
reg  main_667_668;
reg  main_667_668_reg;
reg [31:0] main_669_670;
reg [31:0] main_669_670_reg;
reg [15:0] main_669_phitmp7i;
reg [15:0] main_669_phitmp7i_reg;
reg [15:0] main_Quantization_and_codingexit_671;
reg [15:0] main_Quantization_and_codingexit_671_reg;
reg [31:0] main_preheader_lcssa;
reg [31:0] main_preheader_lcssa_reg;
reg  main_preheader_672;
reg  main_preheader_672_reg;
reg [31:0] main_preheader_673;
reg [31:0] main_preheader_673_reg;
reg [31:0] main_preheader_674;
reg [31:0] main_preheader_674_reg;
reg  main_preheader_675;
reg  main_preheader_675_reg;
reg [31:0] main_preheader_676;
reg [31:0] main_preheader_676_reg;
reg [31:0] main_preheader_677;
reg [31:0] main_preheader_677_reg;
reg  main_preheader_678;
reg  main_preheader_678_reg;
reg [31:0] main_preheader_679;
reg [31:0] main_preheader_679_reg;
reg [31:0] main_preheader_680;
reg [31:0] main_preheader_680_reg;
reg  main_preheader_681;
reg  main_preheader_681_reg;
reg [31:0] main_preheader_682;
reg [31:0] main_preheader_682_reg;
reg [31:0] main_preheader_683;
reg [31:0] main_preheader_683_reg;
reg  main_preheader_684;
reg  main_preheader_684_reg;
reg [31:0] main_preheader_685;
reg [31:0] main_preheader_685_reg;
reg [31:0] main_preheader_686;
reg [31:0] main_preheader_686_reg;
reg  main_preheader_687;
reg  main_preheader_687_reg;
reg [31:0] main_preheader_688;
reg [31:0] main_preheader_688_reg;
reg [31:0] main_preheader_689;
reg [31:0] main_preheader_689_reg;
reg  main_preheader_690;
reg  main_preheader_690_reg;
reg [31:0] main_preheader_691;
reg [31:0] main_preheader_691_reg;
reg [31:0] main_preheader_692;
reg [31:0] main_preheader_692_reg;
reg  main_preheader_693;
reg  main_preheader_693_reg;
reg [31:0] main_preheader_694;
reg [31:0] main_preheader_694_reg;
reg [31:0] main_preheader_695;
reg [31:0] main_preheader_695_reg;
reg  main_preheader_697;
reg  main_preheader_697_reg;
reg [31:0] main_698_main_result04;
reg [31:0] main_698_main_result04_reg;
reg [31:0] main_698_i13;
reg [31:0] main_698_i13_reg;
reg [31:0] main_698_gep_int151;
reg [31:0] main_698_gep_int151_reg;
reg [31:0] main_698_gep_array152;
reg [31:0] main_698_gep_array152_reg;
reg [31:0] main_698_gep153;
reg [31:0] main_698_gep153_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_698_699;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_698_699_reg;
reg [15:0] main_698_700;
reg [15:0] main_698_700_reg;
reg [31:0] main_698_gep_int154;
reg [31:0] main_698_gep_int154_reg;
reg [31:0] main_698_gep_array155;
reg [31:0] main_698_gep_array155_reg;
reg [31:0] main_698_gep156;
reg [31:0] main_698_gep156_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_698_701;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_698_701_reg;
reg [15:0] main_698_702;
reg [15:0] main_698_702_reg;
reg  main_698_703;
reg  main_698_703_reg;
reg [31:0] main_698_704;
reg [31:0] main_698_704_reg;
reg [31:0] main_698_705;
reg [31:0] main_698_705_reg;
reg [31:0] main_698_706;
reg [31:0] main_698_706_reg;
reg  main_698_exitcond;
reg  main_698_exitcond_reg;
reg [7:0] bitoff_address_a;
reg  bitoff_write_enable_a;
wire [7:0] bitoff_in_a;
wire [7:0] bitoff_out_a;
wire [7:0] bitoff_address_b;
wire  bitoff_write_enable_b;
wire [7:0] bitoff_in_b;
wire [7:0] bitoff_out_b;
reg [7:0] inData_address_a;
reg  inData_write_enable_a;
wire [15:0] inData_in_a;
wire [15:0] inData_out_a;
wire [7:0] inData_address_b;
wire  inData_write_enable_b;
wire [15:0] inData_in_b;
wire [15:0] inData_out_b;
reg [7:0] outData_address_a;
reg  outData_write_enable_a;
wire [15:0] outData_in_a;
wire [15:0] outData_out_a;
wire [7:0] outData_address_b;
wire  outData_write_enable_b;
wire [15:0] outData_in_b;
wire [15:0] outData_out_b;
reg [3:0] main_0_Pi_address_a;
reg  main_0_Pi_write_enable_a;
reg [15:0] main_0_Pi_in_a;
wire [15:0] main_0_Pi_out_a;
wire [3:0] main_0_Pi_address_b;
wire  main_0_Pi_write_enable_b;
wire [15:0] main_0_Pi_in_b;
wire [15:0] main_0_Pi_out_b;
reg [3:0] main_0_Ki_address_a;
reg  main_0_Ki_write_enable_a;
reg [15:0] main_0_Ki_in_a;
wire [15:0] main_0_Ki_out_a;
wire [3:0] main_0_Ki_address_b;
wire  main_0_Ki_write_enable_b;
wire [15:0] main_0_Ki_in_b;
wire [15:0] main_0_Ki_out_b;
reg [7:0] main_0_so_address_a;
reg  main_0_so_write_enable_a;
reg [15:0] main_0_so_in_a;
wire [15:0] main_0_so_out_a;
reg [7:0] main_0_so_address_b;
reg  main_0_so_write_enable_b;
wire [15:0] main_0_so_in_b;
wire [15:0] main_0_so_out_b;
wire [2:0] ram_16_address_a;
wire  ram_16_write_enable_a;
wire [15:0] ram_16_in_a;
wire [15:0] ram_16_out_a;
wire [2:0] ram_16_address_b;
wire  ram_16_write_enable_b;
wire [15:0] ram_16_in_b;
wire [15:0] ram_16_out_b;
wire  legup_memset_2_i64_0_1_address_a;
wire  legup_memset_2_i64_0_1_write_enable_a;
wire [31:0] legup_memset_2_i64_0_1_in_a;
wire [31:0] legup_memset_2_i64_0_1_out_a;
wire  legup_memset_2_i64_0_1_address_b;
wire  legup_memset_2_i64_0_1_write_enable_b;
wire [31:0] legup_memset_2_i64_0_1_in_b;
wire [31:0] legup_memset_2_i64_0_1_out_b;
wire  legup_memset_2_i64_0_2_address_a;
wire  legup_memset_2_i64_0_2_write_enable_a;
wire [7:0] legup_memset_2_i64_0_2_in_a;
wire [7:0] legup_memset_2_i64_0_2_out_a;
wire  legup_memset_2_i64_0_2_address_b;
wire  legup_memset_2_i64_0_2_write_enable_b;
wire [7:0] legup_memset_2_i64_0_2_in_b;
wire [7:0] legup_memset_2_i64_0_2_out_b;
wire  legup_memset_2_i64_0_3_address_a;
wire  legup_memset_2_i64_0_3_write_enable_a;
wire [63:0] legup_memset_2_i64_0_3_in_a;
wire [63:0] legup_memset_2_i64_0_3_out_a;
wire  legup_memset_2_i64_0_3_address_b;
wire  legup_memset_2_i64_0_3_write_enable_b;
wire [63:0] legup_memset_2_i64_0_3_in_b;
wire [63:0] legup_memset_2_i64_0_3_out_b;
wire  legup_memset_2_i64_0_c_address_a;
wire  legup_memset_2_i64_0_c_write_enable_a;
wire [15:0] legup_memset_2_i64_0_c_in_a;
wire [15:0] legup_memset_2_i64_0_c_out_a;
wire  legup_memset_2_i64_0_c_address_b;
wire  legup_memset_2_i64_0_c_write_enable_b;
wire [15:0] legup_memset_2_i64_0_c_in_b;
wire [15:0] legup_memset_2_i64_0_c_out_b;
wire  legup_memset_2_i64_0_s_address_a;
wire  legup_memset_2_i64_0_s_write_enable_a;
wire [31:0] legup_memset_2_i64_0_s_in_a;
wire [31:0] legup_memset_2_i64_0_s_out_a;
wire  legup_memset_2_i64_0_s_address_b;
wire  legup_memset_2_i64_0_s_write_enable_b;
wire [31:0] legup_memset_2_i64_0_s_in_b;
wire [31:0] legup_memset_2_i64_0_s_out_b;
reg  legup_memset_2_i64_start;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] legup_memset_2_i64_arg_m;
reg [7:0] legup_memset_2_i64_arg_c1;
reg [63:0] legup_memset_2_i64_arg_n;
wire  legup_memset_2_i64_memory_controller_enable_a;
wire  legup_memset_2_i64_memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] legup_memset_2_i64_memory_controller_address_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] legup_memset_2_i64_memory_controller_in_a;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] legup_memset_2_i64_memory_controller_out_a;
wire [1:0] legup_memset_2_i64_memory_controller_size_a;
wire  legup_memset_2_i64_memory_controller_enable_b;
wire  legup_memset_2_i64_memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] legup_memset_2_i64_memory_controller_address_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] legup_memset_2_i64_memory_controller_in_b;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] legup_memset_2_i64_memory_controller_out_b;
wire [1:0] legup_memset_2_i64_memory_controller_size_b;
reg  legup_memset_2_i64_memory_controller_waitrequest;
reg  legup_memset_2_i64_finish_final;
reg  legup_memset_2_i64_finish_reg;
wire  legup_memset_2_i64_finish;
reg  legup_function_call;
wire [15:0] legup_pthreadpoll_threadID;
wire [15:0] legup_pthreadpoll_functionID;
reg [31:0] main_signed_add_32_0_op0;
reg [31:0] main_signed_add_32_0_op1;
reg [31:0] main_signed_add_32_0;
reg [31:0] main_signed_add_32_1_op0;
reg [31:0] main_signed_add_32_1_op1;
reg [31:0] main_signed_add_32_1;
reg [31:0] main_signed_multiply_32_0_op0;
reg [31:0] main_signed_multiply_32_0_op1;
reg  lpm_mult_main_74_76_en;
reg [31:0] main_74_76_stage0_reg;
reg [31:0] main_signed_multiply_32_0;
reg [15:0] main_signed_subtract_16_0_op0;
reg [15:0] main_signed_subtract_16_0_op1;
reg [15:0] main_signed_subtract_16_0;
reg [31:0] main_signed_multiply_32_6_op0;
reg [31:0] main_signed_multiply_32_6_op1;
reg  lpm_mult_main_threadi_125_en;
reg [31:0] main_threadi_125_stage0_reg;
reg [31:0] main_signed_multiply_32_6;
reg [31:0] main_signed_add_32_2_op0;
reg [31:0] main_signed_add_32_2_op1;
reg [31:0] main_signed_add_32_2;
reg [31:0] main_signed_multiply_32_11_op0;
reg [31:0] main_signed_multiply_32_11_op1;
reg  lpm_mult_main_threadi_127_en;
reg [31:0] main_threadi_127_stage0_reg;
reg [31:0] main_signed_multiply_32_11;
reg [31:0] main_signed_add_32_12_op0;
reg [31:0] main_signed_add_32_12_op1;
reg [31:0] main_signed_add_32_12;
reg [31:0] main_signed_multiply_32_10_op0;
reg [31:0] main_signed_multiply_32_10_op1;
reg  lpm_mult_main_threadi_129_en;
reg [31:0] main_threadi_129_stage0_reg;
reg [31:0] main_signed_multiply_32_10;
reg [31:0] main_signed_add_32_11_op0;
reg [31:0] main_signed_add_32_11_op1;
reg [31:0] main_signed_add_32_11;
reg [31:0] main_signed_multiply_32_7_op0;
reg [31:0] main_signed_multiply_32_7_op1;
reg  lpm_mult_main_threadi_133_en;
reg [31:0] main_threadi_133_stage0_reg;
reg [31:0] main_signed_multiply_32_7;
reg [31:0] main_signed_add_32_9_op0;
reg [31:0] main_signed_add_32_9_op1;
reg [31:0] main_signed_add_32_9;
reg [31:0] main_signed_multiply_32_8_op0;
reg [31:0] main_signed_multiply_32_8_op1;
reg  lpm_mult_main_threadi_135_en;
reg [31:0] main_threadi_135_stage0_reg;
reg [31:0] main_signed_multiply_32_8;
reg [31:0] main_signed_add_32_10_op0;
reg [31:0] main_signed_add_32_10_op1;
reg [31:0] main_signed_add_32_10;
reg [31:0] main_signed_multiply_32_14_op0;
reg [31:0] main_signed_multiply_32_14_op1;
reg  lpm_mult_main_threadi_137_en;
reg [31:0] main_threadi_137_stage0_reg;
reg [31:0] main_signed_multiply_32_14;
reg [31:0] main_signed_multiply_32_12_op0;
reg [31:0] main_signed_multiply_32_12_op1;
reg  lpm_mult_main_threadi_139_en;
reg [31:0] main_threadi_139_stage0_reg;
reg [31:0] main_signed_multiply_32_12;
reg [31:0] main_signed_add_32_7_op0;
reg [31:0] main_signed_add_32_7_op1;
reg [31:0] main_signed_add_32_7;
reg [31:0] main_signed_multiply_32_13_op0;
reg [31:0] main_signed_multiply_32_13_op1;
reg  lpm_mult_main_threadi_141_en;
reg [31:0] main_threadi_141_stage0_reg;
reg [31:0] main_signed_multiply_32_13;
reg [31:0] main_signed_add_32_8_op0;
reg [31:0] main_signed_add_32_8_op1;
reg [31:0] main_signed_add_32_8;
reg [31:0] main_signed_multiply_32_5_op0;
reg [31:0] main_signed_multiply_32_5_op1;
reg  lpm_mult_main_threadi_143_en;
reg [31:0] main_threadi_143_stage0_reg;
reg [31:0] main_signed_multiply_32_5;
reg [31:0] main_signed_multiply_32_2_op0;
reg [31:0] main_signed_multiply_32_2_op1;
reg  lpm_mult_main_threadi_153_en;
reg [31:0] main_threadi_153_stage0_reg;
reg [31:0] main_signed_multiply_32_2;
reg [31:0] main_signed_add_32_5_op0;
reg [31:0] main_signed_add_32_5_op1;
reg [31:0] main_signed_add_32_5;
reg [31:0] main_signed_multiply_32_3_op0;
reg [31:0] main_signed_multiply_32_3_op1;
reg  lpm_mult_main_threadi_157_en;
reg [31:0] main_threadi_157_stage0_reg;
reg [31:0] main_signed_multiply_32_3;
reg [31:0] main_signed_add_32_3_op0;
reg [31:0] main_signed_add_32_3_op1;
reg [31:0] main_signed_add_32_3;
reg [31:0] main_signed_multiply_32_4_op0;
reg [31:0] main_signed_multiply_32_4_op1;
reg  lpm_mult_main_threadi_159_en;
reg [31:0] main_threadi_159_stage0_reg;
reg [31:0] main_signed_multiply_32_4;
reg [31:0] main_signed_add_32_6_op0;
reg [31:0] main_signed_add_32_6_op1;
reg [31:0] main_signed_add_32_6;
reg [31:0] main_signed_subtract_32_0_op0;
reg [31:0] main_signed_subtract_32_0_op1;
reg [31:0] main_signed_subtract_32_0;
reg [31:0] main_signed_multiply_32_9_op0;
reg [31:0] main_signed_multiply_32_9_op1;
reg  lpm_mult_main_threadi_107_en;
reg [31:0] main_threadi_107_stage0_reg;
reg [31:0] main_signed_multiply_32_9;
reg [31:0] main_signed_add_32_13_op0;
reg [31:0] main_signed_add_32_13_op1;
reg [31:0] main_signed_add_32_13;
reg [31:0] main_signed_add_32_14_op0;
reg [31:0] main_signed_add_32_14_op1;
reg [31:0] main_signed_add_32_14;
reg [31:0] main_signed_multiply_32_1_op0;
reg [31:0] main_signed_multiply_32_1_op1;
reg  lpm_mult_main_threadi_173_en;
reg [31:0] main_threadi_173_stage0_reg;
reg [31:0] main_signed_multiply_32_1;
reg [31:0] main_signed_add_32_4_op0;
reg [31:0] main_signed_add_32_4_op1;
reg [31:0] main_signed_add_32_4;
reg [15:0] main_signed_add_16_0_op0;
reg [15:0] main_signed_add_16_0_op1;
reg [15:0] main_signed_add_16_0;
reg  lpm_mult_main_gsm_mult_rexiti_85_en;
reg  lpm_mult_main_threadi_94_en;
reg  lpm_mult_main_threadi_98_en;
reg  lpm_mult_main_threadi_103_en;
reg  lpm_mult_main_threadi_106_en;
reg  lpm_mult_main_threadi_111_en;
reg  lpm_mult_main_threadi_113_en;
reg  lpm_mult_main_threadi_115_en;
reg  lpm_mult_main_threadi_117_en;
reg  lpm_mult_main_threadi_121_en;
reg  lpm_mult_main_threadi_123_en;
reg  lpm_mult_main_threadi_147_en;
reg  lpm_mult_main_threadi_149_en;
reg  lpm_mult_main_threadi_151_en;
reg  lpm_mult_main_threadi_155_en;
reg  lpm_mult_main_threadi_163_en;
reg  lpm_mult_main_threadi_165_en;
reg  lpm_mult_main_threadi_167_en;
reg  lpm_mult_main_threadi_169_en;
reg  lpm_mult_main_threadi_171_en;
reg  lpm_mult_main_threadi_175_en;
reg  lpm_mult_main_threadi_177_en;
reg  lpm_mult_main_187_201_en;
reg  lpm_mult_main_187_204_en;
reg  lpm_mult_main_187_209_en;
reg  lpm_mult_main_187_214_en;
reg  lpm_mult_main_187_219_en;
reg  lpm_mult_main_187_224_en;
reg  lpm_mult_main_187_229_en;
reg  lpm_mult_main_187_234_en;
reg  lpm_mult_main_187_239_en;
reg  lpm_mult_main_445_448_en;
reg  lpm_mult_main_467_470_en;
reg  lpm_mult_main_488_490_en;
reg  lpm_mult_main_Gsm_LPC_Analysisexit_529_en;
reg  lpm_mult_main_threadi4_545_en;
reg  lpm_mult_main_thread98i_561_en;
reg  lpm_mult_main_thread102i_580_en;
reg  lpm_mult_main_thread107i_599_en;
reg  lpm_mult_main_thread112i_618_en;
reg  lpm_mult_main_thread117i_637_en;
reg  lpm_mult_main_thread122i_656_en;


legup_memset_2_i64 legup_memset_2_i64 (
	.memory_controller_waitrequest (memory_controller_waitrequest),
	.memory_controller_enable_a (legup_memset_2_i64_memory_controller_enable_a),
	.memory_controller_address_a (legup_memset_2_i64_memory_controller_address_a),
	.memory_controller_write_enable_a (legup_memset_2_i64_memory_controller_write_enable_a),
	.memory_controller_in_a (legup_memset_2_i64_memory_controller_in_a),
	.memory_controller_size_a (legup_memset_2_i64_memory_controller_size_a),
	.memory_controller_out_a (memory_controller_out_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.memory_controller_enable_b (legup_memset_2_i64_memory_controller_enable_b),
	.memory_controller_address_b (legup_memset_2_i64_memory_controller_address_b),
	.memory_controller_write_enable_b (legup_memset_2_i64_memory_controller_write_enable_b),
	.memory_controller_in_b (legup_memset_2_i64_memory_controller_in_b),
	.memory_controller_size_b (legup_memset_2_i64_memory_controller_size_b),
	.memory_controller_out_b (memory_controller_out_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (legup_memset_2_i64_start),
	.finish (legup_memset_2_i64_finish),
	.arg_m (legup_memset_2_i64_arg_m),
	.arg_c1 (legup_memset_2_i64_arg_c1),
	.arg_n (legup_memset_2_i64_arg_n)
);

defparam
	legup_memset_2_i64.tag_offset = tag_offset;

// Local Rams


// @bitoff = internal unnamed_addr constant [256 x i8] c"\08\07\06\06\05\05\05\05\04\04\04\04\04\04\04\04\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\0...
rom_dual_port bitoff (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( bitoff_address_a ),
	.address_b( bitoff_address_b ),
	.q_a( bitoff_out_a ),
	.q_b( bitoff_out_b)
);
defparam bitoff.width_a = 8;
defparam bitoff.width_b = 8;
defparam bitoff.widthad_a = 8;
defparam bitoff.widthad_b = 8;
defparam bitoff.numwords_a = 256;
defparam bitoff.numwords_b = 256;
defparam bitoff.latency = 1;
defparam bitoff.init_file = "bitoff.mif";


// @inData = internal unnamed_addr constant [160 x i16] [i16 81, i16 10854, i16 1893, i16 -10291, i16 7614, i16 29718, i16 20475, i16 -29215, i16 -18949, i16 -29806, i16 -32017, i16 1596, i16 15744, i16 ...
rom_dual_port inData (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( inData_address_a ),
	.address_b( inData_address_b ),
	.q_a( inData_out_a ),
	.q_b( inData_out_b)
);
defparam inData.width_a = 16;
defparam inData.width_b = 16;
defparam inData.widthad_a = 8;
defparam inData.widthad_b = 8;
defparam inData.numwords_a = 160;
defparam inData.numwords_b = 160;
defparam inData.latency = 1;
defparam inData.init_file = "inData.mif";


// @outData = internal unnamed_addr constant [160 x i16] [i16 80, i16 10848, i16 1888, i16 -10288, i16 7616, i16 29712, i16 20480, i16 -29216, i16 -18944, i16 -29808, i16 -32016, i16 1600, i16 15744, i16...
rom_dual_port outData (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( outData_address_a ),
	.address_b( outData_address_b ),
	.q_a( outData_out_a ),
	.q_b( outData_out_b)
);
defparam outData.width_a = 16;
defparam outData.width_b = 16;
defparam outData.widthad_a = 8;
defparam outData.widthad_b = 8;
defparam outData.numwords_a = 160;
defparam outData.numwords_b = 160;
defparam outData.latency = 1;
defparam outData.init_file = "outData.mif";


//   %P.i = alloca [9 x i16], align 2
ram_dual_port main_0_Pi (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( main_0_Pi_address_a ),
	.address_b( main_0_Pi_address_b ),
	.wren_a( main_0_Pi_write_enable_a ),
	.wren_b( main_0_Pi_write_enable_b ),
	.data_a( main_0_Pi_in_a ),
	.data_b( main_0_Pi_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( main_0_Pi_out_a ),
	.q_b( main_0_Pi_out_b)
);
defparam main_0_Pi.width_a = 16;
defparam main_0_Pi.width_b = 16;
defparam main_0_Pi.widthad_a = 4;
defparam main_0_Pi.widthad_b = 4;
defparam main_0_Pi.width_be_a = 1;
defparam main_0_Pi.width_be_b = 1;
defparam main_0_Pi.numwords_a = 9;
defparam main_0_Pi.numwords_b = 9;
defparam main_0_Pi.latency = 1;


//   %K.i = alloca [9 x i16], align 2
ram_dual_port main_0_Ki (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( main_0_Ki_address_a ),
	.address_b( main_0_Ki_address_b ),
	.wren_a( main_0_Ki_write_enable_a ),
	.wren_b( main_0_Ki_write_enable_b ),
	.data_a( main_0_Ki_in_a ),
	.data_b( main_0_Ki_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( main_0_Ki_out_a ),
	.q_b( main_0_Ki_out_b)
);
defparam main_0_Ki.width_a = 16;
defparam main_0_Ki.width_b = 16;
defparam main_0_Ki.widthad_a = 4;
defparam main_0_Ki.widthad_b = 4;
defparam main_0_Ki.width_be_a = 1;
defparam main_0_Ki.width_be_b = 1;
defparam main_0_Ki.numwords_a = 9;
defparam main_0_Ki.numwords_b = 9;
defparam main_0_Ki.latency = 1;


//   %so = alloca [160 x i16], align 2
ram_dual_port main_0_so (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( main_0_so_address_a ),
	.address_b( main_0_so_address_b ),
	.wren_a( main_0_so_write_enable_a ),
	.wren_b( main_0_so_write_enable_b ),
	.data_a( main_0_so_in_a ),
	.data_b( main_0_so_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( main_0_so_out_a ),
	.q_b( main_0_so_out_b)
);
defparam main_0_so.width_a = 16;
defparam main_0_so.width_b = 16;
defparam main_0_so.widthad_a = 8;
defparam main_0_so.widthad_b = 8;
defparam main_0_so.width_be_a = 1;
defparam main_0_so.width_be_b = 1;
defparam main_0_so.numwords_a = 160;
defparam main_0_so.numwords_b = 160;
defparam main_0_so.latency = 1;


/* Unsynthesizable Statements */
always @(posedge clk)
	if (!memory_controller_waitrequest) begin
	/* main: %.preheader*/
	/*   %696 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([12 x i8]* @.str, i32 0, i32 0), i32 %695) #2*/
	if ((cur_state == LEGUP_F_main_BB_preheader_256)) begin
		$write("Result: %d\n", $signed(main_preheader_695));
		// to fix quartus warning
		if (reset == 1'b0 && ^(main_preheader_695) === 1'bX) finish <= 0;
	end
	/* main: %707*/
	/*   %708 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([14 x i8]* @.str1, i32 0, i32 0)) #2*/
	if ((cur_state == LEGUP_F_main_BB__707_260)) begin
		$write("RESULT: PASS\n");
	end
	/* main: %709*/
	/*   %710 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([14 x i8]* @.str2, i32 0, i32 0)) #2*/
	if ((cur_state == LEGUP_F_main_BB__709_261)) begin
		$write("RESULT: FAIL\n");
	end
end
always @(posedge clk) begin
if (reset == 1'b1)
	cur_state <= LEGUP_0;
else if (memory_controller_waitrequest == 1'd1)
	cur_state <= cur_state;
else
	cur_state <= next_state;
end

always @(*)
begin
next_state = cur_state;
case(cur_state)  // synthesis parallel_case  
LEGUP_0:
	if ((start == 1'd1))
		next_state = LEGUP_F_main_BB__0_1;
LEGUP_F_main_BB_Autocorrelationexit_58:
	if ((main_Autocorrelationexit_249 == 1'd1))
		next_state = LEGUP_F_main_BB_preheaderi5_59;
	else if ((main_Autocorrelationexit_249 == 1'd0))
		next_state = LEGUP_F_main_BB__251_62;
LEGUP_F_main_BB_Gsm_LPC_Analysisexit_178:
		next_state = LEGUP_F_main_BB_Gsm_LPC_Analysisexit_179;
LEGUP_F_main_BB_Gsm_LPC_Analysisexit_179:
		next_state = LEGUP_F_main_BB_Gsm_LPC_Analysisexit_180;
LEGUP_F_main_BB_Gsm_LPC_Analysisexit_180:
		next_state = LEGUP_F_main_BB_Gsm_LPC_Analysisexit_181;
LEGUP_F_main_BB_Gsm_LPC_Analysisexit_181:
	if ((main_Gsm_LPC_Analysisexit_533 == 1'd1))
		next_state = LEGUP_F_main_BB_threadi4_185;
	else if ((main_Gsm_LPC_Analysisexit_533 == 1'd0))
		next_state = LEGUP_F_main_BB__534_182;
LEGUP_F_main_BB_Quantization_and_codingexit_253:
		next_state = LEGUP_F_main_BB_Quantization_and_codingexit_254;
LEGUP_F_main_BB_Quantization_and_codingexit_254:
		next_state = LEGUP_F_main_BB__698_257;
LEGUP_F_main_BB_Reflection_coefficientsexit_167:
		next_state = LEGUP_F_main_BB_Reflection_coefficientsexit_168;
LEGUP_F_main_BB_Reflection_coefficientsexit_168:
		next_state = LEGUP_F_main_BB_Reflection_coefficientsexit_169;
LEGUP_F_main_BB_Reflection_coefficientsexit_169:
	if ((main_Reflection_coefficientsexit_505 == 1'd1))
		next_state = LEGUP_F_main_BB__506_170;
	else if ((main_Reflection_coefficientsexit_505 == 1'd0))
		next_state = LEGUP_F_main_BB_gsm_absexitii_171;
LEGUP_F_main_BB__0_1:
		next_state = LEGUP_F_main_BB__1_2;
LEGUP_F_main_BB__12_10:
		next_state = LEGUP_F_main_BB_gsm_absexiti_11;
LEGUP_F_main_BB__187_48:
		next_state = LEGUP_F_main_BB__187_49;
LEGUP_F_main_BB__187_49:
		next_state = LEGUP_F_main_BB__187_50;
LEGUP_F_main_BB__187_50:
		next_state = LEGUP_F_main_BB__187_51;
LEGUP_F_main_BB__187_51:
		next_state = LEGUP_F_main_BB__187_52;
LEGUP_F_main_BB__187_52:
		next_state = LEGUP_F_main_BB__187_53;
LEGUP_F_main_BB__187_53:
	if ((main_187_exitcondi_reg == 1'd1))
		next_state = LEGUP_F_main_BB_preheader5i_47;
	else if ((main_187_exitcondi_reg == 1'd0))
		next_state = LEGUP_F_main_BB__187_48;
LEGUP_F_main_BB__18_12:
	if ((main_18_20 == 1'd1))
		next_state = LEGUP_F_main_BB_threadi_41;
	else if ((main_18_20 == 1'd0))
		next_state = LEGUP_F_main_BB__21_13;
LEGUP_F_main_BB__1_2:
		next_state = LEGUP_F_main_BB__1_3;
LEGUP_F_main_BB__1_3:
		next_state = LEGUP_F_main_BB__1_4;
LEGUP_F_main_BB__1_4:
		next_state = LEGUP_F_main_BB__1_5;
LEGUP_F_main_BB__1_5:
	if ((main_1_exitcond7_reg == 1'd1))
		next_state = LEGUP_F_main_BB__6_6;
	else if ((main_1_exitcond7_reg == 1'd0))
		next_state = LEGUP_F_main_BB__1_2;
LEGUP_F_main_BB__21_13:
	if ((main_21_24 == 1'd1))
		next_state = LEGUP_F_main_BB__25_14;
	else if ((main_21_24 == 1'd0))
		next_state = LEGUP_F_main_BB__29_16;
LEGUP_F_main_BB__251_62:
	if ((main_251_252 == 1'd1))
		next_state = LEGUP_F_main_BB__253_63;
	else if ((main_251_252 == 1'd0))
		next_state = LEGUP_F_main_BB__257_65;
LEGUP_F_main_BB__253_63:
	if ((main_253_254 == 1'd1))
		next_state = LEGUP_F_main_BB_gsm_normexiti_76;
	else if ((main_253_254 == 1'd0))
		next_state = LEGUP_F_main_BB__255_64;
LEGUP_F_main_BB__255_64:
		next_state = LEGUP_F_main_BB__257_65;
LEGUP_F_main_BB__257_65:
	if ((main_257_258 == 1'd1))
		next_state = LEGUP_F_main_BB__259_66;
	else if ((main_257_258 == 1'd0))
		next_state = LEGUP_F_main_BB__274_71;
LEGUP_F_main_BB__259_66:
	if ((main_259_260 == 1'd1))
		next_state = LEGUP_F_main_BB__261_67;
	else if ((main_259_260 == 1'd0))
		next_state = LEGUP_F_main_BB__267_69;
LEGUP_F_main_BB__25_14:
	if ((main_25_26 == 1'd1))
		next_state = LEGUP_F_main_BB__62_27;
	else if ((main_25_26 == 1'd0))
		next_state = LEGUP_F_main_BB__27_15;
LEGUP_F_main_BB__261_67:
		next_state = LEGUP_F_main_BB__261_68;
LEGUP_F_main_BB__261_68:
		next_state = LEGUP_F_main_BB_gsm_normexiti_76;
LEGUP_F_main_BB__267_69:
		next_state = LEGUP_F_main_BB__267_70;
LEGUP_F_main_BB__267_70:
		next_state = LEGUP_F_main_BB_gsm_normexiti_76;
LEGUP_F_main_BB__274_71:
	if ((main_274_276 == 1'd1))
		next_state = LEGUP_F_main_BB__284_74;
	else if ((main_274_276 == 1'd0))
		next_state = LEGUP_F_main_BB__277_72;
LEGUP_F_main_BB__277_72:
		next_state = LEGUP_F_main_BB__277_73;
LEGUP_F_main_BB__277_73:
		next_state = LEGUP_F_main_BB_gsm_normexiti_76;
LEGUP_F_main_BB__27_15:
		next_state = LEGUP_F_main_BB__29_16;
LEGUP_F_main_BB__284_74:
		next_state = LEGUP_F_main_BB__284_75;
LEGUP_F_main_BB__284_75:
		next_state = LEGUP_F_main_BB_gsm_normexiti_76;
LEGUP_F_main_BB__29_16:
	if ((main_29_30 == 1'd1))
		next_state = LEGUP_F_main_BB__31_17;
	else if ((main_29_30 == 1'd0))
		next_state = LEGUP_F_main_BB__46_22;
LEGUP_F_main_BB__31_17:
	if ((main_31_32 == 1'd1))
		next_state = LEGUP_F_main_BB__33_18;
	else if ((main_31_32 == 1'd0))
		next_state = LEGUP_F_main_BB__39_20;
LEGUP_F_main_BB__334_93:
	if ((main_334_336 == 1'd1))
		next_state = LEGUP_F_main_BB__337_94;
	else if ((main_334_336 == 1'd0))
		next_state = LEGUP_F_main_BB_gsm_absexiti9_95;
LEGUP_F_main_BB__337_94:
		next_state = LEGUP_F_main_BB_gsm_absexiti9_95;
LEGUP_F_main_BB__33_18:
		next_state = LEGUP_F_main_BB__33_19;
LEGUP_F_main_BB__33_19:
		next_state = LEGUP_F_main_BB__62_27;
LEGUP_F_main_BB__346_100:
	if ((main_346_348 == 1'd1))
		next_state = LEGUP_F_main_BB_gsm_divexiti_128;
	else if ((main_346_348 == 1'd0))
		next_state = LEGUP_F_main_BB_preheaderii_101;
LEGUP_F_main_BB__355_102:
		next_state = LEGUP_F_main_BB_backedge1ii_103;
LEGUP_F_main_BB__361_104:
		next_state = LEGUP_F_main_BB_backedge2ii_105;
LEGUP_F_main_BB__367_106:
		next_state = LEGUP_F_main_BB_backedge3ii_107;
LEGUP_F_main_BB__373_108:
		next_state = LEGUP_F_main_BB_backedge4ii_109;
LEGUP_F_main_BB__379_110:
		next_state = LEGUP_F_main_BB_backedge5ii_111;
LEGUP_F_main_BB__385_112:
		next_state = LEGUP_F_main_BB_backedge6ii_113;
LEGUP_F_main_BB__391_114:
		next_state = LEGUP_F_main_BB_backedge7ii_115;
LEGUP_F_main_BB__397_116:
		next_state = LEGUP_F_main_BB_backedge8ii_117;
LEGUP_F_main_BB__39_20:
		next_state = LEGUP_F_main_BB__39_21;
LEGUP_F_main_BB__39_21:
		next_state = LEGUP_F_main_BB__62_27;
LEGUP_F_main_BB__403_118:
		next_state = LEGUP_F_main_BB_backedge9ii_119;
LEGUP_F_main_BB__409_120:
		next_state = LEGUP_F_main_BB_backedge10ii_121;
LEGUP_F_main_BB__415_122:
		next_state = LEGUP_F_main_BB_backedge11ii_123;
LEGUP_F_main_BB__421_124:
		next_state = LEGUP_F_main_BB_backedge12ii_125;
LEGUP_F_main_BB__427_126:
		next_state = LEGUP_F_main_BB_backedge13ii_127;
LEGUP_F_main_BB__436_131:
		next_state = LEGUP_F_main_BB__436_132;
LEGUP_F_main_BB__436_132:
		next_state = LEGUP_F_main_BB__438_133;
LEGUP_F_main_BB__438_133:
	if ((main_438_440 == 1'd1))
		next_state = LEGUP_F_main_BB_Reflection_coefficientsexit_167;
	else if ((main_438_440 == 1'd0))
		next_state = LEGUP_F_main_BB__441_134;
LEGUP_F_main_BB__441_134:
		next_state = LEGUP_F_main_BB__441_135;
LEGUP_F_main_BB__441_135:
	if ((main_441_orcondi9i == 1'd1))
		next_state = LEGUP_F_main_BB_gsm_mult_rexit11i_138;
	else if ((main_441_orcondi9i == 1'd0))
		next_state = LEGUP_F_main_BB__445_136;
LEGUP_F_main_BB__445_136:
		next_state = LEGUP_F_main_BB__445_137;
LEGUP_F_main_BB__445_137:
		next_state = LEGUP_F_main_BB_gsm_mult_rexit11i_138;
LEGUP_F_main_BB__456_140:
		next_state = LEGUP_F_main_BB_gsm_addexit8i_141;
LEGUP_F_main_BB__467_146:
		next_state = LEGUP_F_main_BB__467_147;
LEGUP_F_main_BB__467_147:
		next_state = LEGUP_F_main_BB_gsm_mult_rexit6i_148;
LEGUP_F_main_BB__46_22:
	if ((main_46_48 == 1'd1))
		next_state = LEGUP_F_main_BB__56_25;
	else if ((main_46_48 == 1'd0))
		next_state = LEGUP_F_main_BB__49_23;
LEGUP_F_main_BB__480_152:
		next_state = LEGUP_F_main_BB_gsm_addexit3i_153;
LEGUP_F_main_BB__488_158:
		next_state = LEGUP_F_main_BB__488_159;
LEGUP_F_main_BB__488_159:
		next_state = LEGUP_F_main_BB_gsm_mult_rexiti13_160;
LEGUP_F_main_BB__497_161:
		next_state = LEGUP_F_main_BB_gsm_addexiti_162;
LEGUP_F_main_BB__49_23:
		next_state = LEGUP_F_main_BB__49_24;
LEGUP_F_main_BB__49_24:
		next_state = LEGUP_F_main_BB__62_27;
LEGUP_F_main_BB__506_170:
	if ((main_506_507 == 1'd1))
		next_state = LEGUP_F_main_BB_threadii_175;
	else if ((main_506_507 == 1'd0))
		next_state = LEGUP_F_main_BB_gsm_absexitii_171;
LEGUP_F_main_BB__511_172:
		next_state = LEGUP_F_main_BB__522_176;
LEGUP_F_main_BB__515_173:
	if ((main_515_516 == 1'd1))
		next_state = LEGUP_F_main_BB__517_174;
	else if ((main_515_516 == 1'd0))
		next_state = LEGUP_F_main_BB_threadii_175;
LEGUP_F_main_BB__517_174:
		next_state = LEGUP_F_main_BB__522_176;
LEGUP_F_main_BB__522_176:
		next_state = LEGUP_F_main_BB__522_177;
LEGUP_F_main_BB__522_177:
	if ((main_522_exitcondii_reg == 1'd1))
		next_state = LEGUP_F_main_BB_Gsm_LPC_Analysisexit_178;
	else if ((main_522_exitcondii_reg == 1'd0))
		next_state = LEGUP_F_main_BB_Reflection_coefficientsexit_167;
LEGUP_F_main_BB__534_182:
	if ((main_534_orcondi == 1'd1))
		next_state = LEGUP_F_main_BB_threadi4_185;
	else if ((main_534_orcondi == 1'd0))
		next_state = LEGUP_F_main_BB__537_183;
LEGUP_F_main_BB__537_183:
	if ((main_537_538 == 1'd1))
		next_state = LEGUP_F_main_BB_threadi4_185;
	else if ((main_537_538 == 1'd0))
		next_state = LEGUP_F_main_BB__539_184;
LEGUP_F_main_BB__539_184:
		next_state = LEGUP_F_main_BB_threadi4_185;
LEGUP_F_main_BB__550_190:
	if ((main_550_orcond164i == 1'd1))
		next_state = LEGUP_F_main_BB_thread98i_193;
	else if ((main_550_orcond164i == 1'd0))
		next_state = LEGUP_F_main_BB__553_191;
LEGUP_F_main_BB__553_191:
	if ((main_553_554 == 1'd1))
		next_state = LEGUP_F_main_BB_thread98i_193;
	else if ((main_553_554 == 1'd0))
		next_state = LEGUP_F_main_BB__555_192;
LEGUP_F_main_BB__555_192:
		next_state = LEGUP_F_main_BB_thread98i_193;
LEGUP_F_main_BB__566_198:
	if ((main_566_567 == 1'd1))
		next_state = LEGUP_F_main_BB_thread102i_203;
	else if ((main_566_567 == 1'd0))
		next_state = LEGUP_F_main_BB_gsm_addexit29i_199;
LEGUP_F_main_BB__56_25:
		next_state = LEGUP_F_main_BB__56_26;
LEGUP_F_main_BB__56_26:
		next_state = LEGUP_F_main_BB__62_27;
LEGUP_F_main_BB__572_201:
	if ((main_572_573 == 1'd1))
		next_state = LEGUP_F_main_BB_thread102i_203;
	else if ((main_572_573 == 1'd0))
		next_state = LEGUP_F_main_BB__574_202;
LEGUP_F_main_BB__574_202:
		next_state = LEGUP_F_main_BB_thread102i_203;
LEGUP_F_main_BB__585_208:
	if ((main_585_586 == 1'd1))
		next_state = LEGUP_F_main_BB_thread107i_213;
	else if ((main_585_586 == 1'd0))
		next_state = LEGUP_F_main_BB_gsm_addexit25i_209;
LEGUP_F_main_BB__591_211:
	if ((main_591_592 == 1'd1))
		next_state = LEGUP_F_main_BB_thread107i_213;
	else if ((main_591_592 == 1'd0))
		next_state = LEGUP_F_main_BB__593_212;
LEGUP_F_main_BB__593_212:
		next_state = LEGUP_F_main_BB_thread107i_213;
LEGUP_F_main_BB__604_218:
	if ((main_604_605 == 1'd1))
		next_state = LEGUP_F_main_BB_thread112i_223;
	else if ((main_604_605 == 1'd0))
		next_state = LEGUP_F_main_BB_gsm_addexit21i_219;
LEGUP_F_main_BB__610_221:
	if ((main_610_611 == 1'd1))
		next_state = LEGUP_F_main_BB_thread112i_223;
	else if ((main_610_611 == 1'd0))
		next_state = LEGUP_F_main_BB__612_222;
LEGUP_F_main_BB__612_222:
		next_state = LEGUP_F_main_BB_thread112i_223;
LEGUP_F_main_BB__623_228:
	if ((main_623_624 == 1'd1))
		next_state = LEGUP_F_main_BB_thread117i_233;
	else if ((main_623_624 == 1'd0))
		next_state = LEGUP_F_main_BB_gsm_addexit17i_229;
LEGUP_F_main_BB__629_231:
	if ((main_629_630 == 1'd1))
		next_state = LEGUP_F_main_BB_thread117i_233;
	else if ((main_629_630 == 1'd0))
		next_state = LEGUP_F_main_BB__631_232;
LEGUP_F_main_BB__62_27:
	if ((main_62_65 == 1'd1))
		next_state = LEGUP_F_main_BB_preheader6i_28;
	else if ((main_62_65 == 1'd0))
		next_state = LEGUP_F_main_BB_threadi_41;
LEGUP_F_main_BB__631_232:
		next_state = LEGUP_F_main_BB_thread117i_233;
LEGUP_F_main_BB__642_238:
	if ((main_642_643 == 1'd1))
		next_state = LEGUP_F_main_BB_thread122i_243;
	else if ((main_642_643 == 1'd0))
		next_state = LEGUP_F_main_BB_gsm_addexit13i_239;
LEGUP_F_main_BB__648_241:
	if ((main_648_649 == 1'd1))
		next_state = LEGUP_F_main_BB_thread122i_243;
	else if ((main_648_649 == 1'd0))
		next_state = LEGUP_F_main_BB__650_242;
LEGUP_F_main_BB__650_242:
		next_state = LEGUP_F_main_BB_thread122i_243;
LEGUP_F_main_BB__661_248:
	if ((main_661_662 == 1'd1))
		next_state = LEGUP_F_main_BB_Quantization_and_codingexit_253;
	else if ((main_661_662 == 1'd0))
		next_state = LEGUP_F_main_BB_gsm_addexit9i_249;
LEGUP_F_main_BB__667_251:
	if ((main_667_668 == 1'd1))
		next_state = LEGUP_F_main_BB_Quantization_and_codingexit_253;
	else if ((main_667_668 == 1'd0))
		next_state = LEGUP_F_main_BB__669_252;
LEGUP_F_main_BB__669_252:
		next_state = LEGUP_F_main_BB_Quantization_and_codingexit_253;
LEGUP_F_main_BB__698_257:
		next_state = LEGUP_F_main_BB__698_258;
LEGUP_F_main_BB__698_258:
		next_state = LEGUP_F_main_BB__698_259;
LEGUP_F_main_BB__698_259:
	if ((main_698_exitcond_reg == 1'd1))
		next_state = LEGUP_F_main_BB_preheader_255;
	else if ((main_698_exitcond_reg == 1'd0))
		next_state = LEGUP_F_main_BB__698_257;
LEGUP_F_main_BB__6_6:
		next_state = LEGUP_F_main_BB__8_7;
LEGUP_F_main_BB__707_260:
		next_state = LEGUP_F_main_BB__711_262;
LEGUP_F_main_BB__709_261:
		next_state = LEGUP_F_main_BB__711_262;
LEGUP_F_main_BB__711_262:
		next_state = LEGUP_0;
LEGUP_F_main_BB__74_32:
		next_state = LEGUP_F_main_BB__74_33;
LEGUP_F_main_BB__74_33:
		next_state = LEGUP_F_main_BB_gsm_mult_rexitusi_34;
LEGUP_F_main_BB__8_7:
		next_state = LEGUP_F_main_BB__8_8;
LEGUP_F_main_BB__8_8:
		next_state = LEGUP_F_main_BB__8_9;
LEGUP_F_main_BB__8_9:
	if ((main_8_11 == 1'd1))
		next_state = LEGUP_F_main_BB__12_10;
	else if ((main_8_11 == 1'd0))
		next_state = LEGUP_F_main_BB_gsm_absexiti_11;
LEGUP_F_main_BB__crit_edge43i_165:
		next_state = LEGUP_F_main_BB__crit_edge43i_166;
LEGUP_F_main_BB__crit_edge43i_166:
		next_state = LEGUP_F_main_BB__334_93;
LEGUP_F_main_BB__crit_edgei14_164:
	if ((main__crit_edgei14_502 == 1'd1))
		next_state = LEGUP_F_main_BB__crit_edge43i_165;
	else if ((main__crit_edgei14_502 == 1'd0))
		next_state = LEGUP_F_main_BB_Reflection_coefficientsexit_167;
LEGUP_F_main_BB__crit_edgei_56:
		next_state = LEGUP_F_main_BB__crit_edgei_57;
LEGUP_F_main_BB__crit_edgei_57:
		next_state = LEGUP_F_main_BB_preheaderi_54;
LEGUP_F_main_BB_backedge10ii_121:
	if ((main_backedge10ii_414 == 1'd1))
		next_state = LEGUP_F_main_BB_backedge11ii_123;
	else if ((main_backedge10ii_414 == 1'd0))
		next_state = LEGUP_F_main_BB__415_122;
LEGUP_F_main_BB_backedge11ii_123:
	if ((main_backedge11ii_420 == 1'd1))
		next_state = LEGUP_F_main_BB_backedge12ii_125;
	else if ((main_backedge11ii_420 == 1'd0))
		next_state = LEGUP_F_main_BB__421_124;
LEGUP_F_main_BB_backedge12ii_125:
	if ((main_backedge12ii_426 == 1'd1))
		next_state = LEGUP_F_main_BB_backedge13ii_127;
	else if ((main_backedge12ii_426 == 1'd0))
		next_state = LEGUP_F_main_BB__427_126;
LEGUP_F_main_BB_backedge13ii_127:
		next_state = LEGUP_F_main_BB_gsm_divexiti_128;
LEGUP_F_main_BB_backedge1ii_103:
	if ((main_backedge1ii_360 == 1'd1))
		next_state = LEGUP_F_main_BB_backedge2ii_105;
	else if ((main_backedge1ii_360 == 1'd0))
		next_state = LEGUP_F_main_BB__361_104;
LEGUP_F_main_BB_backedge2ii_105:
	if ((main_backedge2ii_366 == 1'd1))
		next_state = LEGUP_F_main_BB_backedge3ii_107;
	else if ((main_backedge2ii_366 == 1'd0))
		next_state = LEGUP_F_main_BB__367_106;
LEGUP_F_main_BB_backedge3ii_107:
	if ((main_backedge3ii_372 == 1'd1))
		next_state = LEGUP_F_main_BB_backedge4ii_109;
	else if ((main_backedge3ii_372 == 1'd0))
		next_state = LEGUP_F_main_BB__373_108;
LEGUP_F_main_BB_backedge4ii_109:
	if ((main_backedge4ii_378 == 1'd1))
		next_state = LEGUP_F_main_BB_backedge5ii_111;
	else if ((main_backedge4ii_378 == 1'd0))
		next_state = LEGUP_F_main_BB__379_110;
LEGUP_F_main_BB_backedge5ii_111:
	if ((main_backedge5ii_384 == 1'd1))
		next_state = LEGUP_F_main_BB_backedge6ii_113;
	else if ((main_backedge5ii_384 == 1'd0))
		next_state = LEGUP_F_main_BB__385_112;
LEGUP_F_main_BB_backedge6ii_113:
	if ((main_backedge6ii_390 == 1'd1))
		next_state = LEGUP_F_main_BB_backedge7ii_115;
	else if ((main_backedge6ii_390 == 1'd0))
		next_state = LEGUP_F_main_BB__391_114;
LEGUP_F_main_BB_backedge7ii_115:
	if ((main_backedge7ii_396 == 1'd1))
		next_state = LEGUP_F_main_BB_backedge8ii_117;
	else if ((main_backedge7ii_396 == 1'd0))
		next_state = LEGUP_F_main_BB__397_116;
LEGUP_F_main_BB_backedge8ii_117:
	if ((main_backedge8ii_402 == 1'd1))
		next_state = LEGUP_F_main_BB_backedge9ii_119;
	else if ((main_backedge8ii_402 == 1'd0))
		next_state = LEGUP_F_main_BB__403_118;
LEGUP_F_main_BB_backedge9ii_119:
	if ((main_backedge9ii_408 == 1'd1))
		next_state = LEGUP_F_main_BB_backedge10ii_121;
	else if ((main_backedge9ii_408 == 1'd0))
		next_state = LEGUP_F_main_BB__409_120;
LEGUP_F_main_BB_gsm_absexiti9_95:
		next_state = LEGUP_F_main_BB_gsm_absexiti9_96;
LEGUP_F_main_BB_gsm_absexiti9_96:
	if ((main_gsm_absexiti9_342 == 1'd1))
		next_state = LEGUP_F_main_BB_preheader14i_97;
	else if ((main_gsm_absexiti9_342 == 1'd0))
		next_state = LEGUP_F_main_BB__346_100;
LEGUP_F_main_BB_gsm_absexiti_11:
	if ((main_gsm_absexiti_exitcond40i == 1'd1))
		next_state = LEGUP_F_main_BB__18_12;
	else if ((main_gsm_absexiti_exitcond40i == 1'd0))
		next_state = LEGUP_F_main_BB__8_7;
LEGUP_F_main_BB_gsm_absexitii_171:
	if ((main_gsm_absexitii_510 == 1'd1))
		next_state = LEGUP_F_main_BB__511_172;
	else if ((main_gsm_absexitii_510 == 1'd0))
		next_state = LEGUP_F_main_BB__515_173;
LEGUP_F_main_BB_gsm_addexit13i_239:
	if ((main_gsm_addexit13i_645 == 1'd1))
		next_state = LEGUP_F_main_BB_thread122i_243;
	else if ((main_gsm_addexit13i_645 == 1'd0))
		next_state = LEGUP_F_main_BB_gsm_addexit13threadi_240;
LEGUP_F_main_BB_gsm_addexit13threadi_240:
	if ((main_gsm_addexit13threadi_orcond169i == 1'd1))
		next_state = LEGUP_F_main_BB_thread122i_243;
	else if ((main_gsm_addexit13threadi_orcond169i == 1'd0))
		next_state = LEGUP_F_main_BB__648_241;
LEGUP_F_main_BB_gsm_addexit17i_229:
	if ((main_gsm_addexit17i_626 == 1'd1))
		next_state = LEGUP_F_main_BB_thread117i_233;
	else if ((main_gsm_addexit17i_626 == 1'd0))
		next_state = LEGUP_F_main_BB_gsm_addexit17threadi_230;
LEGUP_F_main_BB_gsm_addexit17threadi_230:
	if ((main_gsm_addexit17threadi_orcond168i == 1'd1))
		next_state = LEGUP_F_main_BB_thread117i_233;
	else if ((main_gsm_addexit17threadi_orcond168i == 1'd0))
		next_state = LEGUP_F_main_BB__629_231;
LEGUP_F_main_BB_gsm_addexit21i_219:
	if ((main_gsm_addexit21i_607 == 1'd1))
		next_state = LEGUP_F_main_BB_thread112i_223;
	else if ((main_gsm_addexit21i_607 == 1'd0))
		next_state = LEGUP_F_main_BB_gsm_addexit21threadi_220;
LEGUP_F_main_BB_gsm_addexit21threadi_220:
	if ((main_gsm_addexit21threadi_orcond167i == 1'd1))
		next_state = LEGUP_F_main_BB_thread112i_223;
	else if ((main_gsm_addexit21threadi_orcond167i == 1'd0))
		next_state = LEGUP_F_main_BB__610_221;
LEGUP_F_main_BB_gsm_addexit25i_209:
	if ((main_gsm_addexit25i_588 == 1'd1))
		next_state = LEGUP_F_main_BB_thread107i_213;
	else if ((main_gsm_addexit25i_588 == 1'd0))
		next_state = LEGUP_F_main_BB_gsm_addexit25threadi_210;
LEGUP_F_main_BB_gsm_addexit25threadi_210:
	if ((main_gsm_addexit25threadi_orcond166i == 1'd1))
		next_state = LEGUP_F_main_BB_thread107i_213;
	else if ((main_gsm_addexit25threadi_orcond166i == 1'd0))
		next_state = LEGUP_F_main_BB__591_211;
LEGUP_F_main_BB_gsm_addexit29i_199:
	if ((main_gsm_addexit29i_569 == 1'd1))
		next_state = LEGUP_F_main_BB_thread102i_203;
	else if ((main_gsm_addexit29i_569 == 1'd0))
		next_state = LEGUP_F_main_BB_gsm_addexit29threadi_200;
LEGUP_F_main_BB_gsm_addexit29threadi_200:
	if ((main_gsm_addexit29threadi_orcond165i == 1'd1))
		next_state = LEGUP_F_main_BB_thread102i_203;
	else if ((main_gsm_addexit29threadi_orcond165i == 1'd0))
		next_state = LEGUP_F_main_BB__572_201;
LEGUP_F_main_BB_gsm_addexit3i_153:
		next_state = LEGUP_F_main_BB_gsm_addexit3i_154;
LEGUP_F_main_BB_gsm_addexit3i_154:
		next_state = LEGUP_F_main_BB_gsm_addexit3i_155;
LEGUP_F_main_BB_gsm_addexit3i_155:
		next_state = LEGUP_F_main_BB_gsm_addexit3i_156;
LEGUP_F_main_BB_gsm_addexit3i_156:
		next_state = LEGUP_F_main_BB_gsm_addexit3i_157;
LEGUP_F_main_BB_gsm_addexit3i_157:
	if ((main_gsm_addexit3i_orcondii == 1'd1))
		next_state = LEGUP_F_main_BB_gsm_mult_rexiti13_160;
	else if ((main_gsm_addexit3i_orcondii == 1'd0))
		next_state = LEGUP_F_main_BB__488_158;
LEGUP_F_main_BB_gsm_addexit8i_141:
		next_state = LEGUP_F_main_BB_gsm_addexit8i_142;
LEGUP_F_main_BB_gsm_addexit8i_142:
	if ((main_gsm_addexit8i_461_reg == 1'd1))
		next_state = LEGUP_F_main_BB__crit_edgei14_164;
	else if ((main_gsm_addexit8i_461_reg == 1'd0))
		next_state = LEGUP_F_main_BB_lrph27i_143;
LEGUP_F_main_BB_gsm_addexit9i_249:
	if ((main_gsm_addexit9i_664 == 1'd1))
		next_state = LEGUP_F_main_BB_Quantization_and_codingexit_253;
	else if ((main_gsm_addexit9i_664 == 1'd0))
		next_state = LEGUP_F_main_BB_gsm_addexit9threadi_250;
LEGUP_F_main_BB_gsm_addexit9threadi_250:
	if ((main_gsm_addexit9threadi_orcond170i == 1'd1))
		next_state = LEGUP_F_main_BB_Quantization_and_codingexit_253;
	else if ((main_gsm_addexit9threadi_orcond170i == 1'd0))
		next_state = LEGUP_F_main_BB__667_251;
LEGUP_F_main_BB_gsm_addexiti_162:
		next_state = LEGUP_F_main_BB_gsm_addexiti_163;
LEGUP_F_main_BB_gsm_addexiti_163:
	if ((main_gsm_addexiti_exitcond36i_reg == 1'd1))
		next_state = LEGUP_F_main_BB__crit_edgei14_164;
	else if ((main_gsm_addexiti_exitcond36i_reg == 1'd0))
		next_state = LEGUP_F_main_BB_lrph27i_143;
LEGUP_F_main_BB_gsm_divexiti_128:
		next_state = LEGUP_F_main_BB_gsm_divexiti_129;
LEGUP_F_main_BB_gsm_divexiti_129:
		next_state = LEGUP_F_main_BB_gsm_divexiti_130;
LEGUP_F_main_BB_gsm_divexiti_130:
	if ((main_gsm_divexiti_435 == 1'd1))
		next_state = LEGUP_F_main_BB__436_131;
	else if ((main_gsm_divexiti_435 == 1'd0))
		next_state = LEGUP_F_main_BB__438_133;
LEGUP_F_main_BB_gsm_mult_rexit11i_138:
		next_state = LEGUP_F_main_BB_gsm_mult_rexit11i_139;
LEGUP_F_main_BB_gsm_mult_rexit11i_139:
	if ((main_gsm_mult_rexit11i_455 == 1'd1))
		next_state = LEGUP_F_main_BB_gsm_addexit8i_141;
	else if ((main_gsm_mult_rexit11i_455 == 1'd0))
		next_state = LEGUP_F_main_BB__456_140;
LEGUP_F_main_BB_gsm_mult_rexit6i_148:
		next_state = LEGUP_F_main_BB_gsm_mult_rexit6i_149;
LEGUP_F_main_BB_gsm_mult_rexit6i_149:
		next_state = LEGUP_F_main_BB_gsm_mult_rexit6i_150;
LEGUP_F_main_BB_gsm_mult_rexit6i_150:
		next_state = LEGUP_F_main_BB_gsm_mult_rexit6i_151;
LEGUP_F_main_BB_gsm_mult_rexit6i_151:
	if ((main_gsm_mult_rexit6i_479 == 1'd1))
		next_state = LEGUP_F_main_BB_gsm_addexit3i_153;
	else if ((main_gsm_mult_rexit6i_479 == 1'd0))
		next_state = LEGUP_F_main_BB__480_152;
LEGUP_F_main_BB_gsm_mult_rexiti13_160:
	if ((main_gsm_mult_rexiti13_496 == 1'd1))
		next_state = LEGUP_F_main_BB_gsm_addexiti_162;
	else if ((main_gsm_mult_rexiti13_496 == 1'd0))
		next_state = LEGUP_F_main_BB__497_161;
LEGUP_F_main_BB_gsm_mult_rexiti_36:
		next_state = LEGUP_F_main_BB_gsm_mult_rexiti_37;
LEGUP_F_main_BB_gsm_mult_rexiti_37:
		next_state = LEGUP_F_main_BB_gsm_mult_rexiti_38;
LEGUP_F_main_BB_gsm_mult_rexiti_38:
		next_state = LEGUP_F_main_BB_gsm_mult_rexiti_39;
LEGUP_F_main_BB_gsm_mult_rexiti_39:
		next_state = LEGUP_F_main_BB_gsm_mult_rexiti_40;
LEGUP_F_main_BB_gsm_mult_rexiti_40:
	if ((main_gsm_mult_rexiti_exitcond39i_reg == 1'd1))
		next_state = LEGUP_F_main_BB_threadi_41;
	else if ((main_gsm_mult_rexiti_exitcond39i_reg == 1'd0))
		next_state = LEGUP_F_main_BB_gsm_mult_rexiti_36;
LEGUP_F_main_BB_gsm_mult_rexitusi_34:
		next_state = LEGUP_F_main_BB_gsm_mult_rexitusi_35;
LEGUP_F_main_BB_gsm_mult_rexitusi_35:
	if ((main_gsm_mult_rexitusi_exitcond41i_reg == 1'd1))
		next_state = LEGUP_F_main_BB_threadi_41;
	else if ((main_gsm_mult_rexitusi_exitcond41i_reg == 1'd0))
		next_state = LEGUP_F_main_BB_preheader6splitusi_29;
LEGUP_F_main_BB_gsm_normexiti_76:
		next_state = LEGUP_F_main_BB_gsm_normexiti_77;
LEGUP_F_main_BB_gsm_normexiti_77:
		next_state = LEGUP_F_main_BB_gsm_normexiti_78;
LEGUP_F_main_BB_gsm_normexiti_78:
		next_state = LEGUP_F_main_BB_gsm_normexiti_79;
LEGUP_F_main_BB_gsm_normexiti_79:
		next_state = LEGUP_F_main_BB_gsm_normexiti_80;
LEGUP_F_main_BB_gsm_normexiti_80:
		next_state = LEGUP_F_main_BB_gsm_normexiti_81;
LEGUP_F_main_BB_gsm_normexiti_81:
		next_state = LEGUP_F_main_BB_gsm_normexiti_82;
LEGUP_F_main_BB_gsm_normexiti_82:
		next_state = LEGUP_F_main_BB_gsm_normexiti_83;
LEGUP_F_main_BB_gsm_normexiti_83:
		next_state = LEGUP_F_main_BB_gsm_normexiti_84;
LEGUP_F_main_BB_gsm_normexiti_84:
		next_state = LEGUP_F_main_BB_gsm_normexiti_85;
LEGUP_F_main_BB_gsm_normexiti_85:
		next_state = LEGUP_F_main_BB_gsm_normexiti_86;
LEGUP_F_main_BB_gsm_normexiti_86:
		next_state = LEGUP_F_main_BB_gsm_normexiti_87;
LEGUP_F_main_BB_gsm_normexiti_87:
		next_state = LEGUP_F_main_BB_gsm_normexiti_88;
LEGUP_F_main_BB_gsm_normexiti_88:
		next_state = LEGUP_F_main_BB_gsm_normexiti_89;
LEGUP_F_main_BB_gsm_normexiti_89:
		next_state = LEGUP_F_main_BB_gsm_normexiti_90;
LEGUP_F_main_BB_gsm_normexiti_90:
		next_state = LEGUP_F_main_BB_gsm_normexiti_91;
LEGUP_F_main_BB_gsm_normexiti_91:
		next_state = LEGUP_F_main_BB_gsm_normexiti_92;
LEGUP_F_main_BB_gsm_normexiti_92:
		next_state = LEGUP_F_main_BB__334_93;
LEGUP_F_main_BB_lrph27i_143:
		next_state = LEGUP_F_main_BB_lrph27i_144;
LEGUP_F_main_BB_lrph27i_144:
		next_state = LEGUP_F_main_BB_lrph27i_145;
LEGUP_F_main_BB_lrph27i_145:
	if ((main_lrph27i_orcondi4i == 1'd1))
		next_state = LEGUP_F_main_BB_gsm_mult_rexit6i_148;
	else if ((main_lrph27i_orcondi4i == 1'd0))
		next_state = LEGUP_F_main_BB__467_146;
LEGUP_F_main_BB_lrphi_98:
		next_state = LEGUP_F_main_BB_lrphi_99;
LEGUP_F_main_BB_lrphi_99:
	if ((main_lrphi_exitcondi10_reg == 1'd1))
		next_state = LEGUP_F_main_BB_Reflection_coefficientsexit_167;
	else if ((main_lrphi_exitcondi10_reg == 1'd0))
		next_state = LEGUP_F_main_BB_lrphi_98;
LEGUP_F_main_BB_preheader14i_97:
	if ((main_preheader14i_343 == 1'd1))
		next_state = LEGUP_F_main_BB_lrphi_98;
	else if ((main_preheader14i_343 == 1'd0))
		next_state = LEGUP_F_main_BB_Reflection_coefficientsexit_167;
LEGUP_F_main_BB_preheader5i_47:
	if ((main_threadi_91_reg == 1'd1))
		next_state = LEGUP_F_main_BB_preheaderi_54;
	else if ((main_threadi_91_reg == 1'd0))
		next_state = LEGUP_F_main_BB_Autocorrelationexit_58;
LEGUP_F_main_BB_preheader6i_28:
	if ((main_preheader6i_69 == 1'd1))
		next_state = LEGUP_F_main_BB_preheader6splitusi_29;
	else if ((main_preheader6i_69 == 1'd0))
		next_state = LEGUP_F_main_BB_gsm_mult_rexiti_36;
LEGUP_F_main_BB_preheader6splitusi_29:
		next_state = LEGUP_F_main_BB_preheader6splitusi_30;
LEGUP_F_main_BB_preheader6splitusi_30:
		next_state = LEGUP_F_main_BB_preheader6splitusi_31;
LEGUP_F_main_BB_preheader6splitusi_31:
	if ((main_preheader6splitusi_73 == 1'd1))
		next_state = LEGUP_F_main_BB_gsm_mult_rexitusi_34;
	else if ((main_preheader6splitusi_73 == 1'd0))
		next_state = LEGUP_F_main_BB__74_32;
LEGUP_F_main_BB_preheader_255:
		next_state = LEGUP_F_main_BB_preheader_256;
LEGUP_F_main_BB_preheader_256:
	if ((main_preheader_697 == 1'd1))
		next_state = LEGUP_F_main_BB__707_260;
	else if ((main_preheader_697 == 1'd0))
		next_state = LEGUP_F_main_BB__709_261;
LEGUP_F_main_BB_preheaderi5_59:
		next_state = LEGUP_function_call_60;
LEGUP_F_main_BB_preheaderi5_61:
		next_state = LEGUP_F_main_BB_Reflection_coefficientsexit_167;
LEGUP_F_main_BB_preheaderi_54:
		next_state = LEGUP_F_main_BB_preheaderi_55;
LEGUP_F_main_BB_preheaderi_55:
	if ((main_preheaderi_247_reg == 1'd1))
		next_state = LEGUP_F_main_BB__crit_edgei_56;
	else if ((main_preheaderi_247_reg == 1'd0))
		next_state = LEGUP_F_main_BB_Autocorrelationexit_58;
LEGUP_F_main_BB_preheaderii_101:
	if ((main_preheaderii_354 == 1'd1))
		next_state = LEGUP_F_main_BB_backedge1ii_103;
	else if ((main_preheaderii_354 == 1'd0))
		next_state = LEGUP_F_main_BB__355_102;
LEGUP_F_main_BB_thread102i_203:
		next_state = LEGUP_F_main_BB_thread102i_204;
LEGUP_F_main_BB_thread102i_204:
		next_state = LEGUP_F_main_BB_thread102i_205;
LEGUP_F_main_BB_thread102i_205:
		next_state = LEGUP_F_main_BB_thread102i_206;
LEGUP_F_main_BB_thread102i_206:
		next_state = LEGUP_F_main_BB_thread102i_207;
LEGUP_F_main_BB_thread102i_207:
	if ((main_thread102i_584 == 1'd1))
		next_state = LEGUP_F_main_BB_thread107i_213;
	else if ((main_thread102i_584 == 1'd0))
		next_state = LEGUP_F_main_BB__585_208;
LEGUP_F_main_BB_thread107i_213:
		next_state = LEGUP_F_main_BB_thread107i_214;
LEGUP_F_main_BB_thread107i_214:
		next_state = LEGUP_F_main_BB_thread107i_215;
LEGUP_F_main_BB_thread107i_215:
		next_state = LEGUP_F_main_BB_thread107i_216;
LEGUP_F_main_BB_thread107i_216:
		next_state = LEGUP_F_main_BB_thread107i_217;
LEGUP_F_main_BB_thread107i_217:
	if ((main_thread107i_603 == 1'd1))
		next_state = LEGUP_F_main_BB_thread112i_223;
	else if ((main_thread107i_603 == 1'd0))
		next_state = LEGUP_F_main_BB__604_218;
LEGUP_F_main_BB_thread112i_223:
		next_state = LEGUP_F_main_BB_thread112i_224;
LEGUP_F_main_BB_thread112i_224:
		next_state = LEGUP_F_main_BB_thread112i_225;
LEGUP_F_main_BB_thread112i_225:
		next_state = LEGUP_F_main_BB_thread112i_226;
LEGUP_F_main_BB_thread112i_226:
		next_state = LEGUP_F_main_BB_thread112i_227;
LEGUP_F_main_BB_thread112i_227:
	if ((main_thread112i_622 == 1'd1))
		next_state = LEGUP_F_main_BB_thread117i_233;
	else if ((main_thread112i_622 == 1'd0))
		next_state = LEGUP_F_main_BB__623_228;
LEGUP_F_main_BB_thread117i_233:
		next_state = LEGUP_F_main_BB_thread117i_234;
LEGUP_F_main_BB_thread117i_234:
		next_state = LEGUP_F_main_BB_thread117i_235;
LEGUP_F_main_BB_thread117i_235:
		next_state = LEGUP_F_main_BB_thread117i_236;
LEGUP_F_main_BB_thread117i_236:
		next_state = LEGUP_F_main_BB_thread117i_237;
LEGUP_F_main_BB_thread117i_237:
	if ((main_thread117i_641 == 1'd1))
		next_state = LEGUP_F_main_BB_thread122i_243;
	else if ((main_thread117i_641 == 1'd0))
		next_state = LEGUP_F_main_BB__642_238;
LEGUP_F_main_BB_thread122i_243:
		next_state = LEGUP_F_main_BB_thread122i_244;
LEGUP_F_main_BB_thread122i_244:
		next_state = LEGUP_F_main_BB_thread122i_245;
LEGUP_F_main_BB_thread122i_245:
		next_state = LEGUP_F_main_BB_thread122i_246;
LEGUP_F_main_BB_thread122i_246:
		next_state = LEGUP_F_main_BB_thread122i_247;
LEGUP_F_main_BB_thread122i_247:
	if ((main_thread122i_660 == 1'd1))
		next_state = LEGUP_F_main_BB_Quantization_and_codingexit_253;
	else if ((main_thread122i_660 == 1'd0))
		next_state = LEGUP_F_main_BB__661_248;
LEGUP_F_main_BB_thread98i_193:
		next_state = LEGUP_F_main_BB_thread98i_194;
LEGUP_F_main_BB_thread98i_194:
		next_state = LEGUP_F_main_BB_thread98i_195;
LEGUP_F_main_BB_thread98i_195:
		next_state = LEGUP_F_main_BB_thread98i_196;
LEGUP_F_main_BB_thread98i_196:
		next_state = LEGUP_F_main_BB_thread98i_197;
LEGUP_F_main_BB_thread98i_197:
	if ((main_thread98i_565 == 1'd1))
		next_state = LEGUP_F_main_BB_thread102i_203;
	else if ((main_thread98i_565 == 1'd0))
		next_state = LEGUP_F_main_BB__566_198;
LEGUP_F_main_BB_threadi4_185:
		next_state = LEGUP_F_main_BB_threadi4_186;
LEGUP_F_main_BB_threadi4_186:
		next_state = LEGUP_F_main_BB_threadi4_187;
LEGUP_F_main_BB_threadi4_187:
		next_state = LEGUP_F_main_BB_threadi4_188;
LEGUP_F_main_BB_threadi4_188:
		next_state = LEGUP_F_main_BB_threadi4_189;
LEGUP_F_main_BB_threadi4_189:
	if ((main_threadi4_549 == 1'd1))
		next_state = LEGUP_F_main_BB_thread98i_193;
	else if ((main_threadi4_549 == 1'd0))
		next_state = LEGUP_F_main_BB__550_190;
LEGUP_F_main_BB_threadi_41:
		next_state = LEGUP_F_main_BB_threadi_42;
LEGUP_F_main_BB_threadi_42:
		next_state = LEGUP_F_main_BB_threadi_43;
LEGUP_F_main_BB_threadi_43:
		next_state = LEGUP_F_main_BB_threadi_44;
LEGUP_F_main_BB_threadi_44:
		next_state = LEGUP_F_main_BB_threadi_45;
LEGUP_F_main_BB_threadi_45:
		next_state = LEGUP_F_main_BB_threadi_46;
LEGUP_F_main_BB_threadi_46:
		next_state = LEGUP_F_main_BB__187_48;
LEGUP_F_main_BB_threadii_175:
		next_state = LEGUP_F_main_BB__522_176;
LEGUP_function_call_60:
	if ((legup_memset_2_i64_finish_final == 1'd1))
		next_state = LEGUP_F_main_BB_preheaderi5_61;
default:
	next_state = cur_state;
endcase

end
always @(*) begin
	/* main: %1*/
	/*   %i.05 = phi i32 [ 0, %0 ], [ %5, %1 ]*/
	if (((cur_state == LEGUP_F_main_BB__0_1) & (memory_controller_waitrequest == 1'd0))) begin
		main_1_i05 = 32'd0;
	end
	/* main: %1*/
	/*   %i.05 = phi i32 [ 0, %0 ], [ %5, %1 ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__1_5) & (memory_controller_waitrequest == 1'd0)) & (main_1_exitcond7_reg == 1'd0))) */ begin
		main_1_i05 = main_1_5_reg;
	end
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %i.05 = phi i32 [ 0, %0 ], [ %5, %1 ]*/
	if (((cur_state == LEGUP_F_main_BB__0_1) & (memory_controller_waitrequest == 1'd0))) begin
		main_1_i05_reg <= main_1_i05;
		if (start == 1'b0 && ^(main_1_i05) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_i05_reg"); $finish; end
	end
	/* main: %1*/
	/*   %i.05 = phi i32 [ 0, %0 ], [ %5, %1 ]*/
	if ((((cur_state == LEGUP_F_main_BB__1_5) & (memory_controller_waitrequest == 1'd0)) & (main_1_exitcond7_reg == 1'd0))) begin
		main_1_i05_reg <= main_1_i05;
		if (start == 1'b0 && ^(main_1_i05) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_i05_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %gep_int = ptrtoint [160 x i16]* @inData to i32*/
if (reset) begin main_1_gep_int = 0; end
		main_1_gep_int = 1'd0;
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %gep_int = ptrtoint [160 x i16]* @inData to i32*/
	if ((cur_state == LEGUP_F_main_BB__1_2)) begin
		main_1_gep_int_reg <= main_1_gep_int;
		if (start == 1'b0 && ^(main_1_gep_int) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_gep_int_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %gep_array = mul i32 %i.05, 2*/
		main_1_gep_array = (main_1_i05_reg * 32'd2);
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %gep_array = mul i32 %i.05, 2*/
	if ((cur_state == LEGUP_F_main_BB__1_2)) begin
		main_1_gep_array_reg <= main_1_gep_array;
		if (start == 1'b0 && ^(main_1_gep_array) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_gep_array_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %gep = add i32 %gep_int, %gep_array*/
		main_1_gep = main_signed_add_32_0;
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %gep = add i32 %gep_int, %gep_array*/
	if ((cur_state == LEGUP_F_main_BB__1_3)) begin
		main_1_gep_reg <= main_1_gep;
		if (start == 1'b0 && ^(main_1_gep) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_gep_reg"); $finish; end
	end
	/* main: %33*/
	/*   %gep10 = add i32 %gep_int9, %34*/
	if ((cur_state == LEGUP_F_main_BB__33_18)) begin
		main_1_gep_reg <= main_33_gep10;
		if (start == 1'b0 && ^(main_33_gep10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_gep_reg"); $finish; end
	end
	/* main: %.preheader6.split.us.i*/
	/*   %gep19 = add i32 %gep_int17, %gep_array18*/
	if ((cur_state == LEGUP_F_main_BB_preheader6splitusi_30)) begin
		main_1_gep_reg <= main_preheader6splitusi_gep19;
		if (start == 1'b0 && ^(main_preheader6splitusi_gep19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_gep_reg"); $finish; end
	end
	/* main: %74*/
	/*   %77 = add nsw i32 %75, 16384*/
	if ((cur_state == LEGUP_F_main_BB__74_32)) begin
		main_1_gep_reg <= main_74_77;
		if (start == 1'b0 && ^(main_74_77) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_gep_reg"); $finish; end
	end
	/* main: %gsm_mult_r.exit.i*/
	/*   %gep22 = add i32 %gep_int20, %gep_array21*/
	if ((cur_state == LEGUP_F_main_BB_gsm_mult_rexiti_37)) begin
		main_1_gep_reg <= main_gsm_mult_rexiti_gep22;
		if (start == 1'b0 && ^(main_gsm_mult_rexiti_gep22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_gep_reg"); $finish; end
	end
	/* main: %8*/
	/*   %gep7 = add i32 %gep_int5, %gep_array6*/
	if ((cur_state == LEGUP_F_main_BB__8_8)) begin
		main_1_gep_reg <= main_8_gep7;
		if (start == 1'b0 && ^(main_8_gep7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_gep_reg"); $finish; end
	end
	/* main: %.thread.i*/
	/*   %148 = add nuw nsw i32 %147, %134*/
	if ((cur_state == LEGUP_F_main_BB_threadi_46)) begin
		main_1_gep_reg <= main_threadi_148;
		if (start == 1'b0 && ^(main_threadi_148) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_gep_reg"); $finish; end
	end
	/* main: %gsm_mult_r.exit.i*/
	/*   %86 = add nsw i32 %84, 16384*/
	if ((cur_state == LEGUP_F_main_BB_gsm_mult_rexiti_38)) begin
		main_1_gep_reg <= main_gsm_mult_rexiti_86;
		if (start == 1'b0 && ^(main_gsm_mult_rexiti_86) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_gep_reg"); $finish; end
	end
	/* main: %39*/
	/*   %gep12 = add i32 %gep_int11, %41*/
	if ((cur_state == LEGUP_F_main_BB__39_20)) begin
		main_1_gep_reg <= main_39_gep12;
		if (start == 1'b0 && ^(main_39_gep12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_gep_reg"); $finish; end
	end
	/* main: %49*/
	/*   %gep14 = add i32 %gep_int13, %51*/
	if ((cur_state == LEGUP_F_main_BB__49_23)) begin
		main_1_gep_reg <= main_49_gep14;
		if (start == 1'b0 && ^(main_49_gep14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_gep_reg"); $finish; end
	end
	/* main: %56*/
	/*   %gep16 = add i32 %gep_int15, %57*/
	if ((cur_state == LEGUP_F_main_BB__56_25)) begin
		main_1_gep_reg <= main_56_gep16;
		if (start == 1'b0 && ^(main_56_gep16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_gep_reg"); $finish; end
	end
	/* main: %62*/
	/*   %sext.off.i = add i32 %sext.i, -1*/
	if ((cur_state == LEGUP_F_main_BB__62_27)) begin
		main_1_gep_reg <= main_62_sextoffi;
		if (start == 1'b0 && ^(main_62_sextoffi) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_gep_reg"); $finish; end
	end
	/* main: %.preheader6.i*/
	/*   %66 = add nsw i32 %phitmp.i, -1*/
	if ((cur_state == LEGUP_F_main_BB_preheader6i_28)) begin
		main_1_gep_reg <= main_preheader6i_66;
		if (start == 1'b0 && ^(main_preheader6i_66) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_gep_reg"); $finish; end
	end
	/* main: %187*/
	/*   %215 = add nsw i32 %214, %194*/
	if ((cur_state == LEGUP_F_main_BB__187_51)) begin
		main_1_gep_reg <= main_187_215;
		if (start == 1'b0 && ^(main_187_215) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_gep_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %gep54 = add i32 %gep_int53, 2*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_54)) begin
		main_1_gep_reg <= main_preheaderi_gep54;
		if (start == 1'b0 && ^(main_preheaderi_gep54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_gep_reg"); $finish; end
	end
	/* main: %.thread.i*/
	/*   %gep24 = add i32 %gep_int23, 2*/
	if ((cur_state == LEGUP_F_main_BB_threadi_41)) begin
		main_1_gep_reg <= main_threadi_gep24;
		if (start == 1'b0 && ^(main_threadi_gep24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_gep_reg"); $finish; end
	end
	/* main: %.thread.i*/
	/*   %99 = add nuw nsw i32 %98, %94*/
	if ((cur_state == LEGUP_F_main_BB_threadi_43)) begin
		main_1_gep_reg <= main_threadi_99;
		if (start == 1'b0 && ^(main_threadi_99) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_gep_reg"); $finish; end
	end
	/* main: %.thread.i*/
	/*   %122 = add nuw nsw i32 %121, %112*/
	if ((cur_state == LEGUP_F_main_BB_threadi_45)) begin
		main_1_gep_reg <= main_threadi_122;
		if (start == 1'b0 && ^(main_threadi_122) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_gep_reg"); $finish; end
	end
	/* main: %.lr.ph.i*/
	/*   %gep109 = add i32 %gep_int108, 2*/
	if ((cur_state == LEGUP_F_main_BB_lrphi_98)) begin
		main_1_gep_reg <= main_lrphi_gep109;
		if (start == 1'b0 && ^(main_lrphi_gep109) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_gep_reg"); $finish; end
	end
	/* main: %522*/
	/*   %525 = add nsw i32 %i.02.i.i, 1*/
	if ((cur_state == LEGUP_F_main_BB__522_176)) begin
		main_1_gep_reg <= main_522_525;
		if (start == 1'b0 && ^(main_522_525) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_gep_reg"); $finish; end
	end
	/* main: %Gsm_LPC_Analysis.exit*/
	/*   %532 = add nsw i32 %531, 256*/
	if ((cur_state == LEGUP_F_main_BB_Gsm_LPC_Analysisexit_181)) begin
		main_1_gep_reg <= main_Gsm_LPC_Analysisexit_532;
		if (start == 1'b0 && ^(main_Gsm_LPC_Analysisexit_532) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_gep_reg"); $finish; end
	end
	/* main: %539*/
	/*   %540 = add nsw i32 %.op.i, 32*/
	if ((cur_state == LEGUP_F_main_BB__539_184)) begin
		main_1_gep_reg <= main_539_540;
		if (start == 1'b0 && ^(main_539_540) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_gep_reg"); $finish; end
	end
	/* main: %.thread.i4*/
	/*   %gep124 = add i32 %gep_int123, 2*/
	if ((cur_state == LEGUP_F_main_BB_threadi4_185)) begin
		main_1_gep_reg <= main_threadi4_gep124;
		if (start == 1'b0 && ^(main_threadi4_gep124) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_gep_reg"); $finish; end
	end
	/* main: %555*/
	/*   %556 = add nsw i32 %.op40.i, 32*/
	if ((cur_state == LEGUP_F_main_BB__555_192)) begin
		main_1_gep_reg <= main_555_556;
		if (start == 1'b0 && ^(main_555_556) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_gep_reg"); $finish; end
	end
	/* main: %.thread98.i*/
	/*   %gep126 = add i32 %gep_int125, 4*/
	if ((cur_state == LEGUP_F_main_BB_thread98i_193)) begin
		main_1_gep_reg <= main_thread98i_gep126;
		if (start == 1'b0 && ^(main_thread98i_gep126) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_gep_reg"); $finish; end
	end
	/* main: %566*/
	/*   %.op45.i = add nsw i32 %568, 256*/
	if ((cur_state == LEGUP_F_main_BB__566_198)) begin
		main_1_gep_reg <= main_566_op45i;
		if (start == 1'b0 && ^(main_566_op45i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_gep_reg"); $finish; end
	end
	/* main: %574*/
	/*   %575 = add nsw i32 %.op49.i, 16*/
	if ((cur_state == LEGUP_F_main_BB__574_202)) begin
		main_1_gep_reg <= main_574_575;
		if (start == 1'b0 && ^(main_574_575) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_gep_reg"); $finish; end
	end
	/* main: %.thread102.i*/
	/*   %gep128 = add i32 %gep_int127, 6*/
	if ((cur_state == LEGUP_F_main_BB_thread102i_203)) begin
		main_1_gep_reg <= main_thread102i_gep128;
		if (start == 1'b0 && ^(main_thread102i_gep128) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_gep_reg"); $finish; end
	end
	/* main: %.thread102.i*/
	/*   %581 = add i32 %580, 40960*/
	if ((cur_state == LEGUP_F_main_BB_thread102i_207)) begin
		main_1_gep_reg <= main_thread102i_581;
		if (start == 1'b0 && ^(main_thread102i_581) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_gep_reg"); $finish; end
	end
	/* main: %261*/
	/*   %gep70 = add i32 %gep_int69, %262*/
	if ((cur_state == LEGUP_F_main_BB__261_67)) begin
		main_1_gep_reg <= main_261_gep70;
		if (start == 1'b0 && ^(main_261_gep70) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_gep_reg"); $finish; end
	end
	/* main: %267*/
	/*   %gep72 = add i32 %gep_int71, %269*/
	if ((cur_state == LEGUP_F_main_BB__267_69)) begin
		main_1_gep_reg <= main_267_gep72;
		if (start == 1'b0 && ^(main_267_gep72) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_gep_reg"); $finish; end
	end
	/* main: %277*/
	/*   %gep74 = add i32 %gep_int73, %279*/
	if ((cur_state == LEGUP_F_main_BB__277_72)) begin
		main_1_gep_reg <= main_277_gep74;
		if (start == 1'b0 && ^(main_277_gep74) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_gep_reg"); $finish; end
	end
	/* main: %284*/
	/*   %gep76 = add i32 %gep_int75, %285*/
	if ((cur_state == LEGUP_F_main_BB__284_74)) begin
		main_1_gep_reg <= main_284_gep76;
		if (start == 1'b0 && ^(main_284_gep76) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_gep_reg"); $finish; end
	end
	/* main: %gsm_norm.exit.i*/
	/*   %gep78 = add i32 %gep_int77, 2*/
	if ((cur_state == LEGUP_F_main_BB_gsm_normexiti_76)) begin
		main_1_gep_reg <= main_gsm_normexiti_gep78;
		if (start == 1'b0 && ^(main_gsm_normexiti_gep78) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_gep_reg"); $finish; end
	end
	/* main: %.preheader*/
	/*   %674 = add nsw i32 %673, %.lcssa*/
	if ((cur_state == LEGUP_F_main_BB_preheader_255)) begin
		main_1_gep_reg <= main_preheader_674;
		if (start == 1'b0 && ^(main_preheader_674) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_gep_reg"); $finish; end
	end
	/* main: %698*/
	/*   %gep153 = add i32 %gep_int151, %gep_array152*/
	if ((cur_state == LEGUP_F_main_BB__698_258)) begin
		main_1_gep_reg <= main_698_gep153;
		if (start == 1'b0 && ^(main_698_gep153) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_gep_reg"); $finish; end
	end
	/* main: %445*/
	/*   %449 = add nsw i32 %447, 16384*/
	if ((cur_state == LEGUP_F_main_BB__445_136)) begin
		main_1_gep_reg <= main_445_449;
		if (start == 1'b0 && ^(main_445_449) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_gep_reg"); $finish; end
	end
	/* main: %gsm_mult_r.exit11.i*/
	/*   %454 = add nsw i32 %453, %.0.i10.i*/
	if ((cur_state == LEGUP_F_main_BB_gsm_mult_rexit11i_139)) begin
		main_1_gep_reg <= main_gsm_mult_rexit11i_454;
		if (start == 1'b0 && ^(main_gsm_mult_rexit11i_454) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_gep_reg"); $finish; end
	end
	/* main: %.lr.ph27.i*/
	/*   %gep112 = add i32 %gep_int110, %gep_array111*/
	if ((cur_state == LEGUP_F_main_BB_lrph27i_144)) begin
		main_1_gep_reg <= main_lrph27i_gep112;
		if (start == 1'b0 && ^(main_lrph27i_gep112) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_gep_reg"); $finish; end
	end
	/* main: %467*/
	/*   %471 = add nsw i32 %469, 16384*/
	if ((cur_state == LEGUP_F_main_BB__467_146)) begin
		main_1_gep_reg <= main_467_471;
		if (start == 1'b0 && ^(main_467_471) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_gep_reg"); $finish; end
	end
	/* main: %gsm_mult_r.exit6.i*/
	/*   %gep115 = add i32 %gep_int113, %gep_array114*/
	if ((cur_state == LEGUP_F_main_BB_gsm_mult_rexit6i_150)) begin
		main_1_gep_reg <= main_gsm_mult_rexit6i_gep115;
		if (start == 1'b0 && ^(main_gsm_mult_rexit6i_gep115) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_gep_reg"); $finish; end
	end
	/* main: %gsm_add.exit3.i*/
	/*   %gep118 = add i32 %gep_int116, %gep_array117*/
	if ((cur_state == LEGUP_F_main_BB_gsm_addexit3i_154)) begin
		main_1_gep_reg <= main_gsm_addexit3i_gep118;
		if (start == 1'b0 && ^(main_gsm_addexit3i_gep118) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_gep_reg"); $finish; end
	end
	/* main: %488*/
	/*   %491 = add nsw i32 %477, 16384*/
	if ((cur_state == LEGUP_F_main_BB__488_158)) begin
		main_1_gep_reg <= main_488_491;
		if (start == 1'b0 && ^(main_488_491) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_gep_reg"); $finish; end
	end
	/* main: %gsm_mult_r.exit.i13*/
	/*   %495 = add nsw i32 %494, %.0.i1.i12*/
	if ((cur_state == LEGUP_F_main_BB_gsm_mult_rexiti13_160)) begin
		main_1_gep_reg <= main_gsm_mult_rexiti13_495;
		if (start == 1'b0 && ^(main_gsm_mult_rexiti13_495) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_gep_reg"); $finish; end
	end
	/* main: %._crit_edge.i14*/
	/*   %501 = add nsw i32 %n.029.i, 1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei14_164)) begin
		main_1_gep_reg <= main__crit_edgei14_501;
		if (start == 1'b0 && ^(main__crit_edgei14_501) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_gep_reg"); $finish; end
	end
	/* main: %585*/
	/*   %.op54.i = add nsw i32 %587, 256*/
	if ((cur_state == LEGUP_F_main_BB__585_208)) begin
		main_1_gep_reg <= main_585_op54i;
		if (start == 1'b0 && ^(main_585_op54i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_gep_reg"); $finish; end
	end
	/* main: %593*/
	/*   %594 = add nsw i32 %.op58.i, 16*/
	if ((cur_state == LEGUP_F_main_BB__593_212)) begin
		main_1_gep_reg <= main_593_594;
		if (start == 1'b0 && ^(main_593_594) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_gep_reg"); $finish; end
	end
	/* main: %.thread107.i*/
	/*   %gep130 = add i32 %gep_int129, 8*/
	if ((cur_state == LEGUP_F_main_BB_thread107i_213)) begin
		main_1_gep_reg <= main_thread107i_gep130;
		if (start == 1'b0 && ^(main_thread107i_gep130) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_gep_reg"); $finish; end
	end
	/* main: %604*/
	/*   %.op63.i = add nsw i32 %606, 256*/
	if ((cur_state == LEGUP_F_main_BB__604_218)) begin
		main_1_gep_reg <= main_604_op63i;
		if (start == 1'b0 && ^(main_604_op63i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_gep_reg"); $finish; end
	end
	/* main: %612*/
	/*   %613 = add nsw i32 %.op67.i, 8*/
	if ((cur_state == LEGUP_F_main_BB__612_222)) begin
		main_1_gep_reg <= main_612_613;
		if (start == 1'b0 && ^(main_612_613) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_gep_reg"); $finish; end
	end
	/* main: %.thread112.i*/
	/*   %gep132 = add i32 %gep_int131, 10*/
	if ((cur_state == LEGUP_F_main_BB_thread112i_223)) begin
		main_1_gep_reg <= main_thread112i_gep132;
		if (start == 1'b0 && ^(main_thread112i_gep132) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_gep_reg"); $finish; end
	end
	/* main: %.thread112.i*/
	/*   %619 = add i32 %618, 30720*/
	if ((cur_state == LEGUP_F_main_BB_thread112i_227)) begin
		main_1_gep_reg <= main_thread112i_619;
		if (start == 1'b0 && ^(main_thread112i_619) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_gep_reg"); $finish; end
	end
	/* main: %623*/
	/*   %.op72.i = add nsw i32 %625, 256*/
	if ((cur_state == LEGUP_F_main_BB__623_228)) begin
		main_1_gep_reg <= main_623_op72i;
		if (start == 1'b0 && ^(main_623_op72i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_gep_reg"); $finish; end
	end
	/* main: %631*/
	/*   %632 = add nsw i32 %.op76.i, 8*/
	if ((cur_state == LEGUP_F_main_BB__631_232)) begin
		main_1_gep_reg <= main_631_632;
		if (start == 1'b0 && ^(main_631_632) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_gep_reg"); $finish; end
	end
	/* main: %.thread117.i*/
	/*   %gep134 = add i32 %gep_int133, 12*/
	if ((cur_state == LEGUP_F_main_BB_thread117i_233)) begin
		main_1_gep_reg <= main_thread117i_gep134;
		if (start == 1'b0 && ^(main_thread117i_gep134) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_gep_reg"); $finish; end
	end
	/* main: %.thread117.i*/
	/*   %638 = add i32 %637, 17068*/
	if ((cur_state == LEGUP_F_main_BB_thread117i_237)) begin
		main_1_gep_reg <= main_thread117i_638;
		if (start == 1'b0 && ^(main_thread117i_638) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_gep_reg"); $finish; end
	end
	/* main: %642*/
	/*   %.op81.i = add nsw i32 %644, 256*/
	if ((cur_state == LEGUP_F_main_BB__642_238)) begin
		main_1_gep_reg <= main_642_op81i;
		if (start == 1'b0 && ^(main_642_op81i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_gep_reg"); $finish; end
	end
	/* main: %650*/
	/*   %651 = add nsw i32 %.op85.i, 4*/
	if ((cur_state == LEGUP_F_main_BB__650_242)) begin
		main_1_gep_reg <= main_650_651;
		if (start == 1'b0 && ^(main_650_651) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_gep_reg"); $finish; end
	end
	/* main: %.thread122.i*/
	/*   %gep136 = add i32 %gep_int135, 14*/
	if ((cur_state == LEGUP_F_main_BB_thread122i_243)) begin
		main_1_gep_reg <= main_thread122i_gep136;
		if (start == 1'b0 && ^(main_thread122i_gep136) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_gep_reg"); $finish; end
	end
	/* main: %.thread122.i*/
	/*   %657 = add i32 %656, 18072*/
	if ((cur_state == LEGUP_F_main_BB_thread122i_247)) begin
		main_1_gep_reg <= main_thread122i_657;
		if (start == 1'b0 && ^(main_thread122i_657) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_gep_reg"); $finish; end
	end
	/* main: %661*/
	/*   %.op90.i = add nsw i32 %663, 256*/
	if ((cur_state == LEGUP_F_main_BB__661_248)) begin
		main_1_gep_reg <= main_661_op90i;
		if (start == 1'b0 && ^(main_661_op90i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_gep_reg"); $finish; end
	end
	/* main: %669*/
	/*   %670 = add nsw i32 %.op94.i, 4*/
	if ((cur_state == LEGUP_F_main_BB__669_252)) begin
		main_1_gep_reg <= main_669_670;
		if (start == 1'b0 && ^(main_669_670) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_gep_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %2 = inttoptr i32 %gep to i16**/
		main_1_2 = main_1_gep;
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %2 = inttoptr i32 %gep to i16**/
	if ((cur_state == LEGUP_F_main_BB__1_3)) begin
		main_1_2_reg <= main_1_2;
		if (start == 1'b0 && ^(main_1_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_2_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %3 = load i16* %2, align 2, !tbaa !1*/
		main_1_3 = inData_out_a;
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %3 = load i16* %2, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_4)) begin
		main_1_3_reg <= main_1_3;
		if (start == 1'b0 && ^(main_1_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_3_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %gep_int1 = ptrtoint [160 x i16]* %so to i32*/
if (reset) begin main_1_gep_int1 = 0; end
		main_1_gep_int1 = 1'd0;
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %gep_int1 = ptrtoint [160 x i16]* %so to i32*/
	if ((cur_state == LEGUP_F_main_BB__1_2)) begin
		main_1_gep_int1_reg <= main_1_gep_int1;
		if (start == 1'b0 && ^(main_1_gep_int1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_gep_int1_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %gep_array2 = mul i32 %i.05, 2*/
		main_1_gep_array2 = (main_1_i05_reg * 32'd2);
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %gep_array2 = mul i32 %i.05, 2*/
	if ((cur_state == LEGUP_F_main_BB__1_2)) begin
		main_1_gep_array2_reg <= main_1_gep_array2;
		if (start == 1'b0 && ^(main_1_gep_array2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_gep_array2_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %gep3 = add i32 %gep_int1, %gep_array2*/
		main_1_gep3 = main_signed_add_32_1;
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %gep3 = add i32 %gep_int1, %gep_array2*/
	if ((cur_state == LEGUP_F_main_BB__1_3)) begin
		main_1_gep3_reg <= main_1_gep3;
		if (start == 1'b0 && ^(main_1_gep3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_gep3_reg"); $finish; end
	end
	/* main: %.thread.i*/
	/*   %124 = add nsw i32 %123, %114*/
	if ((cur_state == LEGUP_F_main_BB_threadi_45)) begin
		main_1_gep3_reg <= main_threadi_124;
		if (start == 1'b0 && ^(main_threadi_124) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_gep3_reg"); $finish; end
	end
	/* main: %.thread.i*/
	/*   %150 = add nsw i32 %149, %136*/
	if ((cur_state == LEGUP_F_main_BB_threadi_46)) begin
		main_1_gep3_reg <= main_threadi_150;
		if (start == 1'b0 && ^(main_threadi_150) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_gep3_reg"); $finish; end
	end
	/* main: %187*/
	/*   %220 = add nsw i32 %219, %193*/
	if ((cur_state == LEGUP_F_main_BB__187_51)) begin
		main_1_gep3_reg <= main_187_220;
		if (start == 1'b0 && ^(main_187_220) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_gep3_reg"); $finish; end
	end
	/* main: %.thread.i*/
	/*   %gep26 = add i32 %gep_int25, 4*/
	if ((cur_state == LEGUP_F_main_BB_threadi_41)) begin
		main_1_gep3_reg <= main_threadi_gep26;
		if (start == 1'b0 && ^(main_threadi_gep26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_gep3_reg"); $finish; end
	end
	/* main: %.thread.i*/
	/*   %105 = add nsw i32 %102, %93*/
	if ((cur_state == LEGUP_F_main_BB_threadi_43)) begin
		main_1_gep3_reg <= main_threadi_105;
		if (start == 1'b0 && ^(main_threadi_105) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_gep3_reg"); $finish; end
	end
	/* main: %.lr.ph.i*/
	/*   %345 = add nsw i32 %i.425.i, 1*/
	if ((cur_state == LEGUP_F_main_BB_lrphi_98)) begin
		main_1_gep3_reg <= main_lrphi_345;
		if (start == 1'b0 && ^(main_lrphi_345) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_gep3_reg"); $finish; end
	end
	/* main: %522*/
	/*   %gep122 = add i32 %gep_int121, 2*/
	if ((cur_state == LEGUP_F_main_BB__522_176)) begin
		main_1_gep3_reg <= main_522_gep122;
		if (start == 1'b0 && ^(main_522_gep122) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_gep3_reg"); $finish; end
	end
	/* main: %Gsm_LPC_Analysis.exit*/
	/*   %530 = add i32 %529, 40960*/
	if ((cur_state == LEGUP_F_main_BB_Gsm_LPC_Analysisexit_181)) begin
		main_1_gep3_reg <= main_Gsm_LPC_Analysisexit_530;
		if (start == 1'b0 && ^(main_Gsm_LPC_Analysisexit_530) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_gep3_reg"); $finish; end
	end
	/* main: %.thread.i4*/
	/*   %546 = add i32 %545, 40960*/
	if ((cur_state == LEGUP_F_main_BB_threadi4_189)) begin
		main_1_gep3_reg <= main_threadi4_546;
		if (start == 1'b0 && ^(main_threadi4_546) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_gep3_reg"); $finish; end
	end
	/* main: %.thread98.i*/
	/*   %562 = add i32 %561, 40960*/
	if ((cur_state == LEGUP_F_main_BB_thread98i_197)) begin
		main_1_gep3_reg <= main_thread98i_562;
		if (start == 1'b0 && ^(main_thread98i_562) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_gep3_reg"); $finish; end
	end
	/* main: %.thread102.i*/
	/*   %583 = add nsw i32 %582, -2560*/
	if ((cur_state == LEGUP_F_main_BB_thread102i_207)) begin
		main_1_gep3_reg <= main_thread102i_583;
		if (start == 1'b0 && ^(main_thread102i_583) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_gep3_reg"); $finish; end
	end
	/* main: %gsm_norm.exit.i*/
	/*   %gep80 = add i32 %gep_int79, 4*/
	if ((cur_state == LEGUP_F_main_BB_gsm_normexiti_76)) begin
		main_1_gep3_reg <= main_gsm_normexiti_gep80;
		if (start == 1'b0 && ^(main_gsm_normexiti_gep80) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_gep3_reg"); $finish; end
	end
	/* main: %.preheader*/
	/*   %677 = add nsw i32 %676, %674*/
	if ((cur_state == LEGUP_F_main_BB_preheader_255)) begin
		main_1_gep3_reg <= main_preheader_677;
		if (start == 1'b0 && ^(main_preheader_677) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_gep3_reg"); $finish; end
	end
	/* main: %698*/
	/*   %gep156 = add i32 %gep_int154, %gep_array155*/
	if ((cur_state == LEGUP_F_main_BB__698_258)) begin
		main_1_gep3_reg <= main_698_gep156;
		if (start == 1'b0 && ^(main_698_gep156) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_gep3_reg"); $finish; end
	end
	/* main: %._crit_edge43.i*/
	/*   %gep120 = add i32 %gep_int119, 2*/
	if ((cur_state == LEGUP_F_main_BB__crit_edge43i_165)) begin
		main_1_gep3_reg <= main__crit_edge43i_gep120;
		if (start == 1'b0 && ^(main__crit_edge43i_gep120) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_gep3_reg"); $finish; end
	end
	/* main: %.thread107.i*/
	/*   %600 = add i32 %599, 27928*/
	if ((cur_state == LEGUP_F_main_BB_thread107i_217)) begin
		main_1_gep3_reg <= main_thread107i_600;
		if (start == 1'b0 && ^(main_thread107i_600) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_gep3_reg"); $finish; end
	end
	/* main: %.thread112.i*/
	/*   %621 = add nsw i32 %620, -1792*/
	if ((cur_state == LEGUP_F_main_BB_thread112i_227)) begin
		main_1_gep3_reg <= main_thread112i_621;
		if (start == 1'b0 && ^(main_thread112i_621) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_gep3_reg"); $finish; end
	end
	/* main: %.thread117.i*/
	/*   %640 = add nsw i32 %639, -341*/
	if ((cur_state == LEGUP_F_main_BB_thread117i_237)) begin
		main_1_gep3_reg <= main_thread117i_640;
		if (start == 1'b0 && ^(main_thread117i_640) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_gep3_reg"); $finish; end
	end
	/* main: %.thread122.i*/
	/*   %659 = add nsw i32 %658, -1144*/
	if ((cur_state == LEGUP_F_main_BB_thread122i_247)) begin
		main_1_gep3_reg <= main_thread122i_659;
		if (start == 1'b0 && ^(main_thread122i_659) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_gep3_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %4 = inttoptr i32 %gep3 to i16**/
		main_1_4 = main_1_gep3;
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %4 = inttoptr i32 %gep3 to i16**/
	if ((cur_state == LEGUP_F_main_BB__1_3)) begin
		main_1_4_reg <= main_1_4;
		if (start == 1'b0 && ^(main_1_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_4_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %5 = add nsw i32 %i.05, 1*/
		main_1_5 = main_signed_add_32_0;
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %5 = add nsw i32 %i.05, 1*/
	if ((cur_state == LEGUP_F_main_BB__1_2)) begin
		main_1_5_reg <= main_1_5;
		if (start == 1'b0 && ^(main_1_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_5_reg"); $finish; end
	end
	/* main: %74*/
	/*   %78 = add i32 %77, %76*/
	if ((cur_state == LEGUP_F_main_BB__74_33)) begin
		main_1_5_reg <= main_74_78;
		if (start == 1'b0 && ^(main_74_78) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_5_reg"); $finish; end
	end
	/* main: %gsm_mult_r.exit.i*/
	/*   %87 = add i32 %86, %85*/
	if ((cur_state == LEGUP_F_main_BB_gsm_mult_rexiti_39)) begin
		main_1_5_reg <= main_gsm_mult_rexiti_87;
		if (start == 1'b0 && ^(main_gsm_mult_rexiti_87) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_5_reg"); $finish; end
	end
	/* main: %187*/
	/*   %225 = add nsw i32 %224, %192*/
	if ((cur_state == LEGUP_F_main_BB__187_52)) begin
		main_1_5_reg <= main_187_225;
		if (start == 1'b0 && ^(main_187_225) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_5_reg"); $finish; end
	end
	/* main: %._crit_edge.i*/
	/*   %248 = add nsw i32 %k.47.i, -1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_56)) begin
		main_1_5_reg <= main__crit_edgei_248;
		if (start == 1'b0 && ^(main__crit_edgei_248) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_5_reg"); $finish; end
	end
	/* main: %.thread.i*/
	/*   %104 = add nuw nsw i32 %103, %99*/
	if ((cur_state == LEGUP_F_main_BB_threadi_44)) begin
		main_1_5_reg <= main_threadi_104;
		if (start == 1'b0 && ^(main_threadi_104) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_5_reg"); $finish; end
	end
	/* main: %.thread.i4*/
	/*   %548 = add nsw i32 %547, 256*/
	if ((cur_state == LEGUP_F_main_BB_threadi4_189)) begin
		main_1_5_reg <= main_threadi4_548;
		if (start == 1'b0 && ^(main_threadi4_548) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_5_reg"); $finish; end
	end
	/* main: %.thread98.i*/
	/*   %564 = add nsw i32 %563, 2048*/
	if ((cur_state == LEGUP_F_main_BB_thread98i_197)) begin
		main_1_5_reg <= main_thread98i_564;
		if (start == 1'b0 && ^(main_thread98i_564) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_5_reg"); $finish; end
	end
	/* main: %.preheader*/
	/*   %695 = add nsw i32 %694, %692*/
	if ((cur_state == LEGUP_F_main_BB_preheader_256)) begin
		main_1_5_reg <= main_preheader_695;
		if (start == 1'b0 && ^(main_preheader_695) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_5_reg"); $finish; end
	end
	/* main: %445*/
	/*   %450 = add i32 %449, %448*/
	if ((cur_state == LEGUP_F_main_BB__445_137)) begin
		main_1_5_reg <= main_445_450;
		if (start == 1'b0 && ^(main_445_450) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_5_reg"); $finish; end
	end
	/* main: %467*/
	/*   %472 = add i32 %471, %470*/
	if ((cur_state == LEGUP_F_main_BB__467_147)) begin
		main_1_5_reg <= main_467_472;
		if (start == 1'b0 && ^(main_467_472) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_5_reg"); $finish; end
	end
	/* main: %gsm_mult_r.exit6.i*/
	/*   %478 = add nsw i32 %477, %.0.i5.i*/
	if ((cur_state == LEGUP_F_main_BB_gsm_mult_rexit6i_151)) begin
		main_1_5_reg <= main_gsm_mult_rexit6i_478;
		if (start == 1'b0 && ^(main_gsm_mult_rexit6i_478) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_5_reg"); $finish; end
	end
	/* main: %488*/
	/*   %492 = add i32 %491, %490*/
	if ((cur_state == LEGUP_F_main_BB__488_159)) begin
		main_1_5_reg <= main_488_492;
		if (start == 1'b0 && ^(main_488_492) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_5_reg"); $finish; end
	end
	/* main: %._crit_edge43.i*/
	/*   %indvars.iv.next.i = add i32 %indvars.iv.i, -1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edge43i_165)) begin
		main_1_5_reg <= main__crit_edge43i_indvarsivnexti;
		if (start == 1'b0 && ^(main__crit_edge43i_indvarsivnexti) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_5_reg"); $finish; end
	end
	/* main: %.thread107.i*/
	/*   %602 = add nsw i32 %601, 94*/
	if ((cur_state == LEGUP_F_main_BB_thread107i_217)) begin
		main_1_5_reg <= main_thread107i_602;
		if (start == 1'b0 && ^(main_thread107i_602) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_5_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %exitcond7 = icmp eq i32 %5, 160*/
		main_1_exitcond7 = (main_1_5 == 32'd160);
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %exitcond7 = icmp eq i32 %5, 160*/
	if ((cur_state == LEGUP_F_main_BB__1_2)) begin
		main_1_exitcond7_reg <= main_1_exitcond7;
		if (start == 1'b0 && ^(main_1_exitcond7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_exitcond7_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %gep_int4 = ptrtoint [160 x i16]* %so to i32*/
if (reset) begin main_6_gep_int4 = 0; end
		main_6_gep_int4 = 1'd0;
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %gep_int4 = ptrtoint [160 x i16]* %so to i32*/
	if ((cur_state == LEGUP_F_main_BB__6_6)) begin
		main_6_gep_int4_reg <= main_6_gep_int4;
		if (start == 1'b0 && ^(main_6_gep_int4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_gep_int4_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %7 = inttoptr i32 %gep_int4 to i16**/
		main_6_7 = main_6_gep_int4;
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %7 = inttoptr i32 %gep_int4 to i16**/
	if ((cur_state == LEGUP_F_main_BB__6_6)) begin
		main_6_7_reg <= main_6_7;
		if (start == 1'b0 && ^(main_6_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_7_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %8*/
	/*   %smax.030.i = phi i16 [ 0, %6 ], [ %.smax.0.i, %gsm_abs.exit.i ]*/
	if (((cur_state == LEGUP_F_main_BB__6_6) & (memory_controller_waitrequest == 1'd0))) begin
		main_8_smax030i = 16'd0;
	end
	/* main: %8*/
	/*   %smax.030.i = phi i16 [ 0, %6 ], [ %.smax.0.i, %gsm_abs.exit.i ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_gsm_absexiti_11) & (memory_controller_waitrequest == 1'd0)) & (main_gsm_absexiti_exitcond40i == 1'd0))) */ begin
		main_8_smax030i = main_gsm_absexiti_smax0i;
	end
end
always @(posedge clk) begin
	/* main: %8*/
	/*   %smax.030.i = phi i16 [ 0, %6 ], [ %.smax.0.i, %gsm_abs.exit.i ]*/
	if (((cur_state == LEGUP_F_main_BB__6_6) & (memory_controller_waitrequest == 1'd0))) begin
		main_8_smax030i_reg <= main_8_smax030i;
		if (start == 1'b0 && ^(main_8_smax030i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_8_smax030i_reg"); $finish; end
	end
	/* main: %8*/
	/*   %smax.030.i = phi i16 [ 0, %6 ], [ %.smax.0.i, %gsm_abs.exit.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_gsm_absexiti_11) & (memory_controller_waitrequest == 1'd0)) & (main_gsm_absexiti_exitcond40i == 1'd0))) begin
		main_8_smax030i_reg <= main_8_smax030i;
		if (start == 1'b0 && ^(main_8_smax030i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_8_smax030i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %8*/
	/*   %k.029.i = phi i32 [ 0, %6 ], [ %17, %gsm_abs.exit.i ]*/
	if (((cur_state == LEGUP_F_main_BB__6_6) & (memory_controller_waitrequest == 1'd0))) begin
		main_8_k029i = 32'd0;
	end
	/* main: %8*/
	/*   %k.029.i = phi i32 [ 0, %6 ], [ %17, %gsm_abs.exit.i ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_gsm_absexiti_11) & (memory_controller_waitrequest == 1'd0)) & (main_gsm_absexiti_exitcond40i == 1'd0))) */ begin
		main_8_k029i = main_gsm_absexiti_17;
	end
end
always @(posedge clk) begin
	/* main: %8*/
	/*   %k.029.i = phi i32 [ 0, %6 ], [ %17, %gsm_abs.exit.i ]*/
	if (((cur_state == LEGUP_F_main_BB__6_6) & (memory_controller_waitrequest == 1'd0))) begin
		main_8_k029i_reg <= main_8_k029i;
		if (start == 1'b0 && ^(main_8_k029i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_8_k029i_reg"); $finish; end
	end
	/* main: %8*/
	/*   %k.029.i = phi i32 [ 0, %6 ], [ %17, %gsm_abs.exit.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_gsm_absexiti_11) & (memory_controller_waitrequest == 1'd0)) & (main_gsm_absexiti_exitcond40i == 1'd0))) begin
		main_8_k029i_reg <= main_8_k029i;
		if (start == 1'b0 && ^(main_8_k029i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_8_k029i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %8*/
	/*   %gep_int5 = ptrtoint i16* %7 to i32*/
		main_8_gep_int5 = main_6_7_reg;
end
always @(posedge clk) begin
	/* main: %8*/
	/*   %gep_int5 = ptrtoint i16* %7 to i32*/
	if ((cur_state == LEGUP_F_main_BB__8_7)) begin
		main_8_gep_int5_reg <= main_8_gep_int5;
		if (start == 1'b0 && ^(main_8_gep_int5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_8_gep_int5_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %8*/
	/*   %gep_array6 = mul i32 %k.029.i, 2*/
		main_8_gep_array6 = (main_8_k029i_reg * 32'd2);
end
always @(posedge clk) begin
	/* main: %8*/
	/*   %gep_array6 = mul i32 %k.029.i, 2*/
	if ((cur_state == LEGUP_F_main_BB__8_7)) begin
		main_8_gep_array6_reg <= main_8_gep_array6;
		if (start == 1'b0 && ^(main_8_gep_array6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_8_gep_array6_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %8*/
	/*   %gep7 = add i32 %gep_int5, %gep_array6*/
		main_8_gep7 = main_signed_add_32_0;
end
always @(*) begin
/* main: %8*/
/*   %gep7 = add i32 %gep_int5, %gep_array6*/
	main_8_gep7_reg = main_1_gep_reg;
end
always @(*) begin
	/* main: %8*/
	/*   %9 = inttoptr i32 %gep7 to i16**/
		main_8_9 = main_8_gep7;
end
always @(posedge clk) begin
	/* main: %8*/
	/*   %9 = inttoptr i32 %gep7 to i16**/
	if ((cur_state == LEGUP_F_main_BB__8_8)) begin
		main_8_9_reg <= main_8_9;
		if (start == 1'b0 && ^(main_8_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_8_9_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %8*/
	/*   %10 = load i16* %9, align 2, !tbaa !1*/
		main_8_10 = main_0_so_out_a;
end
always @(posedge clk) begin
	/* main: %8*/
	/*   %10 = load i16* %9, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__8_9)) begin
		main_8_10_reg <= main_8_10;
		if (start == 1'b0 && ^(main_8_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_8_10_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %8*/
	/*   %11 = icmp slt i16 %10, 0*/
		main_8_11 = ($signed(main_8_10) < $signed(16'd0));
end
always @(posedge clk) begin
	/* main: %8*/
	/*   %11 = icmp slt i16 %10, 0*/
	if ((cur_state == LEGUP_F_main_BB__8_9)) begin
		main_8_11_reg <= main_8_11;
		if (start == 1'b0 && ^(main_8_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_8_11_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %12*/
	/*   %13 = icmp eq i16 %10, -32768*/
		main_12_13 = (main_8_10_reg == -16'd32768);
end
always @(posedge clk) begin
	/* main: %12*/
	/*   %13 = icmp eq i16 %10, -32768*/
	if ((cur_state == LEGUP_F_main_BB__12_10)) begin
		main_12_13_reg <= main_12_13;
		if (start == 1'b0 && ^(main_12_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_12_13_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %12*/
	/*   %14 = sub i16 0, %10*/
		main_12_14 = main_signed_subtract_16_0;
end
always @(posedge clk) begin
	/* main: %12*/
	/*   %14 = sub i16 0, %10*/
	if ((cur_state == LEGUP_F_main_BB__12_10)) begin
		main_12_14_reg <= main_12_14;
		if (start == 1'b0 && ^(main_12_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_12_14_reg"); $finish; end
	end
	/* main: %337*/
	/*   %339 = sub i16 0, %335*/
	if ((cur_state == LEGUP_F_main_BB__337_94)) begin
		main_12_14_reg <= main_337_339;
		if (start == 1'b0 && ^(main_337_339) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_12_14_reg"); $finish; end
	end
	/* main: %522*/
	/*   %523 = sub i16 0, %temp.0.i.i*/
	if ((cur_state == LEGUP_F_main_BB__522_176)) begin
		main_12_14_reg <= main_522_523;
		if (start == 1'b0 && ^(main_522_523) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_12_14_reg"); $finish; end
	end
	/* main: %436*/
	/*   %437 = sub i16 0, %433*/
	if ((cur_state == LEGUP_F_main_BB__436_131)) begin
		main_12_14_reg <= main_436_437;
		if (start == 1'b0 && ^(main_436_437) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_12_14_reg"); $finish; end
	end
	/* main: %506*/
	/*   %508 = sub i16 0, %504*/
	if ((cur_state == LEGUP_F_main_BB__506_170)) begin
		main_12_14_reg <= main_506_508;
		if (start == 1'b0 && ^(main_506_508) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_12_14_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %12*/
	/*   %..i.i = select i1 %13, i16 32767, i16 %14*/
		main_12_ii = (main_12_13 ? 16'd32767 : main_12_14);
end
always @(posedge clk) begin
	/* main: %12*/
	/*   %..i.i = select i1 %13, i16 32767, i16 %14*/
	if ((cur_state == LEGUP_F_main_BB__12_10)) begin
		main_12_ii_reg <= main_12_ii;
		if (start == 1'b0 && ^(main_12_ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_12_ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_abs.exit.i*/
	/*   %15 = phi i16 [ %..i.i, %12 ], [ %10, %8 ]*/
	if ((((cur_state == LEGUP_F_main_BB__8_9) & (memory_controller_waitrequest == 1'd0)) & (main_8_11 == 1'd0))) begin
		main_gsm_absexiti_15 = main_8_10;
	end
	/* main: %gsm_abs.exit.i*/
	/*   %15 = phi i16 [ %..i.i, %12 ], [ %10, %8 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__12_10) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_gsm_absexiti_15 = main_12_ii;
	end
end
always @(posedge clk) begin
	/* main: %gsm_abs.exit.i*/
	/*   %15 = phi i16 [ %..i.i, %12 ], [ %10, %8 ]*/
	if ((((cur_state == LEGUP_F_main_BB__8_9) & (memory_controller_waitrequest == 1'd0)) & (main_8_11 == 1'd0))) begin
		main_gsm_absexiti_15_reg <= main_gsm_absexiti_15;
		if (start == 1'b0 && ^(main_gsm_absexiti_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_absexiti_15_reg"); $finish; end
	end
	/* main: %gsm_abs.exit.i*/
	/*   %15 = phi i16 [ %..i.i, %12 ], [ %10, %8 ]*/
	if (((cur_state == LEGUP_F_main_BB__12_10) & (memory_controller_waitrequest == 1'd0))) begin
		main_gsm_absexiti_15_reg <= main_gsm_absexiti_15;
		if (start == 1'b0 && ^(main_gsm_absexiti_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_absexiti_15_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_abs.exit.i*/
	/*   %16 = icmp sgt i16 %15, %smax.030.i*/
		main_gsm_absexiti_16 = ($signed(main_gsm_absexiti_15_reg) > $signed(main_8_smax030i_reg));
end
always @(posedge clk) begin
	/* main: %gsm_abs.exit.i*/
	/*   %16 = icmp sgt i16 %15, %smax.030.i*/
	if ((cur_state == LEGUP_F_main_BB_gsm_absexiti_11)) begin
		main_gsm_absexiti_16_reg <= main_gsm_absexiti_16;
		if (start == 1'b0 && ^(main_gsm_absexiti_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_absexiti_16_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_abs.exit.i*/
	/*   %.smax.0.i = select i1 %16, i16 %15, i16 %smax.030.i*/
		main_gsm_absexiti_smax0i = (main_gsm_absexiti_16 ? main_gsm_absexiti_15_reg : main_8_smax030i_reg);
end
always @(posedge clk) begin
	/* main: %gsm_abs.exit.i*/
	/*   %.smax.0.i = select i1 %16, i16 %15, i16 %smax.030.i*/
	if ((cur_state == LEGUP_F_main_BB_gsm_absexiti_11)) begin
		main_gsm_absexiti_smax0i_reg <= main_gsm_absexiti_smax0i;
		if (start == 1'b0 && ^(main_gsm_absexiti_smax0i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_absexiti_smax0i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_abs.exit.i*/
	/*   %17 = add nsw i32 %k.029.i, 1*/
		main_gsm_absexiti_17 = main_signed_add_32_0;
end
always @(posedge clk) begin
	/* main: %gsm_abs.exit.i*/
	/*   %17 = add nsw i32 %k.029.i, 1*/
	if ((cur_state == LEGUP_F_main_BB_gsm_absexiti_11)) begin
		main_gsm_absexiti_17_reg <= main_gsm_absexiti_17;
		if (start == 1'b0 && ^(main_gsm_absexiti_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_absexiti_17_reg"); $finish; end
	end
	/* main: %187*/
	/*   %gep38 = add i32 %gep_int37, 2*/
	if ((cur_state == LEGUP_F_main_BB__187_48)) begin
		main_gsm_absexiti_17_reg <= main_187_gep38;
		if (start == 1'b0 && ^(main_187_gep38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_absexiti_17_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_abs.exit.i*/
	/*   %exitcond40.i = icmp eq i32 %17, 160*/
		main_gsm_absexiti_exitcond40i = (main_gsm_absexiti_17 == 32'd160);
end
always @(posedge clk) begin
	/* main: %gsm_abs.exit.i*/
	/*   %exitcond40.i = icmp eq i32 %17, 160*/
	if ((cur_state == LEGUP_F_main_BB_gsm_absexiti_11)) begin
		main_gsm_absexiti_exitcond40i_reg <= main_gsm_absexiti_exitcond40i;
		if (start == 1'b0 && ^(main_gsm_absexiti_exitcond40i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_absexiti_exitcond40i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %18*/
	/*   %.smax.0.i.lcssa = phi i16 [ %.smax.0.i, %gsm_abs.exit.i ]*/
		main_18_smax0ilcssa = main_gsm_absexiti_smax0i;
end
always @(posedge clk) begin
	/* main: %18*/
	/*   %.smax.0.i.lcssa = phi i16 [ %.smax.0.i, %gsm_abs.exit.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_gsm_absexiti_11) & (memory_controller_waitrequest == 1'd0)) & (main_gsm_absexiti_exitcond40i == 1'd1))) begin
		main_18_smax0ilcssa_reg <= main_18_smax0ilcssa;
		if (start == 1'b0 && ^(main_18_smax0ilcssa) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_18_smax0ilcssa_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %18*/
	/*   %gep_int8 = ptrtoint [8 x i16]* %LARc to i32*/
if (reset) begin main_18_gep_int8 = 0; end
		main_18_gep_int8 = `TAG_main_0_LARc_a;
end
always @(posedge clk) begin
	/* main: %18*/
	/*   %gep_int8 = ptrtoint [8 x i16]* %LARc to i32*/
	if ((cur_state == LEGUP_F_main_BB__18_12)) begin
		main_18_gep_int8_reg <= main_18_gep_int8;
		if (start == 1'b0 && ^(main_18_gep_int8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_18_gep_int8_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %18*/
	/*   %19 = inttoptr i32 %gep_int8 to i16**/
		main_18_19 = main_18_gep_int8;
end
always @(posedge clk) begin
	/* main: %18*/
	/*   %19 = inttoptr i32 %gep_int8 to i16**/
	if ((cur_state == LEGUP_F_main_BB__18_12)) begin
		main_18_19_reg <= main_18_19;
		if (start == 1'b0 && ^(main_18_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_18_19_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %18*/
	/*   %20 = icmp eq i16 %.smax.0.i.lcssa, 0*/
		main_18_20 = (main_18_smax0ilcssa_reg == 16'd0);
end
always @(posedge clk) begin
	/* main: %18*/
	/*   %20 = icmp eq i16 %.smax.0.i.lcssa, 0*/
	if ((cur_state == LEGUP_F_main_BB__18_12)) begin
		main_18_20_reg <= main_18_20;
		if (start == 1'b0 && ^(main_18_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_18_20_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %21*/
	/*   %22 = zext i16 %.smax.0.i.lcssa to i32*/
		main_21_22 = main_18_smax0ilcssa_reg;
end
always @(posedge clk) begin
	/* main: %21*/
	/*   %22 = zext i16 %.smax.0.i.lcssa to i32*/
	if ((cur_state == LEGUP_F_main_BB__21_13)) begin
		main_21_22_reg <= main_21_22;
		if (start == 1'b0 && ^(main_21_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_21_22_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %21*/
	/*   %23 = shl nuw i32 %22, 16*/
		main_21_23 = (main_21_22 <<< (32'd16 % 32));
end
always @(posedge clk) begin
	/* main: %21*/
	/*   %23 = shl nuw i32 %22, 16*/
	if ((cur_state == LEGUP_F_main_BB__21_13)) begin
		main_21_23_reg <= main_21_23;
		if (start == 1'b0 && ^(main_21_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_21_23_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %21*/
	/*   %24 = icmp slt i32 %23, 0*/
		main_21_24 = ($signed(main_21_23) < $signed(32'd0));
end
always @(posedge clk) begin
	/* main: %21*/
	/*   %24 = icmp slt i32 %23, 0*/
	if ((cur_state == LEGUP_F_main_BB__21_13)) begin
		main_21_24_reg <= main_21_24;
		if (start == 1'b0 && ^(main_21_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_21_24_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %25*/
	/*   %26 = icmp slt i32 %23, -1073741823*/
		main_25_26 = ($signed(main_21_23_reg) < $signed(-32'd1073741823));
end
always @(posedge clk) begin
	/* main: %25*/
	/*   %26 = icmp slt i32 %23, -1073741823*/
	if ((cur_state == LEGUP_F_main_BB__25_14)) begin
		main_25_26_reg <= main_25_26;
		if (start == 1'b0 && ^(main_25_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_25_26_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %27*/
	/*   %28 = xor i32 %23, -1*/
		main_27_28 = (main_21_23_reg ^ -32'd1);
end
always @(posedge clk) begin
	/* main: %27*/
	/*   %28 = xor i32 %23, -1*/
	if ((cur_state == LEGUP_F_main_BB__27_15)) begin
		main_27_28_reg <= main_27_28;
		if (start == 1'b0 && ^(main_27_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_27_28_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %29*/
	/*   %.0.i1.i = phi i32 [ %28, %27 ], [ %23, %21 ]*/
	if ((((cur_state == LEGUP_F_main_BB__21_13) & (memory_controller_waitrequest == 1'd0)) & (main_21_24 == 1'd0))) begin
		main_29_0i1i = main_21_23;
	end
	/* main: %29*/
	/*   %.0.i1.i = phi i32 [ %28, %27 ], [ %23, %21 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__27_15) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_29_0i1i = main_27_28;
	end
end
always @(posedge clk) begin
	/* main: %29*/
	/*   %.0.i1.i = phi i32 [ %28, %27 ], [ %23, %21 ]*/
	if ((((cur_state == LEGUP_F_main_BB__21_13) & (memory_controller_waitrequest == 1'd0)) & (main_21_24 == 1'd0))) begin
		main_29_0i1i_reg <= main_29_0i1i;
		if (start == 1'b0 && ^(main_29_0i1i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_29_0i1i_reg"); $finish; end
	end
	/* main: %29*/
	/*   %.0.i1.i = phi i32 [ %28, %27 ], [ %23, %21 ]*/
	if (((cur_state == LEGUP_F_main_BB__27_15) & (memory_controller_waitrequest == 1'd0))) begin
		main_29_0i1i_reg <= main_29_0i1i;
		if (start == 1'b0 && ^(main_29_0i1i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_29_0i1i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %29*/
	/*   %30 = icmp ugt i32 %.0.i1.i, 65535*/
		main_29_30 = (main_29_0i1i_reg > 32'd65535);
end
always @(posedge clk) begin
	/* main: %29*/
	/*   %30 = icmp ugt i32 %.0.i1.i, 65535*/
	if ((cur_state == LEGUP_F_main_BB__29_16)) begin
		main_29_30_reg <= main_29_30;
		if (start == 1'b0 && ^(main_29_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_29_30_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %31*/
	/*   %32 = icmp ugt i32 %.0.i1.i, 16777215*/
		main_31_32 = (main_29_0i1i_reg > 32'd16777215);
end
always @(posedge clk) begin
	/* main: %31*/
	/*   %32 = icmp ugt i32 %.0.i1.i, 16777215*/
	if ((cur_state == LEGUP_F_main_BB__31_17)) begin
		main_31_32_reg <= main_31_32;
		if (start == 1'b0 && ^(main_31_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_31_32_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %33*/
	/*   %34 = lshr i32 %.0.i1.i, 24*/
		main_33_34 = (main_29_0i1i_reg >>> (32'd24 % 32));
end
always @(posedge clk) begin
	/* main: %33*/
	/*   %34 = lshr i32 %.0.i1.i, 24*/
	if ((cur_state == LEGUP_F_main_BB__33_18)) begin
		main_33_34_reg <= main_33_34;
		if (start == 1'b0 && ^(main_33_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_33_34_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %33*/
	/*   %gep_int9 = ptrtoint [256 x i8]* @bitoff to i32*/
if (reset) begin main_33_gep_int9 = 0; end
		main_33_gep_int9 = 1'd0;
end
always @(posedge clk) begin
	/* main: %33*/
	/*   %gep_int9 = ptrtoint [256 x i8]* @bitoff to i32*/
	if ((cur_state == LEGUP_F_main_BB__33_18)) begin
		main_33_gep_int9_reg <= main_33_gep_int9;
		if (start == 1'b0 && ^(main_33_gep_int9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_33_gep_int9_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %33*/
	/*   %gep10 = add i32 %gep_int9, %34*/
		main_33_gep10 = main_signed_add_32_0;
end
always @(*) begin
/* main: %33*/
/*   %gep10 = add i32 %gep_int9, %34*/
	main_33_gep10_reg = main_1_gep_reg;
end
always @(*) begin
	/* main: %33*/
	/*   %35 = inttoptr i32 %gep10 to i8**/
		main_33_35 = main_33_gep10;
end
always @(posedge clk) begin
	/* main: %33*/
	/*   %35 = inttoptr i32 %gep10 to i8**/
	if ((cur_state == LEGUP_F_main_BB__33_18)) begin
		main_33_35_reg <= main_33_35;
		if (start == 1'b0 && ^(main_33_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_33_35_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %33*/
	/*   %36 = load i8* %35, align 1, !tbaa !5*/
		main_33_36 = bitoff_out_a;
end
always @(posedge clk) begin
	/* main: %33*/
	/*   %36 = load i8* %35, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__33_19)) begin
		main_33_36_reg <= main_33_36;
		if (start == 1'b0 && ^(main_33_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_33_36_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %33*/
	/*   %37 = zext i8 %36 to i32*/
		main_33_37 = main_33_36;
end
always @(posedge clk) begin
	/* main: %33*/
	/*   %37 = zext i8 %36 to i32*/
	if ((cur_state == LEGUP_F_main_BB__33_19)) begin
		main_33_37_reg <= main_33_37;
		if (start == 1'b0 && ^(main_33_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_33_37_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %33*/
	/*   %38 = add nsw i32 %37, -1*/
		main_33_38 = main_signed_add_32_0;
end
always @(posedge clk) begin
	/* main: %33*/
	/*   %38 = add nsw i32 %37, -1*/
	if ((cur_state == LEGUP_F_main_BB__33_19)) begin
		main_33_38_reg <= main_33_38;
		if (start == 1'b0 && ^(main_33_38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_33_38_reg"); $finish; end
	end
	/* main: %187*/
	/*   %202 = add nsw i32 %201, %197*/
	if ((cur_state == LEGUP_F_main_BB__187_50)) begin
		main_33_38_reg <= main_187_202;
		if (start == 1'b0 && ^(main_187_202) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_33_38_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %39*/
	/*   %40 = lshr i32 %.0.i1.i, 16*/
		main_39_40 = (main_29_0i1i_reg >>> (32'd16 % 32));
end
always @(posedge clk) begin
	/* main: %39*/
	/*   %40 = lshr i32 %.0.i1.i, 16*/
	if ((cur_state == LEGUP_F_main_BB__39_20)) begin
		main_39_40_reg <= main_39_40;
		if (start == 1'b0 && ^(main_39_40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_39_40_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %39*/
	/*   %41 = and i32 %40, 255*/
		main_39_41 = (main_39_40 & 32'd255);
end
always @(posedge clk) begin
	/* main: %39*/
	/*   %41 = and i32 %40, 255*/
	if ((cur_state == LEGUP_F_main_BB__39_20)) begin
		main_39_41_reg <= main_39_41;
		if (start == 1'b0 && ^(main_39_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_39_41_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %39*/
	/*   %gep_int11 = ptrtoint [256 x i8]* @bitoff to i32*/
if (reset) begin main_39_gep_int11 = 0; end
		main_39_gep_int11 = 1'd0;
end
always @(posedge clk) begin
	/* main: %39*/
	/*   %gep_int11 = ptrtoint [256 x i8]* @bitoff to i32*/
	if ((cur_state == LEGUP_F_main_BB__39_20)) begin
		main_39_gep_int11_reg <= main_39_gep_int11;
		if (start == 1'b0 && ^(main_39_gep_int11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_39_gep_int11_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %39*/
	/*   %gep12 = add i32 %gep_int11, %41*/
		main_39_gep12 = main_signed_add_32_0;
end
always @(*) begin
/* main: %39*/
/*   %gep12 = add i32 %gep_int11, %41*/
	main_39_gep12_reg = main_1_gep_reg;
end
always @(*) begin
	/* main: %39*/
	/*   %42 = inttoptr i32 %gep12 to i8**/
		main_39_42 = main_39_gep12;
end
always @(posedge clk) begin
	/* main: %39*/
	/*   %42 = inttoptr i32 %gep12 to i8**/
	if ((cur_state == LEGUP_F_main_BB__39_20)) begin
		main_39_42_reg <= main_39_42;
		if (start == 1'b0 && ^(main_39_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_39_42_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %39*/
	/*   %43 = load i8* %42, align 1, !tbaa !5*/
		main_39_43 = bitoff_out_a;
end
always @(posedge clk) begin
	/* main: %39*/
	/*   %43 = load i8* %42, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__39_21)) begin
		main_39_43_reg <= main_39_43;
		if (start == 1'b0 && ^(main_39_43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_39_43_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %39*/
	/*   %44 = zext i8 %43 to i32*/
		main_39_44 = main_39_43;
end
always @(posedge clk) begin
	/* main: %39*/
	/*   %44 = zext i8 %43 to i32*/
	if ((cur_state == LEGUP_F_main_BB__39_21)) begin
		main_39_44_reg <= main_39_44;
		if (start == 1'b0 && ^(main_39_44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_39_44_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %39*/
	/*   %45 = add nuw nsw i32 %44, 7*/
		main_39_45 = main_signed_add_32_0;
end
always @(posedge clk) begin
	/* main: %39*/
	/*   %45 = add nuw nsw i32 %44, 7*/
	if ((cur_state == LEGUP_F_main_BB__39_21)) begin
		main_39_45_reg <= main_39_45;
		if (start == 1'b0 && ^(main_39_45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_39_45_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %46*/
	/*   %47 = and i32 %.0.i1.i, 65280*/
		main_46_47 = (main_29_0i1i_reg & 32'd65280);
end
always @(posedge clk) begin
	/* main: %46*/
	/*   %47 = and i32 %.0.i1.i, 65280*/
	if ((cur_state == LEGUP_F_main_BB__46_22)) begin
		main_46_47_reg <= main_46_47;
		if (start == 1'b0 && ^(main_46_47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_46_47_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %46*/
	/*   %48 = icmp eq i32 %47, 0*/
		main_46_48 = (main_46_47 == 32'd0);
end
always @(posedge clk) begin
	/* main: %46*/
	/*   %48 = icmp eq i32 %47, 0*/
	if ((cur_state == LEGUP_F_main_BB__46_22)) begin
		main_46_48_reg <= main_46_48;
		if (start == 1'b0 && ^(main_46_48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_46_48_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %49*/
	/*   %50 = lshr i32 %.0.i1.i, 8*/
		main_49_50 = (main_29_0i1i_reg >>> (32'd8 % 32));
end
always @(posedge clk) begin
	/* main: %49*/
	/*   %50 = lshr i32 %.0.i1.i, 8*/
	if ((cur_state == LEGUP_F_main_BB__49_23)) begin
		main_49_50_reg <= main_49_50;
		if (start == 1'b0 && ^(main_49_50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_49_50_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %49*/
	/*   %51 = and i32 %50, 255*/
		main_49_51 = (main_49_50 & 32'd255);
end
always @(posedge clk) begin
	/* main: %49*/
	/*   %51 = and i32 %50, 255*/
	if ((cur_state == LEGUP_F_main_BB__49_23)) begin
		main_49_51_reg <= main_49_51;
		if (start == 1'b0 && ^(main_49_51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_49_51_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %49*/
	/*   %gep_int13 = ptrtoint [256 x i8]* @bitoff to i32*/
if (reset) begin main_49_gep_int13 = 0; end
		main_49_gep_int13 = 1'd0;
end
always @(posedge clk) begin
	/* main: %49*/
	/*   %gep_int13 = ptrtoint [256 x i8]* @bitoff to i32*/
	if ((cur_state == LEGUP_F_main_BB__49_23)) begin
		main_49_gep_int13_reg <= main_49_gep_int13;
		if (start == 1'b0 && ^(main_49_gep_int13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_49_gep_int13_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %49*/
	/*   %gep14 = add i32 %gep_int13, %51*/
		main_49_gep14 = main_signed_add_32_0;
end
always @(*) begin
/* main: %49*/
/*   %gep14 = add i32 %gep_int13, %51*/
	main_49_gep14_reg = main_1_gep_reg;
end
always @(*) begin
	/* main: %49*/
	/*   %52 = inttoptr i32 %gep14 to i8**/
		main_49_52 = main_49_gep14;
end
always @(posedge clk) begin
	/* main: %49*/
	/*   %52 = inttoptr i32 %gep14 to i8**/
	if ((cur_state == LEGUP_F_main_BB__49_23)) begin
		main_49_52_reg <= main_49_52;
		if (start == 1'b0 && ^(main_49_52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_49_52_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %49*/
	/*   %53 = load i8* %52, align 1, !tbaa !5*/
		main_49_53 = bitoff_out_a;
end
always @(posedge clk) begin
	/* main: %49*/
	/*   %53 = load i8* %52, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__49_24)) begin
		main_49_53_reg <= main_49_53;
		if (start == 1'b0 && ^(main_49_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_49_53_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %49*/
	/*   %54 = zext i8 %53 to i32*/
		main_49_54 = main_49_53;
end
always @(posedge clk) begin
	/* main: %49*/
	/*   %54 = zext i8 %53 to i32*/
	if ((cur_state == LEGUP_F_main_BB__49_24)) begin
		main_49_54_reg <= main_49_54;
		if (start == 1'b0 && ^(main_49_54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_49_54_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %49*/
	/*   %55 = add nuw nsw i32 %54, 15*/
		main_49_55 = main_signed_add_32_0;
end
always @(posedge clk) begin
	/* main: %49*/
	/*   %55 = add nuw nsw i32 %54, 15*/
	if ((cur_state == LEGUP_F_main_BB__49_24)) begin
		main_49_55_reg <= main_49_55;
		if (start == 1'b0 && ^(main_49_55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_49_55_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %56*/
	/*   %57 = and i32 %.0.i1.i, 255*/
		main_56_57 = (main_29_0i1i_reg & 32'd255);
end
always @(posedge clk) begin
	/* main: %56*/
	/*   %57 = and i32 %.0.i1.i, 255*/
	if ((cur_state == LEGUP_F_main_BB__56_25)) begin
		main_56_57_reg <= main_56_57;
		if (start == 1'b0 && ^(main_56_57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_56_57_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %56*/
	/*   %gep_int15 = ptrtoint [256 x i8]* @bitoff to i32*/
if (reset) begin main_56_gep_int15 = 0; end
		main_56_gep_int15 = 1'd0;
end
always @(posedge clk) begin
	/* main: %56*/
	/*   %gep_int15 = ptrtoint [256 x i8]* @bitoff to i32*/
	if ((cur_state == LEGUP_F_main_BB__56_25)) begin
		main_56_gep_int15_reg <= main_56_gep_int15;
		if (start == 1'b0 && ^(main_56_gep_int15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_56_gep_int15_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %56*/
	/*   %gep16 = add i32 %gep_int15, %57*/
		main_56_gep16 = main_signed_add_32_0;
end
always @(*) begin
/* main: %56*/
/*   %gep16 = add i32 %gep_int15, %57*/
	main_56_gep16_reg = main_1_gep_reg;
end
always @(*) begin
	/* main: %56*/
	/*   %58 = inttoptr i32 %gep16 to i8**/
		main_56_58 = main_56_gep16;
end
always @(posedge clk) begin
	/* main: %56*/
	/*   %58 = inttoptr i32 %gep16 to i8**/
	if ((cur_state == LEGUP_F_main_BB__56_25)) begin
		main_56_58_reg <= main_56_58;
		if (start == 1'b0 && ^(main_56_58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_56_58_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %56*/
	/*   %59 = load i8* %58, align 1, !tbaa !5*/
		main_56_59 = bitoff_out_a;
end
always @(posedge clk) begin
	/* main: %56*/
	/*   %59 = load i8* %58, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__56_26)) begin
		main_56_59_reg <= main_56_59;
		if (start == 1'b0 && ^(main_56_59) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_56_59_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %56*/
	/*   %60 = zext i8 %59 to i32*/
		main_56_60 = main_56_59;
end
always @(posedge clk) begin
	/* main: %56*/
	/*   %60 = zext i8 %59 to i32*/
	if ((cur_state == LEGUP_F_main_BB__56_26)) begin
		main_56_60_reg <= main_56_60;
		if (start == 1'b0 && ^(main_56_60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_56_60_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %56*/
	/*   %61 = add nuw nsw i32 %60, 23*/
		main_56_61 = main_signed_add_32_0;
end
always @(posedge clk) begin
	/* main: %56*/
	/*   %61 = add nuw nsw i32 %60, 23*/
	if ((cur_state == LEGUP_F_main_BB__56_26)) begin
		main_56_61_reg <= main_56_61;
		if (start == 1'b0 && ^(main_56_61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_56_61_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %62*/
	/*   %.01.i.i1 = phi i32 [ 0, %25 ], [ %38, %33 ], [ %45, %39 ], [ %55, %49 ], [ %61, %56 ]*/
	if ((((cur_state == LEGUP_F_main_BB__25_14) & (memory_controller_waitrequest == 1'd0)) & (main_25_26 == 1'd1))) begin
		main_62_01ii1 = 32'd0;
	end
	/* main: %62*/
	/*   %.01.i.i1 = phi i32 [ 0, %25 ], [ %38, %33 ], [ %45, %39 ], [ %55, %49 ], [ %61, %56 ]*/
	else if (((cur_state == LEGUP_F_main_BB__33_19) & (memory_controller_waitrequest == 1'd0))) begin
		main_62_01ii1 = main_33_38;
	end
	/* main: %62*/
	/*   %.01.i.i1 = phi i32 [ 0, %25 ], [ %38, %33 ], [ %45, %39 ], [ %55, %49 ], [ %61, %56 ]*/
	else if (((cur_state == LEGUP_F_main_BB__39_21) & (memory_controller_waitrequest == 1'd0))) begin
		main_62_01ii1 = main_39_45;
	end
	/* main: %62*/
	/*   %.01.i.i1 = phi i32 [ 0, %25 ], [ %38, %33 ], [ %45, %39 ], [ %55, %49 ], [ %61, %56 ]*/
	else if (((cur_state == LEGUP_F_main_BB__49_24) & (memory_controller_waitrequest == 1'd0))) begin
		main_62_01ii1 = main_49_55;
	end
	/* main: %62*/
	/*   %.01.i.i1 = phi i32 [ 0, %25 ], [ %38, %33 ], [ %45, %39 ], [ %55, %49 ], [ %61, %56 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__56_26) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_62_01ii1 = main_56_61;
	end
end
always @(posedge clk) begin
	/* main: %62*/
	/*   %.01.i.i1 = phi i32 [ 0, %25 ], [ %38, %33 ], [ %45, %39 ], [ %55, %49 ], [ %61, %56 ]*/
	if ((((cur_state == LEGUP_F_main_BB__25_14) & (memory_controller_waitrequest == 1'd0)) & (main_25_26 == 1'd1))) begin
		main_62_01ii1_reg <= main_62_01ii1;
		if (start == 1'b0 && ^(main_62_01ii1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_62_01ii1_reg"); $finish; end
	end
	/* main: %62*/
	/*   %.01.i.i1 = phi i32 [ 0, %25 ], [ %38, %33 ], [ %45, %39 ], [ %55, %49 ], [ %61, %56 ]*/
	if (((cur_state == LEGUP_F_main_BB__33_19) & (memory_controller_waitrequest == 1'd0))) begin
		main_62_01ii1_reg <= main_62_01ii1;
		if (start == 1'b0 && ^(main_62_01ii1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_62_01ii1_reg"); $finish; end
	end
	/* main: %62*/
	/*   %.01.i.i1 = phi i32 [ 0, %25 ], [ %38, %33 ], [ %45, %39 ], [ %55, %49 ], [ %61, %56 ]*/
	if (((cur_state == LEGUP_F_main_BB__39_21) & (memory_controller_waitrequest == 1'd0))) begin
		main_62_01ii1_reg <= main_62_01ii1;
		if (start == 1'b0 && ^(main_62_01ii1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_62_01ii1_reg"); $finish; end
	end
	/* main: %62*/
	/*   %.01.i.i1 = phi i32 [ 0, %25 ], [ %38, %33 ], [ %45, %39 ], [ %55, %49 ], [ %61, %56 ]*/
	if (((cur_state == LEGUP_F_main_BB__49_24) & (memory_controller_waitrequest == 1'd0))) begin
		main_62_01ii1_reg <= main_62_01ii1;
		if (start == 1'b0 && ^(main_62_01ii1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_62_01ii1_reg"); $finish; end
	end
	/* main: %62*/
	/*   %.01.i.i1 = phi i32 [ 0, %25 ], [ %38, %33 ], [ %45, %39 ], [ %55, %49 ], [ %61, %56 ]*/
	if (((cur_state == LEGUP_F_main_BB__56_26) & (memory_controller_waitrequest == 1'd0))) begin
		main_62_01ii1_reg <= main_62_01ii1;
		if (start == 1'b0 && ^(main_62_01ii1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_62_01ii1_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %62*/
	/*   %63 = sub i32 4, %.01.i.i1*/
		main_62_63 = main_signed_subtract_32_0;
end
always @(posedge clk) begin
	/* main: %62*/
	/*   %63 = sub i32 4, %.01.i.i1*/
	if ((cur_state == LEGUP_F_main_BB__62_27)) begin
		main_62_63_reg <= main_62_63;
		if (start == 1'b0 && ^(main_62_63) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_62_63_reg"); $finish; end
	end
	/* main: %361*/
	/*   %362 = sub nsw i32 %359, %347*/
	if ((cur_state == LEGUP_F_main_BB__361_104)) begin
		main_62_63_reg <= main_361_362;
		if (start == 1'b0 && ^(main_361_362) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_62_63_reg"); $finish; end
	end
	/* main: %367*/
	/*   %368 = sub nsw i32 %365, %347*/
	if ((cur_state == LEGUP_F_main_BB__367_106)) begin
		main_62_63_reg <= main_367_368;
		if (start == 1'b0 && ^(main_367_368) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_62_63_reg"); $finish; end
	end
	/* main: %373*/
	/*   %374 = sub nsw i32 %371, %347*/
	if ((cur_state == LEGUP_F_main_BB__373_108)) begin
		main_62_63_reg <= main_373_374;
		if (start == 1'b0 && ^(main_373_374) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_62_63_reg"); $finish; end
	end
	/* main: %379*/
	/*   %380 = sub nsw i32 %377, %347*/
	if ((cur_state == LEGUP_F_main_BB__379_110)) begin
		main_62_63_reg <= main_379_380;
		if (start == 1'b0 && ^(main_379_380) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_62_63_reg"); $finish; end
	end
	/* main: %.preheader.i.i*/
	/*   %..i1.i = sub nsw i32 %350, %352*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii_101)) begin
		main_62_63_reg <= main_preheaderii_i1i;
		if (start == 1'b0 && ^(main_preheaderii_i1i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_62_63_reg"); $finish; end
	end
	/* main: %355*/
	/*   %356 = sub nsw i32 %353, %347*/
	if ((cur_state == LEGUP_F_main_BB__355_102)) begin
		main_62_63_reg <= main_355_356;
		if (start == 1'b0 && ^(main_355_356) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_62_63_reg"); $finish; end
	end
	/* main: %385*/
	/*   %386 = sub nsw i32 %383, %347*/
	if ((cur_state == LEGUP_F_main_BB__385_112)) begin
		main_62_63_reg <= main_385_386;
		if (start == 1'b0 && ^(main_385_386) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_62_63_reg"); $finish; end
	end
	/* main: %391*/
	/*   %392 = sub nsw i32 %389, %347*/
	if ((cur_state == LEGUP_F_main_BB__391_114)) begin
		main_62_63_reg <= main_391_392;
		if (start == 1'b0 && ^(main_391_392) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_62_63_reg"); $finish; end
	end
	/* main: %397*/
	/*   %398 = sub nsw i32 %395, %347*/
	if ((cur_state == LEGUP_F_main_BB__397_116)) begin
		main_62_63_reg <= main_397_398;
		if (start == 1'b0 && ^(main_397_398) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_62_63_reg"); $finish; end
	end
	/* main: %403*/
	/*   %404 = sub nsw i32 %401, %347*/
	if ((cur_state == LEGUP_F_main_BB__403_118)) begin
		main_62_63_reg <= main_403_404;
		if (start == 1'b0 && ^(main_403_404) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_62_63_reg"); $finish; end
	end
	/* main: %409*/
	/*   %410 = sub nsw i32 %407, %347*/
	if ((cur_state == LEGUP_F_main_BB__409_120)) begin
		main_62_63_reg <= main_409_410;
		if (start == 1'b0 && ^(main_409_410) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_62_63_reg"); $finish; end
	end
	/* main: %415*/
	/*   %416 = sub nsw i32 %413, %347*/
	if ((cur_state == LEGUP_F_main_BB__415_122)) begin
		main_62_63_reg <= main_415_416;
		if (start == 1'b0 && ^(main_415_416) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_62_63_reg"); $finish; end
	end
	/* main: %421*/
	/*   %422 = sub nsw i32 %419, %347*/
	if ((cur_state == LEGUP_F_main_BB__421_124)) begin
		main_62_63_reg <= main_421_422;
		if (start == 1'b0 && ^(main_421_422) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_62_63_reg"); $finish; end
	end
	/* main: %427*/
	/*   %428 = sub nsw i32 %425, %347*/
	if ((cur_state == LEGUP_F_main_BB__427_126)) begin
		main_62_63_reg <= main_427_428;
		if (start == 1'b0 && ^(main_427_428) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_62_63_reg"); $finish; end
	end
	/* main: %gsm_add.exit8.i*/
	/*   %460 = sub nsw i32 8, %n.029.i*/
	if ((cur_state == LEGUP_F_main_BB_gsm_addexit8i_141)) begin
		main_62_63_reg <= main_gsm_addexit8i_460;
		if (start == 1'b0 && ^(main_gsm_addexit8i_460) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_62_63_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %62*/
	/*   %sext.i = shl i32 %63, 16*/
		main_62_sexti = (main_62_63 <<< (32'd16 % 32));
end
always @(posedge clk) begin
	/* main: %62*/
	/*   %sext.i = shl i32 %63, 16*/
	if ((cur_state == LEGUP_F_main_BB__62_27)) begin
		main_62_sexti_reg <= main_62_sexti;
		if (start == 1'b0 && ^(main_62_sexti) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_62_sexti_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %62*/
	/*   %phitmp.i = ashr exact i32 %sext.i, 16*/
		main_62_phitmpi = ($signed(main_62_sexti) >>> 32'd16);
end
always @(posedge clk) begin
	/* main: %62*/
	/*   %phitmp.i = ashr exact i32 %sext.i, 16*/
	if ((cur_state == LEGUP_F_main_BB__62_27)) begin
		main_62_phitmpi_reg <= main_62_phitmpi;
		if (start == 1'b0 && ^(main_62_phitmpi) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_62_phitmpi_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %62*/
	/*   %64 = icmp sgt i32 %sext.i, 0*/
		main_62_64 = ($signed(main_62_sexti) > $signed(32'd0));
end
always @(posedge clk) begin
	/* main: %62*/
	/*   %64 = icmp sgt i32 %sext.i, 0*/
	if ((cur_state == LEGUP_F_main_BB__62_27)) begin
		main_62_64_reg <= main_62_64;
		if (start == 1'b0 && ^(main_62_64) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_62_64_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %62*/
	/*   %sext.off.i = add i32 %sext.i, -1*/
		main_62_sextoffi = main_signed_add_32_0;
end
always @(*) begin
/* main: %62*/
/*   %sext.off.i = add i32 %sext.i, -1*/
	main_62_sextoffi_reg = main_1_gep_reg;
end
always @(*) begin
	/* main: %62*/
	/*   %65 = icmp ult i32 %sext.off.i, 327679*/
		main_62_65 = (main_62_sextoffi < 32'd327679);
end
always @(posedge clk) begin
	/* main: %62*/
	/*   %65 = icmp ult i32 %sext.off.i, 327679*/
	if ((cur_state == LEGUP_F_main_BB__62_27)) begin
		main_62_65_reg <= main_62_65;
		if (start == 1'b0 && ^(main_62_65) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_62_65_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader6.i*/
	/*   %66 = add nsw i32 %phitmp.i, -1*/
		main_preheader6i_66 = main_signed_add_32_0;
end
always @(*) begin
/* main: %.preheader6.i*/
/*   %66 = add nsw i32 %phitmp.i, -1*/
	main_preheader6i_66_reg = main_1_gep_reg;
end
always @(*) begin
	/* main: %.preheader6.i*/
	/*   %67 = lshr i32 16384, %66*/
		main_preheader6i_67 = (32'd16384 >>> (main_preheader6i_66 % 32));
end
always @(posedge clk) begin
	/* main: %.preheader6.i*/
	/*   %67 = lshr i32 16384, %66*/
	if ((cur_state == LEGUP_F_main_BB_preheader6i_28)) begin
		main_preheader6i_67_reg <= main_preheader6i_67;
		if (start == 1'b0 && ^(main_preheader6i_67) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader6i_67_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader6.i*/
	/*   %68 = trunc i32 %67 to i16*/
		main_preheader6i_68 = main_preheader6i_67[15:0];
end
always @(posedge clk) begin
	/* main: %.preheader6.i*/
	/*   %68 = trunc i32 %67 to i16*/
	if ((cur_state == LEGUP_F_main_BB_preheader6i_28)) begin
		main_preheader6i_68_reg <= main_preheader6i_68;
		if (start == 1'b0 && ^(main_preheader6i_68) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader6i_68_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader6.i*/
	/*   %69 = icmp eq i16 %68, -32768*/
		main_preheader6i_69 = (main_preheader6i_68 == -16'd32768);
end
always @(posedge clk) begin
	/* main: %.preheader6.i*/
	/*   %69 = icmp eq i16 %68, -32768*/
	if ((cur_state == LEGUP_F_main_BB_preheader6i_28)) begin
		main_preheader6i_69_reg <= main_preheader6i_69;
		if (start == 1'b0 && ^(main_preheader6i_69) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader6i_69_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader6.i*/
	/*   %sext4.i = shl i32 %67, 16*/
		main_preheader6i_sext4i = (main_preheader6i_67 <<< (32'd16 % 32));
end
always @(posedge clk) begin
	/* main: %.preheader6.i*/
	/*   %sext4.i = shl i32 %67, 16*/
	if ((cur_state == LEGUP_F_main_BB_preheader6i_28)) begin
		main_preheader6i_sext4i_reg <= main_preheader6i_sext4i;
		if (start == 1'b0 && ^(main_preheader6i_sext4i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader6i_sext4i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader6.i*/
	/*   %70 = ashr exact i32 %sext4.i, 16*/
		main_preheader6i_70 = ($signed(main_preheader6i_sext4i) >>> 32'd16);
end
always @(posedge clk) begin
	/* main: %.preheader6.i*/
	/*   %70 = ashr exact i32 %sext4.i, 16*/
	if ((cur_state == LEGUP_F_main_BB_preheader6i_28)) begin
		main_preheader6i_70_reg <= main_preheader6i_70;
		if (start == 1'b0 && ^(main_preheader6i_70) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader6i_70_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader6.split.us.i*/
	/*   %k.128.us.i = phi i32 [ %81, %gsm_mult_r.exit.us.i ], [ 0, %.preheader6.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_preheader6i_28) & (memory_controller_waitrequest == 1'd0)) & (main_preheader6i_69 == 1'd1))) begin
		main_preheader6splitusi_k128usi = 32'd0;
	end
	/* main: %.preheader6.split.us.i*/
	/*   %k.128.us.i = phi i32 [ %81, %gsm_mult_r.exit.us.i ], [ 0, %.preheader6.i ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_gsm_mult_rexitusi_35) & (memory_controller_waitrequest == 1'd0)) & (main_gsm_mult_rexitusi_exitcond41i_reg == 1'd0))) */ begin
		main_preheader6splitusi_k128usi = main_gsm_mult_rexitusi_81_reg;
	end
end
always @(posedge clk) begin
	/* main: %.preheader6.split.us.i*/
	/*   %k.128.us.i = phi i32 [ %81, %gsm_mult_r.exit.us.i ], [ 0, %.preheader6.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_preheader6i_28) & (memory_controller_waitrequest == 1'd0)) & (main_preheader6i_69 == 1'd1))) begin
		main_preheader6splitusi_k128usi_reg <= main_preheader6splitusi_k128usi;
		if (start == 1'b0 && ^(main_preheader6splitusi_k128usi) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader6splitusi_k128usi_reg"); $finish; end
	end
	/* main: %.preheader6.split.us.i*/
	/*   %k.128.us.i = phi i32 [ %81, %gsm_mult_r.exit.us.i ], [ 0, %.preheader6.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_gsm_mult_rexitusi_35) & (memory_controller_waitrequest == 1'd0)) & (main_gsm_mult_rexitusi_exitcond41i_reg == 1'd0))) begin
		main_preheader6splitusi_k128usi_reg <= main_preheader6splitusi_k128usi;
		if (start == 1'b0 && ^(main_preheader6splitusi_k128usi) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader6splitusi_k128usi_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader6.split.us.i*/
	/*   %gep_int17 = ptrtoint i16* %7 to i32*/
		main_preheader6splitusi_gep_int17 = main_6_7_reg;
end
always @(posedge clk) begin
	/* main: %.preheader6.split.us.i*/
	/*   %gep_int17 = ptrtoint i16* %7 to i32*/
	if ((cur_state == LEGUP_F_main_BB_preheader6splitusi_29)) begin
		main_preheader6splitusi_gep_int17_reg <= main_preheader6splitusi_gep_int17;
		if (start == 1'b0 && ^(main_preheader6splitusi_gep_int17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader6splitusi_gep_int17_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader6.split.us.i*/
	/*   %gep_array18 = mul i32 %k.128.us.i, 2*/
		main_preheader6splitusi_gep_array18 = (main_preheader6splitusi_k128usi_reg * 32'd2);
end
always @(posedge clk) begin
	/* main: %.preheader6.split.us.i*/
	/*   %gep_array18 = mul i32 %k.128.us.i, 2*/
	if ((cur_state == LEGUP_F_main_BB_preheader6splitusi_29)) begin
		main_preheader6splitusi_gep_array18_reg <= main_preheader6splitusi_gep_array18;
		if (start == 1'b0 && ^(main_preheader6splitusi_gep_array18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader6splitusi_gep_array18_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader6.split.us.i*/
	/*   %gep19 = add i32 %gep_int17, %gep_array18*/
		main_preheader6splitusi_gep19 = main_signed_add_32_0;
end
always @(*) begin
/* main: %.preheader6.split.us.i*/
/*   %gep19 = add i32 %gep_int17, %gep_array18*/
	main_preheader6splitusi_gep19_reg = main_1_gep_reg;
end
always @(*) begin
	/* main: %.preheader6.split.us.i*/
	/*   %71 = inttoptr i32 %gep19 to i16**/
		main_preheader6splitusi_71 = main_preheader6splitusi_gep19;
end
always @(posedge clk) begin
	/* main: %.preheader6.split.us.i*/
	/*   %71 = inttoptr i32 %gep19 to i16**/
	if ((cur_state == LEGUP_F_main_BB_preheader6splitusi_30)) begin
		main_preheader6splitusi_71_reg <= main_preheader6splitusi_71;
		if (start == 1'b0 && ^(main_preheader6splitusi_71) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader6splitusi_71_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader6.split.us.i*/
	/*   %72 = load i16* %71, align 2, !tbaa !1*/
		main_preheader6splitusi_72 = main_0_so_out_a;
end
always @(posedge clk) begin
	/* main: %.preheader6.split.us.i*/
	/*   %72 = load i16* %71, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader6splitusi_31)) begin
		main_preheader6splitusi_72_reg <= main_preheader6splitusi_72;
		if (start == 1'b0 && ^(main_preheader6splitusi_72) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader6splitusi_72_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader6.split.us.i*/
	/*   %73 = icmp eq i16 %72, -32768*/
		main_preheader6splitusi_73 = (main_preheader6splitusi_72 == -16'd32768);
end
always @(posedge clk) begin
	/* main: %.preheader6.split.us.i*/
	/*   %73 = icmp eq i16 %72, -32768*/
	if ((cur_state == LEGUP_F_main_BB_preheader6splitusi_31)) begin
		main_preheader6splitusi_73_reg <= main_preheader6splitusi_73;
		if (start == 1'b0 && ^(main_preheader6splitusi_73) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader6splitusi_73_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %74*/
	/*   %75 = sext i16 %72 to i32*/
		main_74_75 = $signed(main_preheader6splitusi_72_reg);
end
always @(posedge clk) begin
	/* main: %74*/
	/*   %75 = sext i16 %72 to i32*/
	if ((cur_state == LEGUP_F_main_BB__74_32)) begin
		main_74_75_reg <= main_74_75;
		if (start == 1'b0 && ^(main_74_75) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_74_75_reg"); $finish; end
	end
end
always @(*) begin
	main_74_76 = main_signed_multiply_32_0;
end
always @(posedge clk) begin
	/* main: %74*/
	/*   %76 = mul nsw i32 %75, %70*/
	if ((cur_state == LEGUP_F_main_BB__74_33)) begin
		main_74_76_reg <= main_74_76;
		if (start == 1'b0 && ^(main_74_76) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_74_76_reg"); $finish; end
	end
	/* main: %74*/
	/*   %76 = mul nsw i32 %75, %70*/
	if ((cur_state == LEGUP_F_main_BB__74_33)) begin
		main_74_76_reg <= main_74_76;
		if (start == 1'b0 && ^(main_74_76) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_74_76_reg"); $finish; end
	end
	/* main: %gsm_mult_r.exit.i*/
	/*   %85 = mul nsw i32 %84, %70*/
	if ((cur_state == LEGUP_F_main_BB_gsm_mult_rexiti_39)) begin
		main_74_76_reg <= main_gsm_mult_rexiti_85;
		if (start == 1'b0 && ^(main_gsm_mult_rexiti_85) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_74_76_reg"); $finish; end
	end
	/* main: %187*/
	/*   %214 = mul nsw i32 %213, %200*/
	if ((cur_state == LEGUP_F_main_BB__187_51)) begin
		main_74_76_reg <= main_187_214;
		if (start == 1'b0 && ^(main_187_214) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_74_76_reg"); $finish; end
	end
	/* main: %187*/
	/*   %224 = mul nsw i32 %223, %200*/
	if ((cur_state == LEGUP_F_main_BB__187_52)) begin
		main_74_76_reg <= main_187_224;
		if (start == 1'b0 && ^(main_187_224) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_74_76_reg"); $finish; end
	end
	/* main: %187*/
	/*   %234 = mul nsw i32 %233, %200*/
	if ((cur_state == LEGUP_F_main_BB__187_53)) begin
		main_74_76_reg <= main_187_234;
		if (start == 1'b0 && ^(main_187_234) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_74_76_reg"); $finish; end
	end
	/* main: %.thread.i*/
	/*   %94 = mul nsw i32 %93, %93*/
	if ((cur_state == LEGUP_F_main_BB_threadi_43)) begin
		main_74_76_reg <= main_threadi_94;
		if (start == 1'b0 && ^(main_threadi_94) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_74_76_reg"); $finish; end
	end
	/* main: %.thread.i*/
	/*   %115 = mul nsw i32 %97, %110*/
	if ((cur_state == LEGUP_F_main_BB_threadi_44)) begin
		main_74_76_reg <= main_threadi_115;
		if (start == 1'b0 && ^(main_threadi_115) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_74_76_reg"); $finish; end
	end
	/* main: %.thread.i*/
	/*   %121 = mul nsw i32 %120, %120*/
	if ((cur_state == LEGUP_F_main_BB_threadi_45)) begin
		main_74_76_reg <= main_threadi_121;
		if (start == 1'b0 && ^(main_threadi_121) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_74_76_reg"); $finish; end
	end
	/* main: %.thread.i*/
	/*   %167 = mul nsw i32 %132, %162*/
	if ((cur_state == LEGUP_F_main_BB_threadi_46)) begin
		main_74_76_reg <= main_threadi_167;
		if (start == 1'b0 && ^(main_threadi_167) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_74_76_reg"); $finish; end
	end
	/* main: %187*/
	/*   %201 = mul nsw i32 %200, %200*/
	if ((cur_state == LEGUP_F_main_BB__187_50)) begin
		main_74_76_reg <= main_187_201;
		if (start == 1'b0 && ^(main_187_201) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_74_76_reg"); $finish; end
	end
	/* main: %Gsm_LPC_Analysis.exit*/
	/*   %529 = mul i32 %528, 40960*/
	if ((cur_state == LEGUP_F_main_BB_Gsm_LPC_Analysisexit_181)) begin
		main_74_76_reg <= main_Gsm_LPC_Analysisexit_529;
		if (start == 1'b0 && ^(main_Gsm_LPC_Analysisexit_529) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_74_76_reg"); $finish; end
	end
	/* main: %.thread.i4*/
	/*   %545 = mul i32 %544, 40960*/
	if ((cur_state == LEGUP_F_main_BB_threadi4_189)) begin
		main_74_76_reg <= main_threadi4_545;
		if (start == 1'b0 && ^(main_threadi4_545) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_74_76_reg"); $finish; end
	end
	/* main: %.thread98.i*/
	/*   %561 = mul i32 %560, 40960*/
	if ((cur_state == LEGUP_F_main_BB_thread98i_197)) begin
		main_74_76_reg <= main_thread98i_561;
		if (start == 1'b0 && ^(main_thread98i_561) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_74_76_reg"); $finish; end
	end
	/* main: %.thread102.i*/
	/*   %580 = mul i32 %579, 40960*/
	if ((cur_state == LEGUP_F_main_BB_thread102i_207)) begin
		main_74_76_reg <= main_thread102i_580;
		if (start == 1'b0 && ^(main_thread102i_580) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_74_76_reg"); $finish; end
	end
	/* main: %445*/
	/*   %448 = mul nsw i32 %446, %447*/
	if ((cur_state == LEGUP_F_main_BB__445_137)) begin
		main_74_76_reg <= main_445_448;
		if (start == 1'b0 && ^(main_445_448) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_74_76_reg"); $finish; end
	end
	/* main: %467*/
	/*   %470 = mul nsw i32 %468, %469*/
	if ((cur_state == LEGUP_F_main_BB__467_147)) begin
		main_74_76_reg <= main_467_470;
		if (start == 1'b0 && ^(main_467_470) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_74_76_reg"); $finish; end
	end
	/* main: %488*/
	/*   %490 = mul nsw i32 %489, %477*/
	if ((cur_state == LEGUP_F_main_BB__488_159)) begin
		main_74_76_reg <= main_488_490;
		if (start == 1'b0 && ^(main_488_490) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_74_76_reg"); $finish; end
	end
	/* main: %.thread107.i*/
	/*   %599 = mul i32 %598, 27928*/
	if ((cur_state == LEGUP_F_main_BB_thread107i_217)) begin
		main_74_76_reg <= main_thread107i_599;
		if (start == 1'b0 && ^(main_thread107i_599) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_74_76_reg"); $finish; end
	end
	/* main: %.thread112.i*/
	/*   %618 = mul i32 %617, 30720*/
	if ((cur_state == LEGUP_F_main_BB_thread112i_227)) begin
		main_74_76_reg <= main_thread112i_618;
		if (start == 1'b0 && ^(main_thread112i_618) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_74_76_reg"); $finish; end
	end
	/* main: %.thread117.i*/
	/*   %637 = mul i32 %636, 17068*/
	if ((cur_state == LEGUP_F_main_BB_thread117i_237)) begin
		main_74_76_reg <= main_thread117i_637;
		if (start == 1'b0 && ^(main_thread117i_637) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_74_76_reg"); $finish; end
	end
	/* main: %.thread122.i*/
	/*   %656 = mul i32 %655, 18072*/
	if ((cur_state == LEGUP_F_main_BB_thread122i_247)) begin
		main_74_76_reg <= main_thread122i_656;
		if (start == 1'b0 && ^(main_thread122i_656) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_74_76_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %74*/
	/*   %77 = add nsw i32 %75, 16384*/
		main_74_77 = main_signed_add_32_0;
end
always @(*) begin
/* main: %74*/
/*   %77 = add nsw i32 %75, 16384*/
	main_74_77_reg = main_1_gep_reg;
end
always @(*) begin
	/* main: %74*/
	/*   %78 = add i32 %77, %76*/
		main_74_78 = main_signed_add_32_0;
end
always @(*) begin
/* main: %74*/
/*   %78 = add i32 %77, %76*/
	main_74_78_reg = main_1_5_reg;
end
always @(*) begin
	/* main: %74*/
	/*   %79 = lshr i32 %78, 15*/
		main_74_79 = (main_74_78 >>> (32'd15 % 32));
end
always @(posedge clk) begin
	/* main: %74*/
	/*   %79 = lshr i32 %78, 15*/
	if ((cur_state == LEGUP_F_main_BB__74_33)) begin
		main_74_79_reg <= main_74_79;
		if (start == 1'b0 && ^(main_74_79) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_74_79_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %74*/
	/*   %80 = trunc i32 %79 to i16*/
		main_74_80 = main_74_79[15:0];
end
always @(posedge clk) begin
	/* main: %74*/
	/*   %80 = trunc i32 %79 to i16*/
	if ((cur_state == LEGUP_F_main_BB__74_33)) begin
		main_74_80_reg <= main_74_80;
		if (start == 1'b0 && ^(main_74_80) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_74_80_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_mult_r.exit.us.i*/
	/*   %.0.i.us.i = phi i16 [ %80, %74 ], [ 32767, %.preheader6.split.us.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_preheader6splitusi_31) & (memory_controller_waitrequest == 1'd0)) & (main_preheader6splitusi_73 == 1'd1))) begin
		main_gsm_mult_rexitusi_0iusi = 16'd32767;
	end
	/* main: %gsm_mult_r.exit.us.i*/
	/*   %.0.i.us.i = phi i16 [ %80, %74 ], [ 32767, %.preheader6.split.us.i ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__74_33) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_gsm_mult_rexitusi_0iusi = main_74_80;
	end
end
always @(posedge clk) begin
	/* main: %gsm_mult_r.exit.us.i*/
	/*   %.0.i.us.i = phi i16 [ %80, %74 ], [ 32767, %.preheader6.split.us.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_preheader6splitusi_31) & (memory_controller_waitrequest == 1'd0)) & (main_preheader6splitusi_73 == 1'd1))) begin
		main_gsm_mult_rexitusi_0iusi_reg <= main_gsm_mult_rexitusi_0iusi;
		if (start == 1'b0 && ^(main_gsm_mult_rexitusi_0iusi) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_mult_rexitusi_0iusi_reg"); $finish; end
	end
	/* main: %gsm_mult_r.exit.us.i*/
	/*   %.0.i.us.i = phi i16 [ %80, %74 ], [ 32767, %.preheader6.split.us.i ]*/
	if (((cur_state == LEGUP_F_main_BB__74_33) & (memory_controller_waitrequest == 1'd0))) begin
		main_gsm_mult_rexitusi_0iusi_reg <= main_gsm_mult_rexitusi_0iusi;
		if (start == 1'b0 && ^(main_gsm_mult_rexitusi_0iusi) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_mult_rexitusi_0iusi_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_mult_r.exit.us.i*/
	/*   %81 = add nsw i32 %k.128.us.i, 1*/
		main_gsm_mult_rexitusi_81 = main_signed_add_32_0;
end
always @(posedge clk) begin
	/* main: %gsm_mult_r.exit.us.i*/
	/*   %81 = add nsw i32 %k.128.us.i, 1*/
	if ((cur_state == LEGUP_F_main_BB_gsm_mult_rexitusi_34)) begin
		main_gsm_mult_rexitusi_81_reg <= main_gsm_mult_rexitusi_81;
		if (start == 1'b0 && ^(main_gsm_mult_rexitusi_81) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_mult_rexitusi_81_reg"); $finish; end
	end
	/* main: %187*/
	/*   %235 = add nsw i32 %234, %190*/
	if ((cur_state == LEGUP_F_main_BB__187_53)) begin
		main_gsm_mult_rexitusi_81_reg <= main_187_235;
		if (start == 1'b0 && ^(main_187_235) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_mult_rexitusi_81_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_mult_r.exit.us.i*/
	/*   %exitcond41.i = icmp eq i32 %81, 160*/
		main_gsm_mult_rexitusi_exitcond41i = (main_gsm_mult_rexitusi_81 == 32'd160);
end
always @(posedge clk) begin
	/* main: %gsm_mult_r.exit.us.i*/
	/*   %exitcond41.i = icmp eq i32 %81, 160*/
	if ((cur_state == LEGUP_F_main_BB_gsm_mult_rexitusi_34)) begin
		main_gsm_mult_rexitusi_exitcond41i_reg <= main_gsm_mult_rexitusi_exitcond41i;
		if (start == 1'b0 && ^(main_gsm_mult_rexitusi_exitcond41i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_mult_rexitusi_exitcond41i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_mult_r.exit.i*/
	/*   %k.128.i = phi i32 [ %90, %gsm_mult_r.exit.i ], [ 0, %.preheader6.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_preheader6i_28) & (memory_controller_waitrequest == 1'd0)) & (main_preheader6i_69 == 1'd0))) begin
		main_gsm_mult_rexiti_k128i = 32'd0;
	end
	/* main: %gsm_mult_r.exit.i*/
	/*   %k.128.i = phi i32 [ %90, %gsm_mult_r.exit.i ], [ 0, %.preheader6.i ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_gsm_mult_rexiti_40) & (memory_controller_waitrequest == 1'd0)) & (main_gsm_mult_rexiti_exitcond39i_reg == 1'd0))) */ begin
		main_gsm_mult_rexiti_k128i = main_gsm_mult_rexiti_90_reg;
	end
end
always @(posedge clk) begin
	/* main: %gsm_mult_r.exit.i*/
	/*   %k.128.i = phi i32 [ %90, %gsm_mult_r.exit.i ], [ 0, %.preheader6.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_preheader6i_28) & (memory_controller_waitrequest == 1'd0)) & (main_preheader6i_69 == 1'd0))) begin
		main_gsm_mult_rexiti_k128i_reg <= main_gsm_mult_rexiti_k128i;
		if (start == 1'b0 && ^(main_gsm_mult_rexiti_k128i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_mult_rexiti_k128i_reg"); $finish; end
	end
	/* main: %gsm_mult_r.exit.i*/
	/*   %k.128.i = phi i32 [ %90, %gsm_mult_r.exit.i ], [ 0, %.preheader6.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_gsm_mult_rexiti_40) & (memory_controller_waitrequest == 1'd0)) & (main_gsm_mult_rexiti_exitcond39i_reg == 1'd0))) begin
		main_gsm_mult_rexiti_k128i_reg <= main_gsm_mult_rexiti_k128i;
		if (start == 1'b0 && ^(main_gsm_mult_rexiti_k128i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_mult_rexiti_k128i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_mult_r.exit.i*/
	/*   %gep_int20 = ptrtoint i16* %7 to i32*/
		main_gsm_mult_rexiti_gep_int20 = main_6_7_reg;
end
always @(posedge clk) begin
	/* main: %gsm_mult_r.exit.i*/
	/*   %gep_int20 = ptrtoint i16* %7 to i32*/
	if ((cur_state == LEGUP_F_main_BB_gsm_mult_rexiti_36)) begin
		main_gsm_mult_rexiti_gep_int20_reg <= main_gsm_mult_rexiti_gep_int20;
		if (start == 1'b0 && ^(main_gsm_mult_rexiti_gep_int20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_mult_rexiti_gep_int20_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_mult_r.exit.i*/
	/*   %gep_array21 = mul i32 %k.128.i, 2*/
		main_gsm_mult_rexiti_gep_array21 = (main_gsm_mult_rexiti_k128i_reg * 32'd2);
end
always @(posedge clk) begin
	/* main: %gsm_mult_r.exit.i*/
	/*   %gep_array21 = mul i32 %k.128.i, 2*/
	if ((cur_state == LEGUP_F_main_BB_gsm_mult_rexiti_36)) begin
		main_gsm_mult_rexiti_gep_array21_reg <= main_gsm_mult_rexiti_gep_array21;
		if (start == 1'b0 && ^(main_gsm_mult_rexiti_gep_array21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_mult_rexiti_gep_array21_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_mult_r.exit.i*/
	/*   %gep22 = add i32 %gep_int20, %gep_array21*/
		main_gsm_mult_rexiti_gep22 = main_signed_add_32_0;
end
always @(*) begin
/* main: %gsm_mult_r.exit.i*/
/*   %gep22 = add i32 %gep_int20, %gep_array21*/
	main_gsm_mult_rexiti_gep22_reg = main_1_gep_reg;
end
always @(*) begin
	/* main: %gsm_mult_r.exit.i*/
	/*   %82 = inttoptr i32 %gep22 to i16**/
		main_gsm_mult_rexiti_82 = main_gsm_mult_rexiti_gep22;
end
always @(posedge clk) begin
	/* main: %gsm_mult_r.exit.i*/
	/*   %82 = inttoptr i32 %gep22 to i16**/
	if ((cur_state == LEGUP_F_main_BB_gsm_mult_rexiti_37)) begin
		main_gsm_mult_rexiti_82_reg <= main_gsm_mult_rexiti_82;
		if (start == 1'b0 && ^(main_gsm_mult_rexiti_82) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_mult_rexiti_82_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_mult_r.exit.i*/
	/*   %83 = load i16* %82, align 2, !tbaa !1*/
		main_gsm_mult_rexiti_83 = main_0_so_out_a;
end
always @(posedge clk) begin
	/* main: %gsm_mult_r.exit.i*/
	/*   %83 = load i16* %82, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_gsm_mult_rexiti_38)) begin
		main_gsm_mult_rexiti_83_reg <= main_gsm_mult_rexiti_83;
		if (start == 1'b0 && ^(main_gsm_mult_rexiti_83) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_mult_rexiti_83_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_mult_r.exit.i*/
	/*   %84 = sext i16 %83 to i32*/
		main_gsm_mult_rexiti_84 = $signed(main_gsm_mult_rexiti_83);
end
always @(posedge clk) begin
	/* main: %gsm_mult_r.exit.i*/
	/*   %84 = sext i16 %83 to i32*/
	if ((cur_state == LEGUP_F_main_BB_gsm_mult_rexiti_38)) begin
		main_gsm_mult_rexiti_84_reg <= main_gsm_mult_rexiti_84;
		if (start == 1'b0 && ^(main_gsm_mult_rexiti_84) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_mult_rexiti_84_reg"); $finish; end
	end
end
always @(*) begin
	main_gsm_mult_rexiti_85 = main_signed_multiply_32_0;
end
always @(*) begin
/* main: %gsm_mult_r.exit.i*/
/*   %85 = mul nsw i32 %84, %70*/
	main_gsm_mult_rexiti_85_reg = main_74_76_reg;
end
always @(*) begin
	/* main: %gsm_mult_r.exit.i*/
	/*   %86 = add nsw i32 %84, 16384*/
		main_gsm_mult_rexiti_86 = main_signed_add_32_0;
end
always @(*) begin
/* main: %gsm_mult_r.exit.i*/
/*   %86 = add nsw i32 %84, 16384*/
	main_gsm_mult_rexiti_86_reg = main_1_gep_reg;
end
always @(*) begin
	/* main: %gsm_mult_r.exit.i*/
	/*   %87 = add i32 %86, %85*/
		main_gsm_mult_rexiti_87 = main_signed_add_32_0;
end
always @(*) begin
/* main: %gsm_mult_r.exit.i*/
/*   %87 = add i32 %86, %85*/
	main_gsm_mult_rexiti_87_reg = main_1_5_reg;
end
always @(*) begin
	/* main: %gsm_mult_r.exit.i*/
	/*   %88 = lshr i32 %87, 15*/
		main_gsm_mult_rexiti_88 = (main_gsm_mult_rexiti_87 >>> (32'd15 % 32));
end
always @(posedge clk) begin
	/* main: %gsm_mult_r.exit.i*/
	/*   %88 = lshr i32 %87, 15*/
	if ((cur_state == LEGUP_F_main_BB_gsm_mult_rexiti_39)) begin
		main_gsm_mult_rexiti_88_reg <= main_gsm_mult_rexiti_88;
		if (start == 1'b0 && ^(main_gsm_mult_rexiti_88) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_mult_rexiti_88_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_mult_r.exit.i*/
	/*   %89 = trunc i32 %88 to i16*/
		main_gsm_mult_rexiti_89 = main_gsm_mult_rexiti_88[15:0];
end
always @(posedge clk) begin
	/* main: %gsm_mult_r.exit.i*/
	/*   %89 = trunc i32 %88 to i16*/
	if ((cur_state == LEGUP_F_main_BB_gsm_mult_rexiti_39)) begin
		main_gsm_mult_rexiti_89_reg <= main_gsm_mult_rexiti_89;
		if (start == 1'b0 && ^(main_gsm_mult_rexiti_89) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_mult_rexiti_89_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_mult_r.exit.i*/
	/*   %90 = add nsw i32 %k.128.i, 1*/
		main_gsm_mult_rexiti_90 = main_signed_add_32_0;
end
always @(posedge clk) begin
	/* main: %gsm_mult_r.exit.i*/
	/*   %90 = add nsw i32 %k.128.i, 1*/
	if ((cur_state == LEGUP_F_main_BB_gsm_mult_rexiti_36)) begin
		main_gsm_mult_rexiti_90_reg <= main_gsm_mult_rexiti_90;
		if (start == 1'b0 && ^(main_gsm_mult_rexiti_90) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_mult_rexiti_90_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_mult_r.exit.i*/
	/*   %exitcond39.i = icmp eq i32 %90, 160*/
		main_gsm_mult_rexiti_exitcond39i = (main_gsm_mult_rexiti_90 == 32'd160);
end
always @(posedge clk) begin
	/* main: %gsm_mult_r.exit.i*/
	/*   %exitcond39.i = icmp eq i32 %90, 160*/
	if ((cur_state == LEGUP_F_main_BB_gsm_mult_rexiti_36)) begin
		main_gsm_mult_rexiti_exitcond39i_reg <= main_gsm_mult_rexiti_exitcond39i;
		if (start == 1'b0 && ^(main_gsm_mult_rexiti_exitcond39i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_mult_rexiti_exitcond39i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.thread.i*/
	/*   %91 = phi i1 [ %64, %62 ], [ false, %18 ], [ %64, %gsm_mult_r.exit.us.i ], [ %64, %gsm_mult_r.exit.i ]*/
	if ((((cur_state == LEGUP_F_main_BB__18_12) & (memory_controller_waitrequest == 1'd0)) & (main_18_20 == 1'd1))) begin
		main_threadi_91 = 1'd0;
	end
	/* main: %.thread.i*/
	/*   %91 = phi i1 [ %64, %62 ], [ false, %18 ], [ %64, %gsm_mult_r.exit.us.i ], [ %64, %gsm_mult_r.exit.i ]*/
	else if ((((cur_state == LEGUP_F_main_BB__62_27) & (memory_controller_waitrequest == 1'd0)) & (main_62_65 == 1'd0))) begin
		main_threadi_91 = main_62_64;
	end
	/* main: %.thread.i*/
	/*   %91 = phi i1 [ %64, %62 ], [ false, %18 ], [ %64, %gsm_mult_r.exit.us.i ], [ %64, %gsm_mult_r.exit.i ]*/
	else if ((((cur_state == LEGUP_F_main_BB_gsm_mult_rexitusi_35) & (memory_controller_waitrequest == 1'd0)) & (main_gsm_mult_rexitusi_exitcond41i_reg == 1'd1))) begin
		main_threadi_91 = main_62_64_reg;
	end
	/* main: %.thread.i*/
	/*   %91 = phi i1 [ %64, %62 ], [ false, %18 ], [ %64, %gsm_mult_r.exit.us.i ], [ %64, %gsm_mult_r.exit.i ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_gsm_mult_rexiti_40) & (memory_controller_waitrequest == 1'd0)) & (main_gsm_mult_rexiti_exitcond39i_reg == 1'd1))) */ begin
		main_threadi_91 = main_62_64_reg;
	end
end
always @(posedge clk) begin
	/* main: %.thread.i*/
	/*   %91 = phi i1 [ %64, %62 ], [ false, %18 ], [ %64, %gsm_mult_r.exit.us.i ], [ %64, %gsm_mult_r.exit.i ]*/
	if ((((cur_state == LEGUP_F_main_BB__18_12) & (memory_controller_waitrequest == 1'd0)) & (main_18_20 == 1'd1))) begin
		main_threadi_91_reg <= main_threadi_91;
		if (start == 1'b0 && ^(main_threadi_91) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_91_reg"); $finish; end
	end
	/* main: %.thread.i*/
	/*   %91 = phi i1 [ %64, %62 ], [ false, %18 ], [ %64, %gsm_mult_r.exit.us.i ], [ %64, %gsm_mult_r.exit.i ]*/
	if ((((cur_state == LEGUP_F_main_BB__62_27) & (memory_controller_waitrequest == 1'd0)) & (main_62_65 == 1'd0))) begin
		main_threadi_91_reg <= main_threadi_91;
		if (start == 1'b0 && ^(main_threadi_91) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_91_reg"); $finish; end
	end
	/* main: %.thread.i*/
	/*   %91 = phi i1 [ %64, %62 ], [ false, %18 ], [ %64, %gsm_mult_r.exit.us.i ], [ %64, %gsm_mult_r.exit.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_gsm_mult_rexitusi_35) & (memory_controller_waitrequest == 1'd0)) & (main_gsm_mult_rexitusi_exitcond41i_reg == 1'd1))) begin
		main_threadi_91_reg <= main_threadi_91;
		if (start == 1'b0 && ^(main_threadi_91) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_91_reg"); $finish; end
	end
	/* main: %.thread.i*/
	/*   %91 = phi i1 [ %64, %62 ], [ false, %18 ], [ %64, %gsm_mult_r.exit.us.i ], [ %64, %gsm_mult_r.exit.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_gsm_mult_rexiti_40) & (memory_controller_waitrequest == 1'd0)) & (main_gsm_mult_rexiti_exitcond39i_reg == 1'd1))) begin
		main_threadi_91_reg <= main_threadi_91;
		if (start == 1'b0 && ^(main_threadi_91) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_91_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.thread.i*/
	/*   %scalauto.03.i = phi i32 [ %phitmp.i, %62 ], [ 0, %18 ], [ %phitmp.i, %gsm_mult_r.exit.us.i ], [ %phitmp.i, %gsm_mult_r.exit.i ]*/
	if ((((cur_state == LEGUP_F_main_BB__18_12) & (memory_controller_waitrequest == 1'd0)) & (main_18_20 == 1'd1))) begin
		main_threadi_scalauto03i = 32'd0;
	end
	/* main: %.thread.i*/
	/*   %scalauto.03.i = phi i32 [ %phitmp.i, %62 ], [ 0, %18 ], [ %phitmp.i, %gsm_mult_r.exit.us.i ], [ %phitmp.i, %gsm_mult_r.exit.i ]*/
	else if ((((cur_state == LEGUP_F_main_BB__62_27) & (memory_controller_waitrequest == 1'd0)) & (main_62_65 == 1'd0))) begin
		main_threadi_scalauto03i = main_62_phitmpi;
	end
	/* main: %.thread.i*/
	/*   %scalauto.03.i = phi i32 [ %phitmp.i, %62 ], [ 0, %18 ], [ %phitmp.i, %gsm_mult_r.exit.us.i ], [ %phitmp.i, %gsm_mult_r.exit.i ]*/
	else if ((((cur_state == LEGUP_F_main_BB_gsm_mult_rexitusi_35) & (memory_controller_waitrequest == 1'd0)) & (main_gsm_mult_rexitusi_exitcond41i_reg == 1'd1))) begin
		main_threadi_scalauto03i = main_62_phitmpi_reg;
	end
	/* main: %.thread.i*/
	/*   %scalauto.03.i = phi i32 [ %phitmp.i, %62 ], [ 0, %18 ], [ %phitmp.i, %gsm_mult_r.exit.us.i ], [ %phitmp.i, %gsm_mult_r.exit.i ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_gsm_mult_rexiti_40) & (memory_controller_waitrequest == 1'd0)) & (main_gsm_mult_rexiti_exitcond39i_reg == 1'd1))) */ begin
		main_threadi_scalauto03i = main_62_phitmpi_reg;
	end
end
always @(posedge clk) begin
	/* main: %.thread.i*/
	/*   %scalauto.03.i = phi i32 [ %phitmp.i, %62 ], [ 0, %18 ], [ %phitmp.i, %gsm_mult_r.exit.us.i ], [ %phitmp.i, %gsm_mult_r.exit.i ]*/
	if ((((cur_state == LEGUP_F_main_BB__18_12) & (memory_controller_waitrequest == 1'd0)) & (main_18_20 == 1'd1))) begin
		main_threadi_scalauto03i_reg <= main_threadi_scalauto03i;
		if (start == 1'b0 && ^(main_threadi_scalauto03i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_scalauto03i_reg"); $finish; end
	end
	/* main: %.thread.i*/
	/*   %scalauto.03.i = phi i32 [ %phitmp.i, %62 ], [ 0, %18 ], [ %phitmp.i, %gsm_mult_r.exit.us.i ], [ %phitmp.i, %gsm_mult_r.exit.i ]*/
	if ((((cur_state == LEGUP_F_main_BB__62_27) & (memory_controller_waitrequest == 1'd0)) & (main_62_65 == 1'd0))) begin
		main_threadi_scalauto03i_reg <= main_threadi_scalauto03i;
		if (start == 1'b0 && ^(main_threadi_scalauto03i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_scalauto03i_reg"); $finish; end
	end
	/* main: %.thread.i*/
	/*   %scalauto.03.i = phi i32 [ %phitmp.i, %62 ], [ 0, %18 ], [ %phitmp.i, %gsm_mult_r.exit.us.i ], [ %phitmp.i, %gsm_mult_r.exit.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_gsm_mult_rexitusi_35) & (memory_controller_waitrequest == 1'd0)) & (main_gsm_mult_rexitusi_exitcond41i_reg == 1'd1))) begin
		main_threadi_scalauto03i_reg <= main_threadi_scalauto03i;
		if (start == 1'b0 && ^(main_threadi_scalauto03i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_scalauto03i_reg"); $finish; end
	end
	/* main: %.thread.i*/
	/*   %scalauto.03.i = phi i32 [ %phitmp.i, %62 ], [ 0, %18 ], [ %phitmp.i, %gsm_mult_r.exit.us.i ], [ %phitmp.i, %gsm_mult_r.exit.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_gsm_mult_rexiti_40) & (memory_controller_waitrequest == 1'd0)) & (main_gsm_mult_rexiti_exitcond39i_reg == 1'd1))) begin
		main_threadi_scalauto03i_reg <= main_threadi_scalauto03i;
		if (start == 1'b0 && ^(main_threadi_scalauto03i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_scalauto03i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.thread.i*/
	/*   %92 = load i16* %7, align 2, !tbaa !1*/
		main_threadi_92 = main_0_so_out_a;
end
always @(posedge clk) begin
	/* main: %.thread.i*/
	/*   %92 = load i16* %7, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_threadi_42)) begin
		main_threadi_92_reg <= main_threadi_92;
		if (start == 1'b0 && ^(main_threadi_92) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_92_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.thread.i*/
	/*   %93 = sext i16 %92 to i32*/
		main_threadi_93 = $signed(main_threadi_92);
end
always @(posedge clk) begin
	/* main: %.thread.i*/
	/*   %93 = sext i16 %92 to i32*/
	if ((cur_state == LEGUP_F_main_BB_threadi_42)) begin
		main_threadi_93_reg <= main_threadi_93;
		if (start == 1'b0 && ^(main_threadi_93) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_93_reg"); $finish; end
	end
end
always @(*) begin
	main_threadi_94 = main_signed_multiply_32_0;
end
always @(*) begin
/* main: %.thread.i*/
/*   %94 = mul nsw i32 %93, %93*/
	main_threadi_94_reg = main_74_76_reg;
end
always @(*) begin
	/* main: %.thread.i*/
	/*   %gep_int23 = ptrtoint i16* %7 to i32*/
		main_threadi_gep_int23 = main_6_7_reg;
end
always @(posedge clk) begin
	/* main: %.thread.i*/
	/*   %gep_int23 = ptrtoint i16* %7 to i32*/
	if ((cur_state == LEGUP_F_main_BB_threadi_41)) begin
		main_threadi_gep_int23_reg <= main_threadi_gep_int23;
		if (start == 1'b0 && ^(main_threadi_gep_int23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_gep_int23_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.thread.i*/
	/*   %gep24 = add i32 %gep_int23, 2*/
		main_threadi_gep24 = main_signed_add_32_0;
end
always @(*) begin
/* main: %.thread.i*/
/*   %gep24 = add i32 %gep_int23, 2*/
	main_threadi_gep24_reg = main_1_gep_reg;
end
always @(*) begin
	/* main: %.thread.i*/
	/*   %95 = inttoptr i32 %gep24 to i16**/
		main_threadi_95 = main_threadi_gep24;
end
always @(posedge clk) begin
	/* main: %.thread.i*/
	/*   %95 = inttoptr i32 %gep24 to i16**/
	if ((cur_state == LEGUP_F_main_BB_threadi_41)) begin
		main_threadi_95_reg <= main_threadi_95;
		if (start == 1'b0 && ^(main_threadi_95) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_95_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.thread.i*/
	/*   %96 = load i16* %95, align 2, !tbaa !1*/
		main_threadi_96 = main_0_so_out_b;
end
always @(posedge clk) begin
	/* main: %.thread.i*/
	/*   %96 = load i16* %95, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_threadi_42)) begin
		main_threadi_96_reg <= main_threadi_96;
		if (start == 1'b0 && ^(main_threadi_96) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_96_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.thread.i*/
	/*   %97 = sext i16 %96 to i32*/
		main_threadi_97 = $signed(main_threadi_96);
end
always @(posedge clk) begin
	/* main: %.thread.i*/
	/*   %97 = sext i16 %96 to i32*/
	if ((cur_state == LEGUP_F_main_BB_threadi_42)) begin
		main_threadi_97_reg <= main_threadi_97;
		if (start == 1'b0 && ^(main_threadi_97) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_97_reg"); $finish; end
	end
end
always @(*) begin
	main_threadi_98 = main_signed_multiply_32_14;
end
always @(*) begin
/* main: %.thread.i*/
/*   %98 = mul nsw i32 %97, %97*/
	main_threadi_98_reg = main_threadi_137_reg;
end
always @(*) begin
	/* main: %.thread.i*/
	/*   %99 = add nuw nsw i32 %98, %94*/
		main_threadi_99 = main_signed_add_32_0;
end
always @(*) begin
/* main: %.thread.i*/
/*   %99 = add nuw nsw i32 %98, %94*/
	main_threadi_99_reg = main_1_gep_reg;
end
always @(*) begin
	/* main: %.thread.i*/
	/*   %gep_int25 = ptrtoint i16* %7 to i32*/
		main_threadi_gep_int25 = main_6_7_reg;
end
always @(posedge clk) begin
	/* main: %.thread.i*/
	/*   %gep_int25 = ptrtoint i16* %7 to i32*/
	if ((cur_state == LEGUP_F_main_BB_threadi_41)) begin
		main_threadi_gep_int25_reg <= main_threadi_gep_int25;
		if (start == 1'b0 && ^(main_threadi_gep_int25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_gep_int25_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.thread.i*/
	/*   %gep26 = add i32 %gep_int25, 4*/
		main_threadi_gep26 = main_signed_add_32_1;
end
always @(*) begin
/* main: %.thread.i*/
/*   %gep26 = add i32 %gep_int25, 4*/
	main_threadi_gep26_reg = main_1_gep3_reg;
end
always @(*) begin
	/* main: %.thread.i*/
	/*   %100 = inttoptr i32 %gep26 to i16**/
		main_threadi_100 = main_threadi_gep26;
end
always @(posedge clk) begin
	/* main: %.thread.i*/
	/*   %100 = inttoptr i32 %gep26 to i16**/
	if ((cur_state == LEGUP_F_main_BB_threadi_41)) begin
		main_threadi_100_reg <= main_threadi_100;
		if (start == 1'b0 && ^(main_threadi_100) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_100_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.thread.i*/
	/*   %101 = load i16* %100, align 2, !tbaa !1*/
		main_threadi_101 = main_0_so_out_a;
end
always @(posedge clk) begin
	/* main: %.thread.i*/
	/*   %101 = load i16* %100, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_threadi_43)) begin
		main_threadi_101_reg <= main_threadi_101;
		if (start == 1'b0 && ^(main_threadi_101) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_101_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.thread.i*/
	/*   %102 = sext i16 %101 to i32*/
		main_threadi_102 = $signed(main_threadi_101);
end
always @(posedge clk) begin
	/* main: %.thread.i*/
	/*   %102 = sext i16 %101 to i32*/
	if ((cur_state == LEGUP_F_main_BB_threadi_43)) begin
		main_threadi_102_reg <= main_threadi_102;
		if (start == 1'b0 && ^(main_threadi_102) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_102_reg"); $finish; end
	end
end
always @(*) begin
	main_threadi_103 = main_signed_multiply_32_14;
end
always @(*) begin
/* main: %.thread.i*/
/*   %103 = mul nsw i32 %102, %102*/
	main_threadi_103_reg = main_threadi_137_reg;
end
always @(*) begin
	/* main: %.thread.i*/
	/*   %104 = add nuw nsw i32 %103, %99*/
		main_threadi_104 = main_signed_add_32_0;
end
always @(*) begin
/* main: %.thread.i*/
/*   %104 = add nuw nsw i32 %103, %99*/
	main_threadi_104_reg = main_1_5_reg;
end
always @(*) begin
	/* main: %.thread.i*/
	/*   %105 = add nsw i32 %102, %93*/
		main_threadi_105 = main_signed_add_32_1;
end
always @(*) begin
/* main: %.thread.i*/
/*   %105 = add nsw i32 %102, %93*/
	main_threadi_105_reg = main_1_gep3_reg;
end
always @(*) begin
	main_threadi_106 = main_signed_multiply_32_10;
end
always @(*) begin
/* main: %.thread.i*/
/*   %106 = mul nsw i32 %97, %105*/
	main_threadi_106_reg = main_threadi_129_reg;
end
always @(*) begin
	main_threadi_107 = main_signed_multiply_32_9;
end
always @(posedge clk) begin
	/* main: %.thread.i*/
	/*   %107 = mul nsw i32 %93, %102*/
	if ((cur_state == LEGUP_F_main_BB_threadi_44)) begin
		main_threadi_107_reg <= main_threadi_107;
		if (start == 1'b0 && ^(main_threadi_107) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_107_reg"); $finish; end
	end
	/* main: %.thread.i*/
	/*   %107 = mul nsw i32 %93, %102*/
	if ((cur_state == LEGUP_F_main_BB_threadi_44)) begin
		main_threadi_107_reg <= main_threadi_107;
		if (start == 1'b0 && ^(main_threadi_107) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_107_reg"); $finish; end
	end
	/* main: %.thread.i*/
	/*   %123 = mul nsw i32 %110, %120*/
	if ((cur_state == LEGUP_F_main_BB_threadi_45)) begin
		main_threadi_107_reg <= main_threadi_123;
		if (start == 1'b0 && ^(main_threadi_123) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_107_reg"); $finish; end
	end
	/* main: %.thread.i*/
	/*   %175 = mul nsw i32 %97, %162*/
	if ((cur_state == LEGUP_F_main_BB_threadi_46)) begin
		main_threadi_107_reg <= main_threadi_175;
		if (start == 1'b0 && ^(main_threadi_175) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_107_reg"); $finish; end
	end
	/* main: %187*/
	/*   %209 = mul nsw i32 %208, %200*/
	if ((cur_state == LEGUP_F_main_BB__187_50)) begin
		main_threadi_107_reg <= main_187_209;
		if (start == 1'b0 && ^(main_187_209) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_107_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.thread.i*/
	/*   %gep_int27 = ptrtoint i16* %7 to i32*/
		main_threadi_gep_int27 = main_6_7_reg;
end
always @(posedge clk) begin
	/* main: %.thread.i*/
	/*   %gep_int27 = ptrtoint i16* %7 to i32*/
	if ((cur_state == LEGUP_F_main_BB_threadi_41)) begin
		main_threadi_gep_int27_reg <= main_threadi_gep_int27;
		if (start == 1'b0 && ^(main_threadi_gep_int27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_gep_int27_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.thread.i*/
	/*   %gep28 = add i32 %gep_int27, 6*/
		main_threadi_gep28 = main_signed_add_32_9;
end
always @(*) begin
/* main: %.thread.i*/
/*   %gep28 = add i32 %gep_int27, 6*/
	main_threadi_gep28_reg = main_threadi_134_reg;
end
always @(*) begin
	/* main: %.thread.i*/
	/*   %108 = inttoptr i32 %gep28 to i16**/
		main_threadi_108 = main_threadi_gep28;
end
always @(posedge clk) begin
	/* main: %.thread.i*/
	/*   %108 = inttoptr i32 %gep28 to i16**/
	if ((cur_state == LEGUP_F_main_BB_threadi_41)) begin
		main_threadi_108_reg <= main_threadi_108;
		if (start == 1'b0 && ^(main_threadi_108) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_108_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.thread.i*/
	/*   %109 = load i16* %108, align 2, !tbaa !1*/
		main_threadi_109 = main_0_so_out_b;
end
always @(posedge clk) begin
	/* main: %.thread.i*/
	/*   %109 = load i16* %108, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_threadi_43)) begin
		main_threadi_109_reg <= main_threadi_109;
		if (start == 1'b0 && ^(main_threadi_109) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_109_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.thread.i*/
	/*   %110 = sext i16 %109 to i32*/
		main_threadi_110 = $signed(main_threadi_109);
end
always @(posedge clk) begin
	/* main: %.thread.i*/
	/*   %110 = sext i16 %109 to i32*/
	if ((cur_state == LEGUP_F_main_BB_threadi_43)) begin
		main_threadi_110_reg <= main_threadi_110;
		if (start == 1'b0 && ^(main_threadi_110) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_110_reg"); $finish; end
	end
end
always @(*) begin
	main_threadi_111 = main_signed_multiply_32_12;
end
always @(*) begin
/* main: %.thread.i*/
/*   %111 = mul nsw i32 %110, %110*/
	main_threadi_111_reg = main_threadi_139_reg;
end
always @(*) begin
	/* main: %.thread.i*/
	/*   %112 = add nuw nsw i32 %111, %104*/
		main_threadi_112 = main_signed_add_32_1;
end
always @(*) begin
/* main: %.thread.i*/
/*   %112 = add nuw nsw i32 %111, %104*/
	main_threadi_112_reg = main_187_230_reg;
end
always @(*) begin
	main_threadi_113 = main_signed_multiply_32_13;
end
always @(*) begin
/* main: %.thread.i*/
/*   %113 = mul nsw i32 %102, %110*/
	main_threadi_113_reg = main_threadi_141_reg;
end
always @(*) begin
	/* main: %.thread.i*/
	/*   %114 = add nsw i32 %113, %106*/
		main_threadi_114 = main_signed_add_32_12;
end
always @(posedge clk) begin
	/* main: %.thread.i*/
	/*   %114 = add nsw i32 %113, %106*/
	if ((cur_state == LEGUP_F_main_BB_threadi_44)) begin
		main_threadi_114_reg <= main_threadi_114;
		if (start == 1'b0 && ^(main_threadi_114) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_114_reg"); $finish; end
	end
	/* main: %187*/
	/*   %gep42 = add i32 %gep_int41, -4*/
	if ((cur_state == LEGUP_F_main_BB__187_48)) begin
		main_threadi_114_reg <= main_187_gep42;
		if (start == 1'b0 && ^(main_187_gep42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_114_reg"); $finish; end
	end
end
always @(*) begin
	main_threadi_115 = main_signed_multiply_32_0;
end
always @(*) begin
/* main: %.thread.i*/
/*   %115 = mul nsw i32 %97, %110*/
	main_threadi_115_reg = main_74_76_reg;
end
always @(*) begin
	/* main: %.thread.i*/
	/*   %116 = add nsw i32 %115, %107*/
		main_threadi_116 = main_signed_add_32_2;
end
always @(posedge clk) begin
	/* main: %.thread.i*/
	/*   %116 = add nsw i32 %115, %107*/
	if ((cur_state == LEGUP_F_main_BB_threadi_44)) begin
		main_threadi_116_reg <= main_threadi_116;
		if (start == 1'b0 && ^(main_threadi_116) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_116_reg"); $finish; end
	end
end
always @(*) begin
	main_threadi_117 = main_signed_multiply_32_11;
end
always @(posedge clk) begin
	/* main: %.thread.i*/
	/*   %117 = mul nsw i32 %93, %110*/
	if ((cur_state == LEGUP_F_main_BB_threadi_44)) begin
		main_threadi_117_reg <= main_threadi_117;
		if (start == 1'b0 && ^(main_threadi_117) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_117_reg"); $finish; end
	end
	/* main: %.thread.i*/
	/*   %117 = mul nsw i32 %93, %110*/
	if ((cur_state == LEGUP_F_main_BB_threadi_44)) begin
		main_threadi_117_reg <= main_threadi_117;
		if (start == 1'b0 && ^(main_threadi_117) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_117_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.thread.i*/
	/*   %gep_int29 = ptrtoint i16* %7 to i32*/
		main_threadi_gep_int29 = main_6_7_reg;
end
always @(posedge clk) begin
	/* main: %.thread.i*/
	/*   %gep_int29 = ptrtoint i16* %7 to i32*/
	if ((cur_state == LEGUP_F_main_BB_threadi_41)) begin
		main_threadi_gep_int29_reg <= main_threadi_gep_int29;
		if (start == 1'b0 && ^(main_threadi_gep_int29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_gep_int29_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.thread.i*/
	/*   %gep30 = add i32 %gep_int29, 8*/
		main_threadi_gep30 = main_signed_add_32_10;
end
always @(*) begin
/* main: %.thread.i*/
/*   %gep30 = add i32 %gep_int29, 8*/
	main_threadi_gep30_reg = main_threadi_136_reg;
end
always @(*) begin
	/* main: %.thread.i*/
	/*   %118 = inttoptr i32 %gep30 to i16**/
		main_threadi_118 = main_threadi_gep30;
end
always @(posedge clk) begin
	/* main: %.thread.i*/
	/*   %118 = inttoptr i32 %gep30 to i16**/
	if ((cur_state == LEGUP_F_main_BB_threadi_41)) begin
		main_threadi_118_reg <= main_threadi_118;
		if (start == 1'b0 && ^(main_threadi_118) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_118_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.thread.i*/
	/*   %119 = load i16* %118, align 2, !tbaa !1*/
		main_threadi_119 = main_0_so_out_a;
end
always @(posedge clk) begin
	/* main: %.thread.i*/
	/*   %119 = load i16* %118, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_threadi_44)) begin
		main_threadi_119_reg <= main_threadi_119;
		if (start == 1'b0 && ^(main_threadi_119) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_119_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.thread.i*/
	/*   %120 = sext i16 %119 to i32*/
		main_threadi_120 = $signed(main_threadi_119);
end
always @(posedge clk) begin
	/* main: %.thread.i*/
	/*   %120 = sext i16 %119 to i32*/
	if ((cur_state == LEGUP_F_main_BB_threadi_44)) begin
		main_threadi_120_reg <= main_threadi_120;
		if (start == 1'b0 && ^(main_threadi_120) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_120_reg"); $finish; end
	end
end
always @(*) begin
	main_threadi_121 = main_signed_multiply_32_0;
end
always @(*) begin
/* main: %.thread.i*/
/*   %121 = mul nsw i32 %120, %120*/
	main_threadi_121_reg = main_74_76_reg;
end
always @(*) begin
	/* main: %.thread.i*/
	/*   %122 = add nuw nsw i32 %121, %112*/
		main_threadi_122 = main_signed_add_32_0;
end
always @(*) begin
/* main: %.thread.i*/
/*   %122 = add nuw nsw i32 %121, %112*/
	main_threadi_122_reg = main_1_gep_reg;
end
always @(*) begin
	main_threadi_123 = main_signed_multiply_32_9;
end
always @(*) begin
/* main: %.thread.i*/
/*   %123 = mul nsw i32 %110, %120*/
	main_threadi_123_reg = main_threadi_107_reg;
end
always @(*) begin
	/* main: %.thread.i*/
	/*   %124 = add nsw i32 %123, %114*/
		main_threadi_124 = main_signed_add_32_1;
end
always @(*) begin
/* main: %.thread.i*/
/*   %124 = add nsw i32 %123, %114*/
	main_threadi_124_reg = main_1_gep3_reg;
end
always @(*) begin
	main_threadi_125 = main_signed_multiply_32_6;
end
always @(posedge clk) begin
	/* main: %.thread.i*/
	/*   %125 = mul nsw i32 %102, %120*/
	if ((cur_state == LEGUP_F_main_BB_threadi_45)) begin
		main_threadi_125_reg <= main_threadi_125;
		if (start == 1'b0 && ^(main_threadi_125) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_125_reg"); $finish; end
	end
	/* main: %.thread.i*/
	/*   %125 = mul nsw i32 %102, %120*/
	if ((cur_state == LEGUP_F_main_BB_threadi_45)) begin
		main_threadi_125_reg <= main_threadi_125;
		if (start == 1'b0 && ^(main_threadi_125) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_125_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.thread.i*/
	/*   %126 = add nsw i32 %125, %116*/
		main_threadi_126 = main_signed_add_32_2;
end
always @(posedge clk) begin
	/* main: %.thread.i*/
	/*   %126 = add nsw i32 %125, %116*/
	if ((cur_state == LEGUP_F_main_BB_threadi_45)) begin
		main_threadi_126_reg <= main_threadi_126;
		if (start == 1'b0 && ^(main_threadi_126) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_126_reg"); $finish; end
	end
	/* main: %187*/
	/*   %gep44 = add i32 %gep_int43, -6*/
	if ((cur_state == LEGUP_F_main_BB__187_48)) begin
		main_threadi_126_reg <= main_187_gep44;
		if (start == 1'b0 && ^(main_187_gep44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_126_reg"); $finish; end
	end
	/* main: %gsm_norm.exit.i*/
	/*   %gep82 = add i32 %gep_int81, 6*/
	if ((cur_state == LEGUP_F_main_BB_gsm_normexiti_76)) begin
		main_threadi_126_reg <= main_gsm_normexiti_gep82;
		if (start == 1'b0 && ^(main_gsm_normexiti_gep82) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_126_reg"); $finish; end
	end
	/* main: %.preheader*/
	/*   %683 = add nsw i32 %682, %680*/
	if ((cur_state == LEGUP_F_main_BB_preheader_255)) begin
		main_threadi_126_reg <= main_preheader_683;
		if (start == 1'b0 && ^(main_preheader_683) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_126_reg"); $finish; end
	end
end
always @(*) begin
	main_threadi_127 = main_signed_multiply_32_11;
end
always @(posedge clk) begin
	/* main: %.thread.i*/
	/*   %127 = mul nsw i32 %97, %120*/
	if ((cur_state == LEGUP_F_main_BB_threadi_45)) begin
		main_threadi_127_reg <= main_threadi_127;
		if (start == 1'b0 && ^(main_threadi_127) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_127_reg"); $finish; end
	end
	/* main: %.thread.i*/
	/*   %127 = mul nsw i32 %97, %120*/
	if ((cur_state == LEGUP_F_main_BB_threadi_45)) begin
		main_threadi_127_reg <= main_threadi_127;
		if (start == 1'b0 && ^(main_threadi_127) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_127_reg"); $finish; end
	end
	/* main: %.thread.i*/
	/*   %149 = mul nsw i32 %132, %146*/
	if ((cur_state == LEGUP_F_main_BB_threadi_46)) begin
		main_threadi_127_reg <= main_threadi_149;
		if (start == 1'b0 && ^(main_threadi_149) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_127_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.thread.i*/
	/*   %128 = add nsw i32 %127, %117*/
		main_threadi_128 = main_signed_add_32_12;
end
always @(posedge clk) begin
	/* main: %.thread.i*/
	/*   %128 = add nsw i32 %127, %117*/
	if ((cur_state == LEGUP_F_main_BB_threadi_45)) begin
		main_threadi_128_reg <= main_threadi_128;
		if (start == 1'b0 && ^(main_threadi_128) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_128_reg"); $finish; end
	end
	/* main: %.thread.i*/
	/*   %gep34 = add i32 %gep_int33, 12*/
	if ((cur_state == LEGUP_F_main_BB_threadi_41)) begin
		main_threadi_128_reg <= main_threadi_gep34;
		if (start == 1'b0 && ^(main_threadi_gep34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_128_reg"); $finish; end
	end
	/* main: %gsm_norm.exit.i*/
	/*   %gep103 = add i32 %gep_int102, 12*/
	if ((cur_state == LEGUP_F_main_BB_gsm_normexiti_76)) begin
		main_threadi_128_reg <= main_gsm_normexiti_gep103;
		if (start == 1'b0 && ^(main_gsm_normexiti_gep103) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_128_reg"); $finish; end
	end
	/* main: %187*/
	/*   %210 = add nsw i32 %209, %195*/
	if ((cur_state == LEGUP_F_main_BB__187_50)) begin
		main_threadi_128_reg <= main_187_210;
		if (start == 1'b0 && ^(main_187_210) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_128_reg"); $finish; end
	end
	/* main: %.preheader*/
	/*   %680 = add nsw i32 %679, %677*/
	if ((cur_state == LEGUP_F_main_BB_preheader_255)) begin
		main_threadi_128_reg <= main_preheader_680;
		if (start == 1'b0 && ^(main_preheader_680) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_128_reg"); $finish; end
	end
end
always @(*) begin
	main_threadi_129 = main_signed_multiply_32_10;
end
always @(posedge clk) begin
	/* main: %.thread.i*/
	/*   %129 = mul nsw i32 %93, %120*/
	if ((cur_state == LEGUP_F_main_BB_threadi_45)) begin
		main_threadi_129_reg <= main_threadi_129;
		if (start == 1'b0 && ^(main_threadi_129) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_129_reg"); $finish; end
	end
	/* main: %.thread.i*/
	/*   %129 = mul nsw i32 %93, %120*/
	if ((cur_state == LEGUP_F_main_BB_threadi_45)) begin
		main_threadi_129_reg <= main_threadi_129;
		if (start == 1'b0 && ^(main_threadi_129) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_129_reg"); $finish; end
	end
	/* main: %.thread.i*/
	/*   %106 = mul nsw i32 %97, %105*/
	if ((cur_state == LEGUP_F_main_BB_threadi_44)) begin
		main_threadi_129_reg <= main_threadi_106;
		if (start == 1'b0 && ^(main_threadi_106) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_129_reg"); $finish; end
	end
	/* main: %.thread.i*/
	/*   %171 = mul nsw i32 %110, %162*/
	if ((cur_state == LEGUP_F_main_BB_threadi_46)) begin
		main_threadi_129_reg <= main_threadi_171;
		if (start == 1'b0 && ^(main_threadi_171) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_129_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.thread.i*/
	/*   %gep_int31 = ptrtoint i16* %7 to i32*/
		main_threadi_gep_int31 = main_6_7_reg;
end
always @(posedge clk) begin
	/* main: %.thread.i*/
	/*   %gep_int31 = ptrtoint i16* %7 to i32*/
	if ((cur_state == LEGUP_F_main_BB_threadi_41)) begin
		main_threadi_gep_int31_reg <= main_threadi_gep_int31;
		if (start == 1'b0 && ^(main_threadi_gep_int31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_gep_int31_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.thread.i*/
	/*   %gep32 = add i32 %gep_int31, 10*/
		main_threadi_gep32 = main_signed_add_32_11;
end
always @(posedge clk) begin
	/* main: %.thread.i*/
	/*   %gep32 = add i32 %gep_int31, 10*/
	if ((cur_state == LEGUP_F_main_BB_threadi_41)) begin
		main_threadi_gep32_reg <= main_threadi_gep32;
		if (start == 1'b0 && ^(main_threadi_gep32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_gep32_reg"); $finish; end
	end
	/* main: %.thread.i*/
	/*   %138 = add nsw i32 %137, %126*/
	if ((cur_state == LEGUP_F_main_BB_threadi_45)) begin
		main_threadi_gep32_reg <= main_threadi_138;
		if (start == 1'b0 && ^(main_threadi_138) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_gep32_reg"); $finish; end
	end
	/* main: %187*/
	/*   %gep50 = add i32 %gep_int49, -12*/
	if ((cur_state == LEGUP_F_main_BB__187_48)) begin
		main_threadi_gep32_reg <= main_187_gep50;
		if (start == 1'b0 && ^(main_187_gep50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_gep32_reg"); $finish; end
	end
	/* main: %gsm_norm.exit.i*/
	/*   %gep101 = add i32 %gep_int100, 10*/
	if ((cur_state == LEGUP_F_main_BB_gsm_normexiti_76)) begin
		main_threadi_gep32_reg <= main_gsm_normexiti_gep101;
		if (start == 1'b0 && ^(main_gsm_normexiti_gep101) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_gep32_reg"); $finish; end
	end
	/* main: %.preheader*/
	/*   %686 = add nsw i32 %685, %683*/
	if ((cur_state == LEGUP_F_main_BB_preheader_255)) begin
		main_threadi_gep32_reg <= main_preheader_686;
		if (start == 1'b0 && ^(main_preheader_686) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_gep32_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.thread.i*/
	/*   %130 = inttoptr i32 %gep32 to i16**/
		main_threadi_130 = main_threadi_gep32;
end
always @(posedge clk) begin
	/* main: %.thread.i*/
	/*   %130 = inttoptr i32 %gep32 to i16**/
	if ((cur_state == LEGUP_F_main_BB_threadi_41)) begin
		main_threadi_130_reg <= main_threadi_130;
		if (start == 1'b0 && ^(main_threadi_130) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_130_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.thread.i*/
	/*   %131 = load i16* %130, align 2, !tbaa !1*/
		main_threadi_131 = main_0_so_out_b;
end
always @(posedge clk) begin
	/* main: %.thread.i*/
	/*   %131 = load i16* %130, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_threadi_44)) begin
		main_threadi_131_reg <= main_threadi_131;
		if (start == 1'b0 && ^(main_threadi_131) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_131_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.thread.i*/
	/*   %132 = sext i16 %131 to i32*/
		main_threadi_132 = $signed(main_threadi_131);
end
always @(posedge clk) begin
	/* main: %.thread.i*/
	/*   %132 = sext i16 %131 to i32*/
	if ((cur_state == LEGUP_F_main_BB_threadi_44)) begin
		main_threadi_132_reg <= main_threadi_132;
		if (start == 1'b0 && ^(main_threadi_132) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_132_reg"); $finish; end
	end
end
always @(*) begin
	main_threadi_133 = main_signed_multiply_32_7;
end
always @(posedge clk) begin
	/* main: %.thread.i*/
	/*   %133 = mul nsw i32 %132, %132*/
	if ((cur_state == LEGUP_F_main_BB_threadi_45)) begin
		main_threadi_133_reg <= main_threadi_133;
		if (start == 1'b0 && ^(main_threadi_133) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_133_reg"); $finish; end
	end
	/* main: %.thread.i*/
	/*   %133 = mul nsw i32 %132, %132*/
	if ((cur_state == LEGUP_F_main_BB_threadi_45)) begin
		main_threadi_133_reg <= main_threadi_133;
		if (start == 1'b0 && ^(main_threadi_133) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_133_reg"); $finish; end
	end
	/* main: %.thread.i*/
	/*   %155 = mul nsw i32 %102, %146*/
	if ((cur_state == LEGUP_F_main_BB_threadi_46)) begin
		main_threadi_133_reg <= main_threadi_155;
		if (start == 1'b0 && ^(main_threadi_155) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_133_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.thread.i*/
	/*   %134 = add nuw nsw i32 %133, %122*/
		main_threadi_134 = main_signed_add_32_9;
end
always @(posedge clk) begin
	/* main: %.thread.i*/
	/*   %134 = add nuw nsw i32 %133, %122*/
	if ((cur_state == LEGUP_F_main_BB_threadi_45)) begin
		main_threadi_134_reg <= main_threadi_134;
		if (start == 1'b0 && ^(main_threadi_134) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_134_reg"); $finish; end
	end
	/* main: %187*/
	/*   %gep46 = add i32 %gep_int45, -8*/
	if ((cur_state == LEGUP_F_main_BB__187_48)) begin
		main_threadi_134_reg <= main_187_gep46;
		if (start == 1'b0 && ^(main_187_gep46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_134_reg"); $finish; end
	end
	/* main: %.thread.i*/
	/*   %gep28 = add i32 %gep_int27, 6*/
	if ((cur_state == LEGUP_F_main_BB_threadi_41)) begin
		main_threadi_134_reg <= main_threadi_gep28;
		if (start == 1'b0 && ^(main_threadi_gep28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_134_reg"); $finish; end
	end
	/* main: %gsm_norm.exit.i*/
	/*   %gep97 = add i32 %gep_int96, 6*/
	if ((cur_state == LEGUP_F_main_BB_gsm_normexiti_76)) begin
		main_threadi_134_reg <= main_gsm_normexiti_gep97;
		if (start == 1'b0 && ^(main_gsm_normexiti_gep97) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_134_reg"); $finish; end
	end
	/* main: %.preheader*/
	/*   %689 = add nsw i32 %688, %686*/
	if ((cur_state == LEGUP_F_main_BB_preheader_255)) begin
		main_threadi_134_reg <= main_preheader_689;
		if (start == 1'b0 && ^(main_preheader_689) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_134_reg"); $finish; end
	end
end
always @(*) begin
	main_threadi_135 = main_signed_multiply_32_8;
end
always @(posedge clk) begin
	/* main: %.thread.i*/
	/*   %135 = mul nsw i32 %120, %132*/
	if ((cur_state == LEGUP_F_main_BB_threadi_45)) begin
		main_threadi_135_reg <= main_threadi_135;
		if (start == 1'b0 && ^(main_threadi_135) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_135_reg"); $finish; end
	end
	/* main: %.thread.i*/
	/*   %135 = mul nsw i32 %120, %132*/
	if ((cur_state == LEGUP_F_main_BB_threadi_45)) begin
		main_threadi_135_reg <= main_threadi_135;
		if (start == 1'b0 && ^(main_threadi_135) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_135_reg"); $finish; end
	end
	/* main: %.thread.i*/
	/*   %163 = mul nsw i32 %162, %162*/
	if ((cur_state == LEGUP_F_main_BB_threadi_46)) begin
		main_threadi_135_reg <= main_threadi_163;
		if (start == 1'b0 && ^(main_threadi_163) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_135_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.thread.i*/
	/*   %136 = add nsw i32 %135, %124*/
		main_threadi_136 = main_signed_add_32_10;
end
always @(posedge clk) begin
	/* main: %.thread.i*/
	/*   %136 = add nsw i32 %135, %124*/
	if ((cur_state == LEGUP_F_main_BB_threadi_45)) begin
		main_threadi_136_reg <= main_threadi_136;
		if (start == 1'b0 && ^(main_threadi_136) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_136_reg"); $finish; end
	end
	/* main: %187*/
	/*   %gep48 = add i32 %gep_int47, -10*/
	if ((cur_state == LEGUP_F_main_BB__187_48)) begin
		main_threadi_136_reg <= main_187_gep48;
		if (start == 1'b0 && ^(main_187_gep48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_136_reg"); $finish; end
	end
	/* main: %.thread.i*/
	/*   %gep30 = add i32 %gep_int29, 8*/
	if ((cur_state == LEGUP_F_main_BB_threadi_41)) begin
		main_threadi_136_reg <= main_threadi_gep30;
		if (start == 1'b0 && ^(main_threadi_gep30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_136_reg"); $finish; end
	end
	/* main: %gsm_norm.exit.i*/
	/*   %gep99 = add i32 %gep_int98, 8*/
	if ((cur_state == LEGUP_F_main_BB_gsm_normexiti_76)) begin
		main_threadi_136_reg <= main_gsm_normexiti_gep99;
		if (start == 1'b0 && ^(main_gsm_normexiti_gep99) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_136_reg"); $finish; end
	end
	/* main: %.preheader*/
	/*   %692 = add nsw i32 %691, %689*/
	if ((cur_state == LEGUP_F_main_BB_preheader_255)) begin
		main_threadi_136_reg <= main_preheader_692;
		if (start == 1'b0 && ^(main_preheader_692) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_136_reg"); $finish; end
	end
end
always @(*) begin
	main_threadi_137 = main_signed_multiply_32_14;
end
always @(posedge clk) begin
	/* main: %.thread.i*/
	/*   %137 = mul nsw i32 %110, %132*/
	if ((cur_state == LEGUP_F_main_BB_threadi_45)) begin
		main_threadi_137_reg <= main_threadi_137;
		if (start == 1'b0 && ^(main_threadi_137) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_137_reg"); $finish; end
	end
	/* main: %.thread.i*/
	/*   %137 = mul nsw i32 %110, %132*/
	if ((cur_state == LEGUP_F_main_BB_threadi_45)) begin
		main_threadi_137_reg <= main_threadi_137;
		if (start == 1'b0 && ^(main_threadi_137) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_137_reg"); $finish; end
	end
	/* main: %.thread.i*/
	/*   %151 = mul nsw i32 %120, %146*/
	if ((cur_state == LEGUP_F_main_BB_threadi_46)) begin
		main_threadi_137_reg <= main_threadi_151;
		if (start == 1'b0 && ^(main_threadi_151) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_137_reg"); $finish; end
	end
	/* main: %187*/
	/*   %219 = mul nsw i32 %218, %200*/
	if ((cur_state == LEGUP_F_main_BB__187_51)) begin
		main_threadi_137_reg <= main_187_219;
		if (start == 1'b0 && ^(main_187_219) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_137_reg"); $finish; end
	end
	/* main: %187*/
	/*   %229 = mul nsw i32 %228, %200*/
	if ((cur_state == LEGUP_F_main_BB__187_52)) begin
		main_threadi_137_reg <= main_187_229;
		if (start == 1'b0 && ^(main_187_229) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_137_reg"); $finish; end
	end
	/* main: %187*/
	/*   %239 = mul nsw i32 %238, %200*/
	if ((cur_state == LEGUP_F_main_BB__187_53)) begin
		main_threadi_137_reg <= main_187_239;
		if (start == 1'b0 && ^(main_187_239) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_137_reg"); $finish; end
	end
	/* main: %.thread.i*/
	/*   %98 = mul nsw i32 %97, %97*/
	if ((cur_state == LEGUP_F_main_BB_threadi_43)) begin
		main_threadi_137_reg <= main_threadi_98;
		if (start == 1'b0 && ^(main_threadi_98) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_137_reg"); $finish; end
	end
	/* main: %.thread.i*/
	/*   %103 = mul nsw i32 %102, %102*/
	if ((cur_state == LEGUP_F_main_BB_threadi_44)) begin
		main_threadi_137_reg <= main_threadi_103;
		if (start == 1'b0 && ^(main_threadi_103) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_137_reg"); $finish; end
	end
	/* main: %187*/
	/*   %204 = mul nsw i32 %203, %200*/
	if ((cur_state == LEGUP_F_main_BB__187_50)) begin
		main_threadi_137_reg <= main_187_204;
		if (start == 1'b0 && ^(main_187_204) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_137_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.thread.i*/
	/*   %138 = add nsw i32 %137, %126*/
		main_threadi_138 = main_signed_add_32_11;
end
always @(*) begin
/* main: %.thread.i*/
/*   %138 = add nsw i32 %137, %126*/
	main_threadi_138_reg = main_threadi_gep32_reg;
end
always @(*) begin
	main_threadi_139 = main_signed_multiply_32_12;
end
always @(posedge clk) begin
	/* main: %.thread.i*/
	/*   %139 = mul nsw i32 %102, %132*/
	if ((cur_state == LEGUP_F_main_BB_threadi_45)) begin
		main_threadi_139_reg <= main_threadi_139;
		if (start == 1'b0 && ^(main_threadi_139) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_139_reg"); $finish; end
	end
	/* main: %.thread.i*/
	/*   %139 = mul nsw i32 %102, %132*/
	if ((cur_state == LEGUP_F_main_BB_threadi_45)) begin
		main_threadi_139_reg <= main_threadi_139;
		if (start == 1'b0 && ^(main_threadi_139) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_139_reg"); $finish; end
	end
	/* main: %.thread.i*/
	/*   %111 = mul nsw i32 %110, %110*/
	if ((cur_state == LEGUP_F_main_BB_threadi_44)) begin
		main_threadi_139_reg <= main_threadi_111;
		if (start == 1'b0 && ^(main_threadi_111) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_139_reg"); $finish; end
	end
	/* main: %.thread.i*/
	/*   %165 = mul nsw i32 %146, %162*/
	if ((cur_state == LEGUP_F_main_BB_threadi_46)) begin
		main_threadi_139_reg <= main_threadi_165;
		if (start == 1'b0 && ^(main_threadi_165) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_139_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.thread.i*/
	/*   %140 = add nsw i32 %139, %128*/
		main_threadi_140 = main_signed_add_32_7;
end
always @(posedge clk) begin
	/* main: %.thread.i*/
	/*   %140 = add nsw i32 %139, %128*/
	if ((cur_state == LEGUP_F_main_BB_threadi_45)) begin
		main_threadi_140_reg <= main_threadi_140;
		if (start == 1'b0 && ^(main_threadi_140) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_140_reg"); $finish; end
	end
	/* main: %187*/
	/*   %gep52 = add i32 %gep_int51, -14*/
	if ((cur_state == LEGUP_F_main_BB__187_48)) begin
		main_threadi_140_reg <= main_187_gep52;
		if (start == 1'b0 && ^(main_187_gep52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_140_reg"); $finish; end
	end
	/* main: %gsm_norm.exit.i*/
	/*   %gep93 = add i32 %gep_int92, 2*/
	if ((cur_state == LEGUP_F_main_BB_gsm_normexiti_76)) begin
		main_threadi_140_reg <= main_gsm_normexiti_gep93;
		if (start == 1'b0 && ^(main_gsm_normexiti_gep93) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_140_reg"); $finish; end
	end
end
always @(*) begin
	main_threadi_141 = main_signed_multiply_32_13;
end
always @(posedge clk) begin
	/* main: %.thread.i*/
	/*   %141 = mul nsw i32 %97, %132*/
	if ((cur_state == LEGUP_F_main_BB_threadi_45)) begin
		main_threadi_141_reg <= main_threadi_141;
		if (start == 1'b0 && ^(main_threadi_141) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_141_reg"); $finish; end
	end
	/* main: %.thread.i*/
	/*   %141 = mul nsw i32 %97, %132*/
	if ((cur_state == LEGUP_F_main_BB_threadi_45)) begin
		main_threadi_141_reg <= main_threadi_141;
		if (start == 1'b0 && ^(main_threadi_141) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_141_reg"); $finish; end
	end
	/* main: %.thread.i*/
	/*   %147 = mul nsw i32 %146, %146*/
	if ((cur_state == LEGUP_F_main_BB_threadi_46)) begin
		main_threadi_141_reg <= main_threadi_147;
		if (start == 1'b0 && ^(main_threadi_147) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_141_reg"); $finish; end
	end
	/* main: %.thread.i*/
	/*   %113 = mul nsw i32 %102, %110*/
	if ((cur_state == LEGUP_F_main_BB_threadi_44)) begin
		main_threadi_141_reg <= main_threadi_113;
		if (start == 1'b0 && ^(main_threadi_113) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_141_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.thread.i*/
	/*   %142 = add nsw i32 %141, %129*/
		main_threadi_142 = main_signed_add_32_8;
end
always @(posedge clk) begin
	/* main: %.thread.i*/
	/*   %142 = add nsw i32 %141, %129*/
	if ((cur_state == LEGUP_F_main_BB_threadi_45)) begin
		main_threadi_142_reg <= main_threadi_142;
		if (start == 1'b0 && ^(main_threadi_142) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_142_reg"); $finish; end
	end
	/* main: %187*/
	/*   %241 = add nsw i32 %i.010.i, 1*/
	if ((cur_state == LEGUP_F_main_BB__187_48)) begin
		main_threadi_142_reg <= main_187_241;
		if (start == 1'b0 && ^(main_187_241) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_142_reg"); $finish; end
	end
	/* main: %gsm_norm.exit.i*/
	/*   %gep95 = add i32 %gep_int94, 4*/
	if ((cur_state == LEGUP_F_main_BB_gsm_normexiti_76)) begin
		main_threadi_142_reg <= main_gsm_normexiti_gep95;
		if (start == 1'b0 && ^(main_gsm_normexiti_gep95) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_142_reg"); $finish; end
	end
end
always @(*) begin
	main_threadi_143 = main_signed_multiply_32_5;
end
always @(posedge clk) begin
	/* main: %.thread.i*/
	/*   %143 = mul nsw i32 %93, %132*/
	if ((cur_state == LEGUP_F_main_BB_threadi_45)) begin
		main_threadi_143_reg <= main_threadi_143;
		if (start == 1'b0 && ^(main_threadi_143) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_143_reg"); $finish; end
	end
	/* main: %.thread.i*/
	/*   %143 = mul nsw i32 %93, %132*/
	if ((cur_state == LEGUP_F_main_BB_threadi_45)) begin
		main_threadi_143_reg <= main_threadi_143;
		if (start == 1'b0 && ^(main_threadi_143) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_143_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.thread.i*/
	/*   %gep_int33 = ptrtoint i16* %7 to i32*/
		main_threadi_gep_int33 = main_6_7_reg;
end
always @(posedge clk) begin
	/* main: %.thread.i*/
	/*   %gep_int33 = ptrtoint i16* %7 to i32*/
	if ((cur_state == LEGUP_F_main_BB_threadi_41)) begin
		main_threadi_gep_int33_reg <= main_threadi_gep_int33;
		if (start == 1'b0 && ^(main_threadi_gep_int33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_gep_int33_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.thread.i*/
	/*   %gep34 = add i32 %gep_int33, 12*/
		main_threadi_gep34 = main_signed_add_32_12;
end
always @(*) begin
/* main: %.thread.i*/
/*   %gep34 = add i32 %gep_int33, 12*/
	main_threadi_gep34_reg = main_threadi_128_reg;
end
always @(*) begin
	/* main: %.thread.i*/
	/*   %144 = inttoptr i32 %gep34 to i16**/
		main_threadi_144 = main_threadi_gep34;
end
always @(posedge clk) begin
	/* main: %.thread.i*/
	/*   %144 = inttoptr i32 %gep34 to i16**/
	if ((cur_state == LEGUP_F_main_BB_threadi_41)) begin
		main_threadi_144_reg <= main_threadi_144;
		if (start == 1'b0 && ^(main_threadi_144) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_144_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.thread.i*/
	/*   %145 = load i16* %144, align 2, !tbaa !1*/
		main_threadi_145 = main_0_so_out_a;
end
always @(posedge clk) begin
	/* main: %.thread.i*/
	/*   %145 = load i16* %144, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_threadi_45)) begin
		main_threadi_145_reg <= main_threadi_145;
		if (start == 1'b0 && ^(main_threadi_145) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_145_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.thread.i*/
	/*   %146 = sext i16 %145 to i32*/
		main_threadi_146 = $signed(main_threadi_145);
end
always @(posedge clk) begin
	/* main: %.thread.i*/
	/*   %146 = sext i16 %145 to i32*/
	if ((cur_state == LEGUP_F_main_BB_threadi_45)) begin
		main_threadi_146_reg <= main_threadi_146;
		if (start == 1'b0 && ^(main_threadi_146) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_146_reg"); $finish; end
	end
end
always @(*) begin
	main_threadi_147 = main_signed_multiply_32_13;
end
always @(*) begin
/* main: %.thread.i*/
/*   %147 = mul nsw i32 %146, %146*/
	main_threadi_147_reg = main_threadi_141_reg;
end
always @(*) begin
	/* main: %.thread.i*/
	/*   %148 = add nuw nsw i32 %147, %134*/
		main_threadi_148 = main_signed_add_32_0;
end
always @(*) begin
/* main: %.thread.i*/
/*   %148 = add nuw nsw i32 %147, %134*/
	main_threadi_148_reg = main_1_gep_reg;
end
always @(*) begin
	main_threadi_149 = main_signed_multiply_32_11;
end
always @(*) begin
/* main: %.thread.i*/
/*   %149 = mul nsw i32 %132, %146*/
	main_threadi_149_reg = main_threadi_127_reg;
end
always @(*) begin
	/* main: %.thread.i*/
	/*   %150 = add nsw i32 %149, %136*/
		main_threadi_150 = main_signed_add_32_1;
end
always @(*) begin
/* main: %.thread.i*/
/*   %150 = add nsw i32 %149, %136*/
	main_threadi_150_reg = main_1_gep3_reg;
end
always @(*) begin
	main_threadi_151 = main_signed_multiply_32_14;
end
always @(*) begin
/* main: %.thread.i*/
/*   %151 = mul nsw i32 %120, %146*/
	main_threadi_151_reg = main_threadi_137_reg;
end
always @(*) begin
	/* main: %.thread.i*/
	/*   %152 = add nsw i32 %151, %138*/
		main_threadi_152 = main_signed_add_32_7;
end
always @(posedge clk) begin
	/* main: %.thread.i*/
	/*   %152 = add nsw i32 %151, %138*/
	if ((cur_state == LEGUP_F_main_BB_threadi_46)) begin
		main_threadi_152_reg <= main_threadi_152;
		if (start == 1'b0 && ^(main_threadi_152) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_152_reg"); $finish; end
	end
end
always @(*) begin
	main_threadi_153 = main_signed_multiply_32_2;
end
always @(posedge clk) begin
	/* main: %.thread.i*/
	/*   %153 = mul nsw i32 %110, %146*/
	if ((cur_state == LEGUP_F_main_BB_threadi_46)) begin
		main_threadi_153_reg <= main_threadi_153;
		if (start == 1'b0 && ^(main_threadi_153) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_153_reg"); $finish; end
	end
	/* main: %.thread.i*/
	/*   %153 = mul nsw i32 %110, %146*/
	if ((cur_state == LEGUP_F_main_BB_threadi_46)) begin
		main_threadi_153_reg <= main_threadi_153;
		if (start == 1'b0 && ^(main_threadi_153) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_153_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.thread.i*/
	/*   %154 = add nsw i32 %153, %140*/
		main_threadi_154 = main_signed_add_32_8;
end
always @(posedge clk) begin
	/* main: %.thread.i*/
	/*   %154 = add nsw i32 %153, %140*/
	if ((cur_state == LEGUP_F_main_BB_threadi_46)) begin
		main_threadi_154_reg <= main_threadi_154;
		if (start == 1'b0 && ^(main_threadi_154) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_154_reg"); $finish; end
	end
end
always @(*) begin
	main_threadi_155 = main_signed_multiply_32_7;
end
always @(*) begin
/* main: %.thread.i*/
/*   %155 = mul nsw i32 %102, %146*/
	main_threadi_155_reg = main_threadi_133_reg;
end
always @(*) begin
	/* main: %.thread.i*/
	/*   %156 = add nsw i32 %155, %142*/
		main_threadi_156 = main_signed_add_32_5;
end
always @(posedge clk) begin
	/* main: %.thread.i*/
	/*   %156 = add nsw i32 %155, %142*/
	if ((cur_state == LEGUP_F_main_BB_threadi_46)) begin
		main_threadi_156_reg <= main_threadi_156;
		if (start == 1'b0 && ^(main_threadi_156) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_156_reg"); $finish; end
	end
	/* main: %gsm_norm.exit.i*/
	/*   %gep88 = add i32 %gep_int87, 12*/
	if ((cur_state == LEGUP_F_main_BB_gsm_normexiti_76)) begin
		main_threadi_156_reg <= main_gsm_normexiti_gep88;
		if (start == 1'b0 && ^(main_gsm_normexiti_gep88) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_156_reg"); $finish; end
	end
end
always @(*) begin
	main_threadi_157 = main_signed_multiply_32_3;
end
always @(posedge clk) begin
	/* main: %.thread.i*/
	/*   %157 = mul nsw i32 %97, %146*/
	if ((cur_state == LEGUP_F_main_BB_threadi_46)) begin
		main_threadi_157_reg <= main_threadi_157;
		if (start == 1'b0 && ^(main_threadi_157) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_157_reg"); $finish; end
	end
	/* main: %.thread.i*/
	/*   %157 = mul nsw i32 %97, %146*/
	if ((cur_state == LEGUP_F_main_BB_threadi_46)) begin
		main_threadi_157_reg <= main_threadi_157;
		if (start == 1'b0 && ^(main_threadi_157) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_157_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.thread.i*/
	/*   %158 = add nsw i32 %157, %143*/
		main_threadi_158 = main_signed_add_32_3;
end
always @(posedge clk) begin
	/* main: %.thread.i*/
	/*   %158 = add nsw i32 %157, %143*/
	if ((cur_state == LEGUP_F_main_BB_threadi_46)) begin
		main_threadi_158_reg <= main_threadi_158;
		if (start == 1'b0 && ^(main_threadi_158) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_158_reg"); $finish; end
	end
	/* main: %gsm_norm.exit.i*/
	/*   %gep84 = add i32 %gep_int83, 8*/
	if ((cur_state == LEGUP_F_main_BB_gsm_normexiti_76)) begin
		main_threadi_158_reg <= main_gsm_normexiti_gep84;
		if (start == 1'b0 && ^(main_gsm_normexiti_gep84) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_158_reg"); $finish; end
	end
end
always @(*) begin
	main_threadi_159 = main_signed_multiply_32_4;
end
always @(posedge clk) begin
	/* main: %.thread.i*/
	/*   %159 = mul nsw i32 %93, %146*/
	if ((cur_state == LEGUP_F_main_BB_threadi_46)) begin
		main_threadi_159_reg <= main_threadi_159;
		if (start == 1'b0 && ^(main_threadi_159) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_159_reg"); $finish; end
	end
	/* main: %.thread.i*/
	/*   %159 = mul nsw i32 %93, %146*/
	if ((cur_state == LEGUP_F_main_BB_threadi_46)) begin
		main_threadi_159_reg <= main_threadi_159;
		if (start == 1'b0 && ^(main_threadi_159) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_159_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.thread.i*/
	/*   %gep_int35 = ptrtoint i16* %7 to i32*/
		main_threadi_gep_int35 = main_6_7_reg;
end
always @(posedge clk) begin
	/* main: %.thread.i*/
	/*   %gep_int35 = ptrtoint i16* %7 to i32*/
	if ((cur_state == LEGUP_F_main_BB_threadi_41)) begin
		main_threadi_gep_int35_reg <= main_threadi_gep_int35;
		if (start == 1'b0 && ^(main_threadi_gep_int35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_gep_int35_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.thread.i*/
	/*   %gep36 = add i32 %gep_int35, 14*/
		main_threadi_gep36 = main_signed_add_32_6;
end
always @(posedge clk) begin
	/* main: %.thread.i*/
	/*   %gep36 = add i32 %gep_int35, 14*/
	if ((cur_state == LEGUP_F_main_BB_threadi_41)) begin
		main_threadi_gep36_reg <= main_threadi_gep36;
		if (start == 1'b0 && ^(main_threadi_gep36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_gep36_reg"); $finish; end
	end
	/* main: %gsm_norm.exit.i*/
	/*   %gep90 = add i32 %gep_int89, 14*/
	if ((cur_state == LEGUP_F_main_BB_gsm_normexiti_76)) begin
		main_threadi_gep36_reg <= main_gsm_normexiti_gep90;
		if (start == 1'b0 && ^(main_gsm_normexiti_gep90) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_gep36_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.thread.i*/
	/*   %160 = inttoptr i32 %gep36 to i16**/
		main_threadi_160 = main_threadi_gep36;
end
always @(posedge clk) begin
	/* main: %.thread.i*/
	/*   %160 = inttoptr i32 %gep36 to i16**/
	if ((cur_state == LEGUP_F_main_BB_threadi_41)) begin
		main_threadi_160_reg <= main_threadi_160;
		if (start == 1'b0 && ^(main_threadi_160) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_160_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.thread.i*/
	/*   %161 = load i16* %160, align 2, !tbaa !1*/
		main_threadi_161 = main_0_so_out_b;
end
always @(posedge clk) begin
	/* main: %.thread.i*/
	/*   %161 = load i16* %160, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_threadi_45)) begin
		main_threadi_161_reg <= main_threadi_161;
		if (start == 1'b0 && ^(main_threadi_161) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_161_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.thread.i*/
	/*   %162 = sext i16 %161 to i32*/
		main_threadi_162 = $signed(main_threadi_161);
end
always @(posedge clk) begin
	/* main: %.thread.i*/
	/*   %162 = sext i16 %161 to i32*/
	if ((cur_state == LEGUP_F_main_BB_threadi_45)) begin
		main_threadi_162_reg <= main_threadi_162;
		if (start == 1'b0 && ^(main_threadi_162) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_162_reg"); $finish; end
	end
end
always @(*) begin
	main_threadi_163 = main_signed_multiply_32_8;
end
always @(*) begin
/* main: %.thread.i*/
/*   %163 = mul nsw i32 %162, %162*/
	main_threadi_163_reg = main_threadi_135_reg;
end
always @(*) begin
	/* main: %.thread.i*/
	/*   %164 = add nsw i32 %163, %148*/
		main_threadi_164 = main_signed_add_32_2;
end
always @(posedge clk) begin
	/* main: %.thread.i*/
	/*   %164 = add nsw i32 %163, %148*/
	if ((cur_state == LEGUP_F_main_BB_threadi_46)) begin
		main_threadi_164_reg <= main_threadi_164;
		if (start == 1'b0 && ^(main_threadi_164) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_164_reg"); $finish; end
	end
end
always @(*) begin
	main_threadi_165 = main_signed_multiply_32_12;
end
always @(*) begin
/* main: %.thread.i*/
/*   %165 = mul nsw i32 %146, %162*/
	main_threadi_165_reg = main_threadi_139_reg;
end
always @(*) begin
	/* main: %.thread.i*/
	/*   %166 = add nsw i32 %165, %150*/
		main_threadi_166 = main_signed_add_32_9;
end
always @(posedge clk) begin
	/* main: %.thread.i*/
	/*   %166 = add nsw i32 %165, %150*/
	if ((cur_state == LEGUP_F_main_BB_threadi_46)) begin
		main_threadi_166_reg <= main_threadi_166;
		if (start == 1'b0 && ^(main_threadi_166) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_166_reg"); $finish; end
	end
end
always @(*) begin
	main_threadi_167 = main_signed_multiply_32_0;
end
always @(*) begin
/* main: %.thread.i*/
/*   %167 = mul nsw i32 %132, %162*/
	main_threadi_167_reg = main_74_76_reg;
end
always @(*) begin
	/* main: %.thread.i*/
	/*   %168 = add nsw i32 %167, %152*/
		main_threadi_168 = main_signed_add_32_10;
end
always @(posedge clk) begin
	/* main: %.thread.i*/
	/*   %168 = add nsw i32 %167, %152*/
	if ((cur_state == LEGUP_F_main_BB_threadi_46)) begin
		main_threadi_168_reg <= main_threadi_168;
		if (start == 1'b0 && ^(main_threadi_168) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_168_reg"); $finish; end
	end
end
always @(*) begin
	main_threadi_169 = main_signed_multiply_32_5;
end
always @(posedge clk) begin
	/* main: %.thread.i*/
	/*   %169 = mul nsw i32 %120, %162*/
	if ((cur_state == LEGUP_F_main_BB_threadi_46)) begin
		main_threadi_169_reg <= main_threadi_169;
		if (start == 1'b0 && ^(main_threadi_169) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_169_reg"); $finish; end
	end
	/* main: %.thread.i*/
	/*   %169 = mul nsw i32 %120, %162*/
	if ((cur_state == LEGUP_F_main_BB_threadi_46)) begin
		main_threadi_169_reg <= main_threadi_169;
		if (start == 1'b0 && ^(main_threadi_169) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_169_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.thread.i*/
	/*   %170 = add nsw i32 %169, %154*/
		main_threadi_170 = main_signed_add_32_11;
end
always @(posedge clk) begin
	/* main: %.thread.i*/
	/*   %170 = add nsw i32 %169, %154*/
	if ((cur_state == LEGUP_F_main_BB_threadi_46)) begin
		main_threadi_170_reg <= main_threadi_170;
		if (start == 1'b0 && ^(main_threadi_170) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_170_reg"); $finish; end
	end
end
always @(*) begin
	main_threadi_171 = main_signed_multiply_32_10;
end
always @(*) begin
/* main: %.thread.i*/
/*   %171 = mul nsw i32 %110, %162*/
	main_threadi_171_reg = main_threadi_129_reg;
end
always @(*) begin
	/* main: %.thread.i*/
	/*   %172 = add nsw i32 %171, %156*/
		main_threadi_172 = main_signed_add_32_6;
end
always @(posedge clk) begin
	/* main: %.thread.i*/
	/*   %172 = add nsw i32 %171, %156*/
	if ((cur_state == LEGUP_F_main_BB_threadi_46)) begin
		main_threadi_172_reg <= main_threadi_172;
		if (start == 1'b0 && ^(main_threadi_172) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_172_reg"); $finish; end
	end
end
always @(*) begin
	main_threadi_173 = main_signed_multiply_32_1;
end
always @(posedge clk) begin
	/* main: %.thread.i*/
	/*   %173 = mul nsw i32 %102, %162*/
	if ((cur_state == LEGUP_F_main_BB_threadi_46)) begin
		main_threadi_173_reg <= main_threadi_173;
		if (start == 1'b0 && ^(main_threadi_173) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_173_reg"); $finish; end
	end
	/* main: %.thread.i*/
	/*   %173 = mul nsw i32 %102, %162*/
	if ((cur_state == LEGUP_F_main_BB_threadi_46)) begin
		main_threadi_173_reg <= main_threadi_173;
		if (start == 1'b0 && ^(main_threadi_173) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_173_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.thread.i*/
	/*   %174 = add nsw i32 %173, %158*/
		main_threadi_174 = main_signed_add_32_4;
end
always @(posedge clk) begin
	/* main: %.thread.i*/
	/*   %174 = add nsw i32 %173, %158*/
	if ((cur_state == LEGUP_F_main_BB_threadi_46)) begin
		main_threadi_174_reg <= main_threadi_174;
		if (start == 1'b0 && ^(main_threadi_174) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_174_reg"); $finish; end
	end
	/* main: %gsm_norm.exit.i*/
	/*   %gep86 = add i32 %gep_int85, 10*/
	if ((cur_state == LEGUP_F_main_BB_gsm_normexiti_76)) begin
		main_threadi_174_reg <= main_gsm_normexiti_gep86;
		if (start == 1'b0 && ^(main_gsm_normexiti_gep86) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_174_reg"); $finish; end
	end
end
always @(*) begin
	main_threadi_175 = main_signed_multiply_32_9;
end
always @(*) begin
/* main: %.thread.i*/
/*   %175 = mul nsw i32 %97, %162*/
	main_threadi_175_reg = main_threadi_107_reg;
end
always @(*) begin
	/* main: %.thread.i*/
	/*   %176 = add nsw i32 %175, %159*/
		main_threadi_176 = main_signed_add_32_12;
end
always @(posedge clk) begin
	/* main: %.thread.i*/
	/*   %176 = add nsw i32 %175, %159*/
	if ((cur_state == LEGUP_F_main_BB_threadi_46)) begin
		main_threadi_176_reg <= main_threadi_176;
		if (start == 1'b0 && ^(main_threadi_176) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_176_reg"); $finish; end
	end
end
always @(*) begin
	main_threadi_177 = main_signed_multiply_32_6;
end
always @(posedge clk) begin
	/* main: %.thread.i*/
	/*   %177 = mul nsw i32 %93, %162*/
	if ((cur_state == LEGUP_F_main_BB_threadi_46)) begin
		main_threadi_177_reg <= main_threadi_177;
		if (start == 1'b0 && ^(main_threadi_177) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_177_reg"); $finish; end
	end
	/* main: %.thread.i*/
	/*   %177 = mul nsw i32 %93, %162*/
	if ((cur_state == LEGUP_F_main_BB_threadi_46)) begin
		main_threadi_177_reg <= main_threadi_177;
		if (start == 1'b0 && ^(main_threadi_177) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_177_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader5.i*/
	/*   %.lcssa13 = phi i32 [ %240, %187 ]*/
		main_preheader5i_lcssa13 = main_187_240;
end
always @(posedge clk) begin
	/* main: %.preheader5.i*/
	/*   %.lcssa13 = phi i32 [ %240, %187 ]*/
	if ((((cur_state == LEGUP_F_main_BB__187_53) & (memory_controller_waitrequest == 1'd0)) & (main_187_exitcondi_reg == 1'd1))) begin
		main_preheader5i_lcssa13_reg <= main_preheader5i_lcssa13;
		if (start == 1'b0 && ^(main_preheader5i_lcssa13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader5i_lcssa13_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader5.i*/
	/*   %.lcssa12 = phi i32 [ %235, %187 ]*/
		main_preheader5i_lcssa12 = main_187_235;
end
always @(posedge clk) begin
	/* main: %.preheader5.i*/
	/*   %.lcssa12 = phi i32 [ %235, %187 ]*/
	if ((((cur_state == LEGUP_F_main_BB__187_53) & (memory_controller_waitrequest == 1'd0)) & (main_187_exitcondi_reg == 1'd1))) begin
		main_preheader5i_lcssa12_reg <= main_preheader5i_lcssa12;
		if (start == 1'b0 && ^(main_preheader5i_lcssa12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader5i_lcssa12_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader5.i*/
	/*   %.lcssa11 = phi i32 [ %230, %187 ]*/
		main_preheader5i_lcssa11 = main_187_230_reg;
end
always @(posedge clk) begin
	/* main: %.preheader5.i*/
	/*   %.lcssa11 = phi i32 [ %230, %187 ]*/
	if ((((cur_state == LEGUP_F_main_BB__187_53) & (memory_controller_waitrequest == 1'd0)) & (main_187_exitcondi_reg == 1'd1))) begin
		main_preheader5i_lcssa11_reg <= main_preheader5i_lcssa11;
		if (start == 1'b0 && ^(main_preheader5i_lcssa11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader5i_lcssa11_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader5.i*/
	/*   %.lcssa10 = phi i32 [ %225, %187 ]*/
		main_preheader5i_lcssa10 = main_187_225_reg;
end
always @(posedge clk) begin
	/* main: %.preheader5.i*/
	/*   %.lcssa10 = phi i32 [ %225, %187 ]*/
	if ((((cur_state == LEGUP_F_main_BB__187_53) & (memory_controller_waitrequest == 1'd0)) & (main_187_exitcondi_reg == 1'd1))) begin
		main_preheader5i_lcssa10_reg <= main_preheader5i_lcssa10;
		if (start == 1'b0 && ^(main_preheader5i_lcssa10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader5i_lcssa10_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader5.i*/
	/*   %.lcssa9 = phi i32 [ %220, %187 ]*/
		main_preheader5i_lcssa9 = main_187_220_reg;
end
always @(posedge clk) begin
	/* main: %.preheader5.i*/
	/*   %.lcssa9 = phi i32 [ %220, %187 ]*/
	if ((((cur_state == LEGUP_F_main_BB__187_53) & (memory_controller_waitrequest == 1'd0)) & (main_187_exitcondi_reg == 1'd1))) begin
		main_preheader5i_lcssa9_reg <= main_preheader5i_lcssa9;
		if (start == 1'b0 && ^(main_preheader5i_lcssa9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader5i_lcssa9_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader5.i*/
	/*   %.lcssa8 = phi i32 [ %215, %187 ]*/
		main_preheader5i_lcssa8 = main_187_215_reg;
end
always @(posedge clk) begin
	/* main: %.preheader5.i*/
	/*   %.lcssa8 = phi i32 [ %215, %187 ]*/
	if ((((cur_state == LEGUP_F_main_BB__187_53) & (memory_controller_waitrequest == 1'd0)) & (main_187_exitcondi_reg == 1'd1))) begin
		main_preheader5i_lcssa8_reg <= main_preheader5i_lcssa8;
		if (start == 1'b0 && ^(main_preheader5i_lcssa8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader5i_lcssa8_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader5.i*/
	/*   %.lcssa7 = phi i32 [ %210, %187 ]*/
		main_preheader5i_lcssa7 = main_187_210_reg;
end
always @(posedge clk) begin
	/* main: %.preheader5.i*/
	/*   %.lcssa7 = phi i32 [ %210, %187 ]*/
	if ((((cur_state == LEGUP_F_main_BB__187_53) & (memory_controller_waitrequest == 1'd0)) & (main_187_exitcondi_reg == 1'd1))) begin
		main_preheader5i_lcssa7_reg <= main_preheader5i_lcssa7;
		if (start == 1'b0 && ^(main_preheader5i_lcssa7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader5i_lcssa7_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader5.i*/
	/*   %.lcssa6 = phi i32 [ %205, %187 ]*/
		main_preheader5i_lcssa6 = main_187_205_reg;
end
always @(posedge clk) begin
	/* main: %.preheader5.i*/
	/*   %.lcssa6 = phi i32 [ %205, %187 ]*/
	if ((((cur_state == LEGUP_F_main_BB__187_53) & (memory_controller_waitrequest == 1'd0)) & (main_187_exitcondi_reg == 1'd1))) begin
		main_preheader5i_lcssa6_reg <= main_preheader5i_lcssa6;
		if (start == 1'b0 && ^(main_preheader5i_lcssa6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader5i_lcssa6_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader5.i*/
	/*   %.lcssa5 = phi i32 [ %202, %187 ]*/
		main_preheader5i_lcssa5 = main_187_202_reg;
end
always @(posedge clk) begin
	/* main: %.preheader5.i*/
	/*   %.lcssa5 = phi i32 [ %202, %187 ]*/
	if ((((cur_state == LEGUP_F_main_BB__187_53) & (memory_controller_waitrequest == 1'd0)) & (main_187_exitcondi_reg == 1'd1))) begin
		main_preheader5i_lcssa5_reg <= main_preheader5i_lcssa5;
		if (start == 1'b0 && ^(main_preheader5i_lcssa5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader5i_lcssa5_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader5.i*/
	/*   %178 = shl i32 %.lcssa13, 1*/
		main_preheader5i_178 = (main_preheader5i_lcssa13_reg <<< (32'd1 % 32));
end
always @(posedge clk) begin
	/* main: %.preheader5.i*/
	/*   %178 = shl i32 %.lcssa13, 1*/
	if ((cur_state == LEGUP_F_main_BB_preheader5i_47)) begin
		main_preheader5i_178_reg <= main_preheader5i_178;
		if (start == 1'b0 && ^(main_preheader5i_178) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader5i_178_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader5.i*/
	/*   %179 = shl i32 %.lcssa12, 1*/
		main_preheader5i_179 = (main_preheader5i_lcssa12_reg <<< (32'd1 % 32));
end
always @(posedge clk) begin
	/* main: %.preheader5.i*/
	/*   %179 = shl i32 %.lcssa12, 1*/
	if ((cur_state == LEGUP_F_main_BB_preheader5i_47)) begin
		main_preheader5i_179_reg <= main_preheader5i_179;
		if (start == 1'b0 && ^(main_preheader5i_179) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader5i_179_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader5.i*/
	/*   %180 = shl i32 %.lcssa11, 1*/
		main_preheader5i_180 = (main_preheader5i_lcssa11_reg <<< (32'd1 % 32));
end
always @(posedge clk) begin
	/* main: %.preheader5.i*/
	/*   %180 = shl i32 %.lcssa11, 1*/
	if ((cur_state == LEGUP_F_main_BB_preheader5i_47)) begin
		main_preheader5i_180_reg <= main_preheader5i_180;
		if (start == 1'b0 && ^(main_preheader5i_180) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader5i_180_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader5.i*/
	/*   %181 = shl i32 %.lcssa10, 1*/
		main_preheader5i_181 = (main_preheader5i_lcssa10_reg <<< (32'd1 % 32));
end
always @(posedge clk) begin
	/* main: %.preheader5.i*/
	/*   %181 = shl i32 %.lcssa10, 1*/
	if ((cur_state == LEGUP_F_main_BB_preheader5i_47)) begin
		main_preheader5i_181_reg <= main_preheader5i_181;
		if (start == 1'b0 && ^(main_preheader5i_181) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader5i_181_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader5.i*/
	/*   %182 = shl i32 %.lcssa9, 1*/
		main_preheader5i_182 = (main_preheader5i_lcssa9_reg <<< (32'd1 % 32));
end
always @(posedge clk) begin
	/* main: %.preheader5.i*/
	/*   %182 = shl i32 %.lcssa9, 1*/
	if ((cur_state == LEGUP_F_main_BB_preheader5i_47)) begin
		main_preheader5i_182_reg <= main_preheader5i_182;
		if (start == 1'b0 && ^(main_preheader5i_182) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader5i_182_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader5.i*/
	/*   %183 = shl i32 %.lcssa8, 1*/
		main_preheader5i_183 = (main_preheader5i_lcssa8_reg <<< (32'd1 % 32));
end
always @(posedge clk) begin
	/* main: %.preheader5.i*/
	/*   %183 = shl i32 %.lcssa8, 1*/
	if ((cur_state == LEGUP_F_main_BB_preheader5i_47)) begin
		main_preheader5i_183_reg <= main_preheader5i_183;
		if (start == 1'b0 && ^(main_preheader5i_183) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader5i_183_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader5.i*/
	/*   %184 = shl i32 %.lcssa7, 1*/
		main_preheader5i_184 = (main_preheader5i_lcssa7_reg <<< (32'd1 % 32));
end
always @(posedge clk) begin
	/* main: %.preheader5.i*/
	/*   %184 = shl i32 %.lcssa7, 1*/
	if ((cur_state == LEGUP_F_main_BB_preheader5i_47)) begin
		main_preheader5i_184_reg <= main_preheader5i_184;
		if (start == 1'b0 && ^(main_preheader5i_184) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader5i_184_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader5.i*/
	/*   %185 = shl i32 %.lcssa6, 1*/
		main_preheader5i_185 = (main_preheader5i_lcssa6_reg <<< (32'd1 % 32));
end
always @(posedge clk) begin
	/* main: %.preheader5.i*/
	/*   %185 = shl i32 %.lcssa6, 1*/
	if ((cur_state == LEGUP_F_main_BB_preheader5i_47)) begin
		main_preheader5i_185_reg <= main_preheader5i_185;
		if (start == 1'b0 && ^(main_preheader5i_185) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader5i_185_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader5.i*/
	/*   %186 = shl i32 %.lcssa5, 1*/
		main_preheader5i_186 = (main_preheader5i_lcssa5_reg <<< (32'd1 % 32));
end
always @(posedge clk) begin
	/* main: %.preheader5.i*/
	/*   %186 = shl i32 %.lcssa5, 1*/
	if ((cur_state == LEGUP_F_main_BB_preheader5i_47)) begin
		main_preheader5i_186_reg <= main_preheader5i_186;
		if (start == 1'b0 && ^(main_preheader5i_186) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader5i_186_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %187*/
	/*   %188 = phi i16 [ %161, %.thread.i ], [ %199, %187 ]*/
	if (((cur_state == LEGUP_F_main_BB_threadi_46) & (memory_controller_waitrequest == 1'd0))) begin
		main_187_188 = main_threadi_161_reg;
	end
	/* main: %187*/
	/*   %188 = phi i16 [ %161, %.thread.i ], [ %199, %187 ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__187_53) & (memory_controller_waitrequest == 1'd0)) & (main_187_exitcondi_reg == 1'd0))) */ begin
		main_187_188 = main_187_199_reg;
	end
end
always @(posedge clk) begin
	/* main: %187*/
	/*   %188 = phi i16 [ %161, %.thread.i ], [ %199, %187 ]*/
	if (((cur_state == LEGUP_F_main_BB_threadi_46) & (memory_controller_waitrequest == 1'd0))) begin
		main_187_188_reg <= main_187_188;
		if (start == 1'b0 && ^(main_187_188) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_187_188_reg"); $finish; end
	end
	/* main: %187*/
	/*   %188 = phi i16 [ %161, %.thread.i ], [ %199, %187 ]*/
	if ((((cur_state == LEGUP_F_main_BB__187_53) & (memory_controller_waitrequest == 1'd0)) & (main_187_exitcondi_reg == 1'd0))) begin
		main_187_188_reg <= main_187_188;
		if (start == 1'b0 && ^(main_187_188) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_187_188_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %187*/
	/*   %189 = phi i32 [ 0, %.thread.i ], [ %240, %187 ]*/
	if (((cur_state == LEGUP_F_main_BB_threadi_46) & (memory_controller_waitrequest == 1'd0))) begin
		main_187_189 = 32'd0;
	end
	/* main: %187*/
	/*   %189 = phi i32 [ 0, %.thread.i ], [ %240, %187 ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__187_53) & (memory_controller_waitrequest == 1'd0)) & (main_187_exitcondi_reg == 1'd0))) */ begin
		main_187_189 = main_187_240;
	end
end
always @(posedge clk) begin
	/* main: %187*/
	/*   %189 = phi i32 [ 0, %.thread.i ], [ %240, %187 ]*/
	if (((cur_state == LEGUP_F_main_BB_threadi_46) & (memory_controller_waitrequest == 1'd0))) begin
		main_187_189_reg <= main_187_189;
		if (start == 1'b0 && ^(main_187_189) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_187_189_reg"); $finish; end
	end
	/* main: %187*/
	/*   %189 = phi i32 [ 0, %.thread.i ], [ %240, %187 ]*/
	if ((((cur_state == LEGUP_F_main_BB__187_53) & (memory_controller_waitrequest == 1'd0)) & (main_187_exitcondi_reg == 1'd0))) begin
		main_187_189_reg <= main_187_189;
		if (start == 1'b0 && ^(main_187_189) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_187_189_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %187*/
	/*   %190 = phi i32 [ %177, %.thread.i ], [ %235, %187 ]*/
	if (((cur_state == LEGUP_F_main_BB_threadi_46) & (memory_controller_waitrequest == 1'd0))) begin
		main_187_190 = main_threadi_177;
	end
	/* main: %187*/
	/*   %190 = phi i32 [ %177, %.thread.i ], [ %235, %187 ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__187_53) & (memory_controller_waitrequest == 1'd0)) & (main_187_exitcondi_reg == 1'd0))) */ begin
		main_187_190 = main_187_235;
	end
end
always @(posedge clk) begin
	/* main: %187*/
	/*   %190 = phi i32 [ %177, %.thread.i ], [ %235, %187 ]*/
	if (((cur_state == LEGUP_F_main_BB_threadi_46) & (memory_controller_waitrequest == 1'd0))) begin
		main_187_190_reg <= main_187_190;
		if (start == 1'b0 && ^(main_187_190) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_187_190_reg"); $finish; end
	end
	/* main: %187*/
	/*   %190 = phi i32 [ %177, %.thread.i ], [ %235, %187 ]*/
	if ((((cur_state == LEGUP_F_main_BB__187_53) & (memory_controller_waitrequest == 1'd0)) & (main_187_exitcondi_reg == 1'd0))) begin
		main_187_190_reg <= main_187_190;
		if (start == 1'b0 && ^(main_187_190) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_187_190_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %187*/
	/*   %191 = phi i32 [ %176, %.thread.i ], [ %230, %187 ]*/
	if (((cur_state == LEGUP_F_main_BB_threadi_46) & (memory_controller_waitrequest == 1'd0))) begin
		main_187_191 = main_threadi_176;
	end
	/* main: %187*/
	/*   %191 = phi i32 [ %176, %.thread.i ], [ %230, %187 ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__187_53) & (memory_controller_waitrequest == 1'd0)) & (main_187_exitcondi_reg == 1'd0))) */ begin
		main_187_191 = main_187_230_reg;
	end
end
always @(posedge clk) begin
	/* main: %187*/
	/*   %191 = phi i32 [ %176, %.thread.i ], [ %230, %187 ]*/
	if (((cur_state == LEGUP_F_main_BB_threadi_46) & (memory_controller_waitrequest == 1'd0))) begin
		main_187_191_reg <= main_187_191;
		if (start == 1'b0 && ^(main_187_191) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_187_191_reg"); $finish; end
	end
	/* main: %187*/
	/*   %191 = phi i32 [ %176, %.thread.i ], [ %230, %187 ]*/
	if ((((cur_state == LEGUP_F_main_BB__187_53) & (memory_controller_waitrequest == 1'd0)) & (main_187_exitcondi_reg == 1'd0))) begin
		main_187_191_reg <= main_187_191;
		if (start == 1'b0 && ^(main_187_191) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_187_191_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %187*/
	/*   %192 = phi i32 [ %174, %.thread.i ], [ %225, %187 ]*/
	if (((cur_state == LEGUP_F_main_BB_threadi_46) & (memory_controller_waitrequest == 1'd0))) begin
		main_187_192 = main_threadi_174;
	end
	/* main: %187*/
	/*   %192 = phi i32 [ %174, %.thread.i ], [ %225, %187 ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__187_53) & (memory_controller_waitrequest == 1'd0)) & (main_187_exitcondi_reg == 1'd0))) */ begin
		main_187_192 = main_187_225_reg;
	end
end
always @(posedge clk) begin
	/* main: %187*/
	/*   %192 = phi i32 [ %174, %.thread.i ], [ %225, %187 ]*/
	if (((cur_state == LEGUP_F_main_BB_threadi_46) & (memory_controller_waitrequest == 1'd0))) begin
		main_187_192_reg <= main_187_192;
		if (start == 1'b0 && ^(main_187_192) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_187_192_reg"); $finish; end
	end
	/* main: %187*/
	/*   %192 = phi i32 [ %174, %.thread.i ], [ %225, %187 ]*/
	if ((((cur_state == LEGUP_F_main_BB__187_53) & (memory_controller_waitrequest == 1'd0)) & (main_187_exitcondi_reg == 1'd0))) begin
		main_187_192_reg <= main_187_192;
		if (start == 1'b0 && ^(main_187_192) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_187_192_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %187*/
	/*   %193 = phi i32 [ %172, %.thread.i ], [ %220, %187 ]*/
	if (((cur_state == LEGUP_F_main_BB_threadi_46) & (memory_controller_waitrequest == 1'd0))) begin
		main_187_193 = main_threadi_172;
	end
	/* main: %187*/
	/*   %193 = phi i32 [ %172, %.thread.i ], [ %220, %187 ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__187_53) & (memory_controller_waitrequest == 1'd0)) & (main_187_exitcondi_reg == 1'd0))) */ begin
		main_187_193 = main_187_220_reg;
	end
end
always @(posedge clk) begin
	/* main: %187*/
	/*   %193 = phi i32 [ %172, %.thread.i ], [ %220, %187 ]*/
	if (((cur_state == LEGUP_F_main_BB_threadi_46) & (memory_controller_waitrequest == 1'd0))) begin
		main_187_193_reg <= main_187_193;
		if (start == 1'b0 && ^(main_187_193) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_187_193_reg"); $finish; end
	end
	/* main: %187*/
	/*   %193 = phi i32 [ %172, %.thread.i ], [ %220, %187 ]*/
	if ((((cur_state == LEGUP_F_main_BB__187_53) & (memory_controller_waitrequest == 1'd0)) & (main_187_exitcondi_reg == 1'd0))) begin
		main_187_193_reg <= main_187_193;
		if (start == 1'b0 && ^(main_187_193) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_187_193_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %187*/
	/*   %194 = phi i32 [ %170, %.thread.i ], [ %215, %187 ]*/
	if (((cur_state == LEGUP_F_main_BB_threadi_46) & (memory_controller_waitrequest == 1'd0))) begin
		main_187_194 = main_threadi_170;
	end
	/* main: %187*/
	/*   %194 = phi i32 [ %170, %.thread.i ], [ %215, %187 ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__187_53) & (memory_controller_waitrequest == 1'd0)) & (main_187_exitcondi_reg == 1'd0))) */ begin
		main_187_194 = main_187_215_reg;
	end
end
always @(posedge clk) begin
	/* main: %187*/
	/*   %194 = phi i32 [ %170, %.thread.i ], [ %215, %187 ]*/
	if (((cur_state == LEGUP_F_main_BB_threadi_46) & (memory_controller_waitrequest == 1'd0))) begin
		main_187_194_reg <= main_187_194;
		if (start == 1'b0 && ^(main_187_194) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_187_194_reg"); $finish; end
	end
	/* main: %187*/
	/*   %194 = phi i32 [ %170, %.thread.i ], [ %215, %187 ]*/
	if ((((cur_state == LEGUP_F_main_BB__187_53) & (memory_controller_waitrequest == 1'd0)) & (main_187_exitcondi_reg == 1'd0))) begin
		main_187_194_reg <= main_187_194;
		if (start == 1'b0 && ^(main_187_194) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_187_194_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %187*/
	/*   %195 = phi i32 [ %168, %.thread.i ], [ %210, %187 ]*/
	if (((cur_state == LEGUP_F_main_BB_threadi_46) & (memory_controller_waitrequest == 1'd0))) begin
		main_187_195 = main_threadi_168;
	end
	/* main: %187*/
	/*   %195 = phi i32 [ %168, %.thread.i ], [ %210, %187 ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__187_53) & (memory_controller_waitrequest == 1'd0)) & (main_187_exitcondi_reg == 1'd0))) */ begin
		main_187_195 = main_187_210_reg;
	end
end
always @(posedge clk) begin
	/* main: %187*/
	/*   %195 = phi i32 [ %168, %.thread.i ], [ %210, %187 ]*/
	if (((cur_state == LEGUP_F_main_BB_threadi_46) & (memory_controller_waitrequest == 1'd0))) begin
		main_187_195_reg <= main_187_195;
		if (start == 1'b0 && ^(main_187_195) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_187_195_reg"); $finish; end
	end
	/* main: %187*/
	/*   %195 = phi i32 [ %168, %.thread.i ], [ %210, %187 ]*/
	if ((((cur_state == LEGUP_F_main_BB__187_53) & (memory_controller_waitrequest == 1'd0)) & (main_187_exitcondi_reg == 1'd0))) begin
		main_187_195_reg <= main_187_195;
		if (start == 1'b0 && ^(main_187_195) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_187_195_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %187*/
	/*   %196 = phi i32 [ %166, %.thread.i ], [ %205, %187 ]*/
	if (((cur_state == LEGUP_F_main_BB_threadi_46) & (memory_controller_waitrequest == 1'd0))) begin
		main_187_196 = main_threadi_166;
	end
	/* main: %187*/
	/*   %196 = phi i32 [ %166, %.thread.i ], [ %205, %187 ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__187_53) & (memory_controller_waitrequest == 1'd0)) & (main_187_exitcondi_reg == 1'd0))) */ begin
		main_187_196 = main_187_205_reg;
	end
end
always @(posedge clk) begin
	/* main: %187*/
	/*   %196 = phi i32 [ %166, %.thread.i ], [ %205, %187 ]*/
	if (((cur_state == LEGUP_F_main_BB_threadi_46) & (memory_controller_waitrequest == 1'd0))) begin
		main_187_196_reg <= main_187_196;
		if (start == 1'b0 && ^(main_187_196) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_187_196_reg"); $finish; end
	end
	/* main: %187*/
	/*   %196 = phi i32 [ %166, %.thread.i ], [ %205, %187 ]*/
	if ((((cur_state == LEGUP_F_main_BB__187_53) & (memory_controller_waitrequest == 1'd0)) & (main_187_exitcondi_reg == 1'd0))) begin
		main_187_196_reg <= main_187_196;
		if (start == 1'b0 && ^(main_187_196) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_187_196_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %187*/
	/*   %197 = phi i32 [ %164, %.thread.i ], [ %202, %187 ]*/
	if (((cur_state == LEGUP_F_main_BB_threadi_46) & (memory_controller_waitrequest == 1'd0))) begin
		main_187_197 = main_threadi_164;
	end
	/* main: %187*/
	/*   %197 = phi i32 [ %164, %.thread.i ], [ %202, %187 ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__187_53) & (memory_controller_waitrequest == 1'd0)) & (main_187_exitcondi_reg == 1'd0))) */ begin
		main_187_197 = main_187_202_reg;
	end
end
always @(posedge clk) begin
	/* main: %187*/
	/*   %197 = phi i32 [ %164, %.thread.i ], [ %202, %187 ]*/
	if (((cur_state == LEGUP_F_main_BB_threadi_46) & (memory_controller_waitrequest == 1'd0))) begin
		main_187_197_reg <= main_187_197;
		if (start == 1'b0 && ^(main_187_197) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_187_197_reg"); $finish; end
	end
	/* main: %187*/
	/*   %197 = phi i32 [ %164, %.thread.i ], [ %202, %187 ]*/
	if ((((cur_state == LEGUP_F_main_BB__187_53) & (memory_controller_waitrequest == 1'd0)) & (main_187_exitcondi_reg == 1'd0))) begin
		main_187_197_reg <= main_187_197;
		if (start == 1'b0 && ^(main_187_197) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_187_197_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %187*/
	/*   %sp.011.i = phi i16* [ %160, %.thread.i ], [ %198, %187 ]*/
	if (((cur_state == LEGUP_F_main_BB_threadi_46) & (memory_controller_waitrequest == 1'd0))) begin
		main_187_sp011i = main_threadi_160_reg;
	end
	/* main: %187*/
	/*   %sp.011.i = phi i16* [ %160, %.thread.i ], [ %198, %187 ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__187_53) & (memory_controller_waitrequest == 1'd0)) & (main_187_exitcondi_reg == 1'd0))) */ begin
		main_187_sp011i = main_187_198_reg;
	end
end
always @(posedge clk) begin
	/* main: %187*/
	/*   %sp.011.i = phi i16* [ %160, %.thread.i ], [ %198, %187 ]*/
	if (((cur_state == LEGUP_F_main_BB_threadi_46) & (memory_controller_waitrequest == 1'd0))) begin
		main_187_sp011i_reg <= main_187_sp011i;
		if (start == 1'b0 && ^(main_187_sp011i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_187_sp011i_reg"); $finish; end
	end
	/* main: %187*/
	/*   %sp.011.i = phi i16* [ %160, %.thread.i ], [ %198, %187 ]*/
	if ((((cur_state == LEGUP_F_main_BB__187_53) & (memory_controller_waitrequest == 1'd0)) & (main_187_exitcondi_reg == 1'd0))) begin
		main_187_sp011i_reg <= main_187_sp011i;
		if (start == 1'b0 && ^(main_187_sp011i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_187_sp011i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %187*/
	/*   %i.010.i = phi i32 [ 8, %.thread.i ], [ %241, %187 ]*/
	if (((cur_state == LEGUP_F_main_BB_threadi_46) & (memory_controller_waitrequest == 1'd0))) begin
		main_187_i010i = 32'd8;
	end
	/* main: %187*/
	/*   %i.010.i = phi i32 [ 8, %.thread.i ], [ %241, %187 ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__187_53) & (memory_controller_waitrequest == 1'd0)) & (main_187_exitcondi_reg == 1'd0))) */ begin
		main_187_i010i = main_187_241_reg;
	end
end
always @(posedge clk) begin
	/* main: %187*/
	/*   %i.010.i = phi i32 [ 8, %.thread.i ], [ %241, %187 ]*/
	if (((cur_state == LEGUP_F_main_BB_threadi_46) & (memory_controller_waitrequest == 1'd0))) begin
		main_187_i010i_reg <= main_187_i010i;
		if (start == 1'b0 && ^(main_187_i010i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_187_i010i_reg"); $finish; end
	end
	/* main: %187*/
	/*   %i.010.i = phi i32 [ 8, %.thread.i ], [ %241, %187 ]*/
	if ((((cur_state == LEGUP_F_main_BB__187_53) & (memory_controller_waitrequest == 1'd0)) & (main_187_exitcondi_reg == 1'd0))) begin
		main_187_i010i_reg <= main_187_i010i;
		if (start == 1'b0 && ^(main_187_i010i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_187_i010i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %187*/
	/*   %gep_int37 = ptrtoint i16* %sp.011.i to i32*/
		main_187_gep_int37 = main_187_sp011i_reg;
end
always @(posedge clk) begin
	/* main: %187*/
	/*   %gep_int37 = ptrtoint i16* %sp.011.i to i32*/
	if ((cur_state == LEGUP_F_main_BB__187_48)) begin
		main_187_gep_int37_reg <= main_187_gep_int37;
		if (start == 1'b0 && ^(main_187_gep_int37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_187_gep_int37_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %187*/
	/*   %gep38 = add i32 %gep_int37, 2*/
		main_187_gep38 = main_signed_add_32_0;
end
always @(*) begin
/* main: %187*/
/*   %gep38 = add i32 %gep_int37, 2*/
	main_187_gep38_reg = main_gsm_absexiti_17_reg;
end
always @(*) begin
	/* main: %187*/
	/*   %198 = inttoptr i32 %gep38 to i16**/
		main_187_198 = main_187_gep38;
end
always @(posedge clk) begin
	/* main: %187*/
	/*   %198 = inttoptr i32 %gep38 to i16**/
	if ((cur_state == LEGUP_F_main_BB__187_48)) begin
		main_187_198_reg <= main_187_198;
		if (start == 1'b0 && ^(main_187_198) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_187_198_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %187*/
	/*   %199 = load i16* %198, align 2, !tbaa !1*/
		main_187_199 = main_0_so_out_a;
end
always @(posedge clk) begin
	/* main: %187*/
	/*   %199 = load i16* %198, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__187_49)) begin
		main_187_199_reg <= main_187_199;
		if (start == 1'b0 && ^(main_187_199) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_187_199_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %187*/
	/*   %200 = sext i16 %199 to i32*/
		main_187_200 = $signed(main_187_199);
end
always @(posedge clk) begin
	/* main: %187*/
	/*   %200 = sext i16 %199 to i32*/
	if ((cur_state == LEGUP_F_main_BB__187_49)) begin
		main_187_200_reg <= main_187_200;
		if (start == 1'b0 && ^(main_187_200) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_187_200_reg"); $finish; end
	end
end
always @(*) begin
	main_187_201 = main_signed_multiply_32_0;
end
always @(*) begin
/* main: %187*/
/*   %201 = mul nsw i32 %200, %200*/
	main_187_201_reg = main_74_76_reg;
end
always @(*) begin
	/* main: %187*/
	/*   %202 = add nsw i32 %201, %197*/
		main_187_202 = main_signed_add_32_0;
end
always @(*) begin
/* main: %187*/
/*   %202 = add nsw i32 %201, %197*/
	main_187_202_reg = main_33_38_reg;
end
always @(*) begin
	/* main: %187*/
	/*   %203 = sext i16 %188 to i32*/
		main_187_203 = $signed(main_187_188_reg);
end
always @(posedge clk) begin
	/* main: %187*/
	/*   %203 = sext i16 %188 to i32*/
	if ((cur_state == LEGUP_F_main_BB__187_48)) begin
		main_187_203_reg <= main_187_203;
		if (start == 1'b0 && ^(main_187_203) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_187_203_reg"); $finish; end
	end
end
always @(*) begin
	main_187_204 = main_signed_multiply_32_14;
end
always @(*) begin
/* main: %187*/
/*   %204 = mul nsw i32 %203, %200*/
	main_187_204_reg = main_threadi_137_reg;
end
always @(*) begin
	/* main: %187*/
	/*   %205 = add nsw i32 %204, %196*/
		main_187_205 = main_signed_add_32_1;
end
always @(posedge clk) begin
	/* main: %187*/
	/*   %205 = add nsw i32 %204, %196*/
	if ((cur_state == LEGUP_F_main_BB__187_50)) begin
		main_187_205_reg <= main_187_205;
		if (start == 1'b0 && ^(main_187_205) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_187_205_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %187*/
	/*   %gep_int39 = ptrtoint i16* %sp.011.i to i32*/
		main_187_gep_int39 = main_187_sp011i_reg;
end
always @(posedge clk) begin
	/* main: %187*/
	/*   %gep_int39 = ptrtoint i16* %sp.011.i to i32*/
	if ((cur_state == LEGUP_F_main_BB__187_48)) begin
		main_187_gep_int39_reg <= main_187_gep_int39;
		if (start == 1'b0 && ^(main_187_gep_int39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_187_gep_int39_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %187*/
	/*   %gep40 = add i32 %gep_int39, -2*/
		main_187_gep40 = main_signed_add_32_1;
end
always @(posedge clk) begin
	/* main: %187*/
	/*   %gep40 = add i32 %gep_int39, -2*/
	if ((cur_state == LEGUP_F_main_BB__187_48)) begin
		main_187_gep40_reg <= main_187_gep40;
		if (start == 1'b0 && ^(main_187_gep40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_187_gep40_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %187*/
	/*   %206 = inttoptr i32 %gep40 to i16**/
		main_187_206 = main_187_gep40;
end
always @(posedge clk) begin
	/* main: %187*/
	/*   %206 = inttoptr i32 %gep40 to i16**/
	if ((cur_state == LEGUP_F_main_BB__187_48)) begin
		main_187_206_reg <= main_187_206;
		if (start == 1'b0 && ^(main_187_206) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_187_206_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %187*/
	/*   %207 = load i16* %206, align 2, !tbaa !1*/
		main_187_207 = main_0_so_out_b;
end
always @(posedge clk) begin
	/* main: %187*/
	/*   %207 = load i16* %206, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__187_49)) begin
		main_187_207_reg <= main_187_207;
		if (start == 1'b0 && ^(main_187_207) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_187_207_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %187*/
	/*   %208 = sext i16 %207 to i32*/
		main_187_208 = $signed(main_187_207);
end
always @(posedge clk) begin
	/* main: %187*/
	/*   %208 = sext i16 %207 to i32*/
	if ((cur_state == LEGUP_F_main_BB__187_49)) begin
		main_187_208_reg <= main_187_208;
		if (start == 1'b0 && ^(main_187_208) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_187_208_reg"); $finish; end
	end
end
always @(*) begin
	main_187_209 = main_signed_multiply_32_9;
end
always @(*) begin
/* main: %187*/
/*   %209 = mul nsw i32 %208, %200*/
	main_187_209_reg = main_threadi_107_reg;
end
always @(*) begin
	/* main: %187*/
	/*   %210 = add nsw i32 %209, %195*/
		main_187_210 = main_signed_add_32_12;
end
always @(*) begin
/* main: %187*/
/*   %210 = add nsw i32 %209, %195*/
	main_187_210_reg = main_threadi_128_reg;
end
always @(*) begin
	/* main: %187*/
	/*   %gep_int41 = ptrtoint i16* %sp.011.i to i32*/
		main_187_gep_int41 = main_187_sp011i_reg;
end
always @(posedge clk) begin
	/* main: %187*/
	/*   %gep_int41 = ptrtoint i16* %sp.011.i to i32*/
	if ((cur_state == LEGUP_F_main_BB__187_48)) begin
		main_187_gep_int41_reg <= main_187_gep_int41;
		if (start == 1'b0 && ^(main_187_gep_int41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_187_gep_int41_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %187*/
	/*   %gep42 = add i32 %gep_int41, -4*/
		main_187_gep42 = main_signed_add_32_12;
end
always @(*) begin
/* main: %187*/
/*   %gep42 = add i32 %gep_int41, -4*/
	main_187_gep42_reg = main_threadi_114_reg;
end
always @(*) begin
	/* main: %187*/
	/*   %211 = inttoptr i32 %gep42 to i16**/
		main_187_211 = main_187_gep42;
end
always @(posedge clk) begin
	/* main: %187*/
	/*   %211 = inttoptr i32 %gep42 to i16**/
	if ((cur_state == LEGUP_F_main_BB__187_48)) begin
		main_187_211_reg <= main_187_211;
		if (start == 1'b0 && ^(main_187_211) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_187_211_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %187*/
	/*   %212 = load i16* %211, align 2, !tbaa !1*/
		main_187_212 = main_0_so_out_a;
end
always @(posedge clk) begin
	/* main: %187*/
	/*   %212 = load i16* %211, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__187_50)) begin
		main_187_212_reg <= main_187_212;
		if (start == 1'b0 && ^(main_187_212) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_187_212_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %187*/
	/*   %213 = sext i16 %212 to i32*/
		main_187_213 = $signed(main_187_212);
end
always @(posedge clk) begin
	/* main: %187*/
	/*   %213 = sext i16 %212 to i32*/
	if ((cur_state == LEGUP_F_main_BB__187_50)) begin
		main_187_213_reg <= main_187_213;
		if (start == 1'b0 && ^(main_187_213) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_187_213_reg"); $finish; end
	end
end
always @(*) begin
	main_187_214 = main_signed_multiply_32_0;
end
always @(*) begin
/* main: %187*/
/*   %214 = mul nsw i32 %213, %200*/
	main_187_214_reg = main_74_76_reg;
end
always @(*) begin
	/* main: %187*/
	/*   %215 = add nsw i32 %214, %194*/
		main_187_215 = main_signed_add_32_0;
end
always @(*) begin
/* main: %187*/
/*   %215 = add nsw i32 %214, %194*/
	main_187_215_reg = main_1_gep_reg;
end
always @(*) begin
	/* main: %187*/
	/*   %gep_int43 = ptrtoint i16* %sp.011.i to i32*/
		main_187_gep_int43 = main_187_sp011i_reg;
end
always @(posedge clk) begin
	/* main: %187*/
	/*   %gep_int43 = ptrtoint i16* %sp.011.i to i32*/
	if ((cur_state == LEGUP_F_main_BB__187_48)) begin
		main_187_gep_int43_reg <= main_187_gep_int43;
		if (start == 1'b0 && ^(main_187_gep_int43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_187_gep_int43_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %187*/
	/*   %gep44 = add i32 %gep_int43, -6*/
		main_187_gep44 = main_signed_add_32_2;
end
always @(*) begin
/* main: %187*/
/*   %gep44 = add i32 %gep_int43, -6*/
	main_187_gep44_reg = main_threadi_126_reg;
end
always @(*) begin
	/* main: %187*/
	/*   %216 = inttoptr i32 %gep44 to i16**/
		main_187_216 = main_187_gep44;
end
always @(posedge clk) begin
	/* main: %187*/
	/*   %216 = inttoptr i32 %gep44 to i16**/
	if ((cur_state == LEGUP_F_main_BB__187_48)) begin
		main_187_216_reg <= main_187_216;
		if (start == 1'b0 && ^(main_187_216) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_187_216_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %187*/
	/*   %217 = load i16* %216, align 2, !tbaa !1*/
		main_187_217 = main_0_so_out_b;
end
always @(posedge clk) begin
	/* main: %187*/
	/*   %217 = load i16* %216, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__187_50)) begin
		main_187_217_reg <= main_187_217;
		if (start == 1'b0 && ^(main_187_217) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_187_217_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %187*/
	/*   %218 = sext i16 %217 to i32*/
		main_187_218 = $signed(main_187_217);
end
always @(posedge clk) begin
	/* main: %187*/
	/*   %218 = sext i16 %217 to i32*/
	if ((cur_state == LEGUP_F_main_BB__187_50)) begin
		main_187_218_reg <= main_187_218;
		if (start == 1'b0 && ^(main_187_218) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_187_218_reg"); $finish; end
	end
end
always @(*) begin
	main_187_219 = main_signed_multiply_32_14;
end
always @(*) begin
/* main: %187*/
/*   %219 = mul nsw i32 %218, %200*/
	main_187_219_reg = main_threadi_137_reg;
end
always @(*) begin
	/* main: %187*/
	/*   %220 = add nsw i32 %219, %193*/
		main_187_220 = main_signed_add_32_1;
end
always @(*) begin
/* main: %187*/
/*   %220 = add nsw i32 %219, %193*/
	main_187_220_reg = main_1_gep3_reg;
end
always @(*) begin
	/* main: %187*/
	/*   %gep_int45 = ptrtoint i16* %sp.011.i to i32*/
		main_187_gep_int45 = main_187_sp011i_reg;
end
always @(posedge clk) begin
	/* main: %187*/
	/*   %gep_int45 = ptrtoint i16* %sp.011.i to i32*/
	if ((cur_state == LEGUP_F_main_BB__187_48)) begin
		main_187_gep_int45_reg <= main_187_gep_int45;
		if (start == 1'b0 && ^(main_187_gep_int45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_187_gep_int45_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %187*/
	/*   %gep46 = add i32 %gep_int45, -8*/
		main_187_gep46 = main_signed_add_32_9;
end
always @(*) begin
/* main: %187*/
/*   %gep46 = add i32 %gep_int45, -8*/
	main_187_gep46_reg = main_threadi_134_reg;
end
always @(*) begin
	/* main: %187*/
	/*   %221 = inttoptr i32 %gep46 to i16**/
		main_187_221 = main_187_gep46;
end
always @(posedge clk) begin
	/* main: %187*/
	/*   %221 = inttoptr i32 %gep46 to i16**/
	if ((cur_state == LEGUP_F_main_BB__187_48)) begin
		main_187_221_reg <= main_187_221;
		if (start == 1'b0 && ^(main_187_221) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_187_221_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %187*/
	/*   %222 = load i16* %221, align 2, !tbaa !1*/
		main_187_222 = main_0_so_out_a;
end
always @(posedge clk) begin
	/* main: %187*/
	/*   %222 = load i16* %221, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__187_51)) begin
		main_187_222_reg <= main_187_222;
		if (start == 1'b0 && ^(main_187_222) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_187_222_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %187*/
	/*   %223 = sext i16 %222 to i32*/
		main_187_223 = $signed(main_187_222);
end
always @(posedge clk) begin
	/* main: %187*/
	/*   %223 = sext i16 %222 to i32*/
	if ((cur_state == LEGUP_F_main_BB__187_51)) begin
		main_187_223_reg <= main_187_223;
		if (start == 1'b0 && ^(main_187_223) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_187_223_reg"); $finish; end
	end
end
always @(*) begin
	main_187_224 = main_signed_multiply_32_0;
end
always @(*) begin
/* main: %187*/
/*   %224 = mul nsw i32 %223, %200*/
	main_187_224_reg = main_74_76_reg;
end
always @(*) begin
	/* main: %187*/
	/*   %225 = add nsw i32 %224, %192*/
		main_187_225 = main_signed_add_32_0;
end
always @(*) begin
/* main: %187*/
/*   %225 = add nsw i32 %224, %192*/
	main_187_225_reg = main_1_5_reg;
end
always @(*) begin
	/* main: %187*/
	/*   %gep_int47 = ptrtoint i16* %sp.011.i to i32*/
		main_187_gep_int47 = main_187_sp011i_reg;
end
always @(posedge clk) begin
	/* main: %187*/
	/*   %gep_int47 = ptrtoint i16* %sp.011.i to i32*/
	if ((cur_state == LEGUP_F_main_BB__187_48)) begin
		main_187_gep_int47_reg <= main_187_gep_int47;
		if (start == 1'b0 && ^(main_187_gep_int47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_187_gep_int47_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %187*/
	/*   %gep48 = add i32 %gep_int47, -10*/
		main_187_gep48 = main_signed_add_32_10;
end
always @(*) begin
/* main: %187*/
/*   %gep48 = add i32 %gep_int47, -10*/
	main_187_gep48_reg = main_threadi_136_reg;
end
always @(*) begin
	/* main: %187*/
	/*   %226 = inttoptr i32 %gep48 to i16**/
		main_187_226 = main_187_gep48;
end
always @(posedge clk) begin
	/* main: %187*/
	/*   %226 = inttoptr i32 %gep48 to i16**/
	if ((cur_state == LEGUP_F_main_BB__187_48)) begin
		main_187_226_reg <= main_187_226;
		if (start == 1'b0 && ^(main_187_226) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_187_226_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %187*/
	/*   %227 = load i16* %226, align 2, !tbaa !1*/
		main_187_227 = main_0_so_out_b;
end
always @(posedge clk) begin
	/* main: %187*/
	/*   %227 = load i16* %226, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__187_51)) begin
		main_187_227_reg <= main_187_227;
		if (start == 1'b0 && ^(main_187_227) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_187_227_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %187*/
	/*   %228 = sext i16 %227 to i32*/
		main_187_228 = $signed(main_187_227);
end
always @(posedge clk) begin
	/* main: %187*/
	/*   %228 = sext i16 %227 to i32*/
	if ((cur_state == LEGUP_F_main_BB__187_51)) begin
		main_187_228_reg <= main_187_228;
		if (start == 1'b0 && ^(main_187_228) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_187_228_reg"); $finish; end
	end
end
always @(*) begin
	main_187_229 = main_signed_multiply_32_14;
end
always @(*) begin
/* main: %187*/
/*   %229 = mul nsw i32 %228, %200*/
	main_187_229_reg = main_threadi_137_reg;
end
always @(*) begin
	/* main: %187*/
	/*   %230 = add nsw i32 %229, %191*/
		main_187_230 = main_signed_add_32_1;
end
always @(posedge clk) begin
	/* main: %187*/
	/*   %230 = add nsw i32 %229, %191*/
	if ((cur_state == LEGUP_F_main_BB__187_52)) begin
		main_187_230_reg <= main_187_230;
		if (start == 1'b0 && ^(main_187_230) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_187_230_reg"); $finish; end
	end
	/* main: %.thread.i*/
	/*   %112 = add nuw nsw i32 %111, %104*/
	if ((cur_state == LEGUP_F_main_BB_threadi_44)) begin
		main_187_230_reg <= main_threadi_112;
		if (start == 1'b0 && ^(main_threadi_112) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_187_230_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %187*/
	/*   %gep_int49 = ptrtoint i16* %sp.011.i to i32*/
		main_187_gep_int49 = main_187_sp011i_reg;
end
always @(posedge clk) begin
	/* main: %187*/
	/*   %gep_int49 = ptrtoint i16* %sp.011.i to i32*/
	if ((cur_state == LEGUP_F_main_BB__187_48)) begin
		main_187_gep_int49_reg <= main_187_gep_int49;
		if (start == 1'b0 && ^(main_187_gep_int49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_187_gep_int49_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %187*/
	/*   %gep50 = add i32 %gep_int49, -12*/
		main_187_gep50 = main_signed_add_32_11;
end
always @(*) begin
/* main: %187*/
/*   %gep50 = add i32 %gep_int49, -12*/
	main_187_gep50_reg = main_threadi_gep32_reg;
end
always @(*) begin
	/* main: %187*/
	/*   %231 = inttoptr i32 %gep50 to i16**/
		main_187_231 = main_187_gep50;
end
always @(posedge clk) begin
	/* main: %187*/
	/*   %231 = inttoptr i32 %gep50 to i16**/
	if ((cur_state == LEGUP_F_main_BB__187_48)) begin
		main_187_231_reg <= main_187_231;
		if (start == 1'b0 && ^(main_187_231) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_187_231_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %187*/
	/*   %232 = load i16* %231, align 2, !tbaa !1*/
		main_187_232 = main_0_so_out_a;
end
always @(posedge clk) begin
	/* main: %187*/
	/*   %232 = load i16* %231, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__187_52)) begin
		main_187_232_reg <= main_187_232;
		if (start == 1'b0 && ^(main_187_232) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_187_232_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %187*/
	/*   %233 = sext i16 %232 to i32*/
		main_187_233 = $signed(main_187_232);
end
always @(posedge clk) begin
	/* main: %187*/
	/*   %233 = sext i16 %232 to i32*/
	if ((cur_state == LEGUP_F_main_BB__187_52)) begin
		main_187_233_reg <= main_187_233;
		if (start == 1'b0 && ^(main_187_233) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_187_233_reg"); $finish; end
	end
end
always @(*) begin
	main_187_234 = main_signed_multiply_32_0;
end
always @(*) begin
/* main: %187*/
/*   %234 = mul nsw i32 %233, %200*/
	main_187_234_reg = main_74_76_reg;
end
always @(*) begin
	/* main: %187*/
	/*   %235 = add nsw i32 %234, %190*/
		main_187_235 = main_signed_add_32_0;
end
always @(*) begin
/* main: %187*/
/*   %235 = add nsw i32 %234, %190*/
	main_187_235_reg = main_gsm_mult_rexitusi_81_reg;
end
always @(*) begin
	/* main: %187*/
	/*   %gep_int51 = ptrtoint i16* %sp.011.i to i32*/
		main_187_gep_int51 = main_187_sp011i_reg;
end
always @(posedge clk) begin
	/* main: %187*/
	/*   %gep_int51 = ptrtoint i16* %sp.011.i to i32*/
	if ((cur_state == LEGUP_F_main_BB__187_48)) begin
		main_187_gep_int51_reg <= main_187_gep_int51;
		if (start == 1'b0 && ^(main_187_gep_int51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_187_gep_int51_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %187*/
	/*   %gep52 = add i32 %gep_int51, -14*/
		main_187_gep52 = main_signed_add_32_7;
end
always @(*) begin
/* main: %187*/
/*   %gep52 = add i32 %gep_int51, -14*/
	main_187_gep52_reg = main_threadi_140_reg;
end
always @(*) begin
	/* main: %187*/
	/*   %236 = inttoptr i32 %gep52 to i16**/
		main_187_236 = main_187_gep52;
end
always @(posedge clk) begin
	/* main: %187*/
	/*   %236 = inttoptr i32 %gep52 to i16**/
	if ((cur_state == LEGUP_F_main_BB__187_48)) begin
		main_187_236_reg <= main_187_236;
		if (start == 1'b0 && ^(main_187_236) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_187_236_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %187*/
	/*   %237 = load i16* %236, align 2, !tbaa !1*/
		main_187_237 = main_0_so_out_b;
end
always @(posedge clk) begin
	/* main: %187*/
	/*   %237 = load i16* %236, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__187_52)) begin
		main_187_237_reg <= main_187_237;
		if (start == 1'b0 && ^(main_187_237) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_187_237_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %187*/
	/*   %238 = sext i16 %237 to i32*/
		main_187_238 = $signed(main_187_237);
end
always @(posedge clk) begin
	/* main: %187*/
	/*   %238 = sext i16 %237 to i32*/
	if ((cur_state == LEGUP_F_main_BB__187_52)) begin
		main_187_238_reg <= main_187_238;
		if (start == 1'b0 && ^(main_187_238) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_187_238_reg"); $finish; end
	end
end
always @(*) begin
	main_187_239 = main_signed_multiply_32_14;
end
always @(*) begin
/* main: %187*/
/*   %239 = mul nsw i32 %238, %200*/
	main_187_239_reg = main_threadi_137_reg;
end
always @(*) begin
	/* main: %187*/
	/*   %240 = add nsw i32 %239, %189*/
		main_187_240 = main_signed_add_32_1;
end
always @(posedge clk) begin
	/* main: %187*/
	/*   %240 = add nsw i32 %239, %189*/
	if ((cur_state == LEGUP_F_main_BB__187_53)) begin
		main_187_240_reg <= main_187_240;
		if (start == 1'b0 && ^(main_187_240) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_187_240_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %187*/
	/*   %241 = add nsw i32 %i.010.i, 1*/
		main_187_241 = main_signed_add_32_8;
end
always @(*) begin
/* main: %187*/
/*   %241 = add nsw i32 %i.010.i, 1*/
	main_187_241_reg = main_threadi_142_reg;
end
always @(*) begin
	/* main: %187*/
	/*   %exitcond.i = icmp eq i32 %241, 160*/
		main_187_exitcondi = (main_187_241 == 32'd160);
end
always @(posedge clk) begin
	/* main: %187*/
	/*   %exitcond.i = icmp eq i32 %241, 160*/
	if ((cur_state == LEGUP_F_main_BB__187_48)) begin
		main_187_exitcondi_reg <= main_187_exitcondi;
		if (start == 1'b0 && ^(main_187_exitcondi) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_187_exitcondi_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %242 = phi i16 [ %.pre.i, %._crit_edge.i ], [ %92, %.preheader5.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_preheader5i_47) & (memory_controller_waitrequest == 1'd0)) & (main_threadi_91_reg == 1'd1))) begin
		main_preheaderi_242 = main_threadi_92_reg;
	end
	/* main: %.preheader.i*/
	/*   %242 = phi i16 [ %.pre.i, %._crit_edge.i ], [ %92, %.preheader5.i ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__crit_edgei_57) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_preheaderi_242 = main__crit_edgei_prei;
	end
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %242 = phi i16 [ %.pre.i, %._crit_edge.i ], [ %92, %.preheader5.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_preheader5i_47) & (memory_controller_waitrequest == 1'd0)) & (main_threadi_91_reg == 1'd1))) begin
		main_preheaderi_242_reg <= main_preheaderi_242;
		if (start == 1'b0 && ^(main_preheaderi_242) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_242_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %242 = phi i16 [ %.pre.i, %._crit_edge.i ], [ %92, %.preheader5.i ]*/
	if (((cur_state == LEGUP_F_main_BB__crit_edgei_57) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_242_reg <= main_preheaderi_242;
		if (start == 1'b0 && ^(main_preheaderi_242) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_242_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %.08.i = phi i16* [ %243, %._crit_edge.i ], [ %7, %.preheader5.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_preheader5i_47) & (memory_controller_waitrequest == 1'd0)) & (main_threadi_91_reg == 1'd1))) begin
		main_preheaderi_08i = main_6_7_reg;
	end
	/* main: %.preheader.i*/
	/*   %.08.i = phi i16* [ %243, %._crit_edge.i ], [ %7, %.preheader5.i ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__crit_edgei_57) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_preheaderi_08i = main_preheaderi_243_reg;
	end
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %.08.i = phi i16* [ %243, %._crit_edge.i ], [ %7, %.preheader5.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_preheader5i_47) & (memory_controller_waitrequest == 1'd0)) & (main_threadi_91_reg == 1'd1))) begin
		main_preheaderi_08i_reg <= main_preheaderi_08i;
		if (start == 1'b0 && ^(main_preheaderi_08i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_08i_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %.08.i = phi i16* [ %243, %._crit_edge.i ], [ %7, %.preheader5.i ]*/
	if (((cur_state == LEGUP_F_main_BB__crit_edgei_57) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_08i_reg <= main_preheaderi_08i;
		if (start == 1'b0 && ^(main_preheaderi_08i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_08i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %k.47.i = phi i32 [ %248, %._crit_edge.i ], [ 159, %.preheader5.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_preheader5i_47) & (memory_controller_waitrequest == 1'd0)) & (main_threadi_91_reg == 1'd1))) begin
		main_preheaderi_k47i = 32'd159;
	end
	/* main: %.preheader.i*/
	/*   %k.47.i = phi i32 [ %248, %._crit_edge.i ], [ 159, %.preheader5.i ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__crit_edgei_57) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_preheaderi_k47i = main__crit_edgei_248_reg;
	end
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %k.47.i = phi i32 [ %248, %._crit_edge.i ], [ 159, %.preheader5.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_preheader5i_47) & (memory_controller_waitrequest == 1'd0)) & (main_threadi_91_reg == 1'd1))) begin
		main_preheaderi_k47i_reg <= main_preheaderi_k47i;
		if (start == 1'b0 && ^(main_preheaderi_k47i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_k47i_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %k.47.i = phi i32 [ %248, %._crit_edge.i ], [ 159, %.preheader5.i ]*/
	if (((cur_state == LEGUP_F_main_BB__crit_edgei_57) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_k47i_reg <= main_preheaderi_k47i;
		if (start == 1'b0 && ^(main_preheaderi_k47i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_k47i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %gep_int53 = ptrtoint i16* %.08.i to i32*/
		main_preheaderi_gep_int53 = main_preheaderi_08i_reg;
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %gep_int53 = ptrtoint i16* %.08.i to i32*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_54)) begin
		main_preheaderi_gep_int53_reg <= main_preheaderi_gep_int53;
		if (start == 1'b0 && ^(main_preheaderi_gep_int53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_gep_int53_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %gep54 = add i32 %gep_int53, 2*/
		main_preheaderi_gep54 = main_signed_add_32_0;
end
always @(*) begin
/* main: %.preheader.i*/
/*   %gep54 = add i32 %gep_int53, 2*/
	main_preheaderi_gep54_reg = main_1_gep_reg;
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %243 = inttoptr i32 %gep54 to i16**/
		main_preheaderi_243 = main_preheaderi_gep54;
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %243 = inttoptr i32 %gep54 to i16**/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_54)) begin
		main_preheaderi_243_reg <= main_preheaderi_243;
		if (start == 1'b0 && ^(main_preheaderi_243) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_243_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %244 = sext i16 %242 to i32*/
		main_preheaderi_244 = $signed(main_preheaderi_242_reg);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %244 = sext i16 %242 to i32*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_54)) begin
		main_preheaderi_244_reg <= main_preheaderi_244;
		if (start == 1'b0 && ^(main_preheaderi_244) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_244_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %245 = shl i32 %244, %scalauto.03.i*/
		main_preheaderi_245 = (main_preheaderi_244 <<< (main_threadi_scalauto03i_reg % 32));
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %245 = shl i32 %244, %scalauto.03.i*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_54)) begin
		main_preheaderi_245_reg <= main_preheaderi_245;
		if (start == 1'b0 && ^(main_preheaderi_245) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_245_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %246 = trunc i32 %245 to i16*/
		main_preheaderi_246 = main_preheaderi_245[15:0];
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %246 = trunc i32 %245 to i16*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_54)) begin
		main_preheaderi_246_reg <= main_preheaderi_246;
		if (start == 1'b0 && ^(main_preheaderi_246) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_246_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %247 = icmp sgt i32 %k.47.i, 0*/
		main_preheaderi_247 = ($signed(main_preheaderi_k47i_reg) > $signed(32'd0));
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %247 = icmp sgt i32 %k.47.i, 0*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_54)) begin
		main_preheaderi_247_reg <= main_preheaderi_247;
		if (start == 1'b0 && ^(main_preheaderi_247) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_247_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %._crit_edge.i*/
	/*   %248 = add nsw i32 %k.47.i, -1*/
		main__crit_edgei_248 = main_signed_add_32_0;
end
always @(*) begin
/* main: %._crit_edge.i*/
/*   %248 = add nsw i32 %k.47.i, -1*/
	main__crit_edgei_248_reg = main_1_5_reg;
end
always @(*) begin
	/* main: %._crit_edge.i*/
	/*   %.pre.i = load i16* %243, align 2, !tbaa !1*/
		main__crit_edgei_prei = main_0_so_out_a;
end
always @(posedge clk) begin
	/* main: %._crit_edge.i*/
	/*   %.pre.i = load i16* %243, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_57)) begin
		main__crit_edgei_prei_reg <= main__crit_edgei_prei;
		if (start == 1'b0 && ^(main__crit_edgei_prei) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edgei_prei_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %Autocorrelation.exit*/
	/*   %249 = icmp eq i32 %186, 0*/
		main_Autocorrelationexit_249 = (main_preheader5i_186_reg == 32'd0);
end
always @(posedge clk) begin
	/* main: %Autocorrelation.exit*/
	/*   %249 = icmp eq i32 %186, 0*/
	if ((cur_state == LEGUP_F_main_BB_Autocorrelationexit_58)) begin
		main_Autocorrelationexit_249_reg <= main_Autocorrelationexit_249;
		if (start == 1'b0 && ^(main_Autocorrelationexit_249) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_Autocorrelationexit_249_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i5*/
	/*   %250 = bitcast i16* %19 to i8**/
		main_preheaderi5_250 = main_18_19_reg;
end
always @(posedge clk) begin
	/* main: %.preheader.i5*/
	/*   %250 = bitcast i16* %19 to i8**/
	if ((cur_state == LEGUP_F_main_BB_preheaderi5_59)) begin
		main_preheaderi5_250_reg <= main_preheaderi5_250;
		if (start == 1'b0 && ^(main_preheaderi5_250) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi5_250_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %251*/
	/*   %252 = icmp slt i32 %186, 0*/
		main_251_252 = ($signed(main_preheader5i_186_reg) < $signed(32'd0));
end
always @(posedge clk) begin
	/* main: %251*/
	/*   %252 = icmp slt i32 %186, 0*/
	if ((cur_state == LEGUP_F_main_BB__251_62)) begin
		main_251_252_reg <= main_251_252;
		if (start == 1'b0 && ^(main_251_252) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_251_252_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %253*/
	/*   %254 = icmp slt i32 %186, -1073741823*/
		main_253_254 = ($signed(main_preheader5i_186_reg) < $signed(-32'd1073741823));
end
always @(posedge clk) begin
	/* main: %253*/
	/*   %254 = icmp slt i32 %186, -1073741823*/
	if ((cur_state == LEGUP_F_main_BB__253_63)) begin
		main_253_254_reg <= main_253_254;
		if (start == 1'b0 && ^(main_253_254) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_253_254_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %255*/
	/*   %256 = xor i32 %186, -1*/
		main_255_256 = (main_preheader5i_186_reg ^ -32'd1);
end
always @(posedge clk) begin
	/* main: %255*/
	/*   %256 = xor i32 %186, -1*/
	if ((cur_state == LEGUP_F_main_BB__255_64)) begin
		main_255_256_reg <= main_255_256;
		if (start == 1'b0 && ^(main_255_256) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_255_256_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %257*/
	/*   %.0.i.i = phi i32 [ %256, %255 ], [ %186, %251 ]*/
	if ((((cur_state == LEGUP_F_main_BB__251_62) & (memory_controller_waitrequest == 1'd0)) & (main_251_252 == 1'd0))) begin
		main_257_0ii = main_preheader5i_186_reg;
	end
	/* main: %257*/
	/*   %.0.i.i = phi i32 [ %256, %255 ], [ %186, %251 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__255_64) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_257_0ii = main_255_256;
	end
end
always @(posedge clk) begin
	/* main: %257*/
	/*   %.0.i.i = phi i32 [ %256, %255 ], [ %186, %251 ]*/
	if ((((cur_state == LEGUP_F_main_BB__251_62) & (memory_controller_waitrequest == 1'd0)) & (main_251_252 == 1'd0))) begin
		main_257_0ii_reg <= main_257_0ii;
		if (start == 1'b0 && ^(main_257_0ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_257_0ii_reg"); $finish; end
	end
	/* main: %257*/
	/*   %.0.i.i = phi i32 [ %256, %255 ], [ %186, %251 ]*/
	if (((cur_state == LEGUP_F_main_BB__255_64) & (memory_controller_waitrequest == 1'd0))) begin
		main_257_0ii_reg <= main_257_0ii;
		if (start == 1'b0 && ^(main_257_0ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_257_0ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %257*/
	/*   %258 = icmp ugt i32 %.0.i.i, 65535*/
		main_257_258 = (main_257_0ii_reg > 32'd65535);
end
always @(posedge clk) begin
	/* main: %257*/
	/*   %258 = icmp ugt i32 %.0.i.i, 65535*/
	if ((cur_state == LEGUP_F_main_BB__257_65)) begin
		main_257_258_reg <= main_257_258;
		if (start == 1'b0 && ^(main_257_258) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_257_258_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %259*/
	/*   %260 = icmp ugt i32 %.0.i.i, 16777215*/
		main_259_260 = (main_257_0ii_reg > 32'd16777215);
end
always @(posedge clk) begin
	/* main: %259*/
	/*   %260 = icmp ugt i32 %.0.i.i, 16777215*/
	if ((cur_state == LEGUP_F_main_BB__259_66)) begin
		main_259_260_reg <= main_259_260;
		if (start == 1'b0 && ^(main_259_260) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_259_260_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %261*/
	/*   %262 = lshr i32 %.0.i.i, 24*/
		main_261_262 = (main_257_0ii_reg >>> (32'd24 % 32));
end
always @(posedge clk) begin
	/* main: %261*/
	/*   %262 = lshr i32 %.0.i.i, 24*/
	if ((cur_state == LEGUP_F_main_BB__261_67)) begin
		main_261_262_reg <= main_261_262;
		if (start == 1'b0 && ^(main_261_262) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_261_262_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %261*/
	/*   %gep_int69 = ptrtoint [256 x i8]* @bitoff to i32*/
if (reset) begin main_261_gep_int69 = 0; end
		main_261_gep_int69 = 1'd0;
end
always @(posedge clk) begin
	/* main: %261*/
	/*   %gep_int69 = ptrtoint [256 x i8]* @bitoff to i32*/
	if ((cur_state == LEGUP_F_main_BB__261_67)) begin
		main_261_gep_int69_reg <= main_261_gep_int69;
		if (start == 1'b0 && ^(main_261_gep_int69) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_261_gep_int69_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %261*/
	/*   %gep70 = add i32 %gep_int69, %262*/
		main_261_gep70 = main_signed_add_32_0;
end
always @(*) begin
/* main: %261*/
/*   %gep70 = add i32 %gep_int69, %262*/
	main_261_gep70_reg = main_1_gep_reg;
end
always @(*) begin
	/* main: %261*/
	/*   %263 = inttoptr i32 %gep70 to i8**/
		main_261_263 = main_261_gep70;
end
always @(posedge clk) begin
	/* main: %261*/
	/*   %263 = inttoptr i32 %gep70 to i8**/
	if ((cur_state == LEGUP_F_main_BB__261_67)) begin
		main_261_263_reg <= main_261_263;
		if (start == 1'b0 && ^(main_261_263) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_261_263_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %261*/
	/*   %264 = load i8* %263, align 1, !tbaa !5*/
		main_261_264 = bitoff_out_a;
end
always @(posedge clk) begin
	/* main: %261*/
	/*   %264 = load i8* %263, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__261_68)) begin
		main_261_264_reg <= main_261_264;
		if (start == 1'b0 && ^(main_261_264) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_261_264_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %261*/
	/*   %265 = zext i8 %264 to i32*/
		main_261_265 = main_261_264;
end
always @(posedge clk) begin
	/* main: %261*/
	/*   %265 = zext i8 %264 to i32*/
	if ((cur_state == LEGUP_F_main_BB__261_68)) begin
		main_261_265_reg <= main_261_265;
		if (start == 1'b0 && ^(main_261_265) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_261_265_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %261*/
	/*   %266 = add nsw i32 %265, -1*/
		main_261_266 = main_signed_add_32_0;
end
always @(posedge clk) begin
	/* main: %261*/
	/*   %266 = add nsw i32 %265, -1*/
	if ((cur_state == LEGUP_F_main_BB__261_68)) begin
		main_261_266_reg <= main_261_266;
		if (start == 1'b0 && ^(main_261_266) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_261_266_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %267*/
	/*   %268 = lshr i32 %.0.i.i, 16*/
		main_267_268 = (main_257_0ii_reg >>> (32'd16 % 32));
end
always @(posedge clk) begin
	/* main: %267*/
	/*   %268 = lshr i32 %.0.i.i, 16*/
	if ((cur_state == LEGUP_F_main_BB__267_69)) begin
		main_267_268_reg <= main_267_268;
		if (start == 1'b0 && ^(main_267_268) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_267_268_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %267*/
	/*   %269 = and i32 %268, 255*/
		main_267_269 = (main_267_268 & 32'd255);
end
always @(posedge clk) begin
	/* main: %267*/
	/*   %269 = and i32 %268, 255*/
	if ((cur_state == LEGUP_F_main_BB__267_69)) begin
		main_267_269_reg <= main_267_269;
		if (start == 1'b0 && ^(main_267_269) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_267_269_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %267*/
	/*   %gep_int71 = ptrtoint [256 x i8]* @bitoff to i32*/
if (reset) begin main_267_gep_int71 = 0; end
		main_267_gep_int71 = 1'd0;
end
always @(posedge clk) begin
	/* main: %267*/
	/*   %gep_int71 = ptrtoint [256 x i8]* @bitoff to i32*/
	if ((cur_state == LEGUP_F_main_BB__267_69)) begin
		main_267_gep_int71_reg <= main_267_gep_int71;
		if (start == 1'b0 && ^(main_267_gep_int71) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_267_gep_int71_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %267*/
	/*   %gep72 = add i32 %gep_int71, %269*/
		main_267_gep72 = main_signed_add_32_0;
end
always @(*) begin
/* main: %267*/
/*   %gep72 = add i32 %gep_int71, %269*/
	main_267_gep72_reg = main_1_gep_reg;
end
always @(*) begin
	/* main: %267*/
	/*   %270 = inttoptr i32 %gep72 to i8**/
		main_267_270 = main_267_gep72;
end
always @(posedge clk) begin
	/* main: %267*/
	/*   %270 = inttoptr i32 %gep72 to i8**/
	if ((cur_state == LEGUP_F_main_BB__267_69)) begin
		main_267_270_reg <= main_267_270;
		if (start == 1'b0 && ^(main_267_270) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_267_270_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %267*/
	/*   %271 = load i8* %270, align 1, !tbaa !5*/
		main_267_271 = bitoff_out_a;
end
always @(posedge clk) begin
	/* main: %267*/
	/*   %271 = load i8* %270, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__267_70)) begin
		main_267_271_reg <= main_267_271;
		if (start == 1'b0 && ^(main_267_271) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_267_271_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %267*/
	/*   %272 = zext i8 %271 to i32*/
		main_267_272 = main_267_271;
end
always @(posedge clk) begin
	/* main: %267*/
	/*   %272 = zext i8 %271 to i32*/
	if ((cur_state == LEGUP_F_main_BB__267_70)) begin
		main_267_272_reg <= main_267_272;
		if (start == 1'b0 && ^(main_267_272) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_267_272_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %267*/
	/*   %273 = add nuw nsw i32 %272, 7*/
		main_267_273 = main_signed_add_32_0;
end
always @(posedge clk) begin
	/* main: %267*/
	/*   %273 = add nuw nsw i32 %272, 7*/
	if ((cur_state == LEGUP_F_main_BB__267_70)) begin
		main_267_273_reg <= main_267_273;
		if (start == 1'b0 && ^(main_267_273) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_267_273_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %274*/
	/*   %275 = and i32 %.0.i.i, 65280*/
		main_274_275 = (main_257_0ii_reg & 32'd65280);
end
always @(posedge clk) begin
	/* main: %274*/
	/*   %275 = and i32 %.0.i.i, 65280*/
	if ((cur_state == LEGUP_F_main_BB__274_71)) begin
		main_274_275_reg <= main_274_275;
		if (start == 1'b0 && ^(main_274_275) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_274_275_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %274*/
	/*   %276 = icmp eq i32 %275, 0*/
		main_274_276 = (main_274_275 == 32'd0);
end
always @(posedge clk) begin
	/* main: %274*/
	/*   %276 = icmp eq i32 %275, 0*/
	if ((cur_state == LEGUP_F_main_BB__274_71)) begin
		main_274_276_reg <= main_274_276;
		if (start == 1'b0 && ^(main_274_276) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_274_276_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %277*/
	/*   %278 = lshr i32 %.0.i.i, 8*/
		main_277_278 = (main_257_0ii_reg >>> (32'd8 % 32));
end
always @(posedge clk) begin
	/* main: %277*/
	/*   %278 = lshr i32 %.0.i.i, 8*/
	if ((cur_state == LEGUP_F_main_BB__277_72)) begin
		main_277_278_reg <= main_277_278;
		if (start == 1'b0 && ^(main_277_278) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_277_278_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %277*/
	/*   %279 = and i32 %278, 255*/
		main_277_279 = (main_277_278 & 32'd255);
end
always @(posedge clk) begin
	/* main: %277*/
	/*   %279 = and i32 %278, 255*/
	if ((cur_state == LEGUP_F_main_BB__277_72)) begin
		main_277_279_reg <= main_277_279;
		if (start == 1'b0 && ^(main_277_279) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_277_279_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %277*/
	/*   %gep_int73 = ptrtoint [256 x i8]* @bitoff to i32*/
if (reset) begin main_277_gep_int73 = 0; end
		main_277_gep_int73 = 1'd0;
end
always @(posedge clk) begin
	/* main: %277*/
	/*   %gep_int73 = ptrtoint [256 x i8]* @bitoff to i32*/
	if ((cur_state == LEGUP_F_main_BB__277_72)) begin
		main_277_gep_int73_reg <= main_277_gep_int73;
		if (start == 1'b0 && ^(main_277_gep_int73) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_277_gep_int73_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %277*/
	/*   %gep74 = add i32 %gep_int73, %279*/
		main_277_gep74 = main_signed_add_32_0;
end
always @(*) begin
/* main: %277*/
/*   %gep74 = add i32 %gep_int73, %279*/
	main_277_gep74_reg = main_1_gep_reg;
end
always @(*) begin
	/* main: %277*/
	/*   %280 = inttoptr i32 %gep74 to i8**/
		main_277_280 = main_277_gep74;
end
always @(posedge clk) begin
	/* main: %277*/
	/*   %280 = inttoptr i32 %gep74 to i8**/
	if ((cur_state == LEGUP_F_main_BB__277_72)) begin
		main_277_280_reg <= main_277_280;
		if (start == 1'b0 && ^(main_277_280) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_277_280_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %277*/
	/*   %281 = load i8* %280, align 1, !tbaa !5*/
		main_277_281 = bitoff_out_a;
end
always @(posedge clk) begin
	/* main: %277*/
	/*   %281 = load i8* %280, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__277_73)) begin
		main_277_281_reg <= main_277_281;
		if (start == 1'b0 && ^(main_277_281) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_277_281_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %277*/
	/*   %282 = zext i8 %281 to i32*/
		main_277_282 = main_277_281;
end
always @(posedge clk) begin
	/* main: %277*/
	/*   %282 = zext i8 %281 to i32*/
	if ((cur_state == LEGUP_F_main_BB__277_73)) begin
		main_277_282_reg <= main_277_282;
		if (start == 1'b0 && ^(main_277_282) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_277_282_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %277*/
	/*   %283 = add nuw nsw i32 %282, 15*/
		main_277_283 = main_signed_add_32_0;
end
always @(posedge clk) begin
	/* main: %277*/
	/*   %283 = add nuw nsw i32 %282, 15*/
	if ((cur_state == LEGUP_F_main_BB__277_73)) begin
		main_277_283_reg <= main_277_283;
		if (start == 1'b0 && ^(main_277_283) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_277_283_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %284*/
	/*   %285 = and i32 %.0.i.i, 255*/
		main_284_285 = (main_257_0ii_reg & 32'd255);
end
always @(posedge clk) begin
	/* main: %284*/
	/*   %285 = and i32 %.0.i.i, 255*/
	if ((cur_state == LEGUP_F_main_BB__284_74)) begin
		main_284_285_reg <= main_284_285;
		if (start == 1'b0 && ^(main_284_285) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_284_285_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %284*/
	/*   %gep_int75 = ptrtoint [256 x i8]* @bitoff to i32*/
if (reset) begin main_284_gep_int75 = 0; end
		main_284_gep_int75 = 1'd0;
end
always @(posedge clk) begin
	/* main: %284*/
	/*   %gep_int75 = ptrtoint [256 x i8]* @bitoff to i32*/
	if ((cur_state == LEGUP_F_main_BB__284_74)) begin
		main_284_gep_int75_reg <= main_284_gep_int75;
		if (start == 1'b0 && ^(main_284_gep_int75) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_284_gep_int75_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %284*/
	/*   %gep76 = add i32 %gep_int75, %285*/
		main_284_gep76 = main_signed_add_32_0;
end
always @(*) begin
/* main: %284*/
/*   %gep76 = add i32 %gep_int75, %285*/
	main_284_gep76_reg = main_1_gep_reg;
end
always @(*) begin
	/* main: %284*/
	/*   %286 = inttoptr i32 %gep76 to i8**/
		main_284_286 = main_284_gep76;
end
always @(posedge clk) begin
	/* main: %284*/
	/*   %286 = inttoptr i32 %gep76 to i8**/
	if ((cur_state == LEGUP_F_main_BB__284_74)) begin
		main_284_286_reg <= main_284_286;
		if (start == 1'b0 && ^(main_284_286) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_284_286_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %284*/
	/*   %287 = load i8* %286, align 1, !tbaa !5*/
		main_284_287 = bitoff_out_a;
end
always @(posedge clk) begin
	/* main: %284*/
	/*   %287 = load i8* %286, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__284_75)) begin
		main_284_287_reg <= main_284_287;
		if (start == 1'b0 && ^(main_284_287) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_284_287_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %284*/
	/*   %288 = zext i8 %287 to i32*/
		main_284_288 = main_284_287;
end
always @(posedge clk) begin
	/* main: %284*/
	/*   %288 = zext i8 %287 to i32*/
	if ((cur_state == LEGUP_F_main_BB__284_75)) begin
		main_284_288_reg <= main_284_288;
		if (start == 1'b0 && ^(main_284_288) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_284_288_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %284*/
	/*   %289 = add nuw nsw i32 %288, 23*/
		main_284_289 = main_signed_add_32_0;
end
always @(posedge clk) begin
	/* main: %284*/
	/*   %289 = add nuw nsw i32 %288, 23*/
	if ((cur_state == LEGUP_F_main_BB__284_75)) begin
		main_284_289_reg <= main_284_289;
		if (start == 1'b0 && ^(main_284_289) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_284_289_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_norm.exit.i*/
	/*   %.01.i.i6 = phi i32 [ 0, %253 ], [ %266, %261 ], [ %273, %267 ], [ %283, %277 ], [ %289, %284 ]*/
	if ((((cur_state == LEGUP_F_main_BB__253_63) & (memory_controller_waitrequest == 1'd0)) & (main_253_254 == 1'd1))) begin
		main_gsm_normexiti_01ii6 = 32'd0;
	end
	/* main: %gsm_norm.exit.i*/
	/*   %.01.i.i6 = phi i32 [ 0, %253 ], [ %266, %261 ], [ %273, %267 ], [ %283, %277 ], [ %289, %284 ]*/
	else if (((cur_state == LEGUP_F_main_BB__261_68) & (memory_controller_waitrequest == 1'd0))) begin
		main_gsm_normexiti_01ii6 = main_261_266;
	end
	/* main: %gsm_norm.exit.i*/
	/*   %.01.i.i6 = phi i32 [ 0, %253 ], [ %266, %261 ], [ %273, %267 ], [ %283, %277 ], [ %289, %284 ]*/
	else if (((cur_state == LEGUP_F_main_BB__267_70) & (memory_controller_waitrequest == 1'd0))) begin
		main_gsm_normexiti_01ii6 = main_267_273;
	end
	/* main: %gsm_norm.exit.i*/
	/*   %.01.i.i6 = phi i32 [ 0, %253 ], [ %266, %261 ], [ %273, %267 ], [ %283, %277 ], [ %289, %284 ]*/
	else if (((cur_state == LEGUP_F_main_BB__277_73) & (memory_controller_waitrequest == 1'd0))) begin
		main_gsm_normexiti_01ii6 = main_277_283;
	end
	/* main: %gsm_norm.exit.i*/
	/*   %.01.i.i6 = phi i32 [ 0, %253 ], [ %266, %261 ], [ %273, %267 ], [ %283, %277 ], [ %289, %284 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__284_75) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_gsm_normexiti_01ii6 = main_284_289;
	end
end
always @(posedge clk) begin
	/* main: %gsm_norm.exit.i*/
	/*   %.01.i.i6 = phi i32 [ 0, %253 ], [ %266, %261 ], [ %273, %267 ], [ %283, %277 ], [ %289, %284 ]*/
	if ((((cur_state == LEGUP_F_main_BB__253_63) & (memory_controller_waitrequest == 1'd0)) & (main_253_254 == 1'd1))) begin
		main_gsm_normexiti_01ii6_reg <= main_gsm_normexiti_01ii6;
		if (start == 1'b0 && ^(main_gsm_normexiti_01ii6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_normexiti_01ii6_reg"); $finish; end
	end
	/* main: %gsm_norm.exit.i*/
	/*   %.01.i.i6 = phi i32 [ 0, %253 ], [ %266, %261 ], [ %273, %267 ], [ %283, %277 ], [ %289, %284 ]*/
	if (((cur_state == LEGUP_F_main_BB__261_68) & (memory_controller_waitrequest == 1'd0))) begin
		main_gsm_normexiti_01ii6_reg <= main_gsm_normexiti_01ii6;
		if (start == 1'b0 && ^(main_gsm_normexiti_01ii6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_normexiti_01ii6_reg"); $finish; end
	end
	/* main: %gsm_norm.exit.i*/
	/*   %.01.i.i6 = phi i32 [ 0, %253 ], [ %266, %261 ], [ %273, %267 ], [ %283, %277 ], [ %289, %284 ]*/
	if (((cur_state == LEGUP_F_main_BB__267_70) & (memory_controller_waitrequest == 1'd0))) begin
		main_gsm_normexiti_01ii6_reg <= main_gsm_normexiti_01ii6;
		if (start == 1'b0 && ^(main_gsm_normexiti_01ii6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_normexiti_01ii6_reg"); $finish; end
	end
	/* main: %gsm_norm.exit.i*/
	/*   %.01.i.i6 = phi i32 [ 0, %253 ], [ %266, %261 ], [ %273, %267 ], [ %283, %277 ], [ %289, %284 ]*/
	if (((cur_state == LEGUP_F_main_BB__277_73) & (memory_controller_waitrequest == 1'd0))) begin
		main_gsm_normexiti_01ii6_reg <= main_gsm_normexiti_01ii6;
		if (start == 1'b0 && ^(main_gsm_normexiti_01ii6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_normexiti_01ii6_reg"); $finish; end
	end
	/* main: %gsm_norm.exit.i*/
	/*   %.01.i.i6 = phi i32 [ 0, %253 ], [ %266, %261 ], [ %273, %267 ], [ %283, %277 ], [ %289, %284 ]*/
	if (((cur_state == LEGUP_F_main_BB__284_75) & (memory_controller_waitrequest == 1'd0))) begin
		main_gsm_normexiti_01ii6_reg <= main_gsm_normexiti_01ii6;
		if (start == 1'b0 && ^(main_gsm_normexiti_01ii6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_normexiti_01ii6_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_norm.exit.i*/
	/*   %sext.i7 = shl i32 %.01.i.i6, 16*/
		main_gsm_normexiti_sexti7 = (main_gsm_normexiti_01ii6_reg <<< (32'd16 % 32));
end
always @(posedge clk) begin
	/* main: %gsm_norm.exit.i*/
	/*   %sext.i7 = shl i32 %.01.i.i6, 16*/
	if ((cur_state == LEGUP_F_main_BB_gsm_normexiti_76)) begin
		main_gsm_normexiti_sexti7_reg <= main_gsm_normexiti_sexti7;
		if (start == 1'b0 && ^(main_gsm_normexiti_sexti7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_normexiti_sexti7_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_norm.exit.i*/
	/*   %290 = ashr exact i32 %sext.i7, 16*/
		main_gsm_normexiti_290 = ($signed(main_gsm_normexiti_sexti7) >>> 32'd16);
end
always @(posedge clk) begin
	/* main: %gsm_norm.exit.i*/
	/*   %290 = ashr exact i32 %sext.i7, 16*/
	if ((cur_state == LEGUP_F_main_BB_gsm_normexiti_76)) begin
		main_gsm_normexiti_290_reg <= main_gsm_normexiti_290;
		if (start == 1'b0 && ^(main_gsm_normexiti_290) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_normexiti_290_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_norm.exit.i*/
	/*   %291 = shl i32 %186, %290*/
		main_gsm_normexiti_291 = (main_preheader5i_186_reg <<< (main_gsm_normexiti_290 % 32));
end
always @(posedge clk) begin
	/* main: %gsm_norm.exit.i*/
	/*   %291 = shl i32 %186, %290*/
	if ((cur_state == LEGUP_F_main_BB_gsm_normexiti_76)) begin
		main_gsm_normexiti_291_reg <= main_gsm_normexiti_291;
		if (start == 1'b0 && ^(main_gsm_normexiti_291) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_normexiti_291_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_norm.exit.i*/
	/*   %292 = lshr i32 %291, 16*/
		main_gsm_normexiti_292 = (main_gsm_normexiti_291 >>> (32'd16 % 32));
end
always @(posedge clk) begin
	/* main: %gsm_norm.exit.i*/
	/*   %292 = lshr i32 %291, 16*/
	if ((cur_state == LEGUP_F_main_BB_gsm_normexiti_76)) begin
		main_gsm_normexiti_292_reg <= main_gsm_normexiti_292;
		if (start == 1'b0 && ^(main_gsm_normexiti_292) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_normexiti_292_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_norm.exit.i*/
	/*   %293 = trunc i32 %292 to i16*/
		main_gsm_normexiti_293 = main_gsm_normexiti_292[15:0];
end
always @(posedge clk) begin
	/* main: %gsm_norm.exit.i*/
	/*   %293 = trunc i32 %292 to i16*/
	if ((cur_state == LEGUP_F_main_BB_gsm_normexiti_76)) begin
		main_gsm_normexiti_293_reg <= main_gsm_normexiti_293;
		if (start == 1'b0 && ^(main_gsm_normexiti_293) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_normexiti_293_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_norm.exit.i*/
	/*   %294 = shl i32 %185, %290*/
		main_gsm_normexiti_294 = (main_preheader5i_185_reg <<< (main_gsm_normexiti_290 % 32));
end
always @(posedge clk) begin
	/* main: %gsm_norm.exit.i*/
	/*   %294 = shl i32 %185, %290*/
	if ((cur_state == LEGUP_F_main_BB_gsm_normexiti_76)) begin
		main_gsm_normexiti_294_reg <= main_gsm_normexiti_294;
		if (start == 1'b0 && ^(main_gsm_normexiti_294) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_normexiti_294_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_norm.exit.i*/
	/*   %295 = lshr i32 %294, 16*/
		main_gsm_normexiti_295 = (main_gsm_normexiti_294 >>> (32'd16 % 32));
end
always @(posedge clk) begin
	/* main: %gsm_norm.exit.i*/
	/*   %295 = lshr i32 %294, 16*/
	if ((cur_state == LEGUP_F_main_BB_gsm_normexiti_76)) begin
		main_gsm_normexiti_295_reg <= main_gsm_normexiti_295;
		if (start == 1'b0 && ^(main_gsm_normexiti_295) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_normexiti_295_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_norm.exit.i*/
	/*   %296 = trunc i32 %295 to i16*/
		main_gsm_normexiti_296 = main_gsm_normexiti_295[15:0];
end
always @(posedge clk) begin
	/* main: %gsm_norm.exit.i*/
	/*   %296 = trunc i32 %295 to i16*/
	if ((cur_state == LEGUP_F_main_BB_gsm_normexiti_76)) begin
		main_gsm_normexiti_296_reg <= main_gsm_normexiti_296;
		if (start == 1'b0 && ^(main_gsm_normexiti_296) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_normexiti_296_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_norm.exit.i*/
	/*   %297 = shl i32 %184, %290*/
		main_gsm_normexiti_297 = (main_preheader5i_184_reg <<< (main_gsm_normexiti_290 % 32));
end
always @(posedge clk) begin
	/* main: %gsm_norm.exit.i*/
	/*   %297 = shl i32 %184, %290*/
	if ((cur_state == LEGUP_F_main_BB_gsm_normexiti_76)) begin
		main_gsm_normexiti_297_reg <= main_gsm_normexiti_297;
		if (start == 1'b0 && ^(main_gsm_normexiti_297) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_normexiti_297_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_norm.exit.i*/
	/*   %298 = lshr i32 %297, 16*/
		main_gsm_normexiti_298 = (main_gsm_normexiti_297 >>> (32'd16 % 32));
end
always @(posedge clk) begin
	/* main: %gsm_norm.exit.i*/
	/*   %298 = lshr i32 %297, 16*/
	if ((cur_state == LEGUP_F_main_BB_gsm_normexiti_76)) begin
		main_gsm_normexiti_298_reg <= main_gsm_normexiti_298;
		if (start == 1'b0 && ^(main_gsm_normexiti_298) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_normexiti_298_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_norm.exit.i*/
	/*   %299 = trunc i32 %298 to i16*/
		main_gsm_normexiti_299 = main_gsm_normexiti_298[15:0];
end
always @(posedge clk) begin
	/* main: %gsm_norm.exit.i*/
	/*   %299 = trunc i32 %298 to i16*/
	if ((cur_state == LEGUP_F_main_BB_gsm_normexiti_76)) begin
		main_gsm_normexiti_299_reg <= main_gsm_normexiti_299;
		if (start == 1'b0 && ^(main_gsm_normexiti_299) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_normexiti_299_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_norm.exit.i*/
	/*   %300 = shl i32 %183, %290*/
		main_gsm_normexiti_300 = (main_preheader5i_183_reg <<< (main_gsm_normexiti_290 % 32));
end
always @(posedge clk) begin
	/* main: %gsm_norm.exit.i*/
	/*   %300 = shl i32 %183, %290*/
	if ((cur_state == LEGUP_F_main_BB_gsm_normexiti_76)) begin
		main_gsm_normexiti_300_reg <= main_gsm_normexiti_300;
		if (start == 1'b0 && ^(main_gsm_normexiti_300) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_normexiti_300_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_norm.exit.i*/
	/*   %301 = lshr i32 %300, 16*/
		main_gsm_normexiti_301 = (main_gsm_normexiti_300 >>> (32'd16 % 32));
end
always @(posedge clk) begin
	/* main: %gsm_norm.exit.i*/
	/*   %301 = lshr i32 %300, 16*/
	if ((cur_state == LEGUP_F_main_BB_gsm_normexiti_76)) begin
		main_gsm_normexiti_301_reg <= main_gsm_normexiti_301;
		if (start == 1'b0 && ^(main_gsm_normexiti_301) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_normexiti_301_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_norm.exit.i*/
	/*   %302 = trunc i32 %301 to i16*/
		main_gsm_normexiti_302 = main_gsm_normexiti_301[15:0];
end
always @(posedge clk) begin
	/* main: %gsm_norm.exit.i*/
	/*   %302 = trunc i32 %301 to i16*/
	if ((cur_state == LEGUP_F_main_BB_gsm_normexiti_76)) begin
		main_gsm_normexiti_302_reg <= main_gsm_normexiti_302;
		if (start == 1'b0 && ^(main_gsm_normexiti_302) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_normexiti_302_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_norm.exit.i*/
	/*   %303 = shl i32 %182, %290*/
		main_gsm_normexiti_303 = (main_preheader5i_182_reg <<< (main_gsm_normexiti_290 % 32));
end
always @(posedge clk) begin
	/* main: %gsm_norm.exit.i*/
	/*   %303 = shl i32 %182, %290*/
	if ((cur_state == LEGUP_F_main_BB_gsm_normexiti_76)) begin
		main_gsm_normexiti_303_reg <= main_gsm_normexiti_303;
		if (start == 1'b0 && ^(main_gsm_normexiti_303) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_normexiti_303_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_norm.exit.i*/
	/*   %304 = lshr i32 %303, 16*/
		main_gsm_normexiti_304 = (main_gsm_normexiti_303 >>> (32'd16 % 32));
end
always @(posedge clk) begin
	/* main: %gsm_norm.exit.i*/
	/*   %304 = lshr i32 %303, 16*/
	if ((cur_state == LEGUP_F_main_BB_gsm_normexiti_76)) begin
		main_gsm_normexiti_304_reg <= main_gsm_normexiti_304;
		if (start == 1'b0 && ^(main_gsm_normexiti_304) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_normexiti_304_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_norm.exit.i*/
	/*   %305 = trunc i32 %304 to i16*/
		main_gsm_normexiti_305 = main_gsm_normexiti_304[15:0];
end
always @(posedge clk) begin
	/* main: %gsm_norm.exit.i*/
	/*   %305 = trunc i32 %304 to i16*/
	if ((cur_state == LEGUP_F_main_BB_gsm_normexiti_76)) begin
		main_gsm_normexiti_305_reg <= main_gsm_normexiti_305;
		if (start == 1'b0 && ^(main_gsm_normexiti_305) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_normexiti_305_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_norm.exit.i*/
	/*   %306 = shl i32 %181, %290*/
		main_gsm_normexiti_306 = (main_preheader5i_181_reg <<< (main_gsm_normexiti_290 % 32));
end
always @(posedge clk) begin
	/* main: %gsm_norm.exit.i*/
	/*   %306 = shl i32 %181, %290*/
	if ((cur_state == LEGUP_F_main_BB_gsm_normexiti_76)) begin
		main_gsm_normexiti_306_reg <= main_gsm_normexiti_306;
		if (start == 1'b0 && ^(main_gsm_normexiti_306) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_normexiti_306_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_norm.exit.i*/
	/*   %307 = lshr i32 %306, 16*/
		main_gsm_normexiti_307 = (main_gsm_normexiti_306 >>> (32'd16 % 32));
end
always @(posedge clk) begin
	/* main: %gsm_norm.exit.i*/
	/*   %307 = lshr i32 %306, 16*/
	if ((cur_state == LEGUP_F_main_BB_gsm_normexiti_76)) begin
		main_gsm_normexiti_307_reg <= main_gsm_normexiti_307;
		if (start == 1'b0 && ^(main_gsm_normexiti_307) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_normexiti_307_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_norm.exit.i*/
	/*   %308 = trunc i32 %307 to i16*/
		main_gsm_normexiti_308 = main_gsm_normexiti_307[15:0];
end
always @(posedge clk) begin
	/* main: %gsm_norm.exit.i*/
	/*   %308 = trunc i32 %307 to i16*/
	if ((cur_state == LEGUP_F_main_BB_gsm_normexiti_76)) begin
		main_gsm_normexiti_308_reg <= main_gsm_normexiti_308;
		if (start == 1'b0 && ^(main_gsm_normexiti_308) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_normexiti_308_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_norm.exit.i*/
	/*   %309 = shl i32 %180, %290*/
		main_gsm_normexiti_309 = (main_preheader5i_180_reg <<< (main_gsm_normexiti_290 % 32));
end
always @(posedge clk) begin
	/* main: %gsm_norm.exit.i*/
	/*   %309 = shl i32 %180, %290*/
	if ((cur_state == LEGUP_F_main_BB_gsm_normexiti_76)) begin
		main_gsm_normexiti_309_reg <= main_gsm_normexiti_309;
		if (start == 1'b0 && ^(main_gsm_normexiti_309) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_normexiti_309_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_norm.exit.i*/
	/*   %310 = lshr i32 %309, 16*/
		main_gsm_normexiti_310 = (main_gsm_normexiti_309 >>> (32'd16 % 32));
end
always @(posedge clk) begin
	/* main: %gsm_norm.exit.i*/
	/*   %310 = lshr i32 %309, 16*/
	if ((cur_state == LEGUP_F_main_BB_gsm_normexiti_76)) begin
		main_gsm_normexiti_310_reg <= main_gsm_normexiti_310;
		if (start == 1'b0 && ^(main_gsm_normexiti_310) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_normexiti_310_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_norm.exit.i*/
	/*   %311 = trunc i32 %310 to i16*/
		main_gsm_normexiti_311 = main_gsm_normexiti_310[15:0];
end
always @(posedge clk) begin
	/* main: %gsm_norm.exit.i*/
	/*   %311 = trunc i32 %310 to i16*/
	if ((cur_state == LEGUP_F_main_BB_gsm_normexiti_76)) begin
		main_gsm_normexiti_311_reg <= main_gsm_normexiti_311;
		if (start == 1'b0 && ^(main_gsm_normexiti_311) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_normexiti_311_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_norm.exit.i*/
	/*   %312 = shl i32 %179, %290*/
		main_gsm_normexiti_312 = (main_preheader5i_179_reg <<< (main_gsm_normexiti_290 % 32));
end
always @(posedge clk) begin
	/* main: %gsm_norm.exit.i*/
	/*   %312 = shl i32 %179, %290*/
	if ((cur_state == LEGUP_F_main_BB_gsm_normexiti_76)) begin
		main_gsm_normexiti_312_reg <= main_gsm_normexiti_312;
		if (start == 1'b0 && ^(main_gsm_normexiti_312) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_normexiti_312_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_norm.exit.i*/
	/*   %313 = lshr i32 %312, 16*/
		main_gsm_normexiti_313 = (main_gsm_normexiti_312 >>> (32'd16 % 32));
end
always @(posedge clk) begin
	/* main: %gsm_norm.exit.i*/
	/*   %313 = lshr i32 %312, 16*/
	if ((cur_state == LEGUP_F_main_BB_gsm_normexiti_76)) begin
		main_gsm_normexiti_313_reg <= main_gsm_normexiti_313;
		if (start == 1'b0 && ^(main_gsm_normexiti_313) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_normexiti_313_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_norm.exit.i*/
	/*   %314 = trunc i32 %313 to i16*/
		main_gsm_normexiti_314 = main_gsm_normexiti_313[15:0];
end
always @(posedge clk) begin
	/* main: %gsm_norm.exit.i*/
	/*   %314 = trunc i32 %313 to i16*/
	if ((cur_state == LEGUP_F_main_BB_gsm_normexiti_76)) begin
		main_gsm_normexiti_314_reg <= main_gsm_normexiti_314;
		if (start == 1'b0 && ^(main_gsm_normexiti_314) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_normexiti_314_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_norm.exit.i*/
	/*   %315 = shl i32 %178, %290*/
		main_gsm_normexiti_315 = (main_preheader5i_178_reg <<< (main_gsm_normexiti_290 % 32));
end
always @(posedge clk) begin
	/* main: %gsm_norm.exit.i*/
	/*   %315 = shl i32 %178, %290*/
	if ((cur_state == LEGUP_F_main_BB_gsm_normexiti_76)) begin
		main_gsm_normexiti_315_reg <= main_gsm_normexiti_315;
		if (start == 1'b0 && ^(main_gsm_normexiti_315) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_normexiti_315_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_norm.exit.i*/
	/*   %316 = lshr i32 %315, 16*/
		main_gsm_normexiti_316 = (main_gsm_normexiti_315 >>> (32'd16 % 32));
end
always @(posedge clk) begin
	/* main: %gsm_norm.exit.i*/
	/*   %316 = lshr i32 %315, 16*/
	if ((cur_state == LEGUP_F_main_BB_gsm_normexiti_76)) begin
		main_gsm_normexiti_316_reg <= main_gsm_normexiti_316;
		if (start == 1'b0 && ^(main_gsm_normexiti_316) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_normexiti_316_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_norm.exit.i*/
	/*   %317 = trunc i32 %316 to i16*/
		main_gsm_normexiti_317 = main_gsm_normexiti_316[15:0];
end
always @(posedge clk) begin
	/* main: %gsm_norm.exit.i*/
	/*   %317 = trunc i32 %316 to i16*/
	if ((cur_state == LEGUP_F_main_BB_gsm_normexiti_76)) begin
		main_gsm_normexiti_317_reg <= main_gsm_normexiti_317;
		if (start == 1'b0 && ^(main_gsm_normexiti_317) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_normexiti_317_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_norm.exit.i*/
	/*   %gep_int77 = ptrtoint [9 x i16]* %K.i to i32*/
if (reset) begin main_gsm_normexiti_gep_int77 = 0; end
		main_gsm_normexiti_gep_int77 = 1'd0;
end
always @(posedge clk) begin
	/* main: %gsm_norm.exit.i*/
	/*   %gep_int77 = ptrtoint [9 x i16]* %K.i to i32*/
	if ((cur_state == LEGUP_F_main_BB_gsm_normexiti_76)) begin
		main_gsm_normexiti_gep_int77_reg <= main_gsm_normexiti_gep_int77;
		if (start == 1'b0 && ^(main_gsm_normexiti_gep_int77) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_normexiti_gep_int77_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_norm.exit.i*/
	/*   %gep78 = add i32 %gep_int77, 2*/
		main_gsm_normexiti_gep78 = main_signed_add_32_0;
end
always @(*) begin
/* main: %gsm_norm.exit.i*/
/*   %gep78 = add i32 %gep_int77, 2*/
	main_gsm_normexiti_gep78_reg = main_1_gep_reg;
end
always @(*) begin
	/* main: %gsm_norm.exit.i*/
	/*   %318 = inttoptr i32 %gep78 to i16**/
		main_gsm_normexiti_318 = main_gsm_normexiti_gep78;
end
always @(posedge clk) begin
	/* main: %gsm_norm.exit.i*/
	/*   %318 = inttoptr i32 %gep78 to i16**/
	if ((cur_state == LEGUP_F_main_BB_gsm_normexiti_76)) begin
		main_gsm_normexiti_318_reg <= main_gsm_normexiti_318;
		if (start == 1'b0 && ^(main_gsm_normexiti_318) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_normexiti_318_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_norm.exit.i*/
	/*   %gep_int79 = ptrtoint [9 x i16]* %K.i to i32*/
if (reset) begin main_gsm_normexiti_gep_int79 = 0; end
		main_gsm_normexiti_gep_int79 = 1'd0;
end
always @(posedge clk) begin
	/* main: %gsm_norm.exit.i*/
	/*   %gep_int79 = ptrtoint [9 x i16]* %K.i to i32*/
	if ((cur_state == LEGUP_F_main_BB_gsm_normexiti_76)) begin
		main_gsm_normexiti_gep_int79_reg <= main_gsm_normexiti_gep_int79;
		if (start == 1'b0 && ^(main_gsm_normexiti_gep_int79) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_normexiti_gep_int79_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_norm.exit.i*/
	/*   %gep80 = add i32 %gep_int79, 4*/
		main_gsm_normexiti_gep80 = main_signed_add_32_1;
end
always @(*) begin
/* main: %gsm_norm.exit.i*/
/*   %gep80 = add i32 %gep_int79, 4*/
	main_gsm_normexiti_gep80_reg = main_1_gep3_reg;
end
always @(*) begin
	/* main: %gsm_norm.exit.i*/
	/*   %319 = inttoptr i32 %gep80 to i16**/
		main_gsm_normexiti_319 = main_gsm_normexiti_gep80;
end
always @(posedge clk) begin
	/* main: %gsm_norm.exit.i*/
	/*   %319 = inttoptr i32 %gep80 to i16**/
	if ((cur_state == LEGUP_F_main_BB_gsm_normexiti_76)) begin
		main_gsm_normexiti_319_reg <= main_gsm_normexiti_319;
		if (start == 1'b0 && ^(main_gsm_normexiti_319) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_normexiti_319_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_norm.exit.i*/
	/*   %gep_int81 = ptrtoint [9 x i16]* %K.i to i32*/
if (reset) begin main_gsm_normexiti_gep_int81 = 0; end
		main_gsm_normexiti_gep_int81 = 1'd0;
end
always @(posedge clk) begin
	/* main: %gsm_norm.exit.i*/
	/*   %gep_int81 = ptrtoint [9 x i16]* %K.i to i32*/
	if ((cur_state == LEGUP_F_main_BB_gsm_normexiti_76)) begin
		main_gsm_normexiti_gep_int81_reg <= main_gsm_normexiti_gep_int81;
		if (start == 1'b0 && ^(main_gsm_normexiti_gep_int81) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_normexiti_gep_int81_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_norm.exit.i*/
	/*   %gep82 = add i32 %gep_int81, 6*/
		main_gsm_normexiti_gep82 = main_signed_add_32_2;
end
always @(*) begin
/* main: %gsm_norm.exit.i*/
/*   %gep82 = add i32 %gep_int81, 6*/
	main_gsm_normexiti_gep82_reg = main_threadi_126_reg;
end
always @(*) begin
	/* main: %gsm_norm.exit.i*/
	/*   %320 = inttoptr i32 %gep82 to i16**/
		main_gsm_normexiti_320 = main_gsm_normexiti_gep82;
end
always @(posedge clk) begin
	/* main: %gsm_norm.exit.i*/
	/*   %320 = inttoptr i32 %gep82 to i16**/
	if ((cur_state == LEGUP_F_main_BB_gsm_normexiti_76)) begin
		main_gsm_normexiti_320_reg <= main_gsm_normexiti_320;
		if (start == 1'b0 && ^(main_gsm_normexiti_320) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_normexiti_320_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_norm.exit.i*/
	/*   %gep_int83 = ptrtoint [9 x i16]* %K.i to i32*/
if (reset) begin main_gsm_normexiti_gep_int83 = 0; end
		main_gsm_normexiti_gep_int83 = 1'd0;
end
always @(posedge clk) begin
	/* main: %gsm_norm.exit.i*/
	/*   %gep_int83 = ptrtoint [9 x i16]* %K.i to i32*/
	if ((cur_state == LEGUP_F_main_BB_gsm_normexiti_76)) begin
		main_gsm_normexiti_gep_int83_reg <= main_gsm_normexiti_gep_int83;
		if (start == 1'b0 && ^(main_gsm_normexiti_gep_int83) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_normexiti_gep_int83_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_norm.exit.i*/
	/*   %gep84 = add i32 %gep_int83, 8*/
		main_gsm_normexiti_gep84 = main_signed_add_32_3;
end
always @(*) begin
/* main: %gsm_norm.exit.i*/
/*   %gep84 = add i32 %gep_int83, 8*/
	main_gsm_normexiti_gep84_reg = main_threadi_158_reg;
end
always @(*) begin
	/* main: %gsm_norm.exit.i*/
	/*   %321 = inttoptr i32 %gep84 to i16**/
		main_gsm_normexiti_321 = main_gsm_normexiti_gep84;
end
always @(posedge clk) begin
	/* main: %gsm_norm.exit.i*/
	/*   %321 = inttoptr i32 %gep84 to i16**/
	if ((cur_state == LEGUP_F_main_BB_gsm_normexiti_76)) begin
		main_gsm_normexiti_321_reg <= main_gsm_normexiti_321;
		if (start == 1'b0 && ^(main_gsm_normexiti_321) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_normexiti_321_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_norm.exit.i*/
	/*   %gep_int85 = ptrtoint [9 x i16]* %K.i to i32*/
if (reset) begin main_gsm_normexiti_gep_int85 = 0; end
		main_gsm_normexiti_gep_int85 = 1'd0;
end
always @(posedge clk) begin
	/* main: %gsm_norm.exit.i*/
	/*   %gep_int85 = ptrtoint [9 x i16]* %K.i to i32*/
	if ((cur_state == LEGUP_F_main_BB_gsm_normexiti_76)) begin
		main_gsm_normexiti_gep_int85_reg <= main_gsm_normexiti_gep_int85;
		if (start == 1'b0 && ^(main_gsm_normexiti_gep_int85) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_normexiti_gep_int85_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_norm.exit.i*/
	/*   %gep86 = add i32 %gep_int85, 10*/
		main_gsm_normexiti_gep86 = main_signed_add_32_4;
end
always @(*) begin
/* main: %gsm_norm.exit.i*/
/*   %gep86 = add i32 %gep_int85, 10*/
	main_gsm_normexiti_gep86_reg = main_threadi_174_reg;
end
always @(*) begin
	/* main: %gsm_norm.exit.i*/
	/*   %322 = inttoptr i32 %gep86 to i16**/
		main_gsm_normexiti_322 = main_gsm_normexiti_gep86;
end
always @(posedge clk) begin
	/* main: %gsm_norm.exit.i*/
	/*   %322 = inttoptr i32 %gep86 to i16**/
	if ((cur_state == LEGUP_F_main_BB_gsm_normexiti_76)) begin
		main_gsm_normexiti_322_reg <= main_gsm_normexiti_322;
		if (start == 1'b0 && ^(main_gsm_normexiti_322) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_normexiti_322_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_norm.exit.i*/
	/*   %gep_int87 = ptrtoint [9 x i16]* %K.i to i32*/
if (reset) begin main_gsm_normexiti_gep_int87 = 0; end
		main_gsm_normexiti_gep_int87 = 1'd0;
end
always @(posedge clk) begin
	/* main: %gsm_norm.exit.i*/
	/*   %gep_int87 = ptrtoint [9 x i16]* %K.i to i32*/
	if ((cur_state == LEGUP_F_main_BB_gsm_normexiti_76)) begin
		main_gsm_normexiti_gep_int87_reg <= main_gsm_normexiti_gep_int87;
		if (start == 1'b0 && ^(main_gsm_normexiti_gep_int87) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_normexiti_gep_int87_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_norm.exit.i*/
	/*   %gep88 = add i32 %gep_int87, 12*/
		main_gsm_normexiti_gep88 = main_signed_add_32_5;
end
always @(*) begin
/* main: %gsm_norm.exit.i*/
/*   %gep88 = add i32 %gep_int87, 12*/
	main_gsm_normexiti_gep88_reg = main_threadi_156_reg;
end
always @(*) begin
	/* main: %gsm_norm.exit.i*/
	/*   %323 = inttoptr i32 %gep88 to i16**/
		main_gsm_normexiti_323 = main_gsm_normexiti_gep88;
end
always @(posedge clk) begin
	/* main: %gsm_norm.exit.i*/
	/*   %323 = inttoptr i32 %gep88 to i16**/
	if ((cur_state == LEGUP_F_main_BB_gsm_normexiti_76)) begin
		main_gsm_normexiti_323_reg <= main_gsm_normexiti_323;
		if (start == 1'b0 && ^(main_gsm_normexiti_323) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_normexiti_323_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_norm.exit.i*/
	/*   %gep_int89 = ptrtoint [9 x i16]* %K.i to i32*/
if (reset) begin main_gsm_normexiti_gep_int89 = 0; end
		main_gsm_normexiti_gep_int89 = 1'd0;
end
always @(posedge clk) begin
	/* main: %gsm_norm.exit.i*/
	/*   %gep_int89 = ptrtoint [9 x i16]* %K.i to i32*/
	if ((cur_state == LEGUP_F_main_BB_gsm_normexiti_76)) begin
		main_gsm_normexiti_gep_int89_reg <= main_gsm_normexiti_gep_int89;
		if (start == 1'b0 && ^(main_gsm_normexiti_gep_int89) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_normexiti_gep_int89_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_norm.exit.i*/
	/*   %gep90 = add i32 %gep_int89, 14*/
		main_gsm_normexiti_gep90 = main_signed_add_32_6;
end
always @(*) begin
/* main: %gsm_norm.exit.i*/
/*   %gep90 = add i32 %gep_int89, 14*/
	main_gsm_normexiti_gep90_reg = main_threadi_gep36_reg;
end
always @(*) begin
	/* main: %gsm_norm.exit.i*/
	/*   %324 = inttoptr i32 %gep90 to i16**/
		main_gsm_normexiti_324 = main_gsm_normexiti_gep90;
end
always @(posedge clk) begin
	/* main: %gsm_norm.exit.i*/
	/*   %324 = inttoptr i32 %gep90 to i16**/
	if ((cur_state == LEGUP_F_main_BB_gsm_normexiti_76)) begin
		main_gsm_normexiti_324_reg <= main_gsm_normexiti_324;
		if (start == 1'b0 && ^(main_gsm_normexiti_324) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_normexiti_324_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_norm.exit.i*/
	/*   %gep_int91 = ptrtoint [9 x i16]* %P.i to i32*/
if (reset) begin main_gsm_normexiti_gep_int91 = 0; end
		main_gsm_normexiti_gep_int91 = 1'd0;
end
always @(posedge clk) begin
	/* main: %gsm_norm.exit.i*/
	/*   %gep_int91 = ptrtoint [9 x i16]* %P.i to i32*/
	if ((cur_state == LEGUP_F_main_BB_gsm_normexiti_76)) begin
		main_gsm_normexiti_gep_int91_reg <= main_gsm_normexiti_gep_int91;
		if (start == 1'b0 && ^(main_gsm_normexiti_gep_int91) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_normexiti_gep_int91_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_norm.exit.i*/
	/*   %325 = inttoptr i32 %gep_int91 to i16**/
		main_gsm_normexiti_325 = main_gsm_normexiti_gep_int91;
end
always @(posedge clk) begin
	/* main: %gsm_norm.exit.i*/
	/*   %325 = inttoptr i32 %gep_int91 to i16**/
	if ((cur_state == LEGUP_F_main_BB_gsm_normexiti_76)) begin
		main_gsm_normexiti_325_reg <= main_gsm_normexiti_325;
		if (start == 1'b0 && ^(main_gsm_normexiti_325) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_normexiti_325_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_norm.exit.i*/
	/*   %gep_int92 = ptrtoint [9 x i16]* %P.i to i32*/
if (reset) begin main_gsm_normexiti_gep_int92 = 0; end
		main_gsm_normexiti_gep_int92 = 1'd0;
end
always @(posedge clk) begin
	/* main: %gsm_norm.exit.i*/
	/*   %gep_int92 = ptrtoint [9 x i16]* %P.i to i32*/
	if ((cur_state == LEGUP_F_main_BB_gsm_normexiti_76)) begin
		main_gsm_normexiti_gep_int92_reg <= main_gsm_normexiti_gep_int92;
		if (start == 1'b0 && ^(main_gsm_normexiti_gep_int92) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_normexiti_gep_int92_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_norm.exit.i*/
	/*   %gep93 = add i32 %gep_int92, 2*/
		main_gsm_normexiti_gep93 = main_signed_add_32_7;
end
always @(*) begin
/* main: %gsm_norm.exit.i*/
/*   %gep93 = add i32 %gep_int92, 2*/
	main_gsm_normexiti_gep93_reg = main_threadi_140_reg;
end
always @(*) begin
	/* main: %gsm_norm.exit.i*/
	/*   %326 = inttoptr i32 %gep93 to i16**/
		main_gsm_normexiti_326 = main_gsm_normexiti_gep93;
end
always @(posedge clk) begin
	/* main: %gsm_norm.exit.i*/
	/*   %326 = inttoptr i32 %gep93 to i16**/
	if ((cur_state == LEGUP_F_main_BB_gsm_normexiti_76)) begin
		main_gsm_normexiti_326_reg <= main_gsm_normexiti_326;
		if (start == 1'b0 && ^(main_gsm_normexiti_326) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_normexiti_326_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_norm.exit.i*/
	/*   %gep_int94 = ptrtoint [9 x i16]* %P.i to i32*/
if (reset) begin main_gsm_normexiti_gep_int94 = 0; end
		main_gsm_normexiti_gep_int94 = 1'd0;
end
always @(posedge clk) begin
	/* main: %gsm_norm.exit.i*/
	/*   %gep_int94 = ptrtoint [9 x i16]* %P.i to i32*/
	if ((cur_state == LEGUP_F_main_BB_gsm_normexiti_76)) begin
		main_gsm_normexiti_gep_int94_reg <= main_gsm_normexiti_gep_int94;
		if (start == 1'b0 && ^(main_gsm_normexiti_gep_int94) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_normexiti_gep_int94_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_norm.exit.i*/
	/*   %gep95 = add i32 %gep_int94, 4*/
		main_gsm_normexiti_gep95 = main_signed_add_32_8;
end
always @(*) begin
/* main: %gsm_norm.exit.i*/
/*   %gep95 = add i32 %gep_int94, 4*/
	main_gsm_normexiti_gep95_reg = main_threadi_142_reg;
end
always @(*) begin
	/* main: %gsm_norm.exit.i*/
	/*   %327 = inttoptr i32 %gep95 to i16**/
		main_gsm_normexiti_327 = main_gsm_normexiti_gep95;
end
always @(posedge clk) begin
	/* main: %gsm_norm.exit.i*/
	/*   %327 = inttoptr i32 %gep95 to i16**/
	if ((cur_state == LEGUP_F_main_BB_gsm_normexiti_76)) begin
		main_gsm_normexiti_327_reg <= main_gsm_normexiti_327;
		if (start == 1'b0 && ^(main_gsm_normexiti_327) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_normexiti_327_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_norm.exit.i*/
	/*   %gep_int96 = ptrtoint [9 x i16]* %P.i to i32*/
if (reset) begin main_gsm_normexiti_gep_int96 = 0; end
		main_gsm_normexiti_gep_int96 = 1'd0;
end
always @(posedge clk) begin
	/* main: %gsm_norm.exit.i*/
	/*   %gep_int96 = ptrtoint [9 x i16]* %P.i to i32*/
	if ((cur_state == LEGUP_F_main_BB_gsm_normexiti_76)) begin
		main_gsm_normexiti_gep_int96_reg <= main_gsm_normexiti_gep_int96;
		if (start == 1'b0 && ^(main_gsm_normexiti_gep_int96) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_normexiti_gep_int96_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_norm.exit.i*/
	/*   %gep97 = add i32 %gep_int96, 6*/
		main_gsm_normexiti_gep97 = main_signed_add_32_9;
end
always @(*) begin
/* main: %gsm_norm.exit.i*/
/*   %gep97 = add i32 %gep_int96, 6*/
	main_gsm_normexiti_gep97_reg = main_threadi_134_reg;
end
always @(*) begin
	/* main: %gsm_norm.exit.i*/
	/*   %328 = inttoptr i32 %gep97 to i16**/
		main_gsm_normexiti_328 = main_gsm_normexiti_gep97;
end
always @(posedge clk) begin
	/* main: %gsm_norm.exit.i*/
	/*   %328 = inttoptr i32 %gep97 to i16**/
	if ((cur_state == LEGUP_F_main_BB_gsm_normexiti_76)) begin
		main_gsm_normexiti_328_reg <= main_gsm_normexiti_328;
		if (start == 1'b0 && ^(main_gsm_normexiti_328) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_normexiti_328_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_norm.exit.i*/
	/*   %gep_int98 = ptrtoint [9 x i16]* %P.i to i32*/
if (reset) begin main_gsm_normexiti_gep_int98 = 0; end
		main_gsm_normexiti_gep_int98 = 1'd0;
end
always @(posedge clk) begin
	/* main: %gsm_norm.exit.i*/
	/*   %gep_int98 = ptrtoint [9 x i16]* %P.i to i32*/
	if ((cur_state == LEGUP_F_main_BB_gsm_normexiti_76)) begin
		main_gsm_normexiti_gep_int98_reg <= main_gsm_normexiti_gep_int98;
		if (start == 1'b0 && ^(main_gsm_normexiti_gep_int98) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_normexiti_gep_int98_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_norm.exit.i*/
	/*   %gep99 = add i32 %gep_int98, 8*/
		main_gsm_normexiti_gep99 = main_signed_add_32_10;
end
always @(*) begin
/* main: %gsm_norm.exit.i*/
/*   %gep99 = add i32 %gep_int98, 8*/
	main_gsm_normexiti_gep99_reg = main_threadi_136_reg;
end
always @(*) begin
	/* main: %gsm_norm.exit.i*/
	/*   %329 = inttoptr i32 %gep99 to i16**/
		main_gsm_normexiti_329 = main_gsm_normexiti_gep99;
end
always @(posedge clk) begin
	/* main: %gsm_norm.exit.i*/
	/*   %329 = inttoptr i32 %gep99 to i16**/
	if ((cur_state == LEGUP_F_main_BB_gsm_normexiti_76)) begin
		main_gsm_normexiti_329_reg <= main_gsm_normexiti_329;
		if (start == 1'b0 && ^(main_gsm_normexiti_329) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_normexiti_329_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_norm.exit.i*/
	/*   %gep_int100 = ptrtoint [9 x i16]* %P.i to i32*/
if (reset) begin main_gsm_normexiti_gep_int100 = 0; end
		main_gsm_normexiti_gep_int100 = 1'd0;
end
always @(posedge clk) begin
	/* main: %gsm_norm.exit.i*/
	/*   %gep_int100 = ptrtoint [9 x i16]* %P.i to i32*/
	if ((cur_state == LEGUP_F_main_BB_gsm_normexiti_76)) begin
		main_gsm_normexiti_gep_int100_reg <= main_gsm_normexiti_gep_int100;
		if (start == 1'b0 && ^(main_gsm_normexiti_gep_int100) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_normexiti_gep_int100_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_norm.exit.i*/
	/*   %gep101 = add i32 %gep_int100, 10*/
		main_gsm_normexiti_gep101 = main_signed_add_32_11;
end
always @(*) begin
/* main: %gsm_norm.exit.i*/
/*   %gep101 = add i32 %gep_int100, 10*/
	main_gsm_normexiti_gep101_reg = main_threadi_gep32_reg;
end
always @(*) begin
	/* main: %gsm_norm.exit.i*/
	/*   %330 = inttoptr i32 %gep101 to i16**/
		main_gsm_normexiti_330 = main_gsm_normexiti_gep101;
end
always @(posedge clk) begin
	/* main: %gsm_norm.exit.i*/
	/*   %330 = inttoptr i32 %gep101 to i16**/
	if ((cur_state == LEGUP_F_main_BB_gsm_normexiti_76)) begin
		main_gsm_normexiti_330_reg <= main_gsm_normexiti_330;
		if (start == 1'b0 && ^(main_gsm_normexiti_330) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_normexiti_330_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_norm.exit.i*/
	/*   %gep_int102 = ptrtoint [9 x i16]* %P.i to i32*/
if (reset) begin main_gsm_normexiti_gep_int102 = 0; end
		main_gsm_normexiti_gep_int102 = 1'd0;
end
always @(posedge clk) begin
	/* main: %gsm_norm.exit.i*/
	/*   %gep_int102 = ptrtoint [9 x i16]* %P.i to i32*/
	if ((cur_state == LEGUP_F_main_BB_gsm_normexiti_76)) begin
		main_gsm_normexiti_gep_int102_reg <= main_gsm_normexiti_gep_int102;
		if (start == 1'b0 && ^(main_gsm_normexiti_gep_int102) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_normexiti_gep_int102_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_norm.exit.i*/
	/*   %gep103 = add i32 %gep_int102, 12*/
		main_gsm_normexiti_gep103 = main_signed_add_32_12;
end
always @(*) begin
/* main: %gsm_norm.exit.i*/
/*   %gep103 = add i32 %gep_int102, 12*/
	main_gsm_normexiti_gep103_reg = main_threadi_128_reg;
end
always @(*) begin
	/* main: %gsm_norm.exit.i*/
	/*   %331 = inttoptr i32 %gep103 to i16**/
		main_gsm_normexiti_331 = main_gsm_normexiti_gep103;
end
always @(posedge clk) begin
	/* main: %gsm_norm.exit.i*/
	/*   %331 = inttoptr i32 %gep103 to i16**/
	if ((cur_state == LEGUP_F_main_BB_gsm_normexiti_76)) begin
		main_gsm_normexiti_331_reg <= main_gsm_normexiti_331;
		if (start == 1'b0 && ^(main_gsm_normexiti_331) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_normexiti_331_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_norm.exit.i*/
	/*   %gep_int104 = ptrtoint [9 x i16]* %P.i to i32*/
if (reset) begin main_gsm_normexiti_gep_int104 = 0; end
		main_gsm_normexiti_gep_int104 = 1'd0;
end
always @(posedge clk) begin
	/* main: %gsm_norm.exit.i*/
	/*   %gep_int104 = ptrtoint [9 x i16]* %P.i to i32*/
	if ((cur_state == LEGUP_F_main_BB_gsm_normexiti_76)) begin
		main_gsm_normexiti_gep_int104_reg <= main_gsm_normexiti_gep_int104;
		if (start == 1'b0 && ^(main_gsm_normexiti_gep_int104) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_normexiti_gep_int104_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_norm.exit.i*/
	/*   %gep105 = add i32 %gep_int104, 14*/
		main_gsm_normexiti_gep105 = main_signed_add_32_13;
end
always @(posedge clk) begin
	/* main: %gsm_norm.exit.i*/
	/*   %gep105 = add i32 %gep_int104, 14*/
	if ((cur_state == LEGUP_F_main_BB_gsm_normexiti_76)) begin
		main_gsm_normexiti_gep105_reg <= main_gsm_normexiti_gep105;
		if (start == 1'b0 && ^(main_gsm_normexiti_gep105) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_normexiti_gep105_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_norm.exit.i*/
	/*   %332 = inttoptr i32 %gep105 to i16**/
		main_gsm_normexiti_332 = main_gsm_normexiti_gep105;
end
always @(posedge clk) begin
	/* main: %gsm_norm.exit.i*/
	/*   %332 = inttoptr i32 %gep105 to i16**/
	if ((cur_state == LEGUP_F_main_BB_gsm_normexiti_76)) begin
		main_gsm_normexiti_332_reg <= main_gsm_normexiti_332;
		if (start == 1'b0 && ^(main_gsm_normexiti_332) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_normexiti_332_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_norm.exit.i*/
	/*   %gep_int106 = ptrtoint [9 x i16]* %P.i to i32*/
if (reset) begin main_gsm_normexiti_gep_int106 = 0; end
		main_gsm_normexiti_gep_int106 = 1'd0;
end
always @(posedge clk) begin
	/* main: %gsm_norm.exit.i*/
	/*   %gep_int106 = ptrtoint [9 x i16]* %P.i to i32*/
	if ((cur_state == LEGUP_F_main_BB_gsm_normexiti_76)) begin
		main_gsm_normexiti_gep_int106_reg <= main_gsm_normexiti_gep_int106;
		if (start == 1'b0 && ^(main_gsm_normexiti_gep_int106) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_normexiti_gep_int106_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_norm.exit.i*/
	/*   %gep107 = add i32 %gep_int106, 16*/
		main_gsm_normexiti_gep107 = main_signed_add_32_14;
end
always @(posedge clk) begin
	/* main: %gsm_norm.exit.i*/
	/*   %gep107 = add i32 %gep_int106, 16*/
	if ((cur_state == LEGUP_F_main_BB_gsm_normexiti_76)) begin
		main_gsm_normexiti_gep107_reg <= main_gsm_normexiti_gep107;
		if (start == 1'b0 && ^(main_gsm_normexiti_gep107) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_normexiti_gep107_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_norm.exit.i*/
	/*   %333 = inttoptr i32 %gep107 to i16**/
		main_gsm_normexiti_333 = main_gsm_normexiti_gep107;
end
always @(posedge clk) begin
	/* main: %gsm_norm.exit.i*/
	/*   %333 = inttoptr i32 %gep107 to i16**/
	if ((cur_state == LEGUP_F_main_BB_gsm_normexiti_76)) begin
		main_gsm_normexiti_333_reg <= main_gsm_normexiti_333;
		if (start == 1'b0 && ^(main_gsm_normexiti_333) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_normexiti_333_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %334*/
	/*   %335 = phi i16 [ %296, %gsm_norm.exit.i ], [ %.pre.i15, %._crit_edge43.i ]*/
	if (((cur_state == LEGUP_F_main_BB_gsm_normexiti_92) & (memory_controller_waitrequest == 1'd0))) begin
		main_334_335 = main_gsm_normexiti_296_reg;
	end
	/* main: %334*/
	/*   %335 = phi i16 [ %296, %gsm_norm.exit.i ], [ %.pre.i15, %._crit_edge43.i ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__crit_edge43i_166) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_334_335 = main__crit_edge43i_prei15;
	end
end
always @(posedge clk) begin
	/* main: %334*/
	/*   %335 = phi i16 [ %296, %gsm_norm.exit.i ], [ %.pre.i15, %._crit_edge43.i ]*/
	if (((cur_state == LEGUP_F_main_BB_gsm_normexiti_92) & (memory_controller_waitrequest == 1'd0))) begin
		main_334_335_reg <= main_334_335;
		if (start == 1'b0 && ^(main_334_335) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_334_335_reg"); $finish; end
	end
	/* main: %334*/
	/*   %335 = phi i16 [ %296, %gsm_norm.exit.i ], [ %.pre.i15, %._crit_edge43.i ]*/
	if (((cur_state == LEGUP_F_main_BB__crit_edge43i_166) & (memory_controller_waitrequest == 1'd0))) begin
		main_334_335_reg <= main_334_335;
		if (start == 1'b0 && ^(main_334_335) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_334_335_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %334*/
	/*   %indvars.iv.i = phi i32 [ 8, %gsm_norm.exit.i ], [ %indvars.iv.next.i, %._crit_edge43.i ]*/
	if (((cur_state == LEGUP_F_main_BB_gsm_normexiti_92) & (memory_controller_waitrequest == 1'd0))) begin
		main_334_indvarsivi = 32'd8;
	end
	/* main: %334*/
	/*   %indvars.iv.i = phi i32 [ 8, %gsm_norm.exit.i ], [ %indvars.iv.next.i, %._crit_edge43.i ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__crit_edge43i_166) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_334_indvarsivi = main__crit_edge43i_indvarsivnexti_reg;
	end
end
always @(posedge clk) begin
	/* main: %334*/
	/*   %indvars.iv.i = phi i32 [ 8, %gsm_norm.exit.i ], [ %indvars.iv.next.i, %._crit_edge43.i ]*/
	if (((cur_state == LEGUP_F_main_BB_gsm_normexiti_92) & (memory_controller_waitrequest == 1'd0))) begin
		main_334_indvarsivi_reg <= main_334_indvarsivi;
		if (start == 1'b0 && ^(main_334_indvarsivi) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_334_indvarsivi_reg"); $finish; end
	end
	/* main: %334*/
	/*   %indvars.iv.i = phi i32 [ 8, %gsm_norm.exit.i ], [ %indvars.iv.next.i, %._crit_edge43.i ]*/
	if (((cur_state == LEGUP_F_main_BB__crit_edge43i_166) & (memory_controller_waitrequest == 1'd0))) begin
		main_334_indvarsivi_reg <= main_334_indvarsivi;
		if (start == 1'b0 && ^(main_334_indvarsivi) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_334_indvarsivi_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %334*/
	/*   %n.029.i = phi i32 [ 1, %gsm_norm.exit.i ], [ %501, %._crit_edge43.i ]*/
	if (((cur_state == LEGUP_F_main_BB_gsm_normexiti_92) & (memory_controller_waitrequest == 1'd0))) begin
		main_334_n029i = 32'd1;
	end
	/* main: %334*/
	/*   %n.029.i = phi i32 [ 1, %gsm_norm.exit.i ], [ %501, %._crit_edge43.i ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__crit_edge43i_166) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_334_n029i = main__crit_edgei14_501_reg;
	end
end
always @(posedge clk) begin
	/* main: %334*/
	/*   %n.029.i = phi i32 [ 1, %gsm_norm.exit.i ], [ %501, %._crit_edge43.i ]*/
	if (((cur_state == LEGUP_F_main_BB_gsm_normexiti_92) & (memory_controller_waitrequest == 1'd0))) begin
		main_334_n029i_reg <= main_334_n029i;
		if (start == 1'b0 && ^(main_334_n029i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_334_n029i_reg"); $finish; end
	end
	/* main: %334*/
	/*   %n.029.i = phi i32 [ 1, %gsm_norm.exit.i ], [ %501, %._crit_edge43.i ]*/
	if (((cur_state == LEGUP_F_main_BB__crit_edge43i_166) & (memory_controller_waitrequest == 1'd0))) begin
		main_334_n029i_reg <= main_334_n029i;
		if (start == 1'b0 && ^(main_334_n029i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_334_n029i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %334*/
	/*   %.128.i = phi i16* [ %19, %gsm_norm.exit.i ], [ %503, %._crit_edge43.i ]*/
	if (((cur_state == LEGUP_F_main_BB_gsm_normexiti_92) & (memory_controller_waitrequest == 1'd0))) begin
		main_334_128i = main_18_19_reg;
	end
	/* main: %334*/
	/*   %.128.i = phi i16* [ %19, %gsm_norm.exit.i ], [ %503, %._crit_edge43.i ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__crit_edge43i_166) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_334_128i = main__crit_edge43i_503_reg;
	end
end
always @(posedge clk) begin
	/* main: %334*/
	/*   %.128.i = phi i16* [ %19, %gsm_norm.exit.i ], [ %503, %._crit_edge43.i ]*/
	if (((cur_state == LEGUP_F_main_BB_gsm_normexiti_92) & (memory_controller_waitrequest == 1'd0))) begin
		main_334_128i_reg <= main_334_128i;
		if (start == 1'b0 && ^(main_334_128i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_334_128i_reg"); $finish; end
	end
	/* main: %334*/
	/*   %.128.i = phi i16* [ %19, %gsm_norm.exit.i ], [ %503, %._crit_edge43.i ]*/
	if (((cur_state == LEGUP_F_main_BB__crit_edge43i_166) & (memory_controller_waitrequest == 1'd0))) begin
		main_334_128i_reg <= main_334_128i;
		if (start == 1'b0 && ^(main_334_128i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_334_128i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %334*/
	/*   %336 = icmp slt i16 %335, 0*/
		main_334_336 = ($signed(main_334_335_reg) < $signed(16'd0));
end
always @(posedge clk) begin
	/* main: %334*/
	/*   %336 = icmp slt i16 %335, 0*/
	if ((cur_state == LEGUP_F_main_BB__334_93)) begin
		main_334_336_reg <= main_334_336;
		if (start == 1'b0 && ^(main_334_336) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_334_336_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %337*/
	/*   %338 = icmp eq i16 %335, -32768*/
		main_337_338 = (main_334_335_reg == -16'd32768);
end
always @(posedge clk) begin
	/* main: %337*/
	/*   %338 = icmp eq i16 %335, -32768*/
	if ((cur_state == LEGUP_F_main_BB__337_94)) begin
		main_337_338_reg <= main_337_338;
		if (start == 1'b0 && ^(main_337_338) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_337_338_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %337*/
	/*   %339 = sub i16 0, %335*/
		main_337_339 = main_signed_subtract_16_0;
end
always @(*) begin
/* main: %337*/
/*   %339 = sub i16 0, %335*/
	main_337_339_reg = main_12_14_reg;
end
always @(*) begin
	/* main: %337*/
	/*   %..i.i8 = select i1 %338, i16 32767, i16 %339*/
		main_337_ii8 = (main_337_338 ? 16'd32767 : main_337_339);
end
always @(posedge clk) begin
	/* main: %337*/
	/*   %..i.i8 = select i1 %338, i16 32767, i16 %339*/
	if ((cur_state == LEGUP_F_main_BB__337_94)) begin
		main_337_ii8_reg <= main_337_ii8;
		if (start == 1'b0 && ^(main_337_ii8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_337_ii8_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_abs.exit.i9*/
	/*   %340 = phi i16 [ %..i.i8, %337 ], [ %335, %334 ]*/
	if ((((cur_state == LEGUP_F_main_BB__334_93) & (memory_controller_waitrequest == 1'd0)) & (main_334_336 == 1'd0))) begin
		main_gsm_absexiti9_340 = main_334_335_reg;
	end
	/* main: %gsm_abs.exit.i9*/
	/*   %340 = phi i16 [ %..i.i8, %337 ], [ %335, %334 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__337_94) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_gsm_absexiti9_340 = main_337_ii8;
	end
end
always @(posedge clk) begin
	/* main: %gsm_abs.exit.i9*/
	/*   %340 = phi i16 [ %..i.i8, %337 ], [ %335, %334 ]*/
	if ((((cur_state == LEGUP_F_main_BB__334_93) & (memory_controller_waitrequest == 1'd0)) & (main_334_336 == 1'd0))) begin
		main_gsm_absexiti9_340_reg <= main_gsm_absexiti9_340;
		if (start == 1'b0 && ^(main_gsm_absexiti9_340) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_absexiti9_340_reg"); $finish; end
	end
	/* main: %gsm_abs.exit.i9*/
	/*   %340 = phi i16 [ %..i.i8, %337 ], [ %335, %334 ]*/
	if (((cur_state == LEGUP_F_main_BB__337_94) & (memory_controller_waitrequest == 1'd0))) begin
		main_gsm_absexiti9_340_reg <= main_gsm_absexiti9_340;
		if (start == 1'b0 && ^(main_gsm_absexiti9_340) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_absexiti9_340_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_abs.exit.i9*/
	/*   %341 = load i16* %325, align 2, !tbaa !1*/
		main_gsm_absexiti9_341 = main_0_Pi_out_a;
end
always @(posedge clk) begin
	/* main: %gsm_abs.exit.i9*/
	/*   %341 = load i16* %325, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_gsm_absexiti9_96)) begin
		main_gsm_absexiti9_341_reg <= main_gsm_absexiti9_341;
		if (start == 1'b0 && ^(main_gsm_absexiti9_341) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_absexiti9_341_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_abs.exit.i9*/
	/*   %342 = icmp slt i16 %341, %340*/
		main_gsm_absexiti9_342 = ($signed(main_gsm_absexiti9_341) < $signed(main_gsm_absexiti9_340_reg));
end
always @(posedge clk) begin
	/* main: %gsm_abs.exit.i9*/
	/*   %342 = icmp slt i16 %341, %340*/
	if ((cur_state == LEGUP_F_main_BB_gsm_absexiti9_96)) begin
		main_gsm_absexiti9_342_reg <= main_gsm_absexiti9_342;
		if (start == 1'b0 && ^(main_gsm_absexiti9_342) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_absexiti9_342_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader14.i*/
	/*   %.128.i.lcssa = phi i16* [ %.128.i, %gsm_abs.exit.i9 ]*/
		main_preheader14i_128ilcssa = main_334_128i_reg;
end
always @(posedge clk) begin
	/* main: %.preheader14.i*/
	/*   %.128.i.lcssa = phi i16* [ %.128.i, %gsm_abs.exit.i9 ]*/
	if ((((cur_state == LEGUP_F_main_BB_gsm_absexiti9_96) & (memory_controller_waitrequest == 1'd0)) & (main_gsm_absexiti9_342 == 1'd1))) begin
		main_preheader14i_128ilcssa_reg <= main_preheader14i_128ilcssa;
		if (start == 1'b0 && ^(main_preheader14i_128ilcssa) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader14i_128ilcssa_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader14.i*/
	/*   %n.029.i.lcssa = phi i32 [ %n.029.i, %gsm_abs.exit.i9 ]*/
		main_preheader14i_n029ilcssa = main_334_n029i_reg;
end
always @(posedge clk) begin
	/* main: %.preheader14.i*/
	/*   %n.029.i.lcssa = phi i32 [ %n.029.i, %gsm_abs.exit.i9 ]*/
	if ((((cur_state == LEGUP_F_main_BB_gsm_absexiti9_96) & (memory_controller_waitrequest == 1'd0)) & (main_gsm_absexiti9_342 == 1'd1))) begin
		main_preheader14i_n029ilcssa_reg <= main_preheader14i_n029ilcssa;
		if (start == 1'b0 && ^(main_preheader14i_n029ilcssa) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader14i_n029ilcssa_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader14.i*/
	/*   %343 = icmp slt i32 %n.029.i.lcssa, 9*/
		main_preheader14i_343 = ($signed(main_preheader14i_n029ilcssa_reg) < $signed(32'd9));
end
always @(posedge clk) begin
	/* main: %.preheader14.i*/
	/*   %343 = icmp slt i32 %n.029.i.lcssa, 9*/
	if ((cur_state == LEGUP_F_main_BB_preheader14i_97)) begin
		main_preheader14i_343_reg <= main_preheader14i_343;
		if (start == 1'b0 && ^(main_preheader14i_343) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader14i_343_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i*/
	/*   %i.425.i = phi i32 [ %345, %.lr.ph.i ], [ %n.029.i.lcssa, %.preheader14.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_preheader14i_97) & (memory_controller_waitrequest == 1'd0)) & (main_preheader14i_343 == 1'd1))) begin
		main_lrphi_i425i = main_preheader14i_n029ilcssa_reg;
	end
	/* main: %.lr.ph.i*/
	/*   %i.425.i = phi i32 [ %345, %.lr.ph.i ], [ %n.029.i.lcssa, %.preheader14.i ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_lrphi_99) & (memory_controller_waitrequest == 1'd0)) & (main_lrphi_exitcondi10_reg == 1'd0))) */ begin
		main_lrphi_i425i = main_lrphi_345_reg;
	end
end
always @(posedge clk) begin
	/* main: %.lr.ph.i*/
	/*   %i.425.i = phi i32 [ %345, %.lr.ph.i ], [ %n.029.i.lcssa, %.preheader14.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_preheader14i_97) & (memory_controller_waitrequest == 1'd0)) & (main_preheader14i_343 == 1'd1))) begin
		main_lrphi_i425i_reg <= main_lrphi_i425i;
		if (start == 1'b0 && ^(main_lrphi_i425i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphi_i425i_reg"); $finish; end
	end
	/* main: %.lr.ph.i*/
	/*   %i.425.i = phi i32 [ %345, %.lr.ph.i ], [ %n.029.i.lcssa, %.preheader14.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_lrphi_99) & (memory_controller_waitrequest == 1'd0)) & (main_lrphi_exitcondi10_reg == 1'd0))) begin
		main_lrphi_i425i_reg <= main_lrphi_i425i;
		if (start == 1'b0 && ^(main_lrphi_i425i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphi_i425i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i*/
	/*   %.224.i = phi i16* [ %344, %.lr.ph.i ], [ %.128.i.lcssa, %.preheader14.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_preheader14i_97) & (memory_controller_waitrequest == 1'd0)) & (main_preheader14i_343 == 1'd1))) begin
		main_lrphi_224i = main_preheader14i_128ilcssa_reg;
	end
	/* main: %.lr.ph.i*/
	/*   %.224.i = phi i16* [ %344, %.lr.ph.i ], [ %.128.i.lcssa, %.preheader14.i ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_lrphi_99) & (memory_controller_waitrequest == 1'd0)) & (main_lrphi_exitcondi10_reg == 1'd0))) */ begin
		main_lrphi_224i = main_lrphi_344_reg;
	end
end
always @(posedge clk) begin
	/* main: %.lr.ph.i*/
	/*   %.224.i = phi i16* [ %344, %.lr.ph.i ], [ %.128.i.lcssa, %.preheader14.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_preheader14i_97) & (memory_controller_waitrequest == 1'd0)) & (main_preheader14i_343 == 1'd1))) begin
		main_lrphi_224i_reg <= main_lrphi_224i;
		if (start == 1'b0 && ^(main_lrphi_224i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphi_224i_reg"); $finish; end
	end
	/* main: %.lr.ph.i*/
	/*   %.224.i = phi i16* [ %344, %.lr.ph.i ], [ %.128.i.lcssa, %.preheader14.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_lrphi_99) & (memory_controller_waitrequest == 1'd0)) & (main_lrphi_exitcondi10_reg == 1'd0))) begin
		main_lrphi_224i_reg <= main_lrphi_224i;
		if (start == 1'b0 && ^(main_lrphi_224i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphi_224i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i*/
	/*   %gep_int108 = ptrtoint i16* %.224.i to i32*/
		main_lrphi_gep_int108 = main_lrphi_224i_reg;
end
always @(posedge clk) begin
	/* main: %.lr.ph.i*/
	/*   %gep_int108 = ptrtoint i16* %.224.i to i32*/
	if ((cur_state == LEGUP_F_main_BB_lrphi_98)) begin
		main_lrphi_gep_int108_reg <= main_lrphi_gep_int108;
		if (start == 1'b0 && ^(main_lrphi_gep_int108) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphi_gep_int108_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i*/
	/*   %gep109 = add i32 %gep_int108, 2*/
		main_lrphi_gep109 = main_signed_add_32_0;
end
always @(*) begin
/* main: %.lr.ph.i*/
/*   %gep109 = add i32 %gep_int108, 2*/
	main_lrphi_gep109_reg = main_1_gep_reg;
end
always @(*) begin
	/* main: %.lr.ph.i*/
	/*   %344 = inttoptr i32 %gep109 to i16**/
		main_lrphi_344 = main_lrphi_gep109;
end
always @(posedge clk) begin
	/* main: %.lr.ph.i*/
	/*   %344 = inttoptr i32 %gep109 to i16**/
	if ((cur_state == LEGUP_F_main_BB_lrphi_98)) begin
		main_lrphi_344_reg <= main_lrphi_344;
		if (start == 1'b0 && ^(main_lrphi_344) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphi_344_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i*/
	/*   %345 = add nsw i32 %i.425.i, 1*/
		main_lrphi_345 = main_signed_add_32_1;
end
always @(*) begin
/* main: %.lr.ph.i*/
/*   %345 = add nsw i32 %i.425.i, 1*/
	main_lrphi_345_reg = main_1_gep3_reg;
end
always @(*) begin
	/* main: %.lr.ph.i*/
	/*   %exitcond.i10 = icmp eq i32 %345, 9*/
		main_lrphi_exitcondi10 = (main_lrphi_345 == 32'd9);
end
always @(posedge clk) begin
	/* main: %.lr.ph.i*/
	/*   %exitcond.i10 = icmp eq i32 %345, 9*/
	if ((cur_state == LEGUP_F_main_BB_lrphi_98)) begin
		main_lrphi_exitcondi10_reg <= main_lrphi_exitcondi10;
		if (start == 1'b0 && ^(main_lrphi_exitcondi10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphi_exitcondi10_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %346*/
	/*   %347 = sext i16 %341 to i32*/
		main_346_347 = $signed(main_gsm_absexiti9_341_reg);
end
always @(posedge clk) begin
	/* main: %346*/
	/*   %347 = sext i16 %341 to i32*/
	if ((cur_state == LEGUP_F_main_BB__346_100)) begin
		main_346_347_reg <= main_346_347;
		if (start == 1'b0 && ^(main_346_347) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_346_347_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %346*/
	/*   %348 = icmp eq i16 %340, 0*/
		main_346_348 = (main_gsm_absexiti9_340_reg == 16'd0);
end
always @(posedge clk) begin
	/* main: %346*/
	/*   %348 = icmp eq i16 %340, 0*/
	if ((cur_state == LEGUP_F_main_BB__346_100)) begin
		main_346_348_reg <= main_346_348;
		if (start == 1'b0 && ^(main_346_348) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_346_348_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i.i*/
	/*   %349 = sext i16 %340 to i32*/
		main_preheaderii_349 = $signed(main_gsm_absexiti9_340_reg);
end
always @(posedge clk) begin
	/* main: %.preheader.i.i*/
	/*   %349 = sext i16 %340 to i32*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii_101)) begin
		main_preheaderii_349_reg <= main_preheaderii_349;
		if (start == 1'b0 && ^(main_preheaderii_349) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderii_349_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i.i*/
	/*   %350 = shl nsw i32 %349, 1*/
		main_preheaderii_350 = (main_preheaderii_349 <<< (32'd1 % 32));
end
always @(posedge clk) begin
	/* main: %.preheader.i.i*/
	/*   %350 = shl nsw i32 %349, 1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii_101)) begin
		main_preheaderii_350_reg <= main_preheaderii_350;
		if (start == 1'b0 && ^(main_preheaderii_350) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderii_350_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i.i*/
	/*   %351 = icmp slt i32 %350, %347*/
		main_preheaderii_351 = ($signed(main_preheaderii_350) < $signed(main_346_347_reg));
end
always @(posedge clk) begin
	/* main: %.preheader.i.i*/
	/*   %351 = icmp slt i32 %350, %347*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii_101)) begin
		main_preheaderii_351_reg <= main_preheaderii_351;
		if (start == 1'b0 && ^(main_preheaderii_351) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderii_351_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i.i*/
	/*   %352 = select i1 %351, i32 0, i32 %347*/
		main_preheaderii_352 = (main_preheaderii_351 ? 32'd0 : main_346_347_reg);
end
always @(posedge clk) begin
	/* main: %.preheader.i.i*/
	/*   %352 = select i1 %351, i32 0, i32 %347*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii_101)) begin
		main_preheaderii_352_reg <= main_preheaderii_352;
		if (start == 1'b0 && ^(main_preheaderii_352) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderii_352_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i.i*/
	/*   %..i1.i = sub nsw i32 %350, %352*/
		main_preheaderii_i1i = main_signed_subtract_32_0;
end
always @(*) begin
/* main: %.preheader.i.i*/
/*   %..i1.i = sub nsw i32 %350, %352*/
	main_preheaderii_i1i_reg = main_62_63_reg;
end
always @(*) begin
	/* main: %.preheader.i.i*/
	/*   %.3.i.i = select i1 %351, i16 0, i16 2*/
		main_preheaderii_3ii = (main_preheaderii_351 ? 16'd0 : 16'd2);
end
always @(posedge clk) begin
	/* main: %.preheader.i.i*/
	/*   %.3.i.i = select i1 %351, i16 0, i16 2*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii_101)) begin
		main_preheaderii_3ii_reg <= main_preheaderii_3ii;
		if (start == 1'b0 && ^(main_preheaderii_3ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderii_3ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i.i*/
	/*   %353 = shl nsw i32 %..i1.i, 1*/
		main_preheaderii_353 = (main_preheaderii_i1i <<< (32'd1 % 32));
end
always @(posedge clk) begin
	/* main: %.preheader.i.i*/
	/*   %353 = shl nsw i32 %..i1.i, 1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii_101)) begin
		main_preheaderii_353_reg <= main_preheaderii_353;
		if (start == 1'b0 && ^(main_preheaderii_353) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderii_353_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i.i*/
	/*   %354 = icmp slt i32 %353, %347*/
		main_preheaderii_354 = ($signed(main_preheaderii_353) < $signed(main_346_347_reg));
end
always @(posedge clk) begin
	/* main: %.preheader.i.i*/
	/*   %354 = icmp slt i32 %353, %347*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii_101)) begin
		main_preheaderii_354_reg <= main_preheaderii_354;
		if (start == 1'b0 && ^(main_preheaderii_354) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderii_354_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %355*/
	/*   %356 = sub nsw i32 %353, %347*/
		main_355_356 = main_signed_subtract_32_0;
end
always @(*) begin
/* main: %355*/
/*   %356 = sub nsw i32 %353, %347*/
	main_355_356_reg = main_62_63_reg;
end
always @(*) begin
	/* main: %355*/
	/*   %357 = or i16 %.3.i.i, 1*/
		main_355_357 = (main_preheaderii_3ii_reg | 16'd1);
end
always @(posedge clk) begin
	/* main: %355*/
	/*   %357 = or i16 %.3.i.i, 1*/
	if ((cur_state == LEGUP_F_main_BB__355_102)) begin
		main_355_357_reg <= main_355_357;
		if (start == 1'b0 && ^(main_355_357) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_355_357_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.backedge.1.i.i*/
	/*   %L_num.0.be.1.i.i = phi i32 [ %356, %355 ], [ %353, %.preheader.i.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_preheaderii_101) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderii_354 == 1'd1))) begin
		main_backedge1ii_L_num0be1ii = main_preheaderii_353;
	end
	/* main: %.backedge.1.i.i*/
	/*   %L_num.0.be.1.i.i = phi i32 [ %356, %355 ], [ %353, %.preheader.i.i ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__355_102) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_backedge1ii_L_num0be1ii = main_355_356;
	end
end
always @(posedge clk) begin
	/* main: %.backedge.1.i.i*/
	/*   %L_num.0.be.1.i.i = phi i32 [ %356, %355 ], [ %353, %.preheader.i.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_preheaderii_101) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderii_354 == 1'd1))) begin
		main_backedge1ii_L_num0be1ii_reg <= main_backedge1ii_L_num0be1ii;
		if (start == 1'b0 && ^(main_backedge1ii_L_num0be1ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_backedge1ii_L_num0be1ii_reg"); $finish; end
	end
	/* main: %.backedge.1.i.i*/
	/*   %L_num.0.be.1.i.i = phi i32 [ %356, %355 ], [ %353, %.preheader.i.i ]*/
	if (((cur_state == LEGUP_F_main_BB__355_102) & (memory_controller_waitrequest == 1'd0))) begin
		main_backedge1ii_L_num0be1ii_reg <= main_backedge1ii_L_num0be1ii;
		if (start == 1'b0 && ^(main_backedge1ii_L_num0be1ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_backedge1ii_L_num0be1ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.backedge.1.i.i*/
	/*   %div.0.be.1.i.i = phi i16 [ %357, %355 ], [ %.3.i.i, %.preheader.i.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_preheaderii_101) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderii_354 == 1'd1))) begin
		main_backedge1ii_div0be1ii = main_preheaderii_3ii;
	end
	/* main: %.backedge.1.i.i*/
	/*   %div.0.be.1.i.i = phi i16 [ %357, %355 ], [ %.3.i.i, %.preheader.i.i ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__355_102) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_backedge1ii_div0be1ii = main_355_357;
	end
end
always @(posedge clk) begin
	/* main: %.backedge.1.i.i*/
	/*   %div.0.be.1.i.i = phi i16 [ %357, %355 ], [ %.3.i.i, %.preheader.i.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_preheaderii_101) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderii_354 == 1'd1))) begin
		main_backedge1ii_div0be1ii_reg <= main_backedge1ii_div0be1ii;
		if (start == 1'b0 && ^(main_backedge1ii_div0be1ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_backedge1ii_div0be1ii_reg"); $finish; end
	end
	/* main: %.backedge.1.i.i*/
	/*   %div.0.be.1.i.i = phi i16 [ %357, %355 ], [ %.3.i.i, %.preheader.i.i ]*/
	if (((cur_state == LEGUP_F_main_BB__355_102) & (memory_controller_waitrequest == 1'd0))) begin
		main_backedge1ii_div0be1ii_reg <= main_backedge1ii_div0be1ii;
		if (start == 1'b0 && ^(main_backedge1ii_div0be1ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_backedge1ii_div0be1ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.backedge.1.i.i*/
	/*   %358 = shl nsw i16 %div.0.be.1.i.i, 1*/
		main_backedge1ii_358 = (main_backedge1ii_div0be1ii_reg <<< (16'd1 % 16'd16));
end
always @(posedge clk) begin
	/* main: %.backedge.1.i.i*/
	/*   %358 = shl nsw i16 %div.0.be.1.i.i, 1*/
	if ((cur_state == LEGUP_F_main_BB_backedge1ii_103)) begin
		main_backedge1ii_358_reg <= main_backedge1ii_358;
		if (start == 1'b0 && ^(main_backedge1ii_358) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_backedge1ii_358_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.backedge.1.i.i*/
	/*   %359 = shl nsw i32 %L_num.0.be.1.i.i, 1*/
		main_backedge1ii_359 = (main_backedge1ii_L_num0be1ii_reg <<< (32'd1 % 32));
end
always @(posedge clk) begin
	/* main: %.backedge.1.i.i*/
	/*   %359 = shl nsw i32 %L_num.0.be.1.i.i, 1*/
	if ((cur_state == LEGUP_F_main_BB_backedge1ii_103)) begin
		main_backedge1ii_359_reg <= main_backedge1ii_359;
		if (start == 1'b0 && ^(main_backedge1ii_359) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_backedge1ii_359_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.backedge.1.i.i*/
	/*   %360 = icmp slt i32 %359, %347*/
		main_backedge1ii_360 = ($signed(main_backedge1ii_359) < $signed(main_346_347_reg));
end
always @(posedge clk) begin
	/* main: %.backedge.1.i.i*/
	/*   %360 = icmp slt i32 %359, %347*/
	if ((cur_state == LEGUP_F_main_BB_backedge1ii_103)) begin
		main_backedge1ii_360_reg <= main_backedge1ii_360;
		if (start == 1'b0 && ^(main_backedge1ii_360) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_backedge1ii_360_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %361*/
	/*   %362 = sub nsw i32 %359, %347*/
		main_361_362 = main_signed_subtract_32_0;
end
always @(*) begin
/* main: %361*/
/*   %362 = sub nsw i32 %359, %347*/
	main_361_362_reg = main_62_63_reg;
end
always @(*) begin
	/* main: %361*/
	/*   %363 = or i16 %358, 1*/
		main_361_363 = (main_backedge1ii_358_reg | 16'd1);
end
always @(posedge clk) begin
	/* main: %361*/
	/*   %363 = or i16 %358, 1*/
	if ((cur_state == LEGUP_F_main_BB__361_104)) begin
		main_361_363_reg <= main_361_363;
		if (start == 1'b0 && ^(main_361_363) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_361_363_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.backedge.2.i.i*/
	/*   %L_num.0.be.2.i.i = phi i32 [ %362, %361 ], [ %359, %.backedge.1.i.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_backedge1ii_103) & (memory_controller_waitrequest == 1'd0)) & (main_backedge1ii_360 == 1'd1))) begin
		main_backedge2ii_L_num0be2ii = main_backedge1ii_359;
	end
	/* main: %.backedge.2.i.i*/
	/*   %L_num.0.be.2.i.i = phi i32 [ %362, %361 ], [ %359, %.backedge.1.i.i ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__361_104) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_backedge2ii_L_num0be2ii = main_361_362;
	end
end
always @(posedge clk) begin
	/* main: %.backedge.2.i.i*/
	/*   %L_num.0.be.2.i.i = phi i32 [ %362, %361 ], [ %359, %.backedge.1.i.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_backedge1ii_103) & (memory_controller_waitrequest == 1'd0)) & (main_backedge1ii_360 == 1'd1))) begin
		main_backedge2ii_L_num0be2ii_reg <= main_backedge2ii_L_num0be2ii;
		if (start == 1'b0 && ^(main_backedge2ii_L_num0be2ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_backedge2ii_L_num0be2ii_reg"); $finish; end
	end
	/* main: %.backedge.2.i.i*/
	/*   %L_num.0.be.2.i.i = phi i32 [ %362, %361 ], [ %359, %.backedge.1.i.i ]*/
	if (((cur_state == LEGUP_F_main_BB__361_104) & (memory_controller_waitrequest == 1'd0))) begin
		main_backedge2ii_L_num0be2ii_reg <= main_backedge2ii_L_num0be2ii;
		if (start == 1'b0 && ^(main_backedge2ii_L_num0be2ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_backedge2ii_L_num0be2ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.backedge.2.i.i*/
	/*   %div.0.be.2.i.i = phi i16 [ %363, %361 ], [ %358, %.backedge.1.i.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_backedge1ii_103) & (memory_controller_waitrequest == 1'd0)) & (main_backedge1ii_360 == 1'd1))) begin
		main_backedge2ii_div0be2ii = main_backedge1ii_358;
	end
	/* main: %.backedge.2.i.i*/
	/*   %div.0.be.2.i.i = phi i16 [ %363, %361 ], [ %358, %.backedge.1.i.i ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__361_104) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_backedge2ii_div0be2ii = main_361_363;
	end
end
always @(posedge clk) begin
	/* main: %.backedge.2.i.i*/
	/*   %div.0.be.2.i.i = phi i16 [ %363, %361 ], [ %358, %.backedge.1.i.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_backedge1ii_103) & (memory_controller_waitrequest == 1'd0)) & (main_backedge1ii_360 == 1'd1))) begin
		main_backedge2ii_div0be2ii_reg <= main_backedge2ii_div0be2ii;
		if (start == 1'b0 && ^(main_backedge2ii_div0be2ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_backedge2ii_div0be2ii_reg"); $finish; end
	end
	/* main: %.backedge.2.i.i*/
	/*   %div.0.be.2.i.i = phi i16 [ %363, %361 ], [ %358, %.backedge.1.i.i ]*/
	if (((cur_state == LEGUP_F_main_BB__361_104) & (memory_controller_waitrequest == 1'd0))) begin
		main_backedge2ii_div0be2ii_reg <= main_backedge2ii_div0be2ii;
		if (start == 1'b0 && ^(main_backedge2ii_div0be2ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_backedge2ii_div0be2ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.backedge.2.i.i*/
	/*   %364 = shl nsw i16 %div.0.be.2.i.i, 1*/
		main_backedge2ii_364 = (main_backedge2ii_div0be2ii_reg <<< (16'd1 % 16'd16));
end
always @(posedge clk) begin
	/* main: %.backedge.2.i.i*/
	/*   %364 = shl nsw i16 %div.0.be.2.i.i, 1*/
	if ((cur_state == LEGUP_F_main_BB_backedge2ii_105)) begin
		main_backedge2ii_364_reg <= main_backedge2ii_364;
		if (start == 1'b0 && ^(main_backedge2ii_364) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_backedge2ii_364_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.backedge.2.i.i*/
	/*   %365 = shl i32 %L_num.0.be.2.i.i, 1*/
		main_backedge2ii_365 = (main_backedge2ii_L_num0be2ii_reg <<< (32'd1 % 32));
end
always @(posedge clk) begin
	/* main: %.backedge.2.i.i*/
	/*   %365 = shl i32 %L_num.0.be.2.i.i, 1*/
	if ((cur_state == LEGUP_F_main_BB_backedge2ii_105)) begin
		main_backedge2ii_365_reg <= main_backedge2ii_365;
		if (start == 1'b0 && ^(main_backedge2ii_365) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_backedge2ii_365_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.backedge.2.i.i*/
	/*   %366 = icmp slt i32 %365, %347*/
		main_backedge2ii_366 = ($signed(main_backedge2ii_365) < $signed(main_346_347_reg));
end
always @(posedge clk) begin
	/* main: %.backedge.2.i.i*/
	/*   %366 = icmp slt i32 %365, %347*/
	if ((cur_state == LEGUP_F_main_BB_backedge2ii_105)) begin
		main_backedge2ii_366_reg <= main_backedge2ii_366;
		if (start == 1'b0 && ^(main_backedge2ii_366) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_backedge2ii_366_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %367*/
	/*   %368 = sub nsw i32 %365, %347*/
		main_367_368 = main_signed_subtract_32_0;
end
always @(*) begin
/* main: %367*/
/*   %368 = sub nsw i32 %365, %347*/
	main_367_368_reg = main_62_63_reg;
end
always @(*) begin
	/* main: %367*/
	/*   %369 = or i16 %364, 1*/
		main_367_369 = (main_backedge2ii_364_reg | 16'd1);
end
always @(posedge clk) begin
	/* main: %367*/
	/*   %369 = or i16 %364, 1*/
	if ((cur_state == LEGUP_F_main_BB__367_106)) begin
		main_367_369_reg <= main_367_369;
		if (start == 1'b0 && ^(main_367_369) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_367_369_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.backedge.3.i.i*/
	/*   %L_num.0.be.3.i.i = phi i32 [ %368, %367 ], [ %365, %.backedge.2.i.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_backedge2ii_105) & (memory_controller_waitrequest == 1'd0)) & (main_backedge2ii_366 == 1'd1))) begin
		main_backedge3ii_L_num0be3ii = main_backedge2ii_365;
	end
	/* main: %.backedge.3.i.i*/
	/*   %L_num.0.be.3.i.i = phi i32 [ %368, %367 ], [ %365, %.backedge.2.i.i ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__367_106) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_backedge3ii_L_num0be3ii = main_367_368;
	end
end
always @(posedge clk) begin
	/* main: %.backedge.3.i.i*/
	/*   %L_num.0.be.3.i.i = phi i32 [ %368, %367 ], [ %365, %.backedge.2.i.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_backedge2ii_105) & (memory_controller_waitrequest == 1'd0)) & (main_backedge2ii_366 == 1'd1))) begin
		main_backedge3ii_L_num0be3ii_reg <= main_backedge3ii_L_num0be3ii;
		if (start == 1'b0 && ^(main_backedge3ii_L_num0be3ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_backedge3ii_L_num0be3ii_reg"); $finish; end
	end
	/* main: %.backedge.3.i.i*/
	/*   %L_num.0.be.3.i.i = phi i32 [ %368, %367 ], [ %365, %.backedge.2.i.i ]*/
	if (((cur_state == LEGUP_F_main_BB__367_106) & (memory_controller_waitrequest == 1'd0))) begin
		main_backedge3ii_L_num0be3ii_reg <= main_backedge3ii_L_num0be3ii;
		if (start == 1'b0 && ^(main_backedge3ii_L_num0be3ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_backedge3ii_L_num0be3ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.backedge.3.i.i*/
	/*   %div.0.be.3.i.i = phi i16 [ %369, %367 ], [ %364, %.backedge.2.i.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_backedge2ii_105) & (memory_controller_waitrequest == 1'd0)) & (main_backedge2ii_366 == 1'd1))) begin
		main_backedge3ii_div0be3ii = main_backedge2ii_364;
	end
	/* main: %.backedge.3.i.i*/
	/*   %div.0.be.3.i.i = phi i16 [ %369, %367 ], [ %364, %.backedge.2.i.i ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__367_106) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_backedge3ii_div0be3ii = main_367_369;
	end
end
always @(posedge clk) begin
	/* main: %.backedge.3.i.i*/
	/*   %div.0.be.3.i.i = phi i16 [ %369, %367 ], [ %364, %.backedge.2.i.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_backedge2ii_105) & (memory_controller_waitrequest == 1'd0)) & (main_backedge2ii_366 == 1'd1))) begin
		main_backedge3ii_div0be3ii_reg <= main_backedge3ii_div0be3ii;
		if (start == 1'b0 && ^(main_backedge3ii_div0be3ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_backedge3ii_div0be3ii_reg"); $finish; end
	end
	/* main: %.backedge.3.i.i*/
	/*   %div.0.be.3.i.i = phi i16 [ %369, %367 ], [ %364, %.backedge.2.i.i ]*/
	if (((cur_state == LEGUP_F_main_BB__367_106) & (memory_controller_waitrequest == 1'd0))) begin
		main_backedge3ii_div0be3ii_reg <= main_backedge3ii_div0be3ii;
		if (start == 1'b0 && ^(main_backedge3ii_div0be3ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_backedge3ii_div0be3ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.backedge.3.i.i*/
	/*   %370 = shl i16 %div.0.be.3.i.i, 1*/
		main_backedge3ii_370 = (main_backedge3ii_div0be3ii_reg <<< (16'd1 % 16'd16));
end
always @(posedge clk) begin
	/* main: %.backedge.3.i.i*/
	/*   %370 = shl i16 %div.0.be.3.i.i, 1*/
	if ((cur_state == LEGUP_F_main_BB_backedge3ii_107)) begin
		main_backedge3ii_370_reg <= main_backedge3ii_370;
		if (start == 1'b0 && ^(main_backedge3ii_370) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_backedge3ii_370_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.backedge.3.i.i*/
	/*   %371 = shl i32 %L_num.0.be.3.i.i, 1*/
		main_backedge3ii_371 = (main_backedge3ii_L_num0be3ii_reg <<< (32'd1 % 32));
end
always @(posedge clk) begin
	/* main: %.backedge.3.i.i*/
	/*   %371 = shl i32 %L_num.0.be.3.i.i, 1*/
	if ((cur_state == LEGUP_F_main_BB_backedge3ii_107)) begin
		main_backedge3ii_371_reg <= main_backedge3ii_371;
		if (start == 1'b0 && ^(main_backedge3ii_371) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_backedge3ii_371_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.backedge.3.i.i*/
	/*   %372 = icmp slt i32 %371, %347*/
		main_backedge3ii_372 = ($signed(main_backedge3ii_371) < $signed(main_346_347_reg));
end
always @(posedge clk) begin
	/* main: %.backedge.3.i.i*/
	/*   %372 = icmp slt i32 %371, %347*/
	if ((cur_state == LEGUP_F_main_BB_backedge3ii_107)) begin
		main_backedge3ii_372_reg <= main_backedge3ii_372;
		if (start == 1'b0 && ^(main_backedge3ii_372) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_backedge3ii_372_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %373*/
	/*   %374 = sub nsw i32 %371, %347*/
		main_373_374 = main_signed_subtract_32_0;
end
always @(*) begin
/* main: %373*/
/*   %374 = sub nsw i32 %371, %347*/
	main_373_374_reg = main_62_63_reg;
end
always @(*) begin
	/* main: %373*/
	/*   %375 = or i16 %370, 1*/
		main_373_375 = (main_backedge3ii_370_reg | 16'd1);
end
always @(posedge clk) begin
	/* main: %373*/
	/*   %375 = or i16 %370, 1*/
	if ((cur_state == LEGUP_F_main_BB__373_108)) begin
		main_373_375_reg <= main_373_375;
		if (start == 1'b0 && ^(main_373_375) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_373_375_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.backedge.4.i.i*/
	/*   %L_num.0.be.4.i.i = phi i32 [ %374, %373 ], [ %371, %.backedge.3.i.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_backedge3ii_107) & (memory_controller_waitrequest == 1'd0)) & (main_backedge3ii_372 == 1'd1))) begin
		main_backedge4ii_L_num0be4ii = main_backedge3ii_371;
	end
	/* main: %.backedge.4.i.i*/
	/*   %L_num.0.be.4.i.i = phi i32 [ %374, %373 ], [ %371, %.backedge.3.i.i ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__373_108) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_backedge4ii_L_num0be4ii = main_373_374;
	end
end
always @(posedge clk) begin
	/* main: %.backedge.4.i.i*/
	/*   %L_num.0.be.4.i.i = phi i32 [ %374, %373 ], [ %371, %.backedge.3.i.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_backedge3ii_107) & (memory_controller_waitrequest == 1'd0)) & (main_backedge3ii_372 == 1'd1))) begin
		main_backedge4ii_L_num0be4ii_reg <= main_backedge4ii_L_num0be4ii;
		if (start == 1'b0 && ^(main_backedge4ii_L_num0be4ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_backedge4ii_L_num0be4ii_reg"); $finish; end
	end
	/* main: %.backedge.4.i.i*/
	/*   %L_num.0.be.4.i.i = phi i32 [ %374, %373 ], [ %371, %.backedge.3.i.i ]*/
	if (((cur_state == LEGUP_F_main_BB__373_108) & (memory_controller_waitrequest == 1'd0))) begin
		main_backedge4ii_L_num0be4ii_reg <= main_backedge4ii_L_num0be4ii;
		if (start == 1'b0 && ^(main_backedge4ii_L_num0be4ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_backedge4ii_L_num0be4ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.backedge.4.i.i*/
	/*   %div.0.be.4.i.i = phi i16 [ %375, %373 ], [ %370, %.backedge.3.i.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_backedge3ii_107) & (memory_controller_waitrequest == 1'd0)) & (main_backedge3ii_372 == 1'd1))) begin
		main_backedge4ii_div0be4ii = main_backedge3ii_370;
	end
	/* main: %.backedge.4.i.i*/
	/*   %div.0.be.4.i.i = phi i16 [ %375, %373 ], [ %370, %.backedge.3.i.i ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__373_108) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_backedge4ii_div0be4ii = main_373_375;
	end
end
always @(posedge clk) begin
	/* main: %.backedge.4.i.i*/
	/*   %div.0.be.4.i.i = phi i16 [ %375, %373 ], [ %370, %.backedge.3.i.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_backedge3ii_107) & (memory_controller_waitrequest == 1'd0)) & (main_backedge3ii_372 == 1'd1))) begin
		main_backedge4ii_div0be4ii_reg <= main_backedge4ii_div0be4ii;
		if (start == 1'b0 && ^(main_backedge4ii_div0be4ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_backedge4ii_div0be4ii_reg"); $finish; end
	end
	/* main: %.backedge.4.i.i*/
	/*   %div.0.be.4.i.i = phi i16 [ %375, %373 ], [ %370, %.backedge.3.i.i ]*/
	if (((cur_state == LEGUP_F_main_BB__373_108) & (memory_controller_waitrequest == 1'd0))) begin
		main_backedge4ii_div0be4ii_reg <= main_backedge4ii_div0be4ii;
		if (start == 1'b0 && ^(main_backedge4ii_div0be4ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_backedge4ii_div0be4ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.backedge.4.i.i*/
	/*   %376 = shl i16 %div.0.be.4.i.i, 1*/
		main_backedge4ii_376 = (main_backedge4ii_div0be4ii_reg <<< (16'd1 % 16'd16));
end
always @(posedge clk) begin
	/* main: %.backedge.4.i.i*/
	/*   %376 = shl i16 %div.0.be.4.i.i, 1*/
	if ((cur_state == LEGUP_F_main_BB_backedge4ii_109)) begin
		main_backedge4ii_376_reg <= main_backedge4ii_376;
		if (start == 1'b0 && ^(main_backedge4ii_376) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_backedge4ii_376_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.backedge.4.i.i*/
	/*   %377 = shl i32 %L_num.0.be.4.i.i, 1*/
		main_backedge4ii_377 = (main_backedge4ii_L_num0be4ii_reg <<< (32'd1 % 32));
end
always @(posedge clk) begin
	/* main: %.backedge.4.i.i*/
	/*   %377 = shl i32 %L_num.0.be.4.i.i, 1*/
	if ((cur_state == LEGUP_F_main_BB_backedge4ii_109)) begin
		main_backedge4ii_377_reg <= main_backedge4ii_377;
		if (start == 1'b0 && ^(main_backedge4ii_377) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_backedge4ii_377_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.backedge.4.i.i*/
	/*   %378 = icmp slt i32 %377, %347*/
		main_backedge4ii_378 = ($signed(main_backedge4ii_377) < $signed(main_346_347_reg));
end
always @(posedge clk) begin
	/* main: %.backedge.4.i.i*/
	/*   %378 = icmp slt i32 %377, %347*/
	if ((cur_state == LEGUP_F_main_BB_backedge4ii_109)) begin
		main_backedge4ii_378_reg <= main_backedge4ii_378;
		if (start == 1'b0 && ^(main_backedge4ii_378) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_backedge4ii_378_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %379*/
	/*   %380 = sub nsw i32 %377, %347*/
		main_379_380 = main_signed_subtract_32_0;
end
always @(*) begin
/* main: %379*/
/*   %380 = sub nsw i32 %377, %347*/
	main_379_380_reg = main_62_63_reg;
end
always @(*) begin
	/* main: %379*/
	/*   %381 = or i16 %376, 1*/
		main_379_381 = (main_backedge4ii_376_reg | 16'd1);
end
always @(posedge clk) begin
	/* main: %379*/
	/*   %381 = or i16 %376, 1*/
	if ((cur_state == LEGUP_F_main_BB__379_110)) begin
		main_379_381_reg <= main_379_381;
		if (start == 1'b0 && ^(main_379_381) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_379_381_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.backedge.5.i.i*/
	/*   %L_num.0.be.5.i.i = phi i32 [ %380, %379 ], [ %377, %.backedge.4.i.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_backedge4ii_109) & (memory_controller_waitrequest == 1'd0)) & (main_backedge4ii_378 == 1'd1))) begin
		main_backedge5ii_L_num0be5ii = main_backedge4ii_377;
	end
	/* main: %.backedge.5.i.i*/
	/*   %L_num.0.be.5.i.i = phi i32 [ %380, %379 ], [ %377, %.backedge.4.i.i ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__379_110) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_backedge5ii_L_num0be5ii = main_379_380;
	end
end
always @(posedge clk) begin
	/* main: %.backedge.5.i.i*/
	/*   %L_num.0.be.5.i.i = phi i32 [ %380, %379 ], [ %377, %.backedge.4.i.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_backedge4ii_109) & (memory_controller_waitrequest == 1'd0)) & (main_backedge4ii_378 == 1'd1))) begin
		main_backedge5ii_L_num0be5ii_reg <= main_backedge5ii_L_num0be5ii;
		if (start == 1'b0 && ^(main_backedge5ii_L_num0be5ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_backedge5ii_L_num0be5ii_reg"); $finish; end
	end
	/* main: %.backedge.5.i.i*/
	/*   %L_num.0.be.5.i.i = phi i32 [ %380, %379 ], [ %377, %.backedge.4.i.i ]*/
	if (((cur_state == LEGUP_F_main_BB__379_110) & (memory_controller_waitrequest == 1'd0))) begin
		main_backedge5ii_L_num0be5ii_reg <= main_backedge5ii_L_num0be5ii;
		if (start == 1'b0 && ^(main_backedge5ii_L_num0be5ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_backedge5ii_L_num0be5ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.backedge.5.i.i*/
	/*   %div.0.be.5.i.i = phi i16 [ %381, %379 ], [ %376, %.backedge.4.i.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_backedge4ii_109) & (memory_controller_waitrequest == 1'd0)) & (main_backedge4ii_378 == 1'd1))) begin
		main_backedge5ii_div0be5ii = main_backedge4ii_376;
	end
	/* main: %.backedge.5.i.i*/
	/*   %div.0.be.5.i.i = phi i16 [ %381, %379 ], [ %376, %.backedge.4.i.i ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__379_110) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_backedge5ii_div0be5ii = main_379_381;
	end
end
always @(posedge clk) begin
	/* main: %.backedge.5.i.i*/
	/*   %div.0.be.5.i.i = phi i16 [ %381, %379 ], [ %376, %.backedge.4.i.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_backedge4ii_109) & (memory_controller_waitrequest == 1'd0)) & (main_backedge4ii_378 == 1'd1))) begin
		main_backedge5ii_div0be5ii_reg <= main_backedge5ii_div0be5ii;
		if (start == 1'b0 && ^(main_backedge5ii_div0be5ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_backedge5ii_div0be5ii_reg"); $finish; end
	end
	/* main: %.backedge.5.i.i*/
	/*   %div.0.be.5.i.i = phi i16 [ %381, %379 ], [ %376, %.backedge.4.i.i ]*/
	if (((cur_state == LEGUP_F_main_BB__379_110) & (memory_controller_waitrequest == 1'd0))) begin
		main_backedge5ii_div0be5ii_reg <= main_backedge5ii_div0be5ii;
		if (start == 1'b0 && ^(main_backedge5ii_div0be5ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_backedge5ii_div0be5ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.backedge.5.i.i*/
	/*   %382 = shl i16 %div.0.be.5.i.i, 1*/
		main_backedge5ii_382 = (main_backedge5ii_div0be5ii_reg <<< (16'd1 % 16'd16));
end
always @(posedge clk) begin
	/* main: %.backedge.5.i.i*/
	/*   %382 = shl i16 %div.0.be.5.i.i, 1*/
	if ((cur_state == LEGUP_F_main_BB_backedge5ii_111)) begin
		main_backedge5ii_382_reg <= main_backedge5ii_382;
		if (start == 1'b0 && ^(main_backedge5ii_382) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_backedge5ii_382_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.backedge.5.i.i*/
	/*   %383 = shl i32 %L_num.0.be.5.i.i, 1*/
		main_backedge5ii_383 = (main_backedge5ii_L_num0be5ii_reg <<< (32'd1 % 32));
end
always @(posedge clk) begin
	/* main: %.backedge.5.i.i*/
	/*   %383 = shl i32 %L_num.0.be.5.i.i, 1*/
	if ((cur_state == LEGUP_F_main_BB_backedge5ii_111)) begin
		main_backedge5ii_383_reg <= main_backedge5ii_383;
		if (start == 1'b0 && ^(main_backedge5ii_383) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_backedge5ii_383_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.backedge.5.i.i*/
	/*   %384 = icmp slt i32 %383, %347*/
		main_backedge5ii_384 = ($signed(main_backedge5ii_383) < $signed(main_346_347_reg));
end
always @(posedge clk) begin
	/* main: %.backedge.5.i.i*/
	/*   %384 = icmp slt i32 %383, %347*/
	if ((cur_state == LEGUP_F_main_BB_backedge5ii_111)) begin
		main_backedge5ii_384_reg <= main_backedge5ii_384;
		if (start == 1'b0 && ^(main_backedge5ii_384) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_backedge5ii_384_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %385*/
	/*   %386 = sub nsw i32 %383, %347*/
		main_385_386 = main_signed_subtract_32_0;
end
always @(*) begin
/* main: %385*/
/*   %386 = sub nsw i32 %383, %347*/
	main_385_386_reg = main_62_63_reg;
end
always @(*) begin
	/* main: %385*/
	/*   %387 = or i16 %382, 1*/
		main_385_387 = (main_backedge5ii_382_reg | 16'd1);
end
always @(posedge clk) begin
	/* main: %385*/
	/*   %387 = or i16 %382, 1*/
	if ((cur_state == LEGUP_F_main_BB__385_112)) begin
		main_385_387_reg <= main_385_387;
		if (start == 1'b0 && ^(main_385_387) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_385_387_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.backedge.6.i.i*/
	/*   %L_num.0.be.6.i.i = phi i32 [ %386, %385 ], [ %383, %.backedge.5.i.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_backedge5ii_111) & (memory_controller_waitrequest == 1'd0)) & (main_backedge5ii_384 == 1'd1))) begin
		main_backedge6ii_L_num0be6ii = main_backedge5ii_383;
	end
	/* main: %.backedge.6.i.i*/
	/*   %L_num.0.be.6.i.i = phi i32 [ %386, %385 ], [ %383, %.backedge.5.i.i ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__385_112) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_backedge6ii_L_num0be6ii = main_385_386;
	end
end
always @(posedge clk) begin
	/* main: %.backedge.6.i.i*/
	/*   %L_num.0.be.6.i.i = phi i32 [ %386, %385 ], [ %383, %.backedge.5.i.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_backedge5ii_111) & (memory_controller_waitrequest == 1'd0)) & (main_backedge5ii_384 == 1'd1))) begin
		main_backedge6ii_L_num0be6ii_reg <= main_backedge6ii_L_num0be6ii;
		if (start == 1'b0 && ^(main_backedge6ii_L_num0be6ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_backedge6ii_L_num0be6ii_reg"); $finish; end
	end
	/* main: %.backedge.6.i.i*/
	/*   %L_num.0.be.6.i.i = phi i32 [ %386, %385 ], [ %383, %.backedge.5.i.i ]*/
	if (((cur_state == LEGUP_F_main_BB__385_112) & (memory_controller_waitrequest == 1'd0))) begin
		main_backedge6ii_L_num0be6ii_reg <= main_backedge6ii_L_num0be6ii;
		if (start == 1'b0 && ^(main_backedge6ii_L_num0be6ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_backedge6ii_L_num0be6ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.backedge.6.i.i*/
	/*   %div.0.be.6.i.i = phi i16 [ %387, %385 ], [ %382, %.backedge.5.i.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_backedge5ii_111) & (memory_controller_waitrequest == 1'd0)) & (main_backedge5ii_384 == 1'd1))) begin
		main_backedge6ii_div0be6ii = main_backedge5ii_382;
	end
	/* main: %.backedge.6.i.i*/
	/*   %div.0.be.6.i.i = phi i16 [ %387, %385 ], [ %382, %.backedge.5.i.i ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__385_112) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_backedge6ii_div0be6ii = main_385_387;
	end
end
always @(posedge clk) begin
	/* main: %.backedge.6.i.i*/
	/*   %div.0.be.6.i.i = phi i16 [ %387, %385 ], [ %382, %.backedge.5.i.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_backedge5ii_111) & (memory_controller_waitrequest == 1'd0)) & (main_backedge5ii_384 == 1'd1))) begin
		main_backedge6ii_div0be6ii_reg <= main_backedge6ii_div0be6ii;
		if (start == 1'b0 && ^(main_backedge6ii_div0be6ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_backedge6ii_div0be6ii_reg"); $finish; end
	end
	/* main: %.backedge.6.i.i*/
	/*   %div.0.be.6.i.i = phi i16 [ %387, %385 ], [ %382, %.backedge.5.i.i ]*/
	if (((cur_state == LEGUP_F_main_BB__385_112) & (memory_controller_waitrequest == 1'd0))) begin
		main_backedge6ii_div0be6ii_reg <= main_backedge6ii_div0be6ii;
		if (start == 1'b0 && ^(main_backedge6ii_div0be6ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_backedge6ii_div0be6ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.backedge.6.i.i*/
	/*   %388 = shl i16 %div.0.be.6.i.i, 1*/
		main_backedge6ii_388 = (main_backedge6ii_div0be6ii_reg <<< (16'd1 % 16'd16));
end
always @(posedge clk) begin
	/* main: %.backedge.6.i.i*/
	/*   %388 = shl i16 %div.0.be.6.i.i, 1*/
	if ((cur_state == LEGUP_F_main_BB_backedge6ii_113)) begin
		main_backedge6ii_388_reg <= main_backedge6ii_388;
		if (start == 1'b0 && ^(main_backedge6ii_388) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_backedge6ii_388_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.backedge.6.i.i*/
	/*   %389 = shl i32 %L_num.0.be.6.i.i, 1*/
		main_backedge6ii_389 = (main_backedge6ii_L_num0be6ii_reg <<< (32'd1 % 32));
end
always @(posedge clk) begin
	/* main: %.backedge.6.i.i*/
	/*   %389 = shl i32 %L_num.0.be.6.i.i, 1*/
	if ((cur_state == LEGUP_F_main_BB_backedge6ii_113)) begin
		main_backedge6ii_389_reg <= main_backedge6ii_389;
		if (start == 1'b0 && ^(main_backedge6ii_389) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_backedge6ii_389_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.backedge.6.i.i*/
	/*   %390 = icmp slt i32 %389, %347*/
		main_backedge6ii_390 = ($signed(main_backedge6ii_389) < $signed(main_346_347_reg));
end
always @(posedge clk) begin
	/* main: %.backedge.6.i.i*/
	/*   %390 = icmp slt i32 %389, %347*/
	if ((cur_state == LEGUP_F_main_BB_backedge6ii_113)) begin
		main_backedge6ii_390_reg <= main_backedge6ii_390;
		if (start == 1'b0 && ^(main_backedge6ii_390) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_backedge6ii_390_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %391*/
	/*   %392 = sub nsw i32 %389, %347*/
		main_391_392 = main_signed_subtract_32_0;
end
always @(*) begin
/* main: %391*/
/*   %392 = sub nsw i32 %389, %347*/
	main_391_392_reg = main_62_63_reg;
end
always @(*) begin
	/* main: %391*/
	/*   %393 = or i16 %388, 1*/
		main_391_393 = (main_backedge6ii_388_reg | 16'd1);
end
always @(posedge clk) begin
	/* main: %391*/
	/*   %393 = or i16 %388, 1*/
	if ((cur_state == LEGUP_F_main_BB__391_114)) begin
		main_391_393_reg <= main_391_393;
		if (start == 1'b0 && ^(main_391_393) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_391_393_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.backedge.7.i.i*/
	/*   %L_num.0.be.7.i.i = phi i32 [ %392, %391 ], [ %389, %.backedge.6.i.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_backedge6ii_113) & (memory_controller_waitrequest == 1'd0)) & (main_backedge6ii_390 == 1'd1))) begin
		main_backedge7ii_L_num0be7ii = main_backedge6ii_389;
	end
	/* main: %.backedge.7.i.i*/
	/*   %L_num.0.be.7.i.i = phi i32 [ %392, %391 ], [ %389, %.backedge.6.i.i ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__391_114) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_backedge7ii_L_num0be7ii = main_391_392;
	end
end
always @(posedge clk) begin
	/* main: %.backedge.7.i.i*/
	/*   %L_num.0.be.7.i.i = phi i32 [ %392, %391 ], [ %389, %.backedge.6.i.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_backedge6ii_113) & (memory_controller_waitrequest == 1'd0)) & (main_backedge6ii_390 == 1'd1))) begin
		main_backedge7ii_L_num0be7ii_reg <= main_backedge7ii_L_num0be7ii;
		if (start == 1'b0 && ^(main_backedge7ii_L_num0be7ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_backedge7ii_L_num0be7ii_reg"); $finish; end
	end
	/* main: %.backedge.7.i.i*/
	/*   %L_num.0.be.7.i.i = phi i32 [ %392, %391 ], [ %389, %.backedge.6.i.i ]*/
	if (((cur_state == LEGUP_F_main_BB__391_114) & (memory_controller_waitrequest == 1'd0))) begin
		main_backedge7ii_L_num0be7ii_reg <= main_backedge7ii_L_num0be7ii;
		if (start == 1'b0 && ^(main_backedge7ii_L_num0be7ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_backedge7ii_L_num0be7ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.backedge.7.i.i*/
	/*   %div.0.be.7.i.i = phi i16 [ %393, %391 ], [ %388, %.backedge.6.i.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_backedge6ii_113) & (memory_controller_waitrequest == 1'd0)) & (main_backedge6ii_390 == 1'd1))) begin
		main_backedge7ii_div0be7ii = main_backedge6ii_388;
	end
	/* main: %.backedge.7.i.i*/
	/*   %div.0.be.7.i.i = phi i16 [ %393, %391 ], [ %388, %.backedge.6.i.i ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__391_114) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_backedge7ii_div0be7ii = main_391_393;
	end
end
always @(posedge clk) begin
	/* main: %.backedge.7.i.i*/
	/*   %div.0.be.7.i.i = phi i16 [ %393, %391 ], [ %388, %.backedge.6.i.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_backedge6ii_113) & (memory_controller_waitrequest == 1'd0)) & (main_backedge6ii_390 == 1'd1))) begin
		main_backedge7ii_div0be7ii_reg <= main_backedge7ii_div0be7ii;
		if (start == 1'b0 && ^(main_backedge7ii_div0be7ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_backedge7ii_div0be7ii_reg"); $finish; end
	end
	/* main: %.backedge.7.i.i*/
	/*   %div.0.be.7.i.i = phi i16 [ %393, %391 ], [ %388, %.backedge.6.i.i ]*/
	if (((cur_state == LEGUP_F_main_BB__391_114) & (memory_controller_waitrequest == 1'd0))) begin
		main_backedge7ii_div0be7ii_reg <= main_backedge7ii_div0be7ii;
		if (start == 1'b0 && ^(main_backedge7ii_div0be7ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_backedge7ii_div0be7ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.backedge.7.i.i*/
	/*   %394 = shl i16 %div.0.be.7.i.i, 1*/
		main_backedge7ii_394 = (main_backedge7ii_div0be7ii_reg <<< (16'd1 % 16'd16));
end
always @(posedge clk) begin
	/* main: %.backedge.7.i.i*/
	/*   %394 = shl i16 %div.0.be.7.i.i, 1*/
	if ((cur_state == LEGUP_F_main_BB_backedge7ii_115)) begin
		main_backedge7ii_394_reg <= main_backedge7ii_394;
		if (start == 1'b0 && ^(main_backedge7ii_394) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_backedge7ii_394_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.backedge.7.i.i*/
	/*   %395 = shl i32 %L_num.0.be.7.i.i, 1*/
		main_backedge7ii_395 = (main_backedge7ii_L_num0be7ii_reg <<< (32'd1 % 32));
end
always @(posedge clk) begin
	/* main: %.backedge.7.i.i*/
	/*   %395 = shl i32 %L_num.0.be.7.i.i, 1*/
	if ((cur_state == LEGUP_F_main_BB_backedge7ii_115)) begin
		main_backedge7ii_395_reg <= main_backedge7ii_395;
		if (start == 1'b0 && ^(main_backedge7ii_395) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_backedge7ii_395_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.backedge.7.i.i*/
	/*   %396 = icmp slt i32 %395, %347*/
		main_backedge7ii_396 = ($signed(main_backedge7ii_395) < $signed(main_346_347_reg));
end
always @(posedge clk) begin
	/* main: %.backedge.7.i.i*/
	/*   %396 = icmp slt i32 %395, %347*/
	if ((cur_state == LEGUP_F_main_BB_backedge7ii_115)) begin
		main_backedge7ii_396_reg <= main_backedge7ii_396;
		if (start == 1'b0 && ^(main_backedge7ii_396) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_backedge7ii_396_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %397*/
	/*   %398 = sub nsw i32 %395, %347*/
		main_397_398 = main_signed_subtract_32_0;
end
always @(*) begin
/* main: %397*/
/*   %398 = sub nsw i32 %395, %347*/
	main_397_398_reg = main_62_63_reg;
end
always @(*) begin
	/* main: %397*/
	/*   %399 = or i16 %394, 1*/
		main_397_399 = (main_backedge7ii_394_reg | 16'd1);
end
always @(posedge clk) begin
	/* main: %397*/
	/*   %399 = or i16 %394, 1*/
	if ((cur_state == LEGUP_F_main_BB__397_116)) begin
		main_397_399_reg <= main_397_399;
		if (start == 1'b0 && ^(main_397_399) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_397_399_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.backedge.8.i.i*/
	/*   %L_num.0.be.8.i.i = phi i32 [ %398, %397 ], [ %395, %.backedge.7.i.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_backedge7ii_115) & (memory_controller_waitrequest == 1'd0)) & (main_backedge7ii_396 == 1'd1))) begin
		main_backedge8ii_L_num0be8ii = main_backedge7ii_395;
	end
	/* main: %.backedge.8.i.i*/
	/*   %L_num.0.be.8.i.i = phi i32 [ %398, %397 ], [ %395, %.backedge.7.i.i ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__397_116) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_backedge8ii_L_num0be8ii = main_397_398;
	end
end
always @(posedge clk) begin
	/* main: %.backedge.8.i.i*/
	/*   %L_num.0.be.8.i.i = phi i32 [ %398, %397 ], [ %395, %.backedge.7.i.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_backedge7ii_115) & (memory_controller_waitrequest == 1'd0)) & (main_backedge7ii_396 == 1'd1))) begin
		main_backedge8ii_L_num0be8ii_reg <= main_backedge8ii_L_num0be8ii;
		if (start == 1'b0 && ^(main_backedge8ii_L_num0be8ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_backedge8ii_L_num0be8ii_reg"); $finish; end
	end
	/* main: %.backedge.8.i.i*/
	/*   %L_num.0.be.8.i.i = phi i32 [ %398, %397 ], [ %395, %.backedge.7.i.i ]*/
	if (((cur_state == LEGUP_F_main_BB__397_116) & (memory_controller_waitrequest == 1'd0))) begin
		main_backedge8ii_L_num0be8ii_reg <= main_backedge8ii_L_num0be8ii;
		if (start == 1'b0 && ^(main_backedge8ii_L_num0be8ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_backedge8ii_L_num0be8ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.backedge.8.i.i*/
	/*   %div.0.be.8.i.i = phi i16 [ %399, %397 ], [ %394, %.backedge.7.i.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_backedge7ii_115) & (memory_controller_waitrequest == 1'd0)) & (main_backedge7ii_396 == 1'd1))) begin
		main_backedge8ii_div0be8ii = main_backedge7ii_394;
	end
	/* main: %.backedge.8.i.i*/
	/*   %div.0.be.8.i.i = phi i16 [ %399, %397 ], [ %394, %.backedge.7.i.i ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__397_116) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_backedge8ii_div0be8ii = main_397_399;
	end
end
always @(posedge clk) begin
	/* main: %.backedge.8.i.i*/
	/*   %div.0.be.8.i.i = phi i16 [ %399, %397 ], [ %394, %.backedge.7.i.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_backedge7ii_115) & (memory_controller_waitrequest == 1'd0)) & (main_backedge7ii_396 == 1'd1))) begin
		main_backedge8ii_div0be8ii_reg <= main_backedge8ii_div0be8ii;
		if (start == 1'b0 && ^(main_backedge8ii_div0be8ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_backedge8ii_div0be8ii_reg"); $finish; end
	end
	/* main: %.backedge.8.i.i*/
	/*   %div.0.be.8.i.i = phi i16 [ %399, %397 ], [ %394, %.backedge.7.i.i ]*/
	if (((cur_state == LEGUP_F_main_BB__397_116) & (memory_controller_waitrequest == 1'd0))) begin
		main_backedge8ii_div0be8ii_reg <= main_backedge8ii_div0be8ii;
		if (start == 1'b0 && ^(main_backedge8ii_div0be8ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_backedge8ii_div0be8ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.backedge.8.i.i*/
	/*   %400 = shl i16 %div.0.be.8.i.i, 1*/
		main_backedge8ii_400 = (main_backedge8ii_div0be8ii_reg <<< (16'd1 % 16'd16));
end
always @(posedge clk) begin
	/* main: %.backedge.8.i.i*/
	/*   %400 = shl i16 %div.0.be.8.i.i, 1*/
	if ((cur_state == LEGUP_F_main_BB_backedge8ii_117)) begin
		main_backedge8ii_400_reg <= main_backedge8ii_400;
		if (start == 1'b0 && ^(main_backedge8ii_400) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_backedge8ii_400_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.backedge.8.i.i*/
	/*   %401 = shl i32 %L_num.0.be.8.i.i, 1*/
		main_backedge8ii_401 = (main_backedge8ii_L_num0be8ii_reg <<< (32'd1 % 32));
end
always @(posedge clk) begin
	/* main: %.backedge.8.i.i*/
	/*   %401 = shl i32 %L_num.0.be.8.i.i, 1*/
	if ((cur_state == LEGUP_F_main_BB_backedge8ii_117)) begin
		main_backedge8ii_401_reg <= main_backedge8ii_401;
		if (start == 1'b0 && ^(main_backedge8ii_401) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_backedge8ii_401_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.backedge.8.i.i*/
	/*   %402 = icmp slt i32 %401, %347*/
		main_backedge8ii_402 = ($signed(main_backedge8ii_401) < $signed(main_346_347_reg));
end
always @(posedge clk) begin
	/* main: %.backedge.8.i.i*/
	/*   %402 = icmp slt i32 %401, %347*/
	if ((cur_state == LEGUP_F_main_BB_backedge8ii_117)) begin
		main_backedge8ii_402_reg <= main_backedge8ii_402;
		if (start == 1'b0 && ^(main_backedge8ii_402) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_backedge8ii_402_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %403*/
	/*   %404 = sub nsw i32 %401, %347*/
		main_403_404 = main_signed_subtract_32_0;
end
always @(*) begin
/* main: %403*/
/*   %404 = sub nsw i32 %401, %347*/
	main_403_404_reg = main_62_63_reg;
end
always @(*) begin
	/* main: %403*/
	/*   %405 = or i16 %400, 1*/
		main_403_405 = (main_backedge8ii_400_reg | 16'd1);
end
always @(posedge clk) begin
	/* main: %403*/
	/*   %405 = or i16 %400, 1*/
	if ((cur_state == LEGUP_F_main_BB__403_118)) begin
		main_403_405_reg <= main_403_405;
		if (start == 1'b0 && ^(main_403_405) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_403_405_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.backedge.9.i.i*/
	/*   %L_num.0.be.9.i.i = phi i32 [ %404, %403 ], [ %401, %.backedge.8.i.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_backedge8ii_117) & (memory_controller_waitrequest == 1'd0)) & (main_backedge8ii_402 == 1'd1))) begin
		main_backedge9ii_L_num0be9ii = main_backedge8ii_401;
	end
	/* main: %.backedge.9.i.i*/
	/*   %L_num.0.be.9.i.i = phi i32 [ %404, %403 ], [ %401, %.backedge.8.i.i ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__403_118) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_backedge9ii_L_num0be9ii = main_403_404;
	end
end
always @(posedge clk) begin
	/* main: %.backedge.9.i.i*/
	/*   %L_num.0.be.9.i.i = phi i32 [ %404, %403 ], [ %401, %.backedge.8.i.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_backedge8ii_117) & (memory_controller_waitrequest == 1'd0)) & (main_backedge8ii_402 == 1'd1))) begin
		main_backedge9ii_L_num0be9ii_reg <= main_backedge9ii_L_num0be9ii;
		if (start == 1'b0 && ^(main_backedge9ii_L_num0be9ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_backedge9ii_L_num0be9ii_reg"); $finish; end
	end
	/* main: %.backedge.9.i.i*/
	/*   %L_num.0.be.9.i.i = phi i32 [ %404, %403 ], [ %401, %.backedge.8.i.i ]*/
	if (((cur_state == LEGUP_F_main_BB__403_118) & (memory_controller_waitrequest == 1'd0))) begin
		main_backedge9ii_L_num0be9ii_reg <= main_backedge9ii_L_num0be9ii;
		if (start == 1'b0 && ^(main_backedge9ii_L_num0be9ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_backedge9ii_L_num0be9ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.backedge.9.i.i*/
	/*   %div.0.be.9.i.i = phi i16 [ %405, %403 ], [ %400, %.backedge.8.i.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_backedge8ii_117) & (memory_controller_waitrequest == 1'd0)) & (main_backedge8ii_402 == 1'd1))) begin
		main_backedge9ii_div0be9ii = main_backedge8ii_400;
	end
	/* main: %.backedge.9.i.i*/
	/*   %div.0.be.9.i.i = phi i16 [ %405, %403 ], [ %400, %.backedge.8.i.i ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__403_118) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_backedge9ii_div0be9ii = main_403_405;
	end
end
always @(posedge clk) begin
	/* main: %.backedge.9.i.i*/
	/*   %div.0.be.9.i.i = phi i16 [ %405, %403 ], [ %400, %.backedge.8.i.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_backedge8ii_117) & (memory_controller_waitrequest == 1'd0)) & (main_backedge8ii_402 == 1'd1))) begin
		main_backedge9ii_div0be9ii_reg <= main_backedge9ii_div0be9ii;
		if (start == 1'b0 && ^(main_backedge9ii_div0be9ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_backedge9ii_div0be9ii_reg"); $finish; end
	end
	/* main: %.backedge.9.i.i*/
	/*   %div.0.be.9.i.i = phi i16 [ %405, %403 ], [ %400, %.backedge.8.i.i ]*/
	if (((cur_state == LEGUP_F_main_BB__403_118) & (memory_controller_waitrequest == 1'd0))) begin
		main_backedge9ii_div0be9ii_reg <= main_backedge9ii_div0be9ii;
		if (start == 1'b0 && ^(main_backedge9ii_div0be9ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_backedge9ii_div0be9ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.backedge.9.i.i*/
	/*   %406 = shl i16 %div.0.be.9.i.i, 1*/
		main_backedge9ii_406 = (main_backedge9ii_div0be9ii_reg <<< (16'd1 % 16'd16));
end
always @(posedge clk) begin
	/* main: %.backedge.9.i.i*/
	/*   %406 = shl i16 %div.0.be.9.i.i, 1*/
	if ((cur_state == LEGUP_F_main_BB_backedge9ii_119)) begin
		main_backedge9ii_406_reg <= main_backedge9ii_406;
		if (start == 1'b0 && ^(main_backedge9ii_406) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_backedge9ii_406_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.backedge.9.i.i*/
	/*   %407 = shl i32 %L_num.0.be.9.i.i, 1*/
		main_backedge9ii_407 = (main_backedge9ii_L_num0be9ii_reg <<< (32'd1 % 32));
end
always @(posedge clk) begin
	/* main: %.backedge.9.i.i*/
	/*   %407 = shl i32 %L_num.0.be.9.i.i, 1*/
	if ((cur_state == LEGUP_F_main_BB_backedge9ii_119)) begin
		main_backedge9ii_407_reg <= main_backedge9ii_407;
		if (start == 1'b0 && ^(main_backedge9ii_407) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_backedge9ii_407_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.backedge.9.i.i*/
	/*   %408 = icmp slt i32 %407, %347*/
		main_backedge9ii_408 = ($signed(main_backedge9ii_407) < $signed(main_346_347_reg));
end
always @(posedge clk) begin
	/* main: %.backedge.9.i.i*/
	/*   %408 = icmp slt i32 %407, %347*/
	if ((cur_state == LEGUP_F_main_BB_backedge9ii_119)) begin
		main_backedge9ii_408_reg <= main_backedge9ii_408;
		if (start == 1'b0 && ^(main_backedge9ii_408) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_backedge9ii_408_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %409*/
	/*   %410 = sub nsw i32 %407, %347*/
		main_409_410 = main_signed_subtract_32_0;
end
always @(*) begin
/* main: %409*/
/*   %410 = sub nsw i32 %407, %347*/
	main_409_410_reg = main_62_63_reg;
end
always @(*) begin
	/* main: %409*/
	/*   %411 = or i16 %406, 1*/
		main_409_411 = (main_backedge9ii_406_reg | 16'd1);
end
always @(posedge clk) begin
	/* main: %409*/
	/*   %411 = or i16 %406, 1*/
	if ((cur_state == LEGUP_F_main_BB__409_120)) begin
		main_409_411_reg <= main_409_411;
		if (start == 1'b0 && ^(main_409_411) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_409_411_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.backedge.10.i.i*/
	/*   %L_num.0.be.10.i.i = phi i32 [ %410, %409 ], [ %407, %.backedge.9.i.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_backedge9ii_119) & (memory_controller_waitrequest == 1'd0)) & (main_backedge9ii_408 == 1'd1))) begin
		main_backedge10ii_L_num0be10ii = main_backedge9ii_407;
	end
	/* main: %.backedge.10.i.i*/
	/*   %L_num.0.be.10.i.i = phi i32 [ %410, %409 ], [ %407, %.backedge.9.i.i ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__409_120) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_backedge10ii_L_num0be10ii = main_409_410;
	end
end
always @(posedge clk) begin
	/* main: %.backedge.10.i.i*/
	/*   %L_num.0.be.10.i.i = phi i32 [ %410, %409 ], [ %407, %.backedge.9.i.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_backedge9ii_119) & (memory_controller_waitrequest == 1'd0)) & (main_backedge9ii_408 == 1'd1))) begin
		main_backedge10ii_L_num0be10ii_reg <= main_backedge10ii_L_num0be10ii;
		if (start == 1'b0 && ^(main_backedge10ii_L_num0be10ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_backedge10ii_L_num0be10ii_reg"); $finish; end
	end
	/* main: %.backedge.10.i.i*/
	/*   %L_num.0.be.10.i.i = phi i32 [ %410, %409 ], [ %407, %.backedge.9.i.i ]*/
	if (((cur_state == LEGUP_F_main_BB__409_120) & (memory_controller_waitrequest == 1'd0))) begin
		main_backedge10ii_L_num0be10ii_reg <= main_backedge10ii_L_num0be10ii;
		if (start == 1'b0 && ^(main_backedge10ii_L_num0be10ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_backedge10ii_L_num0be10ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.backedge.10.i.i*/
	/*   %div.0.be.10.i.i = phi i16 [ %411, %409 ], [ %406, %.backedge.9.i.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_backedge9ii_119) & (memory_controller_waitrequest == 1'd0)) & (main_backedge9ii_408 == 1'd1))) begin
		main_backedge10ii_div0be10ii = main_backedge9ii_406;
	end
	/* main: %.backedge.10.i.i*/
	/*   %div.0.be.10.i.i = phi i16 [ %411, %409 ], [ %406, %.backedge.9.i.i ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__409_120) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_backedge10ii_div0be10ii = main_409_411;
	end
end
always @(posedge clk) begin
	/* main: %.backedge.10.i.i*/
	/*   %div.0.be.10.i.i = phi i16 [ %411, %409 ], [ %406, %.backedge.9.i.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_backedge9ii_119) & (memory_controller_waitrequest == 1'd0)) & (main_backedge9ii_408 == 1'd1))) begin
		main_backedge10ii_div0be10ii_reg <= main_backedge10ii_div0be10ii;
		if (start == 1'b0 && ^(main_backedge10ii_div0be10ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_backedge10ii_div0be10ii_reg"); $finish; end
	end
	/* main: %.backedge.10.i.i*/
	/*   %div.0.be.10.i.i = phi i16 [ %411, %409 ], [ %406, %.backedge.9.i.i ]*/
	if (((cur_state == LEGUP_F_main_BB__409_120) & (memory_controller_waitrequest == 1'd0))) begin
		main_backedge10ii_div0be10ii_reg <= main_backedge10ii_div0be10ii;
		if (start == 1'b0 && ^(main_backedge10ii_div0be10ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_backedge10ii_div0be10ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.backedge.10.i.i*/
	/*   %412 = shl i16 %div.0.be.10.i.i, 1*/
		main_backedge10ii_412 = (main_backedge10ii_div0be10ii_reg <<< (16'd1 % 16'd16));
end
always @(posedge clk) begin
	/* main: %.backedge.10.i.i*/
	/*   %412 = shl i16 %div.0.be.10.i.i, 1*/
	if ((cur_state == LEGUP_F_main_BB_backedge10ii_121)) begin
		main_backedge10ii_412_reg <= main_backedge10ii_412;
		if (start == 1'b0 && ^(main_backedge10ii_412) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_backedge10ii_412_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.backedge.10.i.i*/
	/*   %413 = shl i32 %L_num.0.be.10.i.i, 1*/
		main_backedge10ii_413 = (main_backedge10ii_L_num0be10ii_reg <<< (32'd1 % 32));
end
always @(posedge clk) begin
	/* main: %.backedge.10.i.i*/
	/*   %413 = shl i32 %L_num.0.be.10.i.i, 1*/
	if ((cur_state == LEGUP_F_main_BB_backedge10ii_121)) begin
		main_backedge10ii_413_reg <= main_backedge10ii_413;
		if (start == 1'b0 && ^(main_backedge10ii_413) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_backedge10ii_413_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.backedge.10.i.i*/
	/*   %414 = icmp slt i32 %413, %347*/
		main_backedge10ii_414 = ($signed(main_backedge10ii_413) < $signed(main_346_347_reg));
end
always @(posedge clk) begin
	/* main: %.backedge.10.i.i*/
	/*   %414 = icmp slt i32 %413, %347*/
	if ((cur_state == LEGUP_F_main_BB_backedge10ii_121)) begin
		main_backedge10ii_414_reg <= main_backedge10ii_414;
		if (start == 1'b0 && ^(main_backedge10ii_414) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_backedge10ii_414_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %415*/
	/*   %416 = sub nsw i32 %413, %347*/
		main_415_416 = main_signed_subtract_32_0;
end
always @(*) begin
/* main: %415*/
/*   %416 = sub nsw i32 %413, %347*/
	main_415_416_reg = main_62_63_reg;
end
always @(*) begin
	/* main: %415*/
	/*   %417 = or i16 %412, 1*/
		main_415_417 = (main_backedge10ii_412_reg | 16'd1);
end
always @(posedge clk) begin
	/* main: %415*/
	/*   %417 = or i16 %412, 1*/
	if ((cur_state == LEGUP_F_main_BB__415_122)) begin
		main_415_417_reg <= main_415_417;
		if (start == 1'b0 && ^(main_415_417) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_415_417_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.backedge.11.i.i*/
	/*   %L_num.0.be.11.i.i = phi i32 [ %416, %415 ], [ %413, %.backedge.10.i.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_backedge10ii_121) & (memory_controller_waitrequest == 1'd0)) & (main_backedge10ii_414 == 1'd1))) begin
		main_backedge11ii_L_num0be11ii = main_backedge10ii_413;
	end
	/* main: %.backedge.11.i.i*/
	/*   %L_num.0.be.11.i.i = phi i32 [ %416, %415 ], [ %413, %.backedge.10.i.i ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__415_122) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_backedge11ii_L_num0be11ii = main_415_416;
	end
end
always @(posedge clk) begin
	/* main: %.backedge.11.i.i*/
	/*   %L_num.0.be.11.i.i = phi i32 [ %416, %415 ], [ %413, %.backedge.10.i.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_backedge10ii_121) & (memory_controller_waitrequest == 1'd0)) & (main_backedge10ii_414 == 1'd1))) begin
		main_backedge11ii_L_num0be11ii_reg <= main_backedge11ii_L_num0be11ii;
		if (start == 1'b0 && ^(main_backedge11ii_L_num0be11ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_backedge11ii_L_num0be11ii_reg"); $finish; end
	end
	/* main: %.backedge.11.i.i*/
	/*   %L_num.0.be.11.i.i = phi i32 [ %416, %415 ], [ %413, %.backedge.10.i.i ]*/
	if (((cur_state == LEGUP_F_main_BB__415_122) & (memory_controller_waitrequest == 1'd0))) begin
		main_backedge11ii_L_num0be11ii_reg <= main_backedge11ii_L_num0be11ii;
		if (start == 1'b0 && ^(main_backedge11ii_L_num0be11ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_backedge11ii_L_num0be11ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.backedge.11.i.i*/
	/*   %div.0.be.11.i.i = phi i16 [ %417, %415 ], [ %412, %.backedge.10.i.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_backedge10ii_121) & (memory_controller_waitrequest == 1'd0)) & (main_backedge10ii_414 == 1'd1))) begin
		main_backedge11ii_div0be11ii = main_backedge10ii_412;
	end
	/* main: %.backedge.11.i.i*/
	/*   %div.0.be.11.i.i = phi i16 [ %417, %415 ], [ %412, %.backedge.10.i.i ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__415_122) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_backedge11ii_div0be11ii = main_415_417;
	end
end
always @(posedge clk) begin
	/* main: %.backedge.11.i.i*/
	/*   %div.0.be.11.i.i = phi i16 [ %417, %415 ], [ %412, %.backedge.10.i.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_backedge10ii_121) & (memory_controller_waitrequest == 1'd0)) & (main_backedge10ii_414 == 1'd1))) begin
		main_backedge11ii_div0be11ii_reg <= main_backedge11ii_div0be11ii;
		if (start == 1'b0 && ^(main_backedge11ii_div0be11ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_backedge11ii_div0be11ii_reg"); $finish; end
	end
	/* main: %.backedge.11.i.i*/
	/*   %div.0.be.11.i.i = phi i16 [ %417, %415 ], [ %412, %.backedge.10.i.i ]*/
	if (((cur_state == LEGUP_F_main_BB__415_122) & (memory_controller_waitrequest == 1'd0))) begin
		main_backedge11ii_div0be11ii_reg <= main_backedge11ii_div0be11ii;
		if (start == 1'b0 && ^(main_backedge11ii_div0be11ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_backedge11ii_div0be11ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.backedge.11.i.i*/
	/*   %418 = shl i16 %div.0.be.11.i.i, 1*/
		main_backedge11ii_418 = (main_backedge11ii_div0be11ii_reg <<< (16'd1 % 16'd16));
end
always @(posedge clk) begin
	/* main: %.backedge.11.i.i*/
	/*   %418 = shl i16 %div.0.be.11.i.i, 1*/
	if ((cur_state == LEGUP_F_main_BB_backedge11ii_123)) begin
		main_backedge11ii_418_reg <= main_backedge11ii_418;
		if (start == 1'b0 && ^(main_backedge11ii_418) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_backedge11ii_418_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.backedge.11.i.i*/
	/*   %419 = shl i32 %L_num.0.be.11.i.i, 1*/
		main_backedge11ii_419 = (main_backedge11ii_L_num0be11ii_reg <<< (32'd1 % 32));
end
always @(posedge clk) begin
	/* main: %.backedge.11.i.i*/
	/*   %419 = shl i32 %L_num.0.be.11.i.i, 1*/
	if ((cur_state == LEGUP_F_main_BB_backedge11ii_123)) begin
		main_backedge11ii_419_reg <= main_backedge11ii_419;
		if (start == 1'b0 && ^(main_backedge11ii_419) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_backedge11ii_419_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.backedge.11.i.i*/
	/*   %420 = icmp slt i32 %419, %347*/
		main_backedge11ii_420 = ($signed(main_backedge11ii_419) < $signed(main_346_347_reg));
end
always @(posedge clk) begin
	/* main: %.backedge.11.i.i*/
	/*   %420 = icmp slt i32 %419, %347*/
	if ((cur_state == LEGUP_F_main_BB_backedge11ii_123)) begin
		main_backedge11ii_420_reg <= main_backedge11ii_420;
		if (start == 1'b0 && ^(main_backedge11ii_420) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_backedge11ii_420_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %421*/
	/*   %422 = sub nsw i32 %419, %347*/
		main_421_422 = main_signed_subtract_32_0;
end
always @(*) begin
/* main: %421*/
/*   %422 = sub nsw i32 %419, %347*/
	main_421_422_reg = main_62_63_reg;
end
always @(*) begin
	/* main: %421*/
	/*   %423 = or i16 %418, 1*/
		main_421_423 = (main_backedge11ii_418_reg | 16'd1);
end
always @(posedge clk) begin
	/* main: %421*/
	/*   %423 = or i16 %418, 1*/
	if ((cur_state == LEGUP_F_main_BB__421_124)) begin
		main_421_423_reg <= main_421_423;
		if (start == 1'b0 && ^(main_421_423) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_421_423_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.backedge.12.i.i*/
	/*   %L_num.0.be.12.i.i = phi i32 [ %422, %421 ], [ %419, %.backedge.11.i.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_backedge11ii_123) & (memory_controller_waitrequest == 1'd0)) & (main_backedge11ii_420 == 1'd1))) begin
		main_backedge12ii_L_num0be12ii = main_backedge11ii_419;
	end
	/* main: %.backedge.12.i.i*/
	/*   %L_num.0.be.12.i.i = phi i32 [ %422, %421 ], [ %419, %.backedge.11.i.i ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__421_124) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_backedge12ii_L_num0be12ii = main_421_422;
	end
end
always @(posedge clk) begin
	/* main: %.backedge.12.i.i*/
	/*   %L_num.0.be.12.i.i = phi i32 [ %422, %421 ], [ %419, %.backedge.11.i.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_backedge11ii_123) & (memory_controller_waitrequest == 1'd0)) & (main_backedge11ii_420 == 1'd1))) begin
		main_backedge12ii_L_num0be12ii_reg <= main_backedge12ii_L_num0be12ii;
		if (start == 1'b0 && ^(main_backedge12ii_L_num0be12ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_backedge12ii_L_num0be12ii_reg"); $finish; end
	end
	/* main: %.backedge.12.i.i*/
	/*   %L_num.0.be.12.i.i = phi i32 [ %422, %421 ], [ %419, %.backedge.11.i.i ]*/
	if (((cur_state == LEGUP_F_main_BB__421_124) & (memory_controller_waitrequest == 1'd0))) begin
		main_backedge12ii_L_num0be12ii_reg <= main_backedge12ii_L_num0be12ii;
		if (start == 1'b0 && ^(main_backedge12ii_L_num0be12ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_backedge12ii_L_num0be12ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.backedge.12.i.i*/
	/*   %div.0.be.12.i.i = phi i16 [ %423, %421 ], [ %418, %.backedge.11.i.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_backedge11ii_123) & (memory_controller_waitrequest == 1'd0)) & (main_backedge11ii_420 == 1'd1))) begin
		main_backedge12ii_div0be12ii = main_backedge11ii_418;
	end
	/* main: %.backedge.12.i.i*/
	/*   %div.0.be.12.i.i = phi i16 [ %423, %421 ], [ %418, %.backedge.11.i.i ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__421_124) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_backedge12ii_div0be12ii = main_421_423;
	end
end
always @(posedge clk) begin
	/* main: %.backedge.12.i.i*/
	/*   %div.0.be.12.i.i = phi i16 [ %423, %421 ], [ %418, %.backedge.11.i.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_backedge11ii_123) & (memory_controller_waitrequest == 1'd0)) & (main_backedge11ii_420 == 1'd1))) begin
		main_backedge12ii_div0be12ii_reg <= main_backedge12ii_div0be12ii;
		if (start == 1'b0 && ^(main_backedge12ii_div0be12ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_backedge12ii_div0be12ii_reg"); $finish; end
	end
	/* main: %.backedge.12.i.i*/
	/*   %div.0.be.12.i.i = phi i16 [ %423, %421 ], [ %418, %.backedge.11.i.i ]*/
	if (((cur_state == LEGUP_F_main_BB__421_124) & (memory_controller_waitrequest == 1'd0))) begin
		main_backedge12ii_div0be12ii_reg <= main_backedge12ii_div0be12ii;
		if (start == 1'b0 && ^(main_backedge12ii_div0be12ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_backedge12ii_div0be12ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.backedge.12.i.i*/
	/*   %424 = shl i16 %div.0.be.12.i.i, 1*/
		main_backedge12ii_424 = (main_backedge12ii_div0be12ii_reg <<< (16'd1 % 16'd16));
end
always @(posedge clk) begin
	/* main: %.backedge.12.i.i*/
	/*   %424 = shl i16 %div.0.be.12.i.i, 1*/
	if ((cur_state == LEGUP_F_main_BB_backedge12ii_125)) begin
		main_backedge12ii_424_reg <= main_backedge12ii_424;
		if (start == 1'b0 && ^(main_backedge12ii_424) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_backedge12ii_424_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.backedge.12.i.i*/
	/*   %425 = shl i32 %L_num.0.be.12.i.i, 1*/
		main_backedge12ii_425 = (main_backedge12ii_L_num0be12ii_reg <<< (32'd1 % 32));
end
always @(posedge clk) begin
	/* main: %.backedge.12.i.i*/
	/*   %425 = shl i32 %L_num.0.be.12.i.i, 1*/
	if ((cur_state == LEGUP_F_main_BB_backedge12ii_125)) begin
		main_backedge12ii_425_reg <= main_backedge12ii_425;
		if (start == 1'b0 && ^(main_backedge12ii_425) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_backedge12ii_425_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.backedge.12.i.i*/
	/*   %426 = icmp slt i32 %425, %347*/
		main_backedge12ii_426 = ($signed(main_backedge12ii_425) < $signed(main_346_347_reg));
end
always @(posedge clk) begin
	/* main: %.backedge.12.i.i*/
	/*   %426 = icmp slt i32 %425, %347*/
	if ((cur_state == LEGUP_F_main_BB_backedge12ii_125)) begin
		main_backedge12ii_426_reg <= main_backedge12ii_426;
		if (start == 1'b0 && ^(main_backedge12ii_426) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_backedge12ii_426_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %427*/
	/*   %428 = sub nsw i32 %425, %347*/
		main_427_428 = main_signed_subtract_32_0;
end
always @(*) begin
/* main: %427*/
/*   %428 = sub nsw i32 %425, %347*/
	main_427_428_reg = main_62_63_reg;
end
always @(*) begin
	/* main: %427*/
	/*   %429 = or i16 %424, 1*/
		main_427_429 = (main_backedge12ii_424_reg | 16'd1);
end
always @(posedge clk) begin
	/* main: %427*/
	/*   %429 = or i16 %424, 1*/
	if ((cur_state == LEGUP_F_main_BB__427_126)) begin
		main_427_429_reg <= main_427_429;
		if (start == 1'b0 && ^(main_427_429) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_427_429_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.backedge.13.i.i*/
	/*   %L_num.0.be.13.i.i = phi i32 [ %428, %427 ], [ %425, %.backedge.12.i.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_backedge12ii_125) & (memory_controller_waitrequest == 1'd0)) & (main_backedge12ii_426 == 1'd1))) begin
		main_backedge13ii_L_num0be13ii = main_backedge12ii_425;
	end
	/* main: %.backedge.13.i.i*/
	/*   %L_num.0.be.13.i.i = phi i32 [ %428, %427 ], [ %425, %.backedge.12.i.i ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__427_126) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_backedge13ii_L_num0be13ii = main_427_428;
	end
end
always @(posedge clk) begin
	/* main: %.backedge.13.i.i*/
	/*   %L_num.0.be.13.i.i = phi i32 [ %428, %427 ], [ %425, %.backedge.12.i.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_backedge12ii_125) & (memory_controller_waitrequest == 1'd0)) & (main_backedge12ii_426 == 1'd1))) begin
		main_backedge13ii_L_num0be13ii_reg <= main_backedge13ii_L_num0be13ii;
		if (start == 1'b0 && ^(main_backedge13ii_L_num0be13ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_backedge13ii_L_num0be13ii_reg"); $finish; end
	end
	/* main: %.backedge.13.i.i*/
	/*   %L_num.0.be.13.i.i = phi i32 [ %428, %427 ], [ %425, %.backedge.12.i.i ]*/
	if (((cur_state == LEGUP_F_main_BB__427_126) & (memory_controller_waitrequest == 1'd0))) begin
		main_backedge13ii_L_num0be13ii_reg <= main_backedge13ii_L_num0be13ii;
		if (start == 1'b0 && ^(main_backedge13ii_L_num0be13ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_backedge13ii_L_num0be13ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.backedge.13.i.i*/
	/*   %div.0.be.13.i.i = phi i16 [ %429, %427 ], [ %424, %.backedge.12.i.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_backedge12ii_125) & (memory_controller_waitrequest == 1'd0)) & (main_backedge12ii_426 == 1'd1))) begin
		main_backedge13ii_div0be13ii = main_backedge12ii_424;
	end
	/* main: %.backedge.13.i.i*/
	/*   %div.0.be.13.i.i = phi i16 [ %429, %427 ], [ %424, %.backedge.12.i.i ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__427_126) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_backedge13ii_div0be13ii = main_427_429;
	end
end
always @(posedge clk) begin
	/* main: %.backedge.13.i.i*/
	/*   %div.0.be.13.i.i = phi i16 [ %429, %427 ], [ %424, %.backedge.12.i.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_backedge12ii_125) & (memory_controller_waitrequest == 1'd0)) & (main_backedge12ii_426 == 1'd1))) begin
		main_backedge13ii_div0be13ii_reg <= main_backedge13ii_div0be13ii;
		if (start == 1'b0 && ^(main_backedge13ii_div0be13ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_backedge13ii_div0be13ii_reg"); $finish; end
	end
	/* main: %.backedge.13.i.i*/
	/*   %div.0.be.13.i.i = phi i16 [ %429, %427 ], [ %424, %.backedge.12.i.i ]*/
	if (((cur_state == LEGUP_F_main_BB__427_126) & (memory_controller_waitrequest == 1'd0))) begin
		main_backedge13ii_div0be13ii_reg <= main_backedge13ii_div0be13ii;
		if (start == 1'b0 && ^(main_backedge13ii_div0be13ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_backedge13ii_div0be13ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.backedge.13.i.i*/
	/*   %430 = shl i16 %div.0.be.13.i.i, 1*/
		main_backedge13ii_430 = (main_backedge13ii_div0be13ii_reg <<< (16'd1 % 16'd16));
end
always @(posedge clk) begin
	/* main: %.backedge.13.i.i*/
	/*   %430 = shl i16 %div.0.be.13.i.i, 1*/
	if ((cur_state == LEGUP_F_main_BB_backedge13ii_127)) begin
		main_backedge13ii_430_reg <= main_backedge13ii_430;
		if (start == 1'b0 && ^(main_backedge13ii_430) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_backedge13ii_430_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.backedge.13.i.i*/
	/*   %431 = shl i32 %L_num.0.be.13.i.i, 1*/
		main_backedge13ii_431 = (main_backedge13ii_L_num0be13ii_reg <<< (32'd1 % 32));
end
always @(posedge clk) begin
	/* main: %.backedge.13.i.i*/
	/*   %431 = shl i32 %L_num.0.be.13.i.i, 1*/
	if ((cur_state == LEGUP_F_main_BB_backedge13ii_127)) begin
		main_backedge13ii_431_reg <= main_backedge13ii_431;
		if (start == 1'b0 && ^(main_backedge13ii_431) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_backedge13ii_431_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.backedge.13.i.i*/
	/*   %not..i.i = icmp sge i32 %431, %347*/
		main_backedge13ii_notii = ($signed(main_backedge13ii_431) >= $signed(main_346_347_reg));
end
always @(posedge clk) begin
	/* main: %.backedge.13.i.i*/
	/*   %not..i.i = icmp sge i32 %431, %347*/
	if ((cur_state == LEGUP_F_main_BB_backedge13ii_127)) begin
		main_backedge13ii_notii_reg <= main_backedge13ii_notii;
		if (start == 1'b0 && ^(main_backedge13ii_notii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_backedge13ii_notii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.backedge.13.i.i*/
	/*   %432 = zext i1 %not..i.i to i16*/
		main_backedge13ii_432 = main_backedge13ii_notii;
end
always @(posedge clk) begin
	/* main: %.backedge.13.i.i*/
	/*   %432 = zext i1 %not..i.i to i16*/
	if ((cur_state == LEGUP_F_main_BB_backedge13ii_127)) begin
		main_backedge13ii_432_reg <= main_backedge13ii_432;
		if (start == 1'b0 && ^(main_backedge13ii_432) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_backedge13ii_432_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.backedge.13.i.i*/
	/*   %.4.i.i = or i16 %430, %432*/
		main_backedge13ii_4ii = (main_backedge13ii_430 | main_backedge13ii_432);
end
always @(posedge clk) begin
	/* main: %.backedge.13.i.i*/
	/*   %.4.i.i = or i16 %430, %432*/
	if ((cur_state == LEGUP_F_main_BB_backedge13ii_127)) begin
		main_backedge13ii_4ii_reg <= main_backedge13ii_4ii;
		if (start == 1'b0 && ^(main_backedge13ii_4ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_backedge13ii_4ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_div.exit.i*/
	/*   %433 = phi i16 [ %.4.i.i, %.backedge.13.i.i ], [ 0, %346 ]*/
	if ((((cur_state == LEGUP_F_main_BB__346_100) & (memory_controller_waitrequest == 1'd0)) & (main_346_348 == 1'd1))) begin
		main_gsm_divexiti_433 = 16'd0;
	end
	/* main: %gsm_div.exit.i*/
	/*   %433 = phi i16 [ %.4.i.i, %.backedge.13.i.i ], [ 0, %346 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_backedge13ii_127) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_gsm_divexiti_433 = main_backedge13ii_4ii;
	end
end
always @(posedge clk) begin
	/* main: %gsm_div.exit.i*/
	/*   %433 = phi i16 [ %.4.i.i, %.backedge.13.i.i ], [ 0, %346 ]*/
	if ((((cur_state == LEGUP_F_main_BB__346_100) & (memory_controller_waitrequest == 1'd0)) & (main_346_348 == 1'd1))) begin
		main_gsm_divexiti_433_reg <= main_gsm_divexiti_433;
		if (start == 1'b0 && ^(main_gsm_divexiti_433) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_divexiti_433_reg"); $finish; end
	end
	/* main: %gsm_div.exit.i*/
	/*   %433 = phi i16 [ %.4.i.i, %.backedge.13.i.i ], [ 0, %346 ]*/
	if (((cur_state == LEGUP_F_main_BB_backedge13ii_127) & (memory_controller_waitrequest == 1'd0))) begin
		main_gsm_divexiti_433_reg <= main_gsm_divexiti_433;
		if (start == 1'b0 && ^(main_gsm_divexiti_433) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_divexiti_433_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_div.exit.i*/
	/*   %434 = load i16* %326, align 2, !tbaa !1*/
		main_gsm_divexiti_434 = main_0_Pi_out_a;
end
always @(posedge clk) begin
	/* main: %gsm_div.exit.i*/
	/*   %434 = load i16* %326, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_gsm_divexiti_130)) begin
		main_gsm_divexiti_434_reg <= main_gsm_divexiti_434;
		if (start == 1'b0 && ^(main_gsm_divexiti_434) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_divexiti_434_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_div.exit.i*/
	/*   %435 = icmp sgt i16 %434, 0*/
		main_gsm_divexiti_435 = ($signed(main_gsm_divexiti_434) > $signed(16'd0));
end
always @(posedge clk) begin
	/* main: %gsm_div.exit.i*/
	/*   %435 = icmp sgt i16 %434, 0*/
	if ((cur_state == LEGUP_F_main_BB_gsm_divexiti_130)) begin
		main_gsm_divexiti_435_reg <= main_gsm_divexiti_435;
		if (start == 1'b0 && ^(main_gsm_divexiti_435) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_divexiti_435_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %436*/
	/*   %437 = sub i16 0, %433*/
		main_436_437 = main_signed_subtract_16_0;
end
always @(*) begin
/* main: %436*/
/*   %437 = sub i16 0, %433*/
	main_436_437_reg = main_12_14_reg;
end
always @(*) begin
	/* main: %438*/
	/*   %439 = phi i16 [ %437, %436 ], [ %433, %gsm_div.exit.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_gsm_divexiti_130) & (memory_controller_waitrequest == 1'd0)) & (main_gsm_divexiti_435 == 1'd0))) begin
		main_438_439 = main_gsm_divexiti_433_reg;
	end
	/* main: %438*/
	/*   %439 = phi i16 [ %437, %436 ], [ %433, %gsm_div.exit.i ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__436_132) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_438_439 = main_436_437_reg;
	end
end
always @(posedge clk) begin
	/* main: %438*/
	/*   %439 = phi i16 [ %437, %436 ], [ %433, %gsm_div.exit.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_gsm_divexiti_130) & (memory_controller_waitrequest == 1'd0)) & (main_gsm_divexiti_435 == 1'd0))) begin
		main_438_439_reg <= main_438_439;
		if (start == 1'b0 && ^(main_438_439) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_438_439_reg"); $finish; end
	end
	/* main: %438*/
	/*   %439 = phi i16 [ %437, %436 ], [ %433, %gsm_div.exit.i ]*/
	if (((cur_state == LEGUP_F_main_BB__436_132) & (memory_controller_waitrequest == 1'd0))) begin
		main_438_439_reg <= main_438_439;
		if (start == 1'b0 && ^(main_438_439) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_438_439_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %438*/
	/*   %440 = icmp eq i32 %n.029.i, 8*/
		main_438_440 = (main_334_n029i_reg == 32'd8);
end
always @(posedge clk) begin
	/* main: %438*/
	/*   %440 = icmp eq i32 %n.029.i, 8*/
	if ((cur_state == LEGUP_F_main_BB__438_133)) begin
		main_438_440_reg <= main_438_440;
		if (start == 1'b0 && ^(main_438_440) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_438_440_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %441*/
	/*   %442 = load i16* %326, align 2, !tbaa !1*/
		main_441_442 = main_0_Pi_out_a;
end
always @(posedge clk) begin
	/* main: %441*/
	/*   %442 = load i16* %326, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__441_135)) begin
		main_441_442_reg <= main_441_442;
		if (start == 1'b0 && ^(main_441_442) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_441_442_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %441*/
	/*   %443 = icmp eq i16 %439, -32768*/
		main_441_443 = (main_438_439_reg == -16'd32768);
end
always @(posedge clk) begin
	/* main: %441*/
	/*   %443 = icmp eq i16 %439, -32768*/
	if ((cur_state == LEGUP_F_main_BB__441_134)) begin
		main_441_443_reg <= main_441_443;
		if (start == 1'b0 && ^(main_441_443) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_441_443_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %441*/
	/*   %444 = icmp eq i16 %442, -32768*/
		main_441_444 = (main_441_442 == -16'd32768);
end
always @(posedge clk) begin
	/* main: %441*/
	/*   %444 = icmp eq i16 %442, -32768*/
	if ((cur_state == LEGUP_F_main_BB__441_135)) begin
		main_441_444_reg <= main_441_444;
		if (start == 1'b0 && ^(main_441_444) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_441_444_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %441*/
	/*   %or.cond.i9.i = and i1 %443, %444*/
		main_441_orcondi9i = (main_441_443_reg & main_441_444);
end
always @(posedge clk) begin
	/* main: %441*/
	/*   %or.cond.i9.i = and i1 %443, %444*/
	if ((cur_state == LEGUP_F_main_BB__441_135)) begin
		main_441_orcondi9i_reg <= main_441_orcondi9i;
		if (start == 1'b0 && ^(main_441_orcondi9i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_441_orcondi9i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %445*/
	/*   %446 = sext i16 %439 to i32*/
		main_445_446 = $signed(main_438_439_reg);
end
always @(posedge clk) begin
	/* main: %445*/
	/*   %446 = sext i16 %439 to i32*/
	if ((cur_state == LEGUP_F_main_BB__445_136)) begin
		main_445_446_reg <= main_445_446;
		if (start == 1'b0 && ^(main_445_446) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_445_446_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %445*/
	/*   %447 = sext i16 %442 to i32*/
		main_445_447 = $signed(main_441_442_reg);
end
always @(posedge clk) begin
	/* main: %445*/
	/*   %447 = sext i16 %442 to i32*/
	if ((cur_state == LEGUP_F_main_BB__445_136)) begin
		main_445_447_reg <= main_445_447;
		if (start == 1'b0 && ^(main_445_447) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_445_447_reg"); $finish; end
	end
end
always @(*) begin
	main_445_448 = main_signed_multiply_32_0;
end
always @(*) begin
/* main: %445*/
/*   %448 = mul nsw i32 %446, %447*/
	main_445_448_reg = main_74_76_reg;
end
always @(*) begin
	/* main: %445*/
	/*   %449 = add nsw i32 %447, 16384*/
		main_445_449 = main_signed_add_32_0;
end
always @(*) begin
/* main: %445*/
/*   %449 = add nsw i32 %447, 16384*/
	main_445_449_reg = main_1_gep_reg;
end
always @(*) begin
	/* main: %445*/
	/*   %450 = add i32 %449, %448*/
		main_445_450 = main_signed_add_32_0;
end
always @(*) begin
/* main: %445*/
/*   %450 = add i32 %449, %448*/
	main_445_450_reg = main_1_5_reg;
end
always @(*) begin
	/* main: %445*/
	/*   %451 = shl i32 %450, 1*/
		main_445_451 = (main_445_450 <<< (32'd1 % 32));
end
always @(posedge clk) begin
	/* main: %445*/
	/*   %451 = shl i32 %450, 1*/
	if ((cur_state == LEGUP_F_main_BB__445_137)) begin
		main_445_451_reg <= main_445_451;
		if (start == 1'b0 && ^(main_445_451) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_445_451_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %445*/
	/*   %phitmp.i11 = ashr i32 %451, 16*/
		main_445_phitmpi11 = ($signed(main_445_451) >>> 32'd16);
end
always @(posedge clk) begin
	/* main: %445*/
	/*   %phitmp.i11 = ashr i32 %451, 16*/
	if ((cur_state == LEGUP_F_main_BB__445_137)) begin
		main_445_phitmpi11_reg <= main_445_phitmpi11;
		if (start == 1'b0 && ^(main_445_phitmpi11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_445_phitmpi11_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_mult_r.exit11.i*/
	/*   %.0.i10.i = phi i32 [ %phitmp.i11, %445 ], [ 32767, %441 ]*/
	if ((((cur_state == LEGUP_F_main_BB__441_135) & (memory_controller_waitrequest == 1'd0)) & (main_441_orcondi9i == 1'd1))) begin
		main_gsm_mult_rexit11i_0i10i = 32'd32767;
	end
	/* main: %gsm_mult_r.exit11.i*/
	/*   %.0.i10.i = phi i32 [ %phitmp.i11, %445 ], [ 32767, %441 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__445_137) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_gsm_mult_rexit11i_0i10i = main_445_phitmpi11;
	end
end
always @(posedge clk) begin
	/* main: %gsm_mult_r.exit11.i*/
	/*   %.0.i10.i = phi i32 [ %phitmp.i11, %445 ], [ 32767, %441 ]*/
	if ((((cur_state == LEGUP_F_main_BB__441_135) & (memory_controller_waitrequest == 1'd0)) & (main_441_orcondi9i == 1'd1))) begin
		main_gsm_mult_rexit11i_0i10i_reg <= main_gsm_mult_rexit11i_0i10i;
		if (start == 1'b0 && ^(main_gsm_mult_rexit11i_0i10i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_mult_rexit11i_0i10i_reg"); $finish; end
	end
	/* main: %gsm_mult_r.exit11.i*/
	/*   %.0.i10.i = phi i32 [ %phitmp.i11, %445 ], [ 32767, %441 ]*/
	if (((cur_state == LEGUP_F_main_BB__445_137) & (memory_controller_waitrequest == 1'd0))) begin
		main_gsm_mult_rexit11i_0i10i_reg <= main_gsm_mult_rexit11i_0i10i;
		if (start == 1'b0 && ^(main_gsm_mult_rexit11i_0i10i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_mult_rexit11i_0i10i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_mult_r.exit11.i*/
	/*   %452 = load i16* %325, align 2, !tbaa !1*/
		main_gsm_mult_rexit11i_452 = main_0_Pi_out_a;
end
always @(posedge clk) begin
	/* main: %gsm_mult_r.exit11.i*/
	/*   %452 = load i16* %325, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_gsm_mult_rexit11i_139)) begin
		main_gsm_mult_rexit11i_452_reg <= main_gsm_mult_rexit11i_452;
		if (start == 1'b0 && ^(main_gsm_mult_rexit11i_452) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_mult_rexit11i_452_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_mult_r.exit11.i*/
	/*   %453 = sext i16 %452 to i32*/
		main_gsm_mult_rexit11i_453 = $signed(main_gsm_mult_rexit11i_452);
end
always @(posedge clk) begin
	/* main: %gsm_mult_r.exit11.i*/
	/*   %453 = sext i16 %452 to i32*/
	if ((cur_state == LEGUP_F_main_BB_gsm_mult_rexit11i_139)) begin
		main_gsm_mult_rexit11i_453_reg <= main_gsm_mult_rexit11i_453;
		if (start == 1'b0 && ^(main_gsm_mult_rexit11i_453) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_mult_rexit11i_453_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_mult_r.exit11.i*/
	/*   %454 = add nsw i32 %453, %.0.i10.i*/
		main_gsm_mult_rexit11i_454 = main_signed_add_32_0;
end
always @(*) begin
/* main: %gsm_mult_r.exit11.i*/
/*   %454 = add nsw i32 %453, %.0.i10.i*/
	main_gsm_mult_rexit11i_454_reg = main_1_gep_reg;
end
always @(*) begin
	/* main: %gsm_mult_r.exit11.i*/
	/*   %455 = icmp slt i32 %454, -32768*/
		main_gsm_mult_rexit11i_455 = ($signed(main_gsm_mult_rexit11i_454) < $signed(-32'd32768));
end
always @(posedge clk) begin
	/* main: %gsm_mult_r.exit11.i*/
	/*   %455 = icmp slt i32 %454, -32768*/
	if ((cur_state == LEGUP_F_main_BB_gsm_mult_rexit11i_139)) begin
		main_gsm_mult_rexit11i_455_reg <= main_gsm_mult_rexit11i_455;
		if (start == 1'b0 && ^(main_gsm_mult_rexit11i_455) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_mult_rexit11i_455_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %456*/
	/*   %457 = icmp sgt i32 %454, 32767*/
		main_456_457 = ($signed(main_gsm_mult_rexit11i_454_reg) > $signed(32'd32767));
end
always @(posedge clk) begin
	/* main: %456*/
	/*   %457 = icmp sgt i32 %454, 32767*/
	if ((cur_state == LEGUP_F_main_BB__456_140)) begin
		main_456_457_reg <= main_456_457;
		if (start == 1'b0 && ^(main_456_457) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_456_457_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %456*/
	/*   %458 = trunc i32 %454 to i16*/
		main_456_458 = main_gsm_mult_rexit11i_454_reg[15:0];
end
always @(posedge clk) begin
	/* main: %456*/
	/*   %458 = trunc i32 %454 to i16*/
	if ((cur_state == LEGUP_F_main_BB__456_140)) begin
		main_456_458_reg <= main_456_458;
		if (start == 1'b0 && ^(main_456_458) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_456_458_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %456*/
	/*   %phitmp.i7.i = select i1 %457, i16 32767, i16 %458*/
		main_456_phitmpi7i = (main_456_457 ? 16'd32767 : main_456_458);
end
always @(posedge clk) begin
	/* main: %456*/
	/*   %phitmp.i7.i = select i1 %457, i16 32767, i16 %458*/
	if ((cur_state == LEGUP_F_main_BB__456_140)) begin
		main_456_phitmpi7i_reg <= main_456_phitmpi7i;
		if (start == 1'b0 && ^(main_456_phitmpi7i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_456_phitmpi7i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_add.exit8.i*/
	/*   %459 = phi i16 [ -32768, %gsm_mult_r.exit11.i ], [ %phitmp.i7.i, %456 ]*/
	if ((((cur_state == LEGUP_F_main_BB_gsm_mult_rexit11i_139) & (memory_controller_waitrequest == 1'd0)) & (main_gsm_mult_rexit11i_455 == 1'd1))) begin
		main_gsm_addexit8i_459 = -16'd32768;
	end
	/* main: %gsm_add.exit8.i*/
	/*   %459 = phi i16 [ -32768, %gsm_mult_r.exit11.i ], [ %phitmp.i7.i, %456 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__456_140) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_gsm_addexit8i_459 = main_456_phitmpi7i;
	end
end
always @(posedge clk) begin
	/* main: %gsm_add.exit8.i*/
	/*   %459 = phi i16 [ -32768, %gsm_mult_r.exit11.i ], [ %phitmp.i7.i, %456 ]*/
	if ((((cur_state == LEGUP_F_main_BB_gsm_mult_rexit11i_139) & (memory_controller_waitrequest == 1'd0)) & (main_gsm_mult_rexit11i_455 == 1'd1))) begin
		main_gsm_addexit8i_459_reg <= main_gsm_addexit8i_459;
		if (start == 1'b0 && ^(main_gsm_addexit8i_459) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_addexit8i_459_reg"); $finish; end
	end
	/* main: %gsm_add.exit8.i*/
	/*   %459 = phi i16 [ -32768, %gsm_mult_r.exit11.i ], [ %phitmp.i7.i, %456 ]*/
	if (((cur_state == LEGUP_F_main_BB__456_140) & (memory_controller_waitrequest == 1'd0))) begin
		main_gsm_addexit8i_459_reg <= main_gsm_addexit8i_459;
		if (start == 1'b0 && ^(main_gsm_addexit8i_459) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_addexit8i_459_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_add.exit8.i*/
	/*   %460 = sub nsw i32 8, %n.029.i*/
		main_gsm_addexit8i_460 = main_signed_subtract_32_0;
end
always @(*) begin
/* main: %gsm_add.exit8.i*/
/*   %460 = sub nsw i32 8, %n.029.i*/
	main_gsm_addexit8i_460_reg = main_62_63_reg;
end
always @(*) begin
	/* main: %gsm_add.exit8.i*/
	/*   %461 = icmp slt i32 %460, 1*/
		main_gsm_addexit8i_461 = ($signed(main_gsm_addexit8i_460) < $signed(32'd1));
end
always @(posedge clk) begin
	/* main: %gsm_add.exit8.i*/
	/*   %461 = icmp slt i32 %460, 1*/
	if ((cur_state == LEGUP_F_main_BB_gsm_addexit8i_141)) begin
		main_gsm_addexit8i_461_reg <= main_gsm_addexit8i_461;
		if (start == 1'b0 && ^(main_gsm_addexit8i_461) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_addexit8i_461_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph27.i*/
	/*   %m.026.i = phi i32 [ %474, %gsm_add.exit.i ], [ 1, %gsm_add.exit8.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_gsm_addexit8i_142) & (memory_controller_waitrequest == 1'd0)) & (main_gsm_addexit8i_461_reg == 1'd0))) begin
		main_lrph27i_m026i = 32'd1;
	end
	/* main: %.lr.ph27.i*/
	/*   %m.026.i = phi i32 [ %474, %gsm_add.exit.i ], [ 1, %gsm_add.exit8.i ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_gsm_addexiti_163) & (memory_controller_waitrequest == 1'd0)) & (main_gsm_addexiti_exitcond36i_reg == 1'd0))) */ begin
		main_lrph27i_m026i = main_gsm_mult_rexit6i_474_reg;
	end
end
always @(posedge clk) begin
	/* main: %.lr.ph27.i*/
	/*   %m.026.i = phi i32 [ %474, %gsm_add.exit.i ], [ 1, %gsm_add.exit8.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_gsm_addexit8i_142) & (memory_controller_waitrequest == 1'd0)) & (main_gsm_addexit8i_461_reg == 1'd0))) begin
		main_lrph27i_m026i_reg <= main_lrph27i_m026i;
		if (start == 1'b0 && ^(main_lrph27i_m026i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph27i_m026i_reg"); $finish; end
	end
	/* main: %.lr.ph27.i*/
	/*   %m.026.i = phi i32 [ %474, %gsm_add.exit.i ], [ 1, %gsm_add.exit8.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_gsm_addexiti_163) & (memory_controller_waitrequest == 1'd0)) & (main_gsm_addexiti_exitcond36i_reg == 1'd0))) begin
		main_lrph27i_m026i_reg <= main_lrph27i_m026i;
		if (start == 1'b0 && ^(main_lrph27i_m026i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph27i_m026i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph27.i*/
	/*   %gep_int110 = ptrtoint [9 x i16]* %K.i to i32*/
if (reset) begin main_lrph27i_gep_int110 = 0; end
		main_lrph27i_gep_int110 = 1'd0;
end
always @(posedge clk) begin
	/* main: %.lr.ph27.i*/
	/*   %gep_int110 = ptrtoint [9 x i16]* %K.i to i32*/
	if ((cur_state == LEGUP_F_main_BB_lrph27i_143)) begin
		main_lrph27i_gep_int110_reg <= main_lrph27i_gep_int110;
		if (start == 1'b0 && ^(main_lrph27i_gep_int110) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph27i_gep_int110_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph27.i*/
	/*   %gep_array111 = mul i32 %m.026.i, 2*/
		main_lrph27i_gep_array111 = (main_lrph27i_m026i_reg * 32'd2);
end
always @(posedge clk) begin
	/* main: %.lr.ph27.i*/
	/*   %gep_array111 = mul i32 %m.026.i, 2*/
	if ((cur_state == LEGUP_F_main_BB_lrph27i_143)) begin
		main_lrph27i_gep_array111_reg <= main_lrph27i_gep_array111;
		if (start == 1'b0 && ^(main_lrph27i_gep_array111) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph27i_gep_array111_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph27.i*/
	/*   %gep112 = add i32 %gep_int110, %gep_array111*/
		main_lrph27i_gep112 = main_signed_add_32_0;
end
always @(*) begin
/* main: %.lr.ph27.i*/
/*   %gep112 = add i32 %gep_int110, %gep_array111*/
	main_lrph27i_gep112_reg = main_1_gep_reg;
end
always @(*) begin
	/* main: %.lr.ph27.i*/
	/*   %462 = inttoptr i32 %gep112 to i16**/
		main_lrph27i_462 = main_lrph27i_gep112;
end
always @(posedge clk) begin
	/* main: %.lr.ph27.i*/
	/*   %462 = inttoptr i32 %gep112 to i16**/
	if ((cur_state == LEGUP_F_main_BB_lrph27i_144)) begin
		main_lrph27i_462_reg <= main_lrph27i_462;
		if (start == 1'b0 && ^(main_lrph27i_462) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph27i_462_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph27.i*/
	/*   %463 = load i16* %462, align 2, !tbaa !1*/
		main_lrph27i_463 = main_0_Ki_out_a;
end
always @(posedge clk) begin
	/* main: %.lr.ph27.i*/
	/*   %463 = load i16* %462, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph27i_145)) begin
		main_lrph27i_463_reg <= main_lrph27i_463;
		if (start == 1'b0 && ^(main_lrph27i_463) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph27i_463_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph27.i*/
	/*   %464 = load i16* %.128.i, align 2, !tbaa !1*/
		main_lrph27i_464 = memory_controller_out_a[15:0];
end
always @(posedge clk) begin
	/* main: %.lr.ph27.i*/
	/*   %464 = load i16* %.128.i, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph27i_145)) begin
		main_lrph27i_464_reg <= main_lrph27i_464;
		if (start == 1'b0 && ^(main_lrph27i_464) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph27i_464_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph27.i*/
	/*   %465 = icmp eq i16 %464, -32768*/
		main_lrph27i_465 = (main_lrph27i_464 == -16'd32768);
end
always @(posedge clk) begin
	/* main: %.lr.ph27.i*/
	/*   %465 = icmp eq i16 %464, -32768*/
	if ((cur_state == LEGUP_F_main_BB_lrph27i_145)) begin
		main_lrph27i_465_reg <= main_lrph27i_465;
		if (start == 1'b0 && ^(main_lrph27i_465) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph27i_465_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph27.i*/
	/*   %466 = icmp eq i16 %463, -32768*/
		main_lrph27i_466 = (main_lrph27i_463 == -16'd32768);
end
always @(posedge clk) begin
	/* main: %.lr.ph27.i*/
	/*   %466 = icmp eq i16 %463, -32768*/
	if ((cur_state == LEGUP_F_main_BB_lrph27i_145)) begin
		main_lrph27i_466_reg <= main_lrph27i_466;
		if (start == 1'b0 && ^(main_lrph27i_466) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph27i_466_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph27.i*/
	/*   %or.cond.i4.i = and i1 %465, %466*/
		main_lrph27i_orcondi4i = (main_lrph27i_465 & main_lrph27i_466);
end
always @(posedge clk) begin
	/* main: %.lr.ph27.i*/
	/*   %or.cond.i4.i = and i1 %465, %466*/
	if ((cur_state == LEGUP_F_main_BB_lrph27i_145)) begin
		main_lrph27i_orcondi4i_reg <= main_lrph27i_orcondi4i;
		if (start == 1'b0 && ^(main_lrph27i_orcondi4i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph27i_orcondi4i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %467*/
	/*   %468 = sext i16 %464 to i32*/
		main_467_468 = $signed(main_lrph27i_464_reg);
end
always @(posedge clk) begin
	/* main: %467*/
	/*   %468 = sext i16 %464 to i32*/
	if ((cur_state == LEGUP_F_main_BB__467_146)) begin
		main_467_468_reg <= main_467_468;
		if (start == 1'b0 && ^(main_467_468) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_467_468_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %467*/
	/*   %469 = sext i16 %463 to i32*/
		main_467_469 = $signed(main_lrph27i_463_reg);
end
always @(posedge clk) begin
	/* main: %467*/
	/*   %469 = sext i16 %463 to i32*/
	if ((cur_state == LEGUP_F_main_BB__467_146)) begin
		main_467_469_reg <= main_467_469;
		if (start == 1'b0 && ^(main_467_469) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_467_469_reg"); $finish; end
	end
end
always @(*) begin
	main_467_470 = main_signed_multiply_32_0;
end
always @(*) begin
/* main: %467*/
/*   %470 = mul nsw i32 %468, %469*/
	main_467_470_reg = main_74_76_reg;
end
always @(*) begin
	/* main: %467*/
	/*   %471 = add nsw i32 %469, 16384*/
		main_467_471 = main_signed_add_32_0;
end
always @(*) begin
/* main: %467*/
/*   %471 = add nsw i32 %469, 16384*/
	main_467_471_reg = main_1_gep_reg;
end
always @(*) begin
	/* main: %467*/
	/*   %472 = add i32 %471, %470*/
		main_467_472 = main_signed_add_32_0;
end
always @(*) begin
/* main: %467*/
/*   %472 = add i32 %471, %470*/
	main_467_472_reg = main_1_5_reg;
end
always @(*) begin
	/* main: %467*/
	/*   %473 = shl i32 %472, 1*/
		main_467_473 = (main_467_472 <<< (32'd1 % 32));
end
always @(posedge clk) begin
	/* main: %467*/
	/*   %473 = shl i32 %472, 1*/
	if ((cur_state == LEGUP_F_main_BB__467_147)) begin
		main_467_473_reg <= main_467_473;
		if (start == 1'b0 && ^(main_467_473) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_467_473_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %467*/
	/*   %phitmp12.i = ashr i32 %473, 16*/
		main_467_phitmp12i = ($signed(main_467_473) >>> 32'd16);
end
always @(posedge clk) begin
	/* main: %467*/
	/*   %phitmp12.i = ashr i32 %473, 16*/
	if ((cur_state == LEGUP_F_main_BB__467_147)) begin
		main_467_phitmp12i_reg <= main_467_phitmp12i;
		if (start == 1'b0 && ^(main_467_phitmp12i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_467_phitmp12i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_mult_r.exit6.i*/
	/*   %.0.i5.i = phi i32 [ %phitmp12.i, %467 ], [ 32767, %.lr.ph27.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_lrph27i_145) & (memory_controller_waitrequest == 1'd0)) & (main_lrph27i_orcondi4i == 1'd1))) begin
		main_gsm_mult_rexit6i_0i5i = 32'd32767;
	end
	/* main: %gsm_mult_r.exit6.i*/
	/*   %.0.i5.i = phi i32 [ %phitmp12.i, %467 ], [ 32767, %.lr.ph27.i ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__467_147) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_gsm_mult_rexit6i_0i5i = main_467_phitmp12i;
	end
end
always @(posedge clk) begin
	/* main: %gsm_mult_r.exit6.i*/
	/*   %.0.i5.i = phi i32 [ %phitmp12.i, %467 ], [ 32767, %.lr.ph27.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_lrph27i_145) & (memory_controller_waitrequest == 1'd0)) & (main_lrph27i_orcondi4i == 1'd1))) begin
		main_gsm_mult_rexit6i_0i5i_reg <= main_gsm_mult_rexit6i_0i5i;
		if (start == 1'b0 && ^(main_gsm_mult_rexit6i_0i5i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_mult_rexit6i_0i5i_reg"); $finish; end
	end
	/* main: %gsm_mult_r.exit6.i*/
	/*   %.0.i5.i = phi i32 [ %phitmp12.i, %467 ], [ 32767, %.lr.ph27.i ]*/
	if (((cur_state == LEGUP_F_main_BB__467_147) & (memory_controller_waitrequest == 1'd0))) begin
		main_gsm_mult_rexit6i_0i5i_reg <= main_gsm_mult_rexit6i_0i5i;
		if (start == 1'b0 && ^(main_gsm_mult_rexit6i_0i5i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_mult_rexit6i_0i5i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_mult_r.exit6.i*/
	/*   %474 = add nsw i32 %m.026.i, 1*/
		main_gsm_mult_rexit6i_474 = main_signed_add_32_0;
end
always @(posedge clk) begin
	/* main: %gsm_mult_r.exit6.i*/
	/*   %474 = add nsw i32 %m.026.i, 1*/
	if ((cur_state == LEGUP_F_main_BB_gsm_mult_rexit6i_148)) begin
		main_gsm_mult_rexit6i_474_reg <= main_gsm_mult_rexit6i_474;
		if (start == 1'b0 && ^(main_gsm_mult_rexit6i_474) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_mult_rexit6i_474_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_mult_r.exit6.i*/
	/*   %gep_int113 = ptrtoint [9 x i16]* %P.i to i32*/
if (reset) begin main_gsm_mult_rexit6i_gep_int113 = 0; end
		main_gsm_mult_rexit6i_gep_int113 = 1'd0;
end
always @(posedge clk) begin
	/* main: %gsm_mult_r.exit6.i*/
	/*   %gep_int113 = ptrtoint [9 x i16]* %P.i to i32*/
	if ((cur_state == LEGUP_F_main_BB_gsm_mult_rexit6i_148)) begin
		main_gsm_mult_rexit6i_gep_int113_reg <= main_gsm_mult_rexit6i_gep_int113;
		if (start == 1'b0 && ^(main_gsm_mult_rexit6i_gep_int113) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_mult_rexit6i_gep_int113_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_mult_r.exit6.i*/
	/*   %gep_array114 = mul i32 %474, 2*/
		main_gsm_mult_rexit6i_gep_array114 = (main_gsm_mult_rexit6i_474_reg * 32'd2);
end
always @(posedge clk) begin
	/* main: %gsm_mult_r.exit6.i*/
	/*   %gep_array114 = mul i32 %474, 2*/
	if ((cur_state == LEGUP_F_main_BB_gsm_mult_rexit6i_149)) begin
		main_gsm_mult_rexit6i_gep_array114_reg <= main_gsm_mult_rexit6i_gep_array114;
		if (start == 1'b0 && ^(main_gsm_mult_rexit6i_gep_array114) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_mult_rexit6i_gep_array114_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_mult_r.exit6.i*/
	/*   %gep115 = add i32 %gep_int113, %gep_array114*/
		main_gsm_mult_rexit6i_gep115 = main_signed_add_32_0;
end
always @(*) begin
/* main: %gsm_mult_r.exit6.i*/
/*   %gep115 = add i32 %gep_int113, %gep_array114*/
	main_gsm_mult_rexit6i_gep115_reg = main_1_gep_reg;
end
always @(*) begin
	/* main: %gsm_mult_r.exit6.i*/
	/*   %475 = inttoptr i32 %gep115 to i16**/
		main_gsm_mult_rexit6i_475 = main_gsm_mult_rexit6i_gep115;
end
always @(posedge clk) begin
	/* main: %gsm_mult_r.exit6.i*/
	/*   %475 = inttoptr i32 %gep115 to i16**/
	if ((cur_state == LEGUP_F_main_BB_gsm_mult_rexit6i_150)) begin
		main_gsm_mult_rexit6i_475_reg <= main_gsm_mult_rexit6i_475;
		if (start == 1'b0 && ^(main_gsm_mult_rexit6i_475) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_mult_rexit6i_475_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_mult_r.exit6.i*/
	/*   %476 = load i16* %475, align 2, !tbaa !1*/
		main_gsm_mult_rexit6i_476 = main_0_Pi_out_a;
end
always @(posedge clk) begin
	/* main: %gsm_mult_r.exit6.i*/
	/*   %476 = load i16* %475, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_gsm_mult_rexit6i_151)) begin
		main_gsm_mult_rexit6i_476_reg <= main_gsm_mult_rexit6i_476;
		if (start == 1'b0 && ^(main_gsm_mult_rexit6i_476) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_mult_rexit6i_476_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_mult_r.exit6.i*/
	/*   %477 = sext i16 %476 to i32*/
		main_gsm_mult_rexit6i_477 = $signed(main_gsm_mult_rexit6i_476);
end
always @(posedge clk) begin
	/* main: %gsm_mult_r.exit6.i*/
	/*   %477 = sext i16 %476 to i32*/
	if ((cur_state == LEGUP_F_main_BB_gsm_mult_rexit6i_151)) begin
		main_gsm_mult_rexit6i_477_reg <= main_gsm_mult_rexit6i_477;
		if (start == 1'b0 && ^(main_gsm_mult_rexit6i_477) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_mult_rexit6i_477_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_mult_r.exit6.i*/
	/*   %478 = add nsw i32 %477, %.0.i5.i*/
		main_gsm_mult_rexit6i_478 = main_signed_add_32_0;
end
always @(*) begin
/* main: %gsm_mult_r.exit6.i*/
/*   %478 = add nsw i32 %477, %.0.i5.i*/
	main_gsm_mult_rexit6i_478_reg = main_1_5_reg;
end
always @(*) begin
	/* main: %gsm_mult_r.exit6.i*/
	/*   %479 = icmp slt i32 %478, -32768*/
		main_gsm_mult_rexit6i_479 = ($signed(main_gsm_mult_rexit6i_478) < $signed(-32'd32768));
end
always @(posedge clk) begin
	/* main: %gsm_mult_r.exit6.i*/
	/*   %479 = icmp slt i32 %478, -32768*/
	if ((cur_state == LEGUP_F_main_BB_gsm_mult_rexit6i_151)) begin
		main_gsm_mult_rexit6i_479_reg <= main_gsm_mult_rexit6i_479;
		if (start == 1'b0 && ^(main_gsm_mult_rexit6i_479) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_mult_rexit6i_479_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %480*/
	/*   %481 = icmp sgt i32 %478, 32767*/
		main_480_481 = ($signed(main_gsm_mult_rexit6i_478_reg) > $signed(32'd32767));
end
always @(posedge clk) begin
	/* main: %480*/
	/*   %481 = icmp sgt i32 %478, 32767*/
	if ((cur_state == LEGUP_F_main_BB__480_152)) begin
		main_480_481_reg <= main_480_481;
		if (start == 1'b0 && ^(main_480_481) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_480_481_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %480*/
	/*   %482 = trunc i32 %478 to i16*/
		main_480_482 = main_gsm_mult_rexit6i_478_reg[15:0];
end
always @(posedge clk) begin
	/* main: %480*/
	/*   %482 = trunc i32 %478 to i16*/
	if ((cur_state == LEGUP_F_main_BB__480_152)) begin
		main_480_482_reg <= main_480_482;
		if (start == 1'b0 && ^(main_480_482) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_480_482_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %480*/
	/*   %phitmp.i2.i = select i1 %481, i16 32767, i16 %482*/
		main_480_phitmpi2i = (main_480_481 ? 16'd32767 : main_480_482);
end
always @(posedge clk) begin
	/* main: %480*/
	/*   %phitmp.i2.i = select i1 %481, i16 32767, i16 %482*/
	if ((cur_state == LEGUP_F_main_BB__480_152)) begin
		main_480_phitmpi2i_reg <= main_480_phitmpi2i;
		if (start == 1'b0 && ^(main_480_phitmpi2i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_480_phitmpi2i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_add.exit3.i*/
	/*   %483 = phi i16 [ -32768, %gsm_mult_r.exit6.i ], [ %phitmp.i2.i, %480 ]*/
	if ((((cur_state == LEGUP_F_main_BB_gsm_mult_rexit6i_151) & (memory_controller_waitrequest == 1'd0)) & (main_gsm_mult_rexit6i_479 == 1'd1))) begin
		main_gsm_addexit3i_483 = -16'd32768;
	end
	/* main: %gsm_add.exit3.i*/
	/*   %483 = phi i16 [ -32768, %gsm_mult_r.exit6.i ], [ %phitmp.i2.i, %480 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__480_152) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_gsm_addexit3i_483 = main_480_phitmpi2i;
	end
end
always @(posedge clk) begin
	/* main: %gsm_add.exit3.i*/
	/*   %483 = phi i16 [ -32768, %gsm_mult_r.exit6.i ], [ %phitmp.i2.i, %480 ]*/
	if ((((cur_state == LEGUP_F_main_BB_gsm_mult_rexit6i_151) & (memory_controller_waitrequest == 1'd0)) & (main_gsm_mult_rexit6i_479 == 1'd1))) begin
		main_gsm_addexit3i_483_reg <= main_gsm_addexit3i_483;
		if (start == 1'b0 && ^(main_gsm_addexit3i_483) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_addexit3i_483_reg"); $finish; end
	end
	/* main: %gsm_add.exit3.i*/
	/*   %483 = phi i16 [ -32768, %gsm_mult_r.exit6.i ], [ %phitmp.i2.i, %480 ]*/
	if (((cur_state == LEGUP_F_main_BB__480_152) & (memory_controller_waitrequest == 1'd0))) begin
		main_gsm_addexit3i_483_reg <= main_gsm_addexit3i_483;
		if (start == 1'b0 && ^(main_gsm_addexit3i_483) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_addexit3i_483_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_add.exit3.i*/
	/*   %gep_int116 = ptrtoint [9 x i16]* %P.i to i32*/
if (reset) begin main_gsm_addexit3i_gep_int116 = 0; end
		main_gsm_addexit3i_gep_int116 = 1'd0;
end
always @(posedge clk) begin
	/* main: %gsm_add.exit3.i*/
	/*   %gep_int116 = ptrtoint [9 x i16]* %P.i to i32*/
	if ((cur_state == LEGUP_F_main_BB_gsm_addexit3i_153)) begin
		main_gsm_addexit3i_gep_int116_reg <= main_gsm_addexit3i_gep_int116;
		if (start == 1'b0 && ^(main_gsm_addexit3i_gep_int116) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_addexit3i_gep_int116_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_add.exit3.i*/
	/*   %gep_array117 = mul i32 %m.026.i, 2*/
		main_gsm_addexit3i_gep_array117 = (main_lrph27i_m026i_reg * 32'd2);
end
always @(posedge clk) begin
	/* main: %gsm_add.exit3.i*/
	/*   %gep_array117 = mul i32 %m.026.i, 2*/
	if ((cur_state == LEGUP_F_main_BB_gsm_addexit3i_153)) begin
		main_gsm_addexit3i_gep_array117_reg <= main_gsm_addexit3i_gep_array117;
		if (start == 1'b0 && ^(main_gsm_addexit3i_gep_array117) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_addexit3i_gep_array117_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_add.exit3.i*/
	/*   %gep118 = add i32 %gep_int116, %gep_array117*/
		main_gsm_addexit3i_gep118 = main_signed_add_32_0;
end
always @(*) begin
/* main: %gsm_add.exit3.i*/
/*   %gep118 = add i32 %gep_int116, %gep_array117*/
	main_gsm_addexit3i_gep118_reg = main_1_gep_reg;
end
always @(*) begin
	/* main: %gsm_add.exit3.i*/
	/*   %484 = inttoptr i32 %gep118 to i16**/
		main_gsm_addexit3i_484 = main_gsm_addexit3i_gep118;
end
always @(posedge clk) begin
	/* main: %gsm_add.exit3.i*/
	/*   %484 = inttoptr i32 %gep118 to i16**/
	if ((cur_state == LEGUP_F_main_BB_gsm_addexit3i_154)) begin
		main_gsm_addexit3i_484_reg <= main_gsm_addexit3i_484;
		if (start == 1'b0 && ^(main_gsm_addexit3i_484) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_addexit3i_484_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_add.exit3.i*/
	/*   %485 = load i16* %.128.i, align 2, !tbaa !1*/
		main_gsm_addexit3i_485 = memory_controller_out_a[15:0];
end
always @(posedge clk) begin
	/* main: %gsm_add.exit3.i*/
	/*   %485 = load i16* %.128.i, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_gsm_addexit3i_157)) begin
		main_gsm_addexit3i_485_reg <= main_gsm_addexit3i_485;
		if (start == 1'b0 && ^(main_gsm_addexit3i_485) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_addexit3i_485_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_add.exit3.i*/
	/*   %486 = icmp eq i16 %485, -32768*/
		main_gsm_addexit3i_486 = (main_gsm_addexit3i_485 == -16'd32768);
end
always @(posedge clk) begin
	/* main: %gsm_add.exit3.i*/
	/*   %486 = icmp eq i16 %485, -32768*/
	if ((cur_state == LEGUP_F_main_BB_gsm_addexit3i_157)) begin
		main_gsm_addexit3i_486_reg <= main_gsm_addexit3i_486;
		if (start == 1'b0 && ^(main_gsm_addexit3i_486) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_addexit3i_486_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_add.exit3.i*/
	/*   %487 = icmp eq i16 %476, -32768*/
		main_gsm_addexit3i_487 = (main_gsm_mult_rexit6i_476_reg == -16'd32768);
end
always @(posedge clk) begin
	/* main: %gsm_add.exit3.i*/
	/*   %487 = icmp eq i16 %476, -32768*/
	if ((cur_state == LEGUP_F_main_BB_gsm_addexit3i_153)) begin
		main_gsm_addexit3i_487_reg <= main_gsm_addexit3i_487;
		if (start == 1'b0 && ^(main_gsm_addexit3i_487) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_addexit3i_487_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_add.exit3.i*/
	/*   %or.cond.i.i = and i1 %486, %487*/
		main_gsm_addexit3i_orcondii = (main_gsm_addexit3i_486 & main_gsm_addexit3i_487_reg);
end
always @(posedge clk) begin
	/* main: %gsm_add.exit3.i*/
	/*   %or.cond.i.i = and i1 %486, %487*/
	if ((cur_state == LEGUP_F_main_BB_gsm_addexit3i_157)) begin
		main_gsm_addexit3i_orcondii_reg <= main_gsm_addexit3i_orcondii;
		if (start == 1'b0 && ^(main_gsm_addexit3i_orcondii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_addexit3i_orcondii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %488*/
	/*   %489 = sext i16 %485 to i32*/
		main_488_489 = $signed(main_gsm_addexit3i_485_reg);
end
always @(posedge clk) begin
	/* main: %488*/
	/*   %489 = sext i16 %485 to i32*/
	if ((cur_state == LEGUP_F_main_BB__488_158)) begin
		main_488_489_reg <= main_488_489;
		if (start == 1'b0 && ^(main_488_489) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_488_489_reg"); $finish; end
	end
end
always @(*) begin
	main_488_490 = main_signed_multiply_32_0;
end
always @(*) begin
/* main: %488*/
/*   %490 = mul nsw i32 %489, %477*/
	main_488_490_reg = main_74_76_reg;
end
always @(*) begin
	/* main: %488*/
	/*   %491 = add nsw i32 %477, 16384*/
		main_488_491 = main_signed_add_32_0;
end
always @(*) begin
/* main: %488*/
/*   %491 = add nsw i32 %477, 16384*/
	main_488_491_reg = main_1_gep_reg;
end
always @(*) begin
	/* main: %488*/
	/*   %492 = add i32 %491, %490*/
		main_488_492 = main_signed_add_32_0;
end
always @(*) begin
/* main: %488*/
/*   %492 = add i32 %491, %490*/
	main_488_492_reg = main_1_5_reg;
end
always @(*) begin
	/* main: %488*/
	/*   %493 = shl i32 %492, 1*/
		main_488_493 = (main_488_492 <<< (32'd1 % 32));
end
always @(posedge clk) begin
	/* main: %488*/
	/*   %493 = shl i32 %492, 1*/
	if ((cur_state == LEGUP_F_main_BB__488_159)) begin
		main_488_493_reg <= main_488_493;
		if (start == 1'b0 && ^(main_488_493) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_488_493_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %488*/
	/*   %phitmp13.i = ashr i32 %493, 16*/
		main_488_phitmp13i = ($signed(main_488_493) >>> 32'd16);
end
always @(posedge clk) begin
	/* main: %488*/
	/*   %phitmp13.i = ashr i32 %493, 16*/
	if ((cur_state == LEGUP_F_main_BB__488_159)) begin
		main_488_phitmp13i_reg <= main_488_phitmp13i;
		if (start == 1'b0 && ^(main_488_phitmp13i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_488_phitmp13i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_mult_r.exit.i13*/
	/*   %.0.i1.i12 = phi i32 [ %phitmp13.i, %488 ], [ 32767, %gsm_add.exit3.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_gsm_addexit3i_157) & (memory_controller_waitrequest == 1'd0)) & (main_gsm_addexit3i_orcondii == 1'd1))) begin
		main_gsm_mult_rexiti13_0i1i12 = 32'd32767;
	end
	/* main: %gsm_mult_r.exit.i13*/
	/*   %.0.i1.i12 = phi i32 [ %phitmp13.i, %488 ], [ 32767, %gsm_add.exit3.i ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__488_159) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_gsm_mult_rexiti13_0i1i12 = main_488_phitmp13i;
	end
end
always @(posedge clk) begin
	/* main: %gsm_mult_r.exit.i13*/
	/*   %.0.i1.i12 = phi i32 [ %phitmp13.i, %488 ], [ 32767, %gsm_add.exit3.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_gsm_addexit3i_157) & (memory_controller_waitrequest == 1'd0)) & (main_gsm_addexit3i_orcondii == 1'd1))) begin
		main_gsm_mult_rexiti13_0i1i12_reg <= main_gsm_mult_rexiti13_0i1i12;
		if (start == 1'b0 && ^(main_gsm_mult_rexiti13_0i1i12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_mult_rexiti13_0i1i12_reg"); $finish; end
	end
	/* main: %gsm_mult_r.exit.i13*/
	/*   %.0.i1.i12 = phi i32 [ %phitmp13.i, %488 ], [ 32767, %gsm_add.exit3.i ]*/
	if (((cur_state == LEGUP_F_main_BB__488_159) & (memory_controller_waitrequest == 1'd0))) begin
		main_gsm_mult_rexiti13_0i1i12_reg <= main_gsm_mult_rexiti13_0i1i12;
		if (start == 1'b0 && ^(main_gsm_mult_rexiti13_0i1i12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_mult_rexiti13_0i1i12_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_mult_r.exit.i13*/
	/*   %494 = sext i16 %463 to i32*/
		main_gsm_mult_rexiti13_494 = $signed(main_lrph27i_463_reg);
end
always @(posedge clk) begin
	/* main: %gsm_mult_r.exit.i13*/
	/*   %494 = sext i16 %463 to i32*/
	if ((cur_state == LEGUP_F_main_BB_gsm_mult_rexiti13_160)) begin
		main_gsm_mult_rexiti13_494_reg <= main_gsm_mult_rexiti13_494;
		if (start == 1'b0 && ^(main_gsm_mult_rexiti13_494) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_mult_rexiti13_494_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_mult_r.exit.i13*/
	/*   %495 = add nsw i32 %494, %.0.i1.i12*/
		main_gsm_mult_rexiti13_495 = main_signed_add_32_0;
end
always @(*) begin
/* main: %gsm_mult_r.exit.i13*/
/*   %495 = add nsw i32 %494, %.0.i1.i12*/
	main_gsm_mult_rexiti13_495_reg = main_1_gep_reg;
end
always @(*) begin
	/* main: %gsm_mult_r.exit.i13*/
	/*   %496 = icmp slt i32 %495, -32768*/
		main_gsm_mult_rexiti13_496 = ($signed(main_gsm_mult_rexiti13_495) < $signed(-32'd32768));
end
always @(posedge clk) begin
	/* main: %gsm_mult_r.exit.i13*/
	/*   %496 = icmp slt i32 %495, -32768*/
	if ((cur_state == LEGUP_F_main_BB_gsm_mult_rexiti13_160)) begin
		main_gsm_mult_rexiti13_496_reg <= main_gsm_mult_rexiti13_496;
		if (start == 1'b0 && ^(main_gsm_mult_rexiti13_496) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_mult_rexiti13_496_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %497*/
	/*   %498 = icmp sgt i32 %495, 32767*/
		main_497_498 = ($signed(main_gsm_mult_rexiti13_495_reg) > $signed(32'd32767));
end
always @(posedge clk) begin
	/* main: %497*/
	/*   %498 = icmp sgt i32 %495, 32767*/
	if ((cur_state == LEGUP_F_main_BB__497_161)) begin
		main_497_498_reg <= main_497_498;
		if (start == 1'b0 && ^(main_497_498) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_497_498_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %497*/
	/*   %499 = trunc i32 %495 to i16*/
		main_497_499 = main_gsm_mult_rexiti13_495_reg[15:0];
end
always @(posedge clk) begin
	/* main: %497*/
	/*   %499 = trunc i32 %495 to i16*/
	if ((cur_state == LEGUP_F_main_BB__497_161)) begin
		main_497_499_reg <= main_497_499;
		if (start == 1'b0 && ^(main_497_499) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_497_499_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %497*/
	/*   %phitmp.i.i = select i1 %498, i16 32767, i16 %499*/
		main_497_phitmpii = (main_497_498 ? 16'd32767 : main_497_499);
end
always @(posedge clk) begin
	/* main: %497*/
	/*   %phitmp.i.i = select i1 %498, i16 32767, i16 %499*/
	if ((cur_state == LEGUP_F_main_BB__497_161)) begin
		main_497_phitmpii_reg <= main_497_phitmpii;
		if (start == 1'b0 && ^(main_497_phitmpii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_497_phitmpii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_add.exit.i*/
	/*   %500 = phi i16 [ -32768, %gsm_mult_r.exit.i13 ], [ %phitmp.i.i, %497 ]*/
	if ((((cur_state == LEGUP_F_main_BB_gsm_mult_rexiti13_160) & (memory_controller_waitrequest == 1'd0)) & (main_gsm_mult_rexiti13_496 == 1'd1))) begin
		main_gsm_addexiti_500 = -16'd32768;
	end
	/* main: %gsm_add.exit.i*/
	/*   %500 = phi i16 [ -32768, %gsm_mult_r.exit.i13 ], [ %phitmp.i.i, %497 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__497_161) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_gsm_addexiti_500 = main_497_phitmpii;
	end
end
always @(posedge clk) begin
	/* main: %gsm_add.exit.i*/
	/*   %500 = phi i16 [ -32768, %gsm_mult_r.exit.i13 ], [ %phitmp.i.i, %497 ]*/
	if ((((cur_state == LEGUP_F_main_BB_gsm_mult_rexiti13_160) & (memory_controller_waitrequest == 1'd0)) & (main_gsm_mult_rexiti13_496 == 1'd1))) begin
		main_gsm_addexiti_500_reg <= main_gsm_addexiti_500;
		if (start == 1'b0 && ^(main_gsm_addexiti_500) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_addexiti_500_reg"); $finish; end
	end
	/* main: %gsm_add.exit.i*/
	/*   %500 = phi i16 [ -32768, %gsm_mult_r.exit.i13 ], [ %phitmp.i.i, %497 ]*/
	if (((cur_state == LEGUP_F_main_BB__497_161) & (memory_controller_waitrequest == 1'd0))) begin
		main_gsm_addexiti_500_reg <= main_gsm_addexiti_500;
		if (start == 1'b0 && ^(main_gsm_addexiti_500) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_addexiti_500_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_add.exit.i*/
	/*   %exitcond36.i = icmp eq i32 %474, %indvars.iv.i*/
		main_gsm_addexiti_exitcond36i = (main_gsm_mult_rexit6i_474_reg == main_334_indvarsivi_reg);
end
always @(posedge clk) begin
	/* main: %gsm_add.exit.i*/
	/*   %exitcond36.i = icmp eq i32 %474, %indvars.iv.i*/
	if ((cur_state == LEGUP_F_main_BB_gsm_addexiti_162)) begin
		main_gsm_addexiti_exitcond36i_reg <= main_gsm_addexiti_exitcond36i;
		if (start == 1'b0 && ^(main_gsm_addexiti_exitcond36i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_addexiti_exitcond36i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %._crit_edge.i14*/
	/*   %501 = add nsw i32 %n.029.i, 1*/
		main__crit_edgei14_501 = main_signed_add_32_0;
end
always @(*) begin
/* main: %._crit_edge.i14*/
/*   %501 = add nsw i32 %n.029.i, 1*/
	main__crit_edgei14_501_reg = main_1_gep_reg;
end
always @(*) begin
	/* main: %._crit_edge.i14*/
	/*   %502 = icmp slt i32 %501, 9*/
		main__crit_edgei14_502 = ($signed(main__crit_edgei14_501) < $signed(32'd9));
end
always @(posedge clk) begin
	/* main: %._crit_edge.i14*/
	/*   %502 = icmp slt i32 %501, 9*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei14_164)) begin
		main__crit_edgei14_502_reg <= main__crit_edgei14_502;
		if (start == 1'b0 && ^(main__crit_edgei14_502) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edgei14_502_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %._crit_edge43.i*/
	/*   %indvars.iv.next.i = add i32 %indvars.iv.i, -1*/
		main__crit_edge43i_indvarsivnexti = main_signed_add_32_0;
end
always @(*) begin
/* main: %._crit_edge43.i*/
/*   %indvars.iv.next.i = add i32 %indvars.iv.i, -1*/
	main__crit_edge43i_indvarsivnexti_reg = main_1_5_reg;
end
always @(*) begin
	/* main: %._crit_edge43.i*/
	/*   %gep_int119 = ptrtoint i16* %.128.i to i32*/
		main__crit_edge43i_gep_int119 = main_334_128i_reg;
end
always @(posedge clk) begin
	/* main: %._crit_edge43.i*/
	/*   %gep_int119 = ptrtoint i16* %.128.i to i32*/
	if ((cur_state == LEGUP_F_main_BB__crit_edge43i_165)) begin
		main__crit_edge43i_gep_int119_reg <= main__crit_edge43i_gep_int119;
		if (start == 1'b0 && ^(main__crit_edge43i_gep_int119) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edge43i_gep_int119_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %._crit_edge43.i*/
	/*   %gep120 = add i32 %gep_int119, 2*/
		main__crit_edge43i_gep120 = main_signed_add_32_1;
end
always @(*) begin
/* main: %._crit_edge43.i*/
/*   %gep120 = add i32 %gep_int119, 2*/
	main__crit_edge43i_gep120_reg = main_1_gep3_reg;
end
always @(*) begin
	/* main: %._crit_edge43.i*/
	/*   %503 = inttoptr i32 %gep120 to i16**/
		main__crit_edge43i_503 = main__crit_edge43i_gep120;
end
always @(posedge clk) begin
	/* main: %._crit_edge43.i*/
	/*   %503 = inttoptr i32 %gep120 to i16**/
	if ((cur_state == LEGUP_F_main_BB__crit_edge43i_165)) begin
		main__crit_edge43i_503_reg <= main__crit_edge43i_503;
		if (start == 1'b0 && ^(main__crit_edge43i_503) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edge43i_503_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %._crit_edge43.i*/
	/*   %.pre.i15 = load i16* %326, align 2, !tbaa !1*/
		main__crit_edge43i_prei15 = main_0_Pi_out_a;
end
always @(posedge clk) begin
	/* main: %._crit_edge43.i*/
	/*   %.pre.i15 = load i16* %326, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edge43i_166)) begin
		main__crit_edge43i_prei15_reg <= main__crit_edge43i_prei15;
		if (start == 1'b0 && ^(main__crit_edge43i_prei15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edge43i_prei15_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %Reflection_coefficients.exit*/
	/*   %i.02.i.i = phi i32 [ %525, %522 ], [ 1, %438 ], [ 1, %._crit_edge.i14 ], [ 1, %.lr.ph.i ], [ 1, %.preheader.i5 ], [ 1, %.preheader14.i ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderi5_61) & (memory_controller_waitrequest == 1'd0))) begin
		main_Reflection_coefficientsexit_i02ii = 32'd1;
	end
	/* main: %Reflection_coefficients.exit*/
	/*   %i.02.i.i = phi i32 [ %525, %522 ], [ 1, %438 ], [ 1, %._crit_edge.i14 ], [ 1, %.lr.ph.i ], [ 1, %.preheader.i5 ], [ 1, %.preheader14.i ]*/
	else if ((((cur_state == LEGUP_F_main_BB_preheader14i_97) & (memory_controller_waitrequest == 1'd0)) & (main_preheader14i_343 == 1'd0))) begin
		main_Reflection_coefficientsexit_i02ii = 32'd1;
	end
	/* main: %Reflection_coefficients.exit*/
	/*   %i.02.i.i = phi i32 [ %525, %522 ], [ 1, %438 ], [ 1, %._crit_edge.i14 ], [ 1, %.lr.ph.i ], [ 1, %.preheader.i5 ], [ 1, %.preheader14.i ]*/
	else if ((((cur_state == LEGUP_F_main_BB_lrphi_99) & (memory_controller_waitrequest == 1'd0)) & (main_lrphi_exitcondi10_reg == 1'd1))) begin
		main_Reflection_coefficientsexit_i02ii = 32'd1;
	end
	/* main: %Reflection_coefficients.exit*/
	/*   %i.02.i.i = phi i32 [ %525, %522 ], [ 1, %438 ], [ 1, %._crit_edge.i14 ], [ 1, %.lr.ph.i ], [ 1, %.preheader.i5 ], [ 1, %.preheader14.i ]*/
	else if ((((cur_state == LEGUP_F_main_BB__438_133) & (memory_controller_waitrequest == 1'd0)) & (main_438_440 == 1'd1))) begin
		main_Reflection_coefficientsexit_i02ii = 32'd1;
	end
	/* main: %Reflection_coefficients.exit*/
	/*   %i.02.i.i = phi i32 [ %525, %522 ], [ 1, %438 ], [ 1, %._crit_edge.i14 ], [ 1, %.lr.ph.i ], [ 1, %.preheader.i5 ], [ 1, %.preheader14.i ]*/
	else if ((((cur_state == LEGUP_F_main_BB__crit_edgei14_164) & (memory_controller_waitrequest == 1'd0)) & (main__crit_edgei14_502 == 1'd0))) begin
		main_Reflection_coefficientsexit_i02ii = 32'd1;
	end
	/* main: %Reflection_coefficients.exit*/
	/*   %i.02.i.i = phi i32 [ %525, %522 ], [ 1, %438 ], [ 1, %._crit_edge.i14 ], [ 1, %.lr.ph.i ], [ 1, %.preheader.i5 ], [ 1, %.preheader14.i ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__522_177) & (memory_controller_waitrequest == 1'd0)) & (main_522_exitcondii_reg == 1'd0))) */ begin
		main_Reflection_coefficientsexit_i02ii = main_522_525_reg;
	end
end
always @(posedge clk) begin
	/* main: %Reflection_coefficients.exit*/
	/*   %i.02.i.i = phi i32 [ %525, %522 ], [ 1, %438 ], [ 1, %._crit_edge.i14 ], [ 1, %.lr.ph.i ], [ 1, %.preheader.i5 ], [ 1, %.preheader14.i ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderi5_61) & (memory_controller_waitrequest == 1'd0))) begin
		main_Reflection_coefficientsexit_i02ii_reg <= main_Reflection_coefficientsexit_i02ii;
		if (start == 1'b0 && ^(main_Reflection_coefficientsexit_i02ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_Reflection_coefficientsexit_i02ii_reg"); $finish; end
	end
	/* main: %Reflection_coefficients.exit*/
	/*   %i.02.i.i = phi i32 [ %525, %522 ], [ 1, %438 ], [ 1, %._crit_edge.i14 ], [ 1, %.lr.ph.i ], [ 1, %.preheader.i5 ], [ 1, %.preheader14.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_preheader14i_97) & (memory_controller_waitrequest == 1'd0)) & (main_preheader14i_343 == 1'd0))) begin
		main_Reflection_coefficientsexit_i02ii_reg <= main_Reflection_coefficientsexit_i02ii;
		if (start == 1'b0 && ^(main_Reflection_coefficientsexit_i02ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_Reflection_coefficientsexit_i02ii_reg"); $finish; end
	end
	/* main: %Reflection_coefficients.exit*/
	/*   %i.02.i.i = phi i32 [ %525, %522 ], [ 1, %438 ], [ 1, %._crit_edge.i14 ], [ 1, %.lr.ph.i ], [ 1, %.preheader.i5 ], [ 1, %.preheader14.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_lrphi_99) & (memory_controller_waitrequest == 1'd0)) & (main_lrphi_exitcondi10_reg == 1'd1))) begin
		main_Reflection_coefficientsexit_i02ii_reg <= main_Reflection_coefficientsexit_i02ii;
		if (start == 1'b0 && ^(main_Reflection_coefficientsexit_i02ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_Reflection_coefficientsexit_i02ii_reg"); $finish; end
	end
	/* main: %Reflection_coefficients.exit*/
	/*   %i.02.i.i = phi i32 [ %525, %522 ], [ 1, %438 ], [ 1, %._crit_edge.i14 ], [ 1, %.lr.ph.i ], [ 1, %.preheader.i5 ], [ 1, %.preheader14.i ]*/
	if ((((cur_state == LEGUP_F_main_BB__438_133) & (memory_controller_waitrequest == 1'd0)) & (main_438_440 == 1'd1))) begin
		main_Reflection_coefficientsexit_i02ii_reg <= main_Reflection_coefficientsexit_i02ii;
		if (start == 1'b0 && ^(main_Reflection_coefficientsexit_i02ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_Reflection_coefficientsexit_i02ii_reg"); $finish; end
	end
	/* main: %Reflection_coefficients.exit*/
	/*   %i.02.i.i = phi i32 [ %525, %522 ], [ 1, %438 ], [ 1, %._crit_edge.i14 ], [ 1, %.lr.ph.i ], [ 1, %.preheader.i5 ], [ 1, %.preheader14.i ]*/
	if ((((cur_state == LEGUP_F_main_BB__crit_edgei14_164) & (memory_controller_waitrequest == 1'd0)) & (main__crit_edgei14_502 == 1'd0))) begin
		main_Reflection_coefficientsexit_i02ii_reg <= main_Reflection_coefficientsexit_i02ii;
		if (start == 1'b0 && ^(main_Reflection_coefficientsexit_i02ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_Reflection_coefficientsexit_i02ii_reg"); $finish; end
	end
	/* main: %Reflection_coefficients.exit*/
	/*   %i.02.i.i = phi i32 [ %525, %522 ], [ 1, %438 ], [ 1, %._crit_edge.i14 ], [ 1, %.lr.ph.i ], [ 1, %.preheader.i5 ], [ 1, %.preheader14.i ]*/
	if ((((cur_state == LEGUP_F_main_BB__522_177) & (memory_controller_waitrequest == 1'd0)) & (main_522_exitcondii_reg == 1'd0))) begin
		main_Reflection_coefficientsexit_i02ii_reg <= main_Reflection_coefficientsexit_i02ii;
		if (start == 1'b0 && ^(main_Reflection_coefficientsexit_i02ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_Reflection_coefficientsexit_i02ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %Reflection_coefficients.exit*/
	/*   %.01.i.i = phi i16* [ %526, %522 ], [ %19, %438 ], [ %19, %._crit_edge.i14 ], [ %19, %.lr.ph.i ], [ %19, %.preheader.i5 ], [ %19, %.preheader14.i ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderi5_61) & (memory_controller_waitrequest == 1'd0))) begin
		main_Reflection_coefficientsexit_01ii = main_18_19_reg;
	end
	/* main: %Reflection_coefficients.exit*/
	/*   %.01.i.i = phi i16* [ %526, %522 ], [ %19, %438 ], [ %19, %._crit_edge.i14 ], [ %19, %.lr.ph.i ], [ %19, %.preheader.i5 ], [ %19, %.preheader14.i ]*/
	else if ((((cur_state == LEGUP_F_main_BB_preheader14i_97) & (memory_controller_waitrequest == 1'd0)) & (main_preheader14i_343 == 1'd0))) begin
		main_Reflection_coefficientsexit_01ii = main_18_19_reg;
	end
	/* main: %Reflection_coefficients.exit*/
	/*   %.01.i.i = phi i16* [ %526, %522 ], [ %19, %438 ], [ %19, %._crit_edge.i14 ], [ %19, %.lr.ph.i ], [ %19, %.preheader.i5 ], [ %19, %.preheader14.i ]*/
	else if ((((cur_state == LEGUP_F_main_BB_lrphi_99) & (memory_controller_waitrequest == 1'd0)) & (main_lrphi_exitcondi10_reg == 1'd1))) begin
		main_Reflection_coefficientsexit_01ii = main_18_19_reg;
	end
	/* main: %Reflection_coefficients.exit*/
	/*   %.01.i.i = phi i16* [ %526, %522 ], [ %19, %438 ], [ %19, %._crit_edge.i14 ], [ %19, %.lr.ph.i ], [ %19, %.preheader.i5 ], [ %19, %.preheader14.i ]*/
	else if ((((cur_state == LEGUP_F_main_BB__438_133) & (memory_controller_waitrequest == 1'd0)) & (main_438_440 == 1'd1))) begin
		main_Reflection_coefficientsexit_01ii = main_18_19_reg;
	end
	/* main: %Reflection_coefficients.exit*/
	/*   %.01.i.i = phi i16* [ %526, %522 ], [ %19, %438 ], [ %19, %._crit_edge.i14 ], [ %19, %.lr.ph.i ], [ %19, %.preheader.i5 ], [ %19, %.preheader14.i ]*/
	else if ((((cur_state == LEGUP_F_main_BB__crit_edgei14_164) & (memory_controller_waitrequest == 1'd0)) & (main__crit_edgei14_502 == 1'd0))) begin
		main_Reflection_coefficientsexit_01ii = main_18_19_reg;
	end
	/* main: %Reflection_coefficients.exit*/
	/*   %.01.i.i = phi i16* [ %526, %522 ], [ %19, %438 ], [ %19, %._crit_edge.i14 ], [ %19, %.lr.ph.i ], [ %19, %.preheader.i5 ], [ %19, %.preheader14.i ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__522_177) & (memory_controller_waitrequest == 1'd0)) & (main_522_exitcondii_reg == 1'd0))) */ begin
		main_Reflection_coefficientsexit_01ii = main_522_526_reg;
	end
end
always @(posedge clk) begin
	/* main: %Reflection_coefficients.exit*/
	/*   %.01.i.i = phi i16* [ %526, %522 ], [ %19, %438 ], [ %19, %._crit_edge.i14 ], [ %19, %.lr.ph.i ], [ %19, %.preheader.i5 ], [ %19, %.preheader14.i ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderi5_61) & (memory_controller_waitrequest == 1'd0))) begin
		main_Reflection_coefficientsexit_01ii_reg <= main_Reflection_coefficientsexit_01ii;
		if (start == 1'b0 && ^(main_Reflection_coefficientsexit_01ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_Reflection_coefficientsexit_01ii_reg"); $finish; end
	end
	/* main: %Reflection_coefficients.exit*/
	/*   %.01.i.i = phi i16* [ %526, %522 ], [ %19, %438 ], [ %19, %._crit_edge.i14 ], [ %19, %.lr.ph.i ], [ %19, %.preheader.i5 ], [ %19, %.preheader14.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_preheader14i_97) & (memory_controller_waitrequest == 1'd0)) & (main_preheader14i_343 == 1'd0))) begin
		main_Reflection_coefficientsexit_01ii_reg <= main_Reflection_coefficientsexit_01ii;
		if (start == 1'b0 && ^(main_Reflection_coefficientsexit_01ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_Reflection_coefficientsexit_01ii_reg"); $finish; end
	end
	/* main: %Reflection_coefficients.exit*/
	/*   %.01.i.i = phi i16* [ %526, %522 ], [ %19, %438 ], [ %19, %._crit_edge.i14 ], [ %19, %.lr.ph.i ], [ %19, %.preheader.i5 ], [ %19, %.preheader14.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_lrphi_99) & (memory_controller_waitrequest == 1'd0)) & (main_lrphi_exitcondi10_reg == 1'd1))) begin
		main_Reflection_coefficientsexit_01ii_reg <= main_Reflection_coefficientsexit_01ii;
		if (start == 1'b0 && ^(main_Reflection_coefficientsexit_01ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_Reflection_coefficientsexit_01ii_reg"); $finish; end
	end
	/* main: %Reflection_coefficients.exit*/
	/*   %.01.i.i = phi i16* [ %526, %522 ], [ %19, %438 ], [ %19, %._crit_edge.i14 ], [ %19, %.lr.ph.i ], [ %19, %.preheader.i5 ], [ %19, %.preheader14.i ]*/
	if ((((cur_state == LEGUP_F_main_BB__438_133) & (memory_controller_waitrequest == 1'd0)) & (main_438_440 == 1'd1))) begin
		main_Reflection_coefficientsexit_01ii_reg <= main_Reflection_coefficientsexit_01ii;
		if (start == 1'b0 && ^(main_Reflection_coefficientsexit_01ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_Reflection_coefficientsexit_01ii_reg"); $finish; end
	end
	/* main: %Reflection_coefficients.exit*/
	/*   %.01.i.i = phi i16* [ %526, %522 ], [ %19, %438 ], [ %19, %._crit_edge.i14 ], [ %19, %.lr.ph.i ], [ %19, %.preheader.i5 ], [ %19, %.preheader14.i ]*/
	if ((((cur_state == LEGUP_F_main_BB__crit_edgei14_164) & (memory_controller_waitrequest == 1'd0)) & (main__crit_edgei14_502 == 1'd0))) begin
		main_Reflection_coefficientsexit_01ii_reg <= main_Reflection_coefficientsexit_01ii;
		if (start == 1'b0 && ^(main_Reflection_coefficientsexit_01ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_Reflection_coefficientsexit_01ii_reg"); $finish; end
	end
	/* main: %Reflection_coefficients.exit*/
	/*   %.01.i.i = phi i16* [ %526, %522 ], [ %19, %438 ], [ %19, %._crit_edge.i14 ], [ %19, %.lr.ph.i ], [ %19, %.preheader.i5 ], [ %19, %.preheader14.i ]*/
	if ((((cur_state == LEGUP_F_main_BB__522_177) & (memory_controller_waitrequest == 1'd0)) & (main_522_exitcondii_reg == 1'd0))) begin
		main_Reflection_coefficientsexit_01ii_reg <= main_Reflection_coefficientsexit_01ii;
		if (start == 1'b0 && ^(main_Reflection_coefficientsexit_01ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_Reflection_coefficientsexit_01ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %Reflection_coefficients.exit*/
	/*   %504 = load i16* %.01.i.i, align 2, !tbaa !1*/
		main_Reflection_coefficientsexit_504 = memory_controller_out_a[15:0];
end
always @(posedge clk) begin
	/* main: %Reflection_coefficients.exit*/
	/*   %504 = load i16* %.01.i.i, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_Reflection_coefficientsexit_169)) begin
		main_Reflection_coefficientsexit_504_reg <= main_Reflection_coefficientsexit_504;
		if (start == 1'b0 && ^(main_Reflection_coefficientsexit_504) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_Reflection_coefficientsexit_504_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %Reflection_coefficients.exit*/
	/*   %505 = icmp slt i16 %504, 0*/
		main_Reflection_coefficientsexit_505 = ($signed(main_Reflection_coefficientsexit_504) < $signed(16'd0));
end
always @(posedge clk) begin
	/* main: %Reflection_coefficients.exit*/
	/*   %505 = icmp slt i16 %504, 0*/
	if ((cur_state == LEGUP_F_main_BB_Reflection_coefficientsexit_169)) begin
		main_Reflection_coefficientsexit_505_reg <= main_Reflection_coefficientsexit_505;
		if (start == 1'b0 && ^(main_Reflection_coefficientsexit_505) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_Reflection_coefficientsexit_505_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %506*/
	/*   %507 = icmp eq i16 %504, -32768*/
		main_506_507 = (main_Reflection_coefficientsexit_504_reg == -16'd32768);
end
always @(posedge clk) begin
	/* main: %506*/
	/*   %507 = icmp eq i16 %504, -32768*/
	if ((cur_state == LEGUP_F_main_BB__506_170)) begin
		main_506_507_reg <= main_506_507;
		if (start == 1'b0 && ^(main_506_507) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_506_507_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %506*/
	/*   %508 = sub i16 0, %504*/
		main_506_508 = main_signed_subtract_16_0;
end
always @(*) begin
/* main: %506*/
/*   %508 = sub i16 0, %504*/
	main_506_508_reg = main_12_14_reg;
end
always @(*) begin
	/* main: %gsm_abs.exit.i.i*/
	/*   %509 = phi i16 [ %508, %506 ], [ %504, %Reflection_coefficients.exit ]*/
	if ((((cur_state == LEGUP_F_main_BB_Reflection_coefficientsexit_169) & (memory_controller_waitrequest == 1'd0)) & (main_Reflection_coefficientsexit_505 == 1'd0))) begin
		main_gsm_absexitii_509 = main_Reflection_coefficientsexit_504;
	end
	/* main: %gsm_abs.exit.i.i*/
	/*   %509 = phi i16 [ %508, %506 ], [ %504, %Reflection_coefficients.exit ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__506_170) & (memory_controller_waitrequest == 1'd0)) & (main_506_507 == 1'd0))) */ begin
		main_gsm_absexitii_509 = main_506_508;
	end
end
always @(posedge clk) begin
	/* main: %gsm_abs.exit.i.i*/
	/*   %509 = phi i16 [ %508, %506 ], [ %504, %Reflection_coefficients.exit ]*/
	if ((((cur_state == LEGUP_F_main_BB_Reflection_coefficientsexit_169) & (memory_controller_waitrequest == 1'd0)) & (main_Reflection_coefficientsexit_505 == 1'd0))) begin
		main_gsm_absexitii_509_reg <= main_gsm_absexitii_509;
		if (start == 1'b0 && ^(main_gsm_absexitii_509) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_absexitii_509_reg"); $finish; end
	end
	/* main: %gsm_abs.exit.i.i*/
	/*   %509 = phi i16 [ %508, %506 ], [ %504, %Reflection_coefficients.exit ]*/
	if ((((cur_state == LEGUP_F_main_BB__506_170) & (memory_controller_waitrequest == 1'd0)) & (main_506_507 == 1'd0))) begin
		main_gsm_absexitii_509_reg <= main_gsm_absexitii_509;
		if (start == 1'b0 && ^(main_gsm_absexitii_509) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_absexitii_509_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_abs.exit.i.i*/
	/*   %510 = icmp slt i16 %509, 22118*/
		main_gsm_absexitii_510 = ($signed(main_gsm_absexitii_509_reg) < $signed(16'd22118));
end
always @(posedge clk) begin
	/* main: %gsm_abs.exit.i.i*/
	/*   %510 = icmp slt i16 %509, 22118*/
	if ((cur_state == LEGUP_F_main_BB_gsm_absexitii_171)) begin
		main_gsm_absexitii_510_reg <= main_gsm_absexitii_510;
		if (start == 1'b0 && ^(main_gsm_absexitii_510) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_absexitii_510_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %511*/
	/*   %512 = sext i16 %509 to i32*/
		main_511_512 = $signed(main_gsm_absexitii_509_reg);
end
always @(posedge clk) begin
	/* main: %511*/
	/*   %512 = sext i16 %509 to i32*/
	if ((cur_state == LEGUP_F_main_BB__511_172)) begin
		main_511_512_reg <= main_511_512;
		if (start == 1'b0 && ^(main_511_512) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_511_512_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %511*/
	/*   %513 = lshr i32 %512, 1*/
		main_511_513 = (main_511_512 >>> (32'd1 % 32));
end
always @(posedge clk) begin
	/* main: %511*/
	/*   %513 = lshr i32 %512, 1*/
	if ((cur_state == LEGUP_F_main_BB__511_172)) begin
		main_511_513_reg <= main_511_513;
		if (start == 1'b0 && ^(main_511_513) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_511_513_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %511*/
	/*   %514 = trunc i32 %513 to i16*/
		main_511_514 = main_511_513[15:0];
end
always @(posedge clk) begin
	/* main: %511*/
	/*   %514 = trunc i32 %513 to i16*/
	if ((cur_state == LEGUP_F_main_BB__511_172)) begin
		main_511_514_reg <= main_511_514;
		if (start == 1'b0 && ^(main_511_514) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_511_514_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %515*/
	/*   %516 = icmp slt i16 %509, 31130*/
		main_515_516 = ($signed(main_gsm_absexitii_509_reg) < $signed(16'd31130));
end
always @(posedge clk) begin
	/* main: %515*/
	/*   %516 = icmp slt i16 %509, 31130*/
	if ((cur_state == LEGUP_F_main_BB__515_173)) begin
		main_515_516_reg <= main_515_516;
		if (start == 1'b0 && ^(main_515_516) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_515_516_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %517*/
	/*   %518 = add i16 %509, -11059*/
		main_517_518 = main_signed_add_16_0;
end
always @(posedge clk) begin
	/* main: %517*/
	/*   %518 = add i16 %509, -11059*/
	if ((cur_state == LEGUP_F_main_BB__517_174)) begin
		main_517_518_reg <= main_517_518;
		if (start == 1'b0 && ^(main_517_518) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_517_518_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.thread.i.i*/
	/*   %519 = phi i16 [ %509, %515 ], [ 32767, %506 ]*/
	if ((((cur_state == LEGUP_F_main_BB__506_170) & (memory_controller_waitrequest == 1'd0)) & (main_506_507 == 1'd1))) begin
		main_threadii_519 = 16'd32767;
	end
	/* main: %.thread.i.i*/
	/*   %519 = phi i16 [ %509, %515 ], [ 32767, %506 ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__515_173) & (memory_controller_waitrequest == 1'd0)) & (main_515_516 == 1'd0))) */ begin
		main_threadii_519 = main_gsm_absexitii_509_reg;
	end
end
always @(posedge clk) begin
	/* main: %.thread.i.i*/
	/*   %519 = phi i16 [ %509, %515 ], [ 32767, %506 ]*/
	if ((((cur_state == LEGUP_F_main_BB__506_170) & (memory_controller_waitrequest == 1'd0)) & (main_506_507 == 1'd1))) begin
		main_threadii_519_reg <= main_threadii_519;
		if (start == 1'b0 && ^(main_threadii_519) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadii_519_reg"); $finish; end
	end
	/* main: %.thread.i.i*/
	/*   %519 = phi i16 [ %509, %515 ], [ 32767, %506 ]*/
	if ((((cur_state == LEGUP_F_main_BB__515_173) & (memory_controller_waitrequest == 1'd0)) & (main_515_516 == 1'd0))) begin
		main_threadii_519_reg <= main_threadii_519;
		if (start == 1'b0 && ^(main_threadii_519) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadii_519_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.thread.i.i*/
	/*   %520 = shl i16 %519, 2*/
		main_threadii_520 = (main_threadii_519_reg <<< (16'd2 % 16'd16));
end
always @(posedge clk) begin
	/* main: %.thread.i.i*/
	/*   %520 = shl i16 %519, 2*/
	if ((cur_state == LEGUP_F_main_BB_threadii_175)) begin
		main_threadii_520_reg <= main_threadii_520;
		if (start == 1'b0 && ^(main_threadii_520) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadii_520_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.thread.i.i*/
	/*   %521 = add i16 %520, 26624*/
		main_threadii_521 = main_signed_add_16_0;
end
always @(posedge clk) begin
	/* main: %.thread.i.i*/
	/*   %521 = add i16 %520, 26624*/
	if ((cur_state == LEGUP_F_main_BB_threadii_175)) begin
		main_threadii_521_reg <= main_threadii_521;
		if (start == 1'b0 && ^(main_threadii_521) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadii_521_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %522*/
	/*   %temp.0.i.i = phi i16 [ %514, %511 ], [ %518, %517 ], [ %521, %.thread.i.i ]*/
	if (((cur_state == LEGUP_F_main_BB__511_172) & (memory_controller_waitrequest == 1'd0))) begin
		main_522_temp0ii = main_511_514;
	end
	/* main: %522*/
	/*   %temp.0.i.i = phi i16 [ %514, %511 ], [ %518, %517 ], [ %521, %.thread.i.i ]*/
	else if (((cur_state == LEGUP_F_main_BB__517_174) & (memory_controller_waitrequest == 1'd0))) begin
		main_522_temp0ii = main_517_518;
	end
	/* main: %522*/
	/*   %temp.0.i.i = phi i16 [ %514, %511 ], [ %518, %517 ], [ %521, %.thread.i.i ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_threadii_175) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_522_temp0ii = main_threadii_521;
	end
end
always @(posedge clk) begin
	/* main: %522*/
	/*   %temp.0.i.i = phi i16 [ %514, %511 ], [ %518, %517 ], [ %521, %.thread.i.i ]*/
	if (((cur_state == LEGUP_F_main_BB__511_172) & (memory_controller_waitrequest == 1'd0))) begin
		main_522_temp0ii_reg <= main_522_temp0ii;
		if (start == 1'b0 && ^(main_522_temp0ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_522_temp0ii_reg"); $finish; end
	end
	/* main: %522*/
	/*   %temp.0.i.i = phi i16 [ %514, %511 ], [ %518, %517 ], [ %521, %.thread.i.i ]*/
	if (((cur_state == LEGUP_F_main_BB__517_174) & (memory_controller_waitrequest == 1'd0))) begin
		main_522_temp0ii_reg <= main_522_temp0ii;
		if (start == 1'b0 && ^(main_522_temp0ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_522_temp0ii_reg"); $finish; end
	end
	/* main: %522*/
	/*   %temp.0.i.i = phi i16 [ %514, %511 ], [ %518, %517 ], [ %521, %.thread.i.i ]*/
	if (((cur_state == LEGUP_F_main_BB_threadii_175) & (memory_controller_waitrequest == 1'd0))) begin
		main_522_temp0ii_reg <= main_522_temp0ii;
		if (start == 1'b0 && ^(main_522_temp0ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_522_temp0ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %522*/
	/*   %523 = sub i16 0, %temp.0.i.i*/
		main_522_523 = main_signed_subtract_16_0;
end
always @(*) begin
/* main: %522*/
/*   %523 = sub i16 0, %temp.0.i.i*/
	main_522_523_reg = main_12_14_reg;
end
always @(*) begin
	/* main: %522*/
	/*   %524 = select i1 %505, i16 %523, i16 %temp.0.i.i*/
		main_522_524 = (main_Reflection_coefficientsexit_505_reg ? main_522_523 : main_522_temp0ii_reg);
end
always @(posedge clk) begin
	/* main: %522*/
	/*   %524 = select i1 %505, i16 %523, i16 %temp.0.i.i*/
	if ((cur_state == LEGUP_F_main_BB__522_176)) begin
		main_522_524_reg <= main_522_524;
		if (start == 1'b0 && ^(main_522_524) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_522_524_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %522*/
	/*   %525 = add nsw i32 %i.02.i.i, 1*/
		main_522_525 = main_signed_add_32_0;
end
always @(*) begin
/* main: %522*/
/*   %525 = add nsw i32 %i.02.i.i, 1*/
	main_522_525_reg = main_1_gep_reg;
end
always @(*) begin
	/* main: %522*/
	/*   %gep_int121 = ptrtoint i16* %.01.i.i to i32*/
		main_522_gep_int121 = main_Reflection_coefficientsexit_01ii_reg;
end
always @(posedge clk) begin
	/* main: %522*/
	/*   %gep_int121 = ptrtoint i16* %.01.i.i to i32*/
	if ((cur_state == LEGUP_F_main_BB__522_176)) begin
		main_522_gep_int121_reg <= main_522_gep_int121;
		if (start == 1'b0 && ^(main_522_gep_int121) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_522_gep_int121_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %522*/
	/*   %gep122 = add i32 %gep_int121, 2*/
		main_522_gep122 = main_signed_add_32_1;
end
always @(*) begin
/* main: %522*/
/*   %gep122 = add i32 %gep_int121, 2*/
	main_522_gep122_reg = main_1_gep3_reg;
end
always @(*) begin
	/* main: %522*/
	/*   %526 = inttoptr i32 %gep122 to i16**/
		main_522_526 = main_522_gep122;
end
always @(posedge clk) begin
	/* main: %522*/
	/*   %526 = inttoptr i32 %gep122 to i16**/
	if ((cur_state == LEGUP_F_main_BB__522_176)) begin
		main_522_526_reg <= main_522_526;
		if (start == 1'b0 && ^(main_522_526) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_522_526_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %522*/
	/*   %exitcond.i.i = icmp eq i32 %525, 9*/
		main_522_exitcondii = (main_522_525 == 32'd9);
end
always @(posedge clk) begin
	/* main: %522*/
	/*   %exitcond.i.i = icmp eq i32 %525, 9*/
	if ((cur_state == LEGUP_F_main_BB__522_176)) begin
		main_522_exitcondii_reg <= main_522_exitcondii;
		if (start == 1'b0 && ^(main_522_exitcondii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_522_exitcondii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %Gsm_LPC_Analysis.exit*/
	/*   %527 = load i16* %19, align 2, !tbaa !1*/
		main_Gsm_LPC_Analysisexit_527 = memory_controller_out_a[15:0];
end
always @(posedge clk) begin
	/* main: %Gsm_LPC_Analysis.exit*/
	/*   %527 = load i16* %19, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_Gsm_LPC_Analysisexit_180)) begin
		main_Gsm_LPC_Analysisexit_527_reg <= main_Gsm_LPC_Analysisexit_527;
		if (start == 1'b0 && ^(main_Gsm_LPC_Analysisexit_527) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_Gsm_LPC_Analysisexit_527_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %Gsm_LPC_Analysis.exit*/
	/*   %528 = sext i16 %527 to i32*/
		main_Gsm_LPC_Analysisexit_528 = $signed(main_Gsm_LPC_Analysisexit_527);
end
always @(posedge clk) begin
	/* main: %Gsm_LPC_Analysis.exit*/
	/*   %528 = sext i16 %527 to i32*/
	if ((cur_state == LEGUP_F_main_BB_Gsm_LPC_Analysisexit_180)) begin
		main_Gsm_LPC_Analysisexit_528_reg <= main_Gsm_LPC_Analysisexit_528;
		if (start == 1'b0 && ^(main_Gsm_LPC_Analysisexit_528) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_Gsm_LPC_Analysisexit_528_reg"); $finish; end
	end
end
always @(*) begin
	main_Gsm_LPC_Analysisexit_529 = main_signed_multiply_32_0;
end
always @(*) begin
/* main: %Gsm_LPC_Analysis.exit*/
/*   %529 = mul i32 %528, 40960*/
	main_Gsm_LPC_Analysisexit_529_reg = main_74_76_reg;
end
always @(*) begin
	/* main: %Gsm_LPC_Analysis.exit*/
	/*   %530 = add i32 %529, 40960*/
		main_Gsm_LPC_Analysisexit_530 = main_signed_add_32_1;
end
always @(*) begin
/* main: %Gsm_LPC_Analysis.exit*/
/*   %530 = add i32 %529, 40960*/
	main_Gsm_LPC_Analysisexit_530_reg = main_1_gep3_reg;
end
always @(*) begin
	/* main: %Gsm_LPC_Analysis.exit*/
	/*   %531 = ashr i32 %530, 16*/
		main_Gsm_LPC_Analysisexit_531 = ($signed(main_Gsm_LPC_Analysisexit_530) >>> 32'd16);
end
always @(posedge clk) begin
	/* main: %Gsm_LPC_Analysis.exit*/
	/*   %531 = ashr i32 %530, 16*/
	if ((cur_state == LEGUP_F_main_BB_Gsm_LPC_Analysisexit_181)) begin
		main_Gsm_LPC_Analysisexit_531_reg <= main_Gsm_LPC_Analysisexit_531;
		if (start == 1'b0 && ^(main_Gsm_LPC_Analysisexit_531) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_Gsm_LPC_Analysisexit_531_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %Gsm_LPC_Analysis.exit*/
	/*   %532 = add nsw i32 %531, 256*/
		main_Gsm_LPC_Analysisexit_532 = main_signed_add_32_0;
end
always @(*) begin
/* main: %Gsm_LPC_Analysis.exit*/
/*   %532 = add nsw i32 %531, 256*/
	main_Gsm_LPC_Analysisexit_532_reg = main_1_gep_reg;
end
always @(*) begin
	/* main: %Gsm_LPC_Analysis.exit*/
	/*   %533 = icmp slt i32 %532, -32768*/
		main_Gsm_LPC_Analysisexit_533 = ($signed(main_Gsm_LPC_Analysisexit_532) < $signed(-32'd32768));
end
always @(posedge clk) begin
	/* main: %Gsm_LPC_Analysis.exit*/
	/*   %533 = icmp slt i32 %532, -32768*/
	if ((cur_state == LEGUP_F_main_BB_Gsm_LPC_Analysisexit_181)) begin
		main_Gsm_LPC_Analysisexit_533_reg <= main_Gsm_LPC_Analysisexit_533;
		if (start == 1'b0 && ^(main_Gsm_LPC_Analysisexit_533) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_Gsm_LPC_Analysisexit_533_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %534*/
	/*   %535 = icmp sgt i32 %532, 32767*/
		main_534_535 = ($signed(main_Gsm_LPC_Analysisexit_532_reg) > $signed(32'd32767));
end
always @(posedge clk) begin
	/* main: %534*/
	/*   %535 = icmp sgt i32 %532, 32767*/
	if ((cur_state == LEGUP_F_main_BB__534_182)) begin
		main_534_535_reg <= main_534_535;
		if (start == 1'b0 && ^(main_534_535) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_534_535_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %534*/
	/*   %sext.i2 = shl i32 %532, 16*/
		main_534_sexti2 = (main_Gsm_LPC_Analysisexit_532_reg <<< (32'd16 % 32));
end
always @(posedge clk) begin
	/* main: %534*/
	/*   %sext.i2 = shl i32 %532, 16*/
	if ((cur_state == LEGUP_F_main_BB__534_182)) begin
		main_534_sexti2_reg <= main_534_sexti2;
		if (start == 1'b0 && ^(main_534_sexti2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_534_sexti2_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %534*/
	/*   %.op.i = ashr i32 %sext.i2, 25*/
		main_534_opi = ($signed(main_534_sexti2) >>> 32'd25);
end
always @(posedge clk) begin
	/* main: %534*/
	/*   %.op.i = ashr i32 %sext.i2, 25*/
	if ((cur_state == LEGUP_F_main_BB__534_182)) begin
		main_534_opi_reg <= main_534_opi;
		if (start == 1'b0 && ^(main_534_opi) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_534_opi_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %534*/
	/*   %536 = icmp sgt i32 %.op.i, 31*/
		main_534_536 = ($signed(main_534_opi) > $signed(32'd31));
end
always @(posedge clk) begin
	/* main: %534*/
	/*   %536 = icmp sgt i32 %.op.i, 31*/
	if ((cur_state == LEGUP_F_main_BB__534_182)) begin
		main_534_536_reg <= main_534_536;
		if (start == 1'b0 && ^(main_534_536) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_534_536_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %534*/
	/*   %or.cond.i = or i1 %535, %536*/
		main_534_orcondi = (main_534_535 | main_534_536);
end
always @(posedge clk) begin
	/* main: %534*/
	/*   %or.cond.i = or i1 %535, %536*/
	if ((cur_state == LEGUP_F_main_BB__534_182)) begin
		main_534_orcondi_reg <= main_534_orcondi;
		if (start == 1'b0 && ^(main_534_orcondi) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_534_orcondi_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %537*/
	/*   %538 = icmp slt i32 %.op.i, -32*/
		main_537_538 = ($signed(main_534_opi_reg) < $signed(-32'd32));
end
always @(posedge clk) begin
	/* main: %537*/
	/*   %538 = icmp slt i32 %.op.i, -32*/
	if ((cur_state == LEGUP_F_main_BB__537_183)) begin
		main_537_538_reg <= main_537_538;
		if (start == 1'b0 && ^(main_537_538) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_537_538_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %539*/
	/*   %540 = add nsw i32 %.op.i, 32*/
		main_539_540 = main_signed_add_32_0;
end
always @(*) begin
/* main: %539*/
/*   %540 = add nsw i32 %.op.i, 32*/
	main_539_540_reg = main_1_gep_reg;
end
always @(*) begin
	/* main: %539*/
	/*   %phitmp.i3 = trunc i32 %540 to i16*/
		main_539_phitmpi3 = main_539_540[15:0];
end
always @(posedge clk) begin
	/* main: %539*/
	/*   %phitmp.i3 = trunc i32 %540 to i16*/
	if ((cur_state == LEGUP_F_main_BB__539_184)) begin
		main_539_phitmpi3_reg <= main_539_phitmpi3;
		if (start == 1'b0 && ^(main_539_phitmpi3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_539_phitmpi3_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.thread.i4*/
	/*   %541 = phi i16 [ %phitmp.i3, %539 ], [ 0, %537 ], [ 0, %Gsm_LPC_Analysis.exit ], [ 63, %534 ]*/
	if ((((cur_state == LEGUP_F_main_BB_Gsm_LPC_Analysisexit_181) & (memory_controller_waitrequest == 1'd0)) & (main_Gsm_LPC_Analysisexit_533 == 1'd1))) begin
		main_threadi4_541 = 16'd0;
	end
	/* main: %.thread.i4*/
	/*   %541 = phi i16 [ %phitmp.i3, %539 ], [ 0, %537 ], [ 0, %Gsm_LPC_Analysis.exit ], [ 63, %534 ]*/
	else if ((((cur_state == LEGUP_F_main_BB__534_182) & (memory_controller_waitrequest == 1'd0)) & (main_534_orcondi == 1'd1))) begin
		main_threadi4_541 = 16'd63;
	end
	/* main: %.thread.i4*/
	/*   %541 = phi i16 [ %phitmp.i3, %539 ], [ 0, %537 ], [ 0, %Gsm_LPC_Analysis.exit ], [ 63, %534 ]*/
	else if ((((cur_state == LEGUP_F_main_BB__537_183) & (memory_controller_waitrequest == 1'd0)) & (main_537_538 == 1'd1))) begin
		main_threadi4_541 = 16'd0;
	end
	/* main: %.thread.i4*/
	/*   %541 = phi i16 [ %phitmp.i3, %539 ], [ 0, %537 ], [ 0, %Gsm_LPC_Analysis.exit ], [ 63, %534 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__539_184) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_threadi4_541 = main_539_phitmpi3;
	end
end
always @(posedge clk) begin
	/* main: %.thread.i4*/
	/*   %541 = phi i16 [ %phitmp.i3, %539 ], [ 0, %537 ], [ 0, %Gsm_LPC_Analysis.exit ], [ 63, %534 ]*/
	if ((((cur_state == LEGUP_F_main_BB_Gsm_LPC_Analysisexit_181) & (memory_controller_waitrequest == 1'd0)) & (main_Gsm_LPC_Analysisexit_533 == 1'd1))) begin
		main_threadi4_541_reg <= main_threadi4_541;
		if (start == 1'b0 && ^(main_threadi4_541) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi4_541_reg"); $finish; end
	end
	/* main: %.thread.i4*/
	/*   %541 = phi i16 [ %phitmp.i3, %539 ], [ 0, %537 ], [ 0, %Gsm_LPC_Analysis.exit ], [ 63, %534 ]*/
	if ((((cur_state == LEGUP_F_main_BB__534_182) & (memory_controller_waitrequest == 1'd0)) & (main_534_orcondi == 1'd1))) begin
		main_threadi4_541_reg <= main_threadi4_541;
		if (start == 1'b0 && ^(main_threadi4_541) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi4_541_reg"); $finish; end
	end
	/* main: %.thread.i4*/
	/*   %541 = phi i16 [ %phitmp.i3, %539 ], [ 0, %537 ], [ 0, %Gsm_LPC_Analysis.exit ], [ 63, %534 ]*/
	if ((((cur_state == LEGUP_F_main_BB__537_183) & (memory_controller_waitrequest == 1'd0)) & (main_537_538 == 1'd1))) begin
		main_threadi4_541_reg <= main_threadi4_541;
		if (start == 1'b0 && ^(main_threadi4_541) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi4_541_reg"); $finish; end
	end
	/* main: %.thread.i4*/
	/*   %541 = phi i16 [ %phitmp.i3, %539 ], [ 0, %537 ], [ 0, %Gsm_LPC_Analysis.exit ], [ 63, %534 ]*/
	if (((cur_state == LEGUP_F_main_BB__539_184) & (memory_controller_waitrequest == 1'd0))) begin
		main_threadi4_541_reg <= main_threadi4_541;
		if (start == 1'b0 && ^(main_threadi4_541) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi4_541_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.thread.i4*/
	/*   %gep_int123 = ptrtoint i16* %19 to i32*/
		main_threadi4_gep_int123 = main_18_19_reg;
end
always @(posedge clk) begin
	/* main: %.thread.i4*/
	/*   %gep_int123 = ptrtoint i16* %19 to i32*/
	if ((cur_state == LEGUP_F_main_BB_threadi4_185)) begin
		main_threadi4_gep_int123_reg <= main_threadi4_gep_int123;
		if (start == 1'b0 && ^(main_threadi4_gep_int123) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi4_gep_int123_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.thread.i4*/
	/*   %gep124 = add i32 %gep_int123, 2*/
		main_threadi4_gep124 = main_signed_add_32_0;
end
always @(*) begin
/* main: %.thread.i4*/
/*   %gep124 = add i32 %gep_int123, 2*/
	main_threadi4_gep124_reg = main_1_gep_reg;
end
always @(*) begin
	/* main: %.thread.i4*/
	/*   %542 = inttoptr i32 %gep124 to i16**/
		main_threadi4_542 = main_threadi4_gep124;
end
always @(posedge clk) begin
	/* main: %.thread.i4*/
	/*   %542 = inttoptr i32 %gep124 to i16**/
	if ((cur_state == LEGUP_F_main_BB_threadi4_185)) begin
		main_threadi4_542_reg <= main_threadi4_542;
		if (start == 1'b0 && ^(main_threadi4_542) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi4_542_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.thread.i4*/
	/*   %543 = load i16* %542, align 2, !tbaa !1*/
		main_threadi4_543 = memory_controller_out_a[15:0];
end
always @(posedge clk) begin
	/* main: %.thread.i4*/
	/*   %543 = load i16* %542, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_threadi4_188)) begin
		main_threadi4_543_reg <= main_threadi4_543;
		if (start == 1'b0 && ^(main_threadi4_543) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi4_543_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.thread.i4*/
	/*   %544 = sext i16 %543 to i32*/
		main_threadi4_544 = $signed(main_threadi4_543);
end
always @(posedge clk) begin
	/* main: %.thread.i4*/
	/*   %544 = sext i16 %543 to i32*/
	if ((cur_state == LEGUP_F_main_BB_threadi4_188)) begin
		main_threadi4_544_reg <= main_threadi4_544;
		if (start == 1'b0 && ^(main_threadi4_544) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi4_544_reg"); $finish; end
	end
end
always @(*) begin
	main_threadi4_545 = main_signed_multiply_32_0;
end
always @(*) begin
/* main: %.thread.i4*/
/*   %545 = mul i32 %544, 40960*/
	main_threadi4_545_reg = main_74_76_reg;
end
always @(*) begin
	/* main: %.thread.i4*/
	/*   %546 = add i32 %545, 40960*/
		main_threadi4_546 = main_signed_add_32_1;
end
always @(*) begin
/* main: %.thread.i4*/
/*   %546 = add i32 %545, 40960*/
	main_threadi4_546_reg = main_1_gep3_reg;
end
always @(*) begin
	/* main: %.thread.i4*/
	/*   %547 = ashr i32 %546, 16*/
		main_threadi4_547 = ($signed(main_threadi4_546) >>> 32'd16);
end
always @(posedge clk) begin
	/* main: %.thread.i4*/
	/*   %547 = ashr i32 %546, 16*/
	if ((cur_state == LEGUP_F_main_BB_threadi4_189)) begin
		main_threadi4_547_reg <= main_threadi4_547;
		if (start == 1'b0 && ^(main_threadi4_547) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi4_547_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.thread.i4*/
	/*   %548 = add nsw i32 %547, 256*/
		main_threadi4_548 = main_signed_add_32_0;
end
always @(*) begin
/* main: %.thread.i4*/
/*   %548 = add nsw i32 %547, 256*/
	main_threadi4_548_reg = main_1_5_reg;
end
always @(*) begin
	/* main: %.thread.i4*/
	/*   %549 = icmp slt i32 %548, -32768*/
		main_threadi4_549 = ($signed(main_threadi4_548) < $signed(-32'd32768));
end
always @(posedge clk) begin
	/* main: %.thread.i4*/
	/*   %549 = icmp slt i32 %548, -32768*/
	if ((cur_state == LEGUP_F_main_BB_threadi4_189)) begin
		main_threadi4_549_reg <= main_threadi4_549;
		if (start == 1'b0 && ^(main_threadi4_549) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi4_549_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %550*/
	/*   %551 = icmp sgt i32 %548, 32767*/
		main_550_551 = ($signed(main_threadi4_548_reg) > $signed(32'd32767));
end
always @(posedge clk) begin
	/* main: %550*/
	/*   %551 = icmp sgt i32 %548, 32767*/
	if ((cur_state == LEGUP_F_main_BB__550_190)) begin
		main_550_551_reg <= main_550_551;
		if (start == 1'b0 && ^(main_550_551) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_550_551_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %550*/
	/*   %sext38.i = shl i32 %548, 16*/
		main_550_sext38i = (main_threadi4_548_reg <<< (32'd16 % 32));
end
always @(posedge clk) begin
	/* main: %550*/
	/*   %sext38.i = shl i32 %548, 16*/
	if ((cur_state == LEGUP_F_main_BB__550_190)) begin
		main_550_sext38i_reg <= main_550_sext38i;
		if (start == 1'b0 && ^(main_550_sext38i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_550_sext38i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %550*/
	/*   %.op40.i = ashr i32 %sext38.i, 25*/
		main_550_op40i = ($signed(main_550_sext38i) >>> 32'd25);
end
always @(posedge clk) begin
	/* main: %550*/
	/*   %.op40.i = ashr i32 %sext38.i, 25*/
	if ((cur_state == LEGUP_F_main_BB__550_190)) begin
		main_550_op40i_reg <= main_550_op40i;
		if (start == 1'b0 && ^(main_550_op40i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_550_op40i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %550*/
	/*   %552 = icmp sgt i32 %.op40.i, 31*/
		main_550_552 = ($signed(main_550_op40i) > $signed(32'd31));
end
always @(posedge clk) begin
	/* main: %550*/
	/*   %552 = icmp sgt i32 %.op40.i, 31*/
	if ((cur_state == LEGUP_F_main_BB__550_190)) begin
		main_550_552_reg <= main_550_552;
		if (start == 1'b0 && ^(main_550_552) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_550_552_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %550*/
	/*   %or.cond164.i = or i1 %551, %552*/
		main_550_orcond164i = (main_550_551 | main_550_552);
end
always @(posedge clk) begin
	/* main: %550*/
	/*   %or.cond164.i = or i1 %551, %552*/
	if ((cur_state == LEGUP_F_main_BB__550_190)) begin
		main_550_orcond164i_reg <= main_550_orcond164i;
		if (start == 1'b0 && ^(main_550_orcond164i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_550_orcond164i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %553*/
	/*   %554 = icmp slt i32 %.op40.i, -32*/
		main_553_554 = ($signed(main_550_op40i_reg) < $signed(-32'd32));
end
always @(posedge clk) begin
	/* main: %553*/
	/*   %554 = icmp slt i32 %.op40.i, -32*/
	if ((cur_state == LEGUP_F_main_BB__553_191)) begin
		main_553_554_reg <= main_553_554;
		if (start == 1'b0 && ^(main_553_554) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_553_554_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %555*/
	/*   %556 = add nsw i32 %.op40.i, 32*/
		main_555_556 = main_signed_add_32_0;
end
always @(*) begin
/* main: %555*/
/*   %556 = add nsw i32 %.op40.i, 32*/
	main_555_556_reg = main_1_gep_reg;
end
always @(*) begin
	/* main: %555*/
	/*   %phitmp1.i = trunc i32 %556 to i16*/
		main_555_phitmp1i = main_555_556[15:0];
end
always @(posedge clk) begin
	/* main: %555*/
	/*   %phitmp1.i = trunc i32 %556 to i16*/
	if ((cur_state == LEGUP_F_main_BB__555_192)) begin
		main_555_phitmp1i_reg <= main_555_phitmp1i;
		if (start == 1'b0 && ^(main_555_phitmp1i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_555_phitmp1i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.thread98.i*/
	/*   %557 = phi i16 [ %phitmp1.i, %555 ], [ 0, %553 ], [ 0, %.thread.i4 ], [ 63, %550 ]*/
	if ((((cur_state == LEGUP_F_main_BB_threadi4_189) & (memory_controller_waitrequest == 1'd0)) & (main_threadi4_549 == 1'd1))) begin
		main_thread98i_557 = 16'd0;
	end
	/* main: %.thread98.i*/
	/*   %557 = phi i16 [ %phitmp1.i, %555 ], [ 0, %553 ], [ 0, %.thread.i4 ], [ 63, %550 ]*/
	else if ((((cur_state == LEGUP_F_main_BB__550_190) & (memory_controller_waitrequest == 1'd0)) & (main_550_orcond164i == 1'd1))) begin
		main_thread98i_557 = 16'd63;
	end
	/* main: %.thread98.i*/
	/*   %557 = phi i16 [ %phitmp1.i, %555 ], [ 0, %553 ], [ 0, %.thread.i4 ], [ 63, %550 ]*/
	else if ((((cur_state == LEGUP_F_main_BB__553_191) & (memory_controller_waitrequest == 1'd0)) & (main_553_554 == 1'd1))) begin
		main_thread98i_557 = 16'd0;
	end
	/* main: %.thread98.i*/
	/*   %557 = phi i16 [ %phitmp1.i, %555 ], [ 0, %553 ], [ 0, %.thread.i4 ], [ 63, %550 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__555_192) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_thread98i_557 = main_555_phitmp1i;
	end
end
always @(posedge clk) begin
	/* main: %.thread98.i*/
	/*   %557 = phi i16 [ %phitmp1.i, %555 ], [ 0, %553 ], [ 0, %.thread.i4 ], [ 63, %550 ]*/
	if ((((cur_state == LEGUP_F_main_BB_threadi4_189) & (memory_controller_waitrequest == 1'd0)) & (main_threadi4_549 == 1'd1))) begin
		main_thread98i_557_reg <= main_thread98i_557;
		if (start == 1'b0 && ^(main_thread98i_557) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_thread98i_557_reg"); $finish; end
	end
	/* main: %.thread98.i*/
	/*   %557 = phi i16 [ %phitmp1.i, %555 ], [ 0, %553 ], [ 0, %.thread.i4 ], [ 63, %550 ]*/
	if ((((cur_state == LEGUP_F_main_BB__550_190) & (memory_controller_waitrequest == 1'd0)) & (main_550_orcond164i == 1'd1))) begin
		main_thread98i_557_reg <= main_thread98i_557;
		if (start == 1'b0 && ^(main_thread98i_557) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_thread98i_557_reg"); $finish; end
	end
	/* main: %.thread98.i*/
	/*   %557 = phi i16 [ %phitmp1.i, %555 ], [ 0, %553 ], [ 0, %.thread.i4 ], [ 63, %550 ]*/
	if ((((cur_state == LEGUP_F_main_BB__553_191) & (memory_controller_waitrequest == 1'd0)) & (main_553_554 == 1'd1))) begin
		main_thread98i_557_reg <= main_thread98i_557;
		if (start == 1'b0 && ^(main_thread98i_557) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_thread98i_557_reg"); $finish; end
	end
	/* main: %.thread98.i*/
	/*   %557 = phi i16 [ %phitmp1.i, %555 ], [ 0, %553 ], [ 0, %.thread.i4 ], [ 63, %550 ]*/
	if (((cur_state == LEGUP_F_main_BB__555_192) & (memory_controller_waitrequest == 1'd0))) begin
		main_thread98i_557_reg <= main_thread98i_557;
		if (start == 1'b0 && ^(main_thread98i_557) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_thread98i_557_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.thread98.i*/
	/*   %gep_int125 = ptrtoint i16* %19 to i32*/
		main_thread98i_gep_int125 = main_18_19_reg;
end
always @(posedge clk) begin
	/* main: %.thread98.i*/
	/*   %gep_int125 = ptrtoint i16* %19 to i32*/
	if ((cur_state == LEGUP_F_main_BB_thread98i_193)) begin
		main_thread98i_gep_int125_reg <= main_thread98i_gep_int125;
		if (start == 1'b0 && ^(main_thread98i_gep_int125) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_thread98i_gep_int125_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.thread98.i*/
	/*   %gep126 = add i32 %gep_int125, 4*/
		main_thread98i_gep126 = main_signed_add_32_0;
end
always @(*) begin
/* main: %.thread98.i*/
/*   %gep126 = add i32 %gep_int125, 4*/
	main_thread98i_gep126_reg = main_1_gep_reg;
end
always @(*) begin
	/* main: %.thread98.i*/
	/*   %558 = inttoptr i32 %gep126 to i16**/
		main_thread98i_558 = main_thread98i_gep126;
end
always @(posedge clk) begin
	/* main: %.thread98.i*/
	/*   %558 = inttoptr i32 %gep126 to i16**/
	if ((cur_state == LEGUP_F_main_BB_thread98i_193)) begin
		main_thread98i_558_reg <= main_thread98i_558;
		if (start == 1'b0 && ^(main_thread98i_558) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_thread98i_558_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.thread98.i*/
	/*   %559 = load i16* %558, align 2, !tbaa !1*/
		main_thread98i_559 = memory_controller_out_a[15:0];
end
always @(posedge clk) begin
	/* main: %.thread98.i*/
	/*   %559 = load i16* %558, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_thread98i_196)) begin
		main_thread98i_559_reg <= main_thread98i_559;
		if (start == 1'b0 && ^(main_thread98i_559) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_thread98i_559_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.thread98.i*/
	/*   %560 = sext i16 %559 to i32*/
		main_thread98i_560 = $signed(main_thread98i_559);
end
always @(posedge clk) begin
	/* main: %.thread98.i*/
	/*   %560 = sext i16 %559 to i32*/
	if ((cur_state == LEGUP_F_main_BB_thread98i_196)) begin
		main_thread98i_560_reg <= main_thread98i_560;
		if (start == 1'b0 && ^(main_thread98i_560) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_thread98i_560_reg"); $finish; end
	end
end
always @(*) begin
	main_thread98i_561 = main_signed_multiply_32_0;
end
always @(*) begin
/* main: %.thread98.i*/
/*   %561 = mul i32 %560, 40960*/
	main_thread98i_561_reg = main_74_76_reg;
end
always @(*) begin
	/* main: %.thread98.i*/
	/*   %562 = add i32 %561, 40960*/
		main_thread98i_562 = main_signed_add_32_1;
end
always @(*) begin
/* main: %.thread98.i*/
/*   %562 = add i32 %561, 40960*/
	main_thread98i_562_reg = main_1_gep3_reg;
end
always @(*) begin
	/* main: %.thread98.i*/
	/*   %563 = ashr i32 %562, 16*/
		main_thread98i_563 = ($signed(main_thread98i_562) >>> 32'd16);
end
always @(posedge clk) begin
	/* main: %.thread98.i*/
	/*   %563 = ashr i32 %562, 16*/
	if ((cur_state == LEGUP_F_main_BB_thread98i_197)) begin
		main_thread98i_563_reg <= main_thread98i_563;
		if (start == 1'b0 && ^(main_thread98i_563) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_thread98i_563_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.thread98.i*/
	/*   %564 = add nsw i32 %563, 2048*/
		main_thread98i_564 = main_signed_add_32_0;
end
always @(*) begin
/* main: %.thread98.i*/
/*   %564 = add nsw i32 %563, 2048*/
	main_thread98i_564_reg = main_1_5_reg;
end
always @(*) begin
	/* main: %.thread98.i*/
	/*   %565 = icmp slt i32 %564, -32768*/
		main_thread98i_565 = ($signed(main_thread98i_564) < $signed(-32'd32768));
end
always @(posedge clk) begin
	/* main: %.thread98.i*/
	/*   %565 = icmp slt i32 %564, -32768*/
	if ((cur_state == LEGUP_F_main_BB_thread98i_197)) begin
		main_thread98i_565_reg <= main_thread98i_565;
		if (start == 1'b0 && ^(main_thread98i_565) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_thread98i_565_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %566*/
	/*   %567 = icmp sgt i32 %564, 32767*/
		main_566_567 = ($signed(main_thread98i_564_reg) > $signed(32'd32767));
end
always @(posedge clk) begin
	/* main: %566*/
	/*   %567 = icmp sgt i32 %564, 32767*/
	if ((cur_state == LEGUP_F_main_BB__566_198)) begin
		main_566_567_reg <= main_566_567;
		if (start == 1'b0 && ^(main_566_567) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_566_567_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %566*/
	/*   %sext43.i = shl i32 %564, 16*/
		main_566_sext43i = (main_thread98i_564_reg <<< (32'd16 % 32));
end
always @(posedge clk) begin
	/* main: %566*/
	/*   %sext43.i = shl i32 %564, 16*/
	if ((cur_state == LEGUP_F_main_BB__566_198)) begin
		main_566_sext43i_reg <= main_566_sext43i;
		if (start == 1'b0 && ^(main_566_sext43i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_566_sext43i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %566*/
	/*   %568 = ashr exact i32 %sext43.i, 16*/
		main_566_568 = ($signed(main_566_sext43i) >>> 32'd16);
end
always @(posedge clk) begin
	/* main: %566*/
	/*   %568 = ashr exact i32 %sext43.i, 16*/
	if ((cur_state == LEGUP_F_main_BB__566_198)) begin
		main_566_568_reg <= main_566_568;
		if (start == 1'b0 && ^(main_566_568) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_566_568_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %566*/
	/*   %.op45.i = add nsw i32 %568, 256*/
		main_566_op45i = main_signed_add_32_0;
end
always @(*) begin
/* main: %566*/
/*   %.op45.i = add nsw i32 %568, 256*/
	main_566_op45i_reg = main_1_gep_reg;
end
always @(*) begin
	/* main: %gsm_add.exit29.i*/
	/*   %569 = icmp slt i32 %.op45.i, -32768*/
		main_gsm_addexit29i_569 = ($signed(main_566_op45i_reg) < $signed(-32'd32768));
end
always @(posedge clk) begin
	/* main: %gsm_add.exit29.i*/
	/*   %569 = icmp slt i32 %.op45.i, -32768*/
	if ((cur_state == LEGUP_F_main_BB_gsm_addexit29i_199)) begin
		main_gsm_addexit29i_569_reg <= main_gsm_addexit29i_569;
		if (start == 1'b0 && ^(main_gsm_addexit29i_569) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_addexit29i_569_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_add.exit29.thread.i*/
	/*   %570 = icmp sgt i32 %.op45.i, 32767*/
		main_gsm_addexit29threadi_570 = ($signed(main_566_op45i_reg) > $signed(32'd32767));
end
always @(posedge clk) begin
	/* main: %gsm_add.exit29.thread.i*/
	/*   %570 = icmp sgt i32 %.op45.i, 32767*/
	if ((cur_state == LEGUP_F_main_BB_gsm_addexit29threadi_200)) begin
		main_gsm_addexit29threadi_570_reg <= main_gsm_addexit29threadi_570;
		if (start == 1'b0 && ^(main_gsm_addexit29threadi_570) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_addexit29threadi_570_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_add.exit29.thread.i*/
	/*   %sext47.i = shl i32 %.op45.i, 16*/
		main_gsm_addexit29threadi_sext47i = (main_566_op45i_reg <<< (32'd16 % 32));
end
always @(posedge clk) begin
	/* main: %gsm_add.exit29.thread.i*/
	/*   %sext47.i = shl i32 %.op45.i, 16*/
	if ((cur_state == LEGUP_F_main_BB_gsm_addexit29threadi_200)) begin
		main_gsm_addexit29threadi_sext47i_reg <= main_gsm_addexit29threadi_sext47i;
		if (start == 1'b0 && ^(main_gsm_addexit29threadi_sext47i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_addexit29threadi_sext47i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_add.exit29.thread.i*/
	/*   %.op49.i = ashr i32 %sext47.i, 25*/
		main_gsm_addexit29threadi_op49i = ($signed(main_gsm_addexit29threadi_sext47i) >>> 32'd25);
end
always @(posedge clk) begin
	/* main: %gsm_add.exit29.thread.i*/
	/*   %.op49.i = ashr i32 %sext47.i, 25*/
	if ((cur_state == LEGUP_F_main_BB_gsm_addexit29threadi_200)) begin
		main_gsm_addexit29threadi_op49i_reg <= main_gsm_addexit29threadi_op49i;
		if (start == 1'b0 && ^(main_gsm_addexit29threadi_op49i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_addexit29threadi_op49i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_add.exit29.thread.i*/
	/*   %571 = icmp sgt i32 %.op49.i, 15*/
		main_gsm_addexit29threadi_571 = ($signed(main_gsm_addexit29threadi_op49i) > $signed(32'd15));
end
always @(posedge clk) begin
	/* main: %gsm_add.exit29.thread.i*/
	/*   %571 = icmp sgt i32 %.op49.i, 15*/
	if ((cur_state == LEGUP_F_main_BB_gsm_addexit29threadi_200)) begin
		main_gsm_addexit29threadi_571_reg <= main_gsm_addexit29threadi_571;
		if (start == 1'b0 && ^(main_gsm_addexit29threadi_571) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_addexit29threadi_571_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_add.exit29.thread.i*/
	/*   %or.cond165.i = or i1 %570, %571*/
		main_gsm_addexit29threadi_orcond165i = (main_gsm_addexit29threadi_570 | main_gsm_addexit29threadi_571);
end
always @(posedge clk) begin
	/* main: %gsm_add.exit29.thread.i*/
	/*   %or.cond165.i = or i1 %570, %571*/
	if ((cur_state == LEGUP_F_main_BB_gsm_addexit29threadi_200)) begin
		main_gsm_addexit29threadi_orcond165i_reg <= main_gsm_addexit29threadi_orcond165i;
		if (start == 1'b0 && ^(main_gsm_addexit29threadi_orcond165i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_addexit29threadi_orcond165i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %572*/
	/*   %573 = icmp slt i32 %.op49.i, -16*/
		main_572_573 = ($signed(main_gsm_addexit29threadi_op49i_reg) < $signed(-32'd16));
end
always @(posedge clk) begin
	/* main: %572*/
	/*   %573 = icmp slt i32 %.op49.i, -16*/
	if ((cur_state == LEGUP_F_main_BB__572_201)) begin
		main_572_573_reg <= main_572_573;
		if (start == 1'b0 && ^(main_572_573) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_572_573_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %574*/
	/*   %575 = add nsw i32 %.op49.i, 16*/
		main_574_575 = main_signed_add_32_0;
end
always @(*) begin
/* main: %574*/
/*   %575 = add nsw i32 %.op49.i, 16*/
	main_574_575_reg = main_1_gep_reg;
end
always @(*) begin
	/* main: %574*/
	/*   %phitmp2.i = trunc i32 %575 to i16*/
		main_574_phitmp2i = main_574_575[15:0];
end
always @(posedge clk) begin
	/* main: %574*/
	/*   %phitmp2.i = trunc i32 %575 to i16*/
	if ((cur_state == LEGUP_F_main_BB__574_202)) begin
		main_574_phitmp2i_reg <= main_574_phitmp2i;
		if (start == 1'b0 && ^(main_574_phitmp2i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_574_phitmp2i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.thread102.i*/
	/*   %576 = phi i16 [ %phitmp2.i, %574 ], [ 0, %572 ], [ 0, %gsm_add.exit29.i ], [ 31, %gsm_add.exit29.thread.i ], [ 0, %.thread98.i ], [ 31, %566 ]*/
	if ((((cur_state == LEGUP_F_main_BB_thread98i_197) & (memory_controller_waitrequest == 1'd0)) & (main_thread98i_565 == 1'd1))) begin
		main_thread102i_576 = 16'd0;
	end
	/* main: %.thread102.i*/
	/*   %576 = phi i16 [ %phitmp2.i, %574 ], [ 0, %572 ], [ 0, %gsm_add.exit29.i ], [ 31, %gsm_add.exit29.thread.i ], [ 0, %.thread98.i ], [ 31, %566 ]*/
	else if ((((cur_state == LEGUP_F_main_BB__566_198) & (memory_controller_waitrequest == 1'd0)) & (main_566_567 == 1'd1))) begin
		main_thread102i_576 = 16'd31;
	end
	/* main: %.thread102.i*/
	/*   %576 = phi i16 [ %phitmp2.i, %574 ], [ 0, %572 ], [ 0, %gsm_add.exit29.i ], [ 31, %gsm_add.exit29.thread.i ], [ 0, %.thread98.i ], [ 31, %566 ]*/
	else if ((((cur_state == LEGUP_F_main_BB_gsm_addexit29i_199) & (memory_controller_waitrequest == 1'd0)) & (main_gsm_addexit29i_569 == 1'd1))) begin
		main_thread102i_576 = 16'd0;
	end
	/* main: %.thread102.i*/
	/*   %576 = phi i16 [ %phitmp2.i, %574 ], [ 0, %572 ], [ 0, %gsm_add.exit29.i ], [ 31, %gsm_add.exit29.thread.i ], [ 0, %.thread98.i ], [ 31, %566 ]*/
	else if ((((cur_state == LEGUP_F_main_BB_gsm_addexit29threadi_200) & (memory_controller_waitrequest == 1'd0)) & (main_gsm_addexit29threadi_orcond165i == 1'd1))) begin
		main_thread102i_576 = 16'd31;
	end
	/* main: %.thread102.i*/
	/*   %576 = phi i16 [ %phitmp2.i, %574 ], [ 0, %572 ], [ 0, %gsm_add.exit29.i ], [ 31, %gsm_add.exit29.thread.i ], [ 0, %.thread98.i ], [ 31, %566 ]*/
	else if ((((cur_state == LEGUP_F_main_BB__572_201) & (memory_controller_waitrequest == 1'd0)) & (main_572_573 == 1'd1))) begin
		main_thread102i_576 = 16'd0;
	end
	/* main: %.thread102.i*/
	/*   %576 = phi i16 [ %phitmp2.i, %574 ], [ 0, %572 ], [ 0, %gsm_add.exit29.i ], [ 31, %gsm_add.exit29.thread.i ], [ 0, %.thread98.i ], [ 31, %566 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__574_202) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_thread102i_576 = main_574_phitmp2i;
	end
end
always @(posedge clk) begin
	/* main: %.thread102.i*/
	/*   %576 = phi i16 [ %phitmp2.i, %574 ], [ 0, %572 ], [ 0, %gsm_add.exit29.i ], [ 31, %gsm_add.exit29.thread.i ], [ 0, %.thread98.i ], [ 31, %566 ]*/
	if ((((cur_state == LEGUP_F_main_BB_thread98i_197) & (memory_controller_waitrequest == 1'd0)) & (main_thread98i_565 == 1'd1))) begin
		main_thread102i_576_reg <= main_thread102i_576;
		if (start == 1'b0 && ^(main_thread102i_576) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_thread102i_576_reg"); $finish; end
	end
	/* main: %.thread102.i*/
	/*   %576 = phi i16 [ %phitmp2.i, %574 ], [ 0, %572 ], [ 0, %gsm_add.exit29.i ], [ 31, %gsm_add.exit29.thread.i ], [ 0, %.thread98.i ], [ 31, %566 ]*/
	if ((((cur_state == LEGUP_F_main_BB__566_198) & (memory_controller_waitrequest == 1'd0)) & (main_566_567 == 1'd1))) begin
		main_thread102i_576_reg <= main_thread102i_576;
		if (start == 1'b0 && ^(main_thread102i_576) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_thread102i_576_reg"); $finish; end
	end
	/* main: %.thread102.i*/
	/*   %576 = phi i16 [ %phitmp2.i, %574 ], [ 0, %572 ], [ 0, %gsm_add.exit29.i ], [ 31, %gsm_add.exit29.thread.i ], [ 0, %.thread98.i ], [ 31, %566 ]*/
	if ((((cur_state == LEGUP_F_main_BB_gsm_addexit29i_199) & (memory_controller_waitrequest == 1'd0)) & (main_gsm_addexit29i_569 == 1'd1))) begin
		main_thread102i_576_reg <= main_thread102i_576;
		if (start == 1'b0 && ^(main_thread102i_576) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_thread102i_576_reg"); $finish; end
	end
	/* main: %.thread102.i*/
	/*   %576 = phi i16 [ %phitmp2.i, %574 ], [ 0, %572 ], [ 0, %gsm_add.exit29.i ], [ 31, %gsm_add.exit29.thread.i ], [ 0, %.thread98.i ], [ 31, %566 ]*/
	if ((((cur_state == LEGUP_F_main_BB_gsm_addexit29threadi_200) & (memory_controller_waitrequest == 1'd0)) & (main_gsm_addexit29threadi_orcond165i == 1'd1))) begin
		main_thread102i_576_reg <= main_thread102i_576;
		if (start == 1'b0 && ^(main_thread102i_576) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_thread102i_576_reg"); $finish; end
	end
	/* main: %.thread102.i*/
	/*   %576 = phi i16 [ %phitmp2.i, %574 ], [ 0, %572 ], [ 0, %gsm_add.exit29.i ], [ 31, %gsm_add.exit29.thread.i ], [ 0, %.thread98.i ], [ 31, %566 ]*/
	if ((((cur_state == LEGUP_F_main_BB__572_201) & (memory_controller_waitrequest == 1'd0)) & (main_572_573 == 1'd1))) begin
		main_thread102i_576_reg <= main_thread102i_576;
		if (start == 1'b0 && ^(main_thread102i_576) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_thread102i_576_reg"); $finish; end
	end
	/* main: %.thread102.i*/
	/*   %576 = phi i16 [ %phitmp2.i, %574 ], [ 0, %572 ], [ 0, %gsm_add.exit29.i ], [ 31, %gsm_add.exit29.thread.i ], [ 0, %.thread98.i ], [ 31, %566 ]*/
	if (((cur_state == LEGUP_F_main_BB__574_202) & (memory_controller_waitrequest == 1'd0))) begin
		main_thread102i_576_reg <= main_thread102i_576;
		if (start == 1'b0 && ^(main_thread102i_576) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_thread102i_576_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.thread102.i*/
	/*   %gep_int127 = ptrtoint i16* %19 to i32*/
		main_thread102i_gep_int127 = main_18_19_reg;
end
always @(posedge clk) begin
	/* main: %.thread102.i*/
	/*   %gep_int127 = ptrtoint i16* %19 to i32*/
	if ((cur_state == LEGUP_F_main_BB_thread102i_203)) begin
		main_thread102i_gep_int127_reg <= main_thread102i_gep_int127;
		if (start == 1'b0 && ^(main_thread102i_gep_int127) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_thread102i_gep_int127_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.thread102.i*/
	/*   %gep128 = add i32 %gep_int127, 6*/
		main_thread102i_gep128 = main_signed_add_32_0;
end
always @(*) begin
/* main: %.thread102.i*/
/*   %gep128 = add i32 %gep_int127, 6*/
	main_thread102i_gep128_reg = main_1_gep_reg;
end
always @(*) begin
	/* main: %.thread102.i*/
	/*   %577 = inttoptr i32 %gep128 to i16**/
		main_thread102i_577 = main_thread102i_gep128;
end
always @(posedge clk) begin
	/* main: %.thread102.i*/
	/*   %577 = inttoptr i32 %gep128 to i16**/
	if ((cur_state == LEGUP_F_main_BB_thread102i_203)) begin
		main_thread102i_577_reg <= main_thread102i_577;
		if (start == 1'b0 && ^(main_thread102i_577) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_thread102i_577_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.thread102.i*/
	/*   %578 = load i16* %577, align 2, !tbaa !1*/
		main_thread102i_578 = memory_controller_out_a[15:0];
end
always @(posedge clk) begin
	/* main: %.thread102.i*/
	/*   %578 = load i16* %577, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_thread102i_206)) begin
		main_thread102i_578_reg <= main_thread102i_578;
		if (start == 1'b0 && ^(main_thread102i_578) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_thread102i_578_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.thread102.i*/
	/*   %579 = sext i16 %578 to i32*/
		main_thread102i_579 = $signed(main_thread102i_578);
end
always @(posedge clk) begin
	/* main: %.thread102.i*/
	/*   %579 = sext i16 %578 to i32*/
	if ((cur_state == LEGUP_F_main_BB_thread102i_206)) begin
		main_thread102i_579_reg <= main_thread102i_579;
		if (start == 1'b0 && ^(main_thread102i_579) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_thread102i_579_reg"); $finish; end
	end
end
always @(*) begin
	main_thread102i_580 = main_signed_multiply_32_0;
end
always @(*) begin
/* main: %.thread102.i*/
/*   %580 = mul i32 %579, 40960*/
	main_thread102i_580_reg = main_74_76_reg;
end
always @(*) begin
	/* main: %.thread102.i*/
	/*   %581 = add i32 %580, 40960*/
		main_thread102i_581 = main_signed_add_32_0;
end
always @(*) begin
/* main: %.thread102.i*/
/*   %581 = add i32 %580, 40960*/
	main_thread102i_581_reg = main_1_gep_reg;
end
always @(*) begin
	/* main: %.thread102.i*/
	/*   %582 = ashr i32 %581, 16*/
		main_thread102i_582 = ($signed(main_thread102i_581) >>> 32'd16);
end
always @(posedge clk) begin
	/* main: %.thread102.i*/
	/*   %582 = ashr i32 %581, 16*/
	if ((cur_state == LEGUP_F_main_BB_thread102i_207)) begin
		main_thread102i_582_reg <= main_thread102i_582;
		if (start == 1'b0 && ^(main_thread102i_582) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_thread102i_582_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.thread102.i*/
	/*   %583 = add nsw i32 %582, -2560*/
		main_thread102i_583 = main_signed_add_32_1;
end
always @(*) begin
/* main: %.thread102.i*/
/*   %583 = add nsw i32 %582, -2560*/
	main_thread102i_583_reg = main_1_gep3_reg;
end
always @(*) begin
	/* main: %.thread102.i*/
	/*   %584 = icmp slt i32 %583, -32768*/
		main_thread102i_584 = ($signed(main_thread102i_583) < $signed(-32'd32768));
end
always @(posedge clk) begin
	/* main: %.thread102.i*/
	/*   %584 = icmp slt i32 %583, -32768*/
	if ((cur_state == LEGUP_F_main_BB_thread102i_207)) begin
		main_thread102i_584_reg <= main_thread102i_584;
		if (start == 1'b0 && ^(main_thread102i_584) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_thread102i_584_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %585*/
	/*   %586 = icmp sgt i32 %583, 32767*/
		main_585_586 = ($signed(main_thread102i_583_reg) > $signed(32'd32767));
end
always @(posedge clk) begin
	/* main: %585*/
	/*   %586 = icmp sgt i32 %583, 32767*/
	if ((cur_state == LEGUP_F_main_BB__585_208)) begin
		main_585_586_reg <= main_585_586;
		if (start == 1'b0 && ^(main_585_586) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_585_586_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %585*/
	/*   %sext52.i = shl i32 %583, 16*/
		main_585_sext52i = (main_thread102i_583_reg <<< (32'd16 % 32));
end
always @(posedge clk) begin
	/* main: %585*/
	/*   %sext52.i = shl i32 %583, 16*/
	if ((cur_state == LEGUP_F_main_BB__585_208)) begin
		main_585_sext52i_reg <= main_585_sext52i;
		if (start == 1'b0 && ^(main_585_sext52i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_585_sext52i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %585*/
	/*   %587 = ashr exact i32 %sext52.i, 16*/
		main_585_587 = ($signed(main_585_sext52i) >>> 32'd16);
end
always @(posedge clk) begin
	/* main: %585*/
	/*   %587 = ashr exact i32 %sext52.i, 16*/
	if ((cur_state == LEGUP_F_main_BB__585_208)) begin
		main_585_587_reg <= main_585_587;
		if (start == 1'b0 && ^(main_585_587) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_585_587_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %585*/
	/*   %.op54.i = add nsw i32 %587, 256*/
		main_585_op54i = main_signed_add_32_0;
end
always @(*) begin
/* main: %585*/
/*   %.op54.i = add nsw i32 %587, 256*/
	main_585_op54i_reg = main_1_gep_reg;
end
always @(*) begin
	/* main: %gsm_add.exit25.i*/
	/*   %588 = icmp slt i32 %.op54.i, -32768*/
		main_gsm_addexit25i_588 = ($signed(main_585_op54i_reg) < $signed(-32'd32768));
end
always @(posedge clk) begin
	/* main: %gsm_add.exit25.i*/
	/*   %588 = icmp slt i32 %.op54.i, -32768*/
	if ((cur_state == LEGUP_F_main_BB_gsm_addexit25i_209)) begin
		main_gsm_addexit25i_588_reg <= main_gsm_addexit25i_588;
		if (start == 1'b0 && ^(main_gsm_addexit25i_588) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_addexit25i_588_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_add.exit25.thread.i*/
	/*   %589 = icmp sgt i32 %.op54.i, 32767*/
		main_gsm_addexit25threadi_589 = ($signed(main_585_op54i_reg) > $signed(32'd32767));
end
always @(posedge clk) begin
	/* main: %gsm_add.exit25.thread.i*/
	/*   %589 = icmp sgt i32 %.op54.i, 32767*/
	if ((cur_state == LEGUP_F_main_BB_gsm_addexit25threadi_210)) begin
		main_gsm_addexit25threadi_589_reg <= main_gsm_addexit25threadi_589;
		if (start == 1'b0 && ^(main_gsm_addexit25threadi_589) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_addexit25threadi_589_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_add.exit25.thread.i*/
	/*   %sext56.i = shl i32 %.op54.i, 16*/
		main_gsm_addexit25threadi_sext56i = (main_585_op54i_reg <<< (32'd16 % 32));
end
always @(posedge clk) begin
	/* main: %gsm_add.exit25.thread.i*/
	/*   %sext56.i = shl i32 %.op54.i, 16*/
	if ((cur_state == LEGUP_F_main_BB_gsm_addexit25threadi_210)) begin
		main_gsm_addexit25threadi_sext56i_reg <= main_gsm_addexit25threadi_sext56i;
		if (start == 1'b0 && ^(main_gsm_addexit25threadi_sext56i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_addexit25threadi_sext56i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_add.exit25.thread.i*/
	/*   %.op58.i = ashr i32 %sext56.i, 25*/
		main_gsm_addexit25threadi_op58i = ($signed(main_gsm_addexit25threadi_sext56i) >>> 32'd25);
end
always @(posedge clk) begin
	/* main: %gsm_add.exit25.thread.i*/
	/*   %.op58.i = ashr i32 %sext56.i, 25*/
	if ((cur_state == LEGUP_F_main_BB_gsm_addexit25threadi_210)) begin
		main_gsm_addexit25threadi_op58i_reg <= main_gsm_addexit25threadi_op58i;
		if (start == 1'b0 && ^(main_gsm_addexit25threadi_op58i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_addexit25threadi_op58i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_add.exit25.thread.i*/
	/*   %590 = icmp sgt i32 %.op58.i, 15*/
		main_gsm_addexit25threadi_590 = ($signed(main_gsm_addexit25threadi_op58i) > $signed(32'd15));
end
always @(posedge clk) begin
	/* main: %gsm_add.exit25.thread.i*/
	/*   %590 = icmp sgt i32 %.op58.i, 15*/
	if ((cur_state == LEGUP_F_main_BB_gsm_addexit25threadi_210)) begin
		main_gsm_addexit25threadi_590_reg <= main_gsm_addexit25threadi_590;
		if (start == 1'b0 && ^(main_gsm_addexit25threadi_590) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_addexit25threadi_590_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_add.exit25.thread.i*/
	/*   %or.cond166.i = or i1 %589, %590*/
		main_gsm_addexit25threadi_orcond166i = (main_gsm_addexit25threadi_589 | main_gsm_addexit25threadi_590);
end
always @(posedge clk) begin
	/* main: %gsm_add.exit25.thread.i*/
	/*   %or.cond166.i = or i1 %589, %590*/
	if ((cur_state == LEGUP_F_main_BB_gsm_addexit25threadi_210)) begin
		main_gsm_addexit25threadi_orcond166i_reg <= main_gsm_addexit25threadi_orcond166i;
		if (start == 1'b0 && ^(main_gsm_addexit25threadi_orcond166i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_addexit25threadi_orcond166i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %591*/
	/*   %592 = icmp slt i32 %.op58.i, -16*/
		main_591_592 = ($signed(main_gsm_addexit25threadi_op58i_reg) < $signed(-32'd16));
end
always @(posedge clk) begin
	/* main: %591*/
	/*   %592 = icmp slt i32 %.op58.i, -16*/
	if ((cur_state == LEGUP_F_main_BB__591_211)) begin
		main_591_592_reg <= main_591_592;
		if (start == 1'b0 && ^(main_591_592) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_591_592_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %593*/
	/*   %594 = add nsw i32 %.op58.i, 16*/
		main_593_594 = main_signed_add_32_0;
end
always @(*) begin
/* main: %593*/
/*   %594 = add nsw i32 %.op58.i, 16*/
	main_593_594_reg = main_1_gep_reg;
end
always @(*) begin
	/* main: %593*/
	/*   %phitmp3.i = trunc i32 %594 to i16*/
		main_593_phitmp3i = main_593_594[15:0];
end
always @(posedge clk) begin
	/* main: %593*/
	/*   %phitmp3.i = trunc i32 %594 to i16*/
	if ((cur_state == LEGUP_F_main_BB__593_212)) begin
		main_593_phitmp3i_reg <= main_593_phitmp3i;
		if (start == 1'b0 && ^(main_593_phitmp3i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_593_phitmp3i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.thread107.i*/
	/*   %595 = phi i16 [ %phitmp3.i, %593 ], [ 0, %591 ], [ 0, %gsm_add.exit25.i ], [ 31, %gsm_add.exit25.thread.i ], [ 0, %.thread102.i ], [ 31, %585 ]*/
	if ((((cur_state == LEGUP_F_main_BB_thread102i_207) & (memory_controller_waitrequest == 1'd0)) & (main_thread102i_584 == 1'd1))) begin
		main_thread107i_595 = 16'd0;
	end
	/* main: %.thread107.i*/
	/*   %595 = phi i16 [ %phitmp3.i, %593 ], [ 0, %591 ], [ 0, %gsm_add.exit25.i ], [ 31, %gsm_add.exit25.thread.i ], [ 0, %.thread102.i ], [ 31, %585 ]*/
	else if ((((cur_state == LEGUP_F_main_BB__585_208) & (memory_controller_waitrequest == 1'd0)) & (main_585_586 == 1'd1))) begin
		main_thread107i_595 = 16'd31;
	end
	/* main: %.thread107.i*/
	/*   %595 = phi i16 [ %phitmp3.i, %593 ], [ 0, %591 ], [ 0, %gsm_add.exit25.i ], [ 31, %gsm_add.exit25.thread.i ], [ 0, %.thread102.i ], [ 31, %585 ]*/
	else if ((((cur_state == LEGUP_F_main_BB_gsm_addexit25i_209) & (memory_controller_waitrequest == 1'd0)) & (main_gsm_addexit25i_588 == 1'd1))) begin
		main_thread107i_595 = 16'd0;
	end
	/* main: %.thread107.i*/
	/*   %595 = phi i16 [ %phitmp3.i, %593 ], [ 0, %591 ], [ 0, %gsm_add.exit25.i ], [ 31, %gsm_add.exit25.thread.i ], [ 0, %.thread102.i ], [ 31, %585 ]*/
	else if ((((cur_state == LEGUP_F_main_BB_gsm_addexit25threadi_210) & (memory_controller_waitrequest == 1'd0)) & (main_gsm_addexit25threadi_orcond166i == 1'd1))) begin
		main_thread107i_595 = 16'd31;
	end
	/* main: %.thread107.i*/
	/*   %595 = phi i16 [ %phitmp3.i, %593 ], [ 0, %591 ], [ 0, %gsm_add.exit25.i ], [ 31, %gsm_add.exit25.thread.i ], [ 0, %.thread102.i ], [ 31, %585 ]*/
	else if ((((cur_state == LEGUP_F_main_BB__591_211) & (memory_controller_waitrequest == 1'd0)) & (main_591_592 == 1'd1))) begin
		main_thread107i_595 = 16'd0;
	end
	/* main: %.thread107.i*/
	/*   %595 = phi i16 [ %phitmp3.i, %593 ], [ 0, %591 ], [ 0, %gsm_add.exit25.i ], [ 31, %gsm_add.exit25.thread.i ], [ 0, %.thread102.i ], [ 31, %585 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__593_212) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_thread107i_595 = main_593_phitmp3i;
	end
end
always @(posedge clk) begin
	/* main: %.thread107.i*/
	/*   %595 = phi i16 [ %phitmp3.i, %593 ], [ 0, %591 ], [ 0, %gsm_add.exit25.i ], [ 31, %gsm_add.exit25.thread.i ], [ 0, %.thread102.i ], [ 31, %585 ]*/
	if ((((cur_state == LEGUP_F_main_BB_thread102i_207) & (memory_controller_waitrequest == 1'd0)) & (main_thread102i_584 == 1'd1))) begin
		main_thread107i_595_reg <= main_thread107i_595;
		if (start == 1'b0 && ^(main_thread107i_595) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_thread107i_595_reg"); $finish; end
	end
	/* main: %.thread107.i*/
	/*   %595 = phi i16 [ %phitmp3.i, %593 ], [ 0, %591 ], [ 0, %gsm_add.exit25.i ], [ 31, %gsm_add.exit25.thread.i ], [ 0, %.thread102.i ], [ 31, %585 ]*/
	if ((((cur_state == LEGUP_F_main_BB__585_208) & (memory_controller_waitrequest == 1'd0)) & (main_585_586 == 1'd1))) begin
		main_thread107i_595_reg <= main_thread107i_595;
		if (start == 1'b0 && ^(main_thread107i_595) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_thread107i_595_reg"); $finish; end
	end
	/* main: %.thread107.i*/
	/*   %595 = phi i16 [ %phitmp3.i, %593 ], [ 0, %591 ], [ 0, %gsm_add.exit25.i ], [ 31, %gsm_add.exit25.thread.i ], [ 0, %.thread102.i ], [ 31, %585 ]*/
	if ((((cur_state == LEGUP_F_main_BB_gsm_addexit25i_209) & (memory_controller_waitrequest == 1'd0)) & (main_gsm_addexit25i_588 == 1'd1))) begin
		main_thread107i_595_reg <= main_thread107i_595;
		if (start == 1'b0 && ^(main_thread107i_595) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_thread107i_595_reg"); $finish; end
	end
	/* main: %.thread107.i*/
	/*   %595 = phi i16 [ %phitmp3.i, %593 ], [ 0, %591 ], [ 0, %gsm_add.exit25.i ], [ 31, %gsm_add.exit25.thread.i ], [ 0, %.thread102.i ], [ 31, %585 ]*/
	if ((((cur_state == LEGUP_F_main_BB_gsm_addexit25threadi_210) & (memory_controller_waitrequest == 1'd0)) & (main_gsm_addexit25threadi_orcond166i == 1'd1))) begin
		main_thread107i_595_reg <= main_thread107i_595;
		if (start == 1'b0 && ^(main_thread107i_595) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_thread107i_595_reg"); $finish; end
	end
	/* main: %.thread107.i*/
	/*   %595 = phi i16 [ %phitmp3.i, %593 ], [ 0, %591 ], [ 0, %gsm_add.exit25.i ], [ 31, %gsm_add.exit25.thread.i ], [ 0, %.thread102.i ], [ 31, %585 ]*/
	if ((((cur_state == LEGUP_F_main_BB__591_211) & (memory_controller_waitrequest == 1'd0)) & (main_591_592 == 1'd1))) begin
		main_thread107i_595_reg <= main_thread107i_595;
		if (start == 1'b0 && ^(main_thread107i_595) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_thread107i_595_reg"); $finish; end
	end
	/* main: %.thread107.i*/
	/*   %595 = phi i16 [ %phitmp3.i, %593 ], [ 0, %591 ], [ 0, %gsm_add.exit25.i ], [ 31, %gsm_add.exit25.thread.i ], [ 0, %.thread102.i ], [ 31, %585 ]*/
	if (((cur_state == LEGUP_F_main_BB__593_212) & (memory_controller_waitrequest == 1'd0))) begin
		main_thread107i_595_reg <= main_thread107i_595;
		if (start == 1'b0 && ^(main_thread107i_595) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_thread107i_595_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.thread107.i*/
	/*   %gep_int129 = ptrtoint i16* %19 to i32*/
		main_thread107i_gep_int129 = main_18_19_reg;
end
always @(posedge clk) begin
	/* main: %.thread107.i*/
	/*   %gep_int129 = ptrtoint i16* %19 to i32*/
	if ((cur_state == LEGUP_F_main_BB_thread107i_213)) begin
		main_thread107i_gep_int129_reg <= main_thread107i_gep_int129;
		if (start == 1'b0 && ^(main_thread107i_gep_int129) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_thread107i_gep_int129_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.thread107.i*/
	/*   %gep130 = add i32 %gep_int129, 8*/
		main_thread107i_gep130 = main_signed_add_32_0;
end
always @(*) begin
/* main: %.thread107.i*/
/*   %gep130 = add i32 %gep_int129, 8*/
	main_thread107i_gep130_reg = main_1_gep_reg;
end
always @(*) begin
	/* main: %.thread107.i*/
	/*   %596 = inttoptr i32 %gep130 to i16**/
		main_thread107i_596 = main_thread107i_gep130;
end
always @(posedge clk) begin
	/* main: %.thread107.i*/
	/*   %596 = inttoptr i32 %gep130 to i16**/
	if ((cur_state == LEGUP_F_main_BB_thread107i_213)) begin
		main_thread107i_596_reg <= main_thread107i_596;
		if (start == 1'b0 && ^(main_thread107i_596) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_thread107i_596_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.thread107.i*/
	/*   %597 = load i16* %596, align 2, !tbaa !1*/
		main_thread107i_597 = memory_controller_out_a[15:0];
end
always @(posedge clk) begin
	/* main: %.thread107.i*/
	/*   %597 = load i16* %596, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_thread107i_216)) begin
		main_thread107i_597_reg <= main_thread107i_597;
		if (start == 1'b0 && ^(main_thread107i_597) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_thread107i_597_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.thread107.i*/
	/*   %598 = sext i16 %597 to i32*/
		main_thread107i_598 = $signed(main_thread107i_597);
end
always @(posedge clk) begin
	/* main: %.thread107.i*/
	/*   %598 = sext i16 %597 to i32*/
	if ((cur_state == LEGUP_F_main_BB_thread107i_216)) begin
		main_thread107i_598_reg <= main_thread107i_598;
		if (start == 1'b0 && ^(main_thread107i_598) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_thread107i_598_reg"); $finish; end
	end
end
always @(*) begin
	main_thread107i_599 = main_signed_multiply_32_0;
end
always @(*) begin
/* main: %.thread107.i*/
/*   %599 = mul i32 %598, 27928*/
	main_thread107i_599_reg = main_74_76_reg;
end
always @(*) begin
	/* main: %.thread107.i*/
	/*   %600 = add i32 %599, 27928*/
		main_thread107i_600 = main_signed_add_32_1;
end
always @(*) begin
/* main: %.thread107.i*/
/*   %600 = add i32 %599, 27928*/
	main_thread107i_600_reg = main_1_gep3_reg;
end
always @(*) begin
	/* main: %.thread107.i*/
	/*   %601 = ashr i32 %600, 16*/
		main_thread107i_601 = ($signed(main_thread107i_600) >>> 32'd16);
end
always @(posedge clk) begin
	/* main: %.thread107.i*/
	/*   %601 = ashr i32 %600, 16*/
	if ((cur_state == LEGUP_F_main_BB_thread107i_217)) begin
		main_thread107i_601_reg <= main_thread107i_601;
		if (start == 1'b0 && ^(main_thread107i_601) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_thread107i_601_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.thread107.i*/
	/*   %602 = add nsw i32 %601, 94*/
		main_thread107i_602 = main_signed_add_32_0;
end
always @(*) begin
/* main: %.thread107.i*/
/*   %602 = add nsw i32 %601, 94*/
	main_thread107i_602_reg = main_1_5_reg;
end
always @(*) begin
	/* main: %.thread107.i*/
	/*   %603 = icmp slt i32 %602, -32768*/
		main_thread107i_603 = ($signed(main_thread107i_602) < $signed(-32'd32768));
end
always @(posedge clk) begin
	/* main: %.thread107.i*/
	/*   %603 = icmp slt i32 %602, -32768*/
	if ((cur_state == LEGUP_F_main_BB_thread107i_217)) begin
		main_thread107i_603_reg <= main_thread107i_603;
		if (start == 1'b0 && ^(main_thread107i_603) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_thread107i_603_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %604*/
	/*   %605 = icmp sgt i32 %602, 32767*/
		main_604_605 = ($signed(main_thread107i_602_reg) > $signed(32'd32767));
end
always @(posedge clk) begin
	/* main: %604*/
	/*   %605 = icmp sgt i32 %602, 32767*/
	if ((cur_state == LEGUP_F_main_BB__604_218)) begin
		main_604_605_reg <= main_604_605;
		if (start == 1'b0 && ^(main_604_605) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_604_605_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %604*/
	/*   %sext61.i = shl i32 %602, 16*/
		main_604_sext61i = (main_thread107i_602_reg <<< (32'd16 % 32));
end
always @(posedge clk) begin
	/* main: %604*/
	/*   %sext61.i = shl i32 %602, 16*/
	if ((cur_state == LEGUP_F_main_BB__604_218)) begin
		main_604_sext61i_reg <= main_604_sext61i;
		if (start == 1'b0 && ^(main_604_sext61i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_604_sext61i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %604*/
	/*   %606 = ashr exact i32 %sext61.i, 16*/
		main_604_606 = ($signed(main_604_sext61i) >>> 32'd16);
end
always @(posedge clk) begin
	/* main: %604*/
	/*   %606 = ashr exact i32 %sext61.i, 16*/
	if ((cur_state == LEGUP_F_main_BB__604_218)) begin
		main_604_606_reg <= main_604_606;
		if (start == 1'b0 && ^(main_604_606) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_604_606_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %604*/
	/*   %.op63.i = add nsw i32 %606, 256*/
		main_604_op63i = main_signed_add_32_0;
end
always @(*) begin
/* main: %604*/
/*   %.op63.i = add nsw i32 %606, 256*/
	main_604_op63i_reg = main_1_gep_reg;
end
always @(*) begin
	/* main: %gsm_add.exit21.i*/
	/*   %607 = icmp slt i32 %.op63.i, -32768*/
		main_gsm_addexit21i_607 = ($signed(main_604_op63i_reg) < $signed(-32'd32768));
end
always @(posedge clk) begin
	/* main: %gsm_add.exit21.i*/
	/*   %607 = icmp slt i32 %.op63.i, -32768*/
	if ((cur_state == LEGUP_F_main_BB_gsm_addexit21i_219)) begin
		main_gsm_addexit21i_607_reg <= main_gsm_addexit21i_607;
		if (start == 1'b0 && ^(main_gsm_addexit21i_607) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_addexit21i_607_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_add.exit21.thread.i*/
	/*   %608 = icmp sgt i32 %.op63.i, 32767*/
		main_gsm_addexit21threadi_608 = ($signed(main_604_op63i_reg) > $signed(32'd32767));
end
always @(posedge clk) begin
	/* main: %gsm_add.exit21.thread.i*/
	/*   %608 = icmp sgt i32 %.op63.i, 32767*/
	if ((cur_state == LEGUP_F_main_BB_gsm_addexit21threadi_220)) begin
		main_gsm_addexit21threadi_608_reg <= main_gsm_addexit21threadi_608;
		if (start == 1'b0 && ^(main_gsm_addexit21threadi_608) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_addexit21threadi_608_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_add.exit21.thread.i*/
	/*   %sext65.i = shl i32 %.op63.i, 16*/
		main_gsm_addexit21threadi_sext65i = (main_604_op63i_reg <<< (32'd16 % 32));
end
always @(posedge clk) begin
	/* main: %gsm_add.exit21.thread.i*/
	/*   %sext65.i = shl i32 %.op63.i, 16*/
	if ((cur_state == LEGUP_F_main_BB_gsm_addexit21threadi_220)) begin
		main_gsm_addexit21threadi_sext65i_reg <= main_gsm_addexit21threadi_sext65i;
		if (start == 1'b0 && ^(main_gsm_addexit21threadi_sext65i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_addexit21threadi_sext65i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_add.exit21.thread.i*/
	/*   %.op67.i = ashr i32 %sext65.i, 25*/
		main_gsm_addexit21threadi_op67i = ($signed(main_gsm_addexit21threadi_sext65i) >>> 32'd25);
end
always @(posedge clk) begin
	/* main: %gsm_add.exit21.thread.i*/
	/*   %.op67.i = ashr i32 %sext65.i, 25*/
	if ((cur_state == LEGUP_F_main_BB_gsm_addexit21threadi_220)) begin
		main_gsm_addexit21threadi_op67i_reg <= main_gsm_addexit21threadi_op67i;
		if (start == 1'b0 && ^(main_gsm_addexit21threadi_op67i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_addexit21threadi_op67i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_add.exit21.thread.i*/
	/*   %609 = icmp sgt i32 %.op67.i, 7*/
		main_gsm_addexit21threadi_609 = ($signed(main_gsm_addexit21threadi_op67i) > $signed(32'd7));
end
always @(posedge clk) begin
	/* main: %gsm_add.exit21.thread.i*/
	/*   %609 = icmp sgt i32 %.op67.i, 7*/
	if ((cur_state == LEGUP_F_main_BB_gsm_addexit21threadi_220)) begin
		main_gsm_addexit21threadi_609_reg <= main_gsm_addexit21threadi_609;
		if (start == 1'b0 && ^(main_gsm_addexit21threadi_609) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_addexit21threadi_609_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_add.exit21.thread.i*/
	/*   %or.cond167.i = or i1 %608, %609*/
		main_gsm_addexit21threadi_orcond167i = (main_gsm_addexit21threadi_608 | main_gsm_addexit21threadi_609);
end
always @(posedge clk) begin
	/* main: %gsm_add.exit21.thread.i*/
	/*   %or.cond167.i = or i1 %608, %609*/
	if ((cur_state == LEGUP_F_main_BB_gsm_addexit21threadi_220)) begin
		main_gsm_addexit21threadi_orcond167i_reg <= main_gsm_addexit21threadi_orcond167i;
		if (start == 1'b0 && ^(main_gsm_addexit21threadi_orcond167i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_addexit21threadi_orcond167i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %610*/
	/*   %611 = icmp slt i32 %.op67.i, -8*/
		main_610_611 = ($signed(main_gsm_addexit21threadi_op67i_reg) < $signed(-32'd8));
end
always @(posedge clk) begin
	/* main: %610*/
	/*   %611 = icmp slt i32 %.op67.i, -8*/
	if ((cur_state == LEGUP_F_main_BB__610_221)) begin
		main_610_611_reg <= main_610_611;
		if (start == 1'b0 && ^(main_610_611) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_610_611_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %612*/
	/*   %613 = add nsw i32 %.op67.i, 8*/
		main_612_613 = main_signed_add_32_0;
end
always @(*) begin
/* main: %612*/
/*   %613 = add nsw i32 %.op67.i, 8*/
	main_612_613_reg = main_1_gep_reg;
end
always @(*) begin
	/* main: %612*/
	/*   %phitmp4.i = trunc i32 %613 to i16*/
		main_612_phitmp4i = main_612_613[15:0];
end
always @(posedge clk) begin
	/* main: %612*/
	/*   %phitmp4.i = trunc i32 %613 to i16*/
	if ((cur_state == LEGUP_F_main_BB__612_222)) begin
		main_612_phitmp4i_reg <= main_612_phitmp4i;
		if (start == 1'b0 && ^(main_612_phitmp4i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_612_phitmp4i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.thread112.i*/
	/*   %614 = phi i16 [ %phitmp4.i, %612 ], [ 0, %610 ], [ 0, %gsm_add.exit21.i ], [ 15, %gsm_add.exit21.thread.i ], [ 0, %.thread107.i ], [ 15, %604 ]*/
	if ((((cur_state == LEGUP_F_main_BB_thread107i_217) & (memory_controller_waitrequest == 1'd0)) & (main_thread107i_603 == 1'd1))) begin
		main_thread112i_614 = 16'd0;
	end
	/* main: %.thread112.i*/
	/*   %614 = phi i16 [ %phitmp4.i, %612 ], [ 0, %610 ], [ 0, %gsm_add.exit21.i ], [ 15, %gsm_add.exit21.thread.i ], [ 0, %.thread107.i ], [ 15, %604 ]*/
	else if ((((cur_state == LEGUP_F_main_BB__604_218) & (memory_controller_waitrequest == 1'd0)) & (main_604_605 == 1'd1))) begin
		main_thread112i_614 = 16'd15;
	end
	/* main: %.thread112.i*/
	/*   %614 = phi i16 [ %phitmp4.i, %612 ], [ 0, %610 ], [ 0, %gsm_add.exit21.i ], [ 15, %gsm_add.exit21.thread.i ], [ 0, %.thread107.i ], [ 15, %604 ]*/
	else if ((((cur_state == LEGUP_F_main_BB_gsm_addexit21i_219) & (memory_controller_waitrequest == 1'd0)) & (main_gsm_addexit21i_607 == 1'd1))) begin
		main_thread112i_614 = 16'd0;
	end
	/* main: %.thread112.i*/
	/*   %614 = phi i16 [ %phitmp4.i, %612 ], [ 0, %610 ], [ 0, %gsm_add.exit21.i ], [ 15, %gsm_add.exit21.thread.i ], [ 0, %.thread107.i ], [ 15, %604 ]*/
	else if ((((cur_state == LEGUP_F_main_BB_gsm_addexit21threadi_220) & (memory_controller_waitrequest == 1'd0)) & (main_gsm_addexit21threadi_orcond167i == 1'd1))) begin
		main_thread112i_614 = 16'd15;
	end
	/* main: %.thread112.i*/
	/*   %614 = phi i16 [ %phitmp4.i, %612 ], [ 0, %610 ], [ 0, %gsm_add.exit21.i ], [ 15, %gsm_add.exit21.thread.i ], [ 0, %.thread107.i ], [ 15, %604 ]*/
	else if ((((cur_state == LEGUP_F_main_BB__610_221) & (memory_controller_waitrequest == 1'd0)) & (main_610_611 == 1'd1))) begin
		main_thread112i_614 = 16'd0;
	end
	/* main: %.thread112.i*/
	/*   %614 = phi i16 [ %phitmp4.i, %612 ], [ 0, %610 ], [ 0, %gsm_add.exit21.i ], [ 15, %gsm_add.exit21.thread.i ], [ 0, %.thread107.i ], [ 15, %604 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__612_222) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_thread112i_614 = main_612_phitmp4i;
	end
end
always @(posedge clk) begin
	/* main: %.thread112.i*/
	/*   %614 = phi i16 [ %phitmp4.i, %612 ], [ 0, %610 ], [ 0, %gsm_add.exit21.i ], [ 15, %gsm_add.exit21.thread.i ], [ 0, %.thread107.i ], [ 15, %604 ]*/
	if ((((cur_state == LEGUP_F_main_BB_thread107i_217) & (memory_controller_waitrequest == 1'd0)) & (main_thread107i_603 == 1'd1))) begin
		main_thread112i_614_reg <= main_thread112i_614;
		if (start == 1'b0 && ^(main_thread112i_614) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_thread112i_614_reg"); $finish; end
	end
	/* main: %.thread112.i*/
	/*   %614 = phi i16 [ %phitmp4.i, %612 ], [ 0, %610 ], [ 0, %gsm_add.exit21.i ], [ 15, %gsm_add.exit21.thread.i ], [ 0, %.thread107.i ], [ 15, %604 ]*/
	if ((((cur_state == LEGUP_F_main_BB__604_218) & (memory_controller_waitrequest == 1'd0)) & (main_604_605 == 1'd1))) begin
		main_thread112i_614_reg <= main_thread112i_614;
		if (start == 1'b0 && ^(main_thread112i_614) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_thread112i_614_reg"); $finish; end
	end
	/* main: %.thread112.i*/
	/*   %614 = phi i16 [ %phitmp4.i, %612 ], [ 0, %610 ], [ 0, %gsm_add.exit21.i ], [ 15, %gsm_add.exit21.thread.i ], [ 0, %.thread107.i ], [ 15, %604 ]*/
	if ((((cur_state == LEGUP_F_main_BB_gsm_addexit21i_219) & (memory_controller_waitrequest == 1'd0)) & (main_gsm_addexit21i_607 == 1'd1))) begin
		main_thread112i_614_reg <= main_thread112i_614;
		if (start == 1'b0 && ^(main_thread112i_614) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_thread112i_614_reg"); $finish; end
	end
	/* main: %.thread112.i*/
	/*   %614 = phi i16 [ %phitmp4.i, %612 ], [ 0, %610 ], [ 0, %gsm_add.exit21.i ], [ 15, %gsm_add.exit21.thread.i ], [ 0, %.thread107.i ], [ 15, %604 ]*/
	if ((((cur_state == LEGUP_F_main_BB_gsm_addexit21threadi_220) & (memory_controller_waitrequest == 1'd0)) & (main_gsm_addexit21threadi_orcond167i == 1'd1))) begin
		main_thread112i_614_reg <= main_thread112i_614;
		if (start == 1'b0 && ^(main_thread112i_614) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_thread112i_614_reg"); $finish; end
	end
	/* main: %.thread112.i*/
	/*   %614 = phi i16 [ %phitmp4.i, %612 ], [ 0, %610 ], [ 0, %gsm_add.exit21.i ], [ 15, %gsm_add.exit21.thread.i ], [ 0, %.thread107.i ], [ 15, %604 ]*/
	if ((((cur_state == LEGUP_F_main_BB__610_221) & (memory_controller_waitrequest == 1'd0)) & (main_610_611 == 1'd1))) begin
		main_thread112i_614_reg <= main_thread112i_614;
		if (start == 1'b0 && ^(main_thread112i_614) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_thread112i_614_reg"); $finish; end
	end
	/* main: %.thread112.i*/
	/*   %614 = phi i16 [ %phitmp4.i, %612 ], [ 0, %610 ], [ 0, %gsm_add.exit21.i ], [ 15, %gsm_add.exit21.thread.i ], [ 0, %.thread107.i ], [ 15, %604 ]*/
	if (((cur_state == LEGUP_F_main_BB__612_222) & (memory_controller_waitrequest == 1'd0))) begin
		main_thread112i_614_reg <= main_thread112i_614;
		if (start == 1'b0 && ^(main_thread112i_614) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_thread112i_614_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.thread112.i*/
	/*   %gep_int131 = ptrtoint i16* %19 to i32*/
		main_thread112i_gep_int131 = main_18_19_reg;
end
always @(posedge clk) begin
	/* main: %.thread112.i*/
	/*   %gep_int131 = ptrtoint i16* %19 to i32*/
	if ((cur_state == LEGUP_F_main_BB_thread112i_223)) begin
		main_thread112i_gep_int131_reg <= main_thread112i_gep_int131;
		if (start == 1'b0 && ^(main_thread112i_gep_int131) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_thread112i_gep_int131_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.thread112.i*/
	/*   %gep132 = add i32 %gep_int131, 10*/
		main_thread112i_gep132 = main_signed_add_32_0;
end
always @(*) begin
/* main: %.thread112.i*/
/*   %gep132 = add i32 %gep_int131, 10*/
	main_thread112i_gep132_reg = main_1_gep_reg;
end
always @(*) begin
	/* main: %.thread112.i*/
	/*   %615 = inttoptr i32 %gep132 to i16**/
		main_thread112i_615 = main_thread112i_gep132;
end
always @(posedge clk) begin
	/* main: %.thread112.i*/
	/*   %615 = inttoptr i32 %gep132 to i16**/
	if ((cur_state == LEGUP_F_main_BB_thread112i_223)) begin
		main_thread112i_615_reg <= main_thread112i_615;
		if (start == 1'b0 && ^(main_thread112i_615) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_thread112i_615_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.thread112.i*/
	/*   %616 = load i16* %615, align 2, !tbaa !1*/
		main_thread112i_616 = memory_controller_out_a[15:0];
end
always @(posedge clk) begin
	/* main: %.thread112.i*/
	/*   %616 = load i16* %615, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_thread112i_226)) begin
		main_thread112i_616_reg <= main_thread112i_616;
		if (start == 1'b0 && ^(main_thread112i_616) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_thread112i_616_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.thread112.i*/
	/*   %617 = sext i16 %616 to i32*/
		main_thread112i_617 = $signed(main_thread112i_616);
end
always @(posedge clk) begin
	/* main: %.thread112.i*/
	/*   %617 = sext i16 %616 to i32*/
	if ((cur_state == LEGUP_F_main_BB_thread112i_226)) begin
		main_thread112i_617_reg <= main_thread112i_617;
		if (start == 1'b0 && ^(main_thread112i_617) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_thread112i_617_reg"); $finish; end
	end
end
always @(*) begin
	main_thread112i_618 = main_signed_multiply_32_0;
end
always @(*) begin
/* main: %.thread112.i*/
/*   %618 = mul i32 %617, 30720*/
	main_thread112i_618_reg = main_74_76_reg;
end
always @(*) begin
	/* main: %.thread112.i*/
	/*   %619 = add i32 %618, 30720*/
		main_thread112i_619 = main_signed_add_32_0;
end
always @(*) begin
/* main: %.thread112.i*/
/*   %619 = add i32 %618, 30720*/
	main_thread112i_619_reg = main_1_gep_reg;
end
always @(*) begin
	/* main: %.thread112.i*/
	/*   %620 = ashr i32 %619, 16*/
		main_thread112i_620 = ($signed(main_thread112i_619) >>> 32'd16);
end
always @(posedge clk) begin
	/* main: %.thread112.i*/
	/*   %620 = ashr i32 %619, 16*/
	if ((cur_state == LEGUP_F_main_BB_thread112i_227)) begin
		main_thread112i_620_reg <= main_thread112i_620;
		if (start == 1'b0 && ^(main_thread112i_620) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_thread112i_620_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.thread112.i*/
	/*   %621 = add nsw i32 %620, -1792*/
		main_thread112i_621 = main_signed_add_32_1;
end
always @(*) begin
/* main: %.thread112.i*/
/*   %621 = add nsw i32 %620, -1792*/
	main_thread112i_621_reg = main_1_gep3_reg;
end
always @(*) begin
	/* main: %.thread112.i*/
	/*   %622 = icmp slt i32 %621, -32768*/
		main_thread112i_622 = ($signed(main_thread112i_621) < $signed(-32'd32768));
end
always @(posedge clk) begin
	/* main: %.thread112.i*/
	/*   %622 = icmp slt i32 %621, -32768*/
	if ((cur_state == LEGUP_F_main_BB_thread112i_227)) begin
		main_thread112i_622_reg <= main_thread112i_622;
		if (start == 1'b0 && ^(main_thread112i_622) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_thread112i_622_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %623*/
	/*   %624 = icmp sgt i32 %621, 32767*/
		main_623_624 = ($signed(main_thread112i_621_reg) > $signed(32'd32767));
end
always @(posedge clk) begin
	/* main: %623*/
	/*   %624 = icmp sgt i32 %621, 32767*/
	if ((cur_state == LEGUP_F_main_BB__623_228)) begin
		main_623_624_reg <= main_623_624;
		if (start == 1'b0 && ^(main_623_624) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_623_624_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %623*/
	/*   %sext70.i = shl i32 %621, 16*/
		main_623_sext70i = (main_thread112i_621_reg <<< (32'd16 % 32));
end
always @(posedge clk) begin
	/* main: %623*/
	/*   %sext70.i = shl i32 %621, 16*/
	if ((cur_state == LEGUP_F_main_BB__623_228)) begin
		main_623_sext70i_reg <= main_623_sext70i;
		if (start == 1'b0 && ^(main_623_sext70i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_623_sext70i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %623*/
	/*   %625 = ashr exact i32 %sext70.i, 16*/
		main_623_625 = ($signed(main_623_sext70i) >>> 32'd16);
end
always @(posedge clk) begin
	/* main: %623*/
	/*   %625 = ashr exact i32 %sext70.i, 16*/
	if ((cur_state == LEGUP_F_main_BB__623_228)) begin
		main_623_625_reg <= main_623_625;
		if (start == 1'b0 && ^(main_623_625) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_623_625_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %623*/
	/*   %.op72.i = add nsw i32 %625, 256*/
		main_623_op72i = main_signed_add_32_0;
end
always @(*) begin
/* main: %623*/
/*   %.op72.i = add nsw i32 %625, 256*/
	main_623_op72i_reg = main_1_gep_reg;
end
always @(*) begin
	/* main: %gsm_add.exit17.i*/
	/*   %626 = icmp slt i32 %.op72.i, -32768*/
		main_gsm_addexit17i_626 = ($signed(main_623_op72i_reg) < $signed(-32'd32768));
end
always @(posedge clk) begin
	/* main: %gsm_add.exit17.i*/
	/*   %626 = icmp slt i32 %.op72.i, -32768*/
	if ((cur_state == LEGUP_F_main_BB_gsm_addexit17i_229)) begin
		main_gsm_addexit17i_626_reg <= main_gsm_addexit17i_626;
		if (start == 1'b0 && ^(main_gsm_addexit17i_626) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_addexit17i_626_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_add.exit17.thread.i*/
	/*   %627 = icmp sgt i32 %.op72.i, 32767*/
		main_gsm_addexit17threadi_627 = ($signed(main_623_op72i_reg) > $signed(32'd32767));
end
always @(posedge clk) begin
	/* main: %gsm_add.exit17.thread.i*/
	/*   %627 = icmp sgt i32 %.op72.i, 32767*/
	if ((cur_state == LEGUP_F_main_BB_gsm_addexit17threadi_230)) begin
		main_gsm_addexit17threadi_627_reg <= main_gsm_addexit17threadi_627;
		if (start == 1'b0 && ^(main_gsm_addexit17threadi_627) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_addexit17threadi_627_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_add.exit17.thread.i*/
	/*   %sext74.i = shl i32 %.op72.i, 16*/
		main_gsm_addexit17threadi_sext74i = (main_623_op72i_reg <<< (32'd16 % 32));
end
always @(posedge clk) begin
	/* main: %gsm_add.exit17.thread.i*/
	/*   %sext74.i = shl i32 %.op72.i, 16*/
	if ((cur_state == LEGUP_F_main_BB_gsm_addexit17threadi_230)) begin
		main_gsm_addexit17threadi_sext74i_reg <= main_gsm_addexit17threadi_sext74i;
		if (start == 1'b0 && ^(main_gsm_addexit17threadi_sext74i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_addexit17threadi_sext74i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_add.exit17.thread.i*/
	/*   %.op76.i = ashr i32 %sext74.i, 25*/
		main_gsm_addexit17threadi_op76i = ($signed(main_gsm_addexit17threadi_sext74i) >>> 32'd25);
end
always @(posedge clk) begin
	/* main: %gsm_add.exit17.thread.i*/
	/*   %.op76.i = ashr i32 %sext74.i, 25*/
	if ((cur_state == LEGUP_F_main_BB_gsm_addexit17threadi_230)) begin
		main_gsm_addexit17threadi_op76i_reg <= main_gsm_addexit17threadi_op76i;
		if (start == 1'b0 && ^(main_gsm_addexit17threadi_op76i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_addexit17threadi_op76i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_add.exit17.thread.i*/
	/*   %628 = icmp sgt i32 %.op76.i, 7*/
		main_gsm_addexit17threadi_628 = ($signed(main_gsm_addexit17threadi_op76i) > $signed(32'd7));
end
always @(posedge clk) begin
	/* main: %gsm_add.exit17.thread.i*/
	/*   %628 = icmp sgt i32 %.op76.i, 7*/
	if ((cur_state == LEGUP_F_main_BB_gsm_addexit17threadi_230)) begin
		main_gsm_addexit17threadi_628_reg <= main_gsm_addexit17threadi_628;
		if (start == 1'b0 && ^(main_gsm_addexit17threadi_628) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_addexit17threadi_628_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_add.exit17.thread.i*/
	/*   %or.cond168.i = or i1 %627, %628*/
		main_gsm_addexit17threadi_orcond168i = (main_gsm_addexit17threadi_627 | main_gsm_addexit17threadi_628);
end
always @(posedge clk) begin
	/* main: %gsm_add.exit17.thread.i*/
	/*   %or.cond168.i = or i1 %627, %628*/
	if ((cur_state == LEGUP_F_main_BB_gsm_addexit17threadi_230)) begin
		main_gsm_addexit17threadi_orcond168i_reg <= main_gsm_addexit17threadi_orcond168i;
		if (start == 1'b0 && ^(main_gsm_addexit17threadi_orcond168i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_addexit17threadi_orcond168i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %629*/
	/*   %630 = icmp slt i32 %.op76.i, -8*/
		main_629_630 = ($signed(main_gsm_addexit17threadi_op76i_reg) < $signed(-32'd8));
end
always @(posedge clk) begin
	/* main: %629*/
	/*   %630 = icmp slt i32 %.op76.i, -8*/
	if ((cur_state == LEGUP_F_main_BB__629_231)) begin
		main_629_630_reg <= main_629_630;
		if (start == 1'b0 && ^(main_629_630) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_629_630_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %631*/
	/*   %632 = add nsw i32 %.op76.i, 8*/
		main_631_632 = main_signed_add_32_0;
end
always @(*) begin
/* main: %631*/
/*   %632 = add nsw i32 %.op76.i, 8*/
	main_631_632_reg = main_1_gep_reg;
end
always @(*) begin
	/* main: %631*/
	/*   %phitmp5.i = trunc i32 %632 to i16*/
		main_631_phitmp5i = main_631_632[15:0];
end
always @(posedge clk) begin
	/* main: %631*/
	/*   %phitmp5.i = trunc i32 %632 to i16*/
	if ((cur_state == LEGUP_F_main_BB__631_232)) begin
		main_631_phitmp5i_reg <= main_631_phitmp5i;
		if (start == 1'b0 && ^(main_631_phitmp5i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_631_phitmp5i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.thread117.i*/
	/*   %633 = phi i16 [ %phitmp5.i, %631 ], [ 0, %629 ], [ 0, %gsm_add.exit17.i ], [ 15, %gsm_add.exit17.thread.i ], [ 0, %.thread112.i ], [ 15, %623 ]*/
	if ((((cur_state == LEGUP_F_main_BB_thread112i_227) & (memory_controller_waitrequest == 1'd0)) & (main_thread112i_622 == 1'd1))) begin
		main_thread117i_633 = 16'd0;
	end
	/* main: %.thread117.i*/
	/*   %633 = phi i16 [ %phitmp5.i, %631 ], [ 0, %629 ], [ 0, %gsm_add.exit17.i ], [ 15, %gsm_add.exit17.thread.i ], [ 0, %.thread112.i ], [ 15, %623 ]*/
	else if ((((cur_state == LEGUP_F_main_BB__623_228) & (memory_controller_waitrequest == 1'd0)) & (main_623_624 == 1'd1))) begin
		main_thread117i_633 = 16'd15;
	end
	/* main: %.thread117.i*/
	/*   %633 = phi i16 [ %phitmp5.i, %631 ], [ 0, %629 ], [ 0, %gsm_add.exit17.i ], [ 15, %gsm_add.exit17.thread.i ], [ 0, %.thread112.i ], [ 15, %623 ]*/
	else if ((((cur_state == LEGUP_F_main_BB_gsm_addexit17i_229) & (memory_controller_waitrequest == 1'd0)) & (main_gsm_addexit17i_626 == 1'd1))) begin
		main_thread117i_633 = 16'd0;
	end
	/* main: %.thread117.i*/
	/*   %633 = phi i16 [ %phitmp5.i, %631 ], [ 0, %629 ], [ 0, %gsm_add.exit17.i ], [ 15, %gsm_add.exit17.thread.i ], [ 0, %.thread112.i ], [ 15, %623 ]*/
	else if ((((cur_state == LEGUP_F_main_BB_gsm_addexit17threadi_230) & (memory_controller_waitrequest == 1'd0)) & (main_gsm_addexit17threadi_orcond168i == 1'd1))) begin
		main_thread117i_633 = 16'd15;
	end
	/* main: %.thread117.i*/
	/*   %633 = phi i16 [ %phitmp5.i, %631 ], [ 0, %629 ], [ 0, %gsm_add.exit17.i ], [ 15, %gsm_add.exit17.thread.i ], [ 0, %.thread112.i ], [ 15, %623 ]*/
	else if ((((cur_state == LEGUP_F_main_BB__629_231) & (memory_controller_waitrequest == 1'd0)) & (main_629_630 == 1'd1))) begin
		main_thread117i_633 = 16'd0;
	end
	/* main: %.thread117.i*/
	/*   %633 = phi i16 [ %phitmp5.i, %631 ], [ 0, %629 ], [ 0, %gsm_add.exit17.i ], [ 15, %gsm_add.exit17.thread.i ], [ 0, %.thread112.i ], [ 15, %623 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__631_232) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_thread117i_633 = main_631_phitmp5i;
	end
end
always @(posedge clk) begin
	/* main: %.thread117.i*/
	/*   %633 = phi i16 [ %phitmp5.i, %631 ], [ 0, %629 ], [ 0, %gsm_add.exit17.i ], [ 15, %gsm_add.exit17.thread.i ], [ 0, %.thread112.i ], [ 15, %623 ]*/
	if ((((cur_state == LEGUP_F_main_BB_thread112i_227) & (memory_controller_waitrequest == 1'd0)) & (main_thread112i_622 == 1'd1))) begin
		main_thread117i_633_reg <= main_thread117i_633;
		if (start == 1'b0 && ^(main_thread117i_633) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_thread117i_633_reg"); $finish; end
	end
	/* main: %.thread117.i*/
	/*   %633 = phi i16 [ %phitmp5.i, %631 ], [ 0, %629 ], [ 0, %gsm_add.exit17.i ], [ 15, %gsm_add.exit17.thread.i ], [ 0, %.thread112.i ], [ 15, %623 ]*/
	if ((((cur_state == LEGUP_F_main_BB__623_228) & (memory_controller_waitrequest == 1'd0)) & (main_623_624 == 1'd1))) begin
		main_thread117i_633_reg <= main_thread117i_633;
		if (start == 1'b0 && ^(main_thread117i_633) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_thread117i_633_reg"); $finish; end
	end
	/* main: %.thread117.i*/
	/*   %633 = phi i16 [ %phitmp5.i, %631 ], [ 0, %629 ], [ 0, %gsm_add.exit17.i ], [ 15, %gsm_add.exit17.thread.i ], [ 0, %.thread112.i ], [ 15, %623 ]*/
	if ((((cur_state == LEGUP_F_main_BB_gsm_addexit17i_229) & (memory_controller_waitrequest == 1'd0)) & (main_gsm_addexit17i_626 == 1'd1))) begin
		main_thread117i_633_reg <= main_thread117i_633;
		if (start == 1'b0 && ^(main_thread117i_633) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_thread117i_633_reg"); $finish; end
	end
	/* main: %.thread117.i*/
	/*   %633 = phi i16 [ %phitmp5.i, %631 ], [ 0, %629 ], [ 0, %gsm_add.exit17.i ], [ 15, %gsm_add.exit17.thread.i ], [ 0, %.thread112.i ], [ 15, %623 ]*/
	if ((((cur_state == LEGUP_F_main_BB_gsm_addexit17threadi_230) & (memory_controller_waitrequest == 1'd0)) & (main_gsm_addexit17threadi_orcond168i == 1'd1))) begin
		main_thread117i_633_reg <= main_thread117i_633;
		if (start == 1'b0 && ^(main_thread117i_633) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_thread117i_633_reg"); $finish; end
	end
	/* main: %.thread117.i*/
	/*   %633 = phi i16 [ %phitmp5.i, %631 ], [ 0, %629 ], [ 0, %gsm_add.exit17.i ], [ 15, %gsm_add.exit17.thread.i ], [ 0, %.thread112.i ], [ 15, %623 ]*/
	if ((((cur_state == LEGUP_F_main_BB__629_231) & (memory_controller_waitrequest == 1'd0)) & (main_629_630 == 1'd1))) begin
		main_thread117i_633_reg <= main_thread117i_633;
		if (start == 1'b0 && ^(main_thread117i_633) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_thread117i_633_reg"); $finish; end
	end
	/* main: %.thread117.i*/
	/*   %633 = phi i16 [ %phitmp5.i, %631 ], [ 0, %629 ], [ 0, %gsm_add.exit17.i ], [ 15, %gsm_add.exit17.thread.i ], [ 0, %.thread112.i ], [ 15, %623 ]*/
	if (((cur_state == LEGUP_F_main_BB__631_232) & (memory_controller_waitrequest == 1'd0))) begin
		main_thread117i_633_reg <= main_thread117i_633;
		if (start == 1'b0 && ^(main_thread117i_633) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_thread117i_633_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.thread117.i*/
	/*   %gep_int133 = ptrtoint i16* %19 to i32*/
		main_thread117i_gep_int133 = main_18_19_reg;
end
always @(posedge clk) begin
	/* main: %.thread117.i*/
	/*   %gep_int133 = ptrtoint i16* %19 to i32*/
	if ((cur_state == LEGUP_F_main_BB_thread117i_233)) begin
		main_thread117i_gep_int133_reg <= main_thread117i_gep_int133;
		if (start == 1'b0 && ^(main_thread117i_gep_int133) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_thread117i_gep_int133_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.thread117.i*/
	/*   %gep134 = add i32 %gep_int133, 12*/
		main_thread117i_gep134 = main_signed_add_32_0;
end
always @(*) begin
/* main: %.thread117.i*/
/*   %gep134 = add i32 %gep_int133, 12*/
	main_thread117i_gep134_reg = main_1_gep_reg;
end
always @(*) begin
	/* main: %.thread117.i*/
	/*   %634 = inttoptr i32 %gep134 to i16**/
		main_thread117i_634 = main_thread117i_gep134;
end
always @(posedge clk) begin
	/* main: %.thread117.i*/
	/*   %634 = inttoptr i32 %gep134 to i16**/
	if ((cur_state == LEGUP_F_main_BB_thread117i_233)) begin
		main_thread117i_634_reg <= main_thread117i_634;
		if (start == 1'b0 && ^(main_thread117i_634) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_thread117i_634_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.thread117.i*/
	/*   %635 = load i16* %634, align 2, !tbaa !1*/
		main_thread117i_635 = memory_controller_out_a[15:0];
end
always @(posedge clk) begin
	/* main: %.thread117.i*/
	/*   %635 = load i16* %634, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_thread117i_236)) begin
		main_thread117i_635_reg <= main_thread117i_635;
		if (start == 1'b0 && ^(main_thread117i_635) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_thread117i_635_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.thread117.i*/
	/*   %636 = sext i16 %635 to i32*/
		main_thread117i_636 = $signed(main_thread117i_635);
end
always @(posedge clk) begin
	/* main: %.thread117.i*/
	/*   %636 = sext i16 %635 to i32*/
	if ((cur_state == LEGUP_F_main_BB_thread117i_236)) begin
		main_thread117i_636_reg <= main_thread117i_636;
		if (start == 1'b0 && ^(main_thread117i_636) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_thread117i_636_reg"); $finish; end
	end
end
always @(*) begin
	main_thread117i_637 = main_signed_multiply_32_0;
end
always @(*) begin
/* main: %.thread117.i*/
/*   %637 = mul i32 %636, 17068*/
	main_thread117i_637_reg = main_74_76_reg;
end
always @(*) begin
	/* main: %.thread117.i*/
	/*   %638 = add i32 %637, 17068*/
		main_thread117i_638 = main_signed_add_32_0;
end
always @(*) begin
/* main: %.thread117.i*/
/*   %638 = add i32 %637, 17068*/
	main_thread117i_638_reg = main_1_gep_reg;
end
always @(*) begin
	/* main: %.thread117.i*/
	/*   %639 = ashr i32 %638, 16*/
		main_thread117i_639 = ($signed(main_thread117i_638) >>> 32'd16);
end
always @(posedge clk) begin
	/* main: %.thread117.i*/
	/*   %639 = ashr i32 %638, 16*/
	if ((cur_state == LEGUP_F_main_BB_thread117i_237)) begin
		main_thread117i_639_reg <= main_thread117i_639;
		if (start == 1'b0 && ^(main_thread117i_639) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_thread117i_639_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.thread117.i*/
	/*   %640 = add nsw i32 %639, -341*/
		main_thread117i_640 = main_signed_add_32_1;
end
always @(*) begin
/* main: %.thread117.i*/
/*   %640 = add nsw i32 %639, -341*/
	main_thread117i_640_reg = main_1_gep3_reg;
end
always @(*) begin
	/* main: %.thread117.i*/
	/*   %641 = icmp slt i32 %640, -32768*/
		main_thread117i_641 = ($signed(main_thread117i_640) < $signed(-32'd32768));
end
always @(posedge clk) begin
	/* main: %.thread117.i*/
	/*   %641 = icmp slt i32 %640, -32768*/
	if ((cur_state == LEGUP_F_main_BB_thread117i_237)) begin
		main_thread117i_641_reg <= main_thread117i_641;
		if (start == 1'b0 && ^(main_thread117i_641) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_thread117i_641_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %642*/
	/*   %643 = icmp sgt i32 %640, 32767*/
		main_642_643 = ($signed(main_thread117i_640_reg) > $signed(32'd32767));
end
always @(posedge clk) begin
	/* main: %642*/
	/*   %643 = icmp sgt i32 %640, 32767*/
	if ((cur_state == LEGUP_F_main_BB__642_238)) begin
		main_642_643_reg <= main_642_643;
		if (start == 1'b0 && ^(main_642_643) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_642_643_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %642*/
	/*   %sext79.i = shl i32 %640, 16*/
		main_642_sext79i = (main_thread117i_640_reg <<< (32'd16 % 32));
end
always @(posedge clk) begin
	/* main: %642*/
	/*   %sext79.i = shl i32 %640, 16*/
	if ((cur_state == LEGUP_F_main_BB__642_238)) begin
		main_642_sext79i_reg <= main_642_sext79i;
		if (start == 1'b0 && ^(main_642_sext79i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_642_sext79i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %642*/
	/*   %644 = ashr exact i32 %sext79.i, 16*/
		main_642_644 = ($signed(main_642_sext79i) >>> 32'd16);
end
always @(posedge clk) begin
	/* main: %642*/
	/*   %644 = ashr exact i32 %sext79.i, 16*/
	if ((cur_state == LEGUP_F_main_BB__642_238)) begin
		main_642_644_reg <= main_642_644;
		if (start == 1'b0 && ^(main_642_644) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_642_644_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %642*/
	/*   %.op81.i = add nsw i32 %644, 256*/
		main_642_op81i = main_signed_add_32_0;
end
always @(*) begin
/* main: %642*/
/*   %.op81.i = add nsw i32 %644, 256*/
	main_642_op81i_reg = main_1_gep_reg;
end
always @(*) begin
	/* main: %gsm_add.exit13.i*/
	/*   %645 = icmp slt i32 %.op81.i, -32768*/
		main_gsm_addexit13i_645 = ($signed(main_642_op81i_reg) < $signed(-32'd32768));
end
always @(posedge clk) begin
	/* main: %gsm_add.exit13.i*/
	/*   %645 = icmp slt i32 %.op81.i, -32768*/
	if ((cur_state == LEGUP_F_main_BB_gsm_addexit13i_239)) begin
		main_gsm_addexit13i_645_reg <= main_gsm_addexit13i_645;
		if (start == 1'b0 && ^(main_gsm_addexit13i_645) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_addexit13i_645_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_add.exit13.thread.i*/
	/*   %646 = icmp sgt i32 %.op81.i, 32767*/
		main_gsm_addexit13threadi_646 = ($signed(main_642_op81i_reg) > $signed(32'd32767));
end
always @(posedge clk) begin
	/* main: %gsm_add.exit13.thread.i*/
	/*   %646 = icmp sgt i32 %.op81.i, 32767*/
	if ((cur_state == LEGUP_F_main_BB_gsm_addexit13threadi_240)) begin
		main_gsm_addexit13threadi_646_reg <= main_gsm_addexit13threadi_646;
		if (start == 1'b0 && ^(main_gsm_addexit13threadi_646) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_addexit13threadi_646_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_add.exit13.thread.i*/
	/*   %sext83.i = shl i32 %.op81.i, 16*/
		main_gsm_addexit13threadi_sext83i = (main_642_op81i_reg <<< (32'd16 % 32));
end
always @(posedge clk) begin
	/* main: %gsm_add.exit13.thread.i*/
	/*   %sext83.i = shl i32 %.op81.i, 16*/
	if ((cur_state == LEGUP_F_main_BB_gsm_addexit13threadi_240)) begin
		main_gsm_addexit13threadi_sext83i_reg <= main_gsm_addexit13threadi_sext83i;
		if (start == 1'b0 && ^(main_gsm_addexit13threadi_sext83i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_addexit13threadi_sext83i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_add.exit13.thread.i*/
	/*   %.op85.i = ashr i32 %sext83.i, 25*/
		main_gsm_addexit13threadi_op85i = ($signed(main_gsm_addexit13threadi_sext83i) >>> 32'd25);
end
always @(posedge clk) begin
	/* main: %gsm_add.exit13.thread.i*/
	/*   %.op85.i = ashr i32 %sext83.i, 25*/
	if ((cur_state == LEGUP_F_main_BB_gsm_addexit13threadi_240)) begin
		main_gsm_addexit13threadi_op85i_reg <= main_gsm_addexit13threadi_op85i;
		if (start == 1'b0 && ^(main_gsm_addexit13threadi_op85i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_addexit13threadi_op85i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_add.exit13.thread.i*/
	/*   %647 = icmp sgt i32 %.op85.i, 3*/
		main_gsm_addexit13threadi_647 = ($signed(main_gsm_addexit13threadi_op85i) > $signed(32'd3));
end
always @(posedge clk) begin
	/* main: %gsm_add.exit13.thread.i*/
	/*   %647 = icmp sgt i32 %.op85.i, 3*/
	if ((cur_state == LEGUP_F_main_BB_gsm_addexit13threadi_240)) begin
		main_gsm_addexit13threadi_647_reg <= main_gsm_addexit13threadi_647;
		if (start == 1'b0 && ^(main_gsm_addexit13threadi_647) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_addexit13threadi_647_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_add.exit13.thread.i*/
	/*   %or.cond169.i = or i1 %646, %647*/
		main_gsm_addexit13threadi_orcond169i = (main_gsm_addexit13threadi_646 | main_gsm_addexit13threadi_647);
end
always @(posedge clk) begin
	/* main: %gsm_add.exit13.thread.i*/
	/*   %or.cond169.i = or i1 %646, %647*/
	if ((cur_state == LEGUP_F_main_BB_gsm_addexit13threadi_240)) begin
		main_gsm_addexit13threadi_orcond169i_reg <= main_gsm_addexit13threadi_orcond169i;
		if (start == 1'b0 && ^(main_gsm_addexit13threadi_orcond169i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_addexit13threadi_orcond169i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %648*/
	/*   %649 = icmp slt i32 %.op85.i, -4*/
		main_648_649 = ($signed(main_gsm_addexit13threadi_op85i_reg) < $signed(-32'd4));
end
always @(posedge clk) begin
	/* main: %648*/
	/*   %649 = icmp slt i32 %.op85.i, -4*/
	if ((cur_state == LEGUP_F_main_BB__648_241)) begin
		main_648_649_reg <= main_648_649;
		if (start == 1'b0 && ^(main_648_649) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_648_649_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %650*/
	/*   %651 = add nsw i32 %.op85.i, 4*/
		main_650_651 = main_signed_add_32_0;
end
always @(*) begin
/* main: %650*/
/*   %651 = add nsw i32 %.op85.i, 4*/
	main_650_651_reg = main_1_gep_reg;
end
always @(*) begin
	/* main: %650*/
	/*   %phitmp6.i = trunc i32 %651 to i16*/
		main_650_phitmp6i = main_650_651[15:0];
end
always @(posedge clk) begin
	/* main: %650*/
	/*   %phitmp6.i = trunc i32 %651 to i16*/
	if ((cur_state == LEGUP_F_main_BB__650_242)) begin
		main_650_phitmp6i_reg <= main_650_phitmp6i;
		if (start == 1'b0 && ^(main_650_phitmp6i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_650_phitmp6i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.thread122.i*/
	/*   %652 = phi i16 [ %phitmp6.i, %650 ], [ 0, %648 ], [ 0, %gsm_add.exit13.i ], [ 7, %gsm_add.exit13.thread.i ], [ 0, %.thread117.i ], [ 7, %642 ]*/
	if ((((cur_state == LEGUP_F_main_BB_thread117i_237) & (memory_controller_waitrequest == 1'd0)) & (main_thread117i_641 == 1'd1))) begin
		main_thread122i_652 = 16'd0;
	end
	/* main: %.thread122.i*/
	/*   %652 = phi i16 [ %phitmp6.i, %650 ], [ 0, %648 ], [ 0, %gsm_add.exit13.i ], [ 7, %gsm_add.exit13.thread.i ], [ 0, %.thread117.i ], [ 7, %642 ]*/
	else if ((((cur_state == LEGUP_F_main_BB__642_238) & (memory_controller_waitrequest == 1'd0)) & (main_642_643 == 1'd1))) begin
		main_thread122i_652 = 16'd7;
	end
	/* main: %.thread122.i*/
	/*   %652 = phi i16 [ %phitmp6.i, %650 ], [ 0, %648 ], [ 0, %gsm_add.exit13.i ], [ 7, %gsm_add.exit13.thread.i ], [ 0, %.thread117.i ], [ 7, %642 ]*/
	else if ((((cur_state == LEGUP_F_main_BB_gsm_addexit13i_239) & (memory_controller_waitrequest == 1'd0)) & (main_gsm_addexit13i_645 == 1'd1))) begin
		main_thread122i_652 = 16'd0;
	end
	/* main: %.thread122.i*/
	/*   %652 = phi i16 [ %phitmp6.i, %650 ], [ 0, %648 ], [ 0, %gsm_add.exit13.i ], [ 7, %gsm_add.exit13.thread.i ], [ 0, %.thread117.i ], [ 7, %642 ]*/
	else if ((((cur_state == LEGUP_F_main_BB_gsm_addexit13threadi_240) & (memory_controller_waitrequest == 1'd0)) & (main_gsm_addexit13threadi_orcond169i == 1'd1))) begin
		main_thread122i_652 = 16'd7;
	end
	/* main: %.thread122.i*/
	/*   %652 = phi i16 [ %phitmp6.i, %650 ], [ 0, %648 ], [ 0, %gsm_add.exit13.i ], [ 7, %gsm_add.exit13.thread.i ], [ 0, %.thread117.i ], [ 7, %642 ]*/
	else if ((((cur_state == LEGUP_F_main_BB__648_241) & (memory_controller_waitrequest == 1'd0)) & (main_648_649 == 1'd1))) begin
		main_thread122i_652 = 16'd0;
	end
	/* main: %.thread122.i*/
	/*   %652 = phi i16 [ %phitmp6.i, %650 ], [ 0, %648 ], [ 0, %gsm_add.exit13.i ], [ 7, %gsm_add.exit13.thread.i ], [ 0, %.thread117.i ], [ 7, %642 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__650_242) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_thread122i_652 = main_650_phitmp6i;
	end
end
always @(posedge clk) begin
	/* main: %.thread122.i*/
	/*   %652 = phi i16 [ %phitmp6.i, %650 ], [ 0, %648 ], [ 0, %gsm_add.exit13.i ], [ 7, %gsm_add.exit13.thread.i ], [ 0, %.thread117.i ], [ 7, %642 ]*/
	if ((((cur_state == LEGUP_F_main_BB_thread117i_237) & (memory_controller_waitrequest == 1'd0)) & (main_thread117i_641 == 1'd1))) begin
		main_thread122i_652_reg <= main_thread122i_652;
		if (start == 1'b0 && ^(main_thread122i_652) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_thread122i_652_reg"); $finish; end
	end
	/* main: %.thread122.i*/
	/*   %652 = phi i16 [ %phitmp6.i, %650 ], [ 0, %648 ], [ 0, %gsm_add.exit13.i ], [ 7, %gsm_add.exit13.thread.i ], [ 0, %.thread117.i ], [ 7, %642 ]*/
	if ((((cur_state == LEGUP_F_main_BB__642_238) & (memory_controller_waitrequest == 1'd0)) & (main_642_643 == 1'd1))) begin
		main_thread122i_652_reg <= main_thread122i_652;
		if (start == 1'b0 && ^(main_thread122i_652) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_thread122i_652_reg"); $finish; end
	end
	/* main: %.thread122.i*/
	/*   %652 = phi i16 [ %phitmp6.i, %650 ], [ 0, %648 ], [ 0, %gsm_add.exit13.i ], [ 7, %gsm_add.exit13.thread.i ], [ 0, %.thread117.i ], [ 7, %642 ]*/
	if ((((cur_state == LEGUP_F_main_BB_gsm_addexit13i_239) & (memory_controller_waitrequest == 1'd0)) & (main_gsm_addexit13i_645 == 1'd1))) begin
		main_thread122i_652_reg <= main_thread122i_652;
		if (start == 1'b0 && ^(main_thread122i_652) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_thread122i_652_reg"); $finish; end
	end
	/* main: %.thread122.i*/
	/*   %652 = phi i16 [ %phitmp6.i, %650 ], [ 0, %648 ], [ 0, %gsm_add.exit13.i ], [ 7, %gsm_add.exit13.thread.i ], [ 0, %.thread117.i ], [ 7, %642 ]*/
	if ((((cur_state == LEGUP_F_main_BB_gsm_addexit13threadi_240) & (memory_controller_waitrequest == 1'd0)) & (main_gsm_addexit13threadi_orcond169i == 1'd1))) begin
		main_thread122i_652_reg <= main_thread122i_652;
		if (start == 1'b0 && ^(main_thread122i_652) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_thread122i_652_reg"); $finish; end
	end
	/* main: %.thread122.i*/
	/*   %652 = phi i16 [ %phitmp6.i, %650 ], [ 0, %648 ], [ 0, %gsm_add.exit13.i ], [ 7, %gsm_add.exit13.thread.i ], [ 0, %.thread117.i ], [ 7, %642 ]*/
	if ((((cur_state == LEGUP_F_main_BB__648_241) & (memory_controller_waitrequest == 1'd0)) & (main_648_649 == 1'd1))) begin
		main_thread122i_652_reg <= main_thread122i_652;
		if (start == 1'b0 && ^(main_thread122i_652) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_thread122i_652_reg"); $finish; end
	end
	/* main: %.thread122.i*/
	/*   %652 = phi i16 [ %phitmp6.i, %650 ], [ 0, %648 ], [ 0, %gsm_add.exit13.i ], [ 7, %gsm_add.exit13.thread.i ], [ 0, %.thread117.i ], [ 7, %642 ]*/
	if (((cur_state == LEGUP_F_main_BB__650_242) & (memory_controller_waitrequest == 1'd0))) begin
		main_thread122i_652_reg <= main_thread122i_652;
		if (start == 1'b0 && ^(main_thread122i_652) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_thread122i_652_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.thread122.i*/
	/*   %gep_int135 = ptrtoint i16* %19 to i32*/
		main_thread122i_gep_int135 = main_18_19_reg;
end
always @(posedge clk) begin
	/* main: %.thread122.i*/
	/*   %gep_int135 = ptrtoint i16* %19 to i32*/
	if ((cur_state == LEGUP_F_main_BB_thread122i_243)) begin
		main_thread122i_gep_int135_reg <= main_thread122i_gep_int135;
		if (start == 1'b0 && ^(main_thread122i_gep_int135) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_thread122i_gep_int135_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.thread122.i*/
	/*   %gep136 = add i32 %gep_int135, 14*/
		main_thread122i_gep136 = main_signed_add_32_0;
end
always @(*) begin
/* main: %.thread122.i*/
/*   %gep136 = add i32 %gep_int135, 14*/
	main_thread122i_gep136_reg = main_1_gep_reg;
end
always @(*) begin
	/* main: %.thread122.i*/
	/*   %653 = inttoptr i32 %gep136 to i16**/
		main_thread122i_653 = main_thread122i_gep136;
end
always @(posedge clk) begin
	/* main: %.thread122.i*/
	/*   %653 = inttoptr i32 %gep136 to i16**/
	if ((cur_state == LEGUP_F_main_BB_thread122i_243)) begin
		main_thread122i_653_reg <= main_thread122i_653;
		if (start == 1'b0 && ^(main_thread122i_653) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_thread122i_653_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.thread122.i*/
	/*   %654 = load i16* %653, align 2, !tbaa !1*/
		main_thread122i_654 = memory_controller_out_a[15:0];
end
always @(posedge clk) begin
	/* main: %.thread122.i*/
	/*   %654 = load i16* %653, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_thread122i_246)) begin
		main_thread122i_654_reg <= main_thread122i_654;
		if (start == 1'b0 && ^(main_thread122i_654) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_thread122i_654_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.thread122.i*/
	/*   %655 = sext i16 %654 to i32*/
		main_thread122i_655 = $signed(main_thread122i_654);
end
always @(posedge clk) begin
	/* main: %.thread122.i*/
	/*   %655 = sext i16 %654 to i32*/
	if ((cur_state == LEGUP_F_main_BB_thread122i_246)) begin
		main_thread122i_655_reg <= main_thread122i_655;
		if (start == 1'b0 && ^(main_thread122i_655) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_thread122i_655_reg"); $finish; end
	end
end
always @(*) begin
	main_thread122i_656 = main_signed_multiply_32_0;
end
always @(*) begin
/* main: %.thread122.i*/
/*   %656 = mul i32 %655, 18072*/
	main_thread122i_656_reg = main_74_76_reg;
end
always @(*) begin
	/* main: %.thread122.i*/
	/*   %657 = add i32 %656, 18072*/
		main_thread122i_657 = main_signed_add_32_0;
end
always @(*) begin
/* main: %.thread122.i*/
/*   %657 = add i32 %656, 18072*/
	main_thread122i_657_reg = main_1_gep_reg;
end
always @(*) begin
	/* main: %.thread122.i*/
	/*   %658 = ashr i32 %657, 16*/
		main_thread122i_658 = ($signed(main_thread122i_657) >>> 32'd16);
end
always @(posedge clk) begin
	/* main: %.thread122.i*/
	/*   %658 = ashr i32 %657, 16*/
	if ((cur_state == LEGUP_F_main_BB_thread122i_247)) begin
		main_thread122i_658_reg <= main_thread122i_658;
		if (start == 1'b0 && ^(main_thread122i_658) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_thread122i_658_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.thread122.i*/
	/*   %659 = add nsw i32 %658, -1144*/
		main_thread122i_659 = main_signed_add_32_1;
end
always @(*) begin
/* main: %.thread122.i*/
/*   %659 = add nsw i32 %658, -1144*/
	main_thread122i_659_reg = main_1_gep3_reg;
end
always @(*) begin
	/* main: %.thread122.i*/
	/*   %660 = icmp slt i32 %659, -32768*/
		main_thread122i_660 = ($signed(main_thread122i_659) < $signed(-32'd32768));
end
always @(posedge clk) begin
	/* main: %.thread122.i*/
	/*   %660 = icmp slt i32 %659, -32768*/
	if ((cur_state == LEGUP_F_main_BB_thread122i_247)) begin
		main_thread122i_660_reg <= main_thread122i_660;
		if (start == 1'b0 && ^(main_thread122i_660) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_thread122i_660_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %661*/
	/*   %662 = icmp sgt i32 %659, 32767*/
		main_661_662 = ($signed(main_thread122i_659_reg) > $signed(32'd32767));
end
always @(posedge clk) begin
	/* main: %661*/
	/*   %662 = icmp sgt i32 %659, 32767*/
	if ((cur_state == LEGUP_F_main_BB__661_248)) begin
		main_661_662_reg <= main_661_662;
		if (start == 1'b0 && ^(main_661_662) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_661_662_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %661*/
	/*   %sext88.i = shl i32 %659, 16*/
		main_661_sext88i = (main_thread122i_659_reg <<< (32'd16 % 32));
end
always @(posedge clk) begin
	/* main: %661*/
	/*   %sext88.i = shl i32 %659, 16*/
	if ((cur_state == LEGUP_F_main_BB__661_248)) begin
		main_661_sext88i_reg <= main_661_sext88i;
		if (start == 1'b0 && ^(main_661_sext88i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_661_sext88i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %661*/
	/*   %663 = ashr exact i32 %sext88.i, 16*/
		main_661_663 = ($signed(main_661_sext88i) >>> 32'd16);
end
always @(posedge clk) begin
	/* main: %661*/
	/*   %663 = ashr exact i32 %sext88.i, 16*/
	if ((cur_state == LEGUP_F_main_BB__661_248)) begin
		main_661_663_reg <= main_661_663;
		if (start == 1'b0 && ^(main_661_663) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_661_663_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %661*/
	/*   %.op90.i = add nsw i32 %663, 256*/
		main_661_op90i = main_signed_add_32_0;
end
always @(*) begin
/* main: %661*/
/*   %.op90.i = add nsw i32 %663, 256*/
	main_661_op90i_reg = main_1_gep_reg;
end
always @(*) begin
	/* main: %gsm_add.exit9.i*/
	/*   %664 = icmp slt i32 %.op90.i, -32768*/
		main_gsm_addexit9i_664 = ($signed(main_661_op90i_reg) < $signed(-32'd32768));
end
always @(posedge clk) begin
	/* main: %gsm_add.exit9.i*/
	/*   %664 = icmp slt i32 %.op90.i, -32768*/
	if ((cur_state == LEGUP_F_main_BB_gsm_addexit9i_249)) begin
		main_gsm_addexit9i_664_reg <= main_gsm_addexit9i_664;
		if (start == 1'b0 && ^(main_gsm_addexit9i_664) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_addexit9i_664_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_add.exit9.thread.i*/
	/*   %665 = icmp sgt i32 %.op90.i, 32767*/
		main_gsm_addexit9threadi_665 = ($signed(main_661_op90i_reg) > $signed(32'd32767));
end
always @(posedge clk) begin
	/* main: %gsm_add.exit9.thread.i*/
	/*   %665 = icmp sgt i32 %.op90.i, 32767*/
	if ((cur_state == LEGUP_F_main_BB_gsm_addexit9threadi_250)) begin
		main_gsm_addexit9threadi_665_reg <= main_gsm_addexit9threadi_665;
		if (start == 1'b0 && ^(main_gsm_addexit9threadi_665) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_addexit9threadi_665_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_add.exit9.thread.i*/
	/*   %sext92.i = shl i32 %.op90.i, 16*/
		main_gsm_addexit9threadi_sext92i = (main_661_op90i_reg <<< (32'd16 % 32));
end
always @(posedge clk) begin
	/* main: %gsm_add.exit9.thread.i*/
	/*   %sext92.i = shl i32 %.op90.i, 16*/
	if ((cur_state == LEGUP_F_main_BB_gsm_addexit9threadi_250)) begin
		main_gsm_addexit9threadi_sext92i_reg <= main_gsm_addexit9threadi_sext92i;
		if (start == 1'b0 && ^(main_gsm_addexit9threadi_sext92i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_addexit9threadi_sext92i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_add.exit9.thread.i*/
	/*   %.op94.i = ashr i32 %sext92.i, 25*/
		main_gsm_addexit9threadi_op94i = ($signed(main_gsm_addexit9threadi_sext92i) >>> 32'd25);
end
always @(posedge clk) begin
	/* main: %gsm_add.exit9.thread.i*/
	/*   %.op94.i = ashr i32 %sext92.i, 25*/
	if ((cur_state == LEGUP_F_main_BB_gsm_addexit9threadi_250)) begin
		main_gsm_addexit9threadi_op94i_reg <= main_gsm_addexit9threadi_op94i;
		if (start == 1'b0 && ^(main_gsm_addexit9threadi_op94i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_addexit9threadi_op94i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_add.exit9.thread.i*/
	/*   %666 = icmp sgt i32 %.op94.i, 3*/
		main_gsm_addexit9threadi_666 = ($signed(main_gsm_addexit9threadi_op94i) > $signed(32'd3));
end
always @(posedge clk) begin
	/* main: %gsm_add.exit9.thread.i*/
	/*   %666 = icmp sgt i32 %.op94.i, 3*/
	if ((cur_state == LEGUP_F_main_BB_gsm_addexit9threadi_250)) begin
		main_gsm_addexit9threadi_666_reg <= main_gsm_addexit9threadi_666;
		if (start == 1'b0 && ^(main_gsm_addexit9threadi_666) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_addexit9threadi_666_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_add.exit9.thread.i*/
	/*   %or.cond170.i = or i1 %665, %666*/
		main_gsm_addexit9threadi_orcond170i = (main_gsm_addexit9threadi_665 | main_gsm_addexit9threadi_666);
end
always @(posedge clk) begin
	/* main: %gsm_add.exit9.thread.i*/
	/*   %or.cond170.i = or i1 %665, %666*/
	if ((cur_state == LEGUP_F_main_BB_gsm_addexit9threadi_250)) begin
		main_gsm_addexit9threadi_orcond170i_reg <= main_gsm_addexit9threadi_orcond170i;
		if (start == 1'b0 && ^(main_gsm_addexit9threadi_orcond170i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_addexit9threadi_orcond170i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %667*/
	/*   %668 = icmp slt i32 %.op94.i, -4*/
		main_667_668 = ($signed(main_gsm_addexit9threadi_op94i_reg) < $signed(-32'd4));
end
always @(posedge clk) begin
	/* main: %667*/
	/*   %668 = icmp slt i32 %.op94.i, -4*/
	if ((cur_state == LEGUP_F_main_BB__667_251)) begin
		main_667_668_reg <= main_667_668;
		if (start == 1'b0 && ^(main_667_668) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_667_668_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %669*/
	/*   %670 = add nsw i32 %.op94.i, 4*/
		main_669_670 = main_signed_add_32_0;
end
always @(*) begin
/* main: %669*/
/*   %670 = add nsw i32 %.op94.i, 4*/
	main_669_670_reg = main_1_gep_reg;
end
always @(*) begin
	/* main: %669*/
	/*   %phitmp7.i = trunc i32 %670 to i16*/
		main_669_phitmp7i = main_669_670[15:0];
end
always @(posedge clk) begin
	/* main: %669*/
	/*   %phitmp7.i = trunc i32 %670 to i16*/
	if ((cur_state == LEGUP_F_main_BB__669_252)) begin
		main_669_phitmp7i_reg <= main_669_phitmp7i;
		if (start == 1'b0 && ^(main_669_phitmp7i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_669_phitmp7i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %Quantization_and_coding.exit*/
	/*   %671 = phi i16 [ %phitmp7.i, %669 ], [ 0, %667 ], [ 0, %gsm_add.exit9.i ], [ 7, %gsm_add.exit9.thread.i ], [ 0, %.thread122.i ], [ 7, %661 ]*/
	if ((((cur_state == LEGUP_F_main_BB_thread122i_247) & (memory_controller_waitrequest == 1'd0)) & (main_thread122i_660 == 1'd1))) begin
		main_Quantization_and_codingexit_671 = 16'd0;
	end
	/* main: %Quantization_and_coding.exit*/
	/*   %671 = phi i16 [ %phitmp7.i, %669 ], [ 0, %667 ], [ 0, %gsm_add.exit9.i ], [ 7, %gsm_add.exit9.thread.i ], [ 0, %.thread122.i ], [ 7, %661 ]*/
	else if ((((cur_state == LEGUP_F_main_BB__661_248) & (memory_controller_waitrequest == 1'd0)) & (main_661_662 == 1'd1))) begin
		main_Quantization_and_codingexit_671 = 16'd7;
	end
	/* main: %Quantization_and_coding.exit*/
	/*   %671 = phi i16 [ %phitmp7.i, %669 ], [ 0, %667 ], [ 0, %gsm_add.exit9.i ], [ 7, %gsm_add.exit9.thread.i ], [ 0, %.thread122.i ], [ 7, %661 ]*/
	else if ((((cur_state == LEGUP_F_main_BB_gsm_addexit9i_249) & (memory_controller_waitrequest == 1'd0)) & (main_gsm_addexit9i_664 == 1'd1))) begin
		main_Quantization_and_codingexit_671 = 16'd0;
	end
	/* main: %Quantization_and_coding.exit*/
	/*   %671 = phi i16 [ %phitmp7.i, %669 ], [ 0, %667 ], [ 0, %gsm_add.exit9.i ], [ 7, %gsm_add.exit9.thread.i ], [ 0, %.thread122.i ], [ 7, %661 ]*/
	else if ((((cur_state == LEGUP_F_main_BB_gsm_addexit9threadi_250) & (memory_controller_waitrequest == 1'd0)) & (main_gsm_addexit9threadi_orcond170i == 1'd1))) begin
		main_Quantization_and_codingexit_671 = 16'd7;
	end
	/* main: %Quantization_and_coding.exit*/
	/*   %671 = phi i16 [ %phitmp7.i, %669 ], [ 0, %667 ], [ 0, %gsm_add.exit9.i ], [ 7, %gsm_add.exit9.thread.i ], [ 0, %.thread122.i ], [ 7, %661 ]*/
	else if ((((cur_state == LEGUP_F_main_BB__667_251) & (memory_controller_waitrequest == 1'd0)) & (main_667_668 == 1'd1))) begin
		main_Quantization_and_codingexit_671 = 16'd0;
	end
	/* main: %Quantization_and_coding.exit*/
	/*   %671 = phi i16 [ %phitmp7.i, %669 ], [ 0, %667 ], [ 0, %gsm_add.exit9.i ], [ 7, %gsm_add.exit9.thread.i ], [ 0, %.thread122.i ], [ 7, %661 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__669_252) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_Quantization_and_codingexit_671 = main_669_phitmp7i;
	end
end
always @(posedge clk) begin
	/* main: %Quantization_and_coding.exit*/
	/*   %671 = phi i16 [ %phitmp7.i, %669 ], [ 0, %667 ], [ 0, %gsm_add.exit9.i ], [ 7, %gsm_add.exit9.thread.i ], [ 0, %.thread122.i ], [ 7, %661 ]*/
	if ((((cur_state == LEGUP_F_main_BB_thread122i_247) & (memory_controller_waitrequest == 1'd0)) & (main_thread122i_660 == 1'd1))) begin
		main_Quantization_and_codingexit_671_reg <= main_Quantization_and_codingexit_671;
		if (start == 1'b0 && ^(main_Quantization_and_codingexit_671) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_Quantization_and_codingexit_671_reg"); $finish; end
	end
	/* main: %Quantization_and_coding.exit*/
	/*   %671 = phi i16 [ %phitmp7.i, %669 ], [ 0, %667 ], [ 0, %gsm_add.exit9.i ], [ 7, %gsm_add.exit9.thread.i ], [ 0, %.thread122.i ], [ 7, %661 ]*/
	if ((((cur_state == LEGUP_F_main_BB__661_248) & (memory_controller_waitrequest == 1'd0)) & (main_661_662 == 1'd1))) begin
		main_Quantization_and_codingexit_671_reg <= main_Quantization_and_codingexit_671;
		if (start == 1'b0 && ^(main_Quantization_and_codingexit_671) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_Quantization_and_codingexit_671_reg"); $finish; end
	end
	/* main: %Quantization_and_coding.exit*/
	/*   %671 = phi i16 [ %phitmp7.i, %669 ], [ 0, %667 ], [ 0, %gsm_add.exit9.i ], [ 7, %gsm_add.exit9.thread.i ], [ 0, %.thread122.i ], [ 7, %661 ]*/
	if ((((cur_state == LEGUP_F_main_BB_gsm_addexit9i_249) & (memory_controller_waitrequest == 1'd0)) & (main_gsm_addexit9i_664 == 1'd1))) begin
		main_Quantization_and_codingexit_671_reg <= main_Quantization_and_codingexit_671;
		if (start == 1'b0 && ^(main_Quantization_and_codingexit_671) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_Quantization_and_codingexit_671_reg"); $finish; end
	end
	/* main: %Quantization_and_coding.exit*/
	/*   %671 = phi i16 [ %phitmp7.i, %669 ], [ 0, %667 ], [ 0, %gsm_add.exit9.i ], [ 7, %gsm_add.exit9.thread.i ], [ 0, %.thread122.i ], [ 7, %661 ]*/
	if ((((cur_state == LEGUP_F_main_BB_gsm_addexit9threadi_250) & (memory_controller_waitrequest == 1'd0)) & (main_gsm_addexit9threadi_orcond170i == 1'd1))) begin
		main_Quantization_and_codingexit_671_reg <= main_Quantization_and_codingexit_671;
		if (start == 1'b0 && ^(main_Quantization_and_codingexit_671) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_Quantization_and_codingexit_671_reg"); $finish; end
	end
	/* main: %Quantization_and_coding.exit*/
	/*   %671 = phi i16 [ %phitmp7.i, %669 ], [ 0, %667 ], [ 0, %gsm_add.exit9.i ], [ 7, %gsm_add.exit9.thread.i ], [ 0, %.thread122.i ], [ 7, %661 ]*/
	if ((((cur_state == LEGUP_F_main_BB__667_251) & (memory_controller_waitrequest == 1'd0)) & (main_667_668 == 1'd1))) begin
		main_Quantization_and_codingexit_671_reg <= main_Quantization_and_codingexit_671;
		if (start == 1'b0 && ^(main_Quantization_and_codingexit_671) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_Quantization_and_codingexit_671_reg"); $finish; end
	end
	/* main: %Quantization_and_coding.exit*/
	/*   %671 = phi i16 [ %phitmp7.i, %669 ], [ 0, %667 ], [ 0, %gsm_add.exit9.i ], [ 7, %gsm_add.exit9.thread.i ], [ 0, %.thread122.i ], [ 7, %661 ]*/
	if (((cur_state == LEGUP_F_main_BB__669_252) & (memory_controller_waitrequest == 1'd0))) begin
		main_Quantization_and_codingexit_671_reg <= main_Quantization_and_codingexit_671;
		if (start == 1'b0 && ^(main_Quantization_and_codingexit_671) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_Quantization_and_codingexit_671_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader*/
	/*   %.lcssa = phi i32 [ %705, %698 ]*/
		main_preheader_lcssa = main_698_705;
end
always @(posedge clk) begin
	/* main: %.preheader*/
	/*   %.lcssa = phi i32 [ %705, %698 ]*/
	if ((((cur_state == LEGUP_F_main_BB__698_259) & (memory_controller_waitrequest == 1'd0)) & (main_698_exitcond_reg == 1'd1))) begin
		main_preheader_lcssa_reg <= main_preheader_lcssa;
		if (start == 1'b0 && ^(main_preheader_lcssa) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader_lcssa_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader*/
	/*   %672 = icmp eq i16 %541, 32*/
		main_preheader_672 = (main_threadi4_541_reg == 16'd32);
end
always @(posedge clk) begin
	/* main: %.preheader*/
	/*   %672 = icmp eq i16 %541, 32*/
	if ((cur_state == LEGUP_F_main_BB_preheader_255)) begin
		main_preheader_672_reg <= main_preheader_672;
		if (start == 1'b0 && ^(main_preheader_672) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader_672_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader*/
	/*   %673 = zext i1 %672 to i32*/
		main_preheader_673 = main_preheader_672;
end
always @(posedge clk) begin
	/* main: %.preheader*/
	/*   %673 = zext i1 %672 to i32*/
	if ((cur_state == LEGUP_F_main_BB_preheader_255)) begin
		main_preheader_673_reg <= main_preheader_673;
		if (start == 1'b0 && ^(main_preheader_673) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader_673_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader*/
	/*   %674 = add nsw i32 %673, %.lcssa*/
		main_preheader_674 = main_signed_add_32_0;
end
always @(*) begin
/* main: %.preheader*/
/*   %674 = add nsw i32 %673, %.lcssa*/
	main_preheader_674_reg = main_1_gep_reg;
end
always @(*) begin
	/* main: %.preheader*/
	/*   %675 = icmp eq i16 %557, 33*/
		main_preheader_675 = (main_thread98i_557_reg == 16'd33);
end
always @(posedge clk) begin
	/* main: %.preheader*/
	/*   %675 = icmp eq i16 %557, 33*/
	if ((cur_state == LEGUP_F_main_BB_preheader_255)) begin
		main_preheader_675_reg <= main_preheader_675;
		if (start == 1'b0 && ^(main_preheader_675) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader_675_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader*/
	/*   %676 = zext i1 %675 to i32*/
		main_preheader_676 = main_preheader_675;
end
always @(posedge clk) begin
	/* main: %.preheader*/
	/*   %676 = zext i1 %675 to i32*/
	if ((cur_state == LEGUP_F_main_BB_preheader_255)) begin
		main_preheader_676_reg <= main_preheader_676;
		if (start == 1'b0 && ^(main_preheader_676) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader_676_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader*/
	/*   %677 = add nsw i32 %676, %674*/
		main_preheader_677 = main_signed_add_32_1;
end
always @(*) begin
/* main: %.preheader*/
/*   %677 = add nsw i32 %676, %674*/
	main_preheader_677_reg = main_1_gep3_reg;
end
always @(*) begin
	/* main: %.preheader*/
	/*   %678 = icmp eq i16 %576, 22*/
		main_preheader_678 = (main_thread102i_576_reg == 16'd22);
end
always @(posedge clk) begin
	/* main: %.preheader*/
	/*   %678 = icmp eq i16 %576, 22*/
	if ((cur_state == LEGUP_F_main_BB_preheader_255)) begin
		main_preheader_678_reg <= main_preheader_678;
		if (start == 1'b0 && ^(main_preheader_678) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader_678_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader*/
	/*   %679 = zext i1 %678 to i32*/
		main_preheader_679 = main_preheader_678;
end
always @(posedge clk) begin
	/* main: %.preheader*/
	/*   %679 = zext i1 %678 to i32*/
	if ((cur_state == LEGUP_F_main_BB_preheader_255)) begin
		main_preheader_679_reg <= main_preheader_679;
		if (start == 1'b0 && ^(main_preheader_679) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader_679_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader*/
	/*   %680 = add nsw i32 %679, %677*/
		main_preheader_680 = main_signed_add_32_12;
end
always @(*) begin
/* main: %.preheader*/
/*   %680 = add nsw i32 %679, %677*/
	main_preheader_680_reg = main_threadi_128_reg;
end
always @(*) begin
	/* main: %.preheader*/
	/*   %681 = icmp eq i16 %595, 13*/
		main_preheader_681 = (main_thread107i_595_reg == 16'd13);
end
always @(posedge clk) begin
	/* main: %.preheader*/
	/*   %681 = icmp eq i16 %595, 13*/
	if ((cur_state == LEGUP_F_main_BB_preheader_255)) begin
		main_preheader_681_reg <= main_preheader_681;
		if (start == 1'b0 && ^(main_preheader_681) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader_681_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader*/
	/*   %682 = zext i1 %681 to i32*/
		main_preheader_682 = main_preheader_681;
end
always @(posedge clk) begin
	/* main: %.preheader*/
	/*   %682 = zext i1 %681 to i32*/
	if ((cur_state == LEGUP_F_main_BB_preheader_255)) begin
		main_preheader_682_reg <= main_preheader_682;
		if (start == 1'b0 && ^(main_preheader_682) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader_682_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader*/
	/*   %683 = add nsw i32 %682, %680*/
		main_preheader_683 = main_signed_add_32_2;
end
always @(*) begin
/* main: %.preheader*/
/*   %683 = add nsw i32 %682, %680*/
	main_preheader_683_reg = main_threadi_126_reg;
end
always @(*) begin
	/* main: %.preheader*/
	/*   %684 = icmp eq i16 %614, 7*/
		main_preheader_684 = (main_thread112i_614_reg == 16'd7);
end
always @(posedge clk) begin
	/* main: %.preheader*/
	/*   %684 = icmp eq i16 %614, 7*/
	if ((cur_state == LEGUP_F_main_BB_preheader_255)) begin
		main_preheader_684_reg <= main_preheader_684;
		if (start == 1'b0 && ^(main_preheader_684) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader_684_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader*/
	/*   %685 = zext i1 %684 to i32*/
		main_preheader_685 = main_preheader_684;
end
always @(posedge clk) begin
	/* main: %.preheader*/
	/*   %685 = zext i1 %684 to i32*/
	if ((cur_state == LEGUP_F_main_BB_preheader_255)) begin
		main_preheader_685_reg <= main_preheader_685;
		if (start == 1'b0 && ^(main_preheader_685) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader_685_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader*/
	/*   %686 = add nsw i32 %685, %683*/
		main_preheader_686 = main_signed_add_32_11;
end
always @(*) begin
/* main: %.preheader*/
/*   %686 = add nsw i32 %685, %683*/
	main_preheader_686_reg = main_threadi_gep32_reg;
end
always @(*) begin
	/* main: %.preheader*/
	/*   %687 = icmp eq i16 %633, 5*/
		main_preheader_687 = (main_thread117i_633_reg == 16'd5);
end
always @(posedge clk) begin
	/* main: %.preheader*/
	/*   %687 = icmp eq i16 %633, 5*/
	if ((cur_state == LEGUP_F_main_BB_preheader_255)) begin
		main_preheader_687_reg <= main_preheader_687;
		if (start == 1'b0 && ^(main_preheader_687) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader_687_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader*/
	/*   %688 = zext i1 %687 to i32*/
		main_preheader_688 = main_preheader_687;
end
always @(posedge clk) begin
	/* main: %.preheader*/
	/*   %688 = zext i1 %687 to i32*/
	if ((cur_state == LEGUP_F_main_BB_preheader_255)) begin
		main_preheader_688_reg <= main_preheader_688;
		if (start == 1'b0 && ^(main_preheader_688) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader_688_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader*/
	/*   %689 = add nsw i32 %688, %686*/
		main_preheader_689 = main_signed_add_32_9;
end
always @(*) begin
/* main: %.preheader*/
/*   %689 = add nsw i32 %688, %686*/
	main_preheader_689_reg = main_threadi_134_reg;
end
always @(*) begin
	/* main: %.preheader*/
	/*   %690 = icmp eq i16 %652, 3*/
		main_preheader_690 = (main_thread122i_652_reg == 16'd3);
end
always @(posedge clk) begin
	/* main: %.preheader*/
	/*   %690 = icmp eq i16 %652, 3*/
	if ((cur_state == LEGUP_F_main_BB_preheader_255)) begin
		main_preheader_690_reg <= main_preheader_690;
		if (start == 1'b0 && ^(main_preheader_690) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader_690_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader*/
	/*   %691 = zext i1 %690 to i32*/
		main_preheader_691 = main_preheader_690;
end
always @(posedge clk) begin
	/* main: %.preheader*/
	/*   %691 = zext i1 %690 to i32*/
	if ((cur_state == LEGUP_F_main_BB_preheader_255)) begin
		main_preheader_691_reg <= main_preheader_691;
		if (start == 1'b0 && ^(main_preheader_691) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader_691_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader*/
	/*   %692 = add nsw i32 %691, %689*/
		main_preheader_692 = main_signed_add_32_10;
end
always @(*) begin
/* main: %.preheader*/
/*   %692 = add nsw i32 %691, %689*/
	main_preheader_692_reg = main_threadi_136_reg;
end
always @(*) begin
	/* main: %.preheader*/
	/*   %693 = icmp eq i16 %671, 2*/
		main_preheader_693 = (main_Quantization_and_codingexit_671_reg == 16'd2);
end
always @(posedge clk) begin
	/* main: %.preheader*/
	/*   %693 = icmp eq i16 %671, 2*/
	if ((cur_state == LEGUP_F_main_BB_preheader_255)) begin
		main_preheader_693_reg <= main_preheader_693;
		if (start == 1'b0 && ^(main_preheader_693) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader_693_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader*/
	/*   %694 = zext i1 %693 to i32*/
		main_preheader_694 = main_preheader_693;
end
always @(posedge clk) begin
	/* main: %.preheader*/
	/*   %694 = zext i1 %693 to i32*/
	if ((cur_state == LEGUP_F_main_BB_preheader_255)) begin
		main_preheader_694_reg <= main_preheader_694;
		if (start == 1'b0 && ^(main_preheader_694) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader_694_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader*/
	/*   %695 = add nsw i32 %694, %692*/
		main_preheader_695 = main_signed_add_32_0;
end
always @(*) begin
/* main: %.preheader*/
/*   %695 = add nsw i32 %694, %692*/
	main_preheader_695_reg = main_1_5_reg;
end
always @(*) begin
	/* main: %.preheader*/
	/*   %697 = icmp eq i32 %695, 168*/
		main_preheader_697 = (main_preheader_695 == 32'd168);
end
always @(posedge clk) begin
	/* main: %.preheader*/
	/*   %697 = icmp eq i32 %695, 168*/
	if ((cur_state == LEGUP_F_main_BB_preheader_256)) begin
		main_preheader_697_reg <= main_preheader_697;
		if (start == 1'b0 && ^(main_preheader_697) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader_697_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %698*/
	/*   %main_result.04 = phi i32 [ 0, %Quantization_and_coding.exit ], [ %705, %698 ]*/
	if (((cur_state == LEGUP_F_main_BB_Quantization_and_codingexit_254) & (memory_controller_waitrequest == 1'd0))) begin
		main_698_main_result04 = 32'd0;
	end
	/* main: %698*/
	/*   %main_result.04 = phi i32 [ 0, %Quantization_and_coding.exit ], [ %705, %698 ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__698_259) & (memory_controller_waitrequest == 1'd0)) & (main_698_exitcond_reg == 1'd0))) */ begin
		main_698_main_result04 = main_698_705;
	end
end
always @(posedge clk) begin
	/* main: %698*/
	/*   %main_result.04 = phi i32 [ 0, %Quantization_and_coding.exit ], [ %705, %698 ]*/
	if (((cur_state == LEGUP_F_main_BB_Quantization_and_codingexit_254) & (memory_controller_waitrequest == 1'd0))) begin
		main_698_main_result04_reg <= main_698_main_result04;
		if (start == 1'b0 && ^(main_698_main_result04) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_698_main_result04_reg"); $finish; end
	end
	/* main: %698*/
	/*   %main_result.04 = phi i32 [ 0, %Quantization_and_coding.exit ], [ %705, %698 ]*/
	if ((((cur_state == LEGUP_F_main_BB__698_259) & (memory_controller_waitrequest == 1'd0)) & (main_698_exitcond_reg == 1'd0))) begin
		main_698_main_result04_reg <= main_698_main_result04;
		if (start == 1'b0 && ^(main_698_main_result04) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_698_main_result04_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %698*/
	/*   %i.13 = phi i32 [ 0, %Quantization_and_coding.exit ], [ %706, %698 ]*/
	if (((cur_state == LEGUP_F_main_BB_Quantization_and_codingexit_254) & (memory_controller_waitrequest == 1'd0))) begin
		main_698_i13 = 32'd0;
	end
	/* main: %698*/
	/*   %i.13 = phi i32 [ 0, %Quantization_and_coding.exit ], [ %706, %698 ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__698_259) & (memory_controller_waitrequest == 1'd0)) & (main_698_exitcond_reg == 1'd0))) */ begin
		main_698_i13 = main_698_706_reg;
	end
end
always @(posedge clk) begin
	/* main: %698*/
	/*   %i.13 = phi i32 [ 0, %Quantization_and_coding.exit ], [ %706, %698 ]*/
	if (((cur_state == LEGUP_F_main_BB_Quantization_and_codingexit_254) & (memory_controller_waitrequest == 1'd0))) begin
		main_698_i13_reg <= main_698_i13;
		if (start == 1'b0 && ^(main_698_i13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_698_i13_reg"); $finish; end
	end
	/* main: %698*/
	/*   %i.13 = phi i32 [ 0, %Quantization_and_coding.exit ], [ %706, %698 ]*/
	if ((((cur_state == LEGUP_F_main_BB__698_259) & (memory_controller_waitrequest == 1'd0)) & (main_698_exitcond_reg == 1'd0))) begin
		main_698_i13_reg <= main_698_i13;
		if (start == 1'b0 && ^(main_698_i13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_698_i13_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %698*/
	/*   %gep_int151 = ptrtoint [160 x i16]* %so to i32*/
if (reset) begin main_698_gep_int151 = 0; end
		main_698_gep_int151 = 1'd0;
end
always @(posedge clk) begin
	/* main: %698*/
	/*   %gep_int151 = ptrtoint [160 x i16]* %so to i32*/
	if ((cur_state == LEGUP_F_main_BB__698_257)) begin
		main_698_gep_int151_reg <= main_698_gep_int151;
		if (start == 1'b0 && ^(main_698_gep_int151) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_698_gep_int151_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %698*/
	/*   %gep_array152 = mul i32 %i.13, 2*/
		main_698_gep_array152 = (main_698_i13_reg * 32'd2);
end
always @(posedge clk) begin
	/* main: %698*/
	/*   %gep_array152 = mul i32 %i.13, 2*/
	if ((cur_state == LEGUP_F_main_BB__698_257)) begin
		main_698_gep_array152_reg <= main_698_gep_array152;
		if (start == 1'b0 && ^(main_698_gep_array152) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_698_gep_array152_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %698*/
	/*   %gep153 = add i32 %gep_int151, %gep_array152*/
		main_698_gep153 = main_signed_add_32_0;
end
always @(*) begin
/* main: %698*/
/*   %gep153 = add i32 %gep_int151, %gep_array152*/
	main_698_gep153_reg = main_1_gep_reg;
end
always @(*) begin
	/* main: %698*/
	/*   %699 = inttoptr i32 %gep153 to i16**/
		main_698_699 = main_698_gep153;
end
always @(posedge clk) begin
	/* main: %698*/
	/*   %699 = inttoptr i32 %gep153 to i16**/
	if ((cur_state == LEGUP_F_main_BB__698_258)) begin
		main_698_699_reg <= main_698_699;
		if (start == 1'b0 && ^(main_698_699) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_698_699_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %698*/
	/*   %700 = load i16* %699, align 2, !tbaa !1*/
		main_698_700 = main_0_so_out_a;
end
always @(posedge clk) begin
	/* main: %698*/
	/*   %700 = load i16* %699, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__698_259)) begin
		main_698_700_reg <= main_698_700;
		if (start == 1'b0 && ^(main_698_700) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_698_700_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %698*/
	/*   %gep_int154 = ptrtoint [160 x i16]* @outData to i32*/
if (reset) begin main_698_gep_int154 = 0; end
		main_698_gep_int154 = 1'd0;
end
always @(posedge clk) begin
	/* main: %698*/
	/*   %gep_int154 = ptrtoint [160 x i16]* @outData to i32*/
	if ((cur_state == LEGUP_F_main_BB__698_257)) begin
		main_698_gep_int154_reg <= main_698_gep_int154;
		if (start == 1'b0 && ^(main_698_gep_int154) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_698_gep_int154_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %698*/
	/*   %gep_array155 = mul i32 %i.13, 2*/
		main_698_gep_array155 = (main_698_i13_reg * 32'd2);
end
always @(posedge clk) begin
	/* main: %698*/
	/*   %gep_array155 = mul i32 %i.13, 2*/
	if ((cur_state == LEGUP_F_main_BB__698_257)) begin
		main_698_gep_array155_reg <= main_698_gep_array155;
		if (start == 1'b0 && ^(main_698_gep_array155) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_698_gep_array155_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %698*/
	/*   %gep156 = add i32 %gep_int154, %gep_array155*/
		main_698_gep156 = main_signed_add_32_1;
end
always @(*) begin
/* main: %698*/
/*   %gep156 = add i32 %gep_int154, %gep_array155*/
	main_698_gep156_reg = main_1_gep3_reg;
end
always @(*) begin
	/* main: %698*/
	/*   %701 = inttoptr i32 %gep156 to i16**/
		main_698_701 = main_698_gep156;
end
always @(posedge clk) begin
	/* main: %698*/
	/*   %701 = inttoptr i32 %gep156 to i16**/
	if ((cur_state == LEGUP_F_main_BB__698_258)) begin
		main_698_701_reg <= main_698_701;
		if (start == 1'b0 && ^(main_698_701) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_698_701_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %698*/
	/*   %702 = load i16* %701, align 2, !tbaa !1*/
		main_698_702 = outData_out_a;
end
always @(posedge clk) begin
	/* main: %698*/
	/*   %702 = load i16* %701, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__698_259)) begin
		main_698_702_reg <= main_698_702;
		if (start == 1'b0 && ^(main_698_702) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_698_702_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %698*/
	/*   %703 = icmp eq i16 %700, %702*/
		main_698_703 = (main_698_700 == main_698_702);
end
always @(posedge clk) begin
	/* main: %698*/
	/*   %703 = icmp eq i16 %700, %702*/
	if ((cur_state == LEGUP_F_main_BB__698_259)) begin
		main_698_703_reg <= main_698_703;
		if (start == 1'b0 && ^(main_698_703) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_698_703_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %698*/
	/*   %704 = zext i1 %703 to i32*/
		main_698_704 = main_698_703;
end
always @(posedge clk) begin
	/* main: %698*/
	/*   %704 = zext i1 %703 to i32*/
	if ((cur_state == LEGUP_F_main_BB__698_259)) begin
		main_698_704_reg <= main_698_704;
		if (start == 1'b0 && ^(main_698_704) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_698_704_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %698*/
	/*   %705 = add nsw i32 %704, %main_result.04*/
		main_698_705 = main_signed_add_32_0;
end
always @(posedge clk) begin
	/* main: %698*/
	/*   %705 = add nsw i32 %704, %main_result.04*/
	if ((cur_state == LEGUP_F_main_BB__698_259)) begin
		main_698_705_reg <= main_698_705;
		if (start == 1'b0 && ^(main_698_705) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_698_705_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %698*/
	/*   %706 = add nsw i32 %i.13, 1*/
		main_698_706 = main_signed_add_32_0;
end
always @(posedge clk) begin
	/* main: %698*/
	/*   %706 = add nsw i32 %i.13, 1*/
	if ((cur_state == LEGUP_F_main_BB__698_257)) begin
		main_698_706_reg <= main_698_706;
		if (start == 1'b0 && ^(main_698_706) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_698_706_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %698*/
	/*   %exitcond = icmp eq i32 %706, 160*/
		main_698_exitcond = (main_698_706 == 32'd160);
end
always @(posedge clk) begin
	/* main: %698*/
	/*   %exitcond = icmp eq i32 %706, 160*/
	if ((cur_state == LEGUP_F_main_BB__698_257)) begin
		main_698_exitcond_reg <= main_698_exitcond;
		if (start == 1'b0 && ^(main_698_exitcond) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_698_exitcond_reg"); $finish; end
	end
end
always @(*) begin
	bitoff_address_a = 1'd0;
	/* main: %33*/
	/*   %36 = load i8* %35, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__33_18)) begin
		bitoff_address_a = (main_33_35 >>> 3'd0);
	end
	/* main: %39*/
	/*   %43 = load i8* %42, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__39_20)) begin
		bitoff_address_a = (main_39_42 >>> 3'd0);
	end
	/* main: %49*/
	/*   %53 = load i8* %52, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__49_23)) begin
		bitoff_address_a = (main_49_52 >>> 3'd0);
	end
	/* main: %56*/
	/*   %59 = load i8* %58, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__56_25)) begin
		bitoff_address_a = (main_56_58 >>> 3'd0);
	end
	/* main: %261*/
	/*   %264 = load i8* %263, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__261_67)) begin
		bitoff_address_a = (main_261_263 >>> 3'd0);
	end
	/* main: %267*/
	/*   %271 = load i8* %270, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__267_69)) begin
		bitoff_address_a = (main_267_270 >>> 3'd0);
	end
	/* main: %277*/
	/*   %281 = load i8* %280, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__277_72)) begin
		bitoff_address_a = (main_277_280 >>> 3'd0);
	end
	/* main: %284*/
	/*   %287 = load i8* %286, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__284_74)) begin
		bitoff_address_a = (main_284_286 >>> 3'd0);
	end
end
always @(*) begin
	bitoff_write_enable_a = 1'd0;
	/* main: %33*/
	/*   %36 = load i8* %35, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__33_18)) begin
		bitoff_write_enable_a = 1'd0;
	end
	/* main: %39*/
	/*   %43 = load i8* %42, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__39_20)) begin
		bitoff_write_enable_a = 1'd0;
	end
	/* main: %49*/
	/*   %53 = load i8* %52, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__49_23)) begin
		bitoff_write_enable_a = 1'd0;
	end
	/* main: %56*/
	/*   %59 = load i8* %58, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__56_25)) begin
		bitoff_write_enable_a = 1'd0;
	end
	/* main: %261*/
	/*   %264 = load i8* %263, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__261_67)) begin
		bitoff_write_enable_a = 1'd0;
	end
	/* main: %267*/
	/*   %271 = load i8* %270, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__267_69)) begin
		bitoff_write_enable_a = 1'd0;
	end
	/* main: %277*/
	/*   %281 = load i8* %280, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__277_72)) begin
		bitoff_write_enable_a = 1'd0;
	end
	/* main: %284*/
	/*   %287 = load i8* %286, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__284_74)) begin
		bitoff_write_enable_a = 1'd0;
	end
end
always @(*) begin
	inData_address_a = 1'd0;
	/* main: %1*/
	/*   %3 = load i16* %2, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_3)) begin
		inData_address_a = (main_1_2 >>> 3'd1);
	end
end
always @(*) begin
	inData_write_enable_a = 1'd0;
	/* main: %1*/
	/*   %3 = load i16* %2, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_3)) begin
		inData_write_enable_a = 1'd0;
	end
end
always @(*) begin
	outData_address_a = 1'd0;
	/* main: %698*/
	/*   %702 = load i16* %701, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__698_258)) begin
		outData_address_a = (main_698_701 >>> 3'd1);
	end
end
always @(*) begin
	outData_write_enable_a = 1'd0;
	/* main: %698*/
	/*   %702 = load i16* %701, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__698_258)) begin
		outData_write_enable_a = 1'd0;
	end
end
always @(*) begin
	main_0_Pi_address_a = 1'd0;
	/* main: %gsm_norm.exit.i*/
	/*   store i16 %293, i16* %325, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_gsm_normexiti_83)) begin
		main_0_Pi_address_a = (main_gsm_normexiti_325_reg >>> 3'd1);
	end
	/* main: %gsm_norm.exit.i*/
	/*   store i16 %296, i16* %326, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_gsm_normexiti_84)) begin
		main_0_Pi_address_a = (main_gsm_normexiti_326_reg >>> 3'd1);
	end
	/* main: %gsm_norm.exit.i*/
	/*   store i16 %299, i16* %327, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_gsm_normexiti_85)) begin
		main_0_Pi_address_a = (main_gsm_normexiti_327_reg >>> 3'd1);
	end
	/* main: %gsm_norm.exit.i*/
	/*   store i16 %302, i16* %328, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_gsm_normexiti_86)) begin
		main_0_Pi_address_a = (main_gsm_normexiti_328_reg >>> 3'd1);
	end
	/* main: %gsm_norm.exit.i*/
	/*   store i16 %305, i16* %329, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_gsm_normexiti_87)) begin
		main_0_Pi_address_a = (main_gsm_normexiti_329_reg >>> 3'd1);
	end
	/* main: %gsm_norm.exit.i*/
	/*   store i16 %308, i16* %330, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_gsm_normexiti_88)) begin
		main_0_Pi_address_a = (main_gsm_normexiti_330_reg >>> 3'd1);
	end
	/* main: %gsm_norm.exit.i*/
	/*   store i16 %311, i16* %331, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_gsm_normexiti_89)) begin
		main_0_Pi_address_a = (main_gsm_normexiti_331_reg >>> 3'd1);
	end
	/* main: %gsm_norm.exit.i*/
	/*   store i16 %314, i16* %332, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_gsm_normexiti_90)) begin
		main_0_Pi_address_a = (main_gsm_normexiti_332_reg >>> 3'd1);
	end
	/* main: %gsm_norm.exit.i*/
	/*   store i16 %317, i16* %333, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_gsm_normexiti_91)) begin
		main_0_Pi_address_a = (main_gsm_normexiti_333_reg >>> 3'd1);
	end
	/* main: %gsm_abs.exit.i9*/
	/*   %341 = load i16* %325, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_gsm_absexiti9_95)) begin
		main_0_Pi_address_a = (main_gsm_normexiti_325_reg >>> 3'd1);
	end
	/* main: %gsm_div.exit.i*/
	/*   %434 = load i16* %326, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_gsm_divexiti_129)) begin
		main_0_Pi_address_a = (main_gsm_normexiti_326_reg >>> 3'd1);
	end
	/* main: %441*/
	/*   %442 = load i16* %326, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__441_134)) begin
		main_0_Pi_address_a = (main_gsm_normexiti_326_reg >>> 3'd1);
	end
	/* main: %gsm_mult_r.exit11.i*/
	/*   %452 = load i16* %325, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_gsm_mult_rexit11i_138)) begin
		main_0_Pi_address_a = (main_gsm_normexiti_325_reg >>> 3'd1);
	end
	/* main: %gsm_add.exit8.i*/
	/*   store i16 %459, i16* %325, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_gsm_addexit8i_141)) begin
		main_0_Pi_address_a = (main_gsm_normexiti_325_reg >>> 3'd1);
	end
	/* main: %gsm_mult_r.exit6.i*/
	/*   %476 = load i16* %475, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_gsm_mult_rexit6i_150)) begin
		main_0_Pi_address_a = (main_gsm_mult_rexit6i_475 >>> 3'd1);
	end
	/* main: %gsm_add.exit3.i*/
	/*   store i16 %483, i16* %484, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_gsm_addexit3i_154)) begin
		main_0_Pi_address_a = (main_gsm_addexit3i_484 >>> 3'd1);
	end
	/* main: %._crit_edge43.i*/
	/*   %.pre.i15 = load i16* %326, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edge43i_165)) begin
		main_0_Pi_address_a = (main_gsm_normexiti_326_reg >>> 3'd1);
	end
end
always @(*) begin
	main_0_Pi_write_enable_a = 1'd0;
	/* main: %gsm_norm.exit.i*/
	/*   store i16 %293, i16* %325, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_gsm_normexiti_83)) begin
		main_0_Pi_write_enable_a = 1'd1;
	end
	/* main: %gsm_norm.exit.i*/
	/*   store i16 %296, i16* %326, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_gsm_normexiti_84)) begin
		main_0_Pi_write_enable_a = 1'd1;
	end
	/* main: %gsm_norm.exit.i*/
	/*   store i16 %299, i16* %327, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_gsm_normexiti_85)) begin
		main_0_Pi_write_enable_a = 1'd1;
	end
	/* main: %gsm_norm.exit.i*/
	/*   store i16 %302, i16* %328, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_gsm_normexiti_86)) begin
		main_0_Pi_write_enable_a = 1'd1;
	end
	/* main: %gsm_norm.exit.i*/
	/*   store i16 %305, i16* %329, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_gsm_normexiti_87)) begin
		main_0_Pi_write_enable_a = 1'd1;
	end
	/* main: %gsm_norm.exit.i*/
	/*   store i16 %308, i16* %330, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_gsm_normexiti_88)) begin
		main_0_Pi_write_enable_a = 1'd1;
	end
	/* main: %gsm_norm.exit.i*/
	/*   store i16 %311, i16* %331, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_gsm_normexiti_89)) begin
		main_0_Pi_write_enable_a = 1'd1;
	end
	/* main: %gsm_norm.exit.i*/
	/*   store i16 %314, i16* %332, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_gsm_normexiti_90)) begin
		main_0_Pi_write_enable_a = 1'd1;
	end
	/* main: %gsm_norm.exit.i*/
	/*   store i16 %317, i16* %333, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_gsm_normexiti_91)) begin
		main_0_Pi_write_enable_a = 1'd1;
	end
	/* main: %gsm_abs.exit.i9*/
	/*   %341 = load i16* %325, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_gsm_absexiti9_95)) begin
		main_0_Pi_write_enable_a = 1'd0;
	end
	/* main: %gsm_div.exit.i*/
	/*   %434 = load i16* %326, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_gsm_divexiti_129)) begin
		main_0_Pi_write_enable_a = 1'd0;
	end
	/* main: %441*/
	/*   %442 = load i16* %326, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__441_134)) begin
		main_0_Pi_write_enable_a = 1'd0;
	end
	/* main: %gsm_mult_r.exit11.i*/
	/*   %452 = load i16* %325, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_gsm_mult_rexit11i_138)) begin
		main_0_Pi_write_enable_a = 1'd0;
	end
	/* main: %gsm_add.exit8.i*/
	/*   store i16 %459, i16* %325, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_gsm_addexit8i_141)) begin
		main_0_Pi_write_enable_a = 1'd1;
	end
	/* main: %gsm_mult_r.exit6.i*/
	/*   %476 = load i16* %475, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_gsm_mult_rexit6i_150)) begin
		main_0_Pi_write_enable_a = 1'd0;
	end
	/* main: %gsm_add.exit3.i*/
	/*   store i16 %483, i16* %484, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_gsm_addexit3i_154)) begin
		main_0_Pi_write_enable_a = 1'd1;
	end
	/* main: %._crit_edge43.i*/
	/*   %.pre.i15 = load i16* %326, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edge43i_165)) begin
		main_0_Pi_write_enable_a = 1'd0;
	end
end
always @(*) begin
	main_0_Pi_in_a = 1'd0;
	/* main: %gsm_norm.exit.i*/
	/*   store i16 %293, i16* %325, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_gsm_normexiti_83)) begin
		main_0_Pi_in_a = main_gsm_normexiti_293_reg;
	end
	/* main: %gsm_norm.exit.i*/
	/*   store i16 %296, i16* %326, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_gsm_normexiti_84)) begin
		main_0_Pi_in_a = main_gsm_normexiti_296_reg;
	end
	/* main: %gsm_norm.exit.i*/
	/*   store i16 %299, i16* %327, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_gsm_normexiti_85)) begin
		main_0_Pi_in_a = main_gsm_normexiti_299_reg;
	end
	/* main: %gsm_norm.exit.i*/
	/*   store i16 %302, i16* %328, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_gsm_normexiti_86)) begin
		main_0_Pi_in_a = main_gsm_normexiti_302_reg;
	end
	/* main: %gsm_norm.exit.i*/
	/*   store i16 %305, i16* %329, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_gsm_normexiti_87)) begin
		main_0_Pi_in_a = main_gsm_normexiti_305_reg;
	end
	/* main: %gsm_norm.exit.i*/
	/*   store i16 %308, i16* %330, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_gsm_normexiti_88)) begin
		main_0_Pi_in_a = main_gsm_normexiti_308_reg;
	end
	/* main: %gsm_norm.exit.i*/
	/*   store i16 %311, i16* %331, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_gsm_normexiti_89)) begin
		main_0_Pi_in_a = main_gsm_normexiti_311_reg;
	end
	/* main: %gsm_norm.exit.i*/
	/*   store i16 %314, i16* %332, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_gsm_normexiti_90)) begin
		main_0_Pi_in_a = main_gsm_normexiti_314_reg;
	end
	/* main: %gsm_norm.exit.i*/
	/*   store i16 %317, i16* %333, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_gsm_normexiti_91)) begin
		main_0_Pi_in_a = main_gsm_normexiti_317_reg;
	end
	/* main: %gsm_add.exit8.i*/
	/*   store i16 %459, i16* %325, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_gsm_addexit8i_141)) begin
		main_0_Pi_in_a = main_gsm_addexit8i_459_reg;
	end
	/* main: %gsm_add.exit3.i*/
	/*   store i16 %483, i16* %484, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_gsm_addexit3i_154)) begin
		main_0_Pi_in_a = main_gsm_addexit3i_483_reg;
	end
end
always @(*) begin
	main_0_Ki_address_a = 1'd0;
	/* main: %gsm_norm.exit.i*/
	/*   store i16 %296, i16* %318, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_gsm_normexiti_76)) begin
		main_0_Ki_address_a = (main_gsm_normexiti_318 >>> 3'd1);
	end
	/* main: %gsm_norm.exit.i*/
	/*   store i16 %299, i16* %319, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_gsm_normexiti_77)) begin
		main_0_Ki_address_a = (main_gsm_normexiti_319_reg >>> 3'd1);
	end
	/* main: %gsm_norm.exit.i*/
	/*   store i16 %302, i16* %320, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_gsm_normexiti_78)) begin
		main_0_Ki_address_a = (main_gsm_normexiti_320_reg >>> 3'd1);
	end
	/* main: %gsm_norm.exit.i*/
	/*   store i16 %305, i16* %321, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_gsm_normexiti_79)) begin
		main_0_Ki_address_a = (main_gsm_normexiti_321_reg >>> 3'd1);
	end
	/* main: %gsm_norm.exit.i*/
	/*   store i16 %308, i16* %322, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_gsm_normexiti_80)) begin
		main_0_Ki_address_a = (main_gsm_normexiti_322_reg >>> 3'd1);
	end
	/* main: %gsm_norm.exit.i*/
	/*   store i16 %311, i16* %323, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_gsm_normexiti_81)) begin
		main_0_Ki_address_a = (main_gsm_normexiti_323_reg >>> 3'd1);
	end
	/* main: %gsm_norm.exit.i*/
	/*   store i16 %314, i16* %324, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_gsm_normexiti_82)) begin
		main_0_Ki_address_a = (main_gsm_normexiti_324_reg >>> 3'd1);
	end
	/* main: %.lr.ph27.i*/
	/*   %463 = load i16* %462, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph27i_144)) begin
		main_0_Ki_address_a = (main_lrph27i_462 >>> 3'd1);
	end
	/* main: %gsm_add.exit.i*/
	/*   store i16 %500, i16* %462, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_gsm_addexiti_162)) begin
		main_0_Ki_address_a = (main_lrph27i_462_reg >>> 3'd1);
	end
end
always @(*) begin
	main_0_Ki_write_enable_a = 1'd0;
	/* main: %gsm_norm.exit.i*/
	/*   store i16 %296, i16* %318, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_gsm_normexiti_76)) begin
		main_0_Ki_write_enable_a = 1'd1;
	end
	/* main: %gsm_norm.exit.i*/
	/*   store i16 %299, i16* %319, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_gsm_normexiti_77)) begin
		main_0_Ki_write_enable_a = 1'd1;
	end
	/* main: %gsm_norm.exit.i*/
	/*   store i16 %302, i16* %320, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_gsm_normexiti_78)) begin
		main_0_Ki_write_enable_a = 1'd1;
	end
	/* main: %gsm_norm.exit.i*/
	/*   store i16 %305, i16* %321, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_gsm_normexiti_79)) begin
		main_0_Ki_write_enable_a = 1'd1;
	end
	/* main: %gsm_norm.exit.i*/
	/*   store i16 %308, i16* %322, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_gsm_normexiti_80)) begin
		main_0_Ki_write_enable_a = 1'd1;
	end
	/* main: %gsm_norm.exit.i*/
	/*   store i16 %311, i16* %323, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_gsm_normexiti_81)) begin
		main_0_Ki_write_enable_a = 1'd1;
	end
	/* main: %gsm_norm.exit.i*/
	/*   store i16 %314, i16* %324, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_gsm_normexiti_82)) begin
		main_0_Ki_write_enable_a = 1'd1;
	end
	/* main: %.lr.ph27.i*/
	/*   %463 = load i16* %462, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph27i_144)) begin
		main_0_Ki_write_enable_a = 1'd0;
	end
	/* main: %gsm_add.exit.i*/
	/*   store i16 %500, i16* %462, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_gsm_addexiti_162)) begin
		main_0_Ki_write_enable_a = 1'd1;
	end
end
always @(*) begin
	main_0_Ki_in_a = 1'd0;
	/* main: %gsm_norm.exit.i*/
	/*   store i16 %296, i16* %318, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_gsm_normexiti_76)) begin
		main_0_Ki_in_a = main_gsm_normexiti_296;
	end
	/* main: %gsm_norm.exit.i*/
	/*   store i16 %299, i16* %319, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_gsm_normexiti_77)) begin
		main_0_Ki_in_a = main_gsm_normexiti_299_reg;
	end
	/* main: %gsm_norm.exit.i*/
	/*   store i16 %302, i16* %320, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_gsm_normexiti_78)) begin
		main_0_Ki_in_a = main_gsm_normexiti_302_reg;
	end
	/* main: %gsm_norm.exit.i*/
	/*   store i16 %305, i16* %321, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_gsm_normexiti_79)) begin
		main_0_Ki_in_a = main_gsm_normexiti_305_reg;
	end
	/* main: %gsm_norm.exit.i*/
	/*   store i16 %308, i16* %322, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_gsm_normexiti_80)) begin
		main_0_Ki_in_a = main_gsm_normexiti_308_reg;
	end
	/* main: %gsm_norm.exit.i*/
	/*   store i16 %311, i16* %323, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_gsm_normexiti_81)) begin
		main_0_Ki_in_a = main_gsm_normexiti_311_reg;
	end
	/* main: %gsm_norm.exit.i*/
	/*   store i16 %314, i16* %324, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_gsm_normexiti_82)) begin
		main_0_Ki_in_a = main_gsm_normexiti_314_reg;
	end
	/* main: %gsm_add.exit.i*/
	/*   store i16 %500, i16* %462, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_gsm_addexiti_162)) begin
		main_0_Ki_in_a = main_gsm_addexiti_500_reg;
	end
end
always @(*) begin
	main_0_so_address_a = 1'd0;
	/* main: %1*/
	/*   store i16 %3, i16* %4, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_4)) begin
		main_0_so_address_a = (main_1_4_reg >>> 3'd1);
	end
	/* main: %8*/
	/*   %10 = load i16* %9, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__8_8)) begin
		main_0_so_address_a = (main_8_9 >>> 3'd1);
	end
	/* main: %.preheader6.split.us.i*/
	/*   %72 = load i16* %71, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader6splitusi_30)) begin
		main_0_so_address_a = (main_preheader6splitusi_71 >>> 3'd1);
	end
	/* main: %gsm_mult_r.exit.us.i*/
	/*   store i16 %.0.i.us.i, i16* %71, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_gsm_mult_rexitusi_34)) begin
		main_0_so_address_a = (main_preheader6splitusi_71_reg >>> 3'd1);
	end
	/* main: %gsm_mult_r.exit.i*/
	/*   %83 = load i16* %82, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_gsm_mult_rexiti_37)) begin
		main_0_so_address_a = (main_gsm_mult_rexiti_82 >>> 3'd1);
	end
	/* main: %gsm_mult_r.exit.i*/
	/*   store i16 %89, i16* %82, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_gsm_mult_rexiti_39)) begin
		main_0_so_address_a = (main_gsm_mult_rexiti_82_reg >>> 3'd1);
	end
	/* main: %.thread.i*/
	/*   %92 = load i16* %7, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_threadi_41)) begin
		main_0_so_address_a = (main_6_7_reg >>> 3'd1);
	end
	/* main: %.thread.i*/
	/*   %101 = load i16* %100, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_threadi_42)) begin
		main_0_so_address_a = (main_threadi_100_reg >>> 3'd1);
	end
	/* main: %.thread.i*/
	/*   %119 = load i16* %118, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_threadi_43)) begin
		main_0_so_address_a = (main_threadi_118_reg >>> 3'd1);
	end
	/* main: %.thread.i*/
	/*   %145 = load i16* %144, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_threadi_44)) begin
		main_0_so_address_a = (main_threadi_144_reg >>> 3'd1);
	end
	/* main: %187*/
	/*   %199 = load i16* %198, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__187_48)) begin
		main_0_so_address_a = (main_187_198 >>> 3'd1);
	end
	/* main: %187*/
	/*   %212 = load i16* %211, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__187_49)) begin
		main_0_so_address_a = (main_187_211_reg >>> 3'd1);
	end
	/* main: %187*/
	/*   %222 = load i16* %221, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__187_50)) begin
		main_0_so_address_a = (main_187_221_reg >>> 3'd1);
	end
	/* main: %187*/
	/*   %232 = load i16* %231, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__187_51)) begin
		main_0_so_address_a = (main_187_231_reg >>> 3'd1);
	end
	/* main: %.preheader.i*/
	/*   store i16 %246, i16* %.08.i, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_54)) begin
		main_0_so_address_a = (main_preheaderi_08i_reg >>> 3'd1);
	end
	/* main: %._crit_edge.i*/
	/*   %.pre.i = load i16* %243, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_56)) begin
		main_0_so_address_a = (main_preheaderi_243_reg >>> 3'd1);
	end
	/* main: %698*/
	/*   %700 = load i16* %699, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__698_258)) begin
		main_0_so_address_a = (main_698_699 >>> 3'd1);
	end
end
always @(*) begin
	main_0_so_write_enable_a = 1'd0;
	/* main: %1*/
	/*   store i16 %3, i16* %4, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_4)) begin
		main_0_so_write_enable_a = 1'd1;
	end
	/* main: %8*/
	/*   %10 = load i16* %9, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__8_8)) begin
		main_0_so_write_enable_a = 1'd0;
	end
	/* main: %.preheader6.split.us.i*/
	/*   %72 = load i16* %71, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader6splitusi_30)) begin
		main_0_so_write_enable_a = 1'd0;
	end
	/* main: %gsm_mult_r.exit.us.i*/
	/*   store i16 %.0.i.us.i, i16* %71, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_gsm_mult_rexitusi_34)) begin
		main_0_so_write_enable_a = 1'd1;
	end
	/* main: %gsm_mult_r.exit.i*/
	/*   %83 = load i16* %82, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_gsm_mult_rexiti_37)) begin
		main_0_so_write_enable_a = 1'd0;
	end
	/* main: %gsm_mult_r.exit.i*/
	/*   store i16 %89, i16* %82, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_gsm_mult_rexiti_39)) begin
		main_0_so_write_enable_a = 1'd1;
	end
	/* main: %.thread.i*/
	/*   %92 = load i16* %7, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_threadi_41)) begin
		main_0_so_write_enable_a = 1'd0;
	end
	/* main: %.thread.i*/
	/*   %101 = load i16* %100, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_threadi_42)) begin
		main_0_so_write_enable_a = 1'd0;
	end
	/* main: %.thread.i*/
	/*   %119 = load i16* %118, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_threadi_43)) begin
		main_0_so_write_enable_a = 1'd0;
	end
	/* main: %.thread.i*/
	/*   %145 = load i16* %144, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_threadi_44)) begin
		main_0_so_write_enable_a = 1'd0;
	end
	/* main: %187*/
	/*   %199 = load i16* %198, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__187_48)) begin
		main_0_so_write_enable_a = 1'd0;
	end
	/* main: %187*/
	/*   %212 = load i16* %211, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__187_49)) begin
		main_0_so_write_enable_a = 1'd0;
	end
	/* main: %187*/
	/*   %222 = load i16* %221, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__187_50)) begin
		main_0_so_write_enable_a = 1'd0;
	end
	/* main: %187*/
	/*   %232 = load i16* %231, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__187_51)) begin
		main_0_so_write_enable_a = 1'd0;
	end
	/* main: %.preheader.i*/
	/*   store i16 %246, i16* %.08.i, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_54)) begin
		main_0_so_write_enable_a = 1'd1;
	end
	/* main: %._crit_edge.i*/
	/*   %.pre.i = load i16* %243, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_56)) begin
		main_0_so_write_enable_a = 1'd0;
	end
	/* main: %698*/
	/*   %700 = load i16* %699, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__698_258)) begin
		main_0_so_write_enable_a = 1'd0;
	end
end
always @(*) begin
	main_0_so_in_a = 1'd0;
	/* main: %1*/
	/*   store i16 %3, i16* %4, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_4)) begin
		main_0_so_in_a = main_1_3;
	end
	/* main: %gsm_mult_r.exit.us.i*/
	/*   store i16 %.0.i.us.i, i16* %71, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_gsm_mult_rexitusi_34)) begin
		main_0_so_in_a = main_gsm_mult_rexitusi_0iusi_reg;
	end
	/* main: %gsm_mult_r.exit.i*/
	/*   store i16 %89, i16* %82, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_gsm_mult_rexiti_39)) begin
		main_0_so_in_a = main_gsm_mult_rexiti_89;
	end
	/* main: %.preheader.i*/
	/*   store i16 %246, i16* %.08.i, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_54)) begin
		main_0_so_in_a = main_preheaderi_246;
	end
end
always @(*) begin
	main_0_so_address_b = 1'd0;
	/* main: %.thread.i*/
	/*   %96 = load i16* %95, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_threadi_41)) begin
		main_0_so_address_b = (main_threadi_95 >>> 3'd1);
	end
	/* main: %.thread.i*/
	/*   %109 = load i16* %108, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_threadi_42)) begin
		main_0_so_address_b = (main_threadi_108_reg >>> 3'd1);
	end
	/* main: %.thread.i*/
	/*   %131 = load i16* %130, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_threadi_43)) begin
		main_0_so_address_b = (main_threadi_130_reg >>> 3'd1);
	end
	/* main: %.thread.i*/
	/*   %161 = load i16* %160, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_threadi_44)) begin
		main_0_so_address_b = (main_threadi_160_reg >>> 3'd1);
	end
	/* main: %187*/
	/*   %207 = load i16* %206, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__187_48)) begin
		main_0_so_address_b = (main_187_206 >>> 3'd1);
	end
	/* main: %187*/
	/*   %217 = load i16* %216, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__187_49)) begin
		main_0_so_address_b = (main_187_216_reg >>> 3'd1);
	end
	/* main: %187*/
	/*   %227 = load i16* %226, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__187_50)) begin
		main_0_so_address_b = (main_187_226_reg >>> 3'd1);
	end
	/* main: %187*/
	/*   %237 = load i16* %236, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__187_51)) begin
		main_0_so_address_b = (main_187_236_reg >>> 3'd1);
	end
end
always @(*) begin
	main_0_so_write_enable_b = 1'd0;
	/* main: %.thread.i*/
	/*   %96 = load i16* %95, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_threadi_41)) begin
		main_0_so_write_enable_b = 1'd0;
	end
	/* main: %.thread.i*/
	/*   %109 = load i16* %108, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_threadi_42)) begin
		main_0_so_write_enable_b = 1'd0;
	end
	/* main: %.thread.i*/
	/*   %131 = load i16* %130, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_threadi_43)) begin
		main_0_so_write_enable_b = 1'd0;
	end
	/* main: %.thread.i*/
	/*   %161 = load i16* %160, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_threadi_44)) begin
		main_0_so_write_enable_b = 1'd0;
	end
	/* main: %187*/
	/*   %207 = load i16* %206, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__187_48)) begin
		main_0_so_write_enable_b = 1'd0;
	end
	/* main: %187*/
	/*   %217 = load i16* %216, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__187_49)) begin
		main_0_so_write_enable_b = 1'd0;
	end
	/* main: %187*/
	/*   %227 = load i16* %226, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__187_50)) begin
		main_0_so_write_enable_b = 1'd0;
	end
	/* main: %187*/
	/*   %237 = load i16* %236, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__187_51)) begin
		main_0_so_write_enable_b = 1'd0;
	end
end
always @(posedge clk) begin
	/* main: %.preheader.i5*/
	/*   call void @legup_memset_2_i64(i8* %250, i8 0, i64 16)*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi5_59)) begin
		legup_memset_2_i64_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_memset_2_i64_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_60)) begin
		legup_memset_2_i64_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_memset_2_i64_start"); $finish; end
	end
end
always @(posedge clk) begin
	/* main: %.preheader.i5*/
	/*   call void @legup_memset_2_i64(i8* %250, i8 0, i64 16)*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi5_59)) begin
		legup_memset_2_i64_arg_m <= main_preheaderi5_250;
		if (start == 1'b0 && ^(main_preheaderi5_250) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_memset_2_i64_arg_m"); $finish; end
	end
end
always @(posedge clk) begin
	/* main: %.preheader.i5*/
	/*   call void @legup_memset_2_i64(i8* %250, i8 0, i64 16)*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi5_59)) begin
		legup_memset_2_i64_arg_c1 <= 8'd0;
		if (start == 1'b0 && ^(8'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_memset_2_i64_arg_c1"); $finish; end
	end
end
always @(posedge clk) begin
	/* main: %.preheader.i5*/
	/*   call void @legup_memset_2_i64(i8* %250, i8 0, i64 16)*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi5_59)) begin
		legup_memset_2_i64_arg_n <= 64'd16;
		if (start == 1'b0 && ^(64'd16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_memset_2_i64_arg_n"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i5*/
	/*   call void @legup_memset_2_i64(i8* %250, i8 0, i64 16)*/
		legup_memset_2_i64_memory_controller_out_a = memory_controller_out_a;
end
always @(*) begin
	/* main: %.preheader.i5*/
	/*   call void @legup_memset_2_i64(i8* %250, i8 0, i64 16)*/
		legup_memset_2_i64_memory_controller_out_b = memory_controller_out_b;
end
always @(*) begin
	legup_memset_2_i64_memory_controller_waitrequest = memory_controller_waitrequest;
end
always @(*) begin
	legup_memset_2_i64_finish_final = legup_memset_2_i64_finish_reg;
end
always @(posedge clk) begin
	if ((reset | (cur_state == LEGUP_F_main_BB_preheaderi5_59))) begin
		legup_memset_2_i64_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_memset_2_i64_finish_reg"); $finish; end
	end
	if (legup_memset_2_i64_finish) begin
		legup_memset_2_i64_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to legup_memset_2_i64_finish_reg"); $finish; end
	end
end
always @(*) begin
	legup_function_call = 1'd0;
	/* main: %.preheader.i5*/
	/*   call void @legup_memset_2_i64(i8* %250, i8 0, i64 16)*/
	if ((cur_state == LEGUP_function_call_60)) begin
		legup_function_call = 1'd1;
	end
end
always @(*) begin
	/* main: %1*/
	/*   %5 = add nsw i32 %i.05, 1*/
	if ((cur_state == LEGUP_F_main_BB__1_2)) begin
		main_signed_add_32_0_op0 = main_1_i05_reg;
	end
	/* main: %1*/
	/*   %gep = add i32 %gep_int, %gep_array*/
	else if ((cur_state == LEGUP_F_main_BB__1_3)) begin
		main_signed_add_32_0_op0 = main_1_gep_int_reg;
	end
	/* main: %8*/
	/*   %gep7 = add i32 %gep_int5, %gep_array6*/
	else if ((cur_state == LEGUP_F_main_BB__8_8)) begin
		main_signed_add_32_0_op0 = main_8_gep_int5_reg;
	end
	/* main: %gsm_abs.exit.i*/
	/*   %17 = add nsw i32 %k.029.i, 1*/
	else if ((cur_state == LEGUP_F_main_BB_gsm_absexiti_11)) begin
		main_signed_add_32_0_op0 = main_8_k029i_reg;
	end
	/* main: %33*/
	/*   %gep10 = add i32 %gep_int9, %34*/
	else if ((cur_state == LEGUP_F_main_BB__33_18)) begin
		main_signed_add_32_0_op0 = main_33_gep_int9;
	end
	/* main: %33*/
	/*   %38 = add nsw i32 %37, -1*/
	else if ((cur_state == LEGUP_F_main_BB__33_19)) begin
		main_signed_add_32_0_op0 = main_33_37;
	end
	/* main: %39*/
	/*   %gep12 = add i32 %gep_int11, %41*/
	else if ((cur_state == LEGUP_F_main_BB__39_20)) begin
		main_signed_add_32_0_op0 = main_39_gep_int11;
	end
	/* main: %39*/
	/*   %45 = add nuw nsw i32 %44, 7*/
	else if ((cur_state == LEGUP_F_main_BB__39_21)) begin
		main_signed_add_32_0_op0 = main_39_44;
	end
	/* main: %49*/
	/*   %gep14 = add i32 %gep_int13, %51*/
	else if ((cur_state == LEGUP_F_main_BB__49_23)) begin
		main_signed_add_32_0_op0 = main_49_gep_int13;
	end
	/* main: %49*/
	/*   %55 = add nuw nsw i32 %54, 15*/
	else if ((cur_state == LEGUP_F_main_BB__49_24)) begin
		main_signed_add_32_0_op0 = main_49_54;
	end
	/* main: %56*/
	/*   %gep16 = add i32 %gep_int15, %57*/
	else if ((cur_state == LEGUP_F_main_BB__56_25)) begin
		main_signed_add_32_0_op0 = main_56_gep_int15;
	end
	/* main: %56*/
	/*   %61 = add nuw nsw i32 %60, 23*/
	else if ((cur_state == LEGUP_F_main_BB__56_26)) begin
		main_signed_add_32_0_op0 = main_56_60;
	end
	/* main: %62*/
	/*   %sext.off.i = add i32 %sext.i, -1*/
	else if ((cur_state == LEGUP_F_main_BB__62_27)) begin
		main_signed_add_32_0_op0 = main_62_sexti;
	end
	/* main: %.preheader6.i*/
	/*   %66 = add nsw i32 %phitmp.i, -1*/
	else if ((cur_state == LEGUP_F_main_BB_preheader6i_28)) begin
		main_signed_add_32_0_op0 = main_62_phitmpi_reg;
	end
	/* main: %.preheader6.split.us.i*/
	/*   %gep19 = add i32 %gep_int17, %gep_array18*/
	else if ((cur_state == LEGUP_F_main_BB_preheader6splitusi_30)) begin
		main_signed_add_32_0_op0 = main_preheader6splitusi_gep_int17_reg;
	end
	/* main: %74*/
	/*   %77 = add nsw i32 %75, 16384*/
	else if ((cur_state == LEGUP_F_main_BB__74_32)) begin
		main_signed_add_32_0_op0 = main_74_75;
	end
	/* main: %74*/
	/*   %78 = add i32 %77, %76*/
	else if ((cur_state == LEGUP_F_main_BB__74_33)) begin
		main_signed_add_32_0_op0 = main_74_77_reg;
	end
	/* main: %gsm_mult_r.exit.us.i*/
	/*   %81 = add nsw i32 %k.128.us.i, 1*/
	else if ((cur_state == LEGUP_F_main_BB_gsm_mult_rexitusi_34)) begin
		main_signed_add_32_0_op0 = main_preheader6splitusi_k128usi_reg;
	end
	/* main: %gsm_mult_r.exit.i*/
	/*   %90 = add nsw i32 %k.128.i, 1*/
	else if ((cur_state == LEGUP_F_main_BB_gsm_mult_rexiti_36)) begin
		main_signed_add_32_0_op0 = main_gsm_mult_rexiti_k128i_reg;
	end
	/* main: %gsm_mult_r.exit.i*/
	/*   %gep22 = add i32 %gep_int20, %gep_array21*/
	else if ((cur_state == LEGUP_F_main_BB_gsm_mult_rexiti_37)) begin
		main_signed_add_32_0_op0 = main_gsm_mult_rexiti_gep_int20_reg;
	end
	/* main: %gsm_mult_r.exit.i*/
	/*   %86 = add nsw i32 %84, 16384*/
	else if ((cur_state == LEGUP_F_main_BB_gsm_mult_rexiti_38)) begin
		main_signed_add_32_0_op0 = main_gsm_mult_rexiti_84;
	end
	/* main: %gsm_mult_r.exit.i*/
	/*   %87 = add i32 %86, %85*/
	else if ((cur_state == LEGUP_F_main_BB_gsm_mult_rexiti_39)) begin
		main_signed_add_32_0_op0 = main_gsm_mult_rexiti_86_reg;
	end
	/* main: %.thread.i*/
	/*   %gep24 = add i32 %gep_int23, 2*/
	else if ((cur_state == LEGUP_F_main_BB_threadi_41)) begin
		main_signed_add_32_0_op0 = main_threadi_gep_int23;
	end
	/* main: %.thread.i*/
	/*   %99 = add nuw nsw i32 %98, %94*/
	else if ((cur_state == LEGUP_F_main_BB_threadi_43)) begin
		main_signed_add_32_0_op0 = main_threadi_98;
	end
	/* main: %.thread.i*/
	/*   %104 = add nuw nsw i32 %103, %99*/
	else if ((cur_state == LEGUP_F_main_BB_threadi_44)) begin
		main_signed_add_32_0_op0 = main_threadi_103;
	end
	/* main: %.thread.i*/
	/*   %122 = add nuw nsw i32 %121, %112*/
	else if ((cur_state == LEGUP_F_main_BB_threadi_45)) begin
		main_signed_add_32_0_op0 = main_threadi_121;
	end
	/* main: %.thread.i*/
	/*   %148 = add nuw nsw i32 %147, %134*/
	else if ((cur_state == LEGUP_F_main_BB_threadi_46)) begin
		main_signed_add_32_0_op0 = main_threadi_147;
	end
	/* main: %187*/
	/*   %gep38 = add i32 %gep_int37, 2*/
	else if ((cur_state == LEGUP_F_main_BB__187_48)) begin
		main_signed_add_32_0_op0 = main_187_gep_int37;
	end
	/* main: %187*/
	/*   %202 = add nsw i32 %201, %197*/
	else if ((cur_state == LEGUP_F_main_BB__187_50)) begin
		main_signed_add_32_0_op0 = main_187_201;
	end
	/* main: %187*/
	/*   %215 = add nsw i32 %214, %194*/
	else if ((cur_state == LEGUP_F_main_BB__187_51)) begin
		main_signed_add_32_0_op0 = main_187_214;
	end
	/* main: %187*/
	/*   %225 = add nsw i32 %224, %192*/
	else if ((cur_state == LEGUP_F_main_BB__187_52)) begin
		main_signed_add_32_0_op0 = main_187_224;
	end
	/* main: %187*/
	/*   %235 = add nsw i32 %234, %190*/
	else if ((cur_state == LEGUP_F_main_BB__187_53)) begin
		main_signed_add_32_0_op0 = main_187_234;
	end
	/* main: %.preheader.i*/
	/*   %gep54 = add i32 %gep_int53, 2*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderi_54)) begin
		main_signed_add_32_0_op0 = main_preheaderi_gep_int53;
	end
	/* main: %._crit_edge.i*/
	/*   %248 = add nsw i32 %k.47.i, -1*/
	else if ((cur_state == LEGUP_F_main_BB__crit_edgei_56)) begin
		main_signed_add_32_0_op0 = main_preheaderi_k47i_reg;
	end
	/* main: %261*/
	/*   %gep70 = add i32 %gep_int69, %262*/
	else if ((cur_state == LEGUP_F_main_BB__261_67)) begin
		main_signed_add_32_0_op0 = main_261_gep_int69;
	end
	/* main: %261*/
	/*   %266 = add nsw i32 %265, -1*/
	else if ((cur_state == LEGUP_F_main_BB__261_68)) begin
		main_signed_add_32_0_op0 = main_261_265;
	end
	/* main: %267*/
	/*   %gep72 = add i32 %gep_int71, %269*/
	else if ((cur_state == LEGUP_F_main_BB__267_69)) begin
		main_signed_add_32_0_op0 = main_267_gep_int71;
	end
	/* main: %267*/
	/*   %273 = add nuw nsw i32 %272, 7*/
	else if ((cur_state == LEGUP_F_main_BB__267_70)) begin
		main_signed_add_32_0_op0 = main_267_272;
	end
	/* main: %277*/
	/*   %gep74 = add i32 %gep_int73, %279*/
	else if ((cur_state == LEGUP_F_main_BB__277_72)) begin
		main_signed_add_32_0_op0 = main_277_gep_int73;
	end
	/* main: %277*/
	/*   %283 = add nuw nsw i32 %282, 15*/
	else if ((cur_state == LEGUP_F_main_BB__277_73)) begin
		main_signed_add_32_0_op0 = main_277_282;
	end
	/* main: %284*/
	/*   %gep76 = add i32 %gep_int75, %285*/
	else if ((cur_state == LEGUP_F_main_BB__284_74)) begin
		main_signed_add_32_0_op0 = main_284_gep_int75;
	end
	/* main: %284*/
	/*   %289 = add nuw nsw i32 %288, 23*/
	else if ((cur_state == LEGUP_F_main_BB__284_75)) begin
		main_signed_add_32_0_op0 = main_284_288;
	end
	/* main: %gsm_norm.exit.i*/
	/*   %gep78 = add i32 %gep_int77, 2*/
	else if ((cur_state == LEGUP_F_main_BB_gsm_normexiti_76)) begin
		main_signed_add_32_0_op0 = main_gsm_normexiti_gep_int77;
	end
	/* main: %.lr.ph.i*/
	/*   %gep109 = add i32 %gep_int108, 2*/
	else if ((cur_state == LEGUP_F_main_BB_lrphi_98)) begin
		main_signed_add_32_0_op0 = main_lrphi_gep_int108;
	end
	/* main: %445*/
	/*   %449 = add nsw i32 %447, 16384*/
	else if ((cur_state == LEGUP_F_main_BB__445_136)) begin
		main_signed_add_32_0_op0 = main_445_447;
	end
	/* main: %445*/
	/*   %450 = add i32 %449, %448*/
	else if ((cur_state == LEGUP_F_main_BB__445_137)) begin
		main_signed_add_32_0_op0 = main_445_449_reg;
	end
	/* main: %gsm_mult_r.exit11.i*/
	/*   %454 = add nsw i32 %453, %.0.i10.i*/
	else if ((cur_state == LEGUP_F_main_BB_gsm_mult_rexit11i_139)) begin
		main_signed_add_32_0_op0 = main_gsm_mult_rexit11i_453;
	end
	/* main: %.lr.ph27.i*/
	/*   %gep112 = add i32 %gep_int110, %gep_array111*/
	else if ((cur_state == LEGUP_F_main_BB_lrph27i_144)) begin
		main_signed_add_32_0_op0 = main_lrph27i_gep_int110_reg;
	end
	/* main: %467*/
	/*   %471 = add nsw i32 %469, 16384*/
	else if ((cur_state == LEGUP_F_main_BB__467_146)) begin
		main_signed_add_32_0_op0 = main_467_469;
	end
	/* main: %467*/
	/*   %472 = add i32 %471, %470*/
	else if ((cur_state == LEGUP_F_main_BB__467_147)) begin
		main_signed_add_32_0_op0 = main_467_471_reg;
	end
	/* main: %gsm_mult_r.exit6.i*/
	/*   %474 = add nsw i32 %m.026.i, 1*/
	else if ((cur_state == LEGUP_F_main_BB_gsm_mult_rexit6i_148)) begin
		main_signed_add_32_0_op0 = main_lrph27i_m026i_reg;
	end
	/* main: %gsm_mult_r.exit6.i*/
	/*   %gep115 = add i32 %gep_int113, %gep_array114*/
	else if ((cur_state == LEGUP_F_main_BB_gsm_mult_rexit6i_150)) begin
		main_signed_add_32_0_op0 = main_gsm_mult_rexit6i_gep_int113_reg;
	end
	/* main: %gsm_mult_r.exit6.i*/
	/*   %478 = add nsw i32 %477, %.0.i5.i*/
	else if ((cur_state == LEGUP_F_main_BB_gsm_mult_rexit6i_151)) begin
		main_signed_add_32_0_op0 = main_gsm_mult_rexit6i_477;
	end
	/* main: %gsm_add.exit3.i*/
	/*   %gep118 = add i32 %gep_int116, %gep_array117*/
	else if ((cur_state == LEGUP_F_main_BB_gsm_addexit3i_154)) begin
		main_signed_add_32_0_op0 = main_gsm_addexit3i_gep_int116_reg;
	end
	/* main: %488*/
	/*   %491 = add nsw i32 %477, 16384*/
	else if ((cur_state == LEGUP_F_main_BB__488_158)) begin
		main_signed_add_32_0_op0 = main_gsm_mult_rexit6i_477_reg;
	end
	/* main: %488*/
	/*   %492 = add i32 %491, %490*/
	else if ((cur_state == LEGUP_F_main_BB__488_159)) begin
		main_signed_add_32_0_op0 = main_488_491_reg;
	end
	/* main: %gsm_mult_r.exit.i13*/
	/*   %495 = add nsw i32 %494, %.0.i1.i12*/
	else if ((cur_state == LEGUP_F_main_BB_gsm_mult_rexiti13_160)) begin
		main_signed_add_32_0_op0 = main_gsm_mult_rexiti13_494;
	end
	/* main: %._crit_edge.i14*/
	/*   %501 = add nsw i32 %n.029.i, 1*/
	else if ((cur_state == LEGUP_F_main_BB__crit_edgei14_164)) begin
		main_signed_add_32_0_op0 = main_334_n029i_reg;
	end
	/* main: %._crit_edge43.i*/
	/*   %indvars.iv.next.i = add i32 %indvars.iv.i, -1*/
	else if ((cur_state == LEGUP_F_main_BB__crit_edge43i_165)) begin
		main_signed_add_32_0_op0 = main_334_indvarsivi_reg;
	end
	/* main: %522*/
	/*   %525 = add nsw i32 %i.02.i.i, 1*/
	else if ((cur_state == LEGUP_F_main_BB__522_176)) begin
		main_signed_add_32_0_op0 = main_Reflection_coefficientsexit_i02ii_reg;
	end
	/* main: %Gsm_LPC_Analysis.exit*/
	/*   %532 = add nsw i32 %531, 256*/
	else if ((cur_state == LEGUP_F_main_BB_Gsm_LPC_Analysisexit_181)) begin
		main_signed_add_32_0_op0 = main_Gsm_LPC_Analysisexit_531;
	end
	/* main: %539*/
	/*   %540 = add nsw i32 %.op.i, 32*/
	else if ((cur_state == LEGUP_F_main_BB__539_184)) begin
		main_signed_add_32_0_op0 = main_534_opi_reg;
	end
	/* main: %.thread.i4*/
	/*   %gep124 = add i32 %gep_int123, 2*/
	else if ((cur_state == LEGUP_F_main_BB_threadi4_185)) begin
		main_signed_add_32_0_op0 = main_threadi4_gep_int123;
	end
	/* main: %.thread.i4*/
	/*   %548 = add nsw i32 %547, 256*/
	else if ((cur_state == LEGUP_F_main_BB_threadi4_189)) begin
		main_signed_add_32_0_op0 = main_threadi4_547;
	end
	/* main: %555*/
	/*   %556 = add nsw i32 %.op40.i, 32*/
	else if ((cur_state == LEGUP_F_main_BB__555_192)) begin
		main_signed_add_32_0_op0 = main_550_op40i_reg;
	end
	/* main: %.thread98.i*/
	/*   %gep126 = add i32 %gep_int125, 4*/
	else if ((cur_state == LEGUP_F_main_BB_thread98i_193)) begin
		main_signed_add_32_0_op0 = main_thread98i_gep_int125;
	end
	/* main: %.thread98.i*/
	/*   %564 = add nsw i32 %563, 2048*/
	else if ((cur_state == LEGUP_F_main_BB_thread98i_197)) begin
		main_signed_add_32_0_op0 = main_thread98i_563;
	end
	/* main: %566*/
	/*   %.op45.i = add nsw i32 %568, 256*/
	else if ((cur_state == LEGUP_F_main_BB__566_198)) begin
		main_signed_add_32_0_op0 = main_566_568;
	end
	/* main: %574*/
	/*   %575 = add nsw i32 %.op49.i, 16*/
	else if ((cur_state == LEGUP_F_main_BB__574_202)) begin
		main_signed_add_32_0_op0 = main_gsm_addexit29threadi_op49i_reg;
	end
	/* main: %.thread102.i*/
	/*   %gep128 = add i32 %gep_int127, 6*/
	else if ((cur_state == LEGUP_F_main_BB_thread102i_203)) begin
		main_signed_add_32_0_op0 = main_thread102i_gep_int127;
	end
	/* main: %.thread102.i*/
	/*   %581 = add i32 %580, 40960*/
	else if ((cur_state == LEGUP_F_main_BB_thread102i_207)) begin
		main_signed_add_32_0_op0 = main_thread102i_580;
	end
	/* main: %585*/
	/*   %.op54.i = add nsw i32 %587, 256*/
	else if ((cur_state == LEGUP_F_main_BB__585_208)) begin
		main_signed_add_32_0_op0 = main_585_587;
	end
	/* main: %593*/
	/*   %594 = add nsw i32 %.op58.i, 16*/
	else if ((cur_state == LEGUP_F_main_BB__593_212)) begin
		main_signed_add_32_0_op0 = main_gsm_addexit25threadi_op58i_reg;
	end
	/* main: %.thread107.i*/
	/*   %gep130 = add i32 %gep_int129, 8*/
	else if ((cur_state == LEGUP_F_main_BB_thread107i_213)) begin
		main_signed_add_32_0_op0 = main_thread107i_gep_int129;
	end
	/* main: %.thread107.i*/
	/*   %602 = add nsw i32 %601, 94*/
	else if ((cur_state == LEGUP_F_main_BB_thread107i_217)) begin
		main_signed_add_32_0_op0 = main_thread107i_601;
	end
	/* main: %604*/
	/*   %.op63.i = add nsw i32 %606, 256*/
	else if ((cur_state == LEGUP_F_main_BB__604_218)) begin
		main_signed_add_32_0_op0 = main_604_606;
	end
	/* main: %612*/
	/*   %613 = add nsw i32 %.op67.i, 8*/
	else if ((cur_state == LEGUP_F_main_BB__612_222)) begin
		main_signed_add_32_0_op0 = main_gsm_addexit21threadi_op67i_reg;
	end
	/* main: %.thread112.i*/
	/*   %gep132 = add i32 %gep_int131, 10*/
	else if ((cur_state == LEGUP_F_main_BB_thread112i_223)) begin
		main_signed_add_32_0_op0 = main_thread112i_gep_int131;
	end
	/* main: %.thread112.i*/
	/*   %619 = add i32 %618, 30720*/
	else if ((cur_state == LEGUP_F_main_BB_thread112i_227)) begin
		main_signed_add_32_0_op0 = main_thread112i_618;
	end
	/* main: %623*/
	/*   %.op72.i = add nsw i32 %625, 256*/
	else if ((cur_state == LEGUP_F_main_BB__623_228)) begin
		main_signed_add_32_0_op0 = main_623_625;
	end
	/* main: %631*/
	/*   %632 = add nsw i32 %.op76.i, 8*/
	else if ((cur_state == LEGUP_F_main_BB__631_232)) begin
		main_signed_add_32_0_op0 = main_gsm_addexit17threadi_op76i_reg;
	end
	/* main: %.thread117.i*/
	/*   %gep134 = add i32 %gep_int133, 12*/
	else if ((cur_state == LEGUP_F_main_BB_thread117i_233)) begin
		main_signed_add_32_0_op0 = main_thread117i_gep_int133;
	end
	/* main: %.thread117.i*/
	/*   %638 = add i32 %637, 17068*/
	else if ((cur_state == LEGUP_F_main_BB_thread117i_237)) begin
		main_signed_add_32_0_op0 = main_thread117i_637;
	end
	/* main: %642*/
	/*   %.op81.i = add nsw i32 %644, 256*/
	else if ((cur_state == LEGUP_F_main_BB__642_238)) begin
		main_signed_add_32_0_op0 = main_642_644;
	end
	/* main: %650*/
	/*   %651 = add nsw i32 %.op85.i, 4*/
	else if ((cur_state == LEGUP_F_main_BB__650_242)) begin
		main_signed_add_32_0_op0 = main_gsm_addexit13threadi_op85i_reg;
	end
	/* main: %.thread122.i*/
	/*   %gep136 = add i32 %gep_int135, 14*/
	else if ((cur_state == LEGUP_F_main_BB_thread122i_243)) begin
		main_signed_add_32_0_op0 = main_thread122i_gep_int135;
	end
	/* main: %.thread122.i*/
	/*   %657 = add i32 %656, 18072*/
	else if ((cur_state == LEGUP_F_main_BB_thread122i_247)) begin
		main_signed_add_32_0_op0 = main_thread122i_656;
	end
	/* main: %661*/
	/*   %.op90.i = add nsw i32 %663, 256*/
	else if ((cur_state == LEGUP_F_main_BB__661_248)) begin
		main_signed_add_32_0_op0 = main_661_663;
	end
	/* main: %669*/
	/*   %670 = add nsw i32 %.op94.i, 4*/
	else if ((cur_state == LEGUP_F_main_BB__669_252)) begin
		main_signed_add_32_0_op0 = main_gsm_addexit9threadi_op94i_reg;
	end
	/* main: %.preheader*/
	/*   %674 = add nsw i32 %673, %.lcssa*/
	else if ((cur_state == LEGUP_F_main_BB_preheader_255)) begin
		main_signed_add_32_0_op0 = main_preheader_673;
	end
	/* main: %.preheader*/
	/*   %695 = add nsw i32 %694, %692*/
	else if ((cur_state == LEGUP_F_main_BB_preheader_256)) begin
		main_signed_add_32_0_op0 = main_preheader_694_reg;
	end
	/* main: %698*/
	/*   %706 = add nsw i32 %i.13, 1*/
	else if ((cur_state == LEGUP_F_main_BB__698_257)) begin
		main_signed_add_32_0_op0 = main_698_i13_reg;
	end
	/* main: %698*/
	/*   %gep153 = add i32 %gep_int151, %gep_array152*/
	else if ((cur_state == LEGUP_F_main_BB__698_258)) begin
		main_signed_add_32_0_op0 = main_698_gep_int151_reg;
	end
	/* main: %698*/
	/*   %705 = add nsw i32 %704, %main_result.04*/
	else /* if ((cur_state == LEGUP_F_main_BB__698_259)) */ begin
		main_signed_add_32_0_op0 = main_698_704;
	end
end
always @(*) begin
	/* main: %1*/
	/*   %5 = add nsw i32 %i.05, 1*/
	if ((cur_state == LEGUP_F_main_BB__1_2)) begin
		main_signed_add_32_0_op1 = 32'd1;
	end
	/* main: %1*/
	/*   %gep = add i32 %gep_int, %gep_array*/
	else if ((cur_state == LEGUP_F_main_BB__1_3)) begin
		main_signed_add_32_0_op1 = main_1_gep_array_reg;
	end
	/* main: %8*/
	/*   %gep7 = add i32 %gep_int5, %gep_array6*/
	else if ((cur_state == LEGUP_F_main_BB__8_8)) begin
		main_signed_add_32_0_op1 = main_8_gep_array6_reg;
	end
	/* main: %gsm_abs.exit.i*/
	/*   %17 = add nsw i32 %k.029.i, 1*/
	else if ((cur_state == LEGUP_F_main_BB_gsm_absexiti_11)) begin
		main_signed_add_32_0_op1 = 32'd1;
	end
	/* main: %33*/
	/*   %gep10 = add i32 %gep_int9, %34*/
	else if ((cur_state == LEGUP_F_main_BB__33_18)) begin
		main_signed_add_32_0_op1 = main_33_34;
	end
	/* main: %33*/
	/*   %38 = add nsw i32 %37, -1*/
	else if ((cur_state == LEGUP_F_main_BB__33_19)) begin
		main_signed_add_32_0_op1 = -32'd1;
	end
	/* main: %39*/
	/*   %gep12 = add i32 %gep_int11, %41*/
	else if ((cur_state == LEGUP_F_main_BB__39_20)) begin
		main_signed_add_32_0_op1 = main_39_41;
	end
	/* main: %39*/
	/*   %45 = add nuw nsw i32 %44, 7*/
	else if ((cur_state == LEGUP_F_main_BB__39_21)) begin
		main_signed_add_32_0_op1 = 32'd7;
	end
	/* main: %49*/
	/*   %gep14 = add i32 %gep_int13, %51*/
	else if ((cur_state == LEGUP_F_main_BB__49_23)) begin
		main_signed_add_32_0_op1 = main_49_51;
	end
	/* main: %49*/
	/*   %55 = add nuw nsw i32 %54, 15*/
	else if ((cur_state == LEGUP_F_main_BB__49_24)) begin
		main_signed_add_32_0_op1 = 32'd15;
	end
	/* main: %56*/
	/*   %gep16 = add i32 %gep_int15, %57*/
	else if ((cur_state == LEGUP_F_main_BB__56_25)) begin
		main_signed_add_32_0_op1 = main_56_57;
	end
	/* main: %56*/
	/*   %61 = add nuw nsw i32 %60, 23*/
	else if ((cur_state == LEGUP_F_main_BB__56_26)) begin
		main_signed_add_32_0_op1 = 32'd23;
	end
	/* main: %62*/
	/*   %sext.off.i = add i32 %sext.i, -1*/
	else if ((cur_state == LEGUP_F_main_BB__62_27)) begin
		main_signed_add_32_0_op1 = -32'd1;
	end
	/* main: %.preheader6.i*/
	/*   %66 = add nsw i32 %phitmp.i, -1*/
	else if ((cur_state == LEGUP_F_main_BB_preheader6i_28)) begin
		main_signed_add_32_0_op1 = -32'd1;
	end
	/* main: %.preheader6.split.us.i*/
	/*   %gep19 = add i32 %gep_int17, %gep_array18*/
	else if ((cur_state == LEGUP_F_main_BB_preheader6splitusi_30)) begin
		main_signed_add_32_0_op1 = main_preheader6splitusi_gep_array18_reg;
	end
	/* main: %74*/
	/*   %77 = add nsw i32 %75, 16384*/
	else if ((cur_state == LEGUP_F_main_BB__74_32)) begin
		main_signed_add_32_0_op1 = 32'd16384;
	end
	/* main: %74*/
	/*   %78 = add i32 %77, %76*/
	else if ((cur_state == LEGUP_F_main_BB__74_33)) begin
		main_signed_add_32_0_op1 = main_74_76;
	end
	/* main: %gsm_mult_r.exit.us.i*/
	/*   %81 = add nsw i32 %k.128.us.i, 1*/
	else if ((cur_state == LEGUP_F_main_BB_gsm_mult_rexitusi_34)) begin
		main_signed_add_32_0_op1 = 32'd1;
	end
	/* main: %gsm_mult_r.exit.i*/
	/*   %90 = add nsw i32 %k.128.i, 1*/
	else if ((cur_state == LEGUP_F_main_BB_gsm_mult_rexiti_36)) begin
		main_signed_add_32_0_op1 = 32'd1;
	end
	/* main: %gsm_mult_r.exit.i*/
	/*   %gep22 = add i32 %gep_int20, %gep_array21*/
	else if ((cur_state == LEGUP_F_main_BB_gsm_mult_rexiti_37)) begin
		main_signed_add_32_0_op1 = main_gsm_mult_rexiti_gep_array21_reg;
	end
	/* main: %gsm_mult_r.exit.i*/
	/*   %86 = add nsw i32 %84, 16384*/
	else if ((cur_state == LEGUP_F_main_BB_gsm_mult_rexiti_38)) begin
		main_signed_add_32_0_op1 = 32'd16384;
	end
	/* main: %gsm_mult_r.exit.i*/
	/*   %87 = add i32 %86, %85*/
	else if ((cur_state == LEGUP_F_main_BB_gsm_mult_rexiti_39)) begin
		main_signed_add_32_0_op1 = main_gsm_mult_rexiti_85;
	end
	/* main: %.thread.i*/
	/*   %gep24 = add i32 %gep_int23, 2*/
	else if ((cur_state == LEGUP_F_main_BB_threadi_41)) begin
		main_signed_add_32_0_op1 = 32'd2;
	end
	/* main: %.thread.i*/
	/*   %99 = add nuw nsw i32 %98, %94*/
	else if ((cur_state == LEGUP_F_main_BB_threadi_43)) begin
		main_signed_add_32_0_op1 = main_threadi_94;
	end
	/* main: %.thread.i*/
	/*   %104 = add nuw nsw i32 %103, %99*/
	else if ((cur_state == LEGUP_F_main_BB_threadi_44)) begin
		main_signed_add_32_0_op1 = main_threadi_99_reg;
	end
	/* main: %.thread.i*/
	/*   %122 = add nuw nsw i32 %121, %112*/
	else if ((cur_state == LEGUP_F_main_BB_threadi_45)) begin
		main_signed_add_32_0_op1 = main_threadi_112_reg;
	end
	/* main: %.thread.i*/
	/*   %148 = add nuw nsw i32 %147, %134*/
	else if ((cur_state == LEGUP_F_main_BB_threadi_46)) begin
		main_signed_add_32_0_op1 = main_threadi_134_reg;
	end
	/* main: %187*/
	/*   %gep38 = add i32 %gep_int37, 2*/
	else if ((cur_state == LEGUP_F_main_BB__187_48)) begin
		main_signed_add_32_0_op1 = 32'd2;
	end
	/* main: %187*/
	/*   %202 = add nsw i32 %201, %197*/
	else if ((cur_state == LEGUP_F_main_BB__187_50)) begin
		main_signed_add_32_0_op1 = main_187_197_reg;
	end
	/* main: %187*/
	/*   %215 = add nsw i32 %214, %194*/
	else if ((cur_state == LEGUP_F_main_BB__187_51)) begin
		main_signed_add_32_0_op1 = main_187_194_reg;
	end
	/* main: %187*/
	/*   %225 = add nsw i32 %224, %192*/
	else if ((cur_state == LEGUP_F_main_BB__187_52)) begin
		main_signed_add_32_0_op1 = main_187_192_reg;
	end
	/* main: %187*/
	/*   %235 = add nsw i32 %234, %190*/
	else if ((cur_state == LEGUP_F_main_BB__187_53)) begin
		main_signed_add_32_0_op1 = main_187_190_reg;
	end
	/* main: %.preheader.i*/
	/*   %gep54 = add i32 %gep_int53, 2*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderi_54)) begin
		main_signed_add_32_0_op1 = 32'd2;
	end
	/* main: %._crit_edge.i*/
	/*   %248 = add nsw i32 %k.47.i, -1*/
	else if ((cur_state == LEGUP_F_main_BB__crit_edgei_56)) begin
		main_signed_add_32_0_op1 = -32'd1;
	end
	/* main: %261*/
	/*   %gep70 = add i32 %gep_int69, %262*/
	else if ((cur_state == LEGUP_F_main_BB__261_67)) begin
		main_signed_add_32_0_op1 = main_261_262;
	end
	/* main: %261*/
	/*   %266 = add nsw i32 %265, -1*/
	else if ((cur_state == LEGUP_F_main_BB__261_68)) begin
		main_signed_add_32_0_op1 = -32'd1;
	end
	/* main: %267*/
	/*   %gep72 = add i32 %gep_int71, %269*/
	else if ((cur_state == LEGUP_F_main_BB__267_69)) begin
		main_signed_add_32_0_op1 = main_267_269;
	end
	/* main: %267*/
	/*   %273 = add nuw nsw i32 %272, 7*/
	else if ((cur_state == LEGUP_F_main_BB__267_70)) begin
		main_signed_add_32_0_op1 = 32'd7;
	end
	/* main: %277*/
	/*   %gep74 = add i32 %gep_int73, %279*/
	else if ((cur_state == LEGUP_F_main_BB__277_72)) begin
		main_signed_add_32_0_op1 = main_277_279;
	end
	/* main: %277*/
	/*   %283 = add nuw nsw i32 %282, 15*/
	else if ((cur_state == LEGUP_F_main_BB__277_73)) begin
		main_signed_add_32_0_op1 = 32'd15;
	end
	/* main: %284*/
	/*   %gep76 = add i32 %gep_int75, %285*/
	else if ((cur_state == LEGUP_F_main_BB__284_74)) begin
		main_signed_add_32_0_op1 = main_284_285;
	end
	/* main: %284*/
	/*   %289 = add nuw nsw i32 %288, 23*/
	else if ((cur_state == LEGUP_F_main_BB__284_75)) begin
		main_signed_add_32_0_op1 = 32'd23;
	end
	/* main: %gsm_norm.exit.i*/
	/*   %gep78 = add i32 %gep_int77, 2*/
	else if ((cur_state == LEGUP_F_main_BB_gsm_normexiti_76)) begin
		main_signed_add_32_0_op1 = 32'd2;
	end
	/* main: %.lr.ph.i*/
	/*   %gep109 = add i32 %gep_int108, 2*/
	else if ((cur_state == LEGUP_F_main_BB_lrphi_98)) begin
		main_signed_add_32_0_op1 = 32'd2;
	end
	/* main: %445*/
	/*   %449 = add nsw i32 %447, 16384*/
	else if ((cur_state == LEGUP_F_main_BB__445_136)) begin
		main_signed_add_32_0_op1 = 32'd16384;
	end
	/* main: %445*/
	/*   %450 = add i32 %449, %448*/
	else if ((cur_state == LEGUP_F_main_BB__445_137)) begin
		main_signed_add_32_0_op1 = main_445_448;
	end
	/* main: %gsm_mult_r.exit11.i*/
	/*   %454 = add nsw i32 %453, %.0.i10.i*/
	else if ((cur_state == LEGUP_F_main_BB_gsm_mult_rexit11i_139)) begin
		main_signed_add_32_0_op1 = main_gsm_mult_rexit11i_0i10i_reg;
	end
	/* main: %.lr.ph27.i*/
	/*   %gep112 = add i32 %gep_int110, %gep_array111*/
	else if ((cur_state == LEGUP_F_main_BB_lrph27i_144)) begin
		main_signed_add_32_0_op1 = main_lrph27i_gep_array111_reg;
	end
	/* main: %467*/
	/*   %471 = add nsw i32 %469, 16384*/
	else if ((cur_state == LEGUP_F_main_BB__467_146)) begin
		main_signed_add_32_0_op1 = 32'd16384;
	end
	/* main: %467*/
	/*   %472 = add i32 %471, %470*/
	else if ((cur_state == LEGUP_F_main_BB__467_147)) begin
		main_signed_add_32_0_op1 = main_467_470;
	end
	/* main: %gsm_mult_r.exit6.i*/
	/*   %474 = add nsw i32 %m.026.i, 1*/
	else if ((cur_state == LEGUP_F_main_BB_gsm_mult_rexit6i_148)) begin
		main_signed_add_32_0_op1 = 32'd1;
	end
	/* main: %gsm_mult_r.exit6.i*/
	/*   %gep115 = add i32 %gep_int113, %gep_array114*/
	else if ((cur_state == LEGUP_F_main_BB_gsm_mult_rexit6i_150)) begin
		main_signed_add_32_0_op1 = main_gsm_mult_rexit6i_gep_array114_reg;
	end
	/* main: %gsm_mult_r.exit6.i*/
	/*   %478 = add nsw i32 %477, %.0.i5.i*/
	else if ((cur_state == LEGUP_F_main_BB_gsm_mult_rexit6i_151)) begin
		main_signed_add_32_0_op1 = main_gsm_mult_rexit6i_0i5i_reg;
	end
	/* main: %gsm_add.exit3.i*/
	/*   %gep118 = add i32 %gep_int116, %gep_array117*/
	else if ((cur_state == LEGUP_F_main_BB_gsm_addexit3i_154)) begin
		main_signed_add_32_0_op1 = main_gsm_addexit3i_gep_array117_reg;
	end
	/* main: %488*/
	/*   %491 = add nsw i32 %477, 16384*/
	else if ((cur_state == LEGUP_F_main_BB__488_158)) begin
		main_signed_add_32_0_op1 = 32'd16384;
	end
	/* main: %488*/
	/*   %492 = add i32 %491, %490*/
	else if ((cur_state == LEGUP_F_main_BB__488_159)) begin
		main_signed_add_32_0_op1 = main_488_490;
	end
	/* main: %gsm_mult_r.exit.i13*/
	/*   %495 = add nsw i32 %494, %.0.i1.i12*/
	else if ((cur_state == LEGUP_F_main_BB_gsm_mult_rexiti13_160)) begin
		main_signed_add_32_0_op1 = main_gsm_mult_rexiti13_0i1i12_reg;
	end
	/* main: %._crit_edge.i14*/
	/*   %501 = add nsw i32 %n.029.i, 1*/
	else if ((cur_state == LEGUP_F_main_BB__crit_edgei14_164)) begin
		main_signed_add_32_0_op1 = 32'd1;
	end
	/* main: %._crit_edge43.i*/
	/*   %indvars.iv.next.i = add i32 %indvars.iv.i, -1*/
	else if ((cur_state == LEGUP_F_main_BB__crit_edge43i_165)) begin
		main_signed_add_32_0_op1 = -32'd1;
	end
	/* main: %522*/
	/*   %525 = add nsw i32 %i.02.i.i, 1*/
	else if ((cur_state == LEGUP_F_main_BB__522_176)) begin
		main_signed_add_32_0_op1 = 32'd1;
	end
	/* main: %Gsm_LPC_Analysis.exit*/
	/*   %532 = add nsw i32 %531, 256*/
	else if ((cur_state == LEGUP_F_main_BB_Gsm_LPC_Analysisexit_181)) begin
		main_signed_add_32_0_op1 = 32'd256;
	end
	/* main: %539*/
	/*   %540 = add nsw i32 %.op.i, 32*/
	else if ((cur_state == LEGUP_F_main_BB__539_184)) begin
		main_signed_add_32_0_op1 = 32'd32;
	end
	/* main: %.thread.i4*/
	/*   %gep124 = add i32 %gep_int123, 2*/
	else if ((cur_state == LEGUP_F_main_BB_threadi4_185)) begin
		main_signed_add_32_0_op1 = 32'd2;
	end
	/* main: %.thread.i4*/
	/*   %548 = add nsw i32 %547, 256*/
	else if ((cur_state == LEGUP_F_main_BB_threadi4_189)) begin
		main_signed_add_32_0_op1 = 32'd256;
	end
	/* main: %555*/
	/*   %556 = add nsw i32 %.op40.i, 32*/
	else if ((cur_state == LEGUP_F_main_BB__555_192)) begin
		main_signed_add_32_0_op1 = 32'd32;
	end
	/* main: %.thread98.i*/
	/*   %gep126 = add i32 %gep_int125, 4*/
	else if ((cur_state == LEGUP_F_main_BB_thread98i_193)) begin
		main_signed_add_32_0_op1 = 32'd4;
	end
	/* main: %.thread98.i*/
	/*   %564 = add nsw i32 %563, 2048*/
	else if ((cur_state == LEGUP_F_main_BB_thread98i_197)) begin
		main_signed_add_32_0_op1 = 32'd2048;
	end
	/* main: %566*/
	/*   %.op45.i = add nsw i32 %568, 256*/
	else if ((cur_state == LEGUP_F_main_BB__566_198)) begin
		main_signed_add_32_0_op1 = 32'd256;
	end
	/* main: %574*/
	/*   %575 = add nsw i32 %.op49.i, 16*/
	else if ((cur_state == LEGUP_F_main_BB__574_202)) begin
		main_signed_add_32_0_op1 = 32'd16;
	end
	/* main: %.thread102.i*/
	/*   %gep128 = add i32 %gep_int127, 6*/
	else if ((cur_state == LEGUP_F_main_BB_thread102i_203)) begin
		main_signed_add_32_0_op1 = 32'd6;
	end
	/* main: %.thread102.i*/
	/*   %581 = add i32 %580, 40960*/
	else if ((cur_state == LEGUP_F_main_BB_thread102i_207)) begin
		main_signed_add_32_0_op1 = 32'd40960;
	end
	/* main: %585*/
	/*   %.op54.i = add nsw i32 %587, 256*/
	else if ((cur_state == LEGUP_F_main_BB__585_208)) begin
		main_signed_add_32_0_op1 = 32'd256;
	end
	/* main: %593*/
	/*   %594 = add nsw i32 %.op58.i, 16*/
	else if ((cur_state == LEGUP_F_main_BB__593_212)) begin
		main_signed_add_32_0_op1 = 32'd16;
	end
	/* main: %.thread107.i*/
	/*   %gep130 = add i32 %gep_int129, 8*/
	else if ((cur_state == LEGUP_F_main_BB_thread107i_213)) begin
		main_signed_add_32_0_op1 = 32'd8;
	end
	/* main: %.thread107.i*/
	/*   %602 = add nsw i32 %601, 94*/
	else if ((cur_state == LEGUP_F_main_BB_thread107i_217)) begin
		main_signed_add_32_0_op1 = 32'd94;
	end
	/* main: %604*/
	/*   %.op63.i = add nsw i32 %606, 256*/
	else if ((cur_state == LEGUP_F_main_BB__604_218)) begin
		main_signed_add_32_0_op1 = 32'd256;
	end
	/* main: %612*/
	/*   %613 = add nsw i32 %.op67.i, 8*/
	else if ((cur_state == LEGUP_F_main_BB__612_222)) begin
		main_signed_add_32_0_op1 = 32'd8;
	end
	/* main: %.thread112.i*/
	/*   %gep132 = add i32 %gep_int131, 10*/
	else if ((cur_state == LEGUP_F_main_BB_thread112i_223)) begin
		main_signed_add_32_0_op1 = 32'd10;
	end
	/* main: %.thread112.i*/
	/*   %619 = add i32 %618, 30720*/
	else if ((cur_state == LEGUP_F_main_BB_thread112i_227)) begin
		main_signed_add_32_0_op1 = 32'd30720;
	end
	/* main: %623*/
	/*   %.op72.i = add nsw i32 %625, 256*/
	else if ((cur_state == LEGUP_F_main_BB__623_228)) begin
		main_signed_add_32_0_op1 = 32'd256;
	end
	/* main: %631*/
	/*   %632 = add nsw i32 %.op76.i, 8*/
	else if ((cur_state == LEGUP_F_main_BB__631_232)) begin
		main_signed_add_32_0_op1 = 32'd8;
	end
	/* main: %.thread117.i*/
	/*   %gep134 = add i32 %gep_int133, 12*/
	else if ((cur_state == LEGUP_F_main_BB_thread117i_233)) begin
		main_signed_add_32_0_op1 = 32'd12;
	end
	/* main: %.thread117.i*/
	/*   %638 = add i32 %637, 17068*/
	else if ((cur_state == LEGUP_F_main_BB_thread117i_237)) begin
		main_signed_add_32_0_op1 = 32'd17068;
	end
	/* main: %642*/
	/*   %.op81.i = add nsw i32 %644, 256*/
	else if ((cur_state == LEGUP_F_main_BB__642_238)) begin
		main_signed_add_32_0_op1 = 32'd256;
	end
	/* main: %650*/
	/*   %651 = add nsw i32 %.op85.i, 4*/
	else if ((cur_state == LEGUP_F_main_BB__650_242)) begin
		main_signed_add_32_0_op1 = 32'd4;
	end
	/* main: %.thread122.i*/
	/*   %gep136 = add i32 %gep_int135, 14*/
	else if ((cur_state == LEGUP_F_main_BB_thread122i_243)) begin
		main_signed_add_32_0_op1 = 32'd14;
	end
	/* main: %.thread122.i*/
	/*   %657 = add i32 %656, 18072*/
	else if ((cur_state == LEGUP_F_main_BB_thread122i_247)) begin
		main_signed_add_32_0_op1 = 32'd18072;
	end
	/* main: %661*/
	/*   %.op90.i = add nsw i32 %663, 256*/
	else if ((cur_state == LEGUP_F_main_BB__661_248)) begin
		main_signed_add_32_0_op1 = 32'd256;
	end
	/* main: %669*/
	/*   %670 = add nsw i32 %.op94.i, 4*/
	else if ((cur_state == LEGUP_F_main_BB__669_252)) begin
		main_signed_add_32_0_op1 = 32'd4;
	end
	/* main: %.preheader*/
	/*   %674 = add nsw i32 %673, %.lcssa*/
	else if ((cur_state == LEGUP_F_main_BB_preheader_255)) begin
		main_signed_add_32_0_op1 = main_preheader_lcssa_reg;
	end
	/* main: %.preheader*/
	/*   %695 = add nsw i32 %694, %692*/
	else if ((cur_state == LEGUP_F_main_BB_preheader_256)) begin
		main_signed_add_32_0_op1 = main_preheader_692_reg;
	end
	/* main: %698*/
	/*   %706 = add nsw i32 %i.13, 1*/
	else if ((cur_state == LEGUP_F_main_BB__698_257)) begin
		main_signed_add_32_0_op1 = 32'd1;
	end
	/* main: %698*/
	/*   %gep153 = add i32 %gep_int151, %gep_array152*/
	else if ((cur_state == LEGUP_F_main_BB__698_258)) begin
		main_signed_add_32_0_op1 = main_698_gep_array152_reg;
	end
	/* main: %698*/
	/*   %705 = add nsw i32 %704, %main_result.04*/
	else /* if ((cur_state == LEGUP_F_main_BB__698_259)) */ begin
		main_signed_add_32_0_op1 = main_698_main_result04_reg;
	end
end
always @(*) begin
	main_signed_add_32_0 = (main_signed_add_32_0_op0 + main_signed_add_32_0_op1);
end
always @(*) begin
	/* main: %1*/
	/*   %gep3 = add i32 %gep_int1, %gep_array2*/
	if ((cur_state == LEGUP_F_main_BB__1_3)) begin
		main_signed_add_32_1_op0 = main_1_gep_int1_reg;
	end
	/* main: %.thread.i*/
	/*   %gep26 = add i32 %gep_int25, 4*/
	else if ((cur_state == LEGUP_F_main_BB_threadi_41)) begin
		main_signed_add_32_1_op0 = main_threadi_gep_int25;
	end
	/* main: %.thread.i*/
	/*   %105 = add nsw i32 %102, %93*/
	else if ((cur_state == LEGUP_F_main_BB_threadi_43)) begin
		main_signed_add_32_1_op0 = main_threadi_102;
	end
	/* main: %.thread.i*/
	/*   %112 = add nuw nsw i32 %111, %104*/
	else if ((cur_state == LEGUP_F_main_BB_threadi_44)) begin
		main_signed_add_32_1_op0 = main_threadi_111;
	end
	/* main: %.thread.i*/
	/*   %124 = add nsw i32 %123, %114*/
	else if ((cur_state == LEGUP_F_main_BB_threadi_45)) begin
		main_signed_add_32_1_op0 = main_threadi_123;
	end
	/* main: %.thread.i*/
	/*   %150 = add nsw i32 %149, %136*/
	else if ((cur_state == LEGUP_F_main_BB_threadi_46)) begin
		main_signed_add_32_1_op0 = main_threadi_149;
	end
	/* main: %187*/
	/*   %gep40 = add i32 %gep_int39, -2*/
	else if ((cur_state == LEGUP_F_main_BB__187_48)) begin
		main_signed_add_32_1_op0 = main_187_gep_int39;
	end
	/* main: %187*/
	/*   %205 = add nsw i32 %204, %196*/
	else if ((cur_state == LEGUP_F_main_BB__187_50)) begin
		main_signed_add_32_1_op0 = main_187_204;
	end
	/* main: %187*/
	/*   %220 = add nsw i32 %219, %193*/
	else if ((cur_state == LEGUP_F_main_BB__187_51)) begin
		main_signed_add_32_1_op0 = main_187_219;
	end
	/* main: %187*/
	/*   %230 = add nsw i32 %229, %191*/
	else if ((cur_state == LEGUP_F_main_BB__187_52)) begin
		main_signed_add_32_1_op0 = main_187_229;
	end
	/* main: %187*/
	/*   %240 = add nsw i32 %239, %189*/
	else if ((cur_state == LEGUP_F_main_BB__187_53)) begin
		main_signed_add_32_1_op0 = main_187_239;
	end
	/* main: %gsm_norm.exit.i*/
	/*   %gep80 = add i32 %gep_int79, 4*/
	else if ((cur_state == LEGUP_F_main_BB_gsm_normexiti_76)) begin
		main_signed_add_32_1_op0 = main_gsm_normexiti_gep_int79;
	end
	/* main: %.lr.ph.i*/
	/*   %345 = add nsw i32 %i.425.i, 1*/
	else if ((cur_state == LEGUP_F_main_BB_lrphi_98)) begin
		main_signed_add_32_1_op0 = main_lrphi_i425i_reg;
	end
	/* main: %._crit_edge43.i*/
	/*   %gep120 = add i32 %gep_int119, 2*/
	else if ((cur_state == LEGUP_F_main_BB__crit_edge43i_165)) begin
		main_signed_add_32_1_op0 = main__crit_edge43i_gep_int119;
	end
	/* main: %522*/
	/*   %gep122 = add i32 %gep_int121, 2*/
	else if ((cur_state == LEGUP_F_main_BB__522_176)) begin
		main_signed_add_32_1_op0 = main_522_gep_int121;
	end
	/* main: %Gsm_LPC_Analysis.exit*/
	/*   %530 = add i32 %529, 40960*/
	else if ((cur_state == LEGUP_F_main_BB_Gsm_LPC_Analysisexit_181)) begin
		main_signed_add_32_1_op0 = main_Gsm_LPC_Analysisexit_529;
	end
	/* main: %.thread.i4*/
	/*   %546 = add i32 %545, 40960*/
	else if ((cur_state == LEGUP_F_main_BB_threadi4_189)) begin
		main_signed_add_32_1_op0 = main_threadi4_545;
	end
	/* main: %.thread98.i*/
	/*   %562 = add i32 %561, 40960*/
	else if ((cur_state == LEGUP_F_main_BB_thread98i_197)) begin
		main_signed_add_32_1_op0 = main_thread98i_561;
	end
	/* main: %.thread102.i*/
	/*   %583 = add nsw i32 %582, -2560*/
	else if ((cur_state == LEGUP_F_main_BB_thread102i_207)) begin
		main_signed_add_32_1_op0 = main_thread102i_582;
	end
	/* main: %.thread107.i*/
	/*   %600 = add i32 %599, 27928*/
	else if ((cur_state == LEGUP_F_main_BB_thread107i_217)) begin
		main_signed_add_32_1_op0 = main_thread107i_599;
	end
	/* main: %.thread112.i*/
	/*   %621 = add nsw i32 %620, -1792*/
	else if ((cur_state == LEGUP_F_main_BB_thread112i_227)) begin
		main_signed_add_32_1_op0 = main_thread112i_620;
	end
	/* main: %.thread117.i*/
	/*   %640 = add nsw i32 %639, -341*/
	else if ((cur_state == LEGUP_F_main_BB_thread117i_237)) begin
		main_signed_add_32_1_op0 = main_thread117i_639;
	end
	/* main: %.thread122.i*/
	/*   %659 = add nsw i32 %658, -1144*/
	else if ((cur_state == LEGUP_F_main_BB_thread122i_247)) begin
		main_signed_add_32_1_op0 = main_thread122i_658;
	end
	/* main: %.preheader*/
	/*   %677 = add nsw i32 %676, %674*/
	else if ((cur_state == LEGUP_F_main_BB_preheader_255)) begin
		main_signed_add_32_1_op0 = main_preheader_676;
	end
	/* main: %698*/
	/*   %gep156 = add i32 %gep_int154, %gep_array155*/
	else /* if ((cur_state == LEGUP_F_main_BB__698_258)) */ begin
		main_signed_add_32_1_op0 = main_698_gep_int154_reg;
	end
end
always @(*) begin
	/* main: %1*/
	/*   %gep3 = add i32 %gep_int1, %gep_array2*/
	if ((cur_state == LEGUP_F_main_BB__1_3)) begin
		main_signed_add_32_1_op1 = main_1_gep_array2_reg;
	end
	/* main: %.thread.i*/
	/*   %gep26 = add i32 %gep_int25, 4*/
	else if ((cur_state == LEGUP_F_main_BB_threadi_41)) begin
		main_signed_add_32_1_op1 = 32'd4;
	end
	/* main: %.thread.i*/
	/*   %105 = add nsw i32 %102, %93*/
	else if ((cur_state == LEGUP_F_main_BB_threadi_43)) begin
		main_signed_add_32_1_op1 = main_threadi_93_reg;
	end
	/* main: %.thread.i*/
	/*   %112 = add nuw nsw i32 %111, %104*/
	else if ((cur_state == LEGUP_F_main_BB_threadi_44)) begin
		main_signed_add_32_1_op1 = main_threadi_104;
	end
	/* main: %.thread.i*/
	/*   %124 = add nsw i32 %123, %114*/
	else if ((cur_state == LEGUP_F_main_BB_threadi_45)) begin
		main_signed_add_32_1_op1 = main_threadi_114_reg;
	end
	/* main: %.thread.i*/
	/*   %150 = add nsw i32 %149, %136*/
	else if ((cur_state == LEGUP_F_main_BB_threadi_46)) begin
		main_signed_add_32_1_op1 = main_threadi_136_reg;
	end
	/* main: %187*/
	/*   %gep40 = add i32 %gep_int39, -2*/
	else if ((cur_state == LEGUP_F_main_BB__187_48)) begin
		main_signed_add_32_1_op1 = -32'd2;
	end
	/* main: %187*/
	/*   %205 = add nsw i32 %204, %196*/
	else if ((cur_state == LEGUP_F_main_BB__187_50)) begin
		main_signed_add_32_1_op1 = main_187_196_reg;
	end
	/* main: %187*/
	/*   %220 = add nsw i32 %219, %193*/
	else if ((cur_state == LEGUP_F_main_BB__187_51)) begin
		main_signed_add_32_1_op1 = main_187_193_reg;
	end
	/* main: %187*/
	/*   %230 = add nsw i32 %229, %191*/
	else if ((cur_state == LEGUP_F_main_BB__187_52)) begin
		main_signed_add_32_1_op1 = main_187_191_reg;
	end
	/* main: %187*/
	/*   %240 = add nsw i32 %239, %189*/
	else if ((cur_state == LEGUP_F_main_BB__187_53)) begin
		main_signed_add_32_1_op1 = main_187_189_reg;
	end
	/* main: %gsm_norm.exit.i*/
	/*   %gep80 = add i32 %gep_int79, 4*/
	else if ((cur_state == LEGUP_F_main_BB_gsm_normexiti_76)) begin
		main_signed_add_32_1_op1 = 32'd4;
	end
	/* main: %.lr.ph.i*/
	/*   %345 = add nsw i32 %i.425.i, 1*/
	else if ((cur_state == LEGUP_F_main_BB_lrphi_98)) begin
		main_signed_add_32_1_op1 = 32'd1;
	end
	/* main: %._crit_edge43.i*/
	/*   %gep120 = add i32 %gep_int119, 2*/
	else if ((cur_state == LEGUP_F_main_BB__crit_edge43i_165)) begin
		main_signed_add_32_1_op1 = 32'd2;
	end
	/* main: %522*/
	/*   %gep122 = add i32 %gep_int121, 2*/
	else if ((cur_state == LEGUP_F_main_BB__522_176)) begin
		main_signed_add_32_1_op1 = 32'd2;
	end
	/* main: %Gsm_LPC_Analysis.exit*/
	/*   %530 = add i32 %529, 40960*/
	else if ((cur_state == LEGUP_F_main_BB_Gsm_LPC_Analysisexit_181)) begin
		main_signed_add_32_1_op1 = 32'd40960;
	end
	/* main: %.thread.i4*/
	/*   %546 = add i32 %545, 40960*/
	else if ((cur_state == LEGUP_F_main_BB_threadi4_189)) begin
		main_signed_add_32_1_op1 = 32'd40960;
	end
	/* main: %.thread98.i*/
	/*   %562 = add i32 %561, 40960*/
	else if ((cur_state == LEGUP_F_main_BB_thread98i_197)) begin
		main_signed_add_32_1_op1 = 32'd40960;
	end
	/* main: %.thread102.i*/
	/*   %583 = add nsw i32 %582, -2560*/
	else if ((cur_state == LEGUP_F_main_BB_thread102i_207)) begin
		main_signed_add_32_1_op1 = -32'd2560;
	end
	/* main: %.thread107.i*/
	/*   %600 = add i32 %599, 27928*/
	else if ((cur_state == LEGUP_F_main_BB_thread107i_217)) begin
		main_signed_add_32_1_op1 = 32'd27928;
	end
	/* main: %.thread112.i*/
	/*   %621 = add nsw i32 %620, -1792*/
	else if ((cur_state == LEGUP_F_main_BB_thread112i_227)) begin
		main_signed_add_32_1_op1 = -32'd1792;
	end
	/* main: %.thread117.i*/
	/*   %640 = add nsw i32 %639, -341*/
	else if ((cur_state == LEGUP_F_main_BB_thread117i_237)) begin
		main_signed_add_32_1_op1 = -32'd341;
	end
	/* main: %.thread122.i*/
	/*   %659 = add nsw i32 %658, -1144*/
	else if ((cur_state == LEGUP_F_main_BB_thread122i_247)) begin
		main_signed_add_32_1_op1 = -32'd1144;
	end
	/* main: %.preheader*/
	/*   %677 = add nsw i32 %676, %674*/
	else if ((cur_state == LEGUP_F_main_BB_preheader_255)) begin
		main_signed_add_32_1_op1 = main_preheader_674;
	end
	/* main: %698*/
	/*   %gep156 = add i32 %gep_int154, %gep_array155*/
	else /* if ((cur_state == LEGUP_F_main_BB__698_258)) */ begin
		main_signed_add_32_1_op1 = main_698_gep_array155_reg;
	end
end
always @(*) begin
	main_signed_add_32_1 = (main_signed_add_32_1_op0 + main_signed_add_32_1_op1);
end
always @(*) begin
	/* main: %74*/
	/*   %76 = mul nsw i32 %75, %70*/
	if ((cur_state == LEGUP_F_main_BB__74_32)) begin
		main_signed_multiply_32_0_op0 = main_74_75;
	end
	/* main: %gsm_mult_r.exit.i*/
	/*   %85 = mul nsw i32 %84, %70*/
	else if ((cur_state == LEGUP_F_main_BB_gsm_mult_rexiti_38)) begin
		main_signed_multiply_32_0_op0 = main_gsm_mult_rexiti_84;
	end
	/* main: %.thread.i*/
	/*   %94 = mul nsw i32 %93, %93*/
	else if ((cur_state == LEGUP_F_main_BB_threadi_42)) begin
		main_signed_multiply_32_0_op0 = main_threadi_93;
	end
	/* main: %.thread.i*/
	/*   %115 = mul nsw i32 %97, %110*/
	else if ((cur_state == LEGUP_F_main_BB_threadi_43)) begin
		main_signed_multiply_32_0_op0 = main_threadi_97_reg;
	end
	/* main: %.thread.i*/
	/*   %121 = mul nsw i32 %120, %120*/
	else if ((cur_state == LEGUP_F_main_BB_threadi_44)) begin
		main_signed_multiply_32_0_op0 = main_threadi_120;
	end
	/* main: %.thread.i*/
	/*   %167 = mul nsw i32 %132, %162*/
	else if ((cur_state == LEGUP_F_main_BB_threadi_45)) begin
		main_signed_multiply_32_0_op0 = main_threadi_132_reg;
	end
	/* main: %187*/
	/*   %201 = mul nsw i32 %200, %200*/
	else if ((cur_state == LEGUP_F_main_BB__187_49)) begin
		main_signed_multiply_32_0_op0 = main_187_200;
	end
	/* main: %187*/
	/*   %214 = mul nsw i32 %213, %200*/
	else if ((cur_state == LEGUP_F_main_BB__187_50)) begin
		main_signed_multiply_32_0_op0 = main_187_213;
	end
	/* main: %187*/
	/*   %224 = mul nsw i32 %223, %200*/
	else if ((cur_state == LEGUP_F_main_BB__187_51)) begin
		main_signed_multiply_32_0_op0 = main_187_223;
	end
	/* main: %187*/
	/*   %234 = mul nsw i32 %233, %200*/
	else if ((cur_state == LEGUP_F_main_BB__187_52)) begin
		main_signed_multiply_32_0_op0 = main_187_233;
	end
	/* main: %445*/
	/*   %448 = mul nsw i32 %446, %447*/
	else if ((cur_state == LEGUP_F_main_BB__445_136)) begin
		main_signed_multiply_32_0_op0 = main_445_446;
	end
	/* main: %467*/
	/*   %470 = mul nsw i32 %468, %469*/
	else if ((cur_state == LEGUP_F_main_BB__467_146)) begin
		main_signed_multiply_32_0_op0 = main_467_468;
	end
	/* main: %488*/
	/*   %490 = mul nsw i32 %489, %477*/
	else if ((cur_state == LEGUP_F_main_BB__488_158)) begin
		main_signed_multiply_32_0_op0 = main_488_489;
	end
	/* main: %Gsm_LPC_Analysis.exit*/
	/*   %529 = mul i32 %528, 40960*/
	else if ((cur_state == LEGUP_F_main_BB_Gsm_LPC_Analysisexit_180)) begin
		main_signed_multiply_32_0_op0 = main_Gsm_LPC_Analysisexit_528;
	end
	/* main: %.thread.i4*/
	/*   %545 = mul i32 %544, 40960*/
	else if ((cur_state == LEGUP_F_main_BB_threadi4_188)) begin
		main_signed_multiply_32_0_op0 = main_threadi4_544;
	end
	/* main: %.thread98.i*/
	/*   %561 = mul i32 %560, 40960*/
	else if ((cur_state == LEGUP_F_main_BB_thread98i_196)) begin
		main_signed_multiply_32_0_op0 = main_thread98i_560;
	end
	/* main: %.thread102.i*/
	/*   %580 = mul i32 %579, 40960*/
	else if ((cur_state == LEGUP_F_main_BB_thread102i_206)) begin
		main_signed_multiply_32_0_op0 = main_thread102i_579;
	end
	/* main: %.thread107.i*/
	/*   %599 = mul i32 %598, 27928*/
	else if ((cur_state == LEGUP_F_main_BB_thread107i_216)) begin
		main_signed_multiply_32_0_op0 = main_thread107i_598;
	end
	/* main: %.thread112.i*/
	/*   %618 = mul i32 %617, 30720*/
	else if ((cur_state == LEGUP_F_main_BB_thread112i_226)) begin
		main_signed_multiply_32_0_op0 = main_thread112i_617;
	end
	/* main: %.thread117.i*/
	/*   %637 = mul i32 %636, 17068*/
	else if ((cur_state == LEGUP_F_main_BB_thread117i_236)) begin
		main_signed_multiply_32_0_op0 = main_thread117i_636;
	end
	/* main: %.thread122.i*/
	/*   %656 = mul i32 %655, 18072*/
	else /* if ((cur_state == LEGUP_F_main_BB_thread122i_246)) */ begin
		main_signed_multiply_32_0_op0 = main_thread122i_655;
	end
end
always @(*) begin
	/* main: %74*/
	/*   %76 = mul nsw i32 %75, %70*/
	if ((cur_state == LEGUP_F_main_BB__74_32)) begin
		main_signed_multiply_32_0_op1 = main_preheader6i_70_reg;
	end
	/* main: %gsm_mult_r.exit.i*/
	/*   %85 = mul nsw i32 %84, %70*/
	else if ((cur_state == LEGUP_F_main_BB_gsm_mult_rexiti_38)) begin
		main_signed_multiply_32_0_op1 = main_preheader6i_70_reg;
	end
	/* main: %.thread.i*/
	/*   %94 = mul nsw i32 %93, %93*/
	else if ((cur_state == LEGUP_F_main_BB_threadi_42)) begin
		main_signed_multiply_32_0_op1 = main_threadi_93;
	end
	/* main: %.thread.i*/
	/*   %115 = mul nsw i32 %97, %110*/
	else if ((cur_state == LEGUP_F_main_BB_threadi_43)) begin
		main_signed_multiply_32_0_op1 = main_threadi_110;
	end
	/* main: %.thread.i*/
	/*   %121 = mul nsw i32 %120, %120*/
	else if ((cur_state == LEGUP_F_main_BB_threadi_44)) begin
		main_signed_multiply_32_0_op1 = main_threadi_120;
	end
	/* main: %.thread.i*/
	/*   %167 = mul nsw i32 %132, %162*/
	else if ((cur_state == LEGUP_F_main_BB_threadi_45)) begin
		main_signed_multiply_32_0_op1 = main_threadi_162;
	end
	/* main: %187*/
	/*   %201 = mul nsw i32 %200, %200*/
	else if ((cur_state == LEGUP_F_main_BB__187_49)) begin
		main_signed_multiply_32_0_op1 = main_187_200;
	end
	/* main: %187*/
	/*   %214 = mul nsw i32 %213, %200*/
	else if ((cur_state == LEGUP_F_main_BB__187_50)) begin
		main_signed_multiply_32_0_op1 = main_187_200_reg;
	end
	/* main: %187*/
	/*   %224 = mul nsw i32 %223, %200*/
	else if ((cur_state == LEGUP_F_main_BB__187_51)) begin
		main_signed_multiply_32_0_op1 = main_187_200_reg;
	end
	/* main: %187*/
	/*   %234 = mul nsw i32 %233, %200*/
	else if ((cur_state == LEGUP_F_main_BB__187_52)) begin
		main_signed_multiply_32_0_op1 = main_187_200_reg;
	end
	/* main: %445*/
	/*   %448 = mul nsw i32 %446, %447*/
	else if ((cur_state == LEGUP_F_main_BB__445_136)) begin
		main_signed_multiply_32_0_op1 = main_445_447;
	end
	/* main: %467*/
	/*   %470 = mul nsw i32 %468, %469*/
	else if ((cur_state == LEGUP_F_main_BB__467_146)) begin
		main_signed_multiply_32_0_op1 = main_467_469;
	end
	/* main: %488*/
	/*   %490 = mul nsw i32 %489, %477*/
	else if ((cur_state == LEGUP_F_main_BB__488_158)) begin
		main_signed_multiply_32_0_op1 = main_gsm_mult_rexit6i_477_reg;
	end
	/* main: %Gsm_LPC_Analysis.exit*/
	/*   %529 = mul i32 %528, 40960*/
	else if ((cur_state == LEGUP_F_main_BB_Gsm_LPC_Analysisexit_180)) begin
		main_signed_multiply_32_0_op1 = 32'd40960;
	end
	/* main: %.thread.i4*/
	/*   %545 = mul i32 %544, 40960*/
	else if ((cur_state == LEGUP_F_main_BB_threadi4_188)) begin
		main_signed_multiply_32_0_op1 = 32'd40960;
	end
	/* main: %.thread98.i*/
	/*   %561 = mul i32 %560, 40960*/
	else if ((cur_state == LEGUP_F_main_BB_thread98i_196)) begin
		main_signed_multiply_32_0_op1 = 32'd40960;
	end
	/* main: %.thread102.i*/
	/*   %580 = mul i32 %579, 40960*/
	else if ((cur_state == LEGUP_F_main_BB_thread102i_206)) begin
		main_signed_multiply_32_0_op1 = 32'd40960;
	end
	/* main: %.thread107.i*/
	/*   %599 = mul i32 %598, 27928*/
	else if ((cur_state == LEGUP_F_main_BB_thread107i_216)) begin
		main_signed_multiply_32_0_op1 = 32'd27928;
	end
	/* main: %.thread112.i*/
	/*   %618 = mul i32 %617, 30720*/
	else if ((cur_state == LEGUP_F_main_BB_thread112i_226)) begin
		main_signed_multiply_32_0_op1 = 32'd30720;
	end
	/* main: %.thread117.i*/
	/*   %637 = mul i32 %636, 17068*/
	else if ((cur_state == LEGUP_F_main_BB_thread117i_236)) begin
		main_signed_multiply_32_0_op1 = 32'd17068;
	end
	/* main: %.thread122.i*/
	/*   %656 = mul i32 %655, 18072*/
	else /* if ((cur_state == LEGUP_F_main_BB_thread122i_246)) */ begin
		main_signed_multiply_32_0_op1 = 32'd18072;
	end
end
always @(*) begin
	lpm_mult_main_74_76_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %74*/
	/*   %76 = mul nsw i32 %75, %70*/
	if ((lpm_mult_main_74_76_en == 1'd1)) begin
		main_74_76_stage0_reg <= (main_signed_multiply_32_0_op0 * main_signed_multiply_32_0_op1);
	end
end
always @(*) begin
	main_signed_multiply_32_0 = main_74_76_stage0_reg;
end
always @(*) begin
	/* main: %12*/
	/*   %14 = sub i16 0, %10*/
	if ((cur_state == LEGUP_F_main_BB__12_10)) begin
		main_signed_subtract_16_0_op0 = 16'd0;
	end
	/* main: %337*/
	/*   %339 = sub i16 0, %335*/
	else if ((cur_state == LEGUP_F_main_BB__337_94)) begin
		main_signed_subtract_16_0_op0 = 16'd0;
	end
	/* main: %436*/
	/*   %437 = sub i16 0, %433*/
	else if ((cur_state == LEGUP_F_main_BB__436_131)) begin
		main_signed_subtract_16_0_op0 = 16'd0;
	end
	/* main: %506*/
	/*   %508 = sub i16 0, %504*/
	else if ((cur_state == LEGUP_F_main_BB__506_170)) begin
		main_signed_subtract_16_0_op0 = 16'd0;
	end
	/* main: %522*/
	/*   %523 = sub i16 0, %temp.0.i.i*/
	else /* if ((cur_state == LEGUP_F_main_BB__522_176)) */ begin
		main_signed_subtract_16_0_op0 = 16'd0;
	end
end
always @(*) begin
	/* main: %12*/
	/*   %14 = sub i16 0, %10*/
	if ((cur_state == LEGUP_F_main_BB__12_10)) begin
		main_signed_subtract_16_0_op1 = main_8_10_reg;
	end
	/* main: %337*/
	/*   %339 = sub i16 0, %335*/
	else if ((cur_state == LEGUP_F_main_BB__337_94)) begin
		main_signed_subtract_16_0_op1 = main_334_335_reg;
	end
	/* main: %436*/
	/*   %437 = sub i16 0, %433*/
	else if ((cur_state == LEGUP_F_main_BB__436_131)) begin
		main_signed_subtract_16_0_op1 = main_gsm_divexiti_433_reg;
	end
	/* main: %506*/
	/*   %508 = sub i16 0, %504*/
	else if ((cur_state == LEGUP_F_main_BB__506_170)) begin
		main_signed_subtract_16_0_op1 = main_Reflection_coefficientsexit_504_reg;
	end
	/* main: %522*/
	/*   %523 = sub i16 0, %temp.0.i.i*/
	else /* if ((cur_state == LEGUP_F_main_BB__522_176)) */ begin
		main_signed_subtract_16_0_op1 = main_522_temp0ii_reg;
	end
end
always @(*) begin
	main_signed_subtract_16_0 = (main_signed_subtract_16_0_op0 - main_signed_subtract_16_0_op1);
end
always @(*) begin
	/* main: %.thread.i*/
	/*   %125 = mul nsw i32 %102, %120*/
	if ((cur_state == LEGUP_F_main_BB_threadi_44)) begin
		main_signed_multiply_32_6_op0 = main_threadi_102_reg;
	end
	/* main: %.thread.i*/
	/*   %177 = mul nsw i32 %93, %162*/
	else /* if ((cur_state == LEGUP_F_main_BB_threadi_45)) */ begin
		main_signed_multiply_32_6_op0 = main_threadi_93_reg;
	end
end
always @(*) begin
	/* main: %.thread.i*/
	/*   %125 = mul nsw i32 %102, %120*/
	if ((cur_state == LEGUP_F_main_BB_threadi_44)) begin
		main_signed_multiply_32_6_op1 = main_threadi_120;
	end
	/* main: %.thread.i*/
	/*   %177 = mul nsw i32 %93, %162*/
	else /* if ((cur_state == LEGUP_F_main_BB_threadi_45)) */ begin
		main_signed_multiply_32_6_op1 = main_threadi_162;
	end
end
always @(*) begin
	lpm_mult_main_threadi_125_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %.thread.i*/
	/*   %125 = mul nsw i32 %102, %120*/
	if ((lpm_mult_main_threadi_125_en == 1'd1)) begin
		main_threadi_125_stage0_reg <= (main_signed_multiply_32_6_op0 * main_signed_multiply_32_6_op1);
	end
end
always @(*) begin
	main_signed_multiply_32_6 = main_threadi_125_stage0_reg;
end
always @(*) begin
	/* main: %.thread.i*/
	/*   %116 = add nsw i32 %115, %107*/
	if ((cur_state == LEGUP_F_main_BB_threadi_44)) begin
		main_signed_add_32_2_op0 = main_threadi_115;
	end
	/* main: %.thread.i*/
	/*   %126 = add nsw i32 %125, %116*/
	else if ((cur_state == LEGUP_F_main_BB_threadi_45)) begin
		main_signed_add_32_2_op0 = main_threadi_125;
	end
	/* main: %.thread.i*/
	/*   %164 = add nsw i32 %163, %148*/
	else if ((cur_state == LEGUP_F_main_BB_threadi_46)) begin
		main_signed_add_32_2_op0 = main_threadi_163;
	end
	/* main: %187*/
	/*   %gep44 = add i32 %gep_int43, -6*/
	else if ((cur_state == LEGUP_F_main_BB__187_48)) begin
		main_signed_add_32_2_op0 = main_187_gep_int43;
	end
	/* main: %gsm_norm.exit.i*/
	/*   %gep82 = add i32 %gep_int81, 6*/
	else if ((cur_state == LEGUP_F_main_BB_gsm_normexiti_76)) begin
		main_signed_add_32_2_op0 = main_gsm_normexiti_gep_int81;
	end
	/* main: %.preheader*/
	/*   %683 = add nsw i32 %682, %680*/
	else /* if ((cur_state == LEGUP_F_main_BB_preheader_255)) */ begin
		main_signed_add_32_2_op0 = main_preheader_682;
	end
end
always @(*) begin
	/* main: %.thread.i*/
	/*   %116 = add nsw i32 %115, %107*/
	if ((cur_state == LEGUP_F_main_BB_threadi_44)) begin
		main_signed_add_32_2_op1 = main_threadi_107;
	end
	/* main: %.thread.i*/
	/*   %126 = add nsw i32 %125, %116*/
	else if ((cur_state == LEGUP_F_main_BB_threadi_45)) begin
		main_signed_add_32_2_op1 = main_threadi_116_reg;
	end
	/* main: %.thread.i*/
	/*   %164 = add nsw i32 %163, %148*/
	else if ((cur_state == LEGUP_F_main_BB_threadi_46)) begin
		main_signed_add_32_2_op1 = main_threadi_148;
	end
	/* main: %187*/
	/*   %gep44 = add i32 %gep_int43, -6*/
	else if ((cur_state == LEGUP_F_main_BB__187_48)) begin
		main_signed_add_32_2_op1 = -32'd6;
	end
	/* main: %gsm_norm.exit.i*/
	/*   %gep82 = add i32 %gep_int81, 6*/
	else if ((cur_state == LEGUP_F_main_BB_gsm_normexiti_76)) begin
		main_signed_add_32_2_op1 = 32'd6;
	end
	/* main: %.preheader*/
	/*   %683 = add nsw i32 %682, %680*/
	else /* if ((cur_state == LEGUP_F_main_BB_preheader_255)) */ begin
		main_signed_add_32_2_op1 = main_preheader_680;
	end
end
always @(*) begin
	main_signed_add_32_2 = (main_signed_add_32_2_op0 + main_signed_add_32_2_op1);
end
always @(*) begin
	/* main: %.thread.i*/
	/*   %117 = mul nsw i32 %93, %110*/
	if ((cur_state == LEGUP_F_main_BB_threadi_43)) begin
		main_signed_multiply_32_11_op0 = main_threadi_93_reg;
	end
	/* main: %.thread.i*/
	/*   %127 = mul nsw i32 %97, %120*/
	else if ((cur_state == LEGUP_F_main_BB_threadi_44)) begin
		main_signed_multiply_32_11_op0 = main_threadi_97_reg;
	end
	/* main: %.thread.i*/
	/*   %149 = mul nsw i32 %132, %146*/
	else /* if ((cur_state == LEGUP_F_main_BB_threadi_45)) */ begin
		main_signed_multiply_32_11_op0 = main_threadi_132_reg;
	end
end
always @(*) begin
	/* main: %.thread.i*/
	/*   %117 = mul nsw i32 %93, %110*/
	if ((cur_state == LEGUP_F_main_BB_threadi_43)) begin
		main_signed_multiply_32_11_op1 = main_threadi_110;
	end
	/* main: %.thread.i*/
	/*   %127 = mul nsw i32 %97, %120*/
	else if ((cur_state == LEGUP_F_main_BB_threadi_44)) begin
		main_signed_multiply_32_11_op1 = main_threadi_120;
	end
	/* main: %.thread.i*/
	/*   %149 = mul nsw i32 %132, %146*/
	else /* if ((cur_state == LEGUP_F_main_BB_threadi_45)) */ begin
		main_signed_multiply_32_11_op1 = main_threadi_146;
	end
end
always @(*) begin
	lpm_mult_main_threadi_127_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %.thread.i*/
	/*   %127 = mul nsw i32 %97, %120*/
	if ((lpm_mult_main_threadi_127_en == 1'd1)) begin
		main_threadi_127_stage0_reg <= (main_signed_multiply_32_11_op0 * main_signed_multiply_32_11_op1);
	end
end
always @(*) begin
	main_signed_multiply_32_11 = main_threadi_127_stage0_reg;
end
always @(*) begin
	/* main: %.thread.i*/
	/*   %gep34 = add i32 %gep_int33, 12*/
	if ((cur_state == LEGUP_F_main_BB_threadi_41)) begin
		main_signed_add_32_12_op0 = main_threadi_gep_int33;
	end
	/* main: %.thread.i*/
	/*   %114 = add nsw i32 %113, %106*/
	else if ((cur_state == LEGUP_F_main_BB_threadi_44)) begin
		main_signed_add_32_12_op0 = main_threadi_113;
	end
	/* main: %.thread.i*/
	/*   %128 = add nsw i32 %127, %117*/
	else if ((cur_state == LEGUP_F_main_BB_threadi_45)) begin
		main_signed_add_32_12_op0 = main_threadi_127;
	end
	/* main: %.thread.i*/
	/*   %176 = add nsw i32 %175, %159*/
	else if ((cur_state == LEGUP_F_main_BB_threadi_46)) begin
		main_signed_add_32_12_op0 = main_threadi_175;
	end
	/* main: %187*/
	/*   %gep42 = add i32 %gep_int41, -4*/
	else if ((cur_state == LEGUP_F_main_BB__187_48)) begin
		main_signed_add_32_12_op0 = main_187_gep_int41;
	end
	/* main: %187*/
	/*   %210 = add nsw i32 %209, %195*/
	else if ((cur_state == LEGUP_F_main_BB__187_50)) begin
		main_signed_add_32_12_op0 = main_187_209;
	end
	/* main: %gsm_norm.exit.i*/
	/*   %gep103 = add i32 %gep_int102, 12*/
	else if ((cur_state == LEGUP_F_main_BB_gsm_normexiti_76)) begin
		main_signed_add_32_12_op0 = main_gsm_normexiti_gep_int102;
	end
	/* main: %.preheader*/
	/*   %680 = add nsw i32 %679, %677*/
	else /* if ((cur_state == LEGUP_F_main_BB_preheader_255)) */ begin
		main_signed_add_32_12_op0 = main_preheader_679;
	end
end
always @(*) begin
	/* main: %.thread.i*/
	/*   %gep34 = add i32 %gep_int33, 12*/
	if ((cur_state == LEGUP_F_main_BB_threadi_41)) begin
		main_signed_add_32_12_op1 = 32'd12;
	end
	/* main: %.thread.i*/
	/*   %114 = add nsw i32 %113, %106*/
	else if ((cur_state == LEGUP_F_main_BB_threadi_44)) begin
		main_signed_add_32_12_op1 = main_threadi_106;
	end
	/* main: %.thread.i*/
	/*   %128 = add nsw i32 %127, %117*/
	else if ((cur_state == LEGUP_F_main_BB_threadi_45)) begin
		main_signed_add_32_12_op1 = main_threadi_117_reg;
	end
	/* main: %.thread.i*/
	/*   %176 = add nsw i32 %175, %159*/
	else if ((cur_state == LEGUP_F_main_BB_threadi_46)) begin
		main_signed_add_32_12_op1 = main_threadi_159;
	end
	/* main: %187*/
	/*   %gep42 = add i32 %gep_int41, -4*/
	else if ((cur_state == LEGUP_F_main_BB__187_48)) begin
		main_signed_add_32_12_op1 = -32'd4;
	end
	/* main: %187*/
	/*   %210 = add nsw i32 %209, %195*/
	else if ((cur_state == LEGUP_F_main_BB__187_50)) begin
		main_signed_add_32_12_op1 = main_187_195_reg;
	end
	/* main: %gsm_norm.exit.i*/
	/*   %gep103 = add i32 %gep_int102, 12*/
	else if ((cur_state == LEGUP_F_main_BB_gsm_normexiti_76)) begin
		main_signed_add_32_12_op1 = 32'd12;
	end
	/* main: %.preheader*/
	/*   %680 = add nsw i32 %679, %677*/
	else /* if ((cur_state == LEGUP_F_main_BB_preheader_255)) */ begin
		main_signed_add_32_12_op1 = main_preheader_677;
	end
end
always @(*) begin
	main_signed_add_32_12 = (main_signed_add_32_12_op0 + main_signed_add_32_12_op1);
end
always @(*) begin
	/* main: %.thread.i*/
	/*   %106 = mul nsw i32 %97, %105*/
	if ((cur_state == LEGUP_F_main_BB_threadi_43)) begin
		main_signed_multiply_32_10_op0 = main_threadi_97_reg;
	end
	/* main: %.thread.i*/
	/*   %129 = mul nsw i32 %93, %120*/
	else if ((cur_state == LEGUP_F_main_BB_threadi_44)) begin
		main_signed_multiply_32_10_op0 = main_threadi_93_reg;
	end
	/* main: %.thread.i*/
	/*   %171 = mul nsw i32 %110, %162*/
	else /* if ((cur_state == LEGUP_F_main_BB_threadi_45)) */ begin
		main_signed_multiply_32_10_op0 = main_threadi_110_reg;
	end
end
always @(*) begin
	/* main: %.thread.i*/
	/*   %106 = mul nsw i32 %97, %105*/
	if ((cur_state == LEGUP_F_main_BB_threadi_43)) begin
		main_signed_multiply_32_10_op1 = main_threadi_105;
	end
	/* main: %.thread.i*/
	/*   %129 = mul nsw i32 %93, %120*/
	else if ((cur_state == LEGUP_F_main_BB_threadi_44)) begin
		main_signed_multiply_32_10_op1 = main_threadi_120;
	end
	/* main: %.thread.i*/
	/*   %171 = mul nsw i32 %110, %162*/
	else /* if ((cur_state == LEGUP_F_main_BB_threadi_45)) */ begin
		main_signed_multiply_32_10_op1 = main_threadi_162;
	end
end
always @(*) begin
	lpm_mult_main_threadi_129_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %.thread.i*/
	/*   %129 = mul nsw i32 %93, %120*/
	if ((lpm_mult_main_threadi_129_en == 1'd1)) begin
		main_threadi_129_stage0_reg <= (main_signed_multiply_32_10_op0 * main_signed_multiply_32_10_op1);
	end
end
always @(*) begin
	main_signed_multiply_32_10 = main_threadi_129_stage0_reg;
end
always @(*) begin
	/* main: %.thread.i*/
	/*   %gep32 = add i32 %gep_int31, 10*/
	if ((cur_state == LEGUP_F_main_BB_threadi_41)) begin
		main_signed_add_32_11_op0 = main_threadi_gep_int31;
	end
	/* main: %.thread.i*/
	/*   %138 = add nsw i32 %137, %126*/
	else if ((cur_state == LEGUP_F_main_BB_threadi_45)) begin
		main_signed_add_32_11_op0 = main_threadi_137;
	end
	/* main: %.thread.i*/
	/*   %170 = add nsw i32 %169, %154*/
	else if ((cur_state == LEGUP_F_main_BB_threadi_46)) begin
		main_signed_add_32_11_op0 = main_threadi_169;
	end
	/* main: %187*/
	/*   %gep50 = add i32 %gep_int49, -12*/
	else if ((cur_state == LEGUP_F_main_BB__187_48)) begin
		main_signed_add_32_11_op0 = main_187_gep_int49;
	end
	/* main: %gsm_norm.exit.i*/
	/*   %gep101 = add i32 %gep_int100, 10*/
	else if ((cur_state == LEGUP_F_main_BB_gsm_normexiti_76)) begin
		main_signed_add_32_11_op0 = main_gsm_normexiti_gep_int100;
	end
	/* main: %.preheader*/
	/*   %686 = add nsw i32 %685, %683*/
	else /* if ((cur_state == LEGUP_F_main_BB_preheader_255)) */ begin
		main_signed_add_32_11_op0 = main_preheader_685;
	end
end
always @(*) begin
	/* main: %.thread.i*/
	/*   %gep32 = add i32 %gep_int31, 10*/
	if ((cur_state == LEGUP_F_main_BB_threadi_41)) begin
		main_signed_add_32_11_op1 = 32'd10;
	end
	/* main: %.thread.i*/
	/*   %138 = add nsw i32 %137, %126*/
	else if ((cur_state == LEGUP_F_main_BB_threadi_45)) begin
		main_signed_add_32_11_op1 = main_threadi_126;
	end
	/* main: %.thread.i*/
	/*   %170 = add nsw i32 %169, %154*/
	else if ((cur_state == LEGUP_F_main_BB_threadi_46)) begin
		main_signed_add_32_11_op1 = main_threadi_154;
	end
	/* main: %187*/
	/*   %gep50 = add i32 %gep_int49, -12*/
	else if ((cur_state == LEGUP_F_main_BB__187_48)) begin
		main_signed_add_32_11_op1 = -32'd12;
	end
	/* main: %gsm_norm.exit.i*/
	/*   %gep101 = add i32 %gep_int100, 10*/
	else if ((cur_state == LEGUP_F_main_BB_gsm_normexiti_76)) begin
		main_signed_add_32_11_op1 = 32'd10;
	end
	/* main: %.preheader*/
	/*   %686 = add nsw i32 %685, %683*/
	else /* if ((cur_state == LEGUP_F_main_BB_preheader_255)) */ begin
		main_signed_add_32_11_op1 = main_preheader_683;
	end
end
always @(*) begin
	main_signed_add_32_11 = (main_signed_add_32_11_op0 + main_signed_add_32_11_op1);
end
always @(*) begin
	/* main: %.thread.i*/
	/*   %133 = mul nsw i32 %132, %132*/
	if ((cur_state == LEGUP_F_main_BB_threadi_44)) begin
		main_signed_multiply_32_7_op0 = main_threadi_132;
	end
	/* main: %.thread.i*/
	/*   %155 = mul nsw i32 %102, %146*/
	else /* if ((cur_state == LEGUP_F_main_BB_threadi_45)) */ begin
		main_signed_multiply_32_7_op0 = main_threadi_102_reg;
	end
end
always @(*) begin
	/* main: %.thread.i*/
	/*   %133 = mul nsw i32 %132, %132*/
	if ((cur_state == LEGUP_F_main_BB_threadi_44)) begin
		main_signed_multiply_32_7_op1 = main_threadi_132;
	end
	/* main: %.thread.i*/
	/*   %155 = mul nsw i32 %102, %146*/
	else /* if ((cur_state == LEGUP_F_main_BB_threadi_45)) */ begin
		main_signed_multiply_32_7_op1 = main_threadi_146;
	end
end
always @(*) begin
	lpm_mult_main_threadi_133_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %.thread.i*/
	/*   %133 = mul nsw i32 %132, %132*/
	if ((lpm_mult_main_threadi_133_en == 1'd1)) begin
		main_threadi_133_stage0_reg <= (main_signed_multiply_32_7_op0 * main_signed_multiply_32_7_op1);
	end
end
always @(*) begin
	main_signed_multiply_32_7 = main_threadi_133_stage0_reg;
end
always @(*) begin
	/* main: %.thread.i*/
	/*   %gep28 = add i32 %gep_int27, 6*/
	if ((cur_state == LEGUP_F_main_BB_threadi_41)) begin
		main_signed_add_32_9_op0 = main_threadi_gep_int27;
	end
	/* main: %.thread.i*/
	/*   %134 = add nuw nsw i32 %133, %122*/
	else if ((cur_state == LEGUP_F_main_BB_threadi_45)) begin
		main_signed_add_32_9_op0 = main_threadi_133;
	end
	/* main: %.thread.i*/
	/*   %166 = add nsw i32 %165, %150*/
	else if ((cur_state == LEGUP_F_main_BB_threadi_46)) begin
		main_signed_add_32_9_op0 = main_threadi_165;
	end
	/* main: %187*/
	/*   %gep46 = add i32 %gep_int45, -8*/
	else if ((cur_state == LEGUP_F_main_BB__187_48)) begin
		main_signed_add_32_9_op0 = main_187_gep_int45;
	end
	/* main: %gsm_norm.exit.i*/
	/*   %gep97 = add i32 %gep_int96, 6*/
	else if ((cur_state == LEGUP_F_main_BB_gsm_normexiti_76)) begin
		main_signed_add_32_9_op0 = main_gsm_normexiti_gep_int96;
	end
	/* main: %.preheader*/
	/*   %689 = add nsw i32 %688, %686*/
	else /* if ((cur_state == LEGUP_F_main_BB_preheader_255)) */ begin
		main_signed_add_32_9_op0 = main_preheader_688;
	end
end
always @(*) begin
	/* main: %.thread.i*/
	/*   %gep28 = add i32 %gep_int27, 6*/
	if ((cur_state == LEGUP_F_main_BB_threadi_41)) begin
		main_signed_add_32_9_op1 = 32'd6;
	end
	/* main: %.thread.i*/
	/*   %134 = add nuw nsw i32 %133, %122*/
	else if ((cur_state == LEGUP_F_main_BB_threadi_45)) begin
		main_signed_add_32_9_op1 = main_threadi_122;
	end
	/* main: %.thread.i*/
	/*   %166 = add nsw i32 %165, %150*/
	else if ((cur_state == LEGUP_F_main_BB_threadi_46)) begin
		main_signed_add_32_9_op1 = main_threadi_150;
	end
	/* main: %187*/
	/*   %gep46 = add i32 %gep_int45, -8*/
	else if ((cur_state == LEGUP_F_main_BB__187_48)) begin
		main_signed_add_32_9_op1 = -32'd8;
	end
	/* main: %gsm_norm.exit.i*/
	/*   %gep97 = add i32 %gep_int96, 6*/
	else if ((cur_state == LEGUP_F_main_BB_gsm_normexiti_76)) begin
		main_signed_add_32_9_op1 = 32'd6;
	end
	/* main: %.preheader*/
	/*   %689 = add nsw i32 %688, %686*/
	else /* if ((cur_state == LEGUP_F_main_BB_preheader_255)) */ begin
		main_signed_add_32_9_op1 = main_preheader_686;
	end
end
always @(*) begin
	main_signed_add_32_9 = (main_signed_add_32_9_op0 + main_signed_add_32_9_op1);
end
always @(*) begin
	/* main: %.thread.i*/
	/*   %135 = mul nsw i32 %120, %132*/
	if ((cur_state == LEGUP_F_main_BB_threadi_44)) begin
		main_signed_multiply_32_8_op0 = main_threadi_120;
	end
	/* main: %.thread.i*/
	/*   %163 = mul nsw i32 %162, %162*/
	else /* if ((cur_state == LEGUP_F_main_BB_threadi_45)) */ begin
		main_signed_multiply_32_8_op0 = main_threadi_162;
	end
end
always @(*) begin
	/* main: %.thread.i*/
	/*   %135 = mul nsw i32 %120, %132*/
	if ((cur_state == LEGUP_F_main_BB_threadi_44)) begin
		main_signed_multiply_32_8_op1 = main_threadi_132;
	end
	/* main: %.thread.i*/
	/*   %163 = mul nsw i32 %162, %162*/
	else /* if ((cur_state == LEGUP_F_main_BB_threadi_45)) */ begin
		main_signed_multiply_32_8_op1 = main_threadi_162;
	end
end
always @(*) begin
	lpm_mult_main_threadi_135_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %.thread.i*/
	/*   %135 = mul nsw i32 %120, %132*/
	if ((lpm_mult_main_threadi_135_en == 1'd1)) begin
		main_threadi_135_stage0_reg <= (main_signed_multiply_32_8_op0 * main_signed_multiply_32_8_op1);
	end
end
always @(*) begin
	main_signed_multiply_32_8 = main_threadi_135_stage0_reg;
end
always @(*) begin
	/* main: %.thread.i*/
	/*   %gep30 = add i32 %gep_int29, 8*/
	if ((cur_state == LEGUP_F_main_BB_threadi_41)) begin
		main_signed_add_32_10_op0 = main_threadi_gep_int29;
	end
	/* main: %.thread.i*/
	/*   %136 = add nsw i32 %135, %124*/
	else if ((cur_state == LEGUP_F_main_BB_threadi_45)) begin
		main_signed_add_32_10_op0 = main_threadi_135;
	end
	/* main: %.thread.i*/
	/*   %168 = add nsw i32 %167, %152*/
	else if ((cur_state == LEGUP_F_main_BB_threadi_46)) begin
		main_signed_add_32_10_op0 = main_threadi_167;
	end
	/* main: %187*/
	/*   %gep48 = add i32 %gep_int47, -10*/
	else if ((cur_state == LEGUP_F_main_BB__187_48)) begin
		main_signed_add_32_10_op0 = main_187_gep_int47;
	end
	/* main: %gsm_norm.exit.i*/
	/*   %gep99 = add i32 %gep_int98, 8*/
	else if ((cur_state == LEGUP_F_main_BB_gsm_normexiti_76)) begin
		main_signed_add_32_10_op0 = main_gsm_normexiti_gep_int98;
	end
	/* main: %.preheader*/
	/*   %692 = add nsw i32 %691, %689*/
	else /* if ((cur_state == LEGUP_F_main_BB_preheader_255)) */ begin
		main_signed_add_32_10_op0 = main_preheader_691;
	end
end
always @(*) begin
	/* main: %.thread.i*/
	/*   %gep30 = add i32 %gep_int29, 8*/
	if ((cur_state == LEGUP_F_main_BB_threadi_41)) begin
		main_signed_add_32_10_op1 = 32'd8;
	end
	/* main: %.thread.i*/
	/*   %136 = add nsw i32 %135, %124*/
	else if ((cur_state == LEGUP_F_main_BB_threadi_45)) begin
		main_signed_add_32_10_op1 = main_threadi_124;
	end
	/* main: %.thread.i*/
	/*   %168 = add nsw i32 %167, %152*/
	else if ((cur_state == LEGUP_F_main_BB_threadi_46)) begin
		main_signed_add_32_10_op1 = main_threadi_152;
	end
	/* main: %187*/
	/*   %gep48 = add i32 %gep_int47, -10*/
	else if ((cur_state == LEGUP_F_main_BB__187_48)) begin
		main_signed_add_32_10_op1 = -32'd10;
	end
	/* main: %gsm_norm.exit.i*/
	/*   %gep99 = add i32 %gep_int98, 8*/
	else if ((cur_state == LEGUP_F_main_BB_gsm_normexiti_76)) begin
		main_signed_add_32_10_op1 = 32'd8;
	end
	/* main: %.preheader*/
	/*   %692 = add nsw i32 %691, %689*/
	else /* if ((cur_state == LEGUP_F_main_BB_preheader_255)) */ begin
		main_signed_add_32_10_op1 = main_preheader_689;
	end
end
always @(*) begin
	main_signed_add_32_10 = (main_signed_add_32_10_op0 + main_signed_add_32_10_op1);
end
always @(*) begin
	/* main: %.thread.i*/
	/*   %98 = mul nsw i32 %97, %97*/
	if ((cur_state == LEGUP_F_main_BB_threadi_42)) begin
		main_signed_multiply_32_14_op0 = main_threadi_97;
	end
	/* main: %.thread.i*/
	/*   %103 = mul nsw i32 %102, %102*/
	else if ((cur_state == LEGUP_F_main_BB_threadi_43)) begin
		main_signed_multiply_32_14_op0 = main_threadi_102;
	end
	/* main: %.thread.i*/
	/*   %137 = mul nsw i32 %110, %132*/
	else if ((cur_state == LEGUP_F_main_BB_threadi_44)) begin
		main_signed_multiply_32_14_op0 = main_threadi_110_reg;
	end
	/* main: %.thread.i*/
	/*   %151 = mul nsw i32 %120, %146*/
	else if ((cur_state == LEGUP_F_main_BB_threadi_45)) begin
		main_signed_multiply_32_14_op0 = main_threadi_120_reg;
	end
	/* main: %187*/
	/*   %204 = mul nsw i32 %203, %200*/
	else if ((cur_state == LEGUP_F_main_BB__187_49)) begin
		main_signed_multiply_32_14_op0 = main_187_203_reg;
	end
	/* main: %187*/
	/*   %219 = mul nsw i32 %218, %200*/
	else if ((cur_state == LEGUP_F_main_BB__187_50)) begin
		main_signed_multiply_32_14_op0 = main_187_218;
	end
	/* main: %187*/
	/*   %229 = mul nsw i32 %228, %200*/
	else if ((cur_state == LEGUP_F_main_BB__187_51)) begin
		main_signed_multiply_32_14_op0 = main_187_228;
	end
	/* main: %187*/
	/*   %239 = mul nsw i32 %238, %200*/
	else /* if ((cur_state == LEGUP_F_main_BB__187_52)) */ begin
		main_signed_multiply_32_14_op0 = main_187_238;
	end
end
always @(*) begin
	/* main: %.thread.i*/
	/*   %98 = mul nsw i32 %97, %97*/
	if ((cur_state == LEGUP_F_main_BB_threadi_42)) begin
		main_signed_multiply_32_14_op1 = main_threadi_97;
	end
	/* main: %.thread.i*/
	/*   %103 = mul nsw i32 %102, %102*/
	else if ((cur_state == LEGUP_F_main_BB_threadi_43)) begin
		main_signed_multiply_32_14_op1 = main_threadi_102;
	end
	/* main: %.thread.i*/
	/*   %137 = mul nsw i32 %110, %132*/
	else if ((cur_state == LEGUP_F_main_BB_threadi_44)) begin
		main_signed_multiply_32_14_op1 = main_threadi_132;
	end
	/* main: %.thread.i*/
	/*   %151 = mul nsw i32 %120, %146*/
	else if ((cur_state == LEGUP_F_main_BB_threadi_45)) begin
		main_signed_multiply_32_14_op1 = main_threadi_146;
	end
	/* main: %187*/
	/*   %204 = mul nsw i32 %203, %200*/
	else if ((cur_state == LEGUP_F_main_BB__187_49)) begin
		main_signed_multiply_32_14_op1 = main_187_200;
	end
	/* main: %187*/
	/*   %219 = mul nsw i32 %218, %200*/
	else if ((cur_state == LEGUP_F_main_BB__187_50)) begin
		main_signed_multiply_32_14_op1 = main_187_200_reg;
	end
	/* main: %187*/
	/*   %229 = mul nsw i32 %228, %200*/
	else if ((cur_state == LEGUP_F_main_BB__187_51)) begin
		main_signed_multiply_32_14_op1 = main_187_200_reg;
	end
	/* main: %187*/
	/*   %239 = mul nsw i32 %238, %200*/
	else /* if ((cur_state == LEGUP_F_main_BB__187_52)) */ begin
		main_signed_multiply_32_14_op1 = main_187_200_reg;
	end
end
always @(*) begin
	lpm_mult_main_threadi_137_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %.thread.i*/
	/*   %137 = mul nsw i32 %110, %132*/
	if ((lpm_mult_main_threadi_137_en == 1'd1)) begin
		main_threadi_137_stage0_reg <= (main_signed_multiply_32_14_op0 * main_signed_multiply_32_14_op1);
	end
end
always @(*) begin
	main_signed_multiply_32_14 = main_threadi_137_stage0_reg;
end
always @(*) begin
	/* main: %.thread.i*/
	/*   %111 = mul nsw i32 %110, %110*/
	if ((cur_state == LEGUP_F_main_BB_threadi_43)) begin
		main_signed_multiply_32_12_op0 = main_threadi_110;
	end
	/* main: %.thread.i*/
	/*   %139 = mul nsw i32 %102, %132*/
	else if ((cur_state == LEGUP_F_main_BB_threadi_44)) begin
		main_signed_multiply_32_12_op0 = main_threadi_102_reg;
	end
	/* main: %.thread.i*/
	/*   %165 = mul nsw i32 %146, %162*/
	else /* if ((cur_state == LEGUP_F_main_BB_threadi_45)) */ begin
		main_signed_multiply_32_12_op0 = main_threadi_146;
	end
end
always @(*) begin
	/* main: %.thread.i*/
	/*   %111 = mul nsw i32 %110, %110*/
	if ((cur_state == LEGUP_F_main_BB_threadi_43)) begin
		main_signed_multiply_32_12_op1 = main_threadi_110;
	end
	/* main: %.thread.i*/
	/*   %139 = mul nsw i32 %102, %132*/
	else if ((cur_state == LEGUP_F_main_BB_threadi_44)) begin
		main_signed_multiply_32_12_op1 = main_threadi_132;
	end
	/* main: %.thread.i*/
	/*   %165 = mul nsw i32 %146, %162*/
	else /* if ((cur_state == LEGUP_F_main_BB_threadi_45)) */ begin
		main_signed_multiply_32_12_op1 = main_threadi_162;
	end
end
always @(*) begin
	lpm_mult_main_threadi_139_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %.thread.i*/
	/*   %139 = mul nsw i32 %102, %132*/
	if ((lpm_mult_main_threadi_139_en == 1'd1)) begin
		main_threadi_139_stage0_reg <= (main_signed_multiply_32_12_op0 * main_signed_multiply_32_12_op1);
	end
end
always @(*) begin
	main_signed_multiply_32_12 = main_threadi_139_stage0_reg;
end
always @(*) begin
	/* main: %.thread.i*/
	/*   %140 = add nsw i32 %139, %128*/
	if ((cur_state == LEGUP_F_main_BB_threadi_45)) begin
		main_signed_add_32_7_op0 = main_threadi_139;
	end
	/* main: %.thread.i*/
	/*   %152 = add nsw i32 %151, %138*/
	else if ((cur_state == LEGUP_F_main_BB_threadi_46)) begin
		main_signed_add_32_7_op0 = main_threadi_151;
	end
	/* main: %187*/
	/*   %gep52 = add i32 %gep_int51, -14*/
	else if ((cur_state == LEGUP_F_main_BB__187_48)) begin
		main_signed_add_32_7_op0 = main_187_gep_int51;
	end
	/* main: %gsm_norm.exit.i*/
	/*   %gep93 = add i32 %gep_int92, 2*/
	else /* if ((cur_state == LEGUP_F_main_BB_gsm_normexiti_76)) */ begin
		main_signed_add_32_7_op0 = main_gsm_normexiti_gep_int92;
	end
end
always @(*) begin
	/* main: %.thread.i*/
	/*   %140 = add nsw i32 %139, %128*/
	if ((cur_state == LEGUP_F_main_BB_threadi_45)) begin
		main_signed_add_32_7_op1 = main_threadi_128;
	end
	/* main: %.thread.i*/
	/*   %152 = add nsw i32 %151, %138*/
	else if ((cur_state == LEGUP_F_main_BB_threadi_46)) begin
		main_signed_add_32_7_op1 = main_threadi_138_reg;
	end
	/* main: %187*/
	/*   %gep52 = add i32 %gep_int51, -14*/
	else if ((cur_state == LEGUP_F_main_BB__187_48)) begin
		main_signed_add_32_7_op1 = -32'd14;
	end
	/* main: %gsm_norm.exit.i*/
	/*   %gep93 = add i32 %gep_int92, 2*/
	else /* if ((cur_state == LEGUP_F_main_BB_gsm_normexiti_76)) */ begin
		main_signed_add_32_7_op1 = 32'd2;
	end
end
always @(*) begin
	main_signed_add_32_7 = (main_signed_add_32_7_op0 + main_signed_add_32_7_op1);
end
always @(*) begin
	/* main: %.thread.i*/
	/*   %113 = mul nsw i32 %102, %110*/
	if ((cur_state == LEGUP_F_main_BB_threadi_43)) begin
		main_signed_multiply_32_13_op0 = main_threadi_102;
	end
	/* main: %.thread.i*/
	/*   %141 = mul nsw i32 %97, %132*/
	else if ((cur_state == LEGUP_F_main_BB_threadi_44)) begin
		main_signed_multiply_32_13_op0 = main_threadi_97_reg;
	end
	/* main: %.thread.i*/
	/*   %147 = mul nsw i32 %146, %146*/
	else /* if ((cur_state == LEGUP_F_main_BB_threadi_45)) */ begin
		main_signed_multiply_32_13_op0 = main_threadi_146;
	end
end
always @(*) begin
	/* main: %.thread.i*/
	/*   %113 = mul nsw i32 %102, %110*/
	if ((cur_state == LEGUP_F_main_BB_threadi_43)) begin
		main_signed_multiply_32_13_op1 = main_threadi_110;
	end
	/* main: %.thread.i*/
	/*   %141 = mul nsw i32 %97, %132*/
	else if ((cur_state == LEGUP_F_main_BB_threadi_44)) begin
		main_signed_multiply_32_13_op1 = main_threadi_132;
	end
	/* main: %.thread.i*/
	/*   %147 = mul nsw i32 %146, %146*/
	else /* if ((cur_state == LEGUP_F_main_BB_threadi_45)) */ begin
		main_signed_multiply_32_13_op1 = main_threadi_146;
	end
end
always @(*) begin
	lpm_mult_main_threadi_141_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %.thread.i*/
	/*   %141 = mul nsw i32 %97, %132*/
	if ((lpm_mult_main_threadi_141_en == 1'd1)) begin
		main_threadi_141_stage0_reg <= (main_signed_multiply_32_13_op0 * main_signed_multiply_32_13_op1);
	end
end
always @(*) begin
	main_signed_multiply_32_13 = main_threadi_141_stage0_reg;
end
always @(*) begin
	/* main: %.thread.i*/
	/*   %142 = add nsw i32 %141, %129*/
	if ((cur_state == LEGUP_F_main_BB_threadi_45)) begin
		main_signed_add_32_8_op0 = main_threadi_141;
	end
	/* main: %.thread.i*/
	/*   %154 = add nsw i32 %153, %140*/
	else if ((cur_state == LEGUP_F_main_BB_threadi_46)) begin
		main_signed_add_32_8_op0 = main_threadi_153;
	end
	/* main: %187*/
	/*   %241 = add nsw i32 %i.010.i, 1*/
	else if ((cur_state == LEGUP_F_main_BB__187_48)) begin
		main_signed_add_32_8_op0 = main_187_i010i_reg;
	end
	/* main: %gsm_norm.exit.i*/
	/*   %gep95 = add i32 %gep_int94, 4*/
	else /* if ((cur_state == LEGUP_F_main_BB_gsm_normexiti_76)) */ begin
		main_signed_add_32_8_op0 = main_gsm_normexiti_gep_int94;
	end
end
always @(*) begin
	/* main: %.thread.i*/
	/*   %142 = add nsw i32 %141, %129*/
	if ((cur_state == LEGUP_F_main_BB_threadi_45)) begin
		main_signed_add_32_8_op1 = main_threadi_129;
	end
	/* main: %.thread.i*/
	/*   %154 = add nsw i32 %153, %140*/
	else if ((cur_state == LEGUP_F_main_BB_threadi_46)) begin
		main_signed_add_32_8_op1 = main_threadi_140_reg;
	end
	/* main: %187*/
	/*   %241 = add nsw i32 %i.010.i, 1*/
	else if ((cur_state == LEGUP_F_main_BB__187_48)) begin
		main_signed_add_32_8_op1 = 32'd1;
	end
	/* main: %gsm_norm.exit.i*/
	/*   %gep95 = add i32 %gep_int94, 4*/
	else /* if ((cur_state == LEGUP_F_main_BB_gsm_normexiti_76)) */ begin
		main_signed_add_32_8_op1 = 32'd4;
	end
end
always @(*) begin
	main_signed_add_32_8 = (main_signed_add_32_8_op0 + main_signed_add_32_8_op1);
end
always @(*) begin
	/* main: %.thread.i*/
	/*   %143 = mul nsw i32 %93, %132*/
	if ((cur_state == LEGUP_F_main_BB_threadi_44)) begin
		main_signed_multiply_32_5_op0 = main_threadi_93_reg;
	end
	/* main: %.thread.i*/
	/*   %169 = mul nsw i32 %120, %162*/
	else /* if ((cur_state == LEGUP_F_main_BB_threadi_45)) */ begin
		main_signed_multiply_32_5_op0 = main_threadi_120_reg;
	end
end
always @(*) begin
	/* main: %.thread.i*/
	/*   %143 = mul nsw i32 %93, %132*/
	if ((cur_state == LEGUP_F_main_BB_threadi_44)) begin
		main_signed_multiply_32_5_op1 = main_threadi_132;
	end
	/* main: %.thread.i*/
	/*   %169 = mul nsw i32 %120, %162*/
	else /* if ((cur_state == LEGUP_F_main_BB_threadi_45)) */ begin
		main_signed_multiply_32_5_op1 = main_threadi_162;
	end
end
always @(*) begin
	lpm_mult_main_threadi_143_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %.thread.i*/
	/*   %143 = mul nsw i32 %93, %132*/
	if ((lpm_mult_main_threadi_143_en == 1'd1)) begin
		main_threadi_143_stage0_reg <= (main_signed_multiply_32_5_op0 * main_signed_multiply_32_5_op1);
	end
end
always @(*) begin
	main_signed_multiply_32_5 = main_threadi_143_stage0_reg;
end
always @(*) begin
	/* main: %.thread.i*/
	/*   %153 = mul nsw i32 %110, %146*/
		main_signed_multiply_32_2_op0 = main_threadi_110_reg;
end
always @(*) begin
	/* main: %.thread.i*/
	/*   %153 = mul nsw i32 %110, %146*/
		main_signed_multiply_32_2_op1 = main_threadi_146;
end
always @(*) begin
	lpm_mult_main_threadi_153_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %.thread.i*/
	/*   %153 = mul nsw i32 %110, %146*/
	if ((lpm_mult_main_threadi_153_en == 1'd1)) begin
		main_threadi_153_stage0_reg <= (main_signed_multiply_32_2_op0 * main_signed_multiply_32_2_op1);
	end
end
always @(*) begin
	main_signed_multiply_32_2 = main_threadi_153_stage0_reg;
end
always @(*) begin
	/* main: %.thread.i*/
	/*   %156 = add nsw i32 %155, %142*/
	if ((cur_state == LEGUP_F_main_BB_threadi_46)) begin
		main_signed_add_32_5_op0 = main_threadi_155;
	end
	/* main: %gsm_norm.exit.i*/
	/*   %gep88 = add i32 %gep_int87, 12*/
	else /* if ((cur_state == LEGUP_F_main_BB_gsm_normexiti_76)) */ begin
		main_signed_add_32_5_op0 = main_gsm_normexiti_gep_int87;
	end
end
always @(*) begin
	/* main: %.thread.i*/
	/*   %156 = add nsw i32 %155, %142*/
	if ((cur_state == LEGUP_F_main_BB_threadi_46)) begin
		main_signed_add_32_5_op1 = main_threadi_142_reg;
	end
	/* main: %gsm_norm.exit.i*/
	/*   %gep88 = add i32 %gep_int87, 12*/
	else /* if ((cur_state == LEGUP_F_main_BB_gsm_normexiti_76)) */ begin
		main_signed_add_32_5_op1 = 32'd12;
	end
end
always @(*) begin
	main_signed_add_32_5 = (main_signed_add_32_5_op0 + main_signed_add_32_5_op1);
end
always @(*) begin
	/* main: %.thread.i*/
	/*   %157 = mul nsw i32 %97, %146*/
		main_signed_multiply_32_3_op0 = main_threadi_97_reg;
end
always @(*) begin
	/* main: %.thread.i*/
	/*   %157 = mul nsw i32 %97, %146*/
		main_signed_multiply_32_3_op1 = main_threadi_146;
end
always @(*) begin
	lpm_mult_main_threadi_157_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %.thread.i*/
	/*   %157 = mul nsw i32 %97, %146*/
	if ((lpm_mult_main_threadi_157_en == 1'd1)) begin
		main_threadi_157_stage0_reg <= (main_signed_multiply_32_3_op0 * main_signed_multiply_32_3_op1);
	end
end
always @(*) begin
	main_signed_multiply_32_3 = main_threadi_157_stage0_reg;
end
always @(*) begin
	/* main: %.thread.i*/
	/*   %158 = add nsw i32 %157, %143*/
	if ((cur_state == LEGUP_F_main_BB_threadi_46)) begin
		main_signed_add_32_3_op0 = main_threadi_157;
	end
	/* main: %gsm_norm.exit.i*/
	/*   %gep84 = add i32 %gep_int83, 8*/
	else /* if ((cur_state == LEGUP_F_main_BB_gsm_normexiti_76)) */ begin
		main_signed_add_32_3_op0 = main_gsm_normexiti_gep_int83;
	end
end
always @(*) begin
	/* main: %.thread.i*/
	/*   %158 = add nsw i32 %157, %143*/
	if ((cur_state == LEGUP_F_main_BB_threadi_46)) begin
		main_signed_add_32_3_op1 = main_threadi_143_reg;
	end
	/* main: %gsm_norm.exit.i*/
	/*   %gep84 = add i32 %gep_int83, 8*/
	else /* if ((cur_state == LEGUP_F_main_BB_gsm_normexiti_76)) */ begin
		main_signed_add_32_3_op1 = 32'd8;
	end
end
always @(*) begin
	main_signed_add_32_3 = (main_signed_add_32_3_op0 + main_signed_add_32_3_op1);
end
always @(*) begin
	/* main: %.thread.i*/
	/*   %159 = mul nsw i32 %93, %146*/
		main_signed_multiply_32_4_op0 = main_threadi_93_reg;
end
always @(*) begin
	/* main: %.thread.i*/
	/*   %159 = mul nsw i32 %93, %146*/
		main_signed_multiply_32_4_op1 = main_threadi_146;
end
always @(*) begin
	lpm_mult_main_threadi_159_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %.thread.i*/
	/*   %159 = mul nsw i32 %93, %146*/
	if ((lpm_mult_main_threadi_159_en == 1'd1)) begin
		main_threadi_159_stage0_reg <= (main_signed_multiply_32_4_op0 * main_signed_multiply_32_4_op1);
	end
end
always @(*) begin
	main_signed_multiply_32_4 = main_threadi_159_stage0_reg;
end
always @(*) begin
	/* main: %.thread.i*/
	/*   %gep36 = add i32 %gep_int35, 14*/
	if ((cur_state == LEGUP_F_main_BB_threadi_41)) begin
		main_signed_add_32_6_op0 = main_threadi_gep_int35;
	end
	/* main: %.thread.i*/
	/*   %172 = add nsw i32 %171, %156*/
	else if ((cur_state == LEGUP_F_main_BB_threadi_46)) begin
		main_signed_add_32_6_op0 = main_threadi_171;
	end
	/* main: %gsm_norm.exit.i*/
	/*   %gep90 = add i32 %gep_int89, 14*/
	else /* if ((cur_state == LEGUP_F_main_BB_gsm_normexiti_76)) */ begin
		main_signed_add_32_6_op0 = main_gsm_normexiti_gep_int89;
	end
end
always @(*) begin
	/* main: %.thread.i*/
	/*   %gep36 = add i32 %gep_int35, 14*/
	if ((cur_state == LEGUP_F_main_BB_threadi_41)) begin
		main_signed_add_32_6_op1 = 32'd14;
	end
	/* main: %.thread.i*/
	/*   %172 = add nsw i32 %171, %156*/
	else if ((cur_state == LEGUP_F_main_BB_threadi_46)) begin
		main_signed_add_32_6_op1 = main_threadi_156;
	end
	/* main: %gsm_norm.exit.i*/
	/*   %gep90 = add i32 %gep_int89, 14*/
	else /* if ((cur_state == LEGUP_F_main_BB_gsm_normexiti_76)) */ begin
		main_signed_add_32_6_op1 = 32'd14;
	end
end
always @(*) begin
	main_signed_add_32_6 = (main_signed_add_32_6_op0 + main_signed_add_32_6_op1);
end
always @(*) begin
	/* main: %62*/
	/*   %63 = sub i32 4, %.01.i.i1*/
	if ((cur_state == LEGUP_F_main_BB__62_27)) begin
		main_signed_subtract_32_0_op0 = 32'd4;
	end
	/* main: %.preheader.i.i*/
	/*   %..i1.i = sub nsw i32 %350, %352*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderii_101)) begin
		main_signed_subtract_32_0_op0 = main_preheaderii_350;
	end
	/* main: %355*/
	/*   %356 = sub nsw i32 %353, %347*/
	else if ((cur_state == LEGUP_F_main_BB__355_102)) begin
		main_signed_subtract_32_0_op0 = main_preheaderii_353_reg;
	end
	/* main: %361*/
	/*   %362 = sub nsw i32 %359, %347*/
	else if ((cur_state == LEGUP_F_main_BB__361_104)) begin
		main_signed_subtract_32_0_op0 = main_backedge1ii_359_reg;
	end
	/* main: %367*/
	/*   %368 = sub nsw i32 %365, %347*/
	else if ((cur_state == LEGUP_F_main_BB__367_106)) begin
		main_signed_subtract_32_0_op0 = main_backedge2ii_365_reg;
	end
	/* main: %373*/
	/*   %374 = sub nsw i32 %371, %347*/
	else if ((cur_state == LEGUP_F_main_BB__373_108)) begin
		main_signed_subtract_32_0_op0 = main_backedge3ii_371_reg;
	end
	/* main: %379*/
	/*   %380 = sub nsw i32 %377, %347*/
	else if ((cur_state == LEGUP_F_main_BB__379_110)) begin
		main_signed_subtract_32_0_op0 = main_backedge4ii_377_reg;
	end
	/* main: %385*/
	/*   %386 = sub nsw i32 %383, %347*/
	else if ((cur_state == LEGUP_F_main_BB__385_112)) begin
		main_signed_subtract_32_0_op0 = main_backedge5ii_383_reg;
	end
	/* main: %391*/
	/*   %392 = sub nsw i32 %389, %347*/
	else if ((cur_state == LEGUP_F_main_BB__391_114)) begin
		main_signed_subtract_32_0_op0 = main_backedge6ii_389_reg;
	end
	/* main: %397*/
	/*   %398 = sub nsw i32 %395, %347*/
	else if ((cur_state == LEGUP_F_main_BB__397_116)) begin
		main_signed_subtract_32_0_op0 = main_backedge7ii_395_reg;
	end
	/* main: %403*/
	/*   %404 = sub nsw i32 %401, %347*/
	else if ((cur_state == LEGUP_F_main_BB__403_118)) begin
		main_signed_subtract_32_0_op0 = main_backedge8ii_401_reg;
	end
	/* main: %409*/
	/*   %410 = sub nsw i32 %407, %347*/
	else if ((cur_state == LEGUP_F_main_BB__409_120)) begin
		main_signed_subtract_32_0_op0 = main_backedge9ii_407_reg;
	end
	/* main: %415*/
	/*   %416 = sub nsw i32 %413, %347*/
	else if ((cur_state == LEGUP_F_main_BB__415_122)) begin
		main_signed_subtract_32_0_op0 = main_backedge10ii_413_reg;
	end
	/* main: %421*/
	/*   %422 = sub nsw i32 %419, %347*/
	else if ((cur_state == LEGUP_F_main_BB__421_124)) begin
		main_signed_subtract_32_0_op0 = main_backedge11ii_419_reg;
	end
	/* main: %427*/
	/*   %428 = sub nsw i32 %425, %347*/
	else if ((cur_state == LEGUP_F_main_BB__427_126)) begin
		main_signed_subtract_32_0_op0 = main_backedge12ii_425_reg;
	end
	/* main: %gsm_add.exit8.i*/
	/*   %460 = sub nsw i32 8, %n.029.i*/
	else /* if ((cur_state == LEGUP_F_main_BB_gsm_addexit8i_141)) */ begin
		main_signed_subtract_32_0_op0 = 32'd8;
	end
end
always @(*) begin
	/* main: %62*/
	/*   %63 = sub i32 4, %.01.i.i1*/
	if ((cur_state == LEGUP_F_main_BB__62_27)) begin
		main_signed_subtract_32_0_op1 = main_62_01ii1_reg;
	end
	/* main: %.preheader.i.i*/
	/*   %..i1.i = sub nsw i32 %350, %352*/
	else if ((cur_state == LEGUP_F_main_BB_preheaderii_101)) begin
		main_signed_subtract_32_0_op1 = main_preheaderii_352;
	end
	/* main: %355*/
	/*   %356 = sub nsw i32 %353, %347*/
	else if ((cur_state == LEGUP_F_main_BB__355_102)) begin
		main_signed_subtract_32_0_op1 = main_346_347_reg;
	end
	/* main: %361*/
	/*   %362 = sub nsw i32 %359, %347*/
	else if ((cur_state == LEGUP_F_main_BB__361_104)) begin
		main_signed_subtract_32_0_op1 = main_346_347_reg;
	end
	/* main: %367*/
	/*   %368 = sub nsw i32 %365, %347*/
	else if ((cur_state == LEGUP_F_main_BB__367_106)) begin
		main_signed_subtract_32_0_op1 = main_346_347_reg;
	end
	/* main: %373*/
	/*   %374 = sub nsw i32 %371, %347*/
	else if ((cur_state == LEGUP_F_main_BB__373_108)) begin
		main_signed_subtract_32_0_op1 = main_346_347_reg;
	end
	/* main: %379*/
	/*   %380 = sub nsw i32 %377, %347*/
	else if ((cur_state == LEGUP_F_main_BB__379_110)) begin
		main_signed_subtract_32_0_op1 = main_346_347_reg;
	end
	/* main: %385*/
	/*   %386 = sub nsw i32 %383, %347*/
	else if ((cur_state == LEGUP_F_main_BB__385_112)) begin
		main_signed_subtract_32_0_op1 = main_346_347_reg;
	end
	/* main: %391*/
	/*   %392 = sub nsw i32 %389, %347*/
	else if ((cur_state == LEGUP_F_main_BB__391_114)) begin
		main_signed_subtract_32_0_op1 = main_346_347_reg;
	end
	/* main: %397*/
	/*   %398 = sub nsw i32 %395, %347*/
	else if ((cur_state == LEGUP_F_main_BB__397_116)) begin
		main_signed_subtract_32_0_op1 = main_346_347_reg;
	end
	/* main: %403*/
	/*   %404 = sub nsw i32 %401, %347*/
	else if ((cur_state == LEGUP_F_main_BB__403_118)) begin
		main_signed_subtract_32_0_op1 = main_346_347_reg;
	end
	/* main: %409*/
	/*   %410 = sub nsw i32 %407, %347*/
	else if ((cur_state == LEGUP_F_main_BB__409_120)) begin
		main_signed_subtract_32_0_op1 = main_346_347_reg;
	end
	/* main: %415*/
	/*   %416 = sub nsw i32 %413, %347*/
	else if ((cur_state == LEGUP_F_main_BB__415_122)) begin
		main_signed_subtract_32_0_op1 = main_346_347_reg;
	end
	/* main: %421*/
	/*   %422 = sub nsw i32 %419, %347*/
	else if ((cur_state == LEGUP_F_main_BB__421_124)) begin
		main_signed_subtract_32_0_op1 = main_346_347_reg;
	end
	/* main: %427*/
	/*   %428 = sub nsw i32 %425, %347*/
	else if ((cur_state == LEGUP_F_main_BB__427_126)) begin
		main_signed_subtract_32_0_op1 = main_346_347_reg;
	end
	/* main: %gsm_add.exit8.i*/
	/*   %460 = sub nsw i32 8, %n.029.i*/
	else /* if ((cur_state == LEGUP_F_main_BB_gsm_addexit8i_141)) */ begin
		main_signed_subtract_32_0_op1 = main_334_n029i_reg;
	end
end
always @(*) begin
	main_signed_subtract_32_0 = (main_signed_subtract_32_0_op0 - main_signed_subtract_32_0_op1);
end
always @(*) begin
	/* main: %.thread.i*/
	/*   %107 = mul nsw i32 %93, %102*/
	if ((cur_state == LEGUP_F_main_BB_threadi_43)) begin
		main_signed_multiply_32_9_op0 = main_threadi_93_reg;
	end
	/* main: %.thread.i*/
	/*   %123 = mul nsw i32 %110, %120*/
	else if ((cur_state == LEGUP_F_main_BB_threadi_44)) begin
		main_signed_multiply_32_9_op0 = main_threadi_110_reg;
	end
	/* main: %.thread.i*/
	/*   %175 = mul nsw i32 %97, %162*/
	else if ((cur_state == LEGUP_F_main_BB_threadi_45)) begin
		main_signed_multiply_32_9_op0 = main_threadi_97_reg;
	end
	/* main: %187*/
	/*   %209 = mul nsw i32 %208, %200*/
	else /* if ((cur_state == LEGUP_F_main_BB__187_49)) */ begin
		main_signed_multiply_32_9_op0 = main_187_208;
	end
end
always @(*) begin
	/* main: %.thread.i*/
	/*   %107 = mul nsw i32 %93, %102*/
	if ((cur_state == LEGUP_F_main_BB_threadi_43)) begin
		main_signed_multiply_32_9_op1 = main_threadi_102;
	end
	/* main: %.thread.i*/
	/*   %123 = mul nsw i32 %110, %120*/
	else if ((cur_state == LEGUP_F_main_BB_threadi_44)) begin
		main_signed_multiply_32_9_op1 = main_threadi_120;
	end
	/* main: %.thread.i*/
	/*   %175 = mul nsw i32 %97, %162*/
	else if ((cur_state == LEGUP_F_main_BB_threadi_45)) begin
		main_signed_multiply_32_9_op1 = main_threadi_162;
	end
	/* main: %187*/
	/*   %209 = mul nsw i32 %208, %200*/
	else /* if ((cur_state == LEGUP_F_main_BB__187_49)) */ begin
		main_signed_multiply_32_9_op1 = main_187_200;
	end
end
always @(*) begin
	lpm_mult_main_threadi_107_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %.thread.i*/
	/*   %107 = mul nsw i32 %93, %102*/
	if ((lpm_mult_main_threadi_107_en == 1'd1)) begin
		main_threadi_107_stage0_reg <= (main_signed_multiply_32_9_op0 * main_signed_multiply_32_9_op1);
	end
end
always @(*) begin
	main_signed_multiply_32_9 = main_threadi_107_stage0_reg;
end
always @(*) begin
	/* main: %gsm_norm.exit.i*/
	/*   %gep105 = add i32 %gep_int104, 14*/
		main_signed_add_32_13_op0 = main_gsm_normexiti_gep_int104;
end
always @(*) begin
	/* main: %gsm_norm.exit.i*/
	/*   %gep105 = add i32 %gep_int104, 14*/
if (reset) begin main_signed_add_32_13_op1 = 0; end
		main_signed_add_32_13_op1 = 32'd14;
end
always @(*) begin
	main_signed_add_32_13 = (main_signed_add_32_13_op0 + main_signed_add_32_13_op1);
end
always @(*) begin
	/* main: %gsm_norm.exit.i*/
	/*   %gep107 = add i32 %gep_int106, 16*/
		main_signed_add_32_14_op0 = main_gsm_normexiti_gep_int106;
end
always @(*) begin
	/* main: %gsm_norm.exit.i*/
	/*   %gep107 = add i32 %gep_int106, 16*/
if (reset) begin main_signed_add_32_14_op1 = 0; end
		main_signed_add_32_14_op1 = 32'd16;
end
always @(*) begin
	main_signed_add_32_14 = (main_signed_add_32_14_op0 + main_signed_add_32_14_op1);
end
always @(*) begin
	/* main: %.thread.i*/
	/*   %173 = mul nsw i32 %102, %162*/
		main_signed_multiply_32_1_op0 = main_threadi_102_reg;
end
always @(*) begin
	/* main: %.thread.i*/
	/*   %173 = mul nsw i32 %102, %162*/
		main_signed_multiply_32_1_op1 = main_threadi_162;
end
always @(*) begin
	lpm_mult_main_threadi_173_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %.thread.i*/
	/*   %173 = mul nsw i32 %102, %162*/
	if ((lpm_mult_main_threadi_173_en == 1'd1)) begin
		main_threadi_173_stage0_reg <= (main_signed_multiply_32_1_op0 * main_signed_multiply_32_1_op1);
	end
end
always @(*) begin
	main_signed_multiply_32_1 = main_threadi_173_stage0_reg;
end
always @(*) begin
	/* main: %.thread.i*/
	/*   %174 = add nsw i32 %173, %158*/
	if ((cur_state == LEGUP_F_main_BB_threadi_46)) begin
		main_signed_add_32_4_op0 = main_threadi_173;
	end
	/* main: %gsm_norm.exit.i*/
	/*   %gep86 = add i32 %gep_int85, 10*/
	else /* if ((cur_state == LEGUP_F_main_BB_gsm_normexiti_76)) */ begin
		main_signed_add_32_4_op0 = main_gsm_normexiti_gep_int85;
	end
end
always @(*) begin
	/* main: %.thread.i*/
	/*   %174 = add nsw i32 %173, %158*/
	if ((cur_state == LEGUP_F_main_BB_threadi_46)) begin
		main_signed_add_32_4_op1 = main_threadi_158;
	end
	/* main: %gsm_norm.exit.i*/
	/*   %gep86 = add i32 %gep_int85, 10*/
	else /* if ((cur_state == LEGUP_F_main_BB_gsm_normexiti_76)) */ begin
		main_signed_add_32_4_op1 = 32'd10;
	end
end
always @(*) begin
	main_signed_add_32_4 = (main_signed_add_32_4_op0 + main_signed_add_32_4_op1);
end
always @(*) begin
	/* main: %517*/
	/*   %518 = add i16 %509, -11059*/
	if ((cur_state == LEGUP_F_main_BB__517_174)) begin
		main_signed_add_16_0_op0 = main_gsm_absexitii_509_reg;
	end
	/* main: %.thread.i.i*/
	/*   %521 = add i16 %520, 26624*/
	else /* if ((cur_state == LEGUP_F_main_BB_threadii_175)) */ begin
		main_signed_add_16_0_op0 = main_threadii_520;
	end
end
always @(*) begin
	/* main: %517*/
	/*   %518 = add i16 %509, -11059*/
	if ((cur_state == LEGUP_F_main_BB__517_174)) begin
		main_signed_add_16_0_op1 = -16'd11059;
	end
	/* main: %.thread.i.i*/
	/*   %521 = add i16 %520, 26624*/
	else /* if ((cur_state == LEGUP_F_main_BB_threadii_175)) */ begin
		main_signed_add_16_0_op1 = 16'd26624;
	end
end
always @(*) begin
	main_signed_add_16_0 = (main_signed_add_16_0_op0 + main_signed_add_16_0_op1);
end
always @(*) begin
	lpm_mult_main_gsm_mult_rexiti_85_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(*) begin
	lpm_mult_main_threadi_94_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(*) begin
	lpm_mult_main_threadi_98_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(*) begin
	lpm_mult_main_threadi_103_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(*) begin
	lpm_mult_main_threadi_106_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(*) begin
	lpm_mult_main_threadi_111_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(*) begin
	lpm_mult_main_threadi_113_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(*) begin
	lpm_mult_main_threadi_115_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(*) begin
	lpm_mult_main_threadi_117_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(*) begin
	lpm_mult_main_threadi_121_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(*) begin
	lpm_mult_main_threadi_123_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(*) begin
	lpm_mult_main_threadi_147_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(*) begin
	lpm_mult_main_threadi_149_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(*) begin
	lpm_mult_main_threadi_151_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(*) begin
	lpm_mult_main_threadi_155_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(*) begin
	lpm_mult_main_threadi_163_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(*) begin
	lpm_mult_main_threadi_165_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(*) begin
	lpm_mult_main_threadi_167_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(*) begin
	lpm_mult_main_threadi_169_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(*) begin
	lpm_mult_main_threadi_171_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(*) begin
	lpm_mult_main_threadi_175_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(*) begin
	lpm_mult_main_threadi_177_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(*) begin
	lpm_mult_main_187_201_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(*) begin
	lpm_mult_main_187_204_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(*) begin
	lpm_mult_main_187_209_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(*) begin
	lpm_mult_main_187_214_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(*) begin
	lpm_mult_main_187_219_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(*) begin
	lpm_mult_main_187_224_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(*) begin
	lpm_mult_main_187_229_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(*) begin
	lpm_mult_main_187_234_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(*) begin
	lpm_mult_main_187_239_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(*) begin
	lpm_mult_main_445_448_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(*) begin
	lpm_mult_main_467_470_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(*) begin
	lpm_mult_main_488_490_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(*) begin
	lpm_mult_main_Gsm_LPC_Analysisexit_529_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(*) begin
	lpm_mult_main_threadi4_545_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(*) begin
	lpm_mult_main_thread98i_561_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(*) begin
	lpm_mult_main_thread102i_580_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(*) begin
	lpm_mult_main_thread107i_599_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(*) begin
	lpm_mult_main_thread112i_618_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(*) begin
	lpm_mult_main_thread117i_637_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(*) begin
	lpm_mult_main_thread122i_656_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		finish <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
	/* main: %711*/
	/*   ret i32 %695*/
	if ((cur_state == LEGUP_F_main_BB__711_262)) begin
		finish <= (memory_controller_waitrequest == 1'd0);
		if (start == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
end
always @(*) begin
	memory_controller_enable_a = 1'd0;
	/* main: %.preheader.i5*/
	/*   call void @legup_memset_2_i64(i8* %250, i8 0, i64 16)*/
	if ((cur_state == LEGUP_function_call_60)) begin
		memory_controller_enable_a = legup_memset_2_i64_memory_controller_enable_a;
	end
	/* main: %.preheader.i5*/
	/*   call void @legup_memset_2_i64(i8* %250, i8 0, i64 16)*/
	if ((cur_state == LEGUP_function_call_60)) begin
		memory_controller_enable_a = legup_memset_2_i64_memory_controller_enable_a;
	end
	/* main: %.lr.ph.i*/
	/*   store i16 0, i16* %.224.i, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrphi_98)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %gsm_div.exit.i*/
	/*   store i16 %433, i16* %.128.i, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_gsm_divexiti_128)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %436*/
	/*   store i16 %437, i16* %.128.i, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__436_131)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.lr.ph27.i*/
	/*   %464 = load i16* %.128.i, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph27i_143)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %gsm_add.exit3.i*/
	/*   %485 = load i16* %.128.i, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_gsm_addexit3i_155)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %Reflection_coefficients.exit*/
	/*   %504 = load i16* %.01.i.i, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_Reflection_coefficientsexit_167)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %522*/
	/*   store i16 %524, i16* %.01.i.i, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__522_176)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %Gsm_LPC_Analysis.exit*/
	/*   %527 = load i16* %19, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_Gsm_LPC_Analysisexit_178)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.thread.i4*/
	/*   store i16 %541, i16* %19, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_threadi4_185)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.thread.i4*/
	/*   %543 = load i16* %542, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_threadi4_186)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.thread98.i*/
	/*   store i16 %557, i16* %542, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_thread98i_193)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.thread98.i*/
	/*   %559 = load i16* %558, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_thread98i_194)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.thread102.i*/
	/*   store i16 %576, i16* %558, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_thread102i_203)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.thread102.i*/
	/*   %578 = load i16* %577, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_thread102i_204)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.thread107.i*/
	/*   store i16 %595, i16* %577, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_thread107i_213)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.thread107.i*/
	/*   %597 = load i16* %596, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_thread107i_214)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.thread112.i*/
	/*   store i16 %614, i16* %596, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_thread112i_223)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.thread112.i*/
	/*   %616 = load i16* %615, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_thread112i_224)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.thread117.i*/
	/*   store i16 %633, i16* %615, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_thread117i_233)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.thread117.i*/
	/*   %635 = load i16* %634, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_thread117i_234)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.thread122.i*/
	/*   store i16 %652, i16* %634, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_thread122i_243)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.thread122.i*/
	/*   %654 = load i16* %653, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_thread122i_244)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %Quantization_and_coding.exit*/
	/*   store i16 %671, i16* %653, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_Quantization_and_codingexit_253)) begin
		memory_controller_enable_a = 1'd1;
	end
end
always @(*) begin
	memory_controller_address_a = 1'd0;
	/* main: %.preheader.i5*/
	/*   call void @legup_memset_2_i64(i8* %250, i8 0, i64 16)*/
	if ((cur_state == LEGUP_function_call_60)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = legup_memset_2_i64_memory_controller_address_a;
	end
	/* main: %.preheader.i5*/
	/*   call void @legup_memset_2_i64(i8* %250, i8 0, i64 16)*/
	if ((cur_state == LEGUP_function_call_60)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = legup_memset_2_i64_memory_controller_address_a;
	end
	/* main: %.lr.ph.i*/
	/*   store i16 0, i16* %.224.i, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrphi_98)) begin
		memory_controller_address_a = main_lrphi_224i_reg;
	end
	/* main: %gsm_div.exit.i*/
	/*   store i16 %433, i16* %.128.i, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_gsm_divexiti_128)) begin
		memory_controller_address_a = main_334_128i_reg;
	end
	/* main: %436*/
	/*   store i16 %437, i16* %.128.i, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__436_131)) begin
		memory_controller_address_a = main_334_128i_reg;
	end
	/* main: %.lr.ph27.i*/
	/*   %464 = load i16* %.128.i, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph27i_143)) begin
		memory_controller_address_a = main_334_128i_reg;
	end
	/* main: %gsm_add.exit3.i*/
	/*   %485 = load i16* %.128.i, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_gsm_addexit3i_155)) begin
		memory_controller_address_a = main_334_128i_reg;
	end
	/* main: %Reflection_coefficients.exit*/
	/*   %504 = load i16* %.01.i.i, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_Reflection_coefficientsexit_167)) begin
		memory_controller_address_a = main_Reflection_coefficientsexit_01ii_reg;
	end
	/* main: %522*/
	/*   store i16 %524, i16* %.01.i.i, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__522_176)) begin
		memory_controller_address_a = main_Reflection_coefficientsexit_01ii_reg;
	end
	/* main: %Gsm_LPC_Analysis.exit*/
	/*   %527 = load i16* %19, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_Gsm_LPC_Analysisexit_178)) begin
		memory_controller_address_a = main_18_19_reg;
	end
	/* main: %.thread.i4*/
	/*   store i16 %541, i16* %19, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_threadi4_185)) begin
		memory_controller_address_a = main_18_19_reg;
	end
	/* main: %.thread.i4*/
	/*   %543 = load i16* %542, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_threadi4_186)) begin
		memory_controller_address_a = main_threadi4_542_reg;
	end
	/* main: %.thread98.i*/
	/*   store i16 %557, i16* %542, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_thread98i_193)) begin
		memory_controller_address_a = main_threadi4_542_reg;
	end
	/* main: %.thread98.i*/
	/*   %559 = load i16* %558, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_thread98i_194)) begin
		memory_controller_address_a = main_thread98i_558_reg;
	end
	/* main: %.thread102.i*/
	/*   store i16 %576, i16* %558, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_thread102i_203)) begin
		memory_controller_address_a = main_thread98i_558_reg;
	end
	/* main: %.thread102.i*/
	/*   %578 = load i16* %577, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_thread102i_204)) begin
		memory_controller_address_a = main_thread102i_577_reg;
	end
	/* main: %.thread107.i*/
	/*   store i16 %595, i16* %577, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_thread107i_213)) begin
		memory_controller_address_a = main_thread102i_577_reg;
	end
	/* main: %.thread107.i*/
	/*   %597 = load i16* %596, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_thread107i_214)) begin
		memory_controller_address_a = main_thread107i_596_reg;
	end
	/* main: %.thread112.i*/
	/*   store i16 %614, i16* %596, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_thread112i_223)) begin
		memory_controller_address_a = main_thread107i_596_reg;
	end
	/* main: %.thread112.i*/
	/*   %616 = load i16* %615, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_thread112i_224)) begin
		memory_controller_address_a = main_thread112i_615_reg;
	end
	/* main: %.thread117.i*/
	/*   store i16 %633, i16* %615, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_thread117i_233)) begin
		memory_controller_address_a = main_thread112i_615_reg;
	end
	/* main: %.thread117.i*/
	/*   %635 = load i16* %634, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_thread117i_234)) begin
		memory_controller_address_a = main_thread117i_634_reg;
	end
	/* main: %.thread122.i*/
	/*   store i16 %652, i16* %634, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_thread122i_243)) begin
		memory_controller_address_a = main_thread117i_634_reg;
	end
	/* main: %.thread122.i*/
	/*   %654 = load i16* %653, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_thread122i_244)) begin
		memory_controller_address_a = main_thread122i_653_reg;
	end
	/* main: %Quantization_and_coding.exit*/
	/*   store i16 %671, i16* %653, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_Quantization_and_codingexit_253)) begin
		memory_controller_address_a = main_thread122i_653_reg;
	end
end
always @(*) begin
	memory_controller_write_enable_a = 1'd0;
	/* main: %.preheader.i5*/
	/*   call void @legup_memset_2_i64(i8* %250, i8 0, i64 16)*/
	if ((cur_state == LEGUP_function_call_60)) begin
		memory_controller_write_enable_a = legup_memset_2_i64_memory_controller_write_enable_a;
	end
	/* main: %.preheader.i5*/
	/*   call void @legup_memset_2_i64(i8* %250, i8 0, i64 16)*/
	if ((cur_state == LEGUP_function_call_60)) begin
		memory_controller_write_enable_a = legup_memset_2_i64_memory_controller_write_enable_a;
	end
	/* main: %.lr.ph.i*/
	/*   store i16 0, i16* %.224.i, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrphi_98)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %gsm_div.exit.i*/
	/*   store i16 %433, i16* %.128.i, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_gsm_divexiti_128)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %436*/
	/*   store i16 %437, i16* %.128.i, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__436_131)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %.lr.ph27.i*/
	/*   %464 = load i16* %.128.i, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph27i_143)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %gsm_add.exit3.i*/
	/*   %485 = load i16* %.128.i, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_gsm_addexit3i_155)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %Reflection_coefficients.exit*/
	/*   %504 = load i16* %.01.i.i, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_Reflection_coefficientsexit_167)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %522*/
	/*   store i16 %524, i16* %.01.i.i, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__522_176)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %Gsm_LPC_Analysis.exit*/
	/*   %527 = load i16* %19, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_Gsm_LPC_Analysisexit_178)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %.thread.i4*/
	/*   store i16 %541, i16* %19, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_threadi4_185)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %.thread.i4*/
	/*   %543 = load i16* %542, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_threadi4_186)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %.thread98.i*/
	/*   store i16 %557, i16* %542, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_thread98i_193)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %.thread98.i*/
	/*   %559 = load i16* %558, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_thread98i_194)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %.thread102.i*/
	/*   store i16 %576, i16* %558, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_thread102i_203)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %.thread102.i*/
	/*   %578 = load i16* %577, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_thread102i_204)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %.thread107.i*/
	/*   store i16 %595, i16* %577, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_thread107i_213)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %.thread107.i*/
	/*   %597 = load i16* %596, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_thread107i_214)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %.thread112.i*/
	/*   store i16 %614, i16* %596, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_thread112i_223)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %.thread112.i*/
	/*   %616 = load i16* %615, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_thread112i_224)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %.thread117.i*/
	/*   store i16 %633, i16* %615, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_thread117i_233)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %.thread117.i*/
	/*   %635 = load i16* %634, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_thread117i_234)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %.thread122.i*/
	/*   store i16 %652, i16* %634, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_thread122i_243)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %.thread122.i*/
	/*   %654 = load i16* %653, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_thread122i_244)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %Quantization_and_coding.exit*/
	/*   store i16 %671, i16* %653, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_Quantization_and_codingexit_253)) begin
		memory_controller_write_enable_a = 1'd1;
	end
end
always @(*) begin
	memory_controller_in_a = 1'd0;
	/* main: %.preheader.i5*/
	/*   call void @legup_memset_2_i64(i8* %250, i8 0, i64 16)*/
	if ((cur_state == LEGUP_function_call_60)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = legup_memset_2_i64_memory_controller_in_a;
	end
	/* main: %.preheader.i5*/
	/*   call void @legup_memset_2_i64(i8* %250, i8 0, i64 16)*/
	if ((cur_state == LEGUP_function_call_60)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = legup_memset_2_i64_memory_controller_in_a;
	end
	/* main: %.lr.ph.i*/
	/*   store i16 0, i16* %.224.i, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrphi_98)) begin
		memory_controller_in_a = 16'd0;
	end
	/* main: %gsm_div.exit.i*/
	/*   store i16 %433, i16* %.128.i, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_gsm_divexiti_128)) begin
		memory_controller_in_a = main_gsm_divexiti_433_reg;
	end
	/* main: %436*/
	/*   store i16 %437, i16* %.128.i, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__436_131)) begin
		memory_controller_in_a = main_436_437;
	end
	/* main: %522*/
	/*   store i16 %524, i16* %.01.i.i, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__522_176)) begin
		memory_controller_in_a = main_522_524;
	end
	/* main: %.thread.i4*/
	/*   store i16 %541, i16* %19, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_threadi4_185)) begin
		memory_controller_in_a = main_threadi4_541_reg;
	end
	/* main: %.thread98.i*/
	/*   store i16 %557, i16* %542, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_thread98i_193)) begin
		memory_controller_in_a = main_thread98i_557_reg;
	end
	/* main: %.thread102.i*/
	/*   store i16 %576, i16* %558, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_thread102i_203)) begin
		memory_controller_in_a = main_thread102i_576_reg;
	end
	/* main: %.thread107.i*/
	/*   store i16 %595, i16* %577, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_thread107i_213)) begin
		memory_controller_in_a = main_thread107i_595_reg;
	end
	/* main: %.thread112.i*/
	/*   store i16 %614, i16* %596, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_thread112i_223)) begin
		memory_controller_in_a = main_thread112i_614_reg;
	end
	/* main: %.thread117.i*/
	/*   store i16 %633, i16* %615, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_thread117i_233)) begin
		memory_controller_in_a = main_thread117i_633_reg;
	end
	/* main: %.thread122.i*/
	/*   store i16 %652, i16* %634, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_thread122i_243)) begin
		memory_controller_in_a = main_thread122i_652_reg;
	end
	/* main: %Quantization_and_coding.exit*/
	/*   store i16 %671, i16* %653, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_Quantization_and_codingexit_253)) begin
		memory_controller_in_a = main_Quantization_and_codingexit_671_reg;
	end
end
always @(*) begin
	memory_controller_size_a = 1'd0;
	if ((cur_state == LEGUP_function_call_60)) begin
		memory_controller_size_a[1:0] = legup_memset_2_i64_memory_controller_size_a;
	end
	/* main: %.preheader.i5*/
	/*   call void @legup_memset_2_i64(i8* %250, i8 0, i64 16)*/
	if ((cur_state == LEGUP_function_call_60)) begin
		memory_controller_size_a[1:0] = legup_memset_2_i64_memory_controller_size_a;
	end
	/* main: %.lr.ph.i*/
	/*   store i16 0, i16* %.224.i, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrphi_98)) begin
		memory_controller_size_a = 2'd1;
	end
	/* main: %gsm_div.exit.i*/
	/*   store i16 %433, i16* %.128.i, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_gsm_divexiti_128)) begin
		memory_controller_size_a = 2'd1;
	end
	/* main: %436*/
	/*   store i16 %437, i16* %.128.i, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__436_131)) begin
		memory_controller_size_a = 2'd1;
	end
	/* main: %.lr.ph27.i*/
	/*   %464 = load i16* %.128.i, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph27i_143)) begin
		memory_controller_size_a = 2'd1;
	end
	/* main: %gsm_add.exit3.i*/
	/*   %485 = load i16* %.128.i, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_gsm_addexit3i_155)) begin
		memory_controller_size_a = 2'd1;
	end
	/* main: %Reflection_coefficients.exit*/
	/*   %504 = load i16* %.01.i.i, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_Reflection_coefficientsexit_167)) begin
		memory_controller_size_a = 2'd1;
	end
	/* main: %522*/
	/*   store i16 %524, i16* %.01.i.i, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__522_176)) begin
		memory_controller_size_a = 2'd1;
	end
	/* main: %Gsm_LPC_Analysis.exit*/
	/*   %527 = load i16* %19, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_Gsm_LPC_Analysisexit_178)) begin
		memory_controller_size_a = 2'd1;
	end
	/* main: %.thread.i4*/
	/*   store i16 %541, i16* %19, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_threadi4_185)) begin
		memory_controller_size_a = 2'd1;
	end
	/* main: %.thread.i4*/
	/*   %543 = load i16* %542, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_threadi4_186)) begin
		memory_controller_size_a = 2'd1;
	end
	/* main: %.thread98.i*/
	/*   store i16 %557, i16* %542, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_thread98i_193)) begin
		memory_controller_size_a = 2'd1;
	end
	/* main: %.thread98.i*/
	/*   %559 = load i16* %558, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_thread98i_194)) begin
		memory_controller_size_a = 2'd1;
	end
	/* main: %.thread102.i*/
	/*   store i16 %576, i16* %558, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_thread102i_203)) begin
		memory_controller_size_a = 2'd1;
	end
	/* main: %.thread102.i*/
	/*   %578 = load i16* %577, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_thread102i_204)) begin
		memory_controller_size_a = 2'd1;
	end
	/* main: %.thread107.i*/
	/*   store i16 %595, i16* %577, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_thread107i_213)) begin
		memory_controller_size_a = 2'd1;
	end
	/* main: %.thread107.i*/
	/*   %597 = load i16* %596, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_thread107i_214)) begin
		memory_controller_size_a = 2'd1;
	end
	/* main: %.thread112.i*/
	/*   store i16 %614, i16* %596, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_thread112i_223)) begin
		memory_controller_size_a = 2'd1;
	end
	/* main: %.thread112.i*/
	/*   %616 = load i16* %615, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_thread112i_224)) begin
		memory_controller_size_a = 2'd1;
	end
	/* main: %.thread117.i*/
	/*   store i16 %633, i16* %615, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_thread117i_233)) begin
		memory_controller_size_a = 2'd1;
	end
	/* main: %.thread117.i*/
	/*   %635 = load i16* %634, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_thread117i_234)) begin
		memory_controller_size_a = 2'd1;
	end
	/* main: %.thread122.i*/
	/*   store i16 %652, i16* %634, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_thread122i_243)) begin
		memory_controller_size_a = 2'd1;
	end
	/* main: %.thread122.i*/
	/*   %654 = load i16* %653, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_thread122i_244)) begin
		memory_controller_size_a = 2'd1;
	end
	/* main: %Quantization_and_coding.exit*/
	/*   store i16 %671, i16* %653, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_Quantization_and_codingexit_253)) begin
		memory_controller_size_a = 2'd1;
	end
end
always @(*) begin
	memory_controller_enable_b = 1'd0;
	/* main: %.preheader.i5*/
	/*   call void @legup_memset_2_i64(i8* %250, i8 0, i64 16)*/
	if ((cur_state == LEGUP_function_call_60)) begin
		memory_controller_enable_b = legup_memset_2_i64_memory_controller_enable_b;
	end
	/* main: %.preheader.i5*/
	/*   call void @legup_memset_2_i64(i8* %250, i8 0, i64 16)*/
	if ((cur_state == LEGUP_function_call_60)) begin
		memory_controller_enable_b = legup_memset_2_i64_memory_controller_enable_b;
	end
end
always @(*) begin
	memory_controller_address_b = 1'd0;
	/* main: %.preheader.i5*/
	/*   call void @legup_memset_2_i64(i8* %250, i8 0, i64 16)*/
	if ((cur_state == LEGUP_function_call_60)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = legup_memset_2_i64_memory_controller_address_b;
	end
	/* main: %.preheader.i5*/
	/*   call void @legup_memset_2_i64(i8* %250, i8 0, i64 16)*/
	if ((cur_state == LEGUP_function_call_60)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = legup_memset_2_i64_memory_controller_address_b;
	end
end
always @(*) begin
	memory_controller_write_enable_b = 1'd0;
	/* main: %.preheader.i5*/
	/*   call void @legup_memset_2_i64(i8* %250, i8 0, i64 16)*/
	if ((cur_state == LEGUP_function_call_60)) begin
		memory_controller_write_enable_b = legup_memset_2_i64_memory_controller_write_enable_b;
	end
	/* main: %.preheader.i5*/
	/*   call void @legup_memset_2_i64(i8* %250, i8 0, i64 16)*/
	if ((cur_state == LEGUP_function_call_60)) begin
		memory_controller_write_enable_b = legup_memset_2_i64_memory_controller_write_enable_b;
	end
end
always @(*) begin
	memory_controller_in_b = 1'd0;
	/* main: %.preheader.i5*/
	/*   call void @legup_memset_2_i64(i8* %250, i8 0, i64 16)*/
	if ((cur_state == LEGUP_function_call_60)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = legup_memset_2_i64_memory_controller_in_b;
	end
	/* main: %.preheader.i5*/
	/*   call void @legup_memset_2_i64(i8* %250, i8 0, i64 16)*/
	if ((cur_state == LEGUP_function_call_60)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = legup_memset_2_i64_memory_controller_in_b;
	end
end
always @(*) begin
	memory_controller_size_b = 1'd0;
	if ((cur_state == LEGUP_function_call_60)) begin
		memory_controller_size_b[1:0] = legup_memset_2_i64_memory_controller_size_b;
	end
	/* main: %.preheader.i5*/
	/*   call void @legup_memset_2_i64(i8* %250, i8 0, i64 16)*/
	if ((cur_state == LEGUP_function_call_60)) begin
		memory_controller_size_b[1:0] = legup_memset_2_i64_memory_controller_size_b;
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		return_val <= 0;
		if (start == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
	/* main: %711*/
	/*   ret i32 %695*/
	if ((cur_state == LEGUP_F_main_BB__711_262)) begin
		return_val <= main_preheader_695_reg;
		if (start == 1'b0 && ^(main_preheader_695_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
end

endmodule 
module ram_dual_port
(
	clk,
	clken,
	address_a,
	address_b,
	wren_a,
	wren_b,
	data_a,
	data_b,
	byteena_a,
	byteena_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED.mif";
parameter  width_be_a = 1'd0;
parameter  width_be_b = 1'd0;
parameter  latency = 1;

input  clk;
input  clken;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output wire [(width_a-1):0] q_a;
output wire [(width_b-1):0] q_b;
reg [(width_a-1):0] q_a_wire;
reg [(width_b-1):0] q_b_wire;
input  wren_a;
input  wren_b;
input [(width_a-1):0] data_a;
input [(width_b-1):0] data_b;
// byte enable is unsupported by inferred RAMs
input [width_be_a-1:0] byteena_a;
input [width_be_b-1:0] byteena_b;

(* ramstyle = "no_rw_check", ram_init_file = init_file *) reg [width_a-1:0] ram[numwords_a-1:0];

/* synthesis translate_off */
integer i;
ALTERA_MF_MEMORY_INITIALIZATION mem ();
reg [8*256:1] ram_ver_file;
initial begin
	if (init_file == "UNUSED.mif")
    begin
		for (i = 0; i < numwords_a; i = i + 1)
			ram[i] = 0;
    end
	else
    begin
        // modelsim can't read .mif files directly. So use Altera function to
        // convert them to .ver files
        mem.convert_to_ver_file(init_file, width_a, ram_ver_file);
        $readmemh(ram_ver_file, ram);
    end
end
/* synthesis translate_on */

always @ (posedge clk)
if (clken)
begin // Port A
if (wren_a)
begin
    ram[address_a] <= data_a;
    q_a_wire <= {width_a{1'bX}};
end
else
    q_a_wire <= ram[address_a];
end
always @ (posedge clk)
if (clken)
begin // Port b
if (wren_b)
begin
    ram[address_b] <= data_b;
    q_b_wire <= {width_b{1'bX}};
end
else
    q_b_wire <= ram[address_b];
end



integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
if (clken)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = (clken) ? q_a_reg[latency] : 0;
assign q_b = (clken) ? q_b_reg[latency] : 0;


endmodule
module rom_dual_port
(
	clk,
	clken,
	address_a,
	address_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED.mif";
parameter  latency = 1;

input  clk;
input  clken;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output wire [(width_a-1):0] q_a;
output wire [(width_b-1):0] q_b;
reg [(width_a-1):0] q_a_wire;
reg [(width_b-1):0] q_b_wire;

(* ramstyle = "no_rw_check", ram_init_file = init_file *) reg [width_a-1:0] ram[numwords_a-1:0];

/* synthesis translate_off */
integer i;
ALTERA_MF_MEMORY_INITIALIZATION mem ();
reg [8*256:1] ram_ver_file;
initial begin
	if (init_file == "UNUSED.mif")
    begin
		for (i = 0; i < numwords_a; i = i + 1)
			ram[i] = 0;
    end
	else
    begin
        // modelsim can't read .mif files directly. So use Altera function to
        // convert them to .ver files
        mem.convert_to_ver_file(init_file, width_a, ram_ver_file);
        $readmemh(ram_ver_file, ram);
    end
end
/* synthesis translate_on */

always @ (posedge clk)
if (clken)
begin
    q_a_wire <= ram[address_a];
    q_b_wire <= ram[address_b];
end



integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
if (clken)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = (clken) ? q_a_reg[latency] : 0;
assign q_b = (clken) ? q_b_reg[latency] : 0;


endmodule
// Adding code from verilog file: ../../../boards/Virtex6/ML605/top.v


module ML605 (
       USER_CLOCK,
	    KEY,
	    SW,	    
       LED,
       LEDG,
		UART_RXD,
		UART_TXD

	    );

   input USER_CLOCK;
   input [4:0] KEY;
   input [7:0] SW;
   output [7:0] LED;
   output [7:0] LEDG;
   wire CLOCK_50;

    input UART_RXD;
    output UART_TXD;    
	wire clk = CLOCK_50;
	wire go = ~KEY[1];



   wire 	reset = ~KEY[0];
   wire 	start;
   wire [31:0] 	return_val;
   reg  [31:0] 	return_val_reg;
   wire 	finish;
   wire [3:0]	state;
   
   reg [6:0]   hex0, hex1, hex2, hex3, hex4, hex5, hex6, hex7;

   assign CLOCK_50 = USER_CLOCK;
   assign LED = 0;
   
	always @ (*) begin
		hex7 <= return_val_reg[31:28];
		hex6 <= return_val_reg[27:24];
		hex5 <= return_val_reg[23:20];
		hex4 <= return_val_reg[19:16];
		hex3 <= return_val_reg[15:12];
		hex2 <= return_val_reg[11:8];
		hex1 <= return_val_reg[7:4];
		hex0 <= return_val_reg[3:0];
	end
assign UART_TXD = 1'b0;

    parameter s_WAIT = 3'b001, s_START = 3'b010, s_EXE = 3'b011,
                s_DONE = 3'b100;

    // state registers
    reg [3:0] y_Q, Y_D;

    assign LEDG[3:0] = y_Q;

    // next state
    always @(*)
    begin
        case (y_Q)
            s_WAIT: if (go) Y_D = s_START; else Y_D = y_Q;

            s_START: Y_D = s_EXE;

            s_EXE: if (!finish) Y_D = s_EXE; else Y_D = s_DONE;

            s_DONE: Y_D = s_DONE;

            default: Y_D = 3'bxxx;
        endcase
    end

    // current state
    always @(posedge clk)
    begin
        if (reset) // synchronous clear
            y_Q <= s_WAIT;
        else
            y_Q <= Y_D;
    end

    always @(posedge clk)
        if (y_Q == s_EXE && finish)
            return_val_reg <= return_val;
        else if (y_Q == s_DONE)
            return_val_reg <= return_val_reg;
        else
            return_val_reg <= 0;


    assign start = (y_Q == s_START);

   
   top top_inst (
      .clk (clk),
      .reset (reset),
      .finish (finish),
      .return_val (return_val),
        .start (start)

    );

   

endmodule

// Adding code from verilog file: ../../../boards/StratixIV/DE4/top.v


module de4 ( 
    	     OSC_50_BANK2, 
             BUTTON, 
             LED, 
    	     SEG0_D, 
    	     SEG1_D 
	     ); 
   input OSC_50_BANK2; 
   input [1:0] BUTTON; 
   output [6:0] SEG0_D; 
   output [6:0] SEG1_D; 
   output [7:0] LED; 
   
   de2 de2_inst ( 
		  .CLOCK_50 (OSC_50_BANK2), 
		  .LEDG (LED), 
		  .KEY (BUTTON), 
		  .SW (), 
		  .HEX0 (SEG0_D), 
		  .HEX1 (SEG1_D), 
		  .HEX2 (), 
		  .HEX3 (), 
		  .HEX4 (), 
		  .HEX5 (), 
		  .HEX6 (), 
		  .HEX7 () 
		  ); 
   
endmodule
// Adding code from verilog file: ../../../boards/CycloneII/DE2/top.v


module de2 (
	    CLOCK_50,
	    KEY,
	    SW,
	    HEX0,
	    HEX1,
	    HEX2,
	    HEX3,
	    HEX4,
	    HEX5,
	    HEX6,
	    HEX7,
	    LEDG,
		UART_RXD,
		UART_TXD

	    );

   input CLOCK_50;
   input [3:0] KEY;
   input [17:0] SW;
   output [6:0] HEX0, HEX1,  HEX2,  HEX3,  HEX4,  HEX5,  HEX6,  HEX7;
   reg [6:0] 	hex0, hex1, hex2, hex3, hex4, hex5, hex6, hex7;
   

   output [7:0] LEDG;
    input UART_RXD;
    output UART_TXD;    
	wire clk = CLOCK_50;
	wire go = ~KEY[1];



   wire 	reset = ~KEY[0];
   wire 	start;
   wire [31:0] 	return_val;
   reg  [31:0] 	return_val_reg;
   wire 	finish;
   wire [3:0]	state;

   hex_digits h7( .x(hex7), .hex_LEDs(HEX7));
   hex_digits h6( .x(hex6), .hex_LEDs(HEX6));
   hex_digits h5( .x(hex5), .hex_LEDs(HEX5));
   hex_digits h4( .x(hex4), .hex_LEDs(HEX4));
   hex_digits h3( .x(hex3), .hex_LEDs(HEX3));
   hex_digits h2( .x(hex2), .hex_LEDs(HEX2));
   hex_digits h1( .x(hex1), .hex_LEDs(HEX1));
   hex_digits h0( .x(hex0), .hex_LEDs(HEX0));
   
	always @ (*) begin
		hex7 <= return_val_reg[31:28];
		hex6 <= return_val_reg[27:24];
		hex5 <= return_val_reg[23:20];
		hex4 <= return_val_reg[19:16];
		hex3 <= return_val_reg[15:12];
		hex2 <= return_val_reg[11:8];
		hex1 <= return_val_reg[7:4];
		hex0 <= return_val_reg[3:0];
	end
assign UART_TXD = 1'b0;

    parameter s_WAIT = 3'b001, s_START = 3'b010, s_EXE = 3'b011,
                s_DONE = 3'b100;

    // state registers
    reg [3:0] y_Q, Y_D;

    assign LEDG[3:0] = y_Q;

    // next state
    always @(*)
    begin
        case (y_Q)
            s_WAIT: if (go) Y_D = s_START; else Y_D = y_Q;

            s_START: Y_D = s_EXE;

            s_EXE: if (!finish) Y_D = s_EXE; else Y_D = s_DONE;

            s_DONE: Y_D = s_DONE;

            default: Y_D = 3'bxxx;
        endcase
    end

    // current state
    always @(posedge clk)
    begin
        if (reset) // synchronous clear
            y_Q <= s_WAIT;
        else
            y_Q <= Y_D;
    end

    always @(posedge clk)
        if (y_Q == s_EXE && finish)
            return_val_reg <= return_val;
        else if (y_Q == s_DONE)
            return_val_reg <= return_val_reg;
        else
            return_val_reg <= 0;


    assign start = (y_Q == s_START);

   
   top top_inst (
      .clk (clk),
      .reset (reset),
      .finish (finish),
      .return_val (return_val),
        .start (start)

    );

endmodule

module circuit_start_control (
    go,
    control_key
);
    input control_key;
    output go;
    assign go = control_key;
endmodule
module hex_digits(x, hex_LEDs);
    input [3:0] x;
    output [6:0] hex_LEDs;
    
    assign hex_LEDs[0] = (~x[3] & ~x[2] & ~x[1] & x[0]) |
                            (~x[3] & x[2] & ~x[1] & ~x[0]) |
                            (x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & ~x[2] & x[1] & x[0]);
    assign hex_LEDs[1] = (~x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & x[1] & x[0]) |
                            (x[3] & x[2] & ~x[0]) |
                            (x[2] & x[1] & ~x[0]);
    assign hex_LEDs[2] = (x[3] & x[2] & ~x[0]) |
                            (x[3] & x[2] & x[1]) |
                            (~x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[3] = (~x[3] & ~x[2] & ~x[1] & x[0]) | 
                            (~x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (x[2] & x[1] & x[0]) | 
                            (x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[4] = (~x[3] & x[0]) |
                            (~x[3] & x[2] & ~x[1]) |
                            (~x[2] & ~x[1] & x[0]);
    assign hex_LEDs[5] = (~x[3] & ~x[2] & x[0]) | 
                            (~x[3] & ~x[2] & x[1]) | 
                            (~x[3] & x[1] & x[0]) | 
                            (x[3] & x[2] & ~x[1] & x[0]);
    assign hex_LEDs[6] = (~x[3] & ~x[2] & ~x[1]) | 
                            (x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (~x[3] & x[2] & x[1] & x[0]);
    
endmodule
`timescale 1 ns / 1 ns
module main_tb
(
);

reg  clk;
reg  reset;
reg  start;
reg  waitrequest;
wire [31:0] return_val;
wire  finish;


top top_inst (
	.clk (clk),
	.reset (reset),
	.start (start),
	.waitrequest (waitrequest),
	.finish (finish),
	.return_val (return_val)
);


// Local Rams



initial 
    clk = 0;
always @(clk)
    clk <= #10 ~clk;

initial begin
//$monitor("At t=%t clk=%b %b %b %b %d", $time, clk, reset, start, finish, return_val);
@(negedge clk);
reset <= 1;
@(negedge clk);
reset <= 0;
start <= 1;
@(negedge clk);
start <= 0;
end

always@(finish) begin
    if (finish == 1) begin
        $display("At t=%t clk=%b finish=%b return_val=%d", $time, clk, finish, return_val);
        $display("Cycles: %d", ($time-50)/20);
        $finish;
    end
end

initial begin
waitrequest <= 1;
@(negedge clk);
@(negedge clk);
waitrequest <= 0;
end


endmodule 

//----------------------------------------------------------------------------//
// Generated by LegUp High-Level Synthesis Tool Version 4.0 (http://legup.org)
// Compiled: Sun Jul 26 12:56:54 2015
// University of Toronto
// For research and academic purposes only. Commercial use is prohibited.
// Please send bugs to: legup@eecg.toronto.edu
// Date: Mon Apr  1 08:22:37 2019
//----------------------------------------------------------------------------//

--------------------------------------------------------------------------------
Function: main
--------------------------------------------------------------------------------
Function unit type:           Number Required               
bitoff_local_mem_dual_port    1                             
inData_local_mem_dual_port    1                             
main_0_Ki_local_mem_dual_port 1                             
main_0_Pi_local_mem_dual_port 1                             
main_0_so_local_mem_dual_port 2                             
mem_dual_port                 1                             
outData_local_mem_dual_port   1                             
signed_add_16                 1                             
signed_add_32                 15                            
signed_multiply_32            15                            
signed_subtract_16            1                             
signed_subtract_32            1                             
--------------------------------------------------------------------------------
Function: legup_memset_2_i64
--------------------------------------------------------------------------------
Function unit type:           Number Required               
legup_memset_2_i64_0_1_local_mem_dual_port1                             
legup_memset_2_i64_0_2_local_mem_dual_port1                             
legup_memset_2_i64_0_3_local_mem_dual_port1                             
legup_memset_2_i64_0_c_local_mem_dual_port2                             
legup_memset_2_i64_0_s_local_mem_dual_port2                             
signed_add_32                 1                             
signed_add_64                 1                             

Running Bipartite Weighted Matching on function: legup_memset_2_i64
State: LEGUP_F_legup_memset_2_i64_BB__0
Binding functional unit type: legup_memset_2_i64_0_1_local_mem_dual_port
Weight matrix for operation/function unit matching:
                                                  legup_memset_2_i64_legup_memset_2_i64_0_1_local_mem_dual_port_0
  store i8* %m, i8** %1, align... (idx: 0)        95                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  legup_memset_2_i64_legup_memset_2_i64_0_1_local_mem_dual_port_0
  store i8* %m, i8** %1, align... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i8* %m, i8** %1, align... (idx: 0) -> legup_memset_2_i64_legup_memset_2_i64_0_1_local_mem_dual_port_0 (mux inputs: 1)
State: LEGUP_F_legup_memset_2_i64_BB__0
Binding functional unit type: legup_memset_2_i64_0_2_local_mem_dual_port
Weight matrix for operation/function unit matching:
                                                  legup_memset_2_i64_legup_memset_2_i64_0_2_local_mem_dual_port_0
  store i8 %c1, i8* %2, align ... (idx: 0)        95                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  legup_memset_2_i64_legup_memset_2_i64_0_2_local_mem_dual_port_0
  store i8 %c1, i8* %2, align ... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i8 %c1, i8* %2, align ... (idx: 0) -> legup_memset_2_i64_legup_memset_2_i64_0_2_local_mem_dual_port_0 (mux inputs: 1)
State: LEGUP_F_legup_memset_2_i64_BB__0
Binding functional unit type: legup_memset_2_i64_0_3_local_mem_dual_port
Weight matrix for operation/function unit matching:
                                                  legup_memset_2_i64_legup_memset_2_i64_0_3_local_mem_dual_port_0
  store i64 %n, i64* %3, align... (idx: 0)        95                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  legup_memset_2_i64_legup_memset_2_i64_0_3_local_mem_dual_port_0
  store i64 %n, i64* %3, align... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i64 %n, i64* %3, align... (idx: 0) -> legup_memset_2_i64_legup_memset_2_i64_0_3_local_mem_dual_port_0 (mux inputs: 1)
State: LEGUP_F_legup_memset_2_i64_BB__0
Binding functional unit type: legup_memset_2_i64_0_1_local_mem_dual_port
Weight matrix for operation/function unit matching:
  %13 = load i8** %1, align 4 hey can share an input with another operation already assigned to legup_memset_2_i64_legup_memset_2_i64_0_1_local_mem_dual_port_0
  %13 = load i8** %1, align 4 can share an output register with another operation already assigned to legup_memset_2_i64_legup_memset_2_i64_0_1_local_mem_dual_port_0
                                                  legup_memset_2_i64_legup_memset_2_i64_0_1_local_mem_dual_port_0
  %13 = load i8** %1, align 4 (idx: 0)            100                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  legup_memset_2_i64_legup_memset_2_i64_0_1_local_mem_dual_port_0
  %13 = load i8** %1, align 4 (idx: 0)            1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %13 = load i8** %1, align 4 (idx: 0) -> legup_memset_2_i64_legup_memset_2_i64_0_1_local_mem_dual_port_0 (mux inputs: 1)
State: LEGUP_F_legup_memset_2_i64_BB__0
Binding functional unit type: legup_memset_2_i64_0_2_local_mem_dual_port
Weight matrix for operation/function unit matching:
  %4 = load i8* %2, align 1 hey can share an input with another operation already assigned to legup_memset_2_i64_legup_memset_2_i64_0_2_local_mem_dual_port_0
  %4 = load i8* %2, align 1 can share an output register with another operation already assigned to legup_memset_2_i64_legup_memset_2_i64_0_2_local_mem_dual_port_0
                                                  legup_memset_2_i64_legup_memset_2_i64_0_2_local_mem_dual_port_0
  %4 = load i8* %2, align 1 (idx: 0)              100                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  legup_memset_2_i64_legup_memset_2_i64_0_2_local_mem_dual_port_0
  %4 = load i8* %2, align 1 (idx: 0)              1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %4 = load i8* %2, align 1 (idx: 0) -> legup_memset_2_i64_legup_memset_2_i64_0_2_local_mem_dual_port_0 (mux inputs: 1)
State: LEGUP_F_legup_memset_2_i64_BB__0
Binding functional unit type: legup_memset_2_i64_0_3_local_mem_dual_port
Weight matrix for operation/function unit matching:
  %15 = load i64* %3, align 8 hey can share an input with another operation already assigned to legup_memset_2_i64_legup_memset_2_i64_0_3_local_mem_dual_port_0
  %15 = load i64* %3, align 8 can share an output register with another operation already assigned to legup_memset_2_i64_legup_memset_2_i64_0_3_local_mem_dual_port_0
                                                  legup_memset_2_i64_legup_memset_2_i64_0_3_local_mem_dual_port_0
  %15 = load i64* %3, align 8 (idx: 0)            100                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  legup_memset_2_i64_legup_memset_2_i64_0_3_local_mem_dual_port_0
  %15 = load i64* %3, align 8 (idx: 0)            1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %15 = load i64* %3, align 8 (idx: 0) -> legup_memset_2_i64_legup_memset_2_i64_0_3_local_mem_dual_port_0 (mux inputs: 1)
State: LEGUP_F_legup_memset_2_i64_BB__0
Binding functional unit type: legup_memset_2_i64_0_3_local_mem_dual_port
Weight matrix for operation/function unit matching:
  store i64 %16, i64* %3, alig... hey can share an input with another operation already assigned to legup_memset_2_i64_legup_memset_2_i64_0_3_local_mem_dual_port_0
  store i64 %16, i64* %3, alig... can share an output register with another operation already assigned to legup_memset_2_i64_legup_memset_2_i64_0_3_local_mem_dual_port_0
                                                  legup_memset_2_i64_legup_memset_2_i64_0_3_local_mem_dual_port_0
  store i64 %16, i64* %3, alig... (idx: 0)        95                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  legup_memset_2_i64_legup_memset_2_i64_0_3_local_mem_dual_port_0
  store i64 %16, i64* %3, alig... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i64 %16, i64* %3, alig... (idx: 0) -> legup_memset_2_i64_legup_memset_2_i64_0_3_local_mem_dual_port_0 (mux inputs: 2)
State: LEGUP_F_legup_memset_2_i64_BB__0
Binding functional unit type: legup_memset_2_i64_0_c_local_mem_dual_port
Weight matrix for operation/function unit matching:
                                                  legup_memset_2_i64_legup_memset_2_i64_0_c_local_mem_dual_port_0legup_memset_2_i64_legup_memset_2_i64_0_c_local_mem_dual_port_1
  store i16 %5, i16* %c, align... (idx: 0)        90                            90                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  legup_memset_2_i64_legup_memset_2_i64_0_c_local_mem_dual_port_0legup_memset_2_i64_legup_memset_2_i64_0_c_local_mem_dual_port_1
  store i16 %5, i16* %c, align... (idx: 0)        1                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i16 %5, i16* %c, align... (idx: 0) -> legup_memset_2_i64_legup_memset_2_i64_0_c_local_mem_dual_port_0 (mux inputs: 2)
State: LEGUP_F_legup_memset_2_i64_BB__0
Binding functional unit type: legup_memset_2_i64_0_s_local_mem_dual_port
Weight matrix for operation/function unit matching:
                                                  legup_memset_2_i64_legup_memset_2_i64_0_s_local_mem_dual_port_0legup_memset_2_i64_legup_memset_2_i64_0_s_local_mem_dual_port_1
  store i16* %14, i16** %s, al... (idx: 0)        90                            90                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  legup_memset_2_i64_legup_memset_2_i64_0_s_local_mem_dual_port_0legup_memset_2_i64_legup_memset_2_i64_0_s_local_mem_dual_port_1
  store i16* %14, i16** %s, al... (idx: 0)        1                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i16* %14, i16** %s, al... (idx: 0) -> legup_memset_2_i64_legup_memset_2_i64_0_s_local_mem_dual_port_0 (mux inputs: 2)
State: LEGUP_F_legup_memset_2_i64_BB__0
Binding functional unit type: legup_memset_2_i64_0_c_local_mem_dual_port
Weight matrix for operation/function unit matching:
  %6 = load i16* %c, align 2 hey can share an input with another operation already assigned to legup_memset_2_i64_legup_memset_2_i64_0_c_local_mem_dual_port_0
  %6 = load i16* %c, align 2 can share an output register with another operation already assigned to legup_memset_2_i64_legup_memset_2_i64_0_c_local_mem_dual_port_0
  %9 = load i16* %c, align 2 hey can share an input with another operation already assigned to legup_memset_2_i64_legup_memset_2_i64_0_c_local_mem_dual_port_0
  %9 = load i16* %c, align 2 can share an output register with another operation already assigned to legup_memset_2_i64_legup_memset_2_i64_0_c_local_mem_dual_port_0
                                                  legup_memset_2_i64_legup_memset_2_i64_0_c_local_mem_dual_port_0legup_memset_2_i64_legup_memset_2_i64_0_c_local_mem_dual_port_1
  %6 = load i16* %c, align 2 (idx: 0)             90                            95                            
  %9 = load i16* %c, align 2 (idx: 1)             90                            95                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  legup_memset_2_i64_legup_memset_2_i64_0_c_local_mem_dual_port_0legup_memset_2_i64_legup_memset_2_i64_0_c_local_mem_dual_port_1
  %6 = load i16* %c, align 2 (idx: 0)             1                             0                             
  %9 = load i16* %c, align 2 (idx: 1)             0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %6 = load i16* %c, align 2 (idx: 0) -> legup_memset_2_i64_legup_memset_2_i64_0_c_local_mem_dual_port_0 (mux inputs: 2)
  %9 = load i16* %c, align 2 (idx: 1) -> legup_memset_2_i64_legup_memset_2_i64_0_c_local_mem_dual_port_1 (mux inputs: 1)
State: LEGUP_F_legup_memset_2_i64_BB__0
Binding functional unit type: legup_memset_2_i64_0_c_local_mem_dual_port
Weight matrix for operation/function unit matching:
  store i16 %12, i16* %c, alig... hey can share an input with another operation already assigned to legup_memset_2_i64_legup_memset_2_i64_0_c_local_mem_dual_port_0
  store i16 %12, i16* %c, alig... can share an output register with another operation already assigned to legup_memset_2_i64_legup_memset_2_i64_0_c_local_mem_dual_port_0
  store i16 %12, i16* %c, alig... hey can share an input with another operation already assigned to legup_memset_2_i64_legup_memset_2_i64_0_c_local_mem_dual_port_1
  store i16 %12, i16* %c, alig... can share an output register with another operation already assigned to legup_memset_2_i64_legup_memset_2_i64_0_c_local_mem_dual_port_1
                                                  legup_memset_2_i64_legup_memset_2_i64_0_c_local_mem_dual_port_0legup_memset_2_i64_legup_memset_2_i64_0_c_local_mem_dual_port_1
  store i16 %12, i16* %c, alig... (idx: 0)        85                            95                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  legup_memset_2_i64_legup_memset_2_i64_0_c_local_mem_dual_port_0legup_memset_2_i64_legup_memset_2_i64_0_c_local_mem_dual_port_1
  store i16 %12, i16* %c, alig... (idx: 0)        1                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i16 %12, i16* %c, alig... (idx: 0) -> legup_memset_2_i64_legup_memset_2_i64_0_c_local_mem_dual_port_0 (mux inputs: 3)
State: LEGUP_F_legup_memset_2_i64_BB__17
Binding functional unit type: legup_memset_2_i64_0_3_local_mem_dual_port
Weight matrix for operation/function unit matching:
  %18 = load i64* %3, align 8 hey can share an input with another operation already assigned to legup_memset_2_i64_legup_memset_2_i64_0_3_local_mem_dual_port_0
  %18 = load i64* %3, align 8 can share an output register with another operation already assigned to legup_memset_2_i64_legup_memset_2_i64_0_3_local_mem_dual_port_0
                                                  legup_memset_2_i64_legup_memset_2_i64_0_3_local_mem_dual_port_0
  %18 = load i64* %3, align 8 (idx: 0)            90                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  legup_memset_2_i64_legup_memset_2_i64_0_3_local_mem_dual_port_0
  %18 = load i64* %3, align 8 (idx: 0)            1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %18 = load i64* %3, align 8 (idx: 0) -> legup_memset_2_i64_legup_memset_2_i64_0_3_local_mem_dual_port_0 (mux inputs: 2)
State: LEGUP_F_legup_memset_2_i64_BB__17
Binding functional unit type: legup_memset_2_i64_0_3_local_mem_dual_port
Weight matrix for operation/function unit matching:
  store i64 %19, i64* %3, alig... hey can share an input with another operation already assigned to legup_memset_2_i64_legup_memset_2_i64_0_3_local_mem_dual_port_0
  store i64 %19, i64* %3, alig... can share an output register with another operation already assigned to legup_memset_2_i64_legup_memset_2_i64_0_3_local_mem_dual_port_0
                                                  legup_memset_2_i64_legup_memset_2_i64_0_3_local_mem_dual_port_0
  store i64 %19, i64* %3, alig... (idx: 0)        85                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  legup_memset_2_i64_legup_memset_2_i64_0_3_local_mem_dual_port_0
  store i64 %19, i64* %3, alig... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i64 %19, i64* %3, alig... (idx: 0) -> legup_memset_2_i64_legup_memset_2_i64_0_3_local_mem_dual_port_0 (mux inputs: 3)
State: LEGUP_F_legup_memset_2_i64_BB__17
Binding functional unit type: signed_add_64
Weight matrix for operation/function unit matching:
                                                  legup_memset_2_i64_signed_add_64_0
  %19 = add i64 %18, -1 (idx: 0)                  95                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  legup_memset_2_i64_signed_add_64_0
  %19 = add i64 %18, -1 (idx: 0)                  1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %19 = add i64 %18, -1 (idx: 0) -> legup_memset_2_i64_signed_add_64_0 (mux inputs: 1)
State: LEGUP_F_legup_memset_2_i64_BB__21
Binding functional unit type: legup_memset_2_i64_0_c_local_mem_dual_port
Weight matrix for operation/function unit matching:
  %22 = load i16* %c, align 2 hey can share an input with another operation already assigned to legup_memset_2_i64_legup_memset_2_i64_0_c_local_mem_dual_port_0
  %22 = load i16* %c, align 2 can share an output register with another operation already assigned to legup_memset_2_i64_legup_memset_2_i64_0_c_local_mem_dual_port_0
  %22 = load i16* %c, align 2 hey can share an input with another operation already assigned to legup_memset_2_i64_legup_memset_2_i64_0_c_local_mem_dual_port_1
  %22 = load i16* %c, align 2 can share an output register with another operation already assigned to legup_memset_2_i64_legup_memset_2_i64_0_c_local_mem_dual_port_1
                                                  legup_memset_2_i64_legup_memset_2_i64_0_c_local_mem_dual_port_0legup_memset_2_i64_legup_memset_2_i64_0_c_local_mem_dual_port_1
  %22 = load i16* %c, align 2 (idx: 0)            80                            100                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  legup_memset_2_i64_legup_memset_2_i64_0_c_local_mem_dual_port_0legup_memset_2_i64_legup_memset_2_i64_0_c_local_mem_dual_port_1
  %22 = load i16* %c, align 2 (idx: 0)            1                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %22 = load i16* %c, align 2 (idx: 0) -> legup_memset_2_i64_legup_memset_2_i64_0_c_local_mem_dual_port_0 (mux inputs: 3)
State: LEGUP_F_legup_memset_2_i64_BB__21
Binding functional unit type: legup_memset_2_i64_0_s_local_mem_dual_port
Weight matrix for operation/function unit matching:
  %23 = load i16** %s, align 4 hey can share an input with another operation already assigned to legup_memset_2_i64_legup_memset_2_i64_0_s_local_mem_dual_port_0
  %23 = load i16** %s, align 4 can share an output register with another operation already assigned to legup_memset_2_i64_legup_memset_2_i64_0_s_local_mem_dual_port_0
                                                  legup_memset_2_i64_legup_memset_2_i64_0_s_local_mem_dual_port_0legup_memset_2_i64_legup_memset_2_i64_0_s_local_mem_dual_port_1
  %23 = load i16** %s, align 4 (idx: 0)           90                            95                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  legup_memset_2_i64_legup_memset_2_i64_0_s_local_mem_dual_port_0legup_memset_2_i64_legup_memset_2_i64_0_s_local_mem_dual_port_1
  %23 = load i16** %s, align 4 (idx: 0)           1                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %23 = load i16** %s, align 4 (idx: 0) -> legup_memset_2_i64_legup_memset_2_i64_0_s_local_mem_dual_port_0 (mux inputs: 2)
State: LEGUP_F_legup_memset_2_i64_BB__21
Binding functional unit type: legup_memset_2_i64_0_s_local_mem_dual_port
Weight matrix for operation/function unit matching:
  store i16* %24, i16** %s, al... hey can share an input with another operation already assigned to legup_memset_2_i64_legup_memset_2_i64_0_s_local_mem_dual_port_0
  store i16* %24, i16** %s, al... can share an output register with another operation already assigned to legup_memset_2_i64_legup_memset_2_i64_0_s_local_mem_dual_port_0
  store i16 %22, i16* %23, ali... can share an output register with another operation already assigned to legup_memset_2_i64_legup_memset_2_i64_0_s_local_mem_dual_port_0
                                                  legup_memset_2_i64_legup_memset_2_i64_0_s_local_mem_dual_port_0legup_memset_2_i64_legup_memset_2_i64_0_s_local_mem_dual_port_1
  store i16* %24, i16** %s, al... (idx: 0)        85                            90                            
  store i16 %22, i16* %23, ali... (idx: 1)        80                            90                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  legup_memset_2_i64_legup_memset_2_i64_0_s_local_mem_dual_port_0legup_memset_2_i64_legup_memset_2_i64_0_s_local_mem_dual_port_1
  store i16* %24, i16** %s, al... (idx: 0)        0                             1                             
  store i16 %22, i16* %23, ali... (idx: 1)        1                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i16 %22, i16* %23, ali... (idx: 1) -> legup_memset_2_i64_legup_memset_2_i64_0_s_local_mem_dual_port_0 (mux inputs: 4)
  store i16* %24, i16** %s, al... (idx: 0) -> legup_memset_2_i64_legup_memset_2_i64_0_s_local_mem_dual_port_1 (mux inputs: 2)
State: LEGUP_F_legup_memset_2_i64_BB__21
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
                                                  legup_memset_2_i64_signed_add_32_0
  %gep = add i32 %gep_int, 2 (idx: 0)             -5                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  legup_memset_2_i64_signed_add_32_0
  %gep = add i32 %gep_int, 2 (idx: 0)             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %gep = add i32 %gep_int, 2 (idx: 0) -> legup_memset_2_i64_signed_add_32_0 (mux inputs: 1)

Running Bipartite Weighted Matching on function: main
State: LEGUP_F_main_BB__1
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         
  %5 = add nsw i32 %i.05, 1 (idx: 0)              -5                            -5                            -4                            -4                            -4                            -4                            -4                            -4                            -5                            -4                            -4                            -4                            -3                            -4                            95                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         
  %5 = add nsw i32 %i.05, 1 (idx: 0)              1                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %5 = add nsw i32 %i.05, 1 (idx: 0) -> main_signed_add_32_0 (mux inputs: 1)
State: LEGUP_F_main_BB__1
Binding functional unit type: inData_local_mem_dual_port
Weight matrix for operation/function unit matching:
                                                  main_inData_local_mem_dual_port_0
  %3 = load i16* %2, align 2, ... (idx: 0)        95                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_inData_local_mem_dual_port_0
  %3 = load i16* %2, align 2, ... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %3 = load i16* %2, align 2, ... (idx: 0) -> main_inData_local_mem_dual_port_0 (mux inputs: 1)
State: LEGUP_F_main_BB__1
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         
  %gep = add i32 %gep_int, %ge... (idx: 0)        -20                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -9                            90                            
  %gep3 = add i32 %gep_int1, %... (idx: 1)        -20                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -9                            90                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         
  %gep = add i32 %gep_int, %ge... (idx: 0)        1                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             
  %gep3 = add i32 %gep_int1, %... (idx: 1)        0                             1                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %gep = add i32 %gep_int, %ge... (idx: 0) -> main_signed_add_32_0 (mux inputs: 3)
  %gep3 = add i32 %gep_int1, %... (idx: 1) -> main_signed_add_32_1 (mux inputs: 2)
State: LEGUP_F_main_BB__1
Binding functional unit type: main_0_so_local_mem_dual_port
Weight matrix for operation/function unit matching:
                                                  main_main_0_so_local_mem_dual_port_0main_main_0_so_local_mem_dual_port_1
  store i16 %3, i16* %4, align... (idx: 0)        90                            90                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_main_0_so_local_mem_dual_port_0main_main_0_so_local_mem_dual_port_1
  store i16 %3, i16* %4, align... (idx: 0)        1                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i16 %3, i16* %4, align... (idx: 0) -> main_main_0_so_local_mem_dual_port_0 (mux inputs: 2)
State: LEGUP_F_main_BB__8
Binding functional unit type: main_0_so_local_mem_dual_port
Weight matrix for operation/function unit matching:
  %10 = load i16* %9, align 2,... can share an output register with another operation already assigned to main_main_0_so_local_mem_dual_port_0
                                                  main_main_0_so_local_mem_dual_port_0main_main_0_so_local_mem_dual_port_1
  %10 = load i16* %9, align 2,... (idx: 0)        85                            95                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_main_0_so_local_mem_dual_port_0main_main_0_so_local_mem_dual_port_1
  %10 = load i16* %9, align 2,... (idx: 0)        1                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %10 = load i16* %9, align 2,... (idx: 0) -> main_main_0_so_local_mem_dual_port_0 (mux inputs: 3)
State: LEGUP_F_main_BB__8
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %gep7 = add i32 %gep_int5, %... can share an output register with another operation already assigned to main_signed_add_32_0
  %gep7 = add i32 %gep_int5, %... can share an output register with another operation already assigned to main_signed_add_32_1
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         
  %gep7 = add i32 %gep_int5, %... (idx: 0)        -30                           -20                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -9                            90                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         
  %gep7 = add i32 %gep_int5, %... (idx: 0)        1                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %gep7 = add i32 %gep_int5, %... (idx: 0) -> main_signed_add_32_0 (mux inputs: 5)
State: LEGUP_F_main_BB__12
Binding functional unit type: signed_subtract_16
Weight matrix for operation/function unit matching:
                                                  main_signed_subtract_16_0     
  %14 = sub i16 0, %10 (idx: 0)                   95                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_subtract_16_0     
  %14 = sub i16 0, %10 (idx: 0)                   1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %14 = sub i16 0, %10 (idx: 0) -> main_signed_subtract_16_0 (mux inputs: 1)
State: LEGUP_F_main_BB_gsm_absexiti
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %17 = add nsw i32 %k.029.i, ... can share an output register with another operation already assigned to main_signed_add_32_0
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         
  %17 = add nsw i32 %k.029.i, ... (idx: 0)        -45                           -25                           -4                            -4                            -4                            -4                            -4                            -4                            -5                            -4                            -4                            -4                            -3                            -4                            95                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         
  %17 = add nsw i32 %k.029.i, ... (idx: 0)        1                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %17 = add nsw i32 %k.029.i, ... (idx: 0) -> main_signed_add_32_0 (mux inputs: 6)
State: LEGUP_F_main_BB__33
Binding functional unit type: bitoff_local_mem_dual_port
Weight matrix for operation/function unit matching:
                                                  main_bitoff_local_mem_dual_port_0
  %36 = load i8* %35, align 1,... (idx: 0)        95                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_bitoff_local_mem_dual_port_0
  %36 = load i8* %35, align 1,... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %36 = load i8* %35, align 1,... (idx: 0) -> main_bitoff_local_mem_dual_port_0 (mux inputs: 1)
State: LEGUP_F_main_BB__33
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %gep10 = add i32 %gep_int9, ... can share an output register with another operation already assigned to main_signed_add_32_0
  %gep10 = add i32 %gep_int9, ... can share an output register with another operation already assigned to main_signed_add_32_1
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         
  %gep10 = add i32 %gep_int9, ... (idx: 0)        -60                           -20                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           90                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         
  %gep10 = add i32 %gep_int9, ... (idx: 0)        1                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %gep10 = add i32 %gep_int9, ... (idx: 0) -> main_signed_add_32_0 (mux inputs: 8)
State: LEGUP_F_main_BB__33
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         
  %38 = add nsw i32 %37, -1 (idx: 0)              -84                           -24                           -4                            -4                            -4                            -4                            -4                            -4                            -4                            -4                            -4                            -4                            -4                            -4                            95                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         
  %38 = add nsw i32 %37, -1 (idx: 0)              1                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %38 = add nsw i32 %37, -1 (idx: 0) -> main_signed_add_32_0 (mux inputs: 9)
State: LEGUP_F_main_BB__39
Binding functional unit type: bitoff_local_mem_dual_port
Weight matrix for operation/function unit matching:
  %43 = load i8* %42, align 1,... can share an output register with another operation already assigned to main_bitoff_local_mem_dual_port_0
                                                  main_bitoff_local_mem_dual_port_0
  %43 = load i8* %42, align 1,... (idx: 0)        95                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_bitoff_local_mem_dual_port_0
  %43 = load i8* %42, align 1,... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %43 = load i8* %42, align 1,... (idx: 0) -> main_bitoff_local_mem_dual_port_0 (mux inputs: 2)
State: LEGUP_F_main_BB__39
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %gep12 = add i32 %gep_int11,... can share an output register with another operation already assigned to main_signed_add_32_0
  %gep12 = add i32 %gep_int11,... can share an output register with another operation already assigned to main_signed_add_32_1
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         
  %gep12 = add i32 %gep_int11,... (idx: 0)        -90                           -20                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           90                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         
  %gep12 = add i32 %gep_int11,... (idx: 0)        1                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %gep12 = add i32 %gep_int11,... (idx: 0) -> main_signed_add_32_0 (mux inputs: 11)
State: LEGUP_F_main_BB__39
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %45 = add nuw nsw i32 %44, 7 can share an output register with another operation already assigned to main_signed_add_32_0
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         
  %45 = add nuw nsw i32 %44, 7 (idx: 0)           -105                          -24                           -4                            -4                            -4                            -4                            -4                            -4                            -4                            -4                            -4                            -4                            -4                            -4                            95                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         
  %45 = add nuw nsw i32 %44, 7 (idx: 0)           1                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %45 = add nuw nsw i32 %44, 7 (idx: 0) -> main_signed_add_32_0 (mux inputs: 12)
State: LEGUP_F_main_BB__49
Binding functional unit type: bitoff_local_mem_dual_port
Weight matrix for operation/function unit matching:
  %53 = load i8* %52, align 1,... can share an output register with another operation already assigned to main_bitoff_local_mem_dual_port_0
                                                  main_bitoff_local_mem_dual_port_0
  %53 = load i8* %52, align 1,... (idx: 0)        85                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_bitoff_local_mem_dual_port_0
  %53 = load i8* %52, align 1,... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %53 = load i8* %52, align 1,... (idx: 0) -> main_bitoff_local_mem_dual_port_0 (mux inputs: 3)
State: LEGUP_F_main_BB__49
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %gep14 = add i32 %gep_int13,... can share an output register with another operation already assigned to main_signed_add_32_0
  %gep14 = add i32 %gep_int13,... can share an output register with another operation already assigned to main_signed_add_32_1
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         
  %gep14 = add i32 %gep_int13,... (idx: 0)        -120                          -20                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           90                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         
  %gep14 = add i32 %gep_int13,... (idx: 0)        1                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %gep14 = add i32 %gep_int13,... (idx: 0) -> main_signed_add_32_0 (mux inputs: 14)
State: LEGUP_F_main_BB__49
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %55 = add nuw nsw i32 %54, 1... can share an output register with another operation already assigned to main_signed_add_32_0
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         
  %55 = add nuw nsw i32 %54, 1... (idx: 0)        -135                          -24                           -4                            -4                            -4                            -4                            -4                            -4                            -4                            -4                            -4                            -4                            -4                            -4                            95                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         
  %55 = add nuw nsw i32 %54, 1... (idx: 0)        1                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %55 = add nuw nsw i32 %54, 1... (idx: 0) -> main_signed_add_32_0 (mux inputs: 15)
State: LEGUP_F_main_BB__56
Binding functional unit type: bitoff_local_mem_dual_port
Weight matrix for operation/function unit matching:
  %59 = load i8* %58, align 1,... can share an output register with another operation already assigned to main_bitoff_local_mem_dual_port_0
                                                  main_bitoff_local_mem_dual_port_0
  %59 = load i8* %58, align 1,... (idx: 0)        75                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_bitoff_local_mem_dual_port_0
  %59 = load i8* %58, align 1,... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %59 = load i8* %58, align 1,... (idx: 0) -> main_bitoff_local_mem_dual_port_0 (mux inputs: 4)
State: LEGUP_F_main_BB__56
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %gep16 = add i32 %gep_int15,... can share an output register with another operation already assigned to main_signed_add_32_0
  %gep16 = add i32 %gep_int15,... can share an output register with another operation already assigned to main_signed_add_32_1
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         
  %gep16 = add i32 %gep_int15,... (idx: 0)        -150                          -20                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           90                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         
  %gep16 = add i32 %gep_int15,... (idx: 0)        1                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %gep16 = add i32 %gep_int15,... (idx: 0) -> main_signed_add_32_0 (mux inputs: 17)
State: LEGUP_F_main_BB__56
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %61 = add nuw nsw i32 %60, 2... can share an output register with another operation already assigned to main_signed_add_32_0
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         
  %61 = add nuw nsw i32 %60, 2... (idx: 0)        -165                          -24                           -4                            -4                            -4                            -4                            -4                            -4                            -4                            -4                            -4                            -4                            -4                            -4                            95                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         
  %61 = add nuw nsw i32 %60, 2... (idx: 0)        1                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %61 = add nuw nsw i32 %60, 2... (idx: 0) -> main_signed_add_32_0 (mux inputs: 18)
State: LEGUP_F_main_BB__62
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %sext.off.i = add i32 %sext.... can share an output register with another operation already assigned to main_signed_add_32_0
  %sext.off.i = add i32 %sext.... can share an output register with another operation already assigned to main_signed_add_32_1
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         
  %sext.off.i = add i32 %sext.... (idx: 0)        -174                          -14                           -4                            -4                            -4                            -4                            -4                            -4                            -4                            -4                            -4                            -4                            -4                            -4                            95                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         
  %sext.off.i = add i32 %sext.... (idx: 0)        1                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %sext.off.i = add i32 %sext.... (idx: 0) -> main_signed_add_32_0 (mux inputs: 19)
State: LEGUP_F_main_BB__62
Binding functional unit type: signed_subtract_32
Weight matrix for operation/function unit matching:
                                                  main_signed_subtract_32_0     
  %63 = sub i32 4, %.01.i.i1 (idx: 0)             -4                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_subtract_32_0     
  %63 = sub i32 4, %.01.i.i1 (idx: 0)             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %63 = sub i32 4, %.01.i.i1 (idx: 0) -> main_signed_subtract_32_0 (mux inputs: 1)
State: LEGUP_F_main_BB_preheader6i
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %66 = add nsw i32 %phitmp.i,... can share an output register with another operation already assigned to main_signed_add_32_0
  %66 = add nsw i32 %phitmp.i,... can share an output register with another operation already assigned to main_signed_add_32_1
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         
  %66 = add nsw i32 %phitmp.i,... (idx: 0)        -184                          -14                           -4                            -4                            -4                            -4                            -4                            -4                            -4                            -4                            -4                            -4                            -4                            -4                            95                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         
  %66 = add nsw i32 %phitmp.i,... (idx: 0)        1                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %66 = add nsw i32 %phitmp.i,... (idx: 0) -> main_signed_add_32_0 (mux inputs: 20)
State: LEGUP_F_main_BB_preheader6splitusi
Binding functional unit type: main_0_so_local_mem_dual_port
Weight matrix for operation/function unit matching:
  %72 = load i16* %71, align 2... can share an output register with another operation already assigned to main_main_0_so_local_mem_dual_port_0
                                                  main_main_0_so_local_mem_dual_port_0main_main_0_so_local_mem_dual_port_1
  %72 = load i16* %71, align 2... (idx: 0)        75                            95                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_main_0_so_local_mem_dual_port_0main_main_0_so_local_mem_dual_port_1
  %72 = load i16* %71, align 2... (idx: 0)        1                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %72 = load i16* %71, align 2... (idx: 0) -> main_main_0_so_local_mem_dual_port_0 (mux inputs: 4)
State: LEGUP_F_main_BB_preheader6splitusi
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %gep19 = add i32 %gep_int17,... can share an output register with another operation already assigned to main_signed_add_32_0
  %gep19 = add i32 %gep_int17,... can share an output register with another operation already assigned to main_signed_add_32_1
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         
  %gep19 = add i32 %gep_int17,... (idx: 0)        -200                          -20                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -9                            90                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         
  %gep19 = add i32 %gep_int17,... (idx: 0)        1                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %gep19 = add i32 %gep_int17,... (idx: 0) -> main_signed_add_32_0 (mux inputs: 22)
State: LEGUP_F_main_BB__74
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %77 = add nsw i32 %75, 16384 can share an output register with another operation already assigned to main_signed_add_32_0
  %77 = add nsw i32 %75, 16384 can share an output register with another operation already assigned to main_signed_add_32_1
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         
  %77 = add nsw i32 %75, 16384 (idx: 0)           -215                          -14                           -4                            -4                            -4                            -4                            -4                            -4                            -4                            -4                            -4                            -4                            -4                            -4                            95                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         
  %77 = add nsw i32 %75, 16384 (idx: 0)           1                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %77 = add nsw i32 %75, 16384 (idx: 0) -> main_signed_add_32_0 (mux inputs: 23)
State: LEGUP_F_main_BB__74
Binding functional unit type: signed_multiply_32
Weight matrix for operation/function unit matching:
                                                  main_signed_multiply_32_0     main_signed_multiply_32_1     main_signed_multiply_32_2     main_signed_multiply_32_3     main_signed_multiply_32_4     main_signed_multiply_32_5     main_signed_multiply_32_6     main_signed_multiply_32_7     main_signed_multiply_32_8     main_signed_multiply_32_9     main_signed_multiply_32_10    main_signed_multiply_32_11    main_signed_multiply_32_12    main_signed_multiply_32_13    main_signed_multiply_32_14    
  %76 = mul nsw i32 %75, %70 (idx: 0)             -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_multiply_32_0     main_signed_multiply_32_1     main_signed_multiply_32_2     main_signed_multiply_32_3     main_signed_multiply_32_4     main_signed_multiply_32_5     main_signed_multiply_32_6     main_signed_multiply_32_7     main_signed_multiply_32_8     main_signed_multiply_32_9     main_signed_multiply_32_10    main_signed_multiply_32_11    main_signed_multiply_32_12    main_signed_multiply_32_13    main_signed_multiply_32_14    
  %76 = mul nsw i32 %75, %70 (idx: 0)             1                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %76 = mul nsw i32 %75, %70 (idx: 0) -> main_signed_multiply_32_0 (mux inputs: 2)
State: LEGUP_F_main_BB__74
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %78 = add i32 %77, %76 can share an output register with another operation already assigned to main_signed_add_32_0
  %78 = add i32 %77, %76 can share an output register with another operation already assigned to main_signed_add_32_1
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         
  %78 = add i32 %77, %76 (idx: 0)                 -230                          -20                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -9                            -9                            90                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         
  %78 = add i32 %77, %76 (idx: 0)                 1                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %78 = add i32 %77, %76 (idx: 0) -> main_signed_add_32_0 (mux inputs: 25)
State: LEGUP_F_main_BB_gsm_mult_rexitusi
Binding functional unit type: main_0_so_local_mem_dual_port
Weight matrix for operation/function unit matching:
  store i16 %.0.i.us.i, i16* %... hey can share an input with another operation already assigned to main_main_0_so_local_mem_dual_port_0
  store i16 %.0.i.us.i, i16* %... can share an output register with another operation already assigned to main_main_0_so_local_mem_dual_port_0
                                                  main_main_0_so_local_mem_dual_port_0main_main_0_so_local_mem_dual_port_1
  store i16 %.0.i.us.i, i16* %... (idx: 0)        65                            90                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_main_0_so_local_mem_dual_port_0main_main_0_so_local_mem_dual_port_1
  store i16 %.0.i.us.i, i16* %... (idx: 0)        1                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i16 %.0.i.us.i, i16* %... (idx: 0) -> main_main_0_so_local_mem_dual_port_0 (mux inputs: 5)
State: LEGUP_F_main_BB_gsm_mult_rexitusi
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %81 = add nsw i32 %k.128.us.... can share an output register with another operation already assigned to main_signed_add_32_0
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         
  %81 = add nsw i32 %k.128.us.... (idx: 0)        -245                          -25                           -4                            -4                            -4                            -4                            -4                            -4                            -5                            -4                            -4                            -4                            -3                            -4                            95                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         
  %81 = add nsw i32 %k.128.us.... (idx: 0)        1                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %81 = add nsw i32 %k.128.us.... (idx: 0) -> main_signed_add_32_0 (mux inputs: 26)
State: LEGUP_F_main_BB_gsm_mult_rexiti
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %90 = add nsw i32 %k.128.i, ... can share an output register with another operation already assigned to main_signed_add_32_0
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         
  %90 = add nsw i32 %k.128.i, ... (idx: 0)        -255                          -25                           -4                            -4                            -4                            -4                            -4                            -4                            -5                            -4                            -4                            -4                            -3                            -4                            95                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         
  %90 = add nsw i32 %k.128.i, ... (idx: 0)        1                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %90 = add nsw i32 %k.128.i, ... (idx: 0) -> main_signed_add_32_0 (mux inputs: 27)
State: LEGUP_F_main_BB_gsm_mult_rexiti
Binding functional unit type: main_0_so_local_mem_dual_port
Weight matrix for operation/function unit matching:
  %83 = load i16* %82, align 2... can share an output register with another operation already assigned to main_main_0_so_local_mem_dual_port_0
                                                  main_main_0_so_local_mem_dual_port_0main_main_0_so_local_mem_dual_port_1
  %83 = load i16* %82, align 2... (idx: 0)        55                            95                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_main_0_so_local_mem_dual_port_0main_main_0_so_local_mem_dual_port_1
  %83 = load i16* %82, align 2... (idx: 0)        1                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %83 = load i16* %82, align 2... (idx: 0) -> main_main_0_so_local_mem_dual_port_0 (mux inputs: 6)
State: LEGUP_F_main_BB_gsm_mult_rexiti
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %gep22 = add i32 %gep_int20,... can share an output register with another operation already assigned to main_signed_add_32_0
  %gep22 = add i32 %gep_int20,... can share an output register with another operation already assigned to main_signed_add_32_1
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         
  %gep22 = add i32 %gep_int20,... (idx: 0)        -270                          -20                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -9                            90                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         
  %gep22 = add i32 %gep_int20,... (idx: 0)        1                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %gep22 = add i32 %gep_int20,... (idx: 0) -> main_signed_add_32_0 (mux inputs: 29)
State: LEGUP_F_main_BB_gsm_mult_rexiti
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %86 = add nsw i32 %84, 16384 can share an output register with another operation already assigned to main_signed_add_32_0
  %86 = add nsw i32 %84, 16384 can share an output register with another operation already assigned to main_signed_add_32_1
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         
  %86 = add nsw i32 %84, 16384 (idx: 0)           -285                          -14                           -4                            -4                            -4                            -4                            -4                            -4                            -4                            -4                            -4                            -4                            -4                            -4                            95                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         
  %86 = add nsw i32 %84, 16384 (idx: 0)           1                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %86 = add nsw i32 %84, 16384 (idx: 0) -> main_signed_add_32_0 (mux inputs: 30)
State: LEGUP_F_main_BB_gsm_mult_rexiti
Binding functional unit type: signed_multiply_32
Weight matrix for operation/function unit matching:
  %85 = mul nsw i32 %84, %70 hey can share an input with another operation already assigned to main_signed_multiply_32_0
  %85 = mul nsw i32 %84, %70 can share an output register with another operation already assigned to main_signed_multiply_32_0
                                                  main_signed_multiply_32_0     main_signed_multiply_32_1     main_signed_multiply_32_2     main_signed_multiply_32_3     main_signed_multiply_32_4     main_signed_multiply_32_5     main_signed_multiply_32_6     main_signed_multiply_32_7     main_signed_multiply_32_8     main_signed_multiply_32_9     main_signed_multiply_32_10    main_signed_multiply_32_11    main_signed_multiply_32_12    main_signed_multiply_32_13    main_signed_multiply_32_14    
  %85 = mul nsw i32 %84, %70 (idx: 0)             -15                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_multiply_32_0     main_signed_multiply_32_1     main_signed_multiply_32_2     main_signed_multiply_32_3     main_signed_multiply_32_4     main_signed_multiply_32_5     main_signed_multiply_32_6     main_signed_multiply_32_7     main_signed_multiply_32_8     main_signed_multiply_32_9     main_signed_multiply_32_10    main_signed_multiply_32_11    main_signed_multiply_32_12    main_signed_multiply_32_13    main_signed_multiply_32_14    
  %85 = mul nsw i32 %84, %70 (idx: 0)             1                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %85 = mul nsw i32 %84, %70 (idx: 0) -> main_signed_multiply_32_0 (mux inputs: 3)
State: LEGUP_F_main_BB_gsm_mult_rexiti
Binding functional unit type: main_0_so_local_mem_dual_port
Weight matrix for operation/function unit matching:
  store i16 %89, i16* %82, ali... hey can share an input with another operation already assigned to main_main_0_so_local_mem_dual_port_0
  store i16 %89, i16* %82, ali... can share an output register with another operation already assigned to main_main_0_so_local_mem_dual_port_0
                                                  main_main_0_so_local_mem_dual_port_0main_main_0_so_local_mem_dual_port_1
  store i16 %89, i16* %82, ali... (idx: 0)        45                            90                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_main_0_so_local_mem_dual_port_0main_main_0_so_local_mem_dual_port_1
  store i16 %89, i16* %82, ali... (idx: 0)        1                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i16 %89, i16* %82, ali... (idx: 0) -> main_main_0_so_local_mem_dual_port_0 (mux inputs: 7)
State: LEGUP_F_main_BB_gsm_mult_rexiti
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %87 = add i32 %86, %85 can share an output register with another operation already assigned to main_signed_add_32_0
  %87 = add i32 %86, %85 can share an output register with another operation already assigned to main_signed_add_32_1
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         
  %87 = add i32 %86, %85 (idx: 0)                 -300                          -20                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -9                            -9                            90                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         
  %87 = add i32 %86, %85 (idx: 0)                 1                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %87 = add i32 %86, %85 (idx: 0) -> main_signed_add_32_0 (mux inputs: 32)
State: LEGUP_F_main_BB_threadi
Binding functional unit type: main_0_so_local_mem_dual_port
Weight matrix for operation/function unit matching:
  %92 = load i16* %7, align 2,... can share an output register with another operation already assigned to main_main_0_so_local_mem_dual_port_0
  %96 = load i16* %95, align 2... can share an output register with another operation already assigned to main_main_0_so_local_mem_dual_port_0
                                                  main_main_0_so_local_mem_dual_port_0main_main_0_so_local_mem_dual_port_1
  %92 = load i16* %7, align 2,... (idx: 0)        35                            95                            
  %96 = load i16* %95, align 2... (idx: 1)        35                            95                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_main_0_so_local_mem_dual_port_0main_main_0_so_local_mem_dual_port_1
  %92 = load i16* %7, align 2,... (idx: 0)        1                             0                             
  %96 = load i16* %95, align 2... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %92 = load i16* %7, align 2,... (idx: 0) -> main_main_0_so_local_mem_dual_port_0 (mux inputs: 8)
  %96 = load i16* %95, align 2... (idx: 1) -> main_main_0_so_local_mem_dual_port_1 (mux inputs: 1)
State: LEGUP_F_main_BB_threadi
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %gep24 = add i32 %gep_int23,... can share an output register with another operation already assigned to main_signed_add_32_0
  %gep24 = add i32 %gep_int23,... can share an output register with another operation already assigned to main_signed_add_32_1
  %gep26 = add i32 %gep_int25,... can share an output register with another operation already assigned to main_signed_add_32_0
  %gep26 = add i32 %gep_int25,... can share an output register with another operation already assigned to main_signed_add_32_1
  %gep28 = add i32 %gep_int27,... can share an output register with another operation already assigned to main_signed_add_32_0
  %gep28 = add i32 %gep_int27,... can share an output register with another operation already assigned to main_signed_add_32_1
  %gep30 = add i32 %gep_int29,... can share an output register with another operation already assigned to main_signed_add_32_0
  %gep30 = add i32 %gep_int29,... can share an output register with another operation already assigned to main_signed_add_32_1
  %gep32 = add i32 %gep_int31,... can share an output register with another operation already assigned to main_signed_add_32_0
  %gep32 = add i32 %gep_int31,... can share an output register with another operation already assigned to main_signed_add_32_1
  %gep34 = add i32 %gep_int33,... can share an output register with another operation already assigned to main_signed_add_32_0
  %gep34 = add i32 %gep_int33,... can share an output register with another operation already assigned to main_signed_add_32_1
  %gep36 = add i32 %gep_int35,... can share an output register with another operation already assigned to main_signed_add_32_0
  %gep36 = add i32 %gep_int35,... can share an output register with another operation already assigned to main_signed_add_32_1
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         
  %gep24 = add i32 %gep_int23,... (idx: 0)        -315                          -15                           -4                            -4                            -4                            -4                            -4                            -5                            -4                            -4                            -4                            -4                            -4                            -4                            95                            
  %gep26 = add i32 %gep_int25,... (idx: 1)        -315                          -15                           -4                            -4                            -4                            -4                            -4                            -4                            -5                            -4                            -4                            -4                            -4                            -4                            95                            
  %gep28 = add i32 %gep_int27,... (idx: 2)        -315                          -14                           -5                            -4                            -4                            -4                            -4                            -4                            -4                            -5                            -4                            -4                            -4                            -4                            95                            
  %gep30 = add i32 %gep_int29,... (idx: 3)        -315                          -14                           -4                            -5                            -4                            -4                            -4                            -4                            -5                            -4                            -5                            -4                            -4                            -4                            95                            
  %gep32 = add i32 %gep_int31,... (idx: 4)        -315                          -14                           -4                            -4                            -5                            -4                            -4                            -4                            -4                            -4                            -4                            -5                            -4                            -4                            95                            
  %gep34 = add i32 %gep_int33,... (idx: 5)        -315                          -14                           -4                            -4                            -4                            -5                            -4                            -4                            -4                            -4                            -4                            -4                            -5                            -4                            95                            
  %gep36 = add i32 %gep_int35,... (idx: 6)        -315                          -14                           -4                            -4                            -4                            -4                            -5                            -4                            -4                            -4                            -4                            -4                            -4                            -4                            95                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         
  %gep24 = add i32 %gep_int23,... (idx: 0)        1                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             
  %gep26 = add i32 %gep_int25,... (idx: 1)        0                             1                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             
  %gep28 = add i32 %gep_int27,... (idx: 2)        0                             0                             0                             0                             0                             0                             0                             0                             0                             1                             0                             0                             0                             0                             0                             
  %gep30 = add i32 %gep_int29,... (idx: 3)        0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             1                             0                             0                             0                             0                             
  %gep32 = add i32 %gep_int31,... (idx: 4)        0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             1                             0                             0                             0                             
  %gep34 = add i32 %gep_int33,... (idx: 5)        0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             1                             0                             0                             
  %gep36 = add i32 %gep_int35,... (idx: 6)        0                             0                             0                             0                             0                             0                             1                             0                             0                             0                             0                             0                             0                             0                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %gep24 = add i32 %gep_int23,... (idx: 0) -> main_signed_add_32_0 (mux inputs: 33)
  %gep26 = add i32 %gep_int25,... (idx: 1) -> main_signed_add_32_1 (mux inputs: 3)
  %gep36 = add i32 %gep_int35,... (idx: 6) -> main_signed_add_32_6 (mux inputs: 1)
  %gep28 = add i32 %gep_int27,... (idx: 2) -> main_signed_add_32_9 (mux inputs: 1)
  %gep30 = add i32 %gep_int29,... (idx: 3) -> main_signed_add_32_10 (mux inputs: 1)
  %gep32 = add i32 %gep_int31,... (idx: 4) -> main_signed_add_32_11 (mux inputs: 1)
  %gep34 = add i32 %gep_int33,... (idx: 5) -> main_signed_add_32_12 (mux inputs: 1)
State: LEGUP_F_main_BB_threadi
Binding functional unit type: main_0_so_local_mem_dual_port
Weight matrix for operation/function unit matching:
  %101 = load i16* %100, align... can share an output register with another operation already assigned to main_main_0_so_local_mem_dual_port_0
  %101 = load i16* %100, align... can share an output register with another operation already assigned to main_main_0_so_local_mem_dual_port_1
  %109 = load i16* %108, align... can share an output register with another operation already assigned to main_main_0_so_local_mem_dual_port_0
  %109 = load i16* %108, align... can share an output register with another operation already assigned to main_main_0_so_local_mem_dual_port_1
                                                  main_main_0_so_local_mem_dual_port_0main_main_0_so_local_mem_dual_port_1
  %101 = load i16* %100, align... (idx: 0)        25                            95                            
  %109 = load i16* %108, align... (idx: 1)        25                            95                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_main_0_so_local_mem_dual_port_0main_main_0_so_local_mem_dual_port_1
  %101 = load i16* %100, align... (idx: 0)        1                             0                             
  %109 = load i16* %108, align... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %101 = load i16* %100, align... (idx: 0) -> main_main_0_so_local_mem_dual_port_0 (mux inputs: 9)
  %109 = load i16* %108, align... (idx: 1) -> main_main_0_so_local_mem_dual_port_1 (mux inputs: 2)
State: LEGUP_F_main_BB_threadi
Binding functional unit type: signed_multiply_32
Weight matrix for operation/function unit matching:
  %94 = mul nsw i32 %93, %93 can share an output register with another operation already assigned to main_signed_multiply_32_0
  %98 = mul nsw i32 %97, %97 can share an output register with another operation already assigned to main_signed_multiply_32_0
                                                  main_signed_multiply_32_0     main_signed_multiply_32_1     main_signed_multiply_32_2     main_signed_multiply_32_3     main_signed_multiply_32_4     main_signed_multiply_32_5     main_signed_multiply_32_6     main_signed_multiply_32_7     main_signed_multiply_32_8     main_signed_multiply_32_9     main_signed_multiply_32_10    main_signed_multiply_32_11    main_signed_multiply_32_12    main_signed_multiply_32_13    main_signed_multiply_32_14    
  %94 = mul nsw i32 %93, %93 (idx: 0)             -30                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           
  %98 = mul nsw i32 %97, %97 (idx: 1)             -30                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_multiply_32_0     main_signed_multiply_32_1     main_signed_multiply_32_2     main_signed_multiply_32_3     main_signed_multiply_32_4     main_signed_multiply_32_5     main_signed_multiply_32_6     main_signed_multiply_32_7     main_signed_multiply_32_8     main_signed_multiply_32_9     main_signed_multiply_32_10    main_signed_multiply_32_11    main_signed_multiply_32_12    main_signed_multiply_32_13    main_signed_multiply_32_14    
  %94 = mul nsw i32 %93, %93 (idx: 0)             1                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             
  %98 = mul nsw i32 %97, %97 (idx: 1)             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %94 = mul nsw i32 %93, %93 (idx: 0) -> main_signed_multiply_32_0 (mux inputs: 4)
  %98 = mul nsw i32 %97, %97 (idx: 1) -> main_signed_multiply_32_14 (mux inputs: 1)
State: LEGUP_F_main_BB_threadi
Binding functional unit type: main_0_so_local_mem_dual_port
Weight matrix for operation/function unit matching:
  %119 = load i16* %118, align... can share an output register with another operation already assigned to main_main_0_so_local_mem_dual_port_0
  %119 = load i16* %118, align... can share an output register with another operation already assigned to main_main_0_so_local_mem_dual_port_1
  %131 = load i16* %130, align... can share an output register with another operation already assigned to main_main_0_so_local_mem_dual_port_0
  %131 = load i16* %130, align... can share an output register with another operation already assigned to main_main_0_so_local_mem_dual_port_1
                                                  main_main_0_so_local_mem_dual_port_0main_main_0_so_local_mem_dual_port_1
  %119 = load i16* %118, align... (idx: 0)        15                            85                            
  %131 = load i16* %130, align... (idx: 1)        15                            85                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_main_0_so_local_mem_dual_port_0main_main_0_so_local_mem_dual_port_1
  %119 = load i16* %118, align... (idx: 0)        1                             0                             
  %131 = load i16* %130, align... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %119 = load i16* %118, align... (idx: 0) -> main_main_0_so_local_mem_dual_port_0 (mux inputs: 10)
  %131 = load i16* %130, align... (idx: 1) -> main_main_0_so_local_mem_dual_port_1 (mux inputs: 3)
State: LEGUP_F_main_BB_threadi
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %99 = add nuw nsw i32 %98, %... can share an output register with another operation already assigned to main_signed_add_32_0
  %99 = add nuw nsw i32 %98, %... can share an output register with another operation already assigned to main_signed_add_32_1
  %99 = add nuw nsw i32 %98, %... can share an output register with another operation already assigned to main_signed_add_32_6
  %99 = add nuw nsw i32 %98, %... can share an output register with another operation already assigned to main_signed_add_32_9
  %99 = add nuw nsw i32 %98, %... can share an output register with another operation already assigned to main_signed_add_32_10
  %99 = add nuw nsw i32 %98, %... can share an output register with another operation already assigned to main_signed_add_32_11
  %99 = add nuw nsw i32 %98, %... can share an output register with another operation already assigned to main_signed_add_32_12
  %105 = add nsw i32 %102, %93 can share an output register with another operation already assigned to main_signed_add_32_0
  %105 = add nsw i32 %102, %93 can share an output register with another operation already assigned to main_signed_add_32_1
  %105 = add nsw i32 %102, %93 can share an output register with another operation already assigned to main_signed_add_32_6
  %105 = add nsw i32 %102, %93 can share an output register with another operation already assigned to main_signed_add_32_9
  %105 = add nsw i32 %102, %93 can share an output register with another operation already assigned to main_signed_add_32_10
  %105 = add nsw i32 %102, %93 can share an output register with another operation already assigned to main_signed_add_32_11
  %105 = add nsw i32 %102, %93 can share an output register with another operation already assigned to main_signed_add_32_12
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         
  %99 = add nuw nsw i32 %98, %... (idx: 0)        -330                          -30                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -8                            90                            
  %105 = add nsw i32 %102, %93 (idx: 1)           -330                          -30                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           90                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         
  %99 = add nuw nsw i32 %98, %... (idx: 0)        1                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             
  %105 = add nsw i32 %102, %93 (idx: 1)           0                             1                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %99 = add nuw nsw i32 %98, %... (idx: 0) -> main_signed_add_32_0 (mux inputs: 35)
  %105 = add nsw i32 %102, %93 (idx: 1) -> main_signed_add_32_1 (mux inputs: 5)
State: LEGUP_F_main_BB_threadi
Binding functional unit type: signed_multiply_32
Weight matrix for operation/function unit matching:
  %103 = mul nsw i32 %102, %10... can share an output register with another operation already assigned to main_signed_multiply_32_0
  %103 = mul nsw i32 %102, %10... can share an output register with another operation already assigned to main_signed_multiply_32_14
  %106 = mul nsw i32 %97, %105 can share an output register with another operation already assigned to main_signed_multiply_32_0
  %106 = mul nsw i32 %97, %105 hey can share an input with another operation already assigned to main_signed_multiply_32_14
  %106 = mul nsw i32 %97, %105 can share an output register with another operation already assigned to main_signed_multiply_32_14
  %107 = mul nsw i32 %93, %102 hey can share an input with another operation already assigned to main_signed_multiply_32_0
  %107 = mul nsw i32 %93, %102 can share an output register with another operation already assigned to main_signed_multiply_32_0
  %107 = mul nsw i32 %93, %102 can share an output register with another operation already assigned to main_signed_multiply_32_14
  %111 = mul nsw i32 %110, %11... can share an output register with another operation already assigned to main_signed_multiply_32_0
  %111 = mul nsw i32 %110, %11... can share an output register with another operation already assigned to main_signed_multiply_32_14
  %113 = mul nsw i32 %102, %11... can share an output register with another operation already assigned to main_signed_multiply_32_0
  %113 = mul nsw i32 %102, %11... can share an output register with another operation already assigned to main_signed_multiply_32_14
  %115 = mul nsw i32 %97, %110 can share an output register with another operation already assigned to main_signed_multiply_32_0
  %115 = mul nsw i32 %97, %110 hey can share an input with another operation already assigned to main_signed_multiply_32_14
  %115 = mul nsw i32 %97, %110 can share an output register with another operation already assigned to main_signed_multiply_32_14
  %117 = mul nsw i32 %93, %110 hey can share an input with another operation already assigned to main_signed_multiply_32_0
  %117 = mul nsw i32 %93, %110 can share an output register with another operation already assigned to main_signed_multiply_32_0
  %117 = mul nsw i32 %93, %110 can share an output register with another operation already assigned to main_signed_multiply_32_14
                                                  main_signed_multiply_32_0     main_signed_multiply_32_1     main_signed_multiply_32_2     main_signed_multiply_32_3     main_signed_multiply_32_4     main_signed_multiply_32_5     main_signed_multiply_32_6     main_signed_multiply_32_7     main_signed_multiply_32_8     main_signed_multiply_32_9     main_signed_multiply_32_10    main_signed_multiply_32_11    main_signed_multiply_32_12    main_signed_multiply_32_13    main_signed_multiply_32_14    
  %103 = mul nsw i32 %102, %10... (idx: 0)        -40                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           
  %106 = mul nsw i32 %97, %105 (idx: 1)           -40                           -9                            -9                            -9                            -9                            -9                            -9                            -9                            -9                            -9                            -10                           -9                            -9                            -9                            -4                            
  %107 = mul nsw i32 %93, %102 (idx: 2)           -35                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           
  %111 = mul nsw i32 %110, %11... (idx: 3)        -40                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           
  %113 = mul nsw i32 %102, %11... (idx: 4)        -40                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           
  %115 = mul nsw i32 %97, %110 (idx: 5)           -40                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -5                            
  %117 = mul nsw i32 %93, %110 (idx: 6)           -35                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_multiply_32_0     main_signed_multiply_32_1     main_signed_multiply_32_2     main_signed_multiply_32_3     main_signed_multiply_32_4     main_signed_multiply_32_5     main_signed_multiply_32_6     main_signed_multiply_32_7     main_signed_multiply_32_8     main_signed_multiply_32_9     main_signed_multiply_32_10    main_signed_multiply_32_11    main_signed_multiply_32_12    main_signed_multiply_32_13    main_signed_multiply_32_14    
  %103 = mul nsw i32 %102, %10... (idx: 0)        0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             1                             
  %106 = mul nsw i32 %97, %105 (idx: 1)           0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             1                             0                             0                             0                             0                             
  %107 = mul nsw i32 %93, %102 (idx: 2)           0                             0                             0                             0                             0                             0                             0                             0                             0                             1                             0                             0                             0                             0                             0                             
  %111 = mul nsw i32 %110, %11... (idx: 3)        0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             1                             0                             0                             
  %113 = mul nsw i32 %102, %11... (idx: 4)        0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             1                             0                             
  %115 = mul nsw i32 %97, %110 (idx: 5)           1                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             
  %117 = mul nsw i32 %93, %110 (idx: 6)           0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             1                             0                             0                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %115 = mul nsw i32 %97, %110 (idx: 5) -> main_signed_multiply_32_0 (mux inputs: 6)
  %107 = mul nsw i32 %93, %102 (idx: 2) -> main_signed_multiply_32_9 (mux inputs: 2)
  %106 = mul nsw i32 %97, %105 (idx: 1) -> main_signed_multiply_32_10 (mux inputs: 2)
  %117 = mul nsw i32 %93, %110 (idx: 6) -> main_signed_multiply_32_11 (mux inputs: 2)
  %111 = mul nsw i32 %110, %11... (idx: 3) -> main_signed_multiply_32_12 (mux inputs: 1)
  %113 = mul nsw i32 %102, %11... (idx: 4) -> main_signed_multiply_32_13 (mux inputs: 2)
  %103 = mul nsw i32 %102, %10... (idx: 0) -> main_signed_multiply_32_14 (mux inputs: 2)
State: LEGUP_F_main_BB_threadi
Binding functional unit type: main_0_so_local_mem_dual_port
Weight matrix for operation/function unit matching:
  %145 = load i16* %144, align... can share an output register with another operation already assigned to main_main_0_so_local_mem_dual_port_0
  %145 = load i16* %144, align... can share an output register with another operation already assigned to main_main_0_so_local_mem_dual_port_1
  %161 = load i16* %160, align... can share an output register with another operation already assigned to main_main_0_so_local_mem_dual_port_0
                                                  main_main_0_so_local_mem_dual_port_0main_main_0_so_local_mem_dual_port_1
  %145 = load i16* %144, align... (idx: 0)        5                             75                            
  %161 = load i16* %160, align... (idx: 1)        5                             65                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_main_0_so_local_mem_dual_port_0main_main_0_so_local_mem_dual_port_1
  %145 = load i16* %144, align... (idx: 0)        1                             0                             
  %161 = load i16* %160, align... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %145 = load i16* %144, align... (idx: 0) -> main_main_0_so_local_mem_dual_port_0 (mux inputs: 11)
  %161 = load i16* %160, align... (idx: 1) -> main_main_0_so_local_mem_dual_port_1 (mux inputs: 4)
State: LEGUP_F_main_BB_threadi
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %104 = add nuw nsw i32 %103,... can share an output register with another operation already assigned to main_signed_add_32_0
  %104 = add nuw nsw i32 %103,... can share an output register with another operation already assigned to main_signed_add_32_1
  %104 = add nuw nsw i32 %103,... can share an output register with another operation already assigned to main_signed_add_32_6
  %104 = add nuw nsw i32 %103,... can share an output register with another operation already assigned to main_signed_add_32_9
  %104 = add nuw nsw i32 %103,... can share an output register with another operation already assigned to main_signed_add_32_10
  %104 = add nuw nsw i32 %103,... can share an output register with another operation already assigned to main_signed_add_32_11
  %104 = add nuw nsw i32 %103,... can share an output register with another operation already assigned to main_signed_add_32_12
  %112 = add nuw nsw i32 %111,... can share an output register with another operation already assigned to main_signed_add_32_0
  %112 = add nuw nsw i32 %111,... can share an output register with another operation already assigned to main_signed_add_32_1
  %112 = add nuw nsw i32 %111,... can share an output register with another operation already assigned to main_signed_add_32_6
  %112 = add nuw nsw i32 %111,... can share an output register with another operation already assigned to main_signed_add_32_9
  %112 = add nuw nsw i32 %111,... can share an output register with another operation already assigned to main_signed_add_32_10
  %112 = add nuw nsw i32 %111,... can share an output register with another operation already assigned to main_signed_add_32_11
  %112 = add nuw nsw i32 %111,... can share an output register with another operation already assigned to main_signed_add_32_12
  %114 = add nsw i32 %113, %10... can share an output register with another operation already assigned to main_signed_add_32_0
  %114 = add nsw i32 %113, %10... can share an output register with another operation already assigned to main_signed_add_32_1
  %114 = add nsw i32 %113, %10... can share an output register with another operation already assigned to main_signed_add_32_6
  %114 = add nsw i32 %113, %10... can share an output register with another operation already assigned to main_signed_add_32_9
  %114 = add nsw i32 %113, %10... can share an output register with another operation already assigned to main_signed_add_32_10
  %114 = add nsw i32 %113, %10... can share an output register with another operation already assigned to main_signed_add_32_11
  %114 = add nsw i32 %113, %10... can share an output register with another operation already assigned to main_signed_add_32_12
  %116 = add nsw i32 %115, %10... can share an output register with another operation already assigned to main_signed_add_32_0
  %116 = add nsw i32 %115, %10... can share an output register with another operation already assigned to main_signed_add_32_1
  %116 = add nsw i32 %115, %10... can share an output register with another operation already assigned to main_signed_add_32_6
  %116 = add nsw i32 %115, %10... can share an output register with another operation already assigned to main_signed_add_32_9
  %116 = add nsw i32 %115, %10... can share an output register with another operation already assigned to main_signed_add_32_10
  %116 = add nsw i32 %115, %10... can share an output register with another operation already assigned to main_signed_add_32_11
  %116 = add nsw i32 %115, %10... can share an output register with another operation already assigned to main_signed_add_32_12
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         
  %104 = add nuw nsw i32 %103,... (idx: 0)        -350                          -50                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -9                            -9                            90                            
  %112 = add nuw nsw i32 %111,... (idx: 1)        -350                          -50                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -9                            -9                            90                            
  %114 = add nsw i32 %113, %10... (idx: 2)        -350                          -50                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -8                            90                            
  %116 = add nsw i32 %115, %10... (idx: 3)        -350                          -50                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -8                            90                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         
  %104 = add nuw nsw i32 %103,... (idx: 0)        1                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             
  %112 = add nuw nsw i32 %111,... (idx: 1)        0                             1                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             
  %114 = add nsw i32 %113, %10... (idx: 2)        0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             1                             0                             0                             
  %116 = add nsw i32 %115, %10... (idx: 3)        0                             0                             1                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %104 = add nuw nsw i32 %103,... (idx: 0) -> main_signed_add_32_0 (mux inputs: 37)
  %112 = add nuw nsw i32 %111,... (idx: 1) -> main_signed_add_32_1 (mux inputs: 7)
  %116 = add nsw i32 %115, %10... (idx: 3) -> main_signed_add_32_2 (mux inputs: 2)
  %114 = add nsw i32 %113, %10... (idx: 2) -> main_signed_add_32_12 (mux inputs: 3)
State: LEGUP_F_main_BB_threadi
Binding functional unit type: signed_multiply_32
Weight matrix for operation/function unit matching:
  %121 = mul nsw i32 %120, %12... can share an output register with another operation already assigned to main_signed_multiply_32_0
  %121 = mul nsw i32 %120, %12... can share an output register with another operation already assigned to main_signed_multiply_32_9
  %121 = mul nsw i32 %120, %12... can share an output register with another operation already assigned to main_signed_multiply_32_10
  %121 = mul nsw i32 %120, %12... can share an output register with another operation already assigned to main_signed_multiply_32_12
  %121 = mul nsw i32 %120, %12... can share an output register with another operation already assigned to main_signed_multiply_32_13
  %121 = mul nsw i32 %120, %12... can share an output register with another operation already assigned to main_signed_multiply_32_14
  %123 = mul nsw i32 %110, %12... hey can share an input with another operation already assigned to main_signed_multiply_32_0
  %123 = mul nsw i32 %110, %12... can share an output register with another operation already assigned to main_signed_multiply_32_0
  %123 = mul nsw i32 %110, %12... can share an output register with another operation already assigned to main_signed_multiply_32_9
  %123 = mul nsw i32 %110, %12... can share an output register with another operation already assigned to main_signed_multiply_32_10
  %123 = mul nsw i32 %110, %12... hey can share an input with another operation already assigned to main_signed_multiply_32_11
  %123 = mul nsw i32 %110, %12... hey can share an input with another operation already assigned to main_signed_multiply_32_12
  %123 = mul nsw i32 %110, %12... can share an output register with another operation already assigned to main_signed_multiply_32_12
  %123 = mul nsw i32 %110, %12... hey can share an input with another operation already assigned to main_signed_multiply_32_13
  %123 = mul nsw i32 %110, %12... can share an output register with another operation already assigned to main_signed_multiply_32_13
  %123 = mul nsw i32 %110, %12... can share an output register with another operation already assigned to main_signed_multiply_32_14
  %125 = mul nsw i32 %102, %12... can share an output register with another operation already assigned to main_signed_multiply_32_0
  %125 = mul nsw i32 %102, %12... hey can share an input with another operation already assigned to main_signed_multiply_32_9
  %125 = mul nsw i32 %102, %12... can share an output register with another operation already assigned to main_signed_multiply_32_9
  %125 = mul nsw i32 %102, %12... can share an output register with another operation already assigned to main_signed_multiply_32_10
  %125 = mul nsw i32 %102, %12... can share an output register with another operation already assigned to main_signed_multiply_32_12
  %125 = mul nsw i32 %102, %12... hey can share an input with another operation already assigned to main_signed_multiply_32_13
  %125 = mul nsw i32 %102, %12... can share an output register with another operation already assigned to main_signed_multiply_32_13
  %125 = mul nsw i32 %102, %12... hey can share an input with another operation already assigned to main_signed_multiply_32_14
  %125 = mul nsw i32 %102, %12... can share an output register with another operation already assigned to main_signed_multiply_32_14
  %127 = mul nsw i32 %97, %120 hey can share an input with another operation already assigned to main_signed_multiply_32_0
  %127 = mul nsw i32 %97, %120 can share an output register with another operation already assigned to main_signed_multiply_32_0
  %127 = mul nsw i32 %97, %120 can share an output register with another operation already assigned to main_signed_multiply_32_9
  %127 = mul nsw i32 %97, %120 hey can share an input with another operation already assigned to main_signed_multiply_32_10
  %127 = mul nsw i32 %97, %120 can share an output register with another operation already assigned to main_signed_multiply_32_10
  %127 = mul nsw i32 %97, %120 can share an output register with another operation already assigned to main_signed_multiply_32_12
  %127 = mul nsw i32 %97, %120 can share an output register with another operation already assigned to main_signed_multiply_32_13
  %127 = mul nsw i32 %97, %120 hey can share an input with another operation already assigned to main_signed_multiply_32_14
  %127 = mul nsw i32 %97, %120 can share an output register with another operation already assigned to main_signed_multiply_32_14
  %129 = mul nsw i32 %93, %120 hey can share an input with another operation already assigned to main_signed_multiply_32_0
  %129 = mul nsw i32 %93, %120 can share an output register with another operation already assigned to main_signed_multiply_32_0
  %129 = mul nsw i32 %93, %120 hey can share an input with another operation already assigned to main_signed_multiply_32_9
  %129 = mul nsw i32 %93, %120 can share an output register with another operation already assigned to main_signed_multiply_32_9
  %129 = mul nsw i32 %93, %120 can share an output register with another operation already assigned to main_signed_multiply_32_10
  %129 = mul nsw i32 %93, %120 hey can share an input with another operation already assigned to main_signed_multiply_32_11
  %129 = mul nsw i32 %93, %120 can share an output register with another operation already assigned to main_signed_multiply_32_12
  %129 = mul nsw i32 %93, %120 can share an output register with another operation already assigned to main_signed_multiply_32_13
  %129 = mul nsw i32 %93, %120 can share an output register with another operation already assigned to main_signed_multiply_32_14
  %133 = mul nsw i32 %132, %13... can share an output register with another operation already assigned to main_signed_multiply_32_0
  %133 = mul nsw i32 %132, %13... can share an output register with another operation already assigned to main_signed_multiply_32_9
  %133 = mul nsw i32 %132, %13... can share an output register with another operation already assigned to main_signed_multiply_32_10
  %133 = mul nsw i32 %132, %13... can share an output register with another operation already assigned to main_signed_multiply_32_12
  %133 = mul nsw i32 %132, %13... can share an output register with another operation already assigned to main_signed_multiply_32_13
  %133 = mul nsw i32 %132, %13... can share an output register with another operation already assigned to main_signed_multiply_32_14
  %135 = mul nsw i32 %120, %13... can share an output register with another operation already assigned to main_signed_multiply_32_0
  %135 = mul nsw i32 %120, %13... can share an output register with another operation already assigned to main_signed_multiply_32_9
  %135 = mul nsw i32 %120, %13... can share an output register with another operation already assigned to main_signed_multiply_32_10
  %135 = mul nsw i32 %120, %13... can share an output register with another operation already assigned to main_signed_multiply_32_12
  %135 = mul nsw i32 %120, %13... can share an output register with another operation already assigned to main_signed_multiply_32_13
  %135 = mul nsw i32 %120, %13... can share an output register with another operation already assigned to main_signed_multiply_32_14
  %137 = mul nsw i32 %110, %13... hey can share an input with another operation already assigned to main_signed_multiply_32_0
  %137 = mul nsw i32 %110, %13... can share an output register with another operation already assigned to main_signed_multiply_32_0
  %137 = mul nsw i32 %110, %13... can share an output register with another operation already assigned to main_signed_multiply_32_9
  %137 = mul nsw i32 %110, %13... can share an output register with another operation already assigned to main_signed_multiply_32_10
  %137 = mul nsw i32 %110, %13... hey can share an input with another operation already assigned to main_signed_multiply_32_11
  %137 = mul nsw i32 %110, %13... hey can share an input with another operation already assigned to main_signed_multiply_32_12
  %137 = mul nsw i32 %110, %13... can share an output register with another operation already assigned to main_signed_multiply_32_12
  %137 = mul nsw i32 %110, %13... hey can share an input with another operation already assigned to main_signed_multiply_32_13
  %137 = mul nsw i32 %110, %13... can share an output register with another operation already assigned to main_signed_multiply_32_13
  %137 = mul nsw i32 %110, %13... can share an output register with another operation already assigned to main_signed_multiply_32_14
  %139 = mul nsw i32 %102, %13... can share an output register with another operation already assigned to main_signed_multiply_32_0
  %139 = mul nsw i32 %102, %13... hey can share an input with another operation already assigned to main_signed_multiply_32_9
  %139 = mul nsw i32 %102, %13... can share an output register with another operation already assigned to main_signed_multiply_32_9
  %139 = mul nsw i32 %102, %13... can share an output register with another operation already assigned to main_signed_multiply_32_10
  %139 = mul nsw i32 %102, %13... can share an output register with another operation already assigned to main_signed_multiply_32_12
  %139 = mul nsw i32 %102, %13... hey can share an input with another operation already assigned to main_signed_multiply_32_13
  %139 = mul nsw i32 %102, %13... can share an output register with another operation already assigned to main_signed_multiply_32_13
  %139 = mul nsw i32 %102, %13... hey can share an input with another operation already assigned to main_signed_multiply_32_14
  %139 = mul nsw i32 %102, %13... can share an output register with another operation already assigned to main_signed_multiply_32_14
  %141 = mul nsw i32 %97, %132 hey can share an input with another operation already assigned to main_signed_multiply_32_0
  %141 = mul nsw i32 %97, %132 can share an output register with another operation already assigned to main_signed_multiply_32_0
  %141 = mul nsw i32 %97, %132 can share an output register with another operation already assigned to main_signed_multiply_32_9
  %141 = mul nsw i32 %97, %132 hey can share an input with another operation already assigned to main_signed_multiply_32_10
  %141 = mul nsw i32 %97, %132 can share an output register with another operation already assigned to main_signed_multiply_32_10
  %141 = mul nsw i32 %97, %132 can share an output register with another operation already assigned to main_signed_multiply_32_12
  %141 = mul nsw i32 %97, %132 can share an output register with another operation already assigned to main_signed_multiply_32_13
  %141 = mul nsw i32 %97, %132 hey can share an input with another operation already assigned to main_signed_multiply_32_14
  %141 = mul nsw i32 %97, %132 can share an output register with another operation already assigned to main_signed_multiply_32_14
  %143 = mul nsw i32 %93, %132 hey can share an input with another operation already assigned to main_signed_multiply_32_0
  %143 = mul nsw i32 %93, %132 can share an output register with another operation already assigned to main_signed_multiply_32_0
  %143 = mul nsw i32 %93, %132 hey can share an input with another operation already assigned to main_signed_multiply_32_9
  %143 = mul nsw i32 %93, %132 can share an output register with another operation already assigned to main_signed_multiply_32_9
  %143 = mul nsw i32 %93, %132 can share an output register with another operation already assigned to main_signed_multiply_32_10
  %143 = mul nsw i32 %93, %132 hey can share an input with another operation already assigned to main_signed_multiply_32_11
  %143 = mul nsw i32 %93, %132 can share an output register with another operation already assigned to main_signed_multiply_32_12
  %143 = mul nsw i32 %93, %132 can share an output register with another operation already assigned to main_signed_multiply_32_13
  %143 = mul nsw i32 %93, %132 can share an output register with another operation already assigned to main_signed_multiply_32_14
                                                  main_signed_multiply_32_0     main_signed_multiply_32_1     main_signed_multiply_32_2     main_signed_multiply_32_3     main_signed_multiply_32_4     main_signed_multiply_32_5     main_signed_multiply_32_6     main_signed_multiply_32_7     main_signed_multiply_32_8     main_signed_multiply_32_9     main_signed_multiply_32_10    main_signed_multiply_32_11    main_signed_multiply_32_12    main_signed_multiply_32_13    main_signed_multiply_32_14    
  %121 = mul nsw i32 %120, %12... (idx: 0)        -60                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -20                           -20                           -30                           -10                           -20                           -20                           
  %123 = mul nsw i32 %110, %12... (idx: 1)        -55                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -20                           -20                           -25                           -5                            -15                           -20                           
  %125 = mul nsw i32 %102, %12... (idx: 2)        -60                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -15                           -20                           -30                           -10                           -15                           -15                           
  %127 = mul nsw i32 %97, %120 (idx: 3)           -55                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -20                           -15                           -30                           -10                           -20                           -15                           
  %129 = mul nsw i32 %93, %120 (idx: 4)           -55                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -15                           -20                           -25                           -10                           -20                           -20                           
  %133 = mul nsw i32 %132, %13... (idx: 5)        -60                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -20                           -20                           -30                           -10                           -20                           -20                           
  %135 = mul nsw i32 %120, %13... (idx: 6)        -60                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -20                           -20                           -30                           -10                           -20                           -20                           
  %137 = mul nsw i32 %110, %13... (idx: 7)        -55                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -20                           -20                           -25                           -5                            -15                           -20                           
  %139 = mul nsw i32 %102, %13... (idx: 8)        -60                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -15                           -20                           -30                           -10                           -15                           -15                           
  %141 = mul nsw i32 %97, %132 (idx: 9)           -55                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -20                           -15                           -30                           -10                           -20                           -15                           
  %143 = mul nsw i32 %93, %132 (idx: 10)          -55                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -15                           -20                           -25                           -10                           -20                           -20                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_multiply_32_0     main_signed_multiply_32_1     main_signed_multiply_32_2     main_signed_multiply_32_3     main_signed_multiply_32_4     main_signed_multiply_32_5     main_signed_multiply_32_6     main_signed_multiply_32_7     main_signed_multiply_32_8     main_signed_multiply_32_9     main_signed_multiply_32_10    main_signed_multiply_32_11    main_signed_multiply_32_12    main_signed_multiply_32_13    main_signed_multiply_32_14    
  %121 = mul nsw i32 %120, %12... (idx: 0)        1                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             
  %123 = mul nsw i32 %110, %12... (idx: 1)        0                             0                             0                             0                             0                             0                             0                             0                             0                             1                             0                             0                             0                             0                             0                             
  %125 = mul nsw i32 %102, %12... (idx: 2)        0                             0                             0                             0                             0                             0                             1                             0                             0                             0                             0                             0                             0                             0                             0                             
  %127 = mul nsw i32 %97, %120 (idx: 3)           0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             1                             0                             0                             0                             
  %129 = mul nsw i32 %93, %120 (idx: 4)           0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             1                             0                             0                             0                             0                             
  %133 = mul nsw i32 %132, %13... (idx: 5)        0                             0                             0                             0                             0                             0                             0                             1                             0                             0                             0                             0                             0                             0                             0                             
  %135 = mul nsw i32 %120, %13... (idx: 6)        0                             0                             0                             0                             0                             0                             0                             0                             1                             0                             0                             0                             0                             0                             0                             
  %137 = mul nsw i32 %110, %13... (idx: 7)        0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             1                             
  %139 = mul nsw i32 %102, %13... (idx: 8)        0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             1                             0                             0                             
  %141 = mul nsw i32 %97, %132 (idx: 9)           0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             1                             0                             
  %143 = mul nsw i32 %93, %132 (idx: 10)          0                             0                             0                             0                             0                             1                             0                             0                             0                             0                             0                             0                             0                             0                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %121 = mul nsw i32 %120, %12... (idx: 0) -> main_signed_multiply_32_0 (mux inputs: 7)
  %143 = mul nsw i32 %93, %132 (idx: 10) -> main_signed_multiply_32_5 (mux inputs: 2)
  %125 = mul nsw i32 %102, %12... (idx: 2) -> main_signed_multiply_32_6 (mux inputs: 2)
  %133 = mul nsw i32 %132, %13... (idx: 5) -> main_signed_multiply_32_7 (mux inputs: 1)
  %135 = mul nsw i32 %120, %13... (idx: 6) -> main_signed_multiply_32_8 (mux inputs: 2)
  %123 = mul nsw i32 %110, %12... (idx: 1) -> main_signed_multiply_32_9 (mux inputs: 4)
  %129 = mul nsw i32 %93, %120 (idx: 4) -> main_signed_multiply_32_10 (mux inputs: 4)
  %127 = mul nsw i32 %97, %120 (idx: 3) -> main_signed_multiply_32_11 (mux inputs: 4)
  %139 = mul nsw i32 %102, %13... (idx: 8) -> main_signed_multiply_32_12 (mux inputs: 3)
  %141 = mul nsw i32 %97, %132 (idx: 9) -> main_signed_multiply_32_13 (mux inputs: 4)
  %137 = mul nsw i32 %110, %13... (idx: 7) -> main_signed_multiply_32_14 (mux inputs: 4)
State: LEGUP_F_main_BB_threadi
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %122 = add nuw nsw i32 %121,... can share an output register with another operation already assigned to main_signed_add_32_0
  %122 = add nuw nsw i32 %121,... can share an output register with another operation already assigned to main_signed_add_32_1
  %122 = add nuw nsw i32 %121,... can share an output register with another operation already assigned to main_signed_add_32_6
  %122 = add nuw nsw i32 %121,... can share an output register with another operation already assigned to main_signed_add_32_9
  %122 = add nuw nsw i32 %121,... can share an output register with another operation already assigned to main_signed_add_32_10
  %122 = add nuw nsw i32 %121,... can share an output register with another operation already assigned to main_signed_add_32_11
  %122 = add nuw nsw i32 %121,... can share an output register with another operation already assigned to main_signed_add_32_12
  %124 = add nsw i32 %123, %11... can share an output register with another operation already assigned to main_signed_add_32_0
  %124 = add nsw i32 %123, %11... can share an output register with another operation already assigned to main_signed_add_32_1
  %124 = add nsw i32 %123, %11... can share an output register with another operation already assigned to main_signed_add_32_6
  %124 = add nsw i32 %123, %11... can share an output register with another operation already assigned to main_signed_add_32_9
  %124 = add nsw i32 %123, %11... can share an output register with another operation already assigned to main_signed_add_32_10
  %124 = add nsw i32 %123, %11... can share an output register with another operation already assigned to main_signed_add_32_11
  %124 = add nsw i32 %123, %11... can share an output register with another operation already assigned to main_signed_add_32_12
  %126 = add nsw i32 %125, %11... can share an output register with another operation already assigned to main_signed_add_32_0
  %126 = add nsw i32 %125, %11... can share an output register with another operation already assigned to main_signed_add_32_1
  %126 = add nsw i32 %125, %11... can share an output register with another operation already assigned to main_signed_add_32_6
  %126 = add nsw i32 %125, %11... can share an output register with another operation already assigned to main_signed_add_32_9
  %126 = add nsw i32 %125, %11... can share an output register with another operation already assigned to main_signed_add_32_10
  %126 = add nsw i32 %125, %11... can share an output register with another operation already assigned to main_signed_add_32_11
  %126 = add nsw i32 %125, %11... can share an output register with another operation already assigned to main_signed_add_32_12
  %128 = add nsw i32 %127, %11... can share an output register with another operation already assigned to main_signed_add_32_0
  %128 = add nsw i32 %127, %11... can share an output register with another operation already assigned to main_signed_add_32_1
  %128 = add nsw i32 %127, %11... can share an output register with another operation already assigned to main_signed_add_32_6
  %128 = add nsw i32 %127, %11... can share an output register with another operation already assigned to main_signed_add_32_9
  %128 = add nsw i32 %127, %11... can share an output register with another operation already assigned to main_signed_add_32_10
  %128 = add nsw i32 %127, %11... can share an output register with another operation already assigned to main_signed_add_32_11
  %128 = add nsw i32 %127, %11... can share an output register with another operation already assigned to main_signed_add_32_12
  %134 = add nuw nsw i32 %133,... can share an output register with another operation already assigned to main_signed_add_32_0
  %134 = add nuw nsw i32 %133,... can share an output register with another operation already assigned to main_signed_add_32_1
  %134 = add nuw nsw i32 %133,... can share an output register with another operation already assigned to main_signed_add_32_6
  %134 = add nuw nsw i32 %133,... can share an output register with another operation already assigned to main_signed_add_32_9
  %134 = add nuw nsw i32 %133,... can share an output register with another operation already assigned to main_signed_add_32_10
  %134 = add nuw nsw i32 %133,... can share an output register with another operation already assigned to main_signed_add_32_11
  %134 = add nuw nsw i32 %133,... can share an output register with another operation already assigned to main_signed_add_32_12
  %136 = add nsw i32 %135, %12... can share an output register with another operation already assigned to main_signed_add_32_0
  %136 = add nsw i32 %135, %12... can share an output register with another operation already assigned to main_signed_add_32_1
  %136 = add nsw i32 %135, %12... can share an output register with another operation already assigned to main_signed_add_32_6
  %136 = add nsw i32 %135, %12... can share an output register with another operation already assigned to main_signed_add_32_9
  %136 = add nsw i32 %135, %12... can share an output register with another operation already assigned to main_signed_add_32_10
  %136 = add nsw i32 %135, %12... can share an output register with another operation already assigned to main_signed_add_32_11
  %136 = add nsw i32 %135, %12... can share an output register with another operation already assigned to main_signed_add_32_12
  %138 = add nsw i32 %137, %12... can share an output register with another operation already assigned to main_signed_add_32_0
  %138 = add nsw i32 %137, %12... can share an output register with another operation already assigned to main_signed_add_32_1
  %138 = add nsw i32 %137, %12... can share an output register with another operation already assigned to main_signed_add_32_6
  %138 = add nsw i32 %137, %12... can share an output register with another operation already assigned to main_signed_add_32_9
  %138 = add nsw i32 %137, %12... can share an output register with another operation already assigned to main_signed_add_32_10
  %138 = add nsw i32 %137, %12... can share an output register with another operation already assigned to main_signed_add_32_11
  %138 = add nsw i32 %137, %12... can share an output register with another operation already assigned to main_signed_add_32_12
  %140 = add nsw i32 %139, %12... can share an output register with another operation already assigned to main_signed_add_32_0
  %140 = add nsw i32 %139, %12... can share an output register with another operation already assigned to main_signed_add_32_1
  %140 = add nsw i32 %139, %12... can share an output register with another operation already assigned to main_signed_add_32_6
  %140 = add nsw i32 %139, %12... can share an output register with another operation already assigned to main_signed_add_32_9
  %140 = add nsw i32 %139, %12... can share an output register with another operation already assigned to main_signed_add_32_10
  %140 = add nsw i32 %139, %12... can share an output register with another operation already assigned to main_signed_add_32_11
  %140 = add nsw i32 %139, %12... can share an output register with another operation already assigned to main_signed_add_32_12
  %142 = add nsw i32 %141, %12... can share an output register with another operation already assigned to main_signed_add_32_0
  %142 = add nsw i32 %141, %12... can share an output register with another operation already assigned to main_signed_add_32_1
  %142 = add nsw i32 %141, %12... can share an output register with another operation already assigned to main_signed_add_32_6
  %142 = add nsw i32 %141, %12... can share an output register with another operation already assigned to main_signed_add_32_9
  %142 = add nsw i32 %141, %12... can share an output register with another operation already assigned to main_signed_add_32_10
  %142 = add nsw i32 %141, %12... can share an output register with another operation already assigned to main_signed_add_32_11
  %142 = add nsw i32 %141, %12... can share an output register with another operation already assigned to main_signed_add_32_12
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         
  %122 = add nuw nsw i32 %121,... (idx: 0)        -370                          -70                           -30                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -29                           -9                            90                            
  %124 = add nsw i32 %123, %11... (idx: 1)        -370                          -70                           -30                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -29                           -9                            90                            
  %126 = add nsw i32 %125, %11... (idx: 2)        -370                          -70                           -30                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -29                           -9                            90                            
  %128 = add nsw i32 %127, %11... (idx: 3)        -370                          -70                           -30                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -30                           -8                            90                            
  %134 = add nuw nsw i32 %133,... (idx: 4)        -370                          -70                           -30                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -29                           -9                            90                            
  %136 = add nsw i32 %135, %12... (idx: 5)        -370                          -70                           -30                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -29                           -9                            90                            
  %138 = add nsw i32 %137, %12... (idx: 6)        -370                          -70                           -30                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -29                           -9                            90                            
  %140 = add nsw i32 %139, %12... (idx: 7)        -370                          -70                           -30                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -29                           -9                            90                            
  %142 = add nsw i32 %141, %12... (idx: 8)        -370                          -70                           -30                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -10                           -30                           -8                            90                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         
  %122 = add nuw nsw i32 %121,... (idx: 0)        1                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             
  %124 = add nsw i32 %123, %11... (idx: 1)        0                             1                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             
  %126 = add nsw i32 %125, %11... (idx: 2)        0                             0                             1                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             
  %128 = add nsw i32 %127, %11... (idx: 3)        0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             1                             0                             0                             
  %134 = add nuw nsw i32 %133,... (idx: 4)        0                             0                             0                             0                             0                             0                             0                             0                             0                             1                             0                             0                             0                             0                             0                             
  %136 = add nsw i32 %135, %12... (idx: 5)        0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             1                             0                             0                             0                             0                             
  %138 = add nsw i32 %137, %12... (idx: 6)        0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             1                             0                             0                             0                             
  %140 = add nsw i32 %139, %12... (idx: 7)        0                             0                             0                             0                             0                             0                             0                             1                             0                             0                             0                             0                             0                             0                             0                             
  %142 = add nsw i32 %141, %12... (idx: 8)        0                             0                             0                             0                             0                             0                             0                             0                             1                             0                             0                             0                             0                             0                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %122 = add nuw nsw i32 %121,... (idx: 0) -> main_signed_add_32_0 (mux inputs: 39)
  %124 = add nsw i32 %123, %11... (idx: 1) -> main_signed_add_32_1 (mux inputs: 9)
  %126 = add nsw i32 %125, %11... (idx: 2) -> main_signed_add_32_2 (mux inputs: 4)
  %140 = add nsw i32 %139, %12... (idx: 7) -> main_signed_add_32_7 (mux inputs: 2)
  %142 = add nsw i32 %141, %12... (idx: 8) -> main_signed_add_32_8 (mux inputs: 2)
  %134 = add nuw nsw i32 %133,... (idx: 4) -> main_signed_add_32_9 (mux inputs: 3)
  %136 = add nsw i32 %135, %12... (idx: 5) -> main_signed_add_32_10 (mux inputs: 3)
  %138 = add nsw i32 %137, %12... (idx: 6) -> main_signed_add_32_11 (mux inputs: 3)
  %128 = add nsw i32 %127, %11... (idx: 3) -> main_signed_add_32_12 (mux inputs: 5)
State: LEGUP_F_main_BB_threadi
Binding functional unit type: signed_multiply_32
Weight matrix for operation/function unit matching:
  %147 = mul nsw i32 %146, %14... can share an output register with another operation already assigned to main_signed_multiply_32_0
  %147 = mul nsw i32 %146, %14... can share an output register with another operation already assigned to main_signed_multiply_32_6
  %147 = mul nsw i32 %146, %14... can share an output register with another operation already assigned to main_signed_multiply_32_7
  %147 = mul nsw i32 %146, %14... can share an output register with another operation already assigned to main_signed_multiply_32_8
  %147 = mul nsw i32 %146, %14... can share an output register with another operation already assigned to main_signed_multiply_32_9
  %147 = mul nsw i32 %146, %14... can share an output register with another operation already assigned to main_signed_multiply_32_10
  %147 = mul nsw i32 %146, %14... can share an output register with another operation already assigned to main_signed_multiply_32_11
  %147 = mul nsw i32 %146, %14... can share an output register with another operation already assigned to main_signed_multiply_32_12
  %147 = mul nsw i32 %146, %14... can share an output register with another operation already assigned to main_signed_multiply_32_13
  %147 = mul nsw i32 %146, %14... can share an output register with another operation already assigned to main_signed_multiply_32_14
  %149 = mul nsw i32 %132, %14... can share an output register with another operation already assigned to main_signed_multiply_32_0
  %149 = mul nsw i32 %132, %14... hey can share an input with another operation already assigned to main_signed_multiply_32_5
  %149 = mul nsw i32 %132, %14... can share an output register with another operation already assigned to main_signed_multiply_32_6
  %149 = mul nsw i32 %132, %14... hey can share an input with another operation already assigned to main_signed_multiply_32_7
  %149 = mul nsw i32 %132, %14... can share an output register with another operation already assigned to main_signed_multiply_32_7
  %149 = mul nsw i32 %132, %14... hey can share an input with another operation already assigned to main_signed_multiply_32_8
  %149 = mul nsw i32 %132, %14... can share an output register with another operation already assigned to main_signed_multiply_32_8
  %149 = mul nsw i32 %132, %14... can share an output register with another operation already assigned to main_signed_multiply_32_9
  %149 = mul nsw i32 %132, %14... can share an output register with another operation already assigned to main_signed_multiply_32_10
  %149 = mul nsw i32 %132, %14... can share an output register with another operation already assigned to main_signed_multiply_32_11
  %149 = mul nsw i32 %132, %14... hey can share an input with another operation already assigned to main_signed_multiply_32_12
  %149 = mul nsw i32 %132, %14... can share an output register with another operation already assigned to main_signed_multiply_32_12
  %149 = mul nsw i32 %132, %14... hey can share an input with another operation already assigned to main_signed_multiply_32_13
  %149 = mul nsw i32 %132, %14... can share an output register with another operation already assigned to main_signed_multiply_32_13
  %149 = mul nsw i32 %132, %14... hey can share an input with another operation already assigned to main_signed_multiply_32_14
  %149 = mul nsw i32 %132, %14... can share an output register with another operation already assigned to main_signed_multiply_32_14
  %151 = mul nsw i32 %120, %14... hey can share an input with another operation already assigned to main_signed_multiply_32_0
  %151 = mul nsw i32 %120, %14... can share an output register with another operation already assigned to main_signed_multiply_32_0
  %151 = mul nsw i32 %120, %14... hey can share an input with another operation already assigned to main_signed_multiply_32_6
  %151 = mul nsw i32 %120, %14... can share an output register with another operation already assigned to main_signed_multiply_32_6
  %151 = mul nsw i32 %120, %14... can share an output register with another operation already assigned to main_signed_multiply_32_7
  %151 = mul nsw i32 %120, %14... hey can share an input with another operation already assigned to main_signed_multiply_32_8
  %151 = mul nsw i32 %120, %14... can share an output register with another operation already assigned to main_signed_multiply_32_8
  %151 = mul nsw i32 %120, %14... hey can share an input with another operation already assigned to main_signed_multiply_32_9
  %151 = mul nsw i32 %120, %14... can share an output register with another operation already assigned to main_signed_multiply_32_9
  %151 = mul nsw i32 %120, %14... hey can share an input with another operation already assigned to main_signed_multiply_32_10
  %151 = mul nsw i32 %120, %14... can share an output register with another operation already assigned to main_signed_multiply_32_10
  %151 = mul nsw i32 %120, %14... hey can share an input with another operation already assigned to main_signed_multiply_32_11
  %151 = mul nsw i32 %120, %14... can share an output register with another operation already assigned to main_signed_multiply_32_11
  %151 = mul nsw i32 %120, %14... can share an output register with another operation already assigned to main_signed_multiply_32_12
  %151 = mul nsw i32 %120, %14... can share an output register with another operation already assigned to main_signed_multiply_32_13
  %151 = mul nsw i32 %120, %14... can share an output register with another operation already assigned to main_signed_multiply_32_14
  %153 = mul nsw i32 %110, %14... hey can share an input with another operation already assigned to main_signed_multiply_32_0
  %153 = mul nsw i32 %110, %14... can share an output register with another operation already assigned to main_signed_multiply_32_0
  %153 = mul nsw i32 %110, %14... can share an output register with another operation already assigned to main_signed_multiply_32_6
  %153 = mul nsw i32 %110, %14... can share an output register with another operation already assigned to main_signed_multiply_32_7
  %153 = mul nsw i32 %110, %14... can share an output register with another operation already assigned to main_signed_multiply_32_8
  %153 = mul nsw i32 %110, %14... hey can share an input with another operation already assigned to main_signed_multiply_32_9
  %153 = mul nsw i32 %110, %14... can share an output register with another operation already assigned to main_signed_multiply_32_9
  %153 = mul nsw i32 %110, %14... can share an output register with another operation already assigned to main_signed_multiply_32_10
  %153 = mul nsw i32 %110, %14... hey can share an input with another operation already assigned to main_signed_multiply_32_11
  %153 = mul nsw i32 %110, %14... can share an output register with another operation already assigned to main_signed_multiply_32_11
  %153 = mul nsw i32 %110, %14... hey can share an input with another operation already assigned to main_signed_multiply_32_12
  %153 = mul nsw i32 %110, %14... can share an output register with another operation already assigned to main_signed_multiply_32_12
  %153 = mul nsw i32 %110, %14... hey can share an input with another operation already assigned to main_signed_multiply_32_13
  %153 = mul nsw i32 %110, %14... can share an output register with another operation already assigned to main_signed_multiply_32_13
  %153 = mul nsw i32 %110, %14... hey can share an input with another operation already assigned to main_signed_multiply_32_14
  %153 = mul nsw i32 %110, %14... can share an output register with another operation already assigned to main_signed_multiply_32_14
  %155 = mul nsw i32 %102, %14... can share an output register with another operation already assigned to main_signed_multiply_32_0
  %155 = mul nsw i32 %102, %14... hey can share an input with another operation already assigned to main_signed_multiply_32_6
  %155 = mul nsw i32 %102, %14... can share an output register with another operation already assigned to main_signed_multiply_32_6
  %155 = mul nsw i32 %102, %14... can share an output register with another operation already assigned to main_signed_multiply_32_7
  %155 = mul nsw i32 %102, %14... can share an output register with another operation already assigned to main_signed_multiply_32_8
  %155 = mul nsw i32 %102, %14... hey can share an input with another operation already assigned to main_signed_multiply_32_9
  %155 = mul nsw i32 %102, %14... can share an output register with another operation already assigned to main_signed_multiply_32_9
  %155 = mul nsw i32 %102, %14... can share an output register with another operation already assigned to main_signed_multiply_32_10
  %155 = mul nsw i32 %102, %14... can share an output register with another operation already assigned to main_signed_multiply_32_11
  %155 = mul nsw i32 %102, %14... hey can share an input with another operation already assigned to main_signed_multiply_32_12
  %155 = mul nsw i32 %102, %14... can share an output register with another operation already assigned to main_signed_multiply_32_12
  %155 = mul nsw i32 %102, %14... hey can share an input with another operation already assigned to main_signed_multiply_32_13
  %155 = mul nsw i32 %102, %14... can share an output register with another operation already assigned to main_signed_multiply_32_13
  %155 = mul nsw i32 %102, %14... hey can share an input with another operation already assigned to main_signed_multiply_32_14
  %155 = mul nsw i32 %102, %14... can share an output register with another operation already assigned to main_signed_multiply_32_14
  %157 = mul nsw i32 %97, %146 hey can share an input with another operation already assigned to main_signed_multiply_32_0
  %157 = mul nsw i32 %97, %146 can share an output register with another operation already assigned to main_signed_multiply_32_0
  %157 = mul nsw i32 %97, %146 can share an output register with another operation already assigned to main_signed_multiply_32_6
  %157 = mul nsw i32 %97, %146 can share an output register with another operation already assigned to main_signed_multiply_32_7
  %157 = mul nsw i32 %97, %146 can share an output register with another operation already assigned to main_signed_multiply_32_8
  %157 = mul nsw i32 %97, %146 can share an output register with another operation already assigned to main_signed_multiply_32_9
  %157 = mul nsw i32 %97, %146 hey can share an input with another operation already assigned to main_signed_multiply_32_10
  %157 = mul nsw i32 %97, %146 can share an output register with another operation already assigned to main_signed_multiply_32_10
  %157 = mul nsw i32 %97, %146 hey can share an input with another operation already assigned to main_signed_multiply_32_11
  %157 = mul nsw i32 %97, %146 can share an output register with another operation already assigned to main_signed_multiply_32_11
  %157 = mul nsw i32 %97, %146 can share an output register with another operation already assigned to main_signed_multiply_32_12
  %157 = mul nsw i32 %97, %146 hey can share an input with another operation already assigned to main_signed_multiply_32_13
  %157 = mul nsw i32 %97, %146 can share an output register with another operation already assigned to main_signed_multiply_32_13
  %157 = mul nsw i32 %97, %146 hey can share an input with another operation already assigned to main_signed_multiply_32_14
  %157 = mul nsw i32 %97, %146 can share an output register with another operation already assigned to main_signed_multiply_32_14
  %159 = mul nsw i32 %93, %146 hey can share an input with another operation already assigned to main_signed_multiply_32_0
  %159 = mul nsw i32 %93, %146 can share an output register with another operation already assigned to main_signed_multiply_32_0
  %159 = mul nsw i32 %93, %146 hey can share an input with another operation already assigned to main_signed_multiply_32_5
  %159 = mul nsw i32 %93, %146 can share an output register with another operation already assigned to main_signed_multiply_32_6
  %159 = mul nsw i32 %93, %146 can share an output register with another operation already assigned to main_signed_multiply_32_7
  %159 = mul nsw i32 %93, %146 can share an output register with another operation already assigned to main_signed_multiply_32_8
  %159 = mul nsw i32 %93, %146 hey can share an input with another operation already assigned to main_signed_multiply_32_9
  %159 = mul nsw i32 %93, %146 can share an output register with another operation already assigned to main_signed_multiply_32_9
  %159 = mul nsw i32 %93, %146 hey can share an input with another operation already assigned to main_signed_multiply_32_10
  %159 = mul nsw i32 %93, %146 can share an output register with another operation already assigned to main_signed_multiply_32_10
  %159 = mul nsw i32 %93, %146 hey can share an input with another operation already assigned to main_signed_multiply_32_11
  %159 = mul nsw i32 %93, %146 can share an output register with another operation already assigned to main_signed_multiply_32_11
  %159 = mul nsw i32 %93, %146 can share an output register with another operation already assigned to main_signed_multiply_32_12
  %159 = mul nsw i32 %93, %146 can share an output register with another operation already assigned to main_signed_multiply_32_13
  %159 = mul nsw i32 %93, %146 can share an output register with another operation already assigned to main_signed_multiply_32_14
  %163 = mul nsw i32 %162, %16... can share an output register with another operation already assigned to main_signed_multiply_32_0
  %163 = mul nsw i32 %162, %16... can share an output register with another operation already assigned to main_signed_multiply_32_6
  %163 = mul nsw i32 %162, %16... can share an output register with another operation already assigned to main_signed_multiply_32_7
  %163 = mul nsw i32 %162, %16... can share an output register with another operation already assigned to main_signed_multiply_32_8
  %163 = mul nsw i32 %162, %16... can share an output register with another operation already assigned to main_signed_multiply_32_9
  %163 = mul nsw i32 %162, %16... can share an output register with another operation already assigned to main_signed_multiply_32_10
  %163 = mul nsw i32 %162, %16... can share an output register with another operation already assigned to main_signed_multiply_32_11
  %163 = mul nsw i32 %162, %16... can share an output register with another operation already assigned to main_signed_multiply_32_12
  %163 = mul nsw i32 %162, %16... can share an output register with another operation already assigned to main_signed_multiply_32_13
  %163 = mul nsw i32 %162, %16... can share an output register with another operation already assigned to main_signed_multiply_32_14
  %165 = mul nsw i32 %146, %16... can share an output register with another operation already assigned to main_signed_multiply_32_0
  %165 = mul nsw i32 %146, %16... can share an output register with another operation already assigned to main_signed_multiply_32_6
  %165 = mul nsw i32 %146, %16... can share an output register with another operation already assigned to main_signed_multiply_32_7
  %165 = mul nsw i32 %146, %16... can share an output register with another operation already assigned to main_signed_multiply_32_8
  %165 = mul nsw i32 %146, %16... can share an output register with another operation already assigned to main_signed_multiply_32_9
  %165 = mul nsw i32 %146, %16... can share an output register with another operation already assigned to main_signed_multiply_32_10
  %165 = mul nsw i32 %146, %16... can share an output register with another operation already assigned to main_signed_multiply_32_11
  %165 = mul nsw i32 %146, %16... can share an output register with another operation already assigned to main_signed_multiply_32_12
  %165 = mul nsw i32 %146, %16... can share an output register with another operation already assigned to main_signed_multiply_32_13
  %165 = mul nsw i32 %146, %16... can share an output register with another operation already assigned to main_signed_multiply_32_14
  %167 = mul nsw i32 %132, %16... can share an output register with another operation already assigned to main_signed_multiply_32_0
  %167 = mul nsw i32 %132, %16... hey can share an input with another operation already assigned to main_signed_multiply_32_5
  %167 = mul nsw i32 %132, %16... can share an output register with another operation already assigned to main_signed_multiply_32_6
  %167 = mul nsw i32 %132, %16... hey can share an input with another operation already assigned to main_signed_multiply_32_7
  %167 = mul nsw i32 %132, %16... can share an output register with another operation already assigned to main_signed_multiply_32_7
  %167 = mul nsw i32 %132, %16... hey can share an input with another operation already assigned to main_signed_multiply_32_8
  %167 = mul nsw i32 %132, %16... can share an output register with another operation already assigned to main_signed_multiply_32_8
  %167 = mul nsw i32 %132, %16... can share an output register with another operation already assigned to main_signed_multiply_32_9
  %167 = mul nsw i32 %132, %16... can share an output register with another operation already assigned to main_signed_multiply_32_10
  %167 = mul nsw i32 %132, %16... can share an output register with another operation already assigned to main_signed_multiply_32_11
  %167 = mul nsw i32 %132, %16... hey can share an input with another operation already assigned to main_signed_multiply_32_12
  %167 = mul nsw i32 %132, %16... can share an output register with another operation already assigned to main_signed_multiply_32_12
  %167 = mul nsw i32 %132, %16... hey can share an input with another operation already assigned to main_signed_multiply_32_13
  %167 = mul nsw i32 %132, %16... can share an output register with another operation already assigned to main_signed_multiply_32_13
  %167 = mul nsw i32 %132, %16... hey can share an input with another operation already assigned to main_signed_multiply_32_14
  %167 = mul nsw i32 %132, %16... can share an output register with another operation already assigned to main_signed_multiply_32_14
  %169 = mul nsw i32 %120, %16... hey can share an input with another operation already assigned to main_signed_multiply_32_0
  %169 = mul nsw i32 %120, %16... can share an output register with another operation already assigned to main_signed_multiply_32_0
  %169 = mul nsw i32 %120, %16... hey can share an input with another operation already assigned to main_signed_multiply_32_6
  %169 = mul nsw i32 %120, %16... can share an output register with another operation already assigned to main_signed_multiply_32_6
  %169 = mul nsw i32 %120, %16... can share an output register with another operation already assigned to main_signed_multiply_32_7
  %169 = mul nsw i32 %120, %16... hey can share an input with another operation already assigned to main_signed_multiply_32_8
  %169 = mul nsw i32 %120, %16... can share an output register with another operation already assigned to main_signed_multiply_32_8
  %169 = mul nsw i32 %120, %16... hey can share an input with another operation already assigned to main_signed_multiply_32_9
  %169 = mul nsw i32 %120, %16... can share an output register with another operation already assigned to main_signed_multiply_32_9
  %169 = mul nsw i32 %120, %16... hey can share an input with another operation already assigned to main_signed_multiply_32_10
  %169 = mul nsw i32 %120, %16... can share an output register with another operation already assigned to main_signed_multiply_32_10
  %169 = mul nsw i32 %120, %16... hey can share an input with another operation already assigned to main_signed_multiply_32_11
  %169 = mul nsw i32 %120, %16... can share an output register with another operation already assigned to main_signed_multiply_32_11
  %169 = mul nsw i32 %120, %16... can share an output register with another operation already assigned to main_signed_multiply_32_12
  %169 = mul nsw i32 %120, %16... can share an output register with another operation already assigned to main_signed_multiply_32_13
  %169 = mul nsw i32 %120, %16... can share an output register with another operation already assigned to main_signed_multiply_32_14
  %171 = mul nsw i32 %110, %16... hey can share an input with another operation already assigned to main_signed_multiply_32_0
  %171 = mul nsw i32 %110, %16... can share an output register with another operation already assigned to main_signed_multiply_32_0
  %171 = mul nsw i32 %110, %16... can share an output register with another operation already assigned to main_signed_multiply_32_6
  %171 = mul nsw i32 %110, %16... can share an output register with another operation already assigned to main_signed_multiply_32_7
  %171 = mul nsw i32 %110, %16... can share an output register with another operation already assigned to main_signed_multiply_32_8
  %171 = mul nsw i32 %110, %16... hey can share an input with another operation already assigned to main_signed_multiply_32_9
  %171 = mul nsw i32 %110, %16... can share an output register with another operation already assigned to main_signed_multiply_32_9
  %171 = mul nsw i32 %110, %16... can share an output register with another operation already assigned to main_signed_multiply_32_10
  %171 = mul nsw i32 %110, %16... hey can share an input with another operation already assigned to main_signed_multiply_32_11
  %171 = mul nsw i32 %110, %16... can share an output register with another operation already assigned to main_signed_multiply_32_11
  %171 = mul nsw i32 %110, %16... hey can share an input with another operation already assigned to main_signed_multiply_32_12
  %171 = mul nsw i32 %110, %16... can share an output register with another operation already assigned to main_signed_multiply_32_12
  %171 = mul nsw i32 %110, %16... hey can share an input with another operation already assigned to main_signed_multiply_32_13
  %171 = mul nsw i32 %110, %16... can share an output register with another operation already assigned to main_signed_multiply_32_13
  %171 = mul nsw i32 %110, %16... hey can share an input with another operation already assigned to main_signed_multiply_32_14
  %171 = mul nsw i32 %110, %16... can share an output register with another operation already assigned to main_signed_multiply_32_14
  %173 = mul nsw i32 %102, %16... can share an output register with another operation already assigned to main_signed_multiply_32_0
  %173 = mul nsw i32 %102, %16... hey can share an input with another operation already assigned to main_signed_multiply_32_6
  %173 = mul nsw i32 %102, %16... can share an output register with another operation already assigned to main_signed_multiply_32_6
  %173 = mul nsw i32 %102, %16... can share an output register with another operation already assigned to main_signed_multiply_32_7
  %173 = mul nsw i32 %102, %16... can share an output register with another operation already assigned to main_signed_multiply_32_8
  %173 = mul nsw i32 %102, %16... hey can share an input with another operation already assigned to main_signed_multiply_32_9
  %173 = mul nsw i32 %102, %16... can share an output register with another operation already assigned to main_signed_multiply_32_9
  %173 = mul nsw i32 %102, %16... can share an output register with another operation already assigned to main_signed_multiply_32_10
  %173 = mul nsw i32 %102, %16... can share an output register with another operation already assigned to main_signed_multiply_32_11
  %173 = mul nsw i32 %102, %16... hey can share an input with another operation already assigned to main_signed_multiply_32_12
  %173 = mul nsw i32 %102, %16... can share an output register with another operation already assigned to main_signed_multiply_32_12
  %173 = mul nsw i32 %102, %16... hey can share an input with another operation already assigned to main_signed_multiply_32_13
  %173 = mul nsw i32 %102, %16... can share an output register with another operation already assigned to main_signed_multiply_32_13
  %173 = mul nsw i32 %102, %16... hey can share an input with another operation already assigned to main_signed_multiply_32_14
  %173 = mul nsw i32 %102, %16... can share an output register with another operation already assigned to main_signed_multiply_32_14
  %175 = mul nsw i32 %97, %162 hey can share an input with another operation already assigned to main_signed_multiply_32_0
  %175 = mul nsw i32 %97, %162 can share an output register with another operation already assigned to main_signed_multiply_32_0
  %175 = mul nsw i32 %97, %162 can share an output register with another operation already assigned to main_signed_multiply_32_6
  %175 = mul nsw i32 %97, %162 can share an output register with another operation already assigned to main_signed_multiply_32_7
  %175 = mul nsw i32 %97, %162 can share an output register with another operation already assigned to main_signed_multiply_32_8
  %175 = mul nsw i32 %97, %162 can share an output register with another operation already assigned to main_signed_multiply_32_9
  %175 = mul nsw i32 %97, %162 hey can share an input with another operation already assigned to main_signed_multiply_32_10
  %175 = mul nsw i32 %97, %162 can share an output register with another operation already assigned to main_signed_multiply_32_10
  %175 = mul nsw i32 %97, %162 hey can share an input with another operation already assigned to main_signed_multiply_32_11
  %175 = mul nsw i32 %97, %162 can share an output register with another operation already assigned to main_signed_multiply_32_11
  %175 = mul nsw i32 %97, %162 can share an output register with another operation already assigned to main_signed_multiply_32_12
  %175 = mul nsw i32 %97, %162 hey can share an input with another operation already assigned to main_signed_multiply_32_13
  %175 = mul nsw i32 %97, %162 can share an output register with another operation already assigned to main_signed_multiply_32_13
  %175 = mul nsw i32 %97, %162 hey can share an input with another operation already assigned to main_signed_multiply_32_14
  %175 = mul nsw i32 %97, %162 can share an output register with another operation already assigned to main_signed_multiply_32_14
  %177 = mul nsw i32 %93, %162 hey can share an input with another operation already assigned to main_signed_multiply_32_0
  %177 = mul nsw i32 %93, %162 can share an output register with another operation already assigned to main_signed_multiply_32_0
  %177 = mul nsw i32 %93, %162 hey can share an input with another operation already assigned to main_signed_multiply_32_5
  %177 = mul nsw i32 %93, %162 hey can share an input with another operation already assigned to main_signed_multiply_32_9
  %177 = mul nsw i32 %93, %162 hey can share an input with another operation already assigned to main_signed_multiply_32_10
  %177 = mul nsw i32 %93, %162 hey can share an input with another operation already assigned to main_signed_multiply_32_11
                                                  main_signed_multiply_32_0     main_signed_multiply_32_1     main_signed_multiply_32_2     main_signed_multiply_32_3     main_signed_multiply_32_4     main_signed_multiply_32_5     main_signed_multiply_32_6     main_signed_multiply_32_7     main_signed_multiply_32_8     main_signed_multiply_32_9     main_signed_multiply_32_10    main_signed_multiply_32_11    main_signed_multiply_32_12    main_signed_multiply_32_13    main_signed_multiply_32_14    
  %147 = mul nsw i32 %146, %14... (idx: 0)        -70                           -10                           -10                           -10                           -10                           -30                           -20                           -10                           -20                           -40                           -40                           -40                           -30                           -40                           -40                           
  %149 = mul nsw i32 %132, %14... (idx: 1)        -70                           -10                           -10                           -10                           -10                           -25                           -20                           -5                            -15                           -40                           -40                           -40                           -25                           -35                           -35                           
  %151 = mul nsw i32 %120, %14... (idx: 2)        -65                           -10                           -10                           -10                           -10                           -30                           -15                           -10                           -15                           -35                           -35                           -35                           -30                           -40                           -40                           
  %153 = mul nsw i32 %110, %14... (idx: 3)        -65                           -10                           -10                           -10                           -10                           -30                           -20                           -10                           -20                           -35                           -40                           -35                           -25                           -35                           -35                           
  %155 = mul nsw i32 %102, %14... (idx: 4)        -70                           -10                           -10                           -10                           -10                           -30                           -15                           -10                           -20                           -35                           -40                           -40                           -25                           -35                           -35                           
  %157 = mul nsw i32 %97, %146 (idx: 5)           -65                           -10                           -10                           -10                           -10                           -30                           -20                           -10                           -20                           -40                           -35                           -35                           -30                           -35                           -35                           
  %159 = mul nsw i32 %93, %146 (idx: 6)           -65                           -10                           -10                           -10                           -10                           -25                           -20                           -10                           -20                           -35                           -35                           -35                           -30                           -40                           -40                           
  %163 = mul nsw i32 %162, %16... (idx: 7)        -70                           -10                           -10                           -10                           -10                           -30                           -20                           -10                           -20                           -40                           -40                           -40                           -30                           -40                           -40                           
  %165 = mul nsw i32 %146, %16... (idx: 8)        -70                           -10                           -10                           -10                           -10                           -30                           -20                           -10                           -20                           -40                           -40                           -40                           -30                           -40                           -40                           
  %167 = mul nsw i32 %132, %16... (idx: 9)        -70                           -10                           -10                           -10                           -10                           -25                           -20                           -5                            -15                           -40                           -40                           -40                           -25                           -35                           -35                           
  %169 = mul nsw i32 %120, %16... (idx: 10)       -65                           -10                           -10                           -10                           -10                           -30                           -15                           -10                           -15                           -35                           -35                           -35                           -30                           -40                           -40                           
  %171 = mul nsw i32 %110, %16... (idx: 11)       -65                           -10                           -10                           -10                           -10                           -30                           -20                           -10                           -20                           -35                           -40                           -35                           -25                           -35                           -35                           
  %173 = mul nsw i32 %102, %16... (idx: 12)       -70                           -10                           -10                           -10                           -10                           -30                           -15                           -10                           -20                           -35                           -40                           -40                           -25                           -35                           -35                           
  %175 = mul nsw i32 %97, %162 (idx: 13)          -65                           -10                           -10                           -10                           -10                           -30                           -20                           -10                           -20                           -40                           -35                           -35                           -30                           -35                           -35                           
  %177 = mul nsw i32 %93, %162 (idx: 14)          -65                           -10                           -10                           -10                           -10                           -25                           -30                           -20                           -30                           -45                           -45                           -45                           -40                           -50                           -50                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_multiply_32_0     main_signed_multiply_32_1     main_signed_multiply_32_2     main_signed_multiply_32_3     main_signed_multiply_32_4     main_signed_multiply_32_5     main_signed_multiply_32_6     main_signed_multiply_32_7     main_signed_multiply_32_8     main_signed_multiply_32_9     main_signed_multiply_32_10    main_signed_multiply_32_11    main_signed_multiply_32_12    main_signed_multiply_32_13    main_signed_multiply_32_14    
  %147 = mul nsw i32 %146, %14... (idx: 0)        0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             1                             0                             
  %149 = mul nsw i32 %132, %14... (idx: 1)        0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             1                             0                             0                             0                             
  %151 = mul nsw i32 %120, %14... (idx: 2)        0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             1                             
  %153 = mul nsw i32 %110, %14... (idx: 3)        0                             0                             1                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             
  %155 = mul nsw i32 %102, %14... (idx: 4)        0                             0                             0                             0                             0                             0                             0                             1                             0                             0                             0                             0                             0                             0                             0                             
  %157 = mul nsw i32 %97, %146 (idx: 5)           0                             0                             0                             1                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             
  %159 = mul nsw i32 %93, %146 (idx: 6)           0                             0                             0                             0                             1                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             
  %163 = mul nsw i32 %162, %16... (idx: 7)        0                             0                             0                             0                             0                             0                             0                             0                             1                             0                             0                             0                             0                             0                             0                             
  %165 = mul nsw i32 %146, %16... (idx: 8)        0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             1                             0                             0                             
  %167 = mul nsw i32 %132, %16... (idx: 9)        1                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             
  %169 = mul nsw i32 %120, %16... (idx: 10)       0                             0                             0                             0                             0                             1                             0                             0                             0                             0                             0                             0                             0                             0                             0                             
  %171 = mul nsw i32 %110, %16... (idx: 11)       0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             1                             0                             0                             0                             0                             
  %173 = mul nsw i32 %102, %16... (idx: 12)       0                             1                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             
  %175 = mul nsw i32 %97, %162 (idx: 13)          0                             0                             0                             0                             0                             0                             0                             0                             0                             1                             0                             0                             0                             0                             0                             
  %177 = mul nsw i32 %93, %162 (idx: 14)          0                             0                             0                             0                             0                             0                             1                             0                             0                             0                             0                             0                             0                             0                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %167 = mul nsw i32 %132, %16... (idx: 9) -> main_signed_multiply_32_0 (mux inputs: 9)
  %173 = mul nsw i32 %102, %16... (idx: 12) -> main_signed_multiply_32_1 (mux inputs: 2)
  %153 = mul nsw i32 %110, %14... (idx: 3) -> main_signed_multiply_32_2 (mux inputs: 2)
  %157 = mul nsw i32 %97, %146 (idx: 5) -> main_signed_multiply_32_3 (mux inputs: 2)
  %159 = mul nsw i32 %93, %146 (idx: 6) -> main_signed_multiply_32_4 (mux inputs: 2)
  %169 = mul nsw i32 %120, %16... (idx: 10) -> main_signed_multiply_32_5 (mux inputs: 4)
  %177 = mul nsw i32 %93, %162 (idx: 14) -> main_signed_multiply_32_6 (mux inputs: 4)
  %155 = mul nsw i32 %102, %14... (idx: 4) -> main_signed_multiply_32_7 (mux inputs: 3)
  %163 = mul nsw i32 %162, %16... (idx: 7) -> main_signed_multiply_32_8 (mux inputs: 3)
  %175 = mul nsw i32 %97, %162 (idx: 13) -> main_signed_multiply_32_9 (mux inputs: 6)
  %171 = mul nsw i32 %110, %16... (idx: 11) -> main_signed_multiply_32_10 (mux inputs: 6)
  %149 = mul nsw i32 %132, %14... (idx: 1) -> main_signed_multiply_32_11 (mux inputs: 6)
  %165 = mul nsw i32 %146, %16... (idx: 8) -> main_signed_multiply_32_12 (mux inputs: 5)
  %147 = mul nsw i32 %146, %14... (idx: 0) -> main_signed_multiply_32_13 (mux inputs: 5)
  %151 = mul nsw i32 %120, %14... (idx: 2) -> main_signed_multiply_32_14 (mux inputs: 6)
State: LEGUP_F_main_BB_threadi
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %148 = add nuw nsw i32 %147,... can share an output register with another operation already assigned to main_signed_add_32_0
  %148 = add nuw nsw i32 %147,... can share an output register with another operation already assigned to main_signed_add_32_1
  %148 = add nuw nsw i32 %147,... can share an output register with another operation already assigned to main_signed_add_32_2
  %148 = add nuw nsw i32 %147,... can share an output register with another operation already assigned to main_signed_add_32_6
  %148 = add nuw nsw i32 %147,... can share an output register with another operation already assigned to main_signed_add_32_9
  %148 = add nuw nsw i32 %147,... can share an output register with another operation already assigned to main_signed_add_32_10
  %148 = add nuw nsw i32 %147,... can share an output register with another operation already assigned to main_signed_add_32_11
  %148 = add nuw nsw i32 %147,... can share an output register with another operation already assigned to main_signed_add_32_12
  %150 = add nsw i32 %149, %13... can share an output register with another operation already assigned to main_signed_add_32_0
  %150 = add nsw i32 %149, %13... can share an output register with another operation already assigned to main_signed_add_32_1
  %150 = add nsw i32 %149, %13... can share an output register with another operation already assigned to main_signed_add_32_2
  %150 = add nsw i32 %149, %13... can share an output register with another operation already assigned to main_signed_add_32_6
  %150 = add nsw i32 %149, %13... can share an output register with another operation already assigned to main_signed_add_32_9
  %150 = add nsw i32 %149, %13... can share an output register with another operation already assigned to main_signed_add_32_10
  %150 = add nsw i32 %149, %13... can share an output register with another operation already assigned to main_signed_add_32_11
  %150 = add nsw i32 %149, %13... can share an output register with another operation already assigned to main_signed_add_32_12
  %152 = add nsw i32 %151, %13... can share an output register with another operation already assigned to main_signed_add_32_0
  %152 = add nsw i32 %151, %13... can share an output register with another operation already assigned to main_signed_add_32_1
  %152 = add nsw i32 %151, %13... can share an output register with another operation already assigned to main_signed_add_32_2
  %152 = add nsw i32 %151, %13... can share an output register with another operation already assigned to main_signed_add_32_6
  %152 = add nsw i32 %151, %13... can share an output register with another operation already assigned to main_signed_add_32_9
  %152 = add nsw i32 %151, %13... can share an output register with another operation already assigned to main_signed_add_32_10
  %152 = add nsw i32 %151, %13... can share an output register with another operation already assigned to main_signed_add_32_11
  %152 = add nsw i32 %151, %13... can share an output register with another operation already assigned to main_signed_add_32_12
  %154 = add nsw i32 %153, %14... can share an output register with another operation already assigned to main_signed_add_32_0
  %154 = add nsw i32 %153, %14... can share an output register with another operation already assigned to main_signed_add_32_1
  %154 = add nsw i32 %153, %14... can share an output register with another operation already assigned to main_signed_add_32_2
  %154 = add nsw i32 %153, %14... can share an output register with another operation already assigned to main_signed_add_32_6
  %154 = add nsw i32 %153, %14... can share an output register with another operation already assigned to main_signed_add_32_9
  %154 = add nsw i32 %153, %14... can share an output register with another operation already assigned to main_signed_add_32_10
  %154 = add nsw i32 %153, %14... can share an output register with another operation already assigned to main_signed_add_32_11
  %154 = add nsw i32 %153, %14... can share an output register with another operation already assigned to main_signed_add_32_12
  %156 = add nsw i32 %155, %14... can share an output register with another operation already assigned to main_signed_add_32_0
  %156 = add nsw i32 %155, %14... can share an output register with another operation already assigned to main_signed_add_32_1
  %156 = add nsw i32 %155, %14... can share an output register with another operation already assigned to main_signed_add_32_2
  %156 = add nsw i32 %155, %14... can share an output register with another operation already assigned to main_signed_add_32_6
  %156 = add nsw i32 %155, %14... can share an output register with another operation already assigned to main_signed_add_32_9
  %156 = add nsw i32 %155, %14... can share an output register with another operation already assigned to main_signed_add_32_10
  %156 = add nsw i32 %155, %14... can share an output register with another operation already assigned to main_signed_add_32_11
  %156 = add nsw i32 %155, %14... can share an output register with another operation already assigned to main_signed_add_32_12
  %158 = add nsw i32 %157, %14... can share an output register with another operation already assigned to main_signed_add_32_0
  %158 = add nsw i32 %157, %14... can share an output register with another operation already assigned to main_signed_add_32_1
  %158 = add nsw i32 %157, %14... can share an output register with another operation already assigned to main_signed_add_32_2
  %158 = add nsw i32 %157, %14... can share an output register with another operation already assigned to main_signed_add_32_6
  %158 = add nsw i32 %157, %14... can share an output register with another operation already assigned to main_signed_add_32_9
  %158 = add nsw i32 %157, %14... can share an output register with another operation already assigned to main_signed_add_32_10
  %158 = add nsw i32 %157, %14... can share an output register with another operation already assigned to main_signed_add_32_11
  %158 = add nsw i32 %157, %14... can share an output register with another operation already assigned to main_signed_add_32_12
  %164 = add nsw i32 %163, %14... can share an output register with another operation already assigned to main_signed_add_32_0
  %164 = add nsw i32 %163, %14... can share an output register with another operation already assigned to main_signed_add_32_1
  %166 = add nsw i32 %165, %15... can share an output register with another operation already assigned to main_signed_add_32_0
  %166 = add nsw i32 %165, %15... can share an output register with another operation already assigned to main_signed_add_32_1
  %168 = add nsw i32 %167, %15... can share an output register with another operation already assigned to main_signed_add_32_0
  %168 = add nsw i32 %167, %15... can share an output register with another operation already assigned to main_signed_add_32_1
  %170 = add nsw i32 %169, %15... can share an output register with another operation already assigned to main_signed_add_32_0
  %170 = add nsw i32 %169, %15... can share an output register with another operation already assigned to main_signed_add_32_1
  %172 = add nsw i32 %171, %15... can share an output register with another operation already assigned to main_signed_add_32_0
  %172 = add nsw i32 %171, %15... can share an output register with another operation already assigned to main_signed_add_32_1
  %174 = add nsw i32 %173, %15... can share an output register with another operation already assigned to main_signed_add_32_0
  %174 = add nsw i32 %173, %15... can share an output register with another operation already assigned to main_signed_add_32_1
  %176 = add nsw i32 %175, %15... can share an output register with another operation already assigned to main_signed_add_32_0
  %176 = add nsw i32 %175, %15... can share an output register with another operation already assigned to main_signed_add_32_1
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         
  %148 = add nuw nsw i32 %147,... (idx: 0)        -390                          -90                           -40                           -10                           -10                           -10                           -10                           -30                           -30                           -30                           -30                           -30                           -49                           -9                            90                            
  %150 = add nsw i32 %149, %13... (idx: 1)        -390                          -90                           -40                           -10                           -10                           -10                           -10                           -30                           -30                           -30                           -30                           -30                           -49                           -9                            90                            
  %152 = add nsw i32 %151, %13... (idx: 2)        -390                          -90                           -40                           -10                           -10                           -10                           -10                           -30                           -30                           -30                           -30                           -30                           -49                           -9                            90                            
  %154 = add nsw i32 %153, %14... (idx: 3)        -390                          -90                           -40                           -10                           -10                           -10                           -10                           -30                           -30                           -30                           -30                           -30                           -49                           -9                            90                            
  %156 = add nsw i32 %155, %14... (idx: 4)        -390                          -90                           -40                           -10                           -10                           -10                           -10                           -30                           -30                           -30                           -30                           -30                           -49                           -9                            90                            
  %158 = add nsw i32 %157, %14... (idx: 5)        -390                          -90                           -40                           -10                           -10                           -10                           -10                           -30                           -30                           -30                           -30                           -30                           -50                           -8                            90                            
  %164 = add nsw i32 %163, %14... (idx: 6)        -390                          -90                           -50                           -10                           -10                           -10                           -20                           -30                           -30                           -40                           -40                           -40                           -59                           -9                            90                            
  %166 = add nsw i32 %165, %15... (idx: 7)        -390                          -90                           -50                           -10                           -10                           -10                           -20                           -30                           -30                           -40                           -40                           -40                           -59                           -9                            90                            
  %168 = add nsw i32 %167, %15... (idx: 8)        -390                          -90                           -50                           -10                           -10                           -10                           -20                           -30                           -30                           -40                           -40                           -40                           -59                           -9                            90                            
  %170 = add nsw i32 %169, %15... (idx: 9)        -390                          -90                           -50                           -10                           -10                           -10                           -20                           -30                           -30                           -40                           -40                           -40                           -59                           -9                            90                            
  %172 = add nsw i32 %171, %15... (idx: 10)       -390                          -90                           -50                           -10                           -10                           -10                           -20                           -30                           -30                           -40                           -40                           -40                           -59                           -9                            90                            
  %174 = add nsw i32 %173, %15... (idx: 11)       -390                          -90                           -50                           -10                           -10                           -10                           -20                           -30                           -30                           -40                           -40                           -40                           -59                           -9                            90                            
  %176 = add nsw i32 %175, %15... (idx: 12)       -390                          -90                           -50                           -10                           -10                           -10                           -20                           -30                           -30                           -40                           -40                           -40                           -60                           -8                            90                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         
  %148 = add nuw nsw i32 %147,... (idx: 0)        1                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             
  %150 = add nsw i32 %149, %13... (idx: 1)        0                             1                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             
  %152 = add nsw i32 %151, %13... (idx: 2)        0                             0                             0                             0                             0                             0                             0                             1                             0                             0                             0                             0                             0                             0                             0                             
  %154 = add nsw i32 %153, %14... (idx: 3)        0                             0                             0                             0                             0                             0                             0                             0                             1                             0                             0                             0                             0                             0                             0                             
  %156 = add nsw i32 %155, %14... (idx: 4)        0                             0                             0                             0                             0                             1                             0                             0                             0                             0                             0                             0                             0                             0                             0                             
  %158 = add nsw i32 %157, %14... (idx: 5)        0                             0                             0                             1                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             
  %164 = add nsw i32 %163, %14... (idx: 6)        0                             0                             1                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             
  %166 = add nsw i32 %165, %15... (idx: 7)        0                             0                             0                             0                             0                             0                             0                             0                             0                             1                             0                             0                             0                             0                             0                             
  %168 = add nsw i32 %167, %15... (idx: 8)        0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             1                             0                             0                             0                             0                             
  %170 = add nsw i32 %169, %15... (idx: 9)        0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             1                             0                             0                             0                             
  %172 = add nsw i32 %171, %15... (idx: 10)       0                             0                             0                             0                             0                             0                             1                             0                             0                             0                             0                             0                             0                             0                             0                             
  %174 = add nsw i32 %173, %15... (idx: 11)       0                             0                             0                             0                             1                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             
  %176 = add nsw i32 %175, %15... (idx: 12)       0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             1                             0                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %148 = add nuw nsw i32 %147,... (idx: 0) -> main_signed_add_32_0 (mux inputs: 41)
  %150 = add nsw i32 %149, %13... (idx: 1) -> main_signed_add_32_1 (mux inputs: 11)
  %164 = add nsw i32 %163, %14... (idx: 6) -> main_signed_add_32_2 (mux inputs: 6)
  %158 = add nsw i32 %157, %14... (idx: 5) -> main_signed_add_32_3 (mux inputs: 2)
  %174 = add nsw i32 %173, %15... (idx: 11) -> main_signed_add_32_4 (mux inputs: 2)
  %156 = add nsw i32 %155, %14... (idx: 4) -> main_signed_add_32_5 (mux inputs: 2)
  %172 = add nsw i32 %171, %15... (idx: 10) -> main_signed_add_32_6 (mux inputs: 3)
  %152 = add nsw i32 %151, %13... (idx: 2) -> main_signed_add_32_7 (mux inputs: 4)
  %154 = add nsw i32 %153, %14... (idx: 3) -> main_signed_add_32_8 (mux inputs: 4)
  %166 = add nsw i32 %165, %15... (idx: 7) -> main_signed_add_32_9 (mux inputs: 5)
  %168 = add nsw i32 %167, %15... (idx: 8) -> main_signed_add_32_10 (mux inputs: 5)
  %170 = add nsw i32 %169, %15... (idx: 9) -> main_signed_add_32_11 (mux inputs: 5)
  %176 = add nsw i32 %175, %15... (idx: 12) -> main_signed_add_32_12 (mux inputs: 7)
State: LEGUP_F_main_BB__187
Binding functional unit type: main_0_so_local_mem_dual_port
Weight matrix for operation/function unit matching:
  %199 = load i16* %198, align... can share an output register with another operation already assigned to main_main_0_so_local_mem_dual_port_0
  %199 = load i16* %198, align... can share an output register with another operation already assigned to main_main_0_so_local_mem_dual_port_1
  %207 = load i16* %206, align... can share an output register with another operation already assigned to main_main_0_so_local_mem_dual_port_0
  %207 = load i16* %206, align... can share an output register with another operation already assigned to main_main_0_so_local_mem_dual_port_1
                                                  main_main_0_so_local_mem_dual_port_0main_main_0_so_local_mem_dual_port_1
  %199 = load i16* %198, align... (idx: 0)        -5                            65                            
  %207 = load i16* %206, align... (idx: 1)        -5                            65                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_main_0_so_local_mem_dual_port_0main_main_0_so_local_mem_dual_port_1
  %199 = load i16* %198, align... (idx: 0)        1                             0                             
  %207 = load i16* %206, align... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %199 = load i16* %198, align... (idx: 0) -> main_main_0_so_local_mem_dual_port_0 (mux inputs: 12)
  %207 = load i16* %206, align... (idx: 1) -> main_main_0_so_local_mem_dual_port_1 (mux inputs: 5)
State: LEGUP_F_main_BB__187
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %gep38 = add i32 %gep_int37,... can share an output register with another operation already assigned to main_signed_add_32_0
  %gep38 = add i32 %gep_int37,... can share an output register with another operation already assigned to main_signed_add_32_1
  %gep38 = add i32 %gep_int37,... can share an output register with another operation already assigned to main_signed_add_32_2
  %gep38 = add i32 %gep_int37,... can share an output register with another operation already assigned to main_signed_add_32_3
  %gep38 = add i32 %gep_int37,... can share an output register with another operation already assigned to main_signed_add_32_5
  %gep38 = add i32 %gep_int37,... can share an output register with another operation already assigned to main_signed_add_32_6
  %gep38 = add i32 %gep_int37,... can share an output register with another operation already assigned to main_signed_add_32_7
  %gep38 = add i32 %gep_int37,... can share an output register with another operation already assigned to main_signed_add_32_8
  %gep38 = add i32 %gep_int37,... can share an output register with another operation already assigned to main_signed_add_32_9
  %gep38 = add i32 %gep_int37,... can share an output register with another operation already assigned to main_signed_add_32_10
  %gep38 = add i32 %gep_int37,... can share an output register with another operation already assigned to main_signed_add_32_11
  %gep38 = add i32 %gep_int37,... can share an output register with another operation already assigned to main_signed_add_32_12
  %gep40 = add i32 %gep_int39,... can share an output register with another operation already assigned to main_signed_add_32_0
  %gep40 = add i32 %gep_int39,... can share an output register with another operation already assigned to main_signed_add_32_1
  %gep40 = add i32 %gep_int39,... can share an output register with another operation already assigned to main_signed_add_32_2
  %gep40 = add i32 %gep_int39,... can share an output register with another operation already assigned to main_signed_add_32_3
  %gep40 = add i32 %gep_int39,... can share an output register with another operation already assigned to main_signed_add_32_5
  %gep40 = add i32 %gep_int39,... can share an output register with another operation already assigned to main_signed_add_32_6
  %gep40 = add i32 %gep_int39,... can share an output register with another operation already assigned to main_signed_add_32_7
  %gep40 = add i32 %gep_int39,... can share an output register with another operation already assigned to main_signed_add_32_8
  %gep40 = add i32 %gep_int39,... can share an output register with another operation already assigned to main_signed_add_32_9
  %gep40 = add i32 %gep_int39,... can share an output register with another operation already assigned to main_signed_add_32_10
  %gep40 = add i32 %gep_int39,... can share an output register with another operation already assigned to main_signed_add_32_11
  %gep40 = add i32 %gep_int39,... can share an output register with another operation already assigned to main_signed_add_32_12
  %gep42 = add i32 %gep_int41,... can share an output register with another operation already assigned to main_signed_add_32_0
  %gep42 = add i32 %gep_int41,... can share an output register with another operation already assigned to main_signed_add_32_1
  %gep42 = add i32 %gep_int41,... can share an output register with another operation already assigned to main_signed_add_32_2
  %gep42 = add i32 %gep_int41,... can share an output register with another operation already assigned to main_signed_add_32_3
  %gep42 = add i32 %gep_int41,... can share an output register with another operation already assigned to main_signed_add_32_5
  %gep42 = add i32 %gep_int41,... can share an output register with another operation already assigned to main_signed_add_32_6
  %gep42 = add i32 %gep_int41,... can share an output register with another operation already assigned to main_signed_add_32_7
  %gep42 = add i32 %gep_int41,... can share an output register with another operation already assigned to main_signed_add_32_8
  %gep42 = add i32 %gep_int41,... can share an output register with another operation already assigned to main_signed_add_32_9
  %gep42 = add i32 %gep_int41,... can share an output register with another operation already assigned to main_signed_add_32_10
  %gep42 = add i32 %gep_int41,... can share an output register with another operation already assigned to main_signed_add_32_11
  %gep42 = add i32 %gep_int41,... can share an output register with another operation already assigned to main_signed_add_32_12
  %gep44 = add i32 %gep_int43,... can share an output register with another operation already assigned to main_signed_add_32_0
  %gep44 = add i32 %gep_int43,... can share an output register with another operation already assigned to main_signed_add_32_1
  %gep44 = add i32 %gep_int43,... can share an output register with another operation already assigned to main_signed_add_32_2
  %gep44 = add i32 %gep_int43,... can share an output register with another operation already assigned to main_signed_add_32_3
  %gep44 = add i32 %gep_int43,... can share an output register with another operation already assigned to main_signed_add_32_5
  %gep44 = add i32 %gep_int43,... can share an output register with another operation already assigned to main_signed_add_32_6
  %gep44 = add i32 %gep_int43,... can share an output register with another operation already assigned to main_signed_add_32_7
  %gep44 = add i32 %gep_int43,... can share an output register with another operation already assigned to main_signed_add_32_8
  %gep44 = add i32 %gep_int43,... can share an output register with another operation already assigned to main_signed_add_32_9
  %gep44 = add i32 %gep_int43,... can share an output register with another operation already assigned to main_signed_add_32_10
  %gep44 = add i32 %gep_int43,... can share an output register with another operation already assigned to main_signed_add_32_11
  %gep44 = add i32 %gep_int43,... can share an output register with another operation already assigned to main_signed_add_32_12
  %gep46 = add i32 %gep_int45,... can share an output register with another operation already assigned to main_signed_add_32_0
  %gep46 = add i32 %gep_int45,... can share an output register with another operation already assigned to main_signed_add_32_1
  %gep46 = add i32 %gep_int45,... can share an output register with another operation already assigned to main_signed_add_32_2
  %gep46 = add i32 %gep_int45,... can share an output register with another operation already assigned to main_signed_add_32_3
  %gep46 = add i32 %gep_int45,... can share an output register with another operation already assigned to main_signed_add_32_5
  %gep46 = add i32 %gep_int45,... can share an output register with another operation already assigned to main_signed_add_32_6
  %gep46 = add i32 %gep_int45,... can share an output register with another operation already assigned to main_signed_add_32_7
  %gep46 = add i32 %gep_int45,... can share an output register with another operation already assigned to main_signed_add_32_8
  %gep46 = add i32 %gep_int45,... can share an output register with another operation already assigned to main_signed_add_32_9
  %gep46 = add i32 %gep_int45,... can share an output register with another operation already assigned to main_signed_add_32_10
  %gep46 = add i32 %gep_int45,... can share an output register with another operation already assigned to main_signed_add_32_11
  %gep46 = add i32 %gep_int45,... can share an output register with another operation already assigned to main_signed_add_32_12
  %gep48 = add i32 %gep_int47,... can share an output register with another operation already assigned to main_signed_add_32_0
  %gep48 = add i32 %gep_int47,... can share an output register with another operation already assigned to main_signed_add_32_1
  %gep48 = add i32 %gep_int47,... can share an output register with another operation already assigned to main_signed_add_32_2
  %gep48 = add i32 %gep_int47,... can share an output register with another operation already assigned to main_signed_add_32_3
  %gep48 = add i32 %gep_int47,... can share an output register with another operation already assigned to main_signed_add_32_5
  %gep48 = add i32 %gep_int47,... can share an output register with another operation already assigned to main_signed_add_32_6
  %gep48 = add i32 %gep_int47,... can share an output register with another operation already assigned to main_signed_add_32_7
  %gep48 = add i32 %gep_int47,... can share an output register with another operation already assigned to main_signed_add_32_8
  %gep48 = add i32 %gep_int47,... can share an output register with another operation already assigned to main_signed_add_32_9
  %gep48 = add i32 %gep_int47,... can share an output register with another operation already assigned to main_signed_add_32_10
  %gep48 = add i32 %gep_int47,... can share an output register with another operation already assigned to main_signed_add_32_11
  %gep48 = add i32 %gep_int47,... can share an output register with another operation already assigned to main_signed_add_32_12
  %gep50 = add i32 %gep_int49,... can share an output register with another operation already assigned to main_signed_add_32_0
  %gep50 = add i32 %gep_int49,... can share an output register with another operation already assigned to main_signed_add_32_1
  %gep50 = add i32 %gep_int49,... can share an output register with another operation already assigned to main_signed_add_32_2
  %gep50 = add i32 %gep_int49,... can share an output register with another operation already assigned to main_signed_add_32_3
  %gep50 = add i32 %gep_int49,... can share an output register with another operation already assigned to main_signed_add_32_5
  %gep50 = add i32 %gep_int49,... can share an output register with another operation already assigned to main_signed_add_32_6
  %gep50 = add i32 %gep_int49,... can share an output register with another operation already assigned to main_signed_add_32_7
  %gep50 = add i32 %gep_int49,... can share an output register with another operation already assigned to main_signed_add_32_8
  %gep50 = add i32 %gep_int49,... can share an output register with another operation already assigned to main_signed_add_32_9
  %gep50 = add i32 %gep_int49,... can share an output register with another operation already assigned to main_signed_add_32_10
  %gep50 = add i32 %gep_int49,... can share an output register with another operation already assigned to main_signed_add_32_11
  %gep50 = add i32 %gep_int49,... can share an output register with another operation already assigned to main_signed_add_32_12
  %gep52 = add i32 %gep_int51,... can share an output register with another operation already assigned to main_signed_add_32_0
  %gep52 = add i32 %gep_int51,... can share an output register with another operation already assigned to main_signed_add_32_1
  %gep52 = add i32 %gep_int51,... can share an output register with another operation already assigned to main_signed_add_32_2
  %gep52 = add i32 %gep_int51,... can share an output register with another operation already assigned to main_signed_add_32_3
  %gep52 = add i32 %gep_int51,... can share an output register with another operation already assigned to main_signed_add_32_5
  %gep52 = add i32 %gep_int51,... can share an output register with another operation already assigned to main_signed_add_32_6
  %gep52 = add i32 %gep_int51,... can share an output register with another operation already assigned to main_signed_add_32_7
  %gep52 = add i32 %gep_int51,... can share an output register with another operation already assigned to main_signed_add_32_8
  %gep52 = add i32 %gep_int51,... can share an output register with another operation already assigned to main_signed_add_32_9
  %gep52 = add i32 %gep_int51,... can share an output register with another operation already assigned to main_signed_add_32_10
  %gep52 = add i32 %gep_int51,... can share an output register with another operation already assigned to main_signed_add_32_11
  %gep52 = add i32 %gep_int51,... can share an output register with another operation already assigned to main_signed_add_32_12
  %241 = add nsw i32 %i.010.i,... can share an output register with another operation already assigned to main_signed_add_32_0
  %241 = add nsw i32 %i.010.i,... can share an output register with another operation already assigned to main_signed_add_32_1
  %241 = add nsw i32 %i.010.i,... can share an output register with another operation already assigned to main_signed_add_32_2
  %241 = add nsw i32 %i.010.i,... can share an output register with another operation already assigned to main_signed_add_32_3
  %241 = add nsw i32 %i.010.i,... can share an output register with another operation already assigned to main_signed_add_32_5
  %241 = add nsw i32 %i.010.i,... can share an output register with another operation already assigned to main_signed_add_32_6
  %241 = add nsw i32 %i.010.i,... can share an output register with another operation already assigned to main_signed_add_32_7
  %241 = add nsw i32 %i.010.i,... can share an output register with another operation already assigned to main_signed_add_32_8
  %241 = add nsw i32 %i.010.i,... can share an output register with another operation already assigned to main_signed_add_32_9
  %241 = add nsw i32 %i.010.i,... can share an output register with another operation already assigned to main_signed_add_32_10
  %241 = add nsw i32 %i.010.i,... can share an output register with another operation already assigned to main_signed_add_32_11
  %241 = add nsw i32 %i.010.i,... can share an output register with another operation already assigned to main_signed_add_32_12
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         
  %gep38 = add i32 %gep_int37,... (idx: 0)        -405                          -105                          -54                           -14                           -24                           -14                           -24                           -35                           -34                           -44                           -44                           -44                           -64                           -4                            95                            
  %gep40 = add i32 %gep_int39,... (idx: 1)        -404                          -104                          -54                           -14                           -24                           -14                           -24                           -34                           -34                           -44                           -44                           -44                           -64                           -4                            95                            
  %gep42 = add i32 %gep_int41,... (idx: 2)        -404                          -104                          -54                           -14                           -24                           -14                           -24                           -34                           -34                           -44                           -44                           -44                           -64                           -4                            95                            
  %gep44 = add i32 %gep_int43,... (idx: 3)        -404                          -104                          -54                           -14                           -24                           -14                           -24                           -34                           -34                           -44                           -44                           -44                           -64                           -4                            95                            
  %gep46 = add i32 %gep_int45,... (idx: 4)        -404                          -104                          -54                           -14                           -24                           -14                           -24                           -34                           -34                           -44                           -44                           -44                           -64                           -4                            95                            
  %gep48 = add i32 %gep_int47,... (idx: 5)        -404                          -104                          -54                           -14                           -24                           -14                           -24                           -34                           -34                           -44                           -44                           -44                           -64                           -4                            95                            
  %gep50 = add i32 %gep_int49,... (idx: 6)        -404                          -104                          -54                           -14                           -24                           -14                           -24                           -34                           -34                           -44                           -44                           -44                           -64                           -4                            95                            
  %gep52 = add i32 %gep_int51,... (idx: 7)        -404                          -104                          -54                           -14                           -24                           -14                           -24                           -34                           -34                           -44                           -44                           -44                           -64                           -4                            95                            
  %241 = add nsw i32 %i.010.i,... (idx: 8)        -405                          -104                          -53                           -14                           -23                           -13                           -23                           -33                           -35                           -43                           -44                           -43                           -62                           -3                            95                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         
  %gep38 = add i32 %gep_int37,... (idx: 0)        1                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             
  %gep40 = add i32 %gep_int39,... (idx: 1)        0                             1                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             
  %gep42 = add i32 %gep_int41,... (idx: 2)        0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             1                             0                             0                             
  %gep44 = add i32 %gep_int43,... (idx: 3)        0                             0                             1                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             
  %gep46 = add i32 %gep_int45,... (idx: 4)        0                             0                             0                             0                             0                             0                             0                             0                             0                             1                             0                             0                             0                             0                             0                             
  %gep48 = add i32 %gep_int47,... (idx: 5)        0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             1                             0                             0                             0                             0                             
  %gep50 = add i32 %gep_int49,... (idx: 6)        0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             1                             0                             0                             0                             
  %gep52 = add i32 %gep_int51,... (idx: 7)        0                             0                             0                             0                             0                             0                             0                             1                             0                             0                             0                             0                             0                             0                             0                             
  %241 = add nsw i32 %i.010.i,... (idx: 8)        0                             0                             0                             0                             0                             0                             0                             0                             1                             0                             0                             0                             0                             0                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %gep38 = add i32 %gep_int37,... (idx: 0) -> main_signed_add_32_0 (mux inputs: 42)
  %gep40 = add i32 %gep_int39,... (idx: 1) -> main_signed_add_32_1 (mux inputs: 12)
  %gep44 = add i32 %gep_int43,... (idx: 3) -> main_signed_add_32_2 (mux inputs: 7)
  %gep52 = add i32 %gep_int51,... (idx: 7) -> main_signed_add_32_7 (mux inputs: 5)
  %241 = add nsw i32 %i.010.i,... (idx: 8) -> main_signed_add_32_8 (mux inputs: 5)
  %gep46 = add i32 %gep_int45,... (idx: 4) -> main_signed_add_32_9 (mux inputs: 6)
  %gep48 = add i32 %gep_int47,... (idx: 5) -> main_signed_add_32_10 (mux inputs: 6)
  %gep50 = add i32 %gep_int49,... (idx: 6) -> main_signed_add_32_11 (mux inputs: 6)
  %gep42 = add i32 %gep_int41,... (idx: 2) -> main_signed_add_32_12 (mux inputs: 8)
State: LEGUP_F_main_BB__187
Binding functional unit type: main_0_so_local_mem_dual_port
Weight matrix for operation/function unit matching:
  %212 = load i16* %211, align... can share an output register with another operation already assigned to main_main_0_so_local_mem_dual_port_0
  %212 = load i16* %211, align... can share an output register with another operation already assigned to main_main_0_so_local_mem_dual_port_1
  %217 = load i16* %216, align... can share an output register with another operation already assigned to main_main_0_so_local_mem_dual_port_0
  %217 = load i16* %216, align... can share an output register with another operation already assigned to main_main_0_so_local_mem_dual_port_1
                                                  main_main_0_so_local_mem_dual_port_0main_main_0_so_local_mem_dual_port_1
  %212 = load i16* %211, align... (idx: 0)        -15                           55                            
  %217 = load i16* %216, align... (idx: 1)        -15                           55                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_main_0_so_local_mem_dual_port_0main_main_0_so_local_mem_dual_port_1
  %212 = load i16* %211, align... (idx: 0)        1                             0                             
  %217 = load i16* %216, align... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %212 = load i16* %211, align... (idx: 0) -> main_main_0_so_local_mem_dual_port_0 (mux inputs: 13)
  %217 = load i16* %216, align... (idx: 1) -> main_main_0_so_local_mem_dual_port_1 (mux inputs: 6)
State: LEGUP_F_main_BB__187
Binding functional unit type: signed_multiply_32
Weight matrix for operation/function unit matching:
  %201 = mul nsw i32 %200, %20... can share an output register with another operation already assigned to main_signed_multiply_32_0
  %201 = mul nsw i32 %200, %20... can share an output register with another operation already assigned to main_signed_multiply_32_1
  %201 = mul nsw i32 %200, %20... can share an output register with another operation already assigned to main_signed_multiply_32_2
  %201 = mul nsw i32 %200, %20... can share an output register with another operation already assigned to main_signed_multiply_32_3
  %201 = mul nsw i32 %200, %20... can share an output register with another operation already assigned to main_signed_multiply_32_4
  %201 = mul nsw i32 %200, %20... can share an output register with another operation already assigned to main_signed_multiply_32_5
  %201 = mul nsw i32 %200, %20... can share an output register with another operation already assigned to main_signed_multiply_32_6
  %201 = mul nsw i32 %200, %20... can share an output register with another operation already assigned to main_signed_multiply_32_7
  %201 = mul nsw i32 %200, %20... can share an output register with another operation already assigned to main_signed_multiply_32_8
  %201 = mul nsw i32 %200, %20... can share an output register with another operation already assigned to main_signed_multiply_32_9
  %201 = mul nsw i32 %200, %20... can share an output register with another operation already assigned to main_signed_multiply_32_10
  %201 = mul nsw i32 %200, %20... can share an output register with another operation already assigned to main_signed_multiply_32_11
  %201 = mul nsw i32 %200, %20... can share an output register with another operation already assigned to main_signed_multiply_32_12
  %201 = mul nsw i32 %200, %20... can share an output register with another operation already assigned to main_signed_multiply_32_13
  %201 = mul nsw i32 %200, %20... can share an output register with another operation already assigned to main_signed_multiply_32_14
  %204 = mul nsw i32 %203, %20... can share an output register with another operation already assigned to main_signed_multiply_32_0
  %204 = mul nsw i32 %203, %20... can share an output register with another operation already assigned to main_signed_multiply_32_1
  %204 = mul nsw i32 %203, %20... can share an output register with another operation already assigned to main_signed_multiply_32_2
  %204 = mul nsw i32 %203, %20... can share an output register with another operation already assigned to main_signed_multiply_32_3
  %204 = mul nsw i32 %203, %20... can share an output register with another operation already assigned to main_signed_multiply_32_4
  %204 = mul nsw i32 %203, %20... can share an output register with another operation already assigned to main_signed_multiply_32_5
  %204 = mul nsw i32 %203, %20... can share an output register with another operation already assigned to main_signed_multiply_32_6
  %204 = mul nsw i32 %203, %20... can share an output register with another operation already assigned to main_signed_multiply_32_7
  %204 = mul nsw i32 %203, %20... can share an output register with another operation already assigned to main_signed_multiply_32_8
  %204 = mul nsw i32 %203, %20... can share an output register with another operation already assigned to main_signed_multiply_32_9
  %204 = mul nsw i32 %203, %20... can share an output register with another operation already assigned to main_signed_multiply_32_10
  %204 = mul nsw i32 %203, %20... can share an output register with another operation already assigned to main_signed_multiply_32_11
  %204 = mul nsw i32 %203, %20... can share an output register with another operation already assigned to main_signed_multiply_32_12
  %204 = mul nsw i32 %203, %20... can share an output register with another operation already assigned to main_signed_multiply_32_13
  %204 = mul nsw i32 %203, %20... can share an output register with another operation already assigned to main_signed_multiply_32_14
  %209 = mul nsw i32 %208, %20... can share an output register with another operation already assigned to main_signed_multiply_32_0
  %209 = mul nsw i32 %208, %20... can share an output register with another operation already assigned to main_signed_multiply_32_1
  %209 = mul nsw i32 %208, %20... can share an output register with another operation already assigned to main_signed_multiply_32_2
  %209 = mul nsw i32 %208, %20... can share an output register with another operation already assigned to main_signed_multiply_32_3
  %209 = mul nsw i32 %208, %20... can share an output register with another operation already assigned to main_signed_multiply_32_4
  %209 = mul nsw i32 %208, %20... can share an output register with another operation already assigned to main_signed_multiply_32_5
  %209 = mul nsw i32 %208, %20... can share an output register with another operation already assigned to main_signed_multiply_32_6
  %209 = mul nsw i32 %208, %20... can share an output register with another operation already assigned to main_signed_multiply_32_7
  %209 = mul nsw i32 %208, %20... can share an output register with another operation already assigned to main_signed_multiply_32_8
  %209 = mul nsw i32 %208, %20... can share an output register with another operation already assigned to main_signed_multiply_32_9
  %209 = mul nsw i32 %208, %20... can share an output register with another operation already assigned to main_signed_multiply_32_10
  %209 = mul nsw i32 %208, %20... can share an output register with another operation already assigned to main_signed_multiply_32_11
  %209 = mul nsw i32 %208, %20... can share an output register with another operation already assigned to main_signed_multiply_32_12
  %209 = mul nsw i32 %208, %20... can share an output register with another operation already assigned to main_signed_multiply_32_13
  %209 = mul nsw i32 %208, %20... can share an output register with another operation already assigned to main_signed_multiply_32_14
                                                  main_signed_multiply_32_0     main_signed_multiply_32_1     main_signed_multiply_32_2     main_signed_multiply_32_3     main_signed_multiply_32_4     main_signed_multiply_32_5     main_signed_multiply_32_6     main_signed_multiply_32_7     main_signed_multiply_32_8     main_signed_multiply_32_9     main_signed_multiply_32_10    main_signed_multiply_32_11    main_signed_multiply_32_12    main_signed_multiply_32_13    main_signed_multiply_32_14    
  %201 = mul nsw i32 %200, %20... (idx: 0)        -90                           -20                           -20                           -20                           -20                           -40                           -40                           -30                           -30                           -60                           -60                           -60                           -50                           -50                           -60                           
  %204 = mul nsw i32 %203, %20... (idx: 1)        -90                           -20                           -20                           -20                           -20                           -40                           -40                           -30                           -30                           -60                           -60                           -60                           -50                           -50                           -60                           
  %209 = mul nsw i32 %208, %20... (idx: 2)        -90                           -20                           -20                           -20                           -20                           -40                           -40                           -30                           -30                           -60                           -60                           -60                           -50                           -50                           -60                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_multiply_32_0     main_signed_multiply_32_1     main_signed_multiply_32_2     main_signed_multiply_32_3     main_signed_multiply_32_4     main_signed_multiply_32_5     main_signed_multiply_32_6     main_signed_multiply_32_7     main_signed_multiply_32_8     main_signed_multiply_32_9     main_signed_multiply_32_10    main_signed_multiply_32_11    main_signed_multiply_32_12    main_signed_multiply_32_13    main_signed_multiply_32_14    
  %201 = mul nsw i32 %200, %20... (idx: 0)        1                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             
  %204 = mul nsw i32 %203, %20... (idx: 1)        0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             1                             
  %209 = mul nsw i32 %208, %20... (idx: 2)        0                             0                             0                             0                             0                             0                             0                             0                             0                             1                             0                             0                             0                             0                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %201 = mul nsw i32 %200, %20... (idx: 0) -> main_signed_multiply_32_0 (mux inputs: 10)
  %209 = mul nsw i32 %208, %20... (idx: 2) -> main_signed_multiply_32_9 (mux inputs: 8)
  %204 = mul nsw i32 %203, %20... (idx: 1) -> main_signed_multiply_32_14 (mux inputs: 8)
State: LEGUP_F_main_BB__187
Binding functional unit type: main_0_so_local_mem_dual_port
Weight matrix for operation/function unit matching:
  %222 = load i16* %221, align... can share an output register with another operation already assigned to main_main_0_so_local_mem_dual_port_0
  %222 = load i16* %221, align... can share an output register with another operation already assigned to main_main_0_so_local_mem_dual_port_1
  %227 = load i16* %226, align... can share an output register with another operation already assigned to main_main_0_so_local_mem_dual_port_0
  %227 = load i16* %226, align... can share an output register with another operation already assigned to main_main_0_so_local_mem_dual_port_1
                                                  main_main_0_so_local_mem_dual_port_0main_main_0_so_local_mem_dual_port_1
  %222 = load i16* %221, align... (idx: 0)        -25                           45                            
  %227 = load i16* %226, align... (idx: 1)        -25                           45                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_main_0_so_local_mem_dual_port_0main_main_0_so_local_mem_dual_port_1
  %222 = load i16* %221, align... (idx: 0)        1                             0                             
  %227 = load i16* %226, align... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %222 = load i16* %221, align... (idx: 0) -> main_main_0_so_local_mem_dual_port_0 (mux inputs: 14)
  %227 = load i16* %226, align... (idx: 1) -> main_main_0_so_local_mem_dual_port_1 (mux inputs: 7)
State: LEGUP_F_main_BB__187
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %202 = add nsw i32 %201, %19... can share an output register with another operation already assigned to main_signed_add_32_0
  %202 = add nsw i32 %201, %19... can share an output register with another operation already assigned to main_signed_add_32_1
  %202 = add nsw i32 %201, %19... can share an output register with another operation already assigned to main_signed_add_32_2
  %202 = add nsw i32 %201, %19... can share an output register with another operation already assigned to main_signed_add_32_3
  %202 = add nsw i32 %201, %19... can share an output register with another operation already assigned to main_signed_add_32_5
  %202 = add nsw i32 %201, %19... can share an output register with another operation already assigned to main_signed_add_32_6
  %202 = add nsw i32 %201, %19... can share an output register with another operation already assigned to main_signed_add_32_7
  %202 = add nsw i32 %201, %19... can share an output register with another operation already assigned to main_signed_add_32_8
  %202 = add nsw i32 %201, %19... can share an output register with another operation already assigned to main_signed_add_32_9
  %202 = add nsw i32 %201, %19... can share an output register with another operation already assigned to main_signed_add_32_10
  %202 = add nsw i32 %201, %19... can share an output register with another operation already assigned to main_signed_add_32_11
  %202 = add nsw i32 %201, %19... can share an output register with another operation already assigned to main_signed_add_32_12
  %205 = add nsw i32 %204, %19... can share an output register with another operation already assigned to main_signed_add_32_0
  %205 = add nsw i32 %204, %19... can share an output register with another operation already assigned to main_signed_add_32_1
  %205 = add nsw i32 %204, %19... can share an output register with another operation already assigned to main_signed_add_32_2
  %205 = add nsw i32 %204, %19... can share an output register with another operation already assigned to main_signed_add_32_3
  %205 = add nsw i32 %204, %19... can share an output register with another operation already assigned to main_signed_add_32_5
  %205 = add nsw i32 %204, %19... can share an output register with another operation already assigned to main_signed_add_32_6
  %205 = add nsw i32 %204, %19... can share an output register with another operation already assigned to main_signed_add_32_7
  %205 = add nsw i32 %204, %19... can share an output register with another operation already assigned to main_signed_add_32_8
  %205 = add nsw i32 %204, %19... can share an output register with another operation already assigned to main_signed_add_32_9
  %205 = add nsw i32 %204, %19... can share an output register with another operation already assigned to main_signed_add_32_10
  %205 = add nsw i32 %204, %19... can share an output register with another operation already assigned to main_signed_add_32_11
  %205 = add nsw i32 %204, %19... can share an output register with another operation already assigned to main_signed_add_32_12
  %210 = add nsw i32 %209, %19... can share an output register with another operation already assigned to main_signed_add_32_0
  %210 = add nsw i32 %209, %19... can share an output register with another operation already assigned to main_signed_add_32_1
  %210 = add nsw i32 %209, %19... can share an output register with another operation already assigned to main_signed_add_32_2
  %210 = add nsw i32 %209, %19... can share an output register with another operation already assigned to main_signed_add_32_3
  %210 = add nsw i32 %209, %19... can share an output register with another operation already assigned to main_signed_add_32_5
  %210 = add nsw i32 %209, %19... can share an output register with another operation already assigned to main_signed_add_32_6
  %210 = add nsw i32 %209, %19... can share an output register with another operation already assigned to main_signed_add_32_7
  %210 = add nsw i32 %209, %19... can share an output register with another operation already assigned to main_signed_add_32_8
  %210 = add nsw i32 %209, %19... can share an output register with another operation already assigned to main_signed_add_32_9
  %210 = add nsw i32 %209, %19... can share an output register with another operation already assigned to main_signed_add_32_10
  %210 = add nsw i32 %209, %19... can share an output register with another operation already assigned to main_signed_add_32_11
  %210 = add nsw i32 %209, %19... can share an output register with another operation already assigned to main_signed_add_32_12
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         
  %202 = add nsw i32 %201, %19... (idx: 0)        -420                          -120                          -70                           -20                           -30                           -20                           -30                           -50                           -50                           -60                           -60                           -60                           -78                           -9                            90                            
  %205 = add nsw i32 %204, %19... (idx: 1)        -420                          -120                          -70                           -20                           -30                           -20                           -30                           -50                           -50                           -60                           -60                           -60                           -78                           -9                            90                            
  %210 = add nsw i32 %209, %19... (idx: 2)        -420                          -120                          -70                           -20                           -30                           -20                           -30                           -50                           -50                           -60                           -60                           -60                           -78                           -9                            90                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         
  %202 = add nsw i32 %201, %19... (idx: 0)        1                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             
  %205 = add nsw i32 %204, %19... (idx: 1)        0                             1                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             
  %210 = add nsw i32 %209, %19... (idx: 2)        0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             1                             0                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %202 = add nsw i32 %201, %19... (idx: 0) -> main_signed_add_32_0 (mux inputs: 44)
  %205 = add nsw i32 %204, %19... (idx: 1) -> main_signed_add_32_1 (mux inputs: 14)
  %210 = add nsw i32 %209, %19... (idx: 2) -> main_signed_add_32_12 (mux inputs: 10)
State: LEGUP_F_main_BB__187
Binding functional unit type: signed_multiply_32
Weight matrix for operation/function unit matching:
  %214 = mul nsw i32 %213, %20... hey can share an input with another operation already assigned to main_signed_multiply_32_0
  %214 = mul nsw i32 %213, %20... can share an output register with another operation already assigned to main_signed_multiply_32_0
  %214 = mul nsw i32 %213, %20... can share an output register with another operation already assigned to main_signed_multiply_32_1
  %214 = mul nsw i32 %213, %20... can share an output register with another operation already assigned to main_signed_multiply_32_2
  %214 = mul nsw i32 %213, %20... can share an output register with another operation already assigned to main_signed_multiply_32_3
  %214 = mul nsw i32 %213, %20... can share an output register with another operation already assigned to main_signed_multiply_32_4
  %214 = mul nsw i32 %213, %20... can share an output register with another operation already assigned to main_signed_multiply_32_5
  %214 = mul nsw i32 %213, %20... can share an output register with another operation already assigned to main_signed_multiply_32_6
  %214 = mul nsw i32 %213, %20... can share an output register with another operation already assigned to main_signed_multiply_32_7
  %214 = mul nsw i32 %213, %20... can share an output register with another operation already assigned to main_signed_multiply_32_8
  %214 = mul nsw i32 %213, %20... hey can share an input with another operation already assigned to main_signed_multiply_32_9
  %214 = mul nsw i32 %213, %20... can share an output register with another operation already assigned to main_signed_multiply_32_9
  %214 = mul nsw i32 %213, %20... can share an output register with another operation already assigned to main_signed_multiply_32_10
  %214 = mul nsw i32 %213, %20... can share an output register with another operation already assigned to main_signed_multiply_32_11
  %214 = mul nsw i32 %213, %20... can share an output register with another operation already assigned to main_signed_multiply_32_12
  %214 = mul nsw i32 %213, %20... can share an output register with another operation already assigned to main_signed_multiply_32_13
  %214 = mul nsw i32 %213, %20... hey can share an input with another operation already assigned to main_signed_multiply_32_14
  %214 = mul nsw i32 %213, %20... can share an output register with another operation already assigned to main_signed_multiply_32_14
  %219 = mul nsw i32 %218, %20... hey can share an input with another operation already assigned to main_signed_multiply_32_0
  %219 = mul nsw i32 %218, %20... can share an output register with another operation already assigned to main_signed_multiply_32_0
  %219 = mul nsw i32 %218, %20... can share an output register with another operation already assigned to main_signed_multiply_32_1
  %219 = mul nsw i32 %218, %20... can share an output register with another operation already assigned to main_signed_multiply_32_2
  %219 = mul nsw i32 %218, %20... can share an output register with another operation already assigned to main_signed_multiply_32_3
  %219 = mul nsw i32 %218, %20... can share an output register with another operation already assigned to main_signed_multiply_32_4
  %219 = mul nsw i32 %218, %20... can share an output register with another operation already assigned to main_signed_multiply_32_5
  %219 = mul nsw i32 %218, %20... can share an output register with another operation already assigned to main_signed_multiply_32_6
  %219 = mul nsw i32 %218, %20... can share an output register with another operation already assigned to main_signed_multiply_32_7
  %219 = mul nsw i32 %218, %20... can share an output register with another operation already assigned to main_signed_multiply_32_8
  %219 = mul nsw i32 %218, %20... hey can share an input with another operation already assigned to main_signed_multiply_32_9
  %219 = mul nsw i32 %218, %20... can share an output register with another operation already assigned to main_signed_multiply_32_9
  %219 = mul nsw i32 %218, %20... can share an output register with another operation already assigned to main_signed_multiply_32_10
  %219 = mul nsw i32 %218, %20... can share an output register with another operation already assigned to main_signed_multiply_32_11
  %219 = mul nsw i32 %218, %20... can share an output register with another operation already assigned to main_signed_multiply_32_12
  %219 = mul nsw i32 %218, %20... can share an output register with another operation already assigned to main_signed_multiply_32_13
  %219 = mul nsw i32 %218, %20... hey can share an input with another operation already assigned to main_signed_multiply_32_14
  %219 = mul nsw i32 %218, %20... can share an output register with another operation already assigned to main_signed_multiply_32_14
                                                  main_signed_multiply_32_0     main_signed_multiply_32_1     main_signed_multiply_32_2     main_signed_multiply_32_3     main_signed_multiply_32_4     main_signed_multiply_32_5     main_signed_multiply_32_6     main_signed_multiply_32_7     main_signed_multiply_32_8     main_signed_multiply_32_9     main_signed_multiply_32_10    main_signed_multiply_32_11    main_signed_multiply_32_12    main_signed_multiply_32_13    main_signed_multiply_32_14    
  %214 = mul nsw i32 %213, %20... (idx: 0)        -95                           -20                           -20                           -20                           -20                           -40                           -40                           -30                           -30                           -75                           -60                           -60                           -50                           -50                           -75                           
  %219 = mul nsw i32 %218, %20... (idx: 1)        -95                           -20                           -20                           -20                           -20                           -40                           -40                           -30                           -30                           -75                           -60                           -60                           -50                           -50                           -75                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_multiply_32_0     main_signed_multiply_32_1     main_signed_multiply_32_2     main_signed_multiply_32_3     main_signed_multiply_32_4     main_signed_multiply_32_5     main_signed_multiply_32_6     main_signed_multiply_32_7     main_signed_multiply_32_8     main_signed_multiply_32_9     main_signed_multiply_32_10    main_signed_multiply_32_11    main_signed_multiply_32_12    main_signed_multiply_32_13    main_signed_multiply_32_14    
  %214 = mul nsw i32 %213, %20... (idx: 0)        1                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             
  %219 = mul nsw i32 %218, %20... (idx: 1)        0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %214 = mul nsw i32 %213, %20... (idx: 0) -> main_signed_multiply_32_0 (mux inputs: 11)
  %219 = mul nsw i32 %218, %20... (idx: 1) -> main_signed_multiply_32_14 (mux inputs: 9)
State: LEGUP_F_main_BB__187
Binding functional unit type: main_0_so_local_mem_dual_port
Weight matrix for operation/function unit matching:
  %232 = load i16* %231, align... can share an output register with another operation already assigned to main_main_0_so_local_mem_dual_port_0
  %232 = load i16* %231, align... can share an output register with another operation already assigned to main_main_0_so_local_mem_dual_port_1
  %237 = load i16* %236, align... can share an output register with another operation already assigned to main_main_0_so_local_mem_dual_port_0
  %237 = load i16* %236, align... can share an output register with another operation already assigned to main_main_0_so_local_mem_dual_port_1
                                                  main_main_0_so_local_mem_dual_port_0main_main_0_so_local_mem_dual_port_1
  %232 = load i16* %231, align... (idx: 0)        -35                           35                            
  %237 = load i16* %236, align... (idx: 1)        -35                           35                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_main_0_so_local_mem_dual_port_0main_main_0_so_local_mem_dual_port_1
  %232 = load i16* %231, align... (idx: 0)        1                             0                             
  %237 = load i16* %236, align... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %232 = load i16* %231, align... (idx: 0) -> main_main_0_so_local_mem_dual_port_0 (mux inputs: 15)
  %237 = load i16* %236, align... (idx: 1) -> main_main_0_so_local_mem_dual_port_1 (mux inputs: 8)
State: LEGUP_F_main_BB__187
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %215 = add nsw i32 %214, %19... can share an output register with another operation already assigned to main_signed_add_32_0
  %215 = add nsw i32 %214, %19... can share an output register with another operation already assigned to main_signed_add_32_1
  %215 = add nsw i32 %214, %19... can share an output register with another operation already assigned to main_signed_add_32_2
  %215 = add nsw i32 %214, %19... can share an output register with another operation already assigned to main_signed_add_32_3
  %215 = add nsw i32 %214, %19... can share an output register with another operation already assigned to main_signed_add_32_5
  %215 = add nsw i32 %214, %19... can share an output register with another operation already assigned to main_signed_add_32_6
  %215 = add nsw i32 %214, %19... can share an output register with another operation already assigned to main_signed_add_32_7
  %215 = add nsw i32 %214, %19... can share an output register with another operation already assigned to main_signed_add_32_8
  %215 = add nsw i32 %214, %19... can share an output register with another operation already assigned to main_signed_add_32_9
  %215 = add nsw i32 %214, %19... can share an output register with another operation already assigned to main_signed_add_32_10
  %215 = add nsw i32 %214, %19... can share an output register with another operation already assigned to main_signed_add_32_11
  %215 = add nsw i32 %214, %19... can share an output register with another operation already assigned to main_signed_add_32_12
  %220 = add nsw i32 %219, %19... can share an output register with another operation already assigned to main_signed_add_32_0
  %220 = add nsw i32 %219, %19... can share an output register with another operation already assigned to main_signed_add_32_1
  %220 = add nsw i32 %219, %19... can share an output register with another operation already assigned to main_signed_add_32_2
  %220 = add nsw i32 %219, %19... can share an output register with another operation already assigned to main_signed_add_32_3
  %220 = add nsw i32 %219, %19... can share an output register with another operation already assigned to main_signed_add_32_5
  %220 = add nsw i32 %219, %19... can share an output register with another operation already assigned to main_signed_add_32_6
  %220 = add nsw i32 %219, %19... can share an output register with another operation already assigned to main_signed_add_32_7
  %220 = add nsw i32 %219, %19... can share an output register with another operation already assigned to main_signed_add_32_8
  %220 = add nsw i32 %219, %19... can share an output register with another operation already assigned to main_signed_add_32_9
  %220 = add nsw i32 %219, %19... can share an output register with another operation already assigned to main_signed_add_32_10
  %220 = add nsw i32 %219, %19... can share an output register with another operation already assigned to main_signed_add_32_11
  %220 = add nsw i32 %219, %19... can share an output register with another operation already assigned to main_signed_add_32_12
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         
  %215 = add nsw i32 %214, %19... (idx: 0)        -440                          -140                          -70                           -20                           -30                           -20                           -30                           -50                           -50                           -60                           -60                           -60                           -98                           -9                            90                            
  %220 = add nsw i32 %219, %19... (idx: 1)        -440                          -140                          -70                           -20                           -30                           -20                           -30                           -50                           -50                           -60                           -60                           -60                           -98                           -9                            90                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         
  %215 = add nsw i32 %214, %19... (idx: 0)        1                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             
  %220 = add nsw i32 %219, %19... (idx: 1)        0                             1                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %215 = add nsw i32 %214, %19... (idx: 0) -> main_signed_add_32_0 (mux inputs: 46)
  %220 = add nsw i32 %219, %19... (idx: 1) -> main_signed_add_32_1 (mux inputs: 16)
State: LEGUP_F_main_BB__187
Binding functional unit type: signed_multiply_32
Weight matrix for operation/function unit matching:
  %224 = mul nsw i32 %223, %20... hey can share an input with another operation already assigned to main_signed_multiply_32_0
  %224 = mul nsw i32 %223, %20... can share an output register with another operation already assigned to main_signed_multiply_32_0
  %224 = mul nsw i32 %223, %20... can share an output register with another operation already assigned to main_signed_multiply_32_1
  %224 = mul nsw i32 %223, %20... can share an output register with another operation already assigned to main_signed_multiply_32_2
  %224 = mul nsw i32 %223, %20... can share an output register with another operation already assigned to main_signed_multiply_32_3
  %224 = mul nsw i32 %223, %20... can share an output register with another operation already assigned to main_signed_multiply_32_4
  %224 = mul nsw i32 %223, %20... can share an output register with another operation already assigned to main_signed_multiply_32_5
  %224 = mul nsw i32 %223, %20... can share an output register with another operation already assigned to main_signed_multiply_32_6
  %224 = mul nsw i32 %223, %20... can share an output register with another operation already assigned to main_signed_multiply_32_7
  %224 = mul nsw i32 %223, %20... can share an output register with another operation already assigned to main_signed_multiply_32_8
  %224 = mul nsw i32 %223, %20... hey can share an input with another operation already assigned to main_signed_multiply_32_9
  %224 = mul nsw i32 %223, %20... can share an output register with another operation already assigned to main_signed_multiply_32_9
  %224 = mul nsw i32 %223, %20... can share an output register with another operation already assigned to main_signed_multiply_32_10
  %224 = mul nsw i32 %223, %20... can share an output register with another operation already assigned to main_signed_multiply_32_11
  %224 = mul nsw i32 %223, %20... can share an output register with another operation already assigned to main_signed_multiply_32_12
  %224 = mul nsw i32 %223, %20... can share an output register with another operation already assigned to main_signed_multiply_32_13
  %224 = mul nsw i32 %223, %20... hey can share an input with another operation already assigned to main_signed_multiply_32_14
  %224 = mul nsw i32 %223, %20... can share an output register with another operation already assigned to main_signed_multiply_32_14
  %229 = mul nsw i32 %228, %20... hey can share an input with another operation already assigned to main_signed_multiply_32_0
  %229 = mul nsw i32 %228, %20... can share an output register with another operation already assigned to main_signed_multiply_32_0
  %229 = mul nsw i32 %228, %20... can share an output register with another operation already assigned to main_signed_multiply_32_1
  %229 = mul nsw i32 %228, %20... can share an output register with another operation already assigned to main_signed_multiply_32_2
  %229 = mul nsw i32 %228, %20... can share an output register with another operation already assigned to main_signed_multiply_32_3
  %229 = mul nsw i32 %228, %20... can share an output register with another operation already assigned to main_signed_multiply_32_4
  %229 = mul nsw i32 %228, %20... can share an output register with another operation already assigned to main_signed_multiply_32_5
  %229 = mul nsw i32 %228, %20... can share an output register with another operation already assigned to main_signed_multiply_32_6
  %229 = mul nsw i32 %228, %20... can share an output register with another operation already assigned to main_signed_multiply_32_7
  %229 = mul nsw i32 %228, %20... can share an output register with another operation already assigned to main_signed_multiply_32_8
  %229 = mul nsw i32 %228, %20... hey can share an input with another operation already assigned to main_signed_multiply_32_9
  %229 = mul nsw i32 %228, %20... can share an output register with another operation already assigned to main_signed_multiply_32_9
  %229 = mul nsw i32 %228, %20... can share an output register with another operation already assigned to main_signed_multiply_32_10
  %229 = mul nsw i32 %228, %20... can share an output register with another operation already assigned to main_signed_multiply_32_11
  %229 = mul nsw i32 %228, %20... can share an output register with another operation already assigned to main_signed_multiply_32_12
  %229 = mul nsw i32 %228, %20... can share an output register with another operation already assigned to main_signed_multiply_32_13
  %229 = mul nsw i32 %228, %20... hey can share an input with another operation already assigned to main_signed_multiply_32_14
  %229 = mul nsw i32 %228, %20... can share an output register with another operation already assigned to main_signed_multiply_32_14
                                                  main_signed_multiply_32_0     main_signed_multiply_32_1     main_signed_multiply_32_2     main_signed_multiply_32_3     main_signed_multiply_32_4     main_signed_multiply_32_5     main_signed_multiply_32_6     main_signed_multiply_32_7     main_signed_multiply_32_8     main_signed_multiply_32_9     main_signed_multiply_32_10    main_signed_multiply_32_11    main_signed_multiply_32_12    main_signed_multiply_32_13    main_signed_multiply_32_14    
  %224 = mul nsw i32 %223, %20... (idx: 0)        -105                          -20                           -20                           -20                           -20                           -40                           -40                           -30                           -30                           -75                           -60                           -60                           -50                           -50                           -85                           
  %229 = mul nsw i32 %228, %20... (idx: 1)        -105                          -20                           -20                           -20                           -20                           -40                           -40                           -30                           -30                           -75                           -60                           -60                           -50                           -50                           -85                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_multiply_32_0     main_signed_multiply_32_1     main_signed_multiply_32_2     main_signed_multiply_32_3     main_signed_multiply_32_4     main_signed_multiply_32_5     main_signed_multiply_32_6     main_signed_multiply_32_7     main_signed_multiply_32_8     main_signed_multiply_32_9     main_signed_multiply_32_10    main_signed_multiply_32_11    main_signed_multiply_32_12    main_signed_multiply_32_13    main_signed_multiply_32_14    
  %224 = mul nsw i32 %223, %20... (idx: 0)        1                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             
  %229 = mul nsw i32 %228, %20... (idx: 1)        0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %224 = mul nsw i32 %223, %20... (idx: 0) -> main_signed_multiply_32_0 (mux inputs: 12)
  %229 = mul nsw i32 %228, %20... (idx: 1) -> main_signed_multiply_32_14 (mux inputs: 10)
State: LEGUP_F_main_BB__187
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %225 = add nsw i32 %224, %19... can share an output register with another operation already assigned to main_signed_add_32_0
  %225 = add nsw i32 %224, %19... can share an output register with another operation already assigned to main_signed_add_32_1
  %225 = add nsw i32 %224, %19... can share an output register with another operation already assigned to main_signed_add_32_2
  %225 = add nsw i32 %224, %19... can share an output register with another operation already assigned to main_signed_add_32_3
  %225 = add nsw i32 %224, %19... can share an output register with another operation already assigned to main_signed_add_32_5
  %225 = add nsw i32 %224, %19... can share an output register with another operation already assigned to main_signed_add_32_6
  %225 = add nsw i32 %224, %19... can share an output register with another operation already assigned to main_signed_add_32_7
  %225 = add nsw i32 %224, %19... can share an output register with another operation already assigned to main_signed_add_32_8
  %225 = add nsw i32 %224, %19... can share an output register with another operation already assigned to main_signed_add_32_9
  %225 = add nsw i32 %224, %19... can share an output register with another operation already assigned to main_signed_add_32_10
  %225 = add nsw i32 %224, %19... can share an output register with another operation already assigned to main_signed_add_32_11
  %225 = add nsw i32 %224, %19... can share an output register with another operation already assigned to main_signed_add_32_12
  %230 = add nsw i32 %229, %19... can share an output register with another operation already assigned to main_signed_add_32_0
  %230 = add nsw i32 %229, %19... can share an output register with another operation already assigned to main_signed_add_32_1
  %230 = add nsw i32 %229, %19... can share an output register with another operation already assigned to main_signed_add_32_2
  %230 = add nsw i32 %229, %19... can share an output register with another operation already assigned to main_signed_add_32_3
  %230 = add nsw i32 %229, %19... can share an output register with another operation already assigned to main_signed_add_32_5
  %230 = add nsw i32 %229, %19... can share an output register with another operation already assigned to main_signed_add_32_6
  %230 = add nsw i32 %229, %19... can share an output register with another operation already assigned to main_signed_add_32_7
  %230 = add nsw i32 %229, %19... can share an output register with another operation already assigned to main_signed_add_32_8
  %230 = add nsw i32 %229, %19... can share an output register with another operation already assigned to main_signed_add_32_9
  %230 = add nsw i32 %229, %19... can share an output register with another operation already assigned to main_signed_add_32_10
  %230 = add nsw i32 %229, %19... can share an output register with another operation already assigned to main_signed_add_32_11
  %230 = add nsw i32 %229, %19... can share an output register with another operation already assigned to main_signed_add_32_12
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         
  %225 = add nsw i32 %224, %19... (idx: 0)        -460                          -160                          -70                           -20                           -30                           -20                           -30                           -50                           -50                           -60                           -60                           -60                           -98                           -9                            90                            
  %230 = add nsw i32 %229, %19... (idx: 1)        -460                          -160                          -70                           -20                           -30                           -20                           -30                           -50                           -50                           -60                           -60                           -60                           -98                           -9                            90                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         
  %225 = add nsw i32 %224, %19... (idx: 0)        1                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             
  %230 = add nsw i32 %229, %19... (idx: 1)        0                             1                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %225 = add nsw i32 %224, %19... (idx: 0) -> main_signed_add_32_0 (mux inputs: 48)
  %230 = add nsw i32 %229, %19... (idx: 1) -> main_signed_add_32_1 (mux inputs: 18)
State: LEGUP_F_main_BB__187
Binding functional unit type: signed_multiply_32
Weight matrix for operation/function unit matching:
  %234 = mul nsw i32 %233, %20... hey can share an input with another operation already assigned to main_signed_multiply_32_0
  %234 = mul nsw i32 %233, %20... can share an output register with another operation already assigned to main_signed_multiply_32_0
  %234 = mul nsw i32 %233, %20... can share an output register with another operation already assigned to main_signed_multiply_32_1
  %234 = mul nsw i32 %233, %20... can share an output register with another operation already assigned to main_signed_multiply_32_2
  %234 = mul nsw i32 %233, %20... can share an output register with another operation already assigned to main_signed_multiply_32_3
  %234 = mul nsw i32 %233, %20... can share an output register with another operation already assigned to main_signed_multiply_32_4
  %234 = mul nsw i32 %233, %20... can share an output register with another operation already assigned to main_signed_multiply_32_5
  %234 = mul nsw i32 %233, %20... can share an output register with another operation already assigned to main_signed_multiply_32_6
  %234 = mul nsw i32 %233, %20... can share an output register with another operation already assigned to main_signed_multiply_32_7
  %234 = mul nsw i32 %233, %20... can share an output register with another operation already assigned to main_signed_multiply_32_8
  %234 = mul nsw i32 %233, %20... hey can share an input with another operation already assigned to main_signed_multiply_32_9
  %234 = mul nsw i32 %233, %20... can share an output register with another operation already assigned to main_signed_multiply_32_9
  %234 = mul nsw i32 %233, %20... can share an output register with another operation already assigned to main_signed_multiply_32_10
  %234 = mul nsw i32 %233, %20... can share an output register with another operation already assigned to main_signed_multiply_32_11
  %234 = mul nsw i32 %233, %20... can share an output register with another operation already assigned to main_signed_multiply_32_12
  %234 = mul nsw i32 %233, %20... can share an output register with another operation already assigned to main_signed_multiply_32_13
  %234 = mul nsw i32 %233, %20... hey can share an input with another operation already assigned to main_signed_multiply_32_14
  %234 = mul nsw i32 %233, %20... can share an output register with another operation already assigned to main_signed_multiply_32_14
  %239 = mul nsw i32 %238, %20... hey can share an input with another operation already assigned to main_signed_multiply_32_0
  %239 = mul nsw i32 %238, %20... can share an output register with another operation already assigned to main_signed_multiply_32_0
  %239 = mul nsw i32 %238, %20... can share an output register with another operation already assigned to main_signed_multiply_32_1
  %239 = mul nsw i32 %238, %20... can share an output register with another operation already assigned to main_signed_multiply_32_2
  %239 = mul nsw i32 %238, %20... can share an output register with another operation already assigned to main_signed_multiply_32_3
  %239 = mul nsw i32 %238, %20... can share an output register with another operation already assigned to main_signed_multiply_32_4
  %239 = mul nsw i32 %238, %20... can share an output register with another operation already assigned to main_signed_multiply_32_5
  %239 = mul nsw i32 %238, %20... can share an output register with another operation already assigned to main_signed_multiply_32_6
  %239 = mul nsw i32 %238, %20... can share an output register with another operation already assigned to main_signed_multiply_32_7
  %239 = mul nsw i32 %238, %20... can share an output register with another operation already assigned to main_signed_multiply_32_8
  %239 = mul nsw i32 %238, %20... hey can share an input with another operation already assigned to main_signed_multiply_32_9
  %239 = mul nsw i32 %238, %20... can share an output register with another operation already assigned to main_signed_multiply_32_9
  %239 = mul nsw i32 %238, %20... can share an output register with another operation already assigned to main_signed_multiply_32_10
  %239 = mul nsw i32 %238, %20... can share an output register with another operation already assigned to main_signed_multiply_32_11
  %239 = mul nsw i32 %238, %20... can share an output register with another operation already assigned to main_signed_multiply_32_12
  %239 = mul nsw i32 %238, %20... can share an output register with another operation already assigned to main_signed_multiply_32_13
  %239 = mul nsw i32 %238, %20... hey can share an input with another operation already assigned to main_signed_multiply_32_14
  %239 = mul nsw i32 %238, %20... can share an output register with another operation already assigned to main_signed_multiply_32_14
                                                  main_signed_multiply_32_0     main_signed_multiply_32_1     main_signed_multiply_32_2     main_signed_multiply_32_3     main_signed_multiply_32_4     main_signed_multiply_32_5     main_signed_multiply_32_6     main_signed_multiply_32_7     main_signed_multiply_32_8     main_signed_multiply_32_9     main_signed_multiply_32_10    main_signed_multiply_32_11    main_signed_multiply_32_12    main_signed_multiply_32_13    main_signed_multiply_32_14    
  %234 = mul nsw i32 %233, %20... (idx: 0)        -115                          -20                           -20                           -20                           -20                           -40                           -40                           -30                           -30                           -75                           -60                           -60                           -50                           -50                           -95                           
  %239 = mul nsw i32 %238, %20... (idx: 1)        -115                          -20                           -20                           -20                           -20                           -40                           -40                           -30                           -30                           -75                           -60                           -60                           -50                           -50                           -95                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_multiply_32_0     main_signed_multiply_32_1     main_signed_multiply_32_2     main_signed_multiply_32_3     main_signed_multiply_32_4     main_signed_multiply_32_5     main_signed_multiply_32_6     main_signed_multiply_32_7     main_signed_multiply_32_8     main_signed_multiply_32_9     main_signed_multiply_32_10    main_signed_multiply_32_11    main_signed_multiply_32_12    main_signed_multiply_32_13    main_signed_multiply_32_14    
  %234 = mul nsw i32 %233, %20... (idx: 0)        1                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             
  %239 = mul nsw i32 %238, %20... (idx: 1)        0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %234 = mul nsw i32 %233, %20... (idx: 0) -> main_signed_multiply_32_0 (mux inputs: 13)
  %239 = mul nsw i32 %238, %20... (idx: 1) -> main_signed_multiply_32_14 (mux inputs: 11)
State: LEGUP_F_main_BB__187
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %235 = add nsw i32 %234, %19... can share an output register with another operation already assigned to main_signed_add_32_0
  %235 = add nsw i32 %234, %19... can share an output register with another operation already assigned to main_signed_add_32_1
  %235 = add nsw i32 %234, %19... can share an output register with another operation already assigned to main_signed_add_32_2
  %235 = add nsw i32 %234, %19... can share an output register with another operation already assigned to main_signed_add_32_3
  %235 = add nsw i32 %234, %19... can share an output register with another operation already assigned to main_signed_add_32_5
  %235 = add nsw i32 %234, %19... can share an output register with another operation already assigned to main_signed_add_32_6
  %235 = add nsw i32 %234, %19... can share an output register with another operation already assigned to main_signed_add_32_7
  %235 = add nsw i32 %234, %19... can share an output register with another operation already assigned to main_signed_add_32_8
  %235 = add nsw i32 %234, %19... can share an output register with another operation already assigned to main_signed_add_32_9
  %235 = add nsw i32 %234, %19... can share an output register with another operation already assigned to main_signed_add_32_10
  %235 = add nsw i32 %234, %19... can share an output register with another operation already assigned to main_signed_add_32_11
  %235 = add nsw i32 %234, %19... can share an output register with another operation already assigned to main_signed_add_32_12
  %240 = add nsw i32 %239, %18... can share an output register with another operation already assigned to main_signed_add_32_0
  %240 = add nsw i32 %239, %18... can share an output register with another operation already assigned to main_signed_add_32_1
  %240 = add nsw i32 %239, %18... can share an output register with another operation already assigned to main_signed_add_32_2
  %240 = add nsw i32 %239, %18... can share an output register with another operation already assigned to main_signed_add_32_3
  %240 = add nsw i32 %239, %18... can share an output register with another operation already assigned to main_signed_add_32_5
  %240 = add nsw i32 %239, %18... can share an output register with another operation already assigned to main_signed_add_32_6
  %240 = add nsw i32 %239, %18... can share an output register with another operation already assigned to main_signed_add_32_7
  %240 = add nsw i32 %239, %18... can share an output register with another operation already assigned to main_signed_add_32_8
  %240 = add nsw i32 %239, %18... can share an output register with another operation already assigned to main_signed_add_32_9
  %240 = add nsw i32 %239, %18... can share an output register with another operation already assigned to main_signed_add_32_10
  %240 = add nsw i32 %239, %18... can share an output register with another operation already assigned to main_signed_add_32_11
  %240 = add nsw i32 %239, %18... can share an output register with another operation already assigned to main_signed_add_32_12
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         
  %235 = add nsw i32 %234, %19... (idx: 0)        -480                          -180                          -70                           -20                           -30                           -20                           -30                           -50                           -50                           -60                           -60                           -60                           -99                           -8                            90                            
  %240 = add nsw i32 %239, %18... (idx: 1)        -480                          -180                          -70                           -20                           -30                           -20                           -30                           -50                           -50                           -60                           -60                           -60                           -99                           -9                            90                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         
  %235 = add nsw i32 %234, %19... (idx: 0)        1                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             
  %240 = add nsw i32 %239, %18... (idx: 1)        0                             1                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %235 = add nsw i32 %234, %19... (idx: 0) -> main_signed_add_32_0 (mux inputs: 50)
  %240 = add nsw i32 %239, %18... (idx: 1) -> main_signed_add_32_1 (mux inputs: 20)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: main_0_so_local_mem_dual_port
Weight matrix for operation/function unit matching:
  store i16 %246, i16* %.08.i,... can share an output register with another operation already assigned to main_main_0_so_local_mem_dual_port_0
  store i16 %246, i16* %.08.i,... can share an output register with another operation already assigned to main_main_0_so_local_mem_dual_port_1
                                                  main_main_0_so_local_mem_dual_port_0main_main_0_so_local_mem_dual_port_1
  store i16 %246, i16* %.08.i,... (idx: 0)        -50                           20                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_main_0_so_local_mem_dual_port_0main_main_0_so_local_mem_dual_port_1
  store i16 %246, i16* %.08.i,... (idx: 0)        1                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i16 %246, i16* %.08.i,... (idx: 0) -> main_main_0_so_local_mem_dual_port_0 (mux inputs: 17)
State: LEGUP_F_main_BB_preheaderi
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %gep54 = add i32 %gep_int53,... can share an output register with another operation already assigned to main_signed_add_32_0
  %gep54 = add i32 %gep_int53,... can share an output register with another operation already assigned to main_signed_add_32_1
  %gep54 = add i32 %gep_int53,... can share an output register with another operation already assigned to main_signed_add_32_2
  %gep54 = add i32 %gep_int53,... can share an output register with another operation already assigned to main_signed_add_32_3
  %gep54 = add i32 %gep_int53,... can share an output register with another operation already assigned to main_signed_add_32_4
  %gep54 = add i32 %gep_int53,... can share an output register with another operation already assigned to main_signed_add_32_5
  %gep54 = add i32 %gep_int53,... can share an output register with another operation already assigned to main_signed_add_32_6
  %gep54 = add i32 %gep_int53,... can share an output register with another operation already assigned to main_signed_add_32_7
  %gep54 = add i32 %gep_int53,... can share an output register with another operation already assigned to main_signed_add_32_8
  %gep54 = add i32 %gep_int53,... can share an output register with another operation already assigned to main_signed_add_32_9
  %gep54 = add i32 %gep_int53,... can share an output register with another operation already assigned to main_signed_add_32_10
  %gep54 = add i32 %gep_int53,... can share an output register with another operation already assigned to main_signed_add_32_11
  %gep54 = add i32 %gep_int53,... can share an output register with another operation already assigned to main_signed_add_32_12
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         
  %gep54 = add i32 %gep_int53,... (idx: 0)        -495                          -195                          -64                           -14                           -14                           -14                           -24                           -45                           -44                           -54                           -54                           -54                           -94                           -4                            95                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         
  %gep54 = add i32 %gep_int53,... (idx: 0)        1                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %gep54 = add i32 %gep_int53,... (idx: 0) -> main_signed_add_32_0 (mux inputs: 51)
State: LEGUP_F_main_BB__crit_edgei
Binding functional unit type: main_0_so_local_mem_dual_port
Weight matrix for operation/function unit matching:
  %.pre.i = load i16* %243, al... can share an output register with another operation already assigned to main_main_0_so_local_mem_dual_port_0
  %.pre.i = load i16* %243, al... can share an output register with another operation already assigned to main_main_0_so_local_mem_dual_port_1
                                                  main_main_0_so_local_mem_dual_port_0main_main_0_so_local_mem_dual_port_1
  %.pre.i = load i16* %243, al... (idx: 0)        -65                           25                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_main_0_so_local_mem_dual_port_0main_main_0_so_local_mem_dual_port_1
  %.pre.i = load i16* %243, al... (idx: 0)        1                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %.pre.i = load i16* %243, al... (idx: 0) -> main_main_0_so_local_mem_dual_port_0 (mux inputs: 18)
State: LEGUP_F_main_BB__crit_edgei
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %248 = add nsw i32 %k.47.i, ... can share an output register with another operation already assigned to main_signed_add_32_0
  %248 = add nsw i32 %k.47.i, ... can share an output register with another operation already assigned to main_signed_add_32_1
  %248 = add nsw i32 %k.47.i, ... can share an output register with another operation already assigned to main_signed_add_32_2
  %248 = add nsw i32 %k.47.i, ... can share an output register with another operation already assigned to main_signed_add_32_3
  %248 = add nsw i32 %k.47.i, ... can share an output register with another operation already assigned to main_signed_add_32_4
  %248 = add nsw i32 %k.47.i, ... can share an output register with another operation already assigned to main_signed_add_32_5
  %248 = add nsw i32 %k.47.i, ... can share an output register with another operation already assigned to main_signed_add_32_6
  %248 = add nsw i32 %k.47.i, ... can share an output register with another operation already assigned to main_signed_add_32_7
  %248 = add nsw i32 %k.47.i, ... can share an output register with another operation already assigned to main_signed_add_32_8
  %248 = add nsw i32 %k.47.i, ... can share an output register with another operation already assigned to main_signed_add_32_9
  %248 = add nsw i32 %k.47.i, ... can share an output register with another operation already assigned to main_signed_add_32_10
  %248 = add nsw i32 %k.47.i, ... can share an output register with another operation already assigned to main_signed_add_32_11
  %248 = add nsw i32 %k.47.i, ... can share an output register with another operation already assigned to main_signed_add_32_12
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         
  %248 = add nsw i32 %k.47.i, ... (idx: 0)        -504                          -193                          -63                           -13                           -13                           -13                           -23                           -43                           -43                           -53                           -53                           -53                           -92                           -3                            95                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         
  %248 = add nsw i32 %k.47.i, ... (idx: 0)        1                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %248 = add nsw i32 %k.47.i, ... (idx: 0) -> main_signed_add_32_0 (mux inputs: 52)
State: LEGUP_F_main_BB__261
Binding functional unit type: bitoff_local_mem_dual_port
Weight matrix for operation/function unit matching:
  %264 = load i8* %263, align ... can share an output register with another operation already assigned to main_bitoff_local_mem_dual_port_0
                                                  main_bitoff_local_mem_dual_port_0
  %264 = load i8* %263, align ... (idx: 0)        65                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_bitoff_local_mem_dual_port_0
  %264 = load i8* %263, align ... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %264 = load i8* %263, align ... (idx: 0) -> main_bitoff_local_mem_dual_port_0 (mux inputs: 5)
State: LEGUP_F_main_BB__261
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %gep70 = add i32 %gep_int69,... can share an output register with another operation already assigned to main_signed_add_32_0
  %gep70 = add i32 %gep_int69,... can share an output register with another operation already assigned to main_signed_add_32_1
  %gep70 = add i32 %gep_int69,... can share an output register with another operation already assigned to main_signed_add_32_2
  %gep70 = add i32 %gep_int69,... can share an output register with another operation already assigned to main_signed_add_32_3
  %gep70 = add i32 %gep_int69,... can share an output register with another operation already assigned to main_signed_add_32_4
  %gep70 = add i32 %gep_int69,... can share an output register with another operation already assigned to main_signed_add_32_5
  %gep70 = add i32 %gep_int69,... can share an output register with another operation already assigned to main_signed_add_32_6
  %gep70 = add i32 %gep_int69,... can share an output register with another operation already assigned to main_signed_add_32_7
  %gep70 = add i32 %gep_int69,... can share an output register with another operation already assigned to main_signed_add_32_8
  %gep70 = add i32 %gep_int69,... can share an output register with another operation already assigned to main_signed_add_32_9
  %gep70 = add i32 %gep_int69,... can share an output register with another operation already assigned to main_signed_add_32_10
  %gep70 = add i32 %gep_int69,... can share an output register with another operation already assigned to main_signed_add_32_11
  %gep70 = add i32 %gep_int69,... can share an output register with another operation already assigned to main_signed_add_32_12
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         
  %gep70 = add i32 %gep_int69,... (idx: 0)        -520                          -200                          -70                           -20                           -20                           -20                           -30                           -50                           -50                           -60                           -60                           -60                           -100                          -10                           90                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         
  %gep70 = add i32 %gep_int69,... (idx: 0)        1                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %gep70 = add i32 %gep_int69,... (idx: 0) -> main_signed_add_32_0 (mux inputs: 54)
State: LEGUP_F_main_BB__261
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         
  %266 = add nsw i32 %265, -1 (idx: 0)            -544                          -204                          -74                           -24                           -24                           -24                           -34                           -54                           -54                           -64                           -64                           -64                           -104                          -4                            95                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         
  %266 = add nsw i32 %265, -1 (idx: 0)            1                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %266 = add nsw i32 %265, -1 (idx: 0) -> main_signed_add_32_0 (mux inputs: 55)
State: LEGUP_F_main_BB__267
Binding functional unit type: bitoff_local_mem_dual_port
Weight matrix for operation/function unit matching:
  %271 = load i8* %270, align ... can share an output register with another operation already assigned to main_bitoff_local_mem_dual_port_0
                                                  main_bitoff_local_mem_dual_port_0
  %271 = load i8* %270, align ... (idx: 0)        55                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_bitoff_local_mem_dual_port_0
  %271 = load i8* %270, align ... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %271 = load i8* %270, align ... (idx: 0) -> main_bitoff_local_mem_dual_port_0 (mux inputs: 6)
State: LEGUP_F_main_BB__267
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %gep72 = add i32 %gep_int71,... can share an output register with another operation already assigned to main_signed_add_32_0
  %gep72 = add i32 %gep_int71,... can share an output register with another operation already assigned to main_signed_add_32_1
  %gep72 = add i32 %gep_int71,... can share an output register with another operation already assigned to main_signed_add_32_2
  %gep72 = add i32 %gep_int71,... can share an output register with another operation already assigned to main_signed_add_32_3
  %gep72 = add i32 %gep_int71,... can share an output register with another operation already assigned to main_signed_add_32_4
  %gep72 = add i32 %gep_int71,... can share an output register with another operation already assigned to main_signed_add_32_5
  %gep72 = add i32 %gep_int71,... can share an output register with another operation already assigned to main_signed_add_32_6
  %gep72 = add i32 %gep_int71,... can share an output register with another operation already assigned to main_signed_add_32_7
  %gep72 = add i32 %gep_int71,... can share an output register with another operation already assigned to main_signed_add_32_8
  %gep72 = add i32 %gep_int71,... can share an output register with another operation already assigned to main_signed_add_32_9
  %gep72 = add i32 %gep_int71,... can share an output register with another operation already assigned to main_signed_add_32_10
  %gep72 = add i32 %gep_int71,... can share an output register with another operation already assigned to main_signed_add_32_11
  %gep72 = add i32 %gep_int71,... can share an output register with another operation already assigned to main_signed_add_32_12
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         
  %gep72 = add i32 %gep_int71,... (idx: 0)        -550                          -200                          -70                           -20                           -20                           -20                           -30                           -50                           -50                           -60                           -60                           -60                           -100                          -10                           90                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         
  %gep72 = add i32 %gep_int71,... (idx: 0)        1                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %gep72 = add i32 %gep_int71,... (idx: 0) -> main_signed_add_32_0 (mux inputs: 57)
State: LEGUP_F_main_BB__267
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %273 = add nuw nsw i32 %272,... can share an output register with another operation already assigned to main_signed_add_32_0
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         
  %273 = add nuw nsw i32 %272,... (idx: 0)        -565                          -204                          -74                           -24                           -24                           -24                           -34                           -54                           -54                           -64                           -64                           -64                           -104                          -4                            95                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         
  %273 = add nuw nsw i32 %272,... (idx: 0)        1                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %273 = add nuw nsw i32 %272,... (idx: 0) -> main_signed_add_32_0 (mux inputs: 58)
State: LEGUP_F_main_BB__277
Binding functional unit type: bitoff_local_mem_dual_port
Weight matrix for operation/function unit matching:
  %281 = load i8* %280, align ... can share an output register with another operation already assigned to main_bitoff_local_mem_dual_port_0
                                                  main_bitoff_local_mem_dual_port_0
  %281 = load i8* %280, align ... (idx: 0)        45                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_bitoff_local_mem_dual_port_0
  %281 = load i8* %280, align ... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %281 = load i8* %280, align ... (idx: 0) -> main_bitoff_local_mem_dual_port_0 (mux inputs: 7)
State: LEGUP_F_main_BB__277
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %gep74 = add i32 %gep_int73,... can share an output register with another operation already assigned to main_signed_add_32_0
  %gep74 = add i32 %gep_int73,... can share an output register with another operation already assigned to main_signed_add_32_1
  %gep74 = add i32 %gep_int73,... can share an output register with another operation already assigned to main_signed_add_32_2
  %gep74 = add i32 %gep_int73,... can share an output register with another operation already assigned to main_signed_add_32_3
  %gep74 = add i32 %gep_int73,... can share an output register with another operation already assigned to main_signed_add_32_4
  %gep74 = add i32 %gep_int73,... can share an output register with another operation already assigned to main_signed_add_32_5
  %gep74 = add i32 %gep_int73,... can share an output register with another operation already assigned to main_signed_add_32_6
  %gep74 = add i32 %gep_int73,... can share an output register with another operation already assigned to main_signed_add_32_7
  %gep74 = add i32 %gep_int73,... can share an output register with another operation already assigned to main_signed_add_32_8
  %gep74 = add i32 %gep_int73,... can share an output register with another operation already assigned to main_signed_add_32_9
  %gep74 = add i32 %gep_int73,... can share an output register with another operation already assigned to main_signed_add_32_10
  %gep74 = add i32 %gep_int73,... can share an output register with another operation already assigned to main_signed_add_32_11
  %gep74 = add i32 %gep_int73,... can share an output register with another operation already assigned to main_signed_add_32_12
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         
  %gep74 = add i32 %gep_int73,... (idx: 0)        -580                          -200                          -70                           -20                           -20                           -20                           -30                           -50                           -50                           -60                           -60                           -60                           -100                          -10                           90                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         
  %gep74 = add i32 %gep_int73,... (idx: 0)        1                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %gep74 = add i32 %gep_int73,... (idx: 0) -> main_signed_add_32_0 (mux inputs: 60)
State: LEGUP_F_main_BB__277
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %283 = add nuw nsw i32 %282,... can share an output register with another operation already assigned to main_signed_add_32_0
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         
  %283 = add nuw nsw i32 %282,... (idx: 0)        -595                          -204                          -74                           -24                           -24                           -24                           -34                           -54                           -54                           -64                           -64                           -64                           -104                          -4                            95                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         
  %283 = add nuw nsw i32 %282,... (idx: 0)        1                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %283 = add nuw nsw i32 %282,... (idx: 0) -> main_signed_add_32_0 (mux inputs: 61)
State: LEGUP_F_main_BB__284
Binding functional unit type: bitoff_local_mem_dual_port
Weight matrix for operation/function unit matching:
  %287 = load i8* %286, align ... can share an output register with another operation already assigned to main_bitoff_local_mem_dual_port_0
                                                  main_bitoff_local_mem_dual_port_0
  %287 = load i8* %286, align ... (idx: 0)        35                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_bitoff_local_mem_dual_port_0
  %287 = load i8* %286, align ... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %287 = load i8* %286, align ... (idx: 0) -> main_bitoff_local_mem_dual_port_0 (mux inputs: 8)
State: LEGUP_F_main_BB__284
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %gep76 = add i32 %gep_int75,... can share an output register with another operation already assigned to main_signed_add_32_0
  %gep76 = add i32 %gep_int75,... can share an output register with another operation already assigned to main_signed_add_32_1
  %gep76 = add i32 %gep_int75,... can share an output register with another operation already assigned to main_signed_add_32_2
  %gep76 = add i32 %gep_int75,... can share an output register with another operation already assigned to main_signed_add_32_3
  %gep76 = add i32 %gep_int75,... can share an output register with another operation already assigned to main_signed_add_32_4
  %gep76 = add i32 %gep_int75,... can share an output register with another operation already assigned to main_signed_add_32_5
  %gep76 = add i32 %gep_int75,... can share an output register with another operation already assigned to main_signed_add_32_6
  %gep76 = add i32 %gep_int75,... can share an output register with another operation already assigned to main_signed_add_32_7
  %gep76 = add i32 %gep_int75,... can share an output register with another operation already assigned to main_signed_add_32_8
  %gep76 = add i32 %gep_int75,... can share an output register with another operation already assigned to main_signed_add_32_9
  %gep76 = add i32 %gep_int75,... can share an output register with another operation already assigned to main_signed_add_32_10
  %gep76 = add i32 %gep_int75,... can share an output register with another operation already assigned to main_signed_add_32_11
  %gep76 = add i32 %gep_int75,... can share an output register with another operation already assigned to main_signed_add_32_12
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         
  %gep76 = add i32 %gep_int75,... (idx: 0)        -610                          -200                          -70                           -20                           -20                           -20                           -30                           -50                           -50                           -60                           -60                           -60                           -100                          -10                           90                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         
  %gep76 = add i32 %gep_int75,... (idx: 0)        1                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %gep76 = add i32 %gep_int75,... (idx: 0) -> main_signed_add_32_0 (mux inputs: 63)
State: LEGUP_F_main_BB__284
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %289 = add nuw nsw i32 %288,... can share an output register with another operation already assigned to main_signed_add_32_0
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         
  %289 = add nuw nsw i32 %288,... (idx: 0)        -625                          -204                          -74                           -24                           -24                           -24                           -34                           -54                           -54                           -64                           -64                           -64                           -104                          -4                            95                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         
  %289 = add nuw nsw i32 %288,... (idx: 0)        1                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %289 = add nuw nsw i32 %288,... (idx: 0) -> main_signed_add_32_0 (mux inputs: 64)
State: LEGUP_F_main_BB_gsm_normexiti
Binding functional unit type: main_0_Ki_local_mem_dual_port
Weight matrix for operation/function unit matching:
                                                  main_main_0_Ki_local_mem_dual_port_0
  store i16 %296, i16* %318, a... (idx: 0)        90                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_main_0_Ki_local_mem_dual_port_0
  store i16 %296, i16* %318, a... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i16 %296, i16* %318, a... (idx: 0) -> main_main_0_Ki_local_mem_dual_port_0 (mux inputs: 2)
State: LEGUP_F_main_BB_gsm_normexiti
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %gep78 = add i32 %gep_int77,... can share an output register with another operation already assigned to main_signed_add_32_0
  %gep78 = add i32 %gep_int77,... can share an output register with another operation already assigned to main_signed_add_32_1
  %gep78 = add i32 %gep_int77,... can share an output register with another operation already assigned to main_signed_add_32_2
  %gep78 = add i32 %gep_int77,... can share an output register with another operation already assigned to main_signed_add_32_3
  %gep78 = add i32 %gep_int77,... can share an output register with another operation already assigned to main_signed_add_32_4
  %gep78 = add i32 %gep_int77,... can share an output register with another operation already assigned to main_signed_add_32_5
  %gep78 = add i32 %gep_int77,... can share an output register with another operation already assigned to main_signed_add_32_6
  %gep78 = add i32 %gep_int77,... can share an output register with another operation already assigned to main_signed_add_32_7
  %gep78 = add i32 %gep_int77,... can share an output register with another operation already assigned to main_signed_add_32_8
  %gep78 = add i32 %gep_int77,... can share an output register with another operation already assigned to main_signed_add_32_9
  %gep78 = add i32 %gep_int77,... can share an output register with another operation already assigned to main_signed_add_32_10
  %gep78 = add i32 %gep_int77,... can share an output register with another operation already assigned to main_signed_add_32_11
  %gep78 = add i32 %gep_int77,... can share an output register with another operation already assigned to main_signed_add_32_12
  %gep80 = add i32 %gep_int79,... can share an output register with another operation already assigned to main_signed_add_32_0
  %gep80 = add i32 %gep_int79,... can share an output register with another operation already assigned to main_signed_add_32_1
  %gep80 = add i32 %gep_int79,... can share an output register with another operation already assigned to main_signed_add_32_2
  %gep80 = add i32 %gep_int79,... can share an output register with another operation already assigned to main_signed_add_32_3
  %gep80 = add i32 %gep_int79,... can share an output register with another operation already assigned to main_signed_add_32_4
  %gep80 = add i32 %gep_int79,... can share an output register with another operation already assigned to main_signed_add_32_5
  %gep80 = add i32 %gep_int79,... can share an output register with another operation already assigned to main_signed_add_32_6
  %gep80 = add i32 %gep_int79,... can share an output register with another operation already assigned to main_signed_add_32_7
  %gep80 = add i32 %gep_int79,... can share an output register with another operation already assigned to main_signed_add_32_8
  %gep80 = add i32 %gep_int79,... can share an output register with another operation already assigned to main_signed_add_32_9
  %gep80 = add i32 %gep_int79,... can share an output register with another operation already assigned to main_signed_add_32_10
  %gep80 = add i32 %gep_int79,... can share an output register with another operation already assigned to main_signed_add_32_11
  %gep80 = add i32 %gep_int79,... can share an output register with another operation already assigned to main_signed_add_32_12
  %gep82 = add i32 %gep_int81,... can share an output register with another operation already assigned to main_signed_add_32_0
  %gep82 = add i32 %gep_int81,... can share an output register with another operation already assigned to main_signed_add_32_1
  %gep82 = add i32 %gep_int81,... can share an output register with another operation already assigned to main_signed_add_32_2
  %gep82 = add i32 %gep_int81,... can share an output register with another operation already assigned to main_signed_add_32_3
  %gep82 = add i32 %gep_int81,... can share an output register with another operation already assigned to main_signed_add_32_4
  %gep82 = add i32 %gep_int81,... can share an output register with another operation already assigned to main_signed_add_32_5
  %gep82 = add i32 %gep_int81,... can share an output register with another operation already assigned to main_signed_add_32_6
  %gep82 = add i32 %gep_int81,... can share an output register with another operation already assigned to main_signed_add_32_7
  %gep82 = add i32 %gep_int81,... can share an output register with another operation already assigned to main_signed_add_32_8
  %gep82 = add i32 %gep_int81,... can share an output register with another operation already assigned to main_signed_add_32_9
  %gep82 = add i32 %gep_int81,... can share an output register with another operation already assigned to main_signed_add_32_10
  %gep82 = add i32 %gep_int81,... can share an output register with another operation already assigned to main_signed_add_32_11
  %gep82 = add i32 %gep_int81,... can share an output register with another operation already assigned to main_signed_add_32_12
  %gep84 = add i32 %gep_int83,... can share an output register with another operation already assigned to main_signed_add_32_0
  %gep84 = add i32 %gep_int83,... can share an output register with another operation already assigned to main_signed_add_32_1
  %gep84 = add i32 %gep_int83,... can share an output register with another operation already assigned to main_signed_add_32_2
  %gep84 = add i32 %gep_int83,... can share an output register with another operation already assigned to main_signed_add_32_3
  %gep84 = add i32 %gep_int83,... can share an output register with another operation already assigned to main_signed_add_32_4
  %gep84 = add i32 %gep_int83,... can share an output register with another operation already assigned to main_signed_add_32_5
  %gep84 = add i32 %gep_int83,... can share an output register with another operation already assigned to main_signed_add_32_6
  %gep84 = add i32 %gep_int83,... can share an output register with another operation already assigned to main_signed_add_32_7
  %gep84 = add i32 %gep_int83,... can share an output register with another operation already assigned to main_signed_add_32_8
  %gep84 = add i32 %gep_int83,... can share an output register with another operation already assigned to main_signed_add_32_9
  %gep84 = add i32 %gep_int83,... can share an output register with another operation already assigned to main_signed_add_32_10
  %gep84 = add i32 %gep_int83,... can share an output register with another operation already assigned to main_signed_add_32_11
  %gep84 = add i32 %gep_int83,... can share an output register with another operation already assigned to main_signed_add_32_12
  %gep86 = add i32 %gep_int85,... can share an output register with another operation already assigned to main_signed_add_32_0
  %gep86 = add i32 %gep_int85,... can share an output register with another operation already assigned to main_signed_add_32_1
  %gep86 = add i32 %gep_int85,... can share an output register with another operation already assigned to main_signed_add_32_2
  %gep86 = add i32 %gep_int85,... can share an output register with another operation already assigned to main_signed_add_32_3
  %gep86 = add i32 %gep_int85,... can share an output register with another operation already assigned to main_signed_add_32_4
  %gep86 = add i32 %gep_int85,... can share an output register with another operation already assigned to main_signed_add_32_5
  %gep86 = add i32 %gep_int85,... can share an output register with another operation already assigned to main_signed_add_32_6
  %gep86 = add i32 %gep_int85,... can share an output register with another operation already assigned to main_signed_add_32_7
  %gep86 = add i32 %gep_int85,... can share an output register with another operation already assigned to main_signed_add_32_8
  %gep86 = add i32 %gep_int85,... can share an output register with another operation already assigned to main_signed_add_32_9
  %gep86 = add i32 %gep_int85,... can share an output register with another operation already assigned to main_signed_add_32_10
  %gep86 = add i32 %gep_int85,... can share an output register with another operation already assigned to main_signed_add_32_11
  %gep86 = add i32 %gep_int85,... can share an output register with another operation already assigned to main_signed_add_32_12
  %gep88 = add i32 %gep_int87,... can share an output register with another operation already assigned to main_signed_add_32_0
  %gep88 = add i32 %gep_int87,... can share an output register with another operation already assigned to main_signed_add_32_1
  %gep88 = add i32 %gep_int87,... can share an output register with another operation already assigned to main_signed_add_32_2
  %gep88 = add i32 %gep_int87,... can share an output register with another operation already assigned to main_signed_add_32_3
  %gep88 = add i32 %gep_int87,... can share an output register with another operation already assigned to main_signed_add_32_4
  %gep88 = add i32 %gep_int87,... can share an output register with another operation already assigned to main_signed_add_32_5
  %gep88 = add i32 %gep_int87,... can share an output register with another operation already assigned to main_signed_add_32_6
  %gep88 = add i32 %gep_int87,... can share an output register with another operation already assigned to main_signed_add_32_7
  %gep88 = add i32 %gep_int87,... can share an output register with another operation already assigned to main_signed_add_32_8
  %gep88 = add i32 %gep_int87,... can share an output register with another operation already assigned to main_signed_add_32_9
  %gep88 = add i32 %gep_int87,... can share an output register with another operation already assigned to main_signed_add_32_10
  %gep88 = add i32 %gep_int87,... can share an output register with another operation already assigned to main_signed_add_32_11
  %gep88 = add i32 %gep_int87,... can share an output register with another operation already assigned to main_signed_add_32_12
  %gep90 = add i32 %gep_int89,... can share an output register with another operation already assigned to main_signed_add_32_0
  %gep90 = add i32 %gep_int89,... can share an output register with another operation already assigned to main_signed_add_32_1
  %gep90 = add i32 %gep_int89,... can share an output register with another operation already assigned to main_signed_add_32_2
  %gep90 = add i32 %gep_int89,... can share an output register with another operation already assigned to main_signed_add_32_3
  %gep90 = add i32 %gep_int89,... can share an output register with another operation already assigned to main_signed_add_32_4
  %gep90 = add i32 %gep_int89,... can share an output register with another operation already assigned to main_signed_add_32_5
  %gep90 = add i32 %gep_int89,... can share an output register with another operation already assigned to main_signed_add_32_6
  %gep90 = add i32 %gep_int89,... can share an output register with another operation already assigned to main_signed_add_32_7
  %gep90 = add i32 %gep_int89,... can share an output register with another operation already assigned to main_signed_add_32_8
  %gep90 = add i32 %gep_int89,... can share an output register with another operation already assigned to main_signed_add_32_9
  %gep90 = add i32 %gep_int89,... can share an output register with another operation already assigned to main_signed_add_32_10
  %gep90 = add i32 %gep_int89,... can share an output register with another operation already assigned to main_signed_add_32_11
  %gep90 = add i32 %gep_int89,... can share an output register with another operation already assigned to main_signed_add_32_12
  %gep93 = add i32 %gep_int92,... can share an output register with another operation already assigned to main_signed_add_32_0
  %gep93 = add i32 %gep_int92,... can share an output register with another operation already assigned to main_signed_add_32_1
  %gep93 = add i32 %gep_int92,... can share an output register with another operation already assigned to main_signed_add_32_2
  %gep93 = add i32 %gep_int92,... can share an output register with another operation already assigned to main_signed_add_32_3
  %gep93 = add i32 %gep_int92,... can share an output register with another operation already assigned to main_signed_add_32_4
  %gep93 = add i32 %gep_int92,... can share an output register with another operation already assigned to main_signed_add_32_5
  %gep93 = add i32 %gep_int92,... can share an output register with another operation already assigned to main_signed_add_32_6
  %gep93 = add i32 %gep_int92,... can share an output register with another operation already assigned to main_signed_add_32_7
  %gep93 = add i32 %gep_int92,... can share an output register with another operation already assigned to main_signed_add_32_8
  %gep93 = add i32 %gep_int92,... can share an output register with another operation already assigned to main_signed_add_32_9
  %gep93 = add i32 %gep_int92,... can share an output register with another operation already assigned to main_signed_add_32_10
  %gep93 = add i32 %gep_int92,... can share an output register with another operation already assigned to main_signed_add_32_11
  %gep93 = add i32 %gep_int92,... can share an output register with another operation already assigned to main_signed_add_32_12
  %gep95 = add i32 %gep_int94,... can share an output register with another operation already assigned to main_signed_add_32_0
  %gep95 = add i32 %gep_int94,... can share an output register with another operation already assigned to main_signed_add_32_1
  %gep95 = add i32 %gep_int94,... can share an output register with another operation already assigned to main_signed_add_32_2
  %gep95 = add i32 %gep_int94,... can share an output register with another operation already assigned to main_signed_add_32_3
  %gep95 = add i32 %gep_int94,... can share an output register with another operation already assigned to main_signed_add_32_4
  %gep95 = add i32 %gep_int94,... can share an output register with another operation already assigned to main_signed_add_32_5
  %gep95 = add i32 %gep_int94,... can share an output register with another operation already assigned to main_signed_add_32_6
  %gep95 = add i32 %gep_int94,... can share an output register with another operation already assigned to main_signed_add_32_7
  %gep95 = add i32 %gep_int94,... can share an output register with another operation already assigned to main_signed_add_32_8
  %gep95 = add i32 %gep_int94,... can share an output register with another operation already assigned to main_signed_add_32_9
  %gep95 = add i32 %gep_int94,... can share an output register with another operation already assigned to main_signed_add_32_10
  %gep95 = add i32 %gep_int94,... can share an output register with another operation already assigned to main_signed_add_32_11
  %gep95 = add i32 %gep_int94,... can share an output register with another operation already assigned to main_signed_add_32_12
  %gep97 = add i32 %gep_int96,... can share an output register with another operation already assigned to main_signed_add_32_0
  %gep97 = add i32 %gep_int96,... can share an output register with another operation already assigned to main_signed_add_32_1
  %gep97 = add i32 %gep_int96,... can share an output register with another operation already assigned to main_signed_add_32_2
  %gep97 = add i32 %gep_int96,... can share an output register with another operation already assigned to main_signed_add_32_3
  %gep97 = add i32 %gep_int96,... can share an output register with another operation already assigned to main_signed_add_32_4
  %gep97 = add i32 %gep_int96,... can share an output register with another operation already assigned to main_signed_add_32_5
  %gep97 = add i32 %gep_int96,... can share an output register with another operation already assigned to main_signed_add_32_6
  %gep97 = add i32 %gep_int96,... can share an output register with another operation already assigned to main_signed_add_32_7
  %gep97 = add i32 %gep_int96,... can share an output register with another operation already assigned to main_signed_add_32_8
  %gep97 = add i32 %gep_int96,... can share an output register with another operation already assigned to main_signed_add_32_9
  %gep97 = add i32 %gep_int96,... can share an output register with another operation already assigned to main_signed_add_32_10
  %gep97 = add i32 %gep_int96,... can share an output register with another operation already assigned to main_signed_add_32_11
  %gep97 = add i32 %gep_int96,... can share an output register with another operation already assigned to main_signed_add_32_12
  %gep99 = add i32 %gep_int98,... can share an output register with another operation already assigned to main_signed_add_32_0
  %gep99 = add i32 %gep_int98,... can share an output register with another operation already assigned to main_signed_add_32_1
  %gep99 = add i32 %gep_int98,... can share an output register with another operation already assigned to main_signed_add_32_2
  %gep99 = add i32 %gep_int98,... can share an output register with another operation already assigned to main_signed_add_32_3
  %gep99 = add i32 %gep_int98,... can share an output register with another operation already assigned to main_signed_add_32_4
  %gep99 = add i32 %gep_int98,... can share an output register with another operation already assigned to main_signed_add_32_5
  %gep99 = add i32 %gep_int98,... can share an output register with another operation already assigned to main_signed_add_32_6
  %gep99 = add i32 %gep_int98,... can share an output register with another operation already assigned to main_signed_add_32_7
  %gep99 = add i32 %gep_int98,... can share an output register with another operation already assigned to main_signed_add_32_8
  %gep99 = add i32 %gep_int98,... can share an output register with another operation already assigned to main_signed_add_32_9
  %gep99 = add i32 %gep_int98,... can share an output register with another operation already assigned to main_signed_add_32_10
  %gep99 = add i32 %gep_int98,... can share an output register with another operation already assigned to main_signed_add_32_11
  %gep99 = add i32 %gep_int98,... can share an output register with another operation already assigned to main_signed_add_32_12
  %gep101 = add i32 %gep_int10... can share an output register with another operation already assigned to main_signed_add_32_0
  %gep101 = add i32 %gep_int10... can share an output register with another operation already assigned to main_signed_add_32_1
  %gep101 = add i32 %gep_int10... can share an output register with another operation already assigned to main_signed_add_32_2
  %gep101 = add i32 %gep_int10... can share an output register with another operation already assigned to main_signed_add_32_3
  %gep101 = add i32 %gep_int10... can share an output register with another operation already assigned to main_signed_add_32_4
  %gep101 = add i32 %gep_int10... can share an output register with another operation already assigned to main_signed_add_32_5
  %gep101 = add i32 %gep_int10... can share an output register with another operation already assigned to main_signed_add_32_6
  %gep101 = add i32 %gep_int10... can share an output register with another operation already assigned to main_signed_add_32_7
  %gep101 = add i32 %gep_int10... can share an output register with another operation already assigned to main_signed_add_32_8
  %gep101 = add i32 %gep_int10... can share an output register with another operation already assigned to main_signed_add_32_9
  %gep101 = add i32 %gep_int10... can share an output register with another operation already assigned to main_signed_add_32_10
  %gep101 = add i32 %gep_int10... can share an output register with another operation already assigned to main_signed_add_32_11
  %gep101 = add i32 %gep_int10... can share an output register with another operation already assigned to main_signed_add_32_12
  %gep103 = add i32 %gep_int10... can share an output register with another operation already assigned to main_signed_add_32_0
  %gep103 = add i32 %gep_int10... can share an output register with another operation already assigned to main_signed_add_32_1
  %gep103 = add i32 %gep_int10... can share an output register with another operation already assigned to main_signed_add_32_2
  %gep103 = add i32 %gep_int10... can share an output register with another operation already assigned to main_signed_add_32_3
  %gep103 = add i32 %gep_int10... can share an output register with another operation already assigned to main_signed_add_32_4
  %gep103 = add i32 %gep_int10... can share an output register with another operation already assigned to main_signed_add_32_5
  %gep103 = add i32 %gep_int10... can share an output register with another operation already assigned to main_signed_add_32_6
  %gep103 = add i32 %gep_int10... can share an output register with another operation already assigned to main_signed_add_32_7
  %gep103 = add i32 %gep_int10... can share an output register with another operation already assigned to main_signed_add_32_8
  %gep103 = add i32 %gep_int10... can share an output register with another operation already assigned to main_signed_add_32_9
  %gep103 = add i32 %gep_int10... can share an output register with another operation already assigned to main_signed_add_32_10
  %gep103 = add i32 %gep_int10... can share an output register with another operation already assigned to main_signed_add_32_11
  %gep103 = add i32 %gep_int10... can share an output register with another operation already assigned to main_signed_add_32_12
  %gep105 = add i32 %gep_int10... can share an output register with another operation already assigned to main_signed_add_32_0
  %gep105 = add i32 %gep_int10... can share an output register with another operation already assigned to main_signed_add_32_1
  %gep105 = add i32 %gep_int10... can share an output register with another operation already assigned to main_signed_add_32_2
  %gep105 = add i32 %gep_int10... can share an output register with another operation already assigned to main_signed_add_32_3
  %gep105 = add i32 %gep_int10... can share an output register with another operation already assigned to main_signed_add_32_4
  %gep105 = add i32 %gep_int10... can share an output register with another operation already assigned to main_signed_add_32_5
  %gep105 = add i32 %gep_int10... can share an output register with another operation already assigned to main_signed_add_32_6
  %gep105 = add i32 %gep_int10... can share an output register with another operation already assigned to main_signed_add_32_7
  %gep105 = add i32 %gep_int10... can share an output register with another operation already assigned to main_signed_add_32_8
  %gep105 = add i32 %gep_int10... can share an output register with another operation already assigned to main_signed_add_32_9
  %gep105 = add i32 %gep_int10... can share an output register with another operation already assigned to main_signed_add_32_10
  %gep105 = add i32 %gep_int10... can share an output register with another operation already assigned to main_signed_add_32_11
  %gep105 = add i32 %gep_int10... can share an output register with another operation already assigned to main_signed_add_32_12
  %gep107 = add i32 %gep_int10... can share an output register with another operation already assigned to main_signed_add_32_0
  %gep107 = add i32 %gep_int10... can share an output register with another operation already assigned to main_signed_add_32_1
  %gep107 = add i32 %gep_int10... can share an output register with another operation already assigned to main_signed_add_32_2
  %gep107 = add i32 %gep_int10... can share an output register with another operation already assigned to main_signed_add_32_3
  %gep107 = add i32 %gep_int10... can share an output register with another operation already assigned to main_signed_add_32_4
  %gep107 = add i32 %gep_int10... can share an output register with another operation already assigned to main_signed_add_32_5
  %gep107 = add i32 %gep_int10... can share an output register with another operation already assigned to main_signed_add_32_6
  %gep107 = add i32 %gep_int10... can share an output register with another operation already assigned to main_signed_add_32_7
  %gep107 = add i32 %gep_int10... can share an output register with another operation already assigned to main_signed_add_32_8
  %gep107 = add i32 %gep_int10... can share an output register with another operation already assigned to main_signed_add_32_9
  %gep107 = add i32 %gep_int10... can share an output register with another operation already assigned to main_signed_add_32_10
  %gep107 = add i32 %gep_int10... can share an output register with another operation already assigned to main_signed_add_32_11
  %gep107 = add i32 %gep_int10... can share an output register with another operation already assigned to main_signed_add_32_12
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         
  %gep78 = add i32 %gep_int77,... (idx: 0)        -635                          -195                          -64                           -14                           -14                           -14                           -24                           -45                           -44                           -54                           -54                           -54                           -94                           -4                            95                            
  %gep80 = add i32 %gep_int79,... (idx: 1)        -635                          -195                          -64                           -14                           -14                           -14                           -24                           -44                           -45                           -54                           -54                           -54                           -94                           -4                            95                            
  %gep82 = add i32 %gep_int81,... (idx: 2)        -635                          -194                          -65                           -14                           -14                           -14                           -24                           -44                           -44                           -55                           -54                           -54                           -94                           -4                            95                            
  %gep84 = add i32 %gep_int83,... (idx: 3)        -635                          -194                          -64                           -15                           -14                           -14                           -24                           -44                           -45                           -54                           -55                           -54                           -94                           -4                            95                            
  %gep86 = add i32 %gep_int85,... (idx: 4)        -635                          -194                          -64                           -14                           -15                           -14                           -24                           -44                           -44                           -54                           -54                           -55                           -94                           -4                            95                            
  %gep88 = add i32 %gep_int87,... (idx: 5)        -635                          -194                          -64                           -14                           -14                           -15                           -24                           -44                           -44                           -54                           -54                           -54                           -95                           -4                            95                            
  %gep90 = add i32 %gep_int89,... (idx: 6)        -635                          -194                          -64                           -14                           -14                           -14                           -25                           -44                           -44                           -54                           -54                           -54                           -94                           -4                            95                            
  %gep93 = add i32 %gep_int92,... (idx: 7)        -635                          -195                          -64                           -14                           -14                           -14                           -24                           -45                           -44                           -54                           -54                           -54                           -94                           -4                            95                            
  %gep95 = add i32 %gep_int94,... (idx: 8)        -635                          -195                          -64                           -14                           -14                           -14                           -24                           -44                           -45                           -54                           -54                           -54                           -94                           -4                            95                            
  %gep97 = add i32 %gep_int96,... (idx: 9)        -635                          -194                          -65                           -14                           -14                           -14                           -24                           -44                           -44                           -55                           -54                           -54                           -94                           -4                            95                            
  %gep99 = add i32 %gep_int98,... (idx: 10)       -635                          -194                          -64                           -15                           -14                           -14                           -24                           -44                           -45                           -54                           -55                           -54                           -94                           -4                            95                            
  %gep101 = add i32 %gep_int10... (idx: 11)       -635                          -194                          -64                           -14                           -15                           -14                           -24                           -44                           -44                           -54                           -54                           -55                           -94                           -4                            95                            
  %gep103 = add i32 %gep_int10... (idx: 12)       -635                          -194                          -64                           -14                           -14                           -15                           -24                           -44                           -44                           -54                           -54                           -54                           -95                           -4                            95                            
  %gep105 = add i32 %gep_int10... (idx: 13)       -635                          -194                          -64                           -14                           -14                           -14                           -25                           -44                           -44                           -54                           -54                           -54                           -94                           -4                            95                            
  %gep107 = add i32 %gep_int10... (idx: 14)       -635                          -194                          -64                           -14                           -14                           -14                           -24                           -44                           -44                           -54                           -54                           -54                           -94                           -4                            95                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         
  %gep78 = add i32 %gep_int77,... (idx: 0)        1                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             
  %gep80 = add i32 %gep_int79,... (idx: 1)        0                             1                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             
  %gep82 = add i32 %gep_int81,... (idx: 2)        0                             0                             1                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             
  %gep84 = add i32 %gep_int83,... (idx: 3)        0                             0                             0                             1                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             
  %gep86 = add i32 %gep_int85,... (idx: 4)        0                             0                             0                             0                             1                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             
  %gep88 = add i32 %gep_int87,... (idx: 5)        0                             0                             0                             0                             0                             1                             0                             0                             0                             0                             0                             0                             0                             0                             0                             
  %gep90 = add i32 %gep_int89,... (idx: 6)        0                             0                             0                             0                             0                             0                             1                             0                             0                             0                             0                             0                             0                             0                             0                             
  %gep93 = add i32 %gep_int92,... (idx: 7)        0                             0                             0                             0                             0                             0                             0                             1                             0                             0                             0                             0                             0                             0                             0                             
  %gep95 = add i32 %gep_int94,... (idx: 8)        0                             0                             0                             0                             0                             0                             0                             0                             1                             0                             0                             0                             0                             0                             0                             
  %gep97 = add i32 %gep_int96,... (idx: 9)        0                             0                             0                             0                             0                             0                             0                             0                             0                             1                             0                             0                             0                             0                             0                             
  %gep99 = add i32 %gep_int98,... (idx: 10)       0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             1                             0                             0                             0                             0                             
  %gep101 = add i32 %gep_int10... (idx: 11)       0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             1                             0                             0                             0                             
  %gep103 = add i32 %gep_int10... (idx: 12)       0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             1                             0                             0                             
  %gep105 = add i32 %gep_int10... (idx: 13)       0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             1                             0                             
  %gep107 = add i32 %gep_int10... (idx: 14)       0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %gep78 = add i32 %gep_int77,... (idx: 0) -> main_signed_add_32_0 (mux inputs: 65)
  %gep80 = add i32 %gep_int79,... (idx: 1) -> main_signed_add_32_1 (mux inputs: 21)
  %gep82 = add i32 %gep_int81,... (idx: 2) -> main_signed_add_32_2 (mux inputs: 8)
  %gep84 = add i32 %gep_int83,... (idx: 3) -> main_signed_add_32_3 (mux inputs: 3)
  %gep86 = add i32 %gep_int85,... (idx: 4) -> main_signed_add_32_4 (mux inputs: 3)
  %gep88 = add i32 %gep_int87,... (idx: 5) -> main_signed_add_32_5 (mux inputs: 3)
  %gep90 = add i32 %gep_int89,... (idx: 6) -> main_signed_add_32_6 (mux inputs: 4)
  %gep93 = add i32 %gep_int92,... (idx: 7) -> main_signed_add_32_7 (mux inputs: 6)
  %gep95 = add i32 %gep_int94,... (idx: 8) -> main_signed_add_32_8 (mux inputs: 6)
  %gep97 = add i32 %gep_int96,... (idx: 9) -> main_signed_add_32_9 (mux inputs: 7)
  %gep99 = add i32 %gep_int98,... (idx: 10) -> main_signed_add_32_10 (mux inputs: 7)
  %gep101 = add i32 %gep_int10... (idx: 11) -> main_signed_add_32_11 (mux inputs: 7)
  %gep103 = add i32 %gep_int10... (idx: 12) -> main_signed_add_32_12 (mux inputs: 11)
  %gep105 = add i32 %gep_int10... (idx: 13) -> main_signed_add_32_13 (mux inputs: 1)
  %gep107 = add i32 %gep_int10... (idx: 14) -> main_signed_add_32_14 (mux inputs: 1)
State: LEGUP_F_main_BB_gsm_normexiti
Binding functional unit type: main_0_Ki_local_mem_dual_port
Weight matrix for operation/function unit matching:
  store i16 %299, i16* %319, a... can share an output register with another operation already assigned to main_main_0_Ki_local_mem_dual_port_0
                                                  main_main_0_Ki_local_mem_dual_port_0
  store i16 %299, i16* %319, a... (idx: 0)        80                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_main_0_Ki_local_mem_dual_port_0
  store i16 %299, i16* %319, a... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i16 %299, i16* %319, a... (idx: 0) -> main_main_0_Ki_local_mem_dual_port_0 (mux inputs: 4)
State: LEGUP_F_main_BB_gsm_normexiti
Binding functional unit type: main_0_Ki_local_mem_dual_port
Weight matrix for operation/function unit matching:
  store i16 %302, i16* %320, a... can share an output register with another operation already assigned to main_main_0_Ki_local_mem_dual_port_0
                                                  main_main_0_Ki_local_mem_dual_port_0
  store i16 %302, i16* %320, a... (idx: 0)        60                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_main_0_Ki_local_mem_dual_port_0
  store i16 %302, i16* %320, a... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i16 %302, i16* %320, a... (idx: 0) -> main_main_0_Ki_local_mem_dual_port_0 (mux inputs: 6)
State: LEGUP_F_main_BB_gsm_normexiti
Binding functional unit type: main_0_Ki_local_mem_dual_port
Weight matrix for operation/function unit matching:
  store i16 %305, i16* %321, a... can share an output register with another operation already assigned to main_main_0_Ki_local_mem_dual_port_0
                                                  main_main_0_Ki_local_mem_dual_port_0
  store i16 %305, i16* %321, a... (idx: 0)        40                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_main_0_Ki_local_mem_dual_port_0
  store i16 %305, i16* %321, a... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i16 %305, i16* %321, a... (idx: 0) -> main_main_0_Ki_local_mem_dual_port_0 (mux inputs: 8)
State: LEGUP_F_main_BB_gsm_normexiti
Binding functional unit type: main_0_Ki_local_mem_dual_port
Weight matrix for operation/function unit matching:
  store i16 %308, i16* %322, a... can share an output register with another operation already assigned to main_main_0_Ki_local_mem_dual_port_0
                                                  main_main_0_Ki_local_mem_dual_port_0
  store i16 %308, i16* %322, a... (idx: 0)        20                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_main_0_Ki_local_mem_dual_port_0
  store i16 %308, i16* %322, a... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i16 %308, i16* %322, a... (idx: 0) -> main_main_0_Ki_local_mem_dual_port_0 (mux inputs: 10)
State: LEGUP_F_main_BB_gsm_normexiti
Binding functional unit type: main_0_Ki_local_mem_dual_port
Weight matrix for operation/function unit matching:
  store i16 %311, i16* %323, a... can share an output register with another operation already assigned to main_main_0_Ki_local_mem_dual_port_0
                                                  main_main_0_Ki_local_mem_dual_port_0
  store i16 %311, i16* %323, a... (idx: 0)        0                             
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_main_0_Ki_local_mem_dual_port_0
  store i16 %311, i16* %323, a... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i16 %311, i16* %323, a... (idx: 0) -> main_main_0_Ki_local_mem_dual_port_0 (mux inputs: 12)
State: LEGUP_F_main_BB_gsm_normexiti
Binding functional unit type: main_0_Ki_local_mem_dual_port
Weight matrix for operation/function unit matching:
  store i16 %314, i16* %324, a... can share an output register with another operation already assigned to main_main_0_Ki_local_mem_dual_port_0
                                                  main_main_0_Ki_local_mem_dual_port_0
  store i16 %314, i16* %324, a... (idx: 0)        -20                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_main_0_Ki_local_mem_dual_port_0
  store i16 %314, i16* %324, a... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i16 %314, i16* %324, a... (idx: 0) -> main_main_0_Ki_local_mem_dual_port_0 (mux inputs: 14)
State: LEGUP_F_main_BB_gsm_normexiti
Binding functional unit type: main_0_Pi_local_mem_dual_port
Weight matrix for operation/function unit matching:
                                                  main_main_0_Pi_local_mem_dual_port_0
  store i16 %293, i16* %325, a... (idx: 0)        90                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_main_0_Pi_local_mem_dual_port_0
  store i16 %293, i16* %325, a... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i16 %293, i16* %325, a... (idx: 0) -> main_main_0_Pi_local_mem_dual_port_0 (mux inputs: 2)
State: LEGUP_F_main_BB_gsm_normexiti
Binding functional unit type: main_0_Pi_local_mem_dual_port
Weight matrix for operation/function unit matching:
  store i16 %296, i16* %326, a... can share an output register with another operation already assigned to main_main_0_Pi_local_mem_dual_port_0
                                                  main_main_0_Pi_local_mem_dual_port_0
  store i16 %296, i16* %326, a... (idx: 0)        80                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_main_0_Pi_local_mem_dual_port_0
  store i16 %296, i16* %326, a... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i16 %296, i16* %326, a... (idx: 0) -> main_main_0_Pi_local_mem_dual_port_0 (mux inputs: 4)
State: LEGUP_F_main_BB_gsm_normexiti
Binding functional unit type: main_0_Pi_local_mem_dual_port
Weight matrix for operation/function unit matching:
  store i16 %299, i16* %327, a... can share an output register with another operation already assigned to main_main_0_Pi_local_mem_dual_port_0
                                                  main_main_0_Pi_local_mem_dual_port_0
  store i16 %299, i16* %327, a... (idx: 0)        60                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_main_0_Pi_local_mem_dual_port_0
  store i16 %299, i16* %327, a... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i16 %299, i16* %327, a... (idx: 0) -> main_main_0_Pi_local_mem_dual_port_0 (mux inputs: 6)
State: LEGUP_F_main_BB_gsm_normexiti
Binding functional unit type: main_0_Pi_local_mem_dual_port
Weight matrix for operation/function unit matching:
  store i16 %302, i16* %328, a... can share an output register with another operation already assigned to main_main_0_Pi_local_mem_dual_port_0
                                                  main_main_0_Pi_local_mem_dual_port_0
  store i16 %302, i16* %328, a... (idx: 0)        40                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_main_0_Pi_local_mem_dual_port_0
  store i16 %302, i16* %328, a... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i16 %302, i16* %328, a... (idx: 0) -> main_main_0_Pi_local_mem_dual_port_0 (mux inputs: 8)
State: LEGUP_F_main_BB_gsm_normexiti
Binding functional unit type: main_0_Pi_local_mem_dual_port
Weight matrix for operation/function unit matching:
  store i16 %305, i16* %329, a... can share an output register with another operation already assigned to main_main_0_Pi_local_mem_dual_port_0
                                                  main_main_0_Pi_local_mem_dual_port_0
  store i16 %305, i16* %329, a... (idx: 0)        20                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_main_0_Pi_local_mem_dual_port_0
  store i16 %305, i16* %329, a... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i16 %305, i16* %329, a... (idx: 0) -> main_main_0_Pi_local_mem_dual_port_0 (mux inputs: 10)
State: LEGUP_F_main_BB_gsm_normexiti
Binding functional unit type: main_0_Pi_local_mem_dual_port
Weight matrix for operation/function unit matching:
  store i16 %308, i16* %330, a... can share an output register with another operation already assigned to main_main_0_Pi_local_mem_dual_port_0
                                                  main_main_0_Pi_local_mem_dual_port_0
  store i16 %308, i16* %330, a... (idx: 0)        0                             
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_main_0_Pi_local_mem_dual_port_0
  store i16 %308, i16* %330, a... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i16 %308, i16* %330, a... (idx: 0) -> main_main_0_Pi_local_mem_dual_port_0 (mux inputs: 12)
State: LEGUP_F_main_BB_gsm_normexiti
Binding functional unit type: main_0_Pi_local_mem_dual_port
Weight matrix for operation/function unit matching:
  store i16 %311, i16* %331, a... can share an output register with another operation already assigned to main_main_0_Pi_local_mem_dual_port_0
                                                  main_main_0_Pi_local_mem_dual_port_0
  store i16 %311, i16* %331, a... (idx: 0)        -20                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_main_0_Pi_local_mem_dual_port_0
  store i16 %311, i16* %331, a... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i16 %311, i16* %331, a... (idx: 0) -> main_main_0_Pi_local_mem_dual_port_0 (mux inputs: 14)
State: LEGUP_F_main_BB_gsm_normexiti
Binding functional unit type: main_0_Pi_local_mem_dual_port
Weight matrix for operation/function unit matching:
  store i16 %314, i16* %332, a... can share an output register with another operation already assigned to main_main_0_Pi_local_mem_dual_port_0
                                                  main_main_0_Pi_local_mem_dual_port_0
  store i16 %314, i16* %332, a... (idx: 0)        -40                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_main_0_Pi_local_mem_dual_port_0
  store i16 %314, i16* %332, a... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i16 %314, i16* %332, a... (idx: 0) -> main_main_0_Pi_local_mem_dual_port_0 (mux inputs: 16)
State: LEGUP_F_main_BB_gsm_normexiti
Binding functional unit type: main_0_Pi_local_mem_dual_port
Weight matrix for operation/function unit matching:
  store i16 %317, i16* %333, a... can share an output register with another operation already assigned to main_main_0_Pi_local_mem_dual_port_0
                                                  main_main_0_Pi_local_mem_dual_port_0
  store i16 %317, i16* %333, a... (idx: 0)        -60                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_main_0_Pi_local_mem_dual_port_0
  store i16 %317, i16* %333, a... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i16 %317, i16* %333, a... (idx: 0) -> main_main_0_Pi_local_mem_dual_port_0 (mux inputs: 18)
State: LEGUP_F_main_BB__337
Binding functional unit type: signed_subtract_16
Weight matrix for operation/function unit matching:
  %339 = sub i16 0, %335 can share an output register with another operation already assigned to main_signed_subtract_16_0
                                                  main_signed_subtract_16_0     
  %339 = sub i16 0, %335 (idx: 0)                 95                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_subtract_16_0     
  %339 = sub i16 0, %335 (idx: 0)                 1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %339 = sub i16 0, %335 (idx: 0) -> main_signed_subtract_16_0 (mux inputs: 2)
State: LEGUP_F_main_BB_gsm_absexiti9
Binding functional unit type: main_0_Pi_local_mem_dual_port
Weight matrix for operation/function unit matching:
  %341 = load i16* %325, align... hey can share an input with another operation already assigned to main_main_0_Pi_local_mem_dual_port_0
  %341 = load i16* %325, align... can share an output register with another operation already assigned to main_main_0_Pi_local_mem_dual_port_0
                                                  main_main_0_Pi_local_mem_dual_port_0
  %341 = load i16* %325, align... (idx: 0)        -70                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_main_0_Pi_local_mem_dual_port_0
  %341 = load i16* %325, align... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %341 = load i16* %325, align... (idx: 0) -> main_main_0_Pi_local_mem_dual_port_0 (mux inputs: 18)
State: LEGUP_F_main_BB_lrphi
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
                                                  main_mem_dual_port_0          
  store i16 0, i16* %.224.i, a... (idx: 0)        -5                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          
  store i16 0, i16* %.224.i, a... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i16 0, i16* %.224.i, a... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 1)
State: LEGUP_F_main_BB_lrphi
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %gep109 = add i32 %gep_int10... can share an output register with another operation already assigned to main_signed_add_32_0
  %gep109 = add i32 %gep_int10... can share an output register with another operation already assigned to main_signed_add_32_1
  %gep109 = add i32 %gep_int10... can share an output register with another operation already assigned to main_signed_add_32_2
  %gep109 = add i32 %gep_int10... can share an output register with another operation already assigned to main_signed_add_32_3
  %gep109 = add i32 %gep_int10... can share an output register with another operation already assigned to main_signed_add_32_4
  %gep109 = add i32 %gep_int10... can share an output register with another operation already assigned to main_signed_add_32_5
  %gep109 = add i32 %gep_int10... can share an output register with another operation already assigned to main_signed_add_32_6
  %gep109 = add i32 %gep_int10... can share an output register with another operation already assigned to main_signed_add_32_7
  %gep109 = add i32 %gep_int10... can share an output register with another operation already assigned to main_signed_add_32_8
  %gep109 = add i32 %gep_int10... can share an output register with another operation already assigned to main_signed_add_32_9
  %gep109 = add i32 %gep_int10... can share an output register with another operation already assigned to main_signed_add_32_10
  %gep109 = add i32 %gep_int10... can share an output register with another operation already assigned to main_signed_add_32_11
  %gep109 = add i32 %gep_int10... can share an output register with another operation already assigned to main_signed_add_32_12
  %gep109 = add i32 %gep_int10... can share an output register with another operation already assigned to main_signed_add_32_13
  %gep109 = add i32 %gep_int10... can share an output register with another operation already assigned to main_signed_add_32_14
  %345 = add nsw i32 %i.425.i,... can share an output register with another operation already assigned to main_signed_add_32_0
  %345 = add nsw i32 %i.425.i,... can share an output register with another operation already assigned to main_signed_add_32_1
  %345 = add nsw i32 %i.425.i,... can share an output register with another operation already assigned to main_signed_add_32_2
  %345 = add nsw i32 %i.425.i,... can share an output register with another operation already assigned to main_signed_add_32_3
  %345 = add nsw i32 %i.425.i,... can share an output register with another operation already assigned to main_signed_add_32_4
  %345 = add nsw i32 %i.425.i,... can share an output register with another operation already assigned to main_signed_add_32_5
  %345 = add nsw i32 %i.425.i,... can share an output register with another operation already assigned to main_signed_add_32_6
  %345 = add nsw i32 %i.425.i,... can share an output register with another operation already assigned to main_signed_add_32_7
  %345 = add nsw i32 %i.425.i,... can share an output register with another operation already assigned to main_signed_add_32_8
  %345 = add nsw i32 %i.425.i,... can share an output register with another operation already assigned to main_signed_add_32_9
  %345 = add nsw i32 %i.425.i,... can share an output register with another operation already assigned to main_signed_add_32_10
  %345 = add nsw i32 %i.425.i,... can share an output register with another operation already assigned to main_signed_add_32_11
  %345 = add nsw i32 %i.425.i,... can share an output register with another operation already assigned to main_signed_add_32_12
  %345 = add nsw i32 %i.425.i,... can share an output register with another operation already assigned to main_signed_add_32_13
  %345 = add nsw i32 %i.425.i,... can share an output register with another operation already assigned to main_signed_add_32_14
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         
  %gep109 = add i32 %gep_int10... (idx: 0)        -645                          -205                          -74                           -24                           -24                           -24                           -34                           -55                           -54                           -64                           -64                           -64                           -104                          -4                            95                            
  %345 = add nsw i32 %i.425.i,... (idx: 1)        -645                          -205                          -73                           -23                           -23                           -23                           -33                           -53                           -55                           -63                           -63                           -63                           -101                          -3                            95                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         
  %gep109 = add i32 %gep_int10... (idx: 0)        1                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             
  %345 = add nsw i32 %i.425.i,... (idx: 1)        0                             1                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %gep109 = add i32 %gep_int10... (idx: 0) -> main_signed_add_32_0 (mux inputs: 66)
  %345 = add nsw i32 %i.425.i,... (idx: 1) -> main_signed_add_32_1 (mux inputs: 22)
State: LEGUP_F_main_BB_preheaderii
Binding functional unit type: signed_subtract_32
Weight matrix for operation/function unit matching:
  %..i1.i = sub nsw i32 %350, ... can share an output register with another operation already assigned to main_signed_subtract_32_0
                                                  main_signed_subtract_32_0     
  %..i1.i = sub nsw i32 %350, ... (idx: 0)        -10                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_subtract_32_0     
  %..i1.i = sub nsw i32 %350, ... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %..i1.i = sub nsw i32 %350, ... (idx: 0) -> main_signed_subtract_32_0 (mux inputs: 3)
State: LEGUP_F_main_BB__355
Binding functional unit type: signed_subtract_32
Weight matrix for operation/function unit matching:
  %356 = sub nsw i32 %353, %34... can share an output register with another operation already assigned to main_signed_subtract_32_0
                                                  main_signed_subtract_32_0     
  %356 = sub nsw i32 %353, %34... (idx: 0)        -30                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_subtract_32_0     
  %356 = sub nsw i32 %353, %34... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %356 = sub nsw i32 %353, %34... (idx: 0) -> main_signed_subtract_32_0 (mux inputs: 5)
State: LEGUP_F_main_BB__361
Binding functional unit type: signed_subtract_32
Weight matrix for operation/function unit matching:
  %362 = sub nsw i32 %359, %34... hey can share an input with another operation already assigned to main_signed_subtract_32_0
  %362 = sub nsw i32 %359, %34... can share an output register with another operation already assigned to main_signed_subtract_32_0
                                                  main_signed_subtract_32_0     
  %362 = sub nsw i32 %359, %34... (idx: 0)        -45                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_subtract_32_0     
  %362 = sub nsw i32 %359, %34... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %362 = sub nsw i32 %359, %34... (idx: 0) -> main_signed_subtract_32_0 (mux inputs: 6)
State: LEGUP_F_main_BB__367
Binding functional unit type: signed_subtract_32
Weight matrix for operation/function unit matching:
  %368 = sub nsw i32 %365, %34... hey can share an input with another operation already assigned to main_signed_subtract_32_0
  %368 = sub nsw i32 %365, %34... can share an output register with another operation already assigned to main_signed_subtract_32_0
                                                  main_signed_subtract_32_0     
  %368 = sub nsw i32 %365, %34... (idx: 0)        -55                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_subtract_32_0     
  %368 = sub nsw i32 %365, %34... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %368 = sub nsw i32 %365, %34... (idx: 0) -> main_signed_subtract_32_0 (mux inputs: 7)
State: LEGUP_F_main_BB__373
Binding functional unit type: signed_subtract_32
Weight matrix for operation/function unit matching:
  %374 = sub nsw i32 %371, %34... hey can share an input with another operation already assigned to main_signed_subtract_32_0
  %374 = sub nsw i32 %371, %34... can share an output register with another operation already assigned to main_signed_subtract_32_0
                                                  main_signed_subtract_32_0     
  %374 = sub nsw i32 %371, %34... (idx: 0)        -65                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_subtract_32_0     
  %374 = sub nsw i32 %371, %34... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %374 = sub nsw i32 %371, %34... (idx: 0) -> main_signed_subtract_32_0 (mux inputs: 8)
State: LEGUP_F_main_BB__379
Binding functional unit type: signed_subtract_32
Weight matrix for operation/function unit matching:
  %380 = sub nsw i32 %377, %34... hey can share an input with another operation already assigned to main_signed_subtract_32_0
  %380 = sub nsw i32 %377, %34... can share an output register with another operation already assigned to main_signed_subtract_32_0
                                                  main_signed_subtract_32_0     
  %380 = sub nsw i32 %377, %34... (idx: 0)        -75                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_subtract_32_0     
  %380 = sub nsw i32 %377, %34... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %380 = sub nsw i32 %377, %34... (idx: 0) -> main_signed_subtract_32_0 (mux inputs: 9)
State: LEGUP_F_main_BB__385
Binding functional unit type: signed_subtract_32
Weight matrix for operation/function unit matching:
  %386 = sub nsw i32 %383, %34... hey can share an input with another operation already assigned to main_signed_subtract_32_0
  %386 = sub nsw i32 %383, %34... can share an output register with another operation already assigned to main_signed_subtract_32_0
                                                  main_signed_subtract_32_0     
  %386 = sub nsw i32 %383, %34... (idx: 0)        -85                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_subtract_32_0     
  %386 = sub nsw i32 %383, %34... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %386 = sub nsw i32 %383, %34... (idx: 0) -> main_signed_subtract_32_0 (mux inputs: 10)
State: LEGUP_F_main_BB__391
Binding functional unit type: signed_subtract_32
Weight matrix for operation/function unit matching:
  %392 = sub nsw i32 %389, %34... hey can share an input with another operation already assigned to main_signed_subtract_32_0
  %392 = sub nsw i32 %389, %34... can share an output register with another operation already assigned to main_signed_subtract_32_0
                                                  main_signed_subtract_32_0     
  %392 = sub nsw i32 %389, %34... (idx: 0)        -95                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_subtract_32_0     
  %392 = sub nsw i32 %389, %34... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %392 = sub nsw i32 %389, %34... (idx: 0) -> main_signed_subtract_32_0 (mux inputs: 11)
State: LEGUP_F_main_BB__397
Binding functional unit type: signed_subtract_32
Weight matrix for operation/function unit matching:
  %398 = sub nsw i32 %395, %34... hey can share an input with another operation already assigned to main_signed_subtract_32_0
  %398 = sub nsw i32 %395, %34... can share an output register with another operation already assigned to main_signed_subtract_32_0
                                                  main_signed_subtract_32_0     
  %398 = sub nsw i32 %395, %34... (idx: 0)        -105                          
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_subtract_32_0     
  %398 = sub nsw i32 %395, %34... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %398 = sub nsw i32 %395, %34... (idx: 0) -> main_signed_subtract_32_0 (mux inputs: 12)
State: LEGUP_F_main_BB__403
Binding functional unit type: signed_subtract_32
Weight matrix for operation/function unit matching:
  %404 = sub nsw i32 %401, %34... hey can share an input with another operation already assigned to main_signed_subtract_32_0
  %404 = sub nsw i32 %401, %34... can share an output register with another operation already assigned to main_signed_subtract_32_0
                                                  main_signed_subtract_32_0     
  %404 = sub nsw i32 %401, %34... (idx: 0)        -115                          
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_subtract_32_0     
  %404 = sub nsw i32 %401, %34... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %404 = sub nsw i32 %401, %34... (idx: 0) -> main_signed_subtract_32_0 (mux inputs: 13)
State: LEGUP_F_main_BB__409
Binding functional unit type: signed_subtract_32
Weight matrix for operation/function unit matching:
  %410 = sub nsw i32 %407, %34... hey can share an input with another operation already assigned to main_signed_subtract_32_0
  %410 = sub nsw i32 %407, %34... can share an output register with another operation already assigned to main_signed_subtract_32_0
                                                  main_signed_subtract_32_0     
  %410 = sub nsw i32 %407, %34... (idx: 0)        -125                          
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_subtract_32_0     
  %410 = sub nsw i32 %407, %34... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %410 = sub nsw i32 %407, %34... (idx: 0) -> main_signed_subtract_32_0 (mux inputs: 14)
State: LEGUP_F_main_BB__415
Binding functional unit type: signed_subtract_32
Weight matrix for operation/function unit matching:
  %416 = sub nsw i32 %413, %34... hey can share an input with another operation already assigned to main_signed_subtract_32_0
  %416 = sub nsw i32 %413, %34... can share an output register with another operation already assigned to main_signed_subtract_32_0
                                                  main_signed_subtract_32_0     
  %416 = sub nsw i32 %413, %34... (idx: 0)        -135                          
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_subtract_32_0     
  %416 = sub nsw i32 %413, %34... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %416 = sub nsw i32 %413, %34... (idx: 0) -> main_signed_subtract_32_0 (mux inputs: 15)
State: LEGUP_F_main_BB__421
Binding functional unit type: signed_subtract_32
Weight matrix for operation/function unit matching:
  %422 = sub nsw i32 %419, %34... hey can share an input with another operation already assigned to main_signed_subtract_32_0
  %422 = sub nsw i32 %419, %34... can share an output register with another operation already assigned to main_signed_subtract_32_0
                                                  main_signed_subtract_32_0     
  %422 = sub nsw i32 %419, %34... (idx: 0)        -145                          
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_subtract_32_0     
  %422 = sub nsw i32 %419, %34... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %422 = sub nsw i32 %419, %34... (idx: 0) -> main_signed_subtract_32_0 (mux inputs: 16)
State: LEGUP_F_main_BB__427
Binding functional unit type: signed_subtract_32
Weight matrix for operation/function unit matching:
  %428 = sub nsw i32 %425, %34... hey can share an input with another operation already assigned to main_signed_subtract_32_0
  %428 = sub nsw i32 %425, %34... can share an output register with another operation already assigned to main_signed_subtract_32_0
                                                  main_signed_subtract_32_0     
  %428 = sub nsw i32 %425, %34... (idx: 0)        -155                          
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_subtract_32_0     
  %428 = sub nsw i32 %425, %34... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %428 = sub nsw i32 %425, %34... (idx: 0) -> main_signed_subtract_32_0 (mux inputs: 17)
State: LEGUP_F_main_BB_gsm_divexiti
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  store i16 %433, i16* %.128.i... can share an output register with another operation already assigned to main_mem_dual_port_0
                                                  main_mem_dual_port_0          
  store i16 %433, i16* %.128.i... (idx: 0)        -10                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          
  store i16 %433, i16* %.128.i... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i16 %433, i16* %.128.i... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 3)
State: LEGUP_F_main_BB_gsm_divexiti
Binding functional unit type: main_0_Pi_local_mem_dual_port
Weight matrix for operation/function unit matching:
  %434 = load i16* %326, align... hey can share an input with another operation already assigned to main_main_0_Pi_local_mem_dual_port_0
  %434 = load i16* %326, align... can share an output register with another operation already assigned to main_main_0_Pi_local_mem_dual_port_0
                                                  main_main_0_Pi_local_mem_dual_port_0
  %434 = load i16* %326, align... (idx: 0)        -70                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_main_0_Pi_local_mem_dual_port_0
  %434 = load i16* %326, align... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %434 = load i16* %326, align... (idx: 0) -> main_main_0_Pi_local_mem_dual_port_0 (mux inputs: 18)
State: LEGUP_F_main_BB__436
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  store i16 %437, i16* %.128.i... hey can share an input with another operation already assigned to main_mem_dual_port_0
  store i16 %437, i16* %.128.i... can share an output register with another operation already assigned to main_mem_dual_port_0
                                                  main_mem_dual_port_0          
  store i16 %437, i16* %.128.i... (idx: 0)        -25                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          
  store i16 %437, i16* %.128.i... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i16 %437, i16* %.128.i... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 4)
State: LEGUP_F_main_BB__436
Binding functional unit type: signed_subtract_16
Weight matrix for operation/function unit matching:
  %437 = sub i16 0, %433 can share an output register with another operation already assigned to main_signed_subtract_16_0
                                                  main_signed_subtract_16_0     
  %437 = sub i16 0, %433 (idx: 0)                 85                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_subtract_16_0     
  %437 = sub i16 0, %433 (idx: 0)                 1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %437 = sub i16 0, %433 (idx: 0) -> main_signed_subtract_16_0 (mux inputs: 3)
State: LEGUP_F_main_BB__441
Binding functional unit type: main_0_Pi_local_mem_dual_port
Weight matrix for operation/function unit matching:
  %442 = load i16* %326, align... hey can share an input with another operation already assigned to main_main_0_Pi_local_mem_dual_port_0
  %442 = load i16* %326, align... can share an output register with another operation already assigned to main_main_0_Pi_local_mem_dual_port_0
                                                  main_main_0_Pi_local_mem_dual_port_0
  %442 = load i16* %326, align... (idx: 0)        -70                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_main_0_Pi_local_mem_dual_port_0
  %442 = load i16* %326, align... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %442 = load i16* %326, align... (idx: 0) -> main_main_0_Pi_local_mem_dual_port_0 (mux inputs: 18)
State: LEGUP_F_main_BB__445
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %449 = add nsw i32 %447, 163... can share an output register with another operation already assigned to main_signed_add_32_0
  %449 = add nsw i32 %447, 163... can share an output register with another operation already assigned to main_signed_add_32_1
  %449 = add nsw i32 %447, 163... can share an output register with another operation already assigned to main_signed_add_32_2
  %449 = add nsw i32 %447, 163... can share an output register with another operation already assigned to main_signed_add_32_3
  %449 = add nsw i32 %447, 163... can share an output register with another operation already assigned to main_signed_add_32_4
  %449 = add nsw i32 %447, 163... can share an output register with another operation already assigned to main_signed_add_32_5
  %449 = add nsw i32 %447, 163... can share an output register with another operation already assigned to main_signed_add_32_6
  %449 = add nsw i32 %447, 163... can share an output register with another operation already assigned to main_signed_add_32_7
  %449 = add nsw i32 %447, 163... can share an output register with another operation already assigned to main_signed_add_32_8
  %449 = add nsw i32 %447, 163... can share an output register with another operation already assigned to main_signed_add_32_9
  %449 = add nsw i32 %447, 163... can share an output register with another operation already assigned to main_signed_add_32_10
  %449 = add nsw i32 %447, 163... can share an output register with another operation already assigned to main_signed_add_32_11
  %449 = add nsw i32 %447, 163... can share an output register with another operation already assigned to main_signed_add_32_12
  %449 = add nsw i32 %447, 163... can share an output register with another operation already assigned to main_signed_add_32_13
  %449 = add nsw i32 %447, 163... can share an output register with another operation already assigned to main_signed_add_32_14
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         
  %449 = add nsw i32 %447, 163... (idx: 0)        -655                          -214                          -74                           -24                           -24                           -24                           -34                           -54                           -54                           -64                           -64                           -64                           -104                          -4                            95                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         
  %449 = add nsw i32 %447, 163... (idx: 0)        1                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %449 = add nsw i32 %447, 163... (idx: 0) -> main_signed_add_32_0 (mux inputs: 67)
State: LEGUP_F_main_BB__445
Binding functional unit type: signed_multiply_32
Weight matrix for operation/function unit matching:
  %448 = mul nsw i32 %446, %44... can share an output register with another operation already assigned to main_signed_multiply_32_0
  %448 = mul nsw i32 %446, %44... can share an output register with another operation already assigned to main_signed_multiply_32_1
  %448 = mul nsw i32 %446, %44... can share an output register with another operation already assigned to main_signed_multiply_32_2
  %448 = mul nsw i32 %446, %44... can share an output register with another operation already assigned to main_signed_multiply_32_3
  %448 = mul nsw i32 %446, %44... can share an output register with another operation already assigned to main_signed_multiply_32_4
  %448 = mul nsw i32 %446, %44... can share an output register with another operation already assigned to main_signed_multiply_32_5
  %448 = mul nsw i32 %446, %44... can share an output register with another operation already assigned to main_signed_multiply_32_6
  %448 = mul nsw i32 %446, %44... can share an output register with another operation already assigned to main_signed_multiply_32_7
  %448 = mul nsw i32 %446, %44... can share an output register with another operation already assigned to main_signed_multiply_32_8
  %448 = mul nsw i32 %446, %44... can share an output register with another operation already assigned to main_signed_multiply_32_9
  %448 = mul nsw i32 %446, %44... can share an output register with another operation already assigned to main_signed_multiply_32_10
  %448 = mul nsw i32 %446, %44... can share an output register with another operation already assigned to main_signed_multiply_32_11
  %448 = mul nsw i32 %446, %44... can share an output register with another operation already assigned to main_signed_multiply_32_12
  %448 = mul nsw i32 %446, %44... can share an output register with another operation already assigned to main_signed_multiply_32_13
  %448 = mul nsw i32 %446, %44... can share an output register with another operation already assigned to main_signed_multiply_32_14
                                                  main_signed_multiply_32_0     main_signed_multiply_32_1     main_signed_multiply_32_2     main_signed_multiply_32_3     main_signed_multiply_32_4     main_signed_multiply_32_5     main_signed_multiply_32_6     main_signed_multiply_32_7     main_signed_multiply_32_8     main_signed_multiply_32_9     main_signed_multiply_32_10    main_signed_multiply_32_11    main_signed_multiply_32_12    main_signed_multiply_32_13    main_signed_multiply_32_14    
  %448 = mul nsw i32 %446, %44... (idx: 0)        -130                          -20                           -20                           -20                           -20                           -40                           -40                           -30                           -30                           -80                           -60                           -60                           -50                           -50                           -110                          
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_multiply_32_0     main_signed_multiply_32_1     main_signed_multiply_32_2     main_signed_multiply_32_3     main_signed_multiply_32_4     main_signed_multiply_32_5     main_signed_multiply_32_6     main_signed_multiply_32_7     main_signed_multiply_32_8     main_signed_multiply_32_9     main_signed_multiply_32_10    main_signed_multiply_32_11    main_signed_multiply_32_12    main_signed_multiply_32_13    main_signed_multiply_32_14    
  %448 = mul nsw i32 %446, %44... (idx: 0)        1                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %448 = mul nsw i32 %446, %44... (idx: 0) -> main_signed_multiply_32_0 (mux inputs: 15)
State: LEGUP_F_main_BB__445
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %450 = add i32 %449, %448 can share an output register with another operation already assigned to main_signed_add_32_0
  %450 = add i32 %449, %448 can share an output register with another operation already assigned to main_signed_add_32_1
  %450 = add i32 %449, %448 can share an output register with another operation already assigned to main_signed_add_32_2
  %450 = add i32 %449, %448 can share an output register with another operation already assigned to main_signed_add_32_3
  %450 = add i32 %449, %448 can share an output register with another operation already assigned to main_signed_add_32_4
  %450 = add i32 %449, %448 can share an output register with another operation already assigned to main_signed_add_32_5
  %450 = add i32 %449, %448 can share an output register with another operation already assigned to main_signed_add_32_6
  %450 = add i32 %449, %448 can share an output register with another operation already assigned to main_signed_add_32_7
  %450 = add i32 %449, %448 can share an output register with another operation already assigned to main_signed_add_32_8
  %450 = add i32 %449, %448 can share an output register with another operation already assigned to main_signed_add_32_9
  %450 = add i32 %449, %448 can share an output register with another operation already assigned to main_signed_add_32_10
  %450 = add i32 %449, %448 can share an output register with another operation already assigned to main_signed_add_32_11
  %450 = add i32 %449, %448 can share an output register with another operation already assigned to main_signed_add_32_12
  %450 = add i32 %449, %448 can share an output register with another operation already assigned to main_signed_add_32_13
  %450 = add i32 %449, %448 can share an output register with another operation already assigned to main_signed_add_32_14
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         
  %450 = add i32 %449, %448 (idx: 0)              -670                          -220                          -80                           -30                           -30                           -30                           -40                           -60                           -60                           -70                           -70                           -70                           -109                          -9                            90                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         
  %450 = add i32 %449, %448 (idx: 0)              1                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %450 = add i32 %449, %448 (idx: 0) -> main_signed_add_32_0 (mux inputs: 69)
State: LEGUP_F_main_BB_gsm_mult_rexit11i
Binding functional unit type: main_0_Pi_local_mem_dual_port
Weight matrix for operation/function unit matching:
  %452 = load i16* %325, align... hey can share an input with another operation already assigned to main_main_0_Pi_local_mem_dual_port_0
  %452 = load i16* %325, align... can share an output register with another operation already assigned to main_main_0_Pi_local_mem_dual_port_0
                                                  main_main_0_Pi_local_mem_dual_port_0
  %452 = load i16* %325, align... (idx: 0)        -70                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_main_0_Pi_local_mem_dual_port_0
  %452 = load i16* %325, align... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %452 = load i16* %325, align... (idx: 0) -> main_main_0_Pi_local_mem_dual_port_0 (mux inputs: 18)
State: LEGUP_F_main_BB_gsm_mult_rexit11i
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %454 = add nsw i32 %453, %.0... can share an output register with another operation already assigned to main_signed_add_32_0
  %454 = add nsw i32 %453, %.0... can share an output register with another operation already assigned to main_signed_add_32_1
  %454 = add nsw i32 %453, %.0... can share an output register with another operation already assigned to main_signed_add_32_2
  %454 = add nsw i32 %453, %.0... can share an output register with another operation already assigned to main_signed_add_32_3
  %454 = add nsw i32 %453, %.0... can share an output register with another operation already assigned to main_signed_add_32_4
  %454 = add nsw i32 %453, %.0... can share an output register with another operation already assigned to main_signed_add_32_5
  %454 = add nsw i32 %453, %.0... can share an output register with another operation already assigned to main_signed_add_32_6
  %454 = add nsw i32 %453, %.0... can share an output register with another operation already assigned to main_signed_add_32_7
  %454 = add nsw i32 %453, %.0... can share an output register with another operation already assigned to main_signed_add_32_8
  %454 = add nsw i32 %453, %.0... can share an output register with another operation already assigned to main_signed_add_32_9
  %454 = add nsw i32 %453, %.0... can share an output register with another operation already assigned to main_signed_add_32_10
  %454 = add nsw i32 %453, %.0... can share an output register with another operation already assigned to main_signed_add_32_11
  %454 = add nsw i32 %453, %.0... can share an output register with another operation already assigned to main_signed_add_32_12
  %454 = add nsw i32 %453, %.0... can share an output register with another operation already assigned to main_signed_add_32_13
  %454 = add nsw i32 %453, %.0... can share an output register with another operation already assigned to main_signed_add_32_14
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         
  %454 = add nsw i32 %453, %.0... (idx: 0)        -690                          -219                          -79                           -29                           -29                           -29                           -39                           -59                           -59                           -69                           -69                           -69                           -109                          -9                            90                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         
  %454 = add nsw i32 %453, %.0... (idx: 0)        1                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %454 = add nsw i32 %453, %.0... (idx: 0) -> main_signed_add_32_0 (mux inputs: 71)
State: LEGUP_F_main_BB_gsm_addexit8i
Binding functional unit type: main_0_Pi_local_mem_dual_port
Weight matrix for operation/function unit matching:
  store i16 %459, i16* %325, a... hey can share an input with another operation already assigned to main_main_0_Pi_local_mem_dual_port_0
  store i16 %459, i16* %325, a... can share an output register with another operation already assigned to main_main_0_Pi_local_mem_dual_port_0
                                                  main_main_0_Pi_local_mem_dual_port_0
  store i16 %459, i16* %325, a... (idx: 0)        -75                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_main_0_Pi_local_mem_dual_port_0
  store i16 %459, i16* %325, a... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i16 %459, i16* %325, a... (idx: 0) -> main_main_0_Pi_local_mem_dual_port_0 (mux inputs: 19)
State: LEGUP_F_main_BB_gsm_addexit8i
Binding functional unit type: signed_subtract_32
Weight matrix for operation/function unit matching:
  %460 = sub nsw i32 8, %n.029... can share an output register with another operation already assigned to main_signed_subtract_32_0
                                                  main_signed_subtract_32_0     
  %460 = sub nsw i32 8, %n.029... (idx: 0)        -163                          
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_subtract_32_0     
  %460 = sub nsw i32 8, %n.029... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %460 = sub nsw i32 8, %n.029... (idx: 0) -> main_signed_subtract_32_0 (mux inputs: 18)
State: LEGUP_F_main_BB_lrph27i
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %464 = load i16* %.128.i, al... hey can share an input with another operation already assigned to main_mem_dual_port_0
  %464 = load i16* %.128.i, al... can share an output register with another operation already assigned to main_mem_dual_port_0
                                                  main_mem_dual_port_0          
  %464 = load i16* %.128.i, al... (idx: 0)        -30                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          
  %464 = load i16* %.128.i, al... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %464 = load i16* %.128.i, al... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 4)
State: LEGUP_F_main_BB_lrph27i
Binding functional unit type: main_0_Ki_local_mem_dual_port
Weight matrix for operation/function unit matching:
  %463 = load i16* %462, align... can share an output register with another operation already assigned to main_main_0_Ki_local_mem_dual_port_0
                                                  main_main_0_Ki_local_mem_dual_port_0
  %463 = load i16* %462, align... (idx: 0)        -35                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_main_0_Ki_local_mem_dual_port_0
  %463 = load i16* %462, align... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %463 = load i16* %462, align... (idx: 0) -> main_main_0_Ki_local_mem_dual_port_0 (mux inputs: 15)
State: LEGUP_F_main_BB_lrph27i
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %gep112 = add i32 %gep_int11... can share an output register with another operation already assigned to main_signed_add_32_0
  %gep112 = add i32 %gep_int11... can share an output register with another operation already assigned to main_signed_add_32_1
  %gep112 = add i32 %gep_int11... can share an output register with another operation already assigned to main_signed_add_32_2
  %gep112 = add i32 %gep_int11... can share an output register with another operation already assigned to main_signed_add_32_3
  %gep112 = add i32 %gep_int11... can share an output register with another operation already assigned to main_signed_add_32_4
  %gep112 = add i32 %gep_int11... can share an output register with another operation already assigned to main_signed_add_32_5
  %gep112 = add i32 %gep_int11... can share an output register with another operation already assigned to main_signed_add_32_6
  %gep112 = add i32 %gep_int11... can share an output register with another operation already assigned to main_signed_add_32_7
  %gep112 = add i32 %gep_int11... can share an output register with another operation already assigned to main_signed_add_32_8
  %gep112 = add i32 %gep_int11... can share an output register with another operation already assigned to main_signed_add_32_9
  %gep112 = add i32 %gep_int11... can share an output register with another operation already assigned to main_signed_add_32_10
  %gep112 = add i32 %gep_int11... can share an output register with another operation already assigned to main_signed_add_32_11
  %gep112 = add i32 %gep_int11... can share an output register with another operation already assigned to main_signed_add_32_12
  %gep112 = add i32 %gep_int11... can share an output register with another operation already assigned to main_signed_add_32_13
  %gep112 = add i32 %gep_int11... can share an output register with another operation already assigned to main_signed_add_32_14
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         
  %gep112 = add i32 %gep_int11... (idx: 0)        -710                          -220                          -80                           -30                           -30                           -30                           -40                           -60                           -60                           -70                           -70                           -70                           -110                          -9                            90                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         
  %gep112 = add i32 %gep_int11... (idx: 0)        1                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %gep112 = add i32 %gep_int11... (idx: 0) -> main_signed_add_32_0 (mux inputs: 73)
State: LEGUP_F_main_BB__467
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %471 = add nsw i32 %469, 163... can share an output register with another operation already assigned to main_signed_add_32_0
  %471 = add nsw i32 %469, 163... can share an output register with another operation already assigned to main_signed_add_32_1
  %471 = add nsw i32 %469, 163... can share an output register with another operation already assigned to main_signed_add_32_2
  %471 = add nsw i32 %469, 163... can share an output register with another operation already assigned to main_signed_add_32_3
  %471 = add nsw i32 %469, 163... can share an output register with another operation already assigned to main_signed_add_32_4
  %471 = add nsw i32 %469, 163... can share an output register with another operation already assigned to main_signed_add_32_5
  %471 = add nsw i32 %469, 163... can share an output register with another operation already assigned to main_signed_add_32_6
  %471 = add nsw i32 %469, 163... can share an output register with another operation already assigned to main_signed_add_32_7
  %471 = add nsw i32 %469, 163... can share an output register with another operation already assigned to main_signed_add_32_8
  %471 = add nsw i32 %469, 163... can share an output register with another operation already assigned to main_signed_add_32_9
  %471 = add nsw i32 %469, 163... can share an output register with another operation already assigned to main_signed_add_32_10
  %471 = add nsw i32 %469, 163... can share an output register with another operation already assigned to main_signed_add_32_11
  %471 = add nsw i32 %469, 163... can share an output register with another operation already assigned to main_signed_add_32_12
  %471 = add nsw i32 %469, 163... can share an output register with another operation already assigned to main_signed_add_32_13
  %471 = add nsw i32 %469, 163... can share an output register with another operation already assigned to main_signed_add_32_14
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         
  %471 = add nsw i32 %469, 163... (idx: 0)        -725                          -214                          -74                           -24                           -24                           -24                           -34                           -54                           -54                           -64                           -64                           -64                           -104                          -4                            95                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         
  %471 = add nsw i32 %469, 163... (idx: 0)        1                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %471 = add nsw i32 %469, 163... (idx: 0) -> main_signed_add_32_0 (mux inputs: 74)
State: LEGUP_F_main_BB__467
Binding functional unit type: signed_multiply_32
Weight matrix for operation/function unit matching:
  %470 = mul nsw i32 %468, %46... can share an output register with another operation already assigned to main_signed_multiply_32_0
  %470 = mul nsw i32 %468, %46... can share an output register with another operation already assigned to main_signed_multiply_32_1
  %470 = mul nsw i32 %468, %46... can share an output register with another operation already assigned to main_signed_multiply_32_2
  %470 = mul nsw i32 %468, %46... can share an output register with another operation already assigned to main_signed_multiply_32_3
  %470 = mul nsw i32 %468, %46... can share an output register with another operation already assigned to main_signed_multiply_32_4
  %470 = mul nsw i32 %468, %46... can share an output register with another operation already assigned to main_signed_multiply_32_5
  %470 = mul nsw i32 %468, %46... can share an output register with another operation already assigned to main_signed_multiply_32_6
  %470 = mul nsw i32 %468, %46... can share an output register with another operation already assigned to main_signed_multiply_32_7
  %470 = mul nsw i32 %468, %46... can share an output register with another operation already assigned to main_signed_multiply_32_8
  %470 = mul nsw i32 %468, %46... can share an output register with another operation already assigned to main_signed_multiply_32_9
  %470 = mul nsw i32 %468, %46... can share an output register with another operation already assigned to main_signed_multiply_32_10
  %470 = mul nsw i32 %468, %46... can share an output register with another operation already assigned to main_signed_multiply_32_11
  %470 = mul nsw i32 %468, %46... can share an output register with another operation already assigned to main_signed_multiply_32_12
  %470 = mul nsw i32 %468, %46... can share an output register with another operation already assigned to main_signed_multiply_32_13
  %470 = mul nsw i32 %468, %46... can share an output register with another operation already assigned to main_signed_multiply_32_14
                                                  main_signed_multiply_32_0     main_signed_multiply_32_1     main_signed_multiply_32_2     main_signed_multiply_32_3     main_signed_multiply_32_4     main_signed_multiply_32_5     main_signed_multiply_32_6     main_signed_multiply_32_7     main_signed_multiply_32_8     main_signed_multiply_32_9     main_signed_multiply_32_10    main_signed_multiply_32_11    main_signed_multiply_32_12    main_signed_multiply_32_13    main_signed_multiply_32_14    
  %470 = mul nsw i32 %468, %46... (idx: 0)        -150                          -20                           -20                           -20                           -20                           -40                           -40                           -30                           -30                           -80                           -60                           -60                           -50                           -50                           -110                          
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_multiply_32_0     main_signed_multiply_32_1     main_signed_multiply_32_2     main_signed_multiply_32_3     main_signed_multiply_32_4     main_signed_multiply_32_5     main_signed_multiply_32_6     main_signed_multiply_32_7     main_signed_multiply_32_8     main_signed_multiply_32_9     main_signed_multiply_32_10    main_signed_multiply_32_11    main_signed_multiply_32_12    main_signed_multiply_32_13    main_signed_multiply_32_14    
  %470 = mul nsw i32 %468, %46... (idx: 0)        1                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %470 = mul nsw i32 %468, %46... (idx: 0) -> main_signed_multiply_32_0 (mux inputs: 17)
State: LEGUP_F_main_BB__467
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %472 = add i32 %471, %470 can share an output register with another operation already assigned to main_signed_add_32_0
  %472 = add i32 %471, %470 can share an output register with another operation already assigned to main_signed_add_32_1
  %472 = add i32 %471, %470 can share an output register with another operation already assigned to main_signed_add_32_2
  %472 = add i32 %471, %470 can share an output register with another operation already assigned to main_signed_add_32_3
  %472 = add i32 %471, %470 can share an output register with another operation already assigned to main_signed_add_32_4
  %472 = add i32 %471, %470 can share an output register with another operation already assigned to main_signed_add_32_5
  %472 = add i32 %471, %470 can share an output register with another operation already assigned to main_signed_add_32_6
  %472 = add i32 %471, %470 can share an output register with another operation already assigned to main_signed_add_32_7
  %472 = add i32 %471, %470 can share an output register with another operation already assigned to main_signed_add_32_8
  %472 = add i32 %471, %470 can share an output register with another operation already assigned to main_signed_add_32_9
  %472 = add i32 %471, %470 can share an output register with another operation already assigned to main_signed_add_32_10
  %472 = add i32 %471, %470 can share an output register with another operation already assigned to main_signed_add_32_11
  %472 = add i32 %471, %470 can share an output register with another operation already assigned to main_signed_add_32_12
  %472 = add i32 %471, %470 can share an output register with another operation already assigned to main_signed_add_32_13
  %472 = add i32 %471, %470 can share an output register with another operation already assigned to main_signed_add_32_14
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         
  %472 = add i32 %471, %470 (idx: 0)              -740                          -220                          -80                           -30                           -30                           -30                           -40                           -60                           -60                           -70                           -70                           -70                           -109                          -9                            90                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         
  %472 = add i32 %471, %470 (idx: 0)              1                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %472 = add i32 %471, %470 (idx: 0) -> main_signed_add_32_0 (mux inputs: 76)
State: LEGUP_F_main_BB_gsm_mult_rexit6i
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %474 = add nsw i32 %m.026.i,... can share an output register with another operation already assigned to main_signed_add_32_0
  %474 = add nsw i32 %m.026.i,... can share an output register with another operation already assigned to main_signed_add_32_1
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         
  %474 = add nsw i32 %m.026.i,... (idx: 0)        -755                          -215                          -83                           -33                           -33                           -33                           -43                           -63                           -65                           -73                           -73                           -73                           -112                          -13                           85                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         
  %474 = add nsw i32 %m.026.i,... (idx: 0)        1                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %474 = add nsw i32 %m.026.i,... (idx: 0) -> main_signed_add_32_0 (mux inputs: 77)
State: LEGUP_F_main_BB_gsm_mult_rexit6i
Binding functional unit type: main_0_Pi_local_mem_dual_port
Weight matrix for operation/function unit matching:
  %476 = load i16* %475, align... can share an output register with another operation already assigned to main_main_0_Pi_local_mem_dual_port_0
                                                  main_main_0_Pi_local_mem_dual_port_0
  %476 = load i16* %475, align... (idx: 0)        -85                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_main_0_Pi_local_mem_dual_port_0
  %476 = load i16* %475, align... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %476 = load i16* %475, align... (idx: 0) -> main_main_0_Pi_local_mem_dual_port_0 (mux inputs: 20)
State: LEGUP_F_main_BB_gsm_mult_rexit6i
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %gep115 = add i32 %gep_int11... can share an output register with another operation already assigned to main_signed_add_32_0
  %gep115 = add i32 %gep_int11... can share an output register with another operation already assigned to main_signed_add_32_1
  %gep115 = add i32 %gep_int11... can share an output register with another operation already assigned to main_signed_add_32_2
  %gep115 = add i32 %gep_int11... can share an output register with another operation already assigned to main_signed_add_32_3
  %gep115 = add i32 %gep_int11... can share an output register with another operation already assigned to main_signed_add_32_4
  %gep115 = add i32 %gep_int11... can share an output register with another operation already assigned to main_signed_add_32_5
  %gep115 = add i32 %gep_int11... can share an output register with another operation already assigned to main_signed_add_32_6
  %gep115 = add i32 %gep_int11... can share an output register with another operation already assigned to main_signed_add_32_7
  %gep115 = add i32 %gep_int11... can share an output register with another operation already assigned to main_signed_add_32_8
  %gep115 = add i32 %gep_int11... can share an output register with another operation already assigned to main_signed_add_32_9
  %gep115 = add i32 %gep_int11... can share an output register with another operation already assigned to main_signed_add_32_10
  %gep115 = add i32 %gep_int11... can share an output register with another operation already assigned to main_signed_add_32_11
  %gep115 = add i32 %gep_int11... can share an output register with another operation already assigned to main_signed_add_32_12
  %gep115 = add i32 %gep_int11... can share an output register with another operation already assigned to main_signed_add_32_13
  %gep115 = add i32 %gep_int11... can share an output register with another operation already assigned to main_signed_add_32_14
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         
  %gep115 = add i32 %gep_int11... (idx: 0)        -770                          -220                          -80                           -30                           -30                           -30                           -40                           -60                           -60                           -70                           -70                           -70                           -110                          -9                            90                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         
  %gep115 = add i32 %gep_int11... (idx: 0)        1                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %gep115 = add i32 %gep_int11... (idx: 0) -> main_signed_add_32_0 (mux inputs: 79)
State: LEGUP_F_main_BB_gsm_mult_rexit6i
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %478 = add nsw i32 %477, %.0... can share an output register with another operation already assigned to main_signed_add_32_0
  %478 = add nsw i32 %477, %.0... can share an output register with another operation already assigned to main_signed_add_32_1
  %478 = add nsw i32 %477, %.0... can share an output register with another operation already assigned to main_signed_add_32_2
  %478 = add nsw i32 %477, %.0... can share an output register with another operation already assigned to main_signed_add_32_3
  %478 = add nsw i32 %477, %.0... can share an output register with another operation already assigned to main_signed_add_32_4
  %478 = add nsw i32 %477, %.0... can share an output register with another operation already assigned to main_signed_add_32_5
  %478 = add nsw i32 %477, %.0... can share an output register with another operation already assigned to main_signed_add_32_6
  %478 = add nsw i32 %477, %.0... can share an output register with another operation already assigned to main_signed_add_32_7
  %478 = add nsw i32 %477, %.0... can share an output register with another operation already assigned to main_signed_add_32_8
  %478 = add nsw i32 %477, %.0... can share an output register with another operation already assigned to main_signed_add_32_9
  %478 = add nsw i32 %477, %.0... can share an output register with another operation already assigned to main_signed_add_32_10
  %478 = add nsw i32 %477, %.0... can share an output register with another operation already assigned to main_signed_add_32_11
  %478 = add nsw i32 %477, %.0... can share an output register with another operation already assigned to main_signed_add_32_12
  %478 = add nsw i32 %477, %.0... can share an output register with another operation already assigned to main_signed_add_32_13
  %478 = add nsw i32 %477, %.0... can share an output register with another operation already assigned to main_signed_add_32_14
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         
  %478 = add nsw i32 %477, %.0... (idx: 0)        -790                          -219                          -79                           -29                           -29                           -29                           -39                           -59                           -59                           -69                           -69                           -69                           -109                          -9                            90                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         
  %478 = add nsw i32 %477, %.0... (idx: 0)        1                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %478 = add nsw i32 %477, %.0... (idx: 0) -> main_signed_add_32_0 (mux inputs: 81)
State: LEGUP_F_main_BB_gsm_addexit3i
Binding functional unit type: main_0_Pi_local_mem_dual_port
Weight matrix for operation/function unit matching:
  store i16 %483, i16* %484, a... can share an output register with another operation already assigned to main_main_0_Pi_local_mem_dual_port_0
                                                  main_main_0_Pi_local_mem_dual_port_0
  store i16 %483, i16* %484, a... (idx: 0)        -100                          
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_main_0_Pi_local_mem_dual_port_0
  store i16 %483, i16* %484, a... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i16 %483, i16* %484, a... (idx: 0) -> main_main_0_Pi_local_mem_dual_port_0 (mux inputs: 22)
State: LEGUP_F_main_BB_gsm_addexit3i
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %gep118 = add i32 %gep_int11... can share an output register with another operation already assigned to main_signed_add_32_0
  %gep118 = add i32 %gep_int11... can share an output register with another operation already assigned to main_signed_add_32_1
  %gep118 = add i32 %gep_int11... can share an output register with another operation already assigned to main_signed_add_32_2
  %gep118 = add i32 %gep_int11... can share an output register with another operation already assigned to main_signed_add_32_3
  %gep118 = add i32 %gep_int11... can share an output register with another operation already assigned to main_signed_add_32_4
  %gep118 = add i32 %gep_int11... can share an output register with another operation already assigned to main_signed_add_32_5
  %gep118 = add i32 %gep_int11... can share an output register with another operation already assigned to main_signed_add_32_6
  %gep118 = add i32 %gep_int11... can share an output register with another operation already assigned to main_signed_add_32_7
  %gep118 = add i32 %gep_int11... can share an output register with another operation already assigned to main_signed_add_32_8
  %gep118 = add i32 %gep_int11... can share an output register with another operation already assigned to main_signed_add_32_9
  %gep118 = add i32 %gep_int11... can share an output register with another operation already assigned to main_signed_add_32_10
  %gep118 = add i32 %gep_int11... can share an output register with another operation already assigned to main_signed_add_32_11
  %gep118 = add i32 %gep_int11... can share an output register with another operation already assigned to main_signed_add_32_12
  %gep118 = add i32 %gep_int11... can share an output register with another operation already assigned to main_signed_add_32_13
  %gep118 = add i32 %gep_int11... can share an output register with another operation already assigned to main_signed_add_32_14
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         
  %gep118 = add i32 %gep_int11... (idx: 0)        -810                          -220                          -80                           -30                           -30                           -30                           -40                           -60                           -60                           -70                           -70                           -70                           -110                          -9                            90                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         
  %gep118 = add i32 %gep_int11... (idx: 0)        1                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %gep118 = add i32 %gep_int11... (idx: 0) -> main_signed_add_32_0 (mux inputs: 83)
State: LEGUP_F_main_BB_gsm_addexit3i
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %485 = load i16* %.128.i, al... hey can share an input with another operation already assigned to main_mem_dual_port_0
  %485 = load i16* %.128.i, al... can share an output register with another operation already assigned to main_mem_dual_port_0
                                                  main_mem_dual_port_0          
  %485 = load i16* %.128.i, al... (idx: 0)        -30                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          
  %485 = load i16* %.128.i, al... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %485 = load i16* %.128.i, al... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 4)
State: LEGUP_F_main_BB__488
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %491 = add nsw i32 %477, 163... hey can share an input with another operation already assigned to main_signed_add_32_0
  %491 = add nsw i32 %477, 163... can share an output register with another operation already assigned to main_signed_add_32_0
  %491 = add nsw i32 %477, 163... can share an output register with another operation already assigned to main_signed_add_32_1
  %491 = add nsw i32 %477, 163... can share an output register with another operation already assigned to main_signed_add_32_2
  %491 = add nsw i32 %477, 163... can share an output register with another operation already assigned to main_signed_add_32_3
  %491 = add nsw i32 %477, 163... can share an output register with another operation already assigned to main_signed_add_32_4
  %491 = add nsw i32 %477, 163... can share an output register with another operation already assigned to main_signed_add_32_5
  %491 = add nsw i32 %477, 163... can share an output register with another operation already assigned to main_signed_add_32_6
  %491 = add nsw i32 %477, 163... can share an output register with another operation already assigned to main_signed_add_32_7
  %491 = add nsw i32 %477, 163... can share an output register with another operation already assigned to main_signed_add_32_8
  %491 = add nsw i32 %477, 163... can share an output register with another operation already assigned to main_signed_add_32_9
  %491 = add nsw i32 %477, 163... can share an output register with another operation already assigned to main_signed_add_32_10
  %491 = add nsw i32 %477, 163... can share an output register with another operation already assigned to main_signed_add_32_11
  %491 = add nsw i32 %477, 163... can share an output register with another operation already assigned to main_signed_add_32_12
  %491 = add nsw i32 %477, 163... can share an output register with another operation already assigned to main_signed_add_32_13
  %491 = add nsw i32 %477, 163... can share an output register with another operation already assigned to main_signed_add_32_14
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         
  %491 = add nsw i32 %477, 163... (idx: 0)        -820                          -214                          -74                           -24                           -24                           -24                           -34                           -54                           -54                           -64                           -64                           -64                           -104                          -4                            95                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         
  %491 = add nsw i32 %477, 163... (idx: 0)        1                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %491 = add nsw i32 %477, 163... (idx: 0) -> main_signed_add_32_0 (mux inputs: 83)
State: LEGUP_F_main_BB__488
Binding functional unit type: signed_multiply_32
Weight matrix for operation/function unit matching:
  %490 = mul nsw i32 %489, %47... can share an output register with another operation already assigned to main_signed_multiply_32_0
  %490 = mul nsw i32 %489, %47... can share an output register with another operation already assigned to main_signed_multiply_32_1
  %490 = mul nsw i32 %489, %47... can share an output register with another operation already assigned to main_signed_multiply_32_2
  %490 = mul nsw i32 %489, %47... can share an output register with another operation already assigned to main_signed_multiply_32_3
  %490 = mul nsw i32 %489, %47... can share an output register with another operation already assigned to main_signed_multiply_32_4
  %490 = mul nsw i32 %489, %47... can share an output register with another operation already assigned to main_signed_multiply_32_5
  %490 = mul nsw i32 %489, %47... can share an output register with another operation already assigned to main_signed_multiply_32_6
  %490 = mul nsw i32 %489, %47... can share an output register with another operation already assigned to main_signed_multiply_32_7
  %490 = mul nsw i32 %489, %47... can share an output register with another operation already assigned to main_signed_multiply_32_8
  %490 = mul nsw i32 %489, %47... can share an output register with another operation already assigned to main_signed_multiply_32_9
  %490 = mul nsw i32 %489, %47... can share an output register with another operation already assigned to main_signed_multiply_32_10
  %490 = mul nsw i32 %489, %47... can share an output register with another operation already assigned to main_signed_multiply_32_11
  %490 = mul nsw i32 %489, %47... can share an output register with another operation already assigned to main_signed_multiply_32_12
  %490 = mul nsw i32 %489, %47... can share an output register with another operation already assigned to main_signed_multiply_32_13
  %490 = mul nsw i32 %489, %47... can share an output register with another operation already assigned to main_signed_multiply_32_14
                                                  main_signed_multiply_32_0     main_signed_multiply_32_1     main_signed_multiply_32_2     main_signed_multiply_32_3     main_signed_multiply_32_4     main_signed_multiply_32_5     main_signed_multiply_32_6     main_signed_multiply_32_7     main_signed_multiply_32_8     main_signed_multiply_32_9     main_signed_multiply_32_10    main_signed_multiply_32_11    main_signed_multiply_32_12    main_signed_multiply_32_13    main_signed_multiply_32_14    
  %490 = mul nsw i32 %489, %47... (idx: 0)        -170                          -20                           -20                           -20                           -20                           -40                           -40                           -30                           -30                           -80                           -60                           -60                           -50                           -50                           -110                          
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_multiply_32_0     main_signed_multiply_32_1     main_signed_multiply_32_2     main_signed_multiply_32_3     main_signed_multiply_32_4     main_signed_multiply_32_5     main_signed_multiply_32_6     main_signed_multiply_32_7     main_signed_multiply_32_8     main_signed_multiply_32_9     main_signed_multiply_32_10    main_signed_multiply_32_11    main_signed_multiply_32_12    main_signed_multiply_32_13    main_signed_multiply_32_14    
  %490 = mul nsw i32 %489, %47... (idx: 0)        1                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %490 = mul nsw i32 %489, %47... (idx: 0) -> main_signed_multiply_32_0 (mux inputs: 19)
State: LEGUP_F_main_BB__488
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %492 = add i32 %491, %490 can share an output register with another operation already assigned to main_signed_add_32_0
  %492 = add i32 %491, %490 can share an output register with another operation already assigned to main_signed_add_32_1
  %492 = add i32 %491, %490 can share an output register with another operation already assigned to main_signed_add_32_2
  %492 = add i32 %491, %490 can share an output register with another operation already assigned to main_signed_add_32_3
  %492 = add i32 %491, %490 can share an output register with another operation already assigned to main_signed_add_32_4
  %492 = add i32 %491, %490 can share an output register with another operation already assigned to main_signed_add_32_5
  %492 = add i32 %491, %490 can share an output register with another operation already assigned to main_signed_add_32_6
  %492 = add i32 %491, %490 can share an output register with another operation already assigned to main_signed_add_32_7
  %492 = add i32 %491, %490 can share an output register with another operation already assigned to main_signed_add_32_8
  %492 = add i32 %491, %490 can share an output register with another operation already assigned to main_signed_add_32_9
  %492 = add i32 %491, %490 can share an output register with another operation already assigned to main_signed_add_32_10
  %492 = add i32 %491, %490 can share an output register with another operation already assigned to main_signed_add_32_11
  %492 = add i32 %491, %490 can share an output register with another operation already assigned to main_signed_add_32_12
  %492 = add i32 %491, %490 can share an output register with another operation already assigned to main_signed_add_32_13
  %492 = add i32 %491, %490 can share an output register with another operation already assigned to main_signed_add_32_14
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         
  %492 = add i32 %491, %490 (idx: 0)              -830                          -220                          -80                           -30                           -30                           -30                           -40                           -60                           -60                           -70                           -70                           -70                           -109                          -9                            90                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         
  %492 = add i32 %491, %490 (idx: 0)              1                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %492 = add i32 %491, %490 (idx: 0) -> main_signed_add_32_0 (mux inputs: 85)
State: LEGUP_F_main_BB_gsm_mult_rexiti13
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %495 = add nsw i32 %494, %.0... can share an output register with another operation already assigned to main_signed_add_32_0
  %495 = add nsw i32 %494, %.0... can share an output register with another operation already assigned to main_signed_add_32_1
  %495 = add nsw i32 %494, %.0... can share an output register with another operation already assigned to main_signed_add_32_2
  %495 = add nsw i32 %494, %.0... can share an output register with another operation already assigned to main_signed_add_32_3
  %495 = add nsw i32 %494, %.0... can share an output register with another operation already assigned to main_signed_add_32_4
  %495 = add nsw i32 %494, %.0... can share an output register with another operation already assigned to main_signed_add_32_5
  %495 = add nsw i32 %494, %.0... can share an output register with another operation already assigned to main_signed_add_32_6
  %495 = add nsw i32 %494, %.0... can share an output register with another operation already assigned to main_signed_add_32_7
  %495 = add nsw i32 %494, %.0... can share an output register with another operation already assigned to main_signed_add_32_8
  %495 = add nsw i32 %494, %.0... can share an output register with another operation already assigned to main_signed_add_32_9
  %495 = add nsw i32 %494, %.0... can share an output register with another operation already assigned to main_signed_add_32_10
  %495 = add nsw i32 %494, %.0... can share an output register with another operation already assigned to main_signed_add_32_11
  %495 = add nsw i32 %494, %.0... can share an output register with another operation already assigned to main_signed_add_32_12
  %495 = add nsw i32 %494, %.0... can share an output register with another operation already assigned to main_signed_add_32_13
  %495 = add nsw i32 %494, %.0... can share an output register with another operation already assigned to main_signed_add_32_14
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         
  %495 = add nsw i32 %494, %.0... (idx: 0)        -850                          -219                          -79                           -29                           -29                           -29                           -39                           -59                           -59                           -69                           -69                           -69                           -109                          -9                            90                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         
  %495 = add nsw i32 %494, %.0... (idx: 0)        1                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %495 = add nsw i32 %494, %.0... (idx: 0) -> main_signed_add_32_0 (mux inputs: 87)
State: LEGUP_F_main_BB_gsm_addexiti
Binding functional unit type: main_0_Ki_local_mem_dual_port
Weight matrix for operation/function unit matching:
  store i16 %500, i16* %462, a... hey can share an input with another operation already assigned to main_main_0_Ki_local_mem_dual_port_0
  store i16 %500, i16* %462, a... can share an output register with another operation already assigned to main_main_0_Ki_local_mem_dual_port_0
                                                  main_main_0_Ki_local_mem_dual_port_0
  store i16 %500, i16* %462, a... (idx: 0)        -45                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_main_0_Ki_local_mem_dual_port_0
  store i16 %500, i16* %462, a... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i16 %500, i16* %462, a... (idx: 0) -> main_main_0_Ki_local_mem_dual_port_0 (mux inputs: 16)
State: LEGUP_F_main_BB__crit_edgei14
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %501 = add nsw i32 %n.029.i,... can share an output register with another operation already assigned to main_signed_add_32_0
  %501 = add nsw i32 %n.029.i,... can share an output register with another operation already assigned to main_signed_add_32_1
  %501 = add nsw i32 %n.029.i,... can share an output register with another operation already assigned to main_signed_add_32_2
  %501 = add nsw i32 %n.029.i,... can share an output register with another operation already assigned to main_signed_add_32_3
  %501 = add nsw i32 %n.029.i,... can share an output register with another operation already assigned to main_signed_add_32_4
  %501 = add nsw i32 %n.029.i,... can share an output register with another operation already assigned to main_signed_add_32_5
  %501 = add nsw i32 %n.029.i,... can share an output register with another operation already assigned to main_signed_add_32_6
  %501 = add nsw i32 %n.029.i,... can share an output register with another operation already assigned to main_signed_add_32_7
  %501 = add nsw i32 %n.029.i,... can share an output register with another operation already assigned to main_signed_add_32_8
  %501 = add nsw i32 %n.029.i,... can share an output register with another operation already assigned to main_signed_add_32_9
  %501 = add nsw i32 %n.029.i,... can share an output register with another operation already assigned to main_signed_add_32_10
  %501 = add nsw i32 %n.029.i,... can share an output register with another operation already assigned to main_signed_add_32_11
  %501 = add nsw i32 %n.029.i,... can share an output register with another operation already assigned to main_signed_add_32_12
  %501 = add nsw i32 %n.029.i,... can share an output register with another operation already assigned to main_signed_add_32_13
  %501 = add nsw i32 %n.029.i,... can share an output register with another operation already assigned to main_signed_add_32_14
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         
  %501 = add nsw i32 %n.029.i,... (idx: 0)        -865                          -215                          -73                           -23                           -23                           -23                           -33                           -53                           -55                           -63                           -63                           -63                           -102                          -3                            95                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         
  %501 = add nsw i32 %n.029.i,... (idx: 0)        1                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %501 = add nsw i32 %n.029.i,... (idx: 0) -> main_signed_add_32_0 (mux inputs: 88)
State: LEGUP_F_main_BB__crit_edge43i
Binding functional unit type: main_0_Pi_local_mem_dual_port
Weight matrix for operation/function unit matching:
  %.pre.i15 = load i16* %326, ... hey can share an input with another operation already assigned to main_main_0_Pi_local_mem_dual_port_0
  %.pre.i15 = load i16* %326, ... can share an output register with another operation already assigned to main_main_0_Pi_local_mem_dual_port_0
                                                  main_main_0_Pi_local_mem_dual_port_0
  %.pre.i15 = load i16* %326, ... (idx: 0)        -110                          
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_main_0_Pi_local_mem_dual_port_0
  %.pre.i15 = load i16* %326, ... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %.pre.i15 = load i16* %326, ... (idx: 0) -> main_main_0_Pi_local_mem_dual_port_0 (mux inputs: 22)
State: LEGUP_F_main_BB__crit_edge43i
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %indvars.iv.next.i = add i32... can share an output register with another operation already assigned to main_signed_add_32_0
  %indvars.iv.next.i = add i32... can share an output register with another operation already assigned to main_signed_add_32_1
  %indvars.iv.next.i = add i32... can share an output register with another operation already assigned to main_signed_add_32_2
  %indvars.iv.next.i = add i32... can share an output register with another operation already assigned to main_signed_add_32_3
  %indvars.iv.next.i = add i32... can share an output register with another operation already assigned to main_signed_add_32_4
  %indvars.iv.next.i = add i32... can share an output register with another operation already assigned to main_signed_add_32_5
  %indvars.iv.next.i = add i32... can share an output register with another operation already assigned to main_signed_add_32_6
  %indvars.iv.next.i = add i32... can share an output register with another operation already assigned to main_signed_add_32_7
  %indvars.iv.next.i = add i32... can share an output register with another operation already assigned to main_signed_add_32_8
  %indvars.iv.next.i = add i32... can share an output register with another operation already assigned to main_signed_add_32_9
  %indvars.iv.next.i = add i32... can share an output register with another operation already assigned to main_signed_add_32_10
  %indvars.iv.next.i = add i32... can share an output register with another operation already assigned to main_signed_add_32_11
  %indvars.iv.next.i = add i32... can share an output register with another operation already assigned to main_signed_add_32_12
  %indvars.iv.next.i = add i32... can share an output register with another operation already assigned to main_signed_add_32_13
  %indvars.iv.next.i = add i32... can share an output register with another operation already assigned to main_signed_add_32_14
  %gep120 = add i32 %gep_int11... can share an output register with another operation already assigned to main_signed_add_32_0
  %gep120 = add i32 %gep_int11... can share an output register with another operation already assigned to main_signed_add_32_1
  %gep120 = add i32 %gep_int11... can share an output register with another operation already assigned to main_signed_add_32_2
  %gep120 = add i32 %gep_int11... can share an output register with another operation already assigned to main_signed_add_32_3
  %gep120 = add i32 %gep_int11... can share an output register with another operation already assigned to main_signed_add_32_4
  %gep120 = add i32 %gep_int11... can share an output register with another operation already assigned to main_signed_add_32_5
  %gep120 = add i32 %gep_int11... can share an output register with another operation already assigned to main_signed_add_32_6
  %gep120 = add i32 %gep_int11... can share an output register with another operation already assigned to main_signed_add_32_7
  %gep120 = add i32 %gep_int11... can share an output register with another operation already assigned to main_signed_add_32_8
  %gep120 = add i32 %gep_int11... can share an output register with another operation already assigned to main_signed_add_32_9
  %gep120 = add i32 %gep_int11... can share an output register with another operation already assigned to main_signed_add_32_10
  %gep120 = add i32 %gep_int11... can share an output register with another operation already assigned to main_signed_add_32_11
  %gep120 = add i32 %gep_int11... can share an output register with another operation already assigned to main_signed_add_32_12
  %gep120 = add i32 %gep_int11... can share an output register with another operation already assigned to main_signed_add_32_13
  %gep120 = add i32 %gep_int11... can share an output register with another operation already assigned to main_signed_add_32_14
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         
  %indvars.iv.next.i = add i32... (idx: 0)        -874                          -213                          -73                           -24                           -23                           -23                           -33                           -53                           -54                           -63                           -64                           -63                           -102                          -3                            95                            
  %gep120 = add i32 %gep_int11... (idx: 1)        -875                          -215                          -74                           -24                           -24                           -24                           -34                           -55                           -54                           -64                           -64                           -64                           -104                          -4                            95                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         
  %indvars.iv.next.i = add i32... (idx: 0)        1                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             
  %gep120 = add i32 %gep_int11... (idx: 1)        0                             1                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %indvars.iv.next.i = add i32... (idx: 0) -> main_signed_add_32_0 (mux inputs: 89)
  %gep120 = add i32 %gep_int11... (idx: 1) -> main_signed_add_32_1 (mux inputs: 23)
State: LEGUP_F_main_BB_Reflection_coefficientsexit
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %504 = load i16* %.01.i.i, a... can share an output register with another operation already assigned to main_mem_dual_port_0
                                                  main_mem_dual_port_0          
  %504 = load i16* %.01.i.i, a... (idx: 0)        -35                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          
  %504 = load i16* %.01.i.i, a... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %504 = load i16* %.01.i.i, a... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 5)
State: LEGUP_F_main_BB__506
Binding functional unit type: signed_subtract_16
Weight matrix for operation/function unit matching:
  %508 = sub i16 0, %504 can share an output register with another operation already assigned to main_signed_subtract_16_0
                                                  main_signed_subtract_16_0     
  %508 = sub i16 0, %504 (idx: 0)                 75                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_subtract_16_0     
  %508 = sub i16 0, %504 (idx: 0)                 1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %508 = sub i16 0, %504 (idx: 0) -> main_signed_subtract_16_0 (mux inputs: 4)
State: LEGUP_F_main_BB__517
Binding functional unit type: signed_add_16
Weight matrix for operation/function unit matching:
                                                  main_signed_add_16_0          
  %518 = add i16 %509, -11059 (idx: 0)            95                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_16_0          
  %518 = add i16 %509, -11059 (idx: 0)            1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %518 = add i16 %509, -11059 (idx: 0) -> main_signed_add_16_0 (mux inputs: 1)
State: LEGUP_F_main_BB_threadii
Binding functional unit type: signed_add_16
Weight matrix for operation/function unit matching:
                                                  main_signed_add_16_0          
  %521 = add i16 %520, 26624 (idx: 0)             85                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_16_0          
  %521 = add i16 %520, 26624 (idx: 0)             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %521 = add i16 %520, 26624 (idx: 0) -> main_signed_add_16_0 (mux inputs: 2)
State: LEGUP_F_main_BB__522
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  store i16 %524, i16* %.01.i.... hey can share an input with another operation already assigned to main_mem_dual_port_0
  store i16 %524, i16* %.01.i.... can share an output register with another operation already assigned to main_mem_dual_port_0
                                                  main_mem_dual_port_0          
  store i16 %524, i16* %.01.i.... (idx: 0)        -45                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          
  store i16 %524, i16* %.01.i.... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i16 %524, i16* %.01.i.... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 6)
State: LEGUP_F_main_BB__522
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %525 = add nsw i32 %i.02.i.i... can share an output register with another operation already assigned to main_signed_add_32_0
  %525 = add nsw i32 %i.02.i.i... can share an output register with another operation already assigned to main_signed_add_32_1
  %525 = add nsw i32 %i.02.i.i... can share an output register with another operation already assigned to main_signed_add_32_2
  %525 = add nsw i32 %i.02.i.i... can share an output register with another operation already assigned to main_signed_add_32_3
  %525 = add nsw i32 %i.02.i.i... can share an output register with another operation already assigned to main_signed_add_32_4
  %525 = add nsw i32 %i.02.i.i... can share an output register with another operation already assigned to main_signed_add_32_5
  %525 = add nsw i32 %i.02.i.i... can share an output register with another operation already assigned to main_signed_add_32_6
  %525 = add nsw i32 %i.02.i.i... can share an output register with another operation already assigned to main_signed_add_32_7
  %525 = add nsw i32 %i.02.i.i... can share an output register with another operation already assigned to main_signed_add_32_8
  %525 = add nsw i32 %i.02.i.i... can share an output register with another operation already assigned to main_signed_add_32_9
  %525 = add nsw i32 %i.02.i.i... can share an output register with another operation already assigned to main_signed_add_32_10
  %525 = add nsw i32 %i.02.i.i... can share an output register with another operation already assigned to main_signed_add_32_11
  %525 = add nsw i32 %i.02.i.i... can share an output register with another operation already assigned to main_signed_add_32_12
  %525 = add nsw i32 %i.02.i.i... can share an output register with another operation already assigned to main_signed_add_32_13
  %525 = add nsw i32 %i.02.i.i... can share an output register with another operation already assigned to main_signed_add_32_14
  %gep122 = add i32 %gep_int12... can share an output register with another operation already assigned to main_signed_add_32_0
  %gep122 = add i32 %gep_int12... can share an output register with another operation already assigned to main_signed_add_32_1
  %gep122 = add i32 %gep_int12... can share an output register with another operation already assigned to main_signed_add_32_2
  %gep122 = add i32 %gep_int12... can share an output register with another operation already assigned to main_signed_add_32_3
  %gep122 = add i32 %gep_int12... can share an output register with another operation already assigned to main_signed_add_32_4
  %gep122 = add i32 %gep_int12... can share an output register with another operation already assigned to main_signed_add_32_5
  %gep122 = add i32 %gep_int12... can share an output register with another operation already assigned to main_signed_add_32_6
  %gep122 = add i32 %gep_int12... can share an output register with another operation already assigned to main_signed_add_32_7
  %gep122 = add i32 %gep_int12... can share an output register with another operation already assigned to main_signed_add_32_8
  %gep122 = add i32 %gep_int12... can share an output register with another operation already assigned to main_signed_add_32_9
  %gep122 = add i32 %gep_int12... can share an output register with another operation already assigned to main_signed_add_32_10
  %gep122 = add i32 %gep_int12... can share an output register with another operation already assigned to main_signed_add_32_11
  %gep122 = add i32 %gep_int12... can share an output register with another operation already assigned to main_signed_add_32_12
  %gep122 = add i32 %gep_int12... can share an output register with another operation already assigned to main_signed_add_32_13
  %gep122 = add i32 %gep_int12... can share an output register with another operation already assigned to main_signed_add_32_14
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         
  %525 = add nsw i32 %i.02.i.i... (idx: 0)        -885                          -225                          -73                           -23                           -23                           -23                           -33                           -53                           -55                           -63                           -63                           -63                           -102                          -3                            95                            
  %gep122 = add i32 %gep_int12... (idx: 1)        -885                          -225                          -74                           -24                           -24                           -24                           -34                           -55                           -54                           -64                           -64                           -64                           -104                          -4                            95                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         
  %525 = add nsw i32 %i.02.i.i... (idx: 0)        1                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             
  %gep122 = add i32 %gep_int12... (idx: 1)        0                             1                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %525 = add nsw i32 %i.02.i.i... (idx: 0) -> main_signed_add_32_0 (mux inputs: 90)
  %gep122 = add i32 %gep_int12... (idx: 1) -> main_signed_add_32_1 (mux inputs: 24)
State: LEGUP_F_main_BB__522
Binding functional unit type: signed_subtract_16
Weight matrix for operation/function unit matching:
  %523 = sub i16 0, %temp.0.i.... can share an output register with another operation already assigned to main_signed_subtract_16_0
                                                  main_signed_subtract_16_0     
  %523 = sub i16 0, %temp.0.i.... (idx: 0)        65                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_subtract_16_0     
  %523 = sub i16 0, %temp.0.i.... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %523 = sub i16 0, %temp.0.i.... (idx: 0) -> main_signed_subtract_16_0 (mux inputs: 5)
State: LEGUP_F_main_BB_Gsm_LPC_Analysisexit
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %527 = load i16* %19, align ... can share an output register with another operation already assigned to main_mem_dual_port_0
                                                  main_mem_dual_port_0          
  %527 = load i16* %19, align ... (idx: 0)        -55                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          
  %527 = load i16* %19, align ... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %527 = load i16* %19, align ... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 7)
State: LEGUP_F_main_BB_Gsm_LPC_Analysisexit
Binding functional unit type: signed_multiply_32
Weight matrix for operation/function unit matching:
  %529 = mul i32 %528, 40960 can share an output register with another operation already assigned to main_signed_multiply_32_0
  %529 = mul i32 %528, 40960 can share an output register with another operation already assigned to main_signed_multiply_32_1
  %529 = mul i32 %528, 40960 can share an output register with another operation already assigned to main_signed_multiply_32_2
  %529 = mul i32 %528, 40960 can share an output register with another operation already assigned to main_signed_multiply_32_3
  %529 = mul i32 %528, 40960 can share an output register with another operation already assigned to main_signed_multiply_32_4
  %529 = mul i32 %528, 40960 can share an output register with another operation already assigned to main_signed_multiply_32_5
  %529 = mul i32 %528, 40960 can share an output register with another operation already assigned to main_signed_multiply_32_6
  %529 = mul i32 %528, 40960 can share an output register with another operation already assigned to main_signed_multiply_32_7
  %529 = mul i32 %528, 40960 can share an output register with another operation already assigned to main_signed_multiply_32_8
  %529 = mul i32 %528, 40960 can share an output register with another operation already assigned to main_signed_multiply_32_9
  %529 = mul i32 %528, 40960 can share an output register with another operation already assigned to main_signed_multiply_32_10
  %529 = mul i32 %528, 40960 can share an output register with another operation already assigned to main_signed_multiply_32_11
  %529 = mul i32 %528, 40960 can share an output register with another operation already assigned to main_signed_multiply_32_12
  %529 = mul i32 %528, 40960 can share an output register with another operation already assigned to main_signed_multiply_32_13
  %529 = mul i32 %528, 40960 can share an output register with another operation already assigned to main_signed_multiply_32_14
                                                  main_signed_multiply_32_0     main_signed_multiply_32_1     main_signed_multiply_32_2     main_signed_multiply_32_3     main_signed_multiply_32_4     main_signed_multiply_32_5     main_signed_multiply_32_6     main_signed_multiply_32_7     main_signed_multiply_32_8     main_signed_multiply_32_9     main_signed_multiply_32_10    main_signed_multiply_32_11    main_signed_multiply_32_12    main_signed_multiply_32_13    main_signed_multiply_32_14    
  %529 = mul i32 %528, 40960 (idx: 0)             -185                          -14                           -14                           -14                           -14                           -34                           -34                           -24                           -24                           -74                           -54                           -54                           -44                           -44                           -104                          
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_multiply_32_0     main_signed_multiply_32_1     main_signed_multiply_32_2     main_signed_multiply_32_3     main_signed_multiply_32_4     main_signed_multiply_32_5     main_signed_multiply_32_6     main_signed_multiply_32_7     main_signed_multiply_32_8     main_signed_multiply_32_9     main_signed_multiply_32_10    main_signed_multiply_32_11    main_signed_multiply_32_12    main_signed_multiply_32_13    main_signed_multiply_32_14    
  %529 = mul i32 %528, 40960 (idx: 0)             1                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %529 = mul i32 %528, 40960 (idx: 0) -> main_signed_multiply_32_0 (mux inputs: 20)
State: LEGUP_F_main_BB_Gsm_LPC_Analysisexit
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %530 = add i32 %529, 40960 can share an output register with another operation already assigned to main_signed_add_32_0
  %530 = add i32 %529, 40960 can share an output register with another operation already assigned to main_signed_add_32_1
  %530 = add i32 %529, 40960 can share an output register with another operation already assigned to main_signed_add_32_2
  %530 = add i32 %529, 40960 can share an output register with another operation already assigned to main_signed_add_32_3
  %530 = add i32 %529, 40960 can share an output register with another operation already assigned to main_signed_add_32_4
  %530 = add i32 %529, 40960 can share an output register with another operation already assigned to main_signed_add_32_5
  %530 = add i32 %529, 40960 can share an output register with another operation already assigned to main_signed_add_32_6
  %530 = add i32 %529, 40960 can share an output register with another operation already assigned to main_signed_add_32_7
  %530 = add i32 %529, 40960 can share an output register with another operation already assigned to main_signed_add_32_8
  %530 = add i32 %529, 40960 can share an output register with another operation already assigned to main_signed_add_32_9
  %530 = add i32 %529, 40960 can share an output register with another operation already assigned to main_signed_add_32_10
  %530 = add i32 %529, 40960 can share an output register with another operation already assigned to main_signed_add_32_11
  %530 = add i32 %529, 40960 can share an output register with another operation already assigned to main_signed_add_32_12
  %530 = add i32 %529, 40960 can share an output register with another operation already assigned to main_signed_add_32_13
  %530 = add i32 %529, 40960 can share an output register with another operation already assigned to main_signed_add_32_14
  %532 = add nsw i32 %531, 256 can share an output register with another operation already assigned to main_signed_add_32_0
  %532 = add nsw i32 %531, 256 can share an output register with another operation already assigned to main_signed_add_32_1
  %532 = add nsw i32 %531, 256 can share an output register with another operation already assigned to main_signed_add_32_2
  %532 = add nsw i32 %531, 256 can share an output register with another operation already assigned to main_signed_add_32_3
  %532 = add nsw i32 %531, 256 can share an output register with another operation already assigned to main_signed_add_32_4
  %532 = add nsw i32 %531, 256 can share an output register with another operation already assigned to main_signed_add_32_5
  %532 = add nsw i32 %531, 256 can share an output register with another operation already assigned to main_signed_add_32_6
  %532 = add nsw i32 %531, 256 can share an output register with another operation already assigned to main_signed_add_32_7
  %532 = add nsw i32 %531, 256 can share an output register with another operation already assigned to main_signed_add_32_8
  %532 = add nsw i32 %531, 256 can share an output register with another operation already assigned to main_signed_add_32_9
  %532 = add nsw i32 %531, 256 can share an output register with another operation already assigned to main_signed_add_32_10
  %532 = add nsw i32 %531, 256 can share an output register with another operation already assigned to main_signed_add_32_11
  %532 = add nsw i32 %531, 256 can share an output register with another operation already assigned to main_signed_add_32_12
  %532 = add nsw i32 %531, 256 can share an output register with another operation already assigned to main_signed_add_32_13
  %532 = add nsw i32 %531, 256 can share an output register with another operation already assigned to main_signed_add_32_14
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         
  %530 = add i32 %529, 40960 (idx: 0)             -894                          -234                          -74                           -24                           -24                           -24                           -34                           -54                           -54                           -64                           -64                           -64                           -104                          -3                            95                            
  %532 = add nsw i32 %531, 256 (idx: 1)           -895                          -234                          -74                           -24                           -24                           -24                           -34                           -54                           -54                           -64                           -64                           -64                           -104                          -4                            95                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         
  %530 = add i32 %529, 40960 (idx: 0)             0                             1                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             
  %532 = add nsw i32 %531, 256 (idx: 1)           1                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %532 = add nsw i32 %531, 256 (idx: 1) -> main_signed_add_32_0 (mux inputs: 91)
  %530 = add i32 %529, 40960 (idx: 0) -> main_signed_add_32_1 (mux inputs: 25)
State: LEGUP_F_main_BB__539
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %540 = add nsw i32 %.op.i, 3... can share an output register with another operation already assigned to main_signed_add_32_0
  %540 = add nsw i32 %.op.i, 3... can share an output register with another operation already assigned to main_signed_add_32_1
  %540 = add nsw i32 %.op.i, 3... can share an output register with another operation already assigned to main_signed_add_32_2
  %540 = add nsw i32 %.op.i, 3... can share an output register with another operation already assigned to main_signed_add_32_3
  %540 = add nsw i32 %.op.i, 3... can share an output register with another operation already assigned to main_signed_add_32_4
  %540 = add nsw i32 %.op.i, 3... can share an output register with another operation already assigned to main_signed_add_32_5
  %540 = add nsw i32 %.op.i, 3... can share an output register with another operation already assigned to main_signed_add_32_6
  %540 = add nsw i32 %.op.i, 3... can share an output register with another operation already assigned to main_signed_add_32_7
  %540 = add nsw i32 %.op.i, 3... can share an output register with another operation already assigned to main_signed_add_32_8
  %540 = add nsw i32 %.op.i, 3... can share an output register with another operation already assigned to main_signed_add_32_9
  %540 = add nsw i32 %.op.i, 3... can share an output register with another operation already assigned to main_signed_add_32_10
  %540 = add nsw i32 %.op.i, 3... can share an output register with another operation already assigned to main_signed_add_32_11
  %540 = add nsw i32 %.op.i, 3... can share an output register with another operation already assigned to main_signed_add_32_12
  %540 = add nsw i32 %.op.i, 3... can share an output register with another operation already assigned to main_signed_add_32_13
  %540 = add nsw i32 %.op.i, 3... can share an output register with another operation already assigned to main_signed_add_32_14
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         
  %540 = add nsw i32 %.op.i, 3... (idx: 0)        -905                          -244                          -74                           -24                           -24                           -24                           -34                           -54                           -54                           -64                           -64                           -64                           -104                          -4                            95                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         
  %540 = add nsw i32 %.op.i, 3... (idx: 0)        1                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %540 = add nsw i32 %.op.i, 3... (idx: 0) -> main_signed_add_32_0 (mux inputs: 92)
State: LEGUP_F_main_BB_threadi4
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  store i16 %541, i16* %19, al... hey can share an input with another operation already assigned to main_mem_dual_port_0
  store i16 %541, i16* %19, al... can share an output register with another operation already assigned to main_mem_dual_port_0
                                                  main_mem_dual_port_0          
  store i16 %541, i16* %19, al... (idx: 0)        -65                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          
  store i16 %541, i16* %19, al... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i16 %541, i16* %19, al... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 8)
State: LEGUP_F_main_BB_threadi4
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %gep124 = add i32 %gep_int12... can share an output register with another operation already assigned to main_signed_add_32_0
  %gep124 = add i32 %gep_int12... can share an output register with another operation already assigned to main_signed_add_32_1
  %gep124 = add i32 %gep_int12... can share an output register with another operation already assigned to main_signed_add_32_2
  %gep124 = add i32 %gep_int12... can share an output register with another operation already assigned to main_signed_add_32_3
  %gep124 = add i32 %gep_int12... can share an output register with another operation already assigned to main_signed_add_32_4
  %gep124 = add i32 %gep_int12... can share an output register with another operation already assigned to main_signed_add_32_5
  %gep124 = add i32 %gep_int12... can share an output register with another operation already assigned to main_signed_add_32_6
  %gep124 = add i32 %gep_int12... can share an output register with another operation already assigned to main_signed_add_32_7
  %gep124 = add i32 %gep_int12... can share an output register with another operation already assigned to main_signed_add_32_8
  %gep124 = add i32 %gep_int12... can share an output register with another operation already assigned to main_signed_add_32_9
  %gep124 = add i32 %gep_int12... can share an output register with another operation already assigned to main_signed_add_32_10
  %gep124 = add i32 %gep_int12... can share an output register with another operation already assigned to main_signed_add_32_11
  %gep124 = add i32 %gep_int12... can share an output register with another operation already assigned to main_signed_add_32_12
  %gep124 = add i32 %gep_int12... can share an output register with another operation already assigned to main_signed_add_32_13
  %gep124 = add i32 %gep_int12... can share an output register with another operation already assigned to main_signed_add_32_14
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         
  %gep124 = add i32 %gep_int12... (idx: 0)        -915                          -245                          -74                           -24                           -24                           -24                           -34                           -55                           -54                           -64                           -64                           -64                           -104                          -4                            95                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         
  %gep124 = add i32 %gep_int12... (idx: 0)        1                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %gep124 = add i32 %gep_int12... (idx: 0) -> main_signed_add_32_0 (mux inputs: 93)
State: LEGUP_F_main_BB_threadi4
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %543 = load i16* %542, align... can share an output register with another operation already assigned to main_mem_dual_port_0
                                                  main_mem_dual_port_0          
  %543 = load i16* %542, align... (idx: 0)        -75                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          
  %543 = load i16* %542, align... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %543 = load i16* %542, align... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 9)
State: LEGUP_F_main_BB_threadi4
Binding functional unit type: signed_multiply_32
Weight matrix for operation/function unit matching:
  %545 = mul i32 %544, 40960 can share an output register with another operation already assigned to main_signed_multiply_32_0
  %545 = mul i32 %544, 40960 can share an output register with another operation already assigned to main_signed_multiply_32_1
  %545 = mul i32 %544, 40960 can share an output register with another operation already assigned to main_signed_multiply_32_2
  %545 = mul i32 %544, 40960 can share an output register with another operation already assigned to main_signed_multiply_32_3
  %545 = mul i32 %544, 40960 can share an output register with another operation already assigned to main_signed_multiply_32_4
  %545 = mul i32 %544, 40960 can share an output register with another operation already assigned to main_signed_multiply_32_5
  %545 = mul i32 %544, 40960 can share an output register with another operation already assigned to main_signed_multiply_32_6
  %545 = mul i32 %544, 40960 can share an output register with another operation already assigned to main_signed_multiply_32_7
  %545 = mul i32 %544, 40960 can share an output register with another operation already assigned to main_signed_multiply_32_8
  %545 = mul i32 %544, 40960 can share an output register with another operation already assigned to main_signed_multiply_32_9
  %545 = mul i32 %544, 40960 can share an output register with another operation already assigned to main_signed_multiply_32_10
  %545 = mul i32 %544, 40960 can share an output register with another operation already assigned to main_signed_multiply_32_11
  %545 = mul i32 %544, 40960 can share an output register with another operation already assigned to main_signed_multiply_32_12
  %545 = mul i32 %544, 40960 can share an output register with another operation already assigned to main_signed_multiply_32_13
  %545 = mul i32 %544, 40960 can share an output register with another operation already assigned to main_signed_multiply_32_14
                                                  main_signed_multiply_32_0     main_signed_multiply_32_1     main_signed_multiply_32_2     main_signed_multiply_32_3     main_signed_multiply_32_4     main_signed_multiply_32_5     main_signed_multiply_32_6     main_signed_multiply_32_7     main_signed_multiply_32_8     main_signed_multiply_32_9     main_signed_multiply_32_10    main_signed_multiply_32_11    main_signed_multiply_32_12    main_signed_multiply_32_13    main_signed_multiply_32_14    
  %545 = mul i32 %544, 40960 (idx: 0)             -195                          -14                           -14                           -14                           -14                           -34                           -34                           -24                           -24                           -74                           -54                           -54                           -44                           -44                           -104                          
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_multiply_32_0     main_signed_multiply_32_1     main_signed_multiply_32_2     main_signed_multiply_32_3     main_signed_multiply_32_4     main_signed_multiply_32_5     main_signed_multiply_32_6     main_signed_multiply_32_7     main_signed_multiply_32_8     main_signed_multiply_32_9     main_signed_multiply_32_10    main_signed_multiply_32_11    main_signed_multiply_32_12    main_signed_multiply_32_13    main_signed_multiply_32_14    
  %545 = mul i32 %544, 40960 (idx: 0)             1                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %545 = mul i32 %544, 40960 (idx: 0) -> main_signed_multiply_32_0 (mux inputs: 21)
State: LEGUP_F_main_BB_threadi4
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %546 = add i32 %545, 40960 can share an output register with another operation already assigned to main_signed_add_32_0
  %546 = add i32 %545, 40960 can share an output register with another operation already assigned to main_signed_add_32_1
  %546 = add i32 %545, 40960 can share an output register with another operation already assigned to main_signed_add_32_2
  %546 = add i32 %545, 40960 can share an output register with another operation already assigned to main_signed_add_32_3
  %546 = add i32 %545, 40960 can share an output register with another operation already assigned to main_signed_add_32_4
  %546 = add i32 %545, 40960 can share an output register with another operation already assigned to main_signed_add_32_5
  %546 = add i32 %545, 40960 can share an output register with another operation already assigned to main_signed_add_32_6
  %546 = add i32 %545, 40960 can share an output register with another operation already assigned to main_signed_add_32_7
  %546 = add i32 %545, 40960 can share an output register with another operation already assigned to main_signed_add_32_8
  %546 = add i32 %545, 40960 can share an output register with another operation already assigned to main_signed_add_32_9
  %546 = add i32 %545, 40960 can share an output register with another operation already assigned to main_signed_add_32_10
  %546 = add i32 %545, 40960 can share an output register with another operation already assigned to main_signed_add_32_11
  %546 = add i32 %545, 40960 can share an output register with another operation already assigned to main_signed_add_32_12
  %546 = add i32 %545, 40960 can share an output register with another operation already assigned to main_signed_add_32_13
  %546 = add i32 %545, 40960 can share an output register with another operation already assigned to main_signed_add_32_14
  %548 = add nsw i32 %547, 256 can share an output register with another operation already assigned to main_signed_add_32_0
  %548 = add nsw i32 %547, 256 can share an output register with another operation already assigned to main_signed_add_32_1
  %548 = add nsw i32 %547, 256 can share an output register with another operation already assigned to main_signed_add_32_2
  %548 = add nsw i32 %547, 256 can share an output register with another operation already assigned to main_signed_add_32_3
  %548 = add nsw i32 %547, 256 can share an output register with another operation already assigned to main_signed_add_32_4
  %548 = add nsw i32 %547, 256 can share an output register with another operation already assigned to main_signed_add_32_5
  %548 = add nsw i32 %547, 256 can share an output register with another operation already assigned to main_signed_add_32_6
  %548 = add nsw i32 %547, 256 can share an output register with another operation already assigned to main_signed_add_32_7
  %548 = add nsw i32 %547, 256 can share an output register with another operation already assigned to main_signed_add_32_8
  %548 = add nsw i32 %547, 256 can share an output register with another operation already assigned to main_signed_add_32_9
  %548 = add nsw i32 %547, 256 can share an output register with another operation already assigned to main_signed_add_32_10
  %548 = add nsw i32 %547, 256 can share an output register with another operation already assigned to main_signed_add_32_11
  %548 = add nsw i32 %547, 256 can share an output register with another operation already assigned to main_signed_add_32_12
  %548 = add nsw i32 %547, 256 can share an output register with another operation already assigned to main_signed_add_32_13
  %548 = add nsw i32 %547, 256 can share an output register with another operation already assigned to main_signed_add_32_14
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         
  %546 = add i32 %545, 40960 (idx: 0)             -924                          -244                          -74                           -24                           -24                           -24                           -34                           -54                           -54                           -64                           -64                           -64                           -104                          -3                            95                            
  %548 = add nsw i32 %547, 256 (idx: 1)           -925                          -244                          -74                           -24                           -24                           -24                           -34                           -54                           -54                           -64                           -64                           -64                           -104                          -4                            95                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         
  %546 = add i32 %545, 40960 (idx: 0)             0                             1                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             
  %548 = add nsw i32 %547, 256 (idx: 1)           1                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %548 = add nsw i32 %547, 256 (idx: 1) -> main_signed_add_32_0 (mux inputs: 94)
  %546 = add i32 %545, 40960 (idx: 0) -> main_signed_add_32_1 (mux inputs: 26)
State: LEGUP_F_main_BB__555
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %556 = add nsw i32 %.op40.i,... can share an output register with another operation already assigned to main_signed_add_32_0
  %556 = add nsw i32 %.op40.i,... can share an output register with another operation already assigned to main_signed_add_32_1
  %556 = add nsw i32 %.op40.i,... can share an output register with another operation already assigned to main_signed_add_32_2
  %556 = add nsw i32 %.op40.i,... can share an output register with another operation already assigned to main_signed_add_32_3
  %556 = add nsw i32 %.op40.i,... can share an output register with another operation already assigned to main_signed_add_32_4
  %556 = add nsw i32 %.op40.i,... can share an output register with another operation already assigned to main_signed_add_32_5
  %556 = add nsw i32 %.op40.i,... can share an output register with another operation already assigned to main_signed_add_32_6
  %556 = add nsw i32 %.op40.i,... can share an output register with another operation already assigned to main_signed_add_32_7
  %556 = add nsw i32 %.op40.i,... can share an output register with another operation already assigned to main_signed_add_32_8
  %556 = add nsw i32 %.op40.i,... can share an output register with another operation already assigned to main_signed_add_32_9
  %556 = add nsw i32 %.op40.i,... can share an output register with another operation already assigned to main_signed_add_32_10
  %556 = add nsw i32 %.op40.i,... can share an output register with another operation already assigned to main_signed_add_32_11
  %556 = add nsw i32 %.op40.i,... can share an output register with another operation already assigned to main_signed_add_32_12
  %556 = add nsw i32 %.op40.i,... can share an output register with another operation already assigned to main_signed_add_32_13
  %556 = add nsw i32 %.op40.i,... can share an output register with another operation already assigned to main_signed_add_32_14
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         
  %556 = add nsw i32 %.op40.i,... (idx: 0)        -935                          -254                          -74                           -24                           -24                           -24                           -34                           -54                           -54                           -64                           -64                           -64                           -104                          -4                            95                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         
  %556 = add nsw i32 %.op40.i,... (idx: 0)        1                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %556 = add nsw i32 %.op40.i,... (idx: 0) -> main_signed_add_32_0 (mux inputs: 95)
State: LEGUP_F_main_BB_thread98i
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  store i16 %557, i16* %542, a... hey can share an input with another operation already assigned to main_mem_dual_port_0
  store i16 %557, i16* %542, a... can share an output register with another operation already assigned to main_mem_dual_port_0
                                                  main_mem_dual_port_0          
  store i16 %557, i16* %542, a... (idx: 0)        -85                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          
  store i16 %557, i16* %542, a... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i16 %557, i16* %542, a... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 10)
State: LEGUP_F_main_BB_thread98i
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %gep126 = add i32 %gep_int12... can share an output register with another operation already assigned to main_signed_add_32_0
  %gep126 = add i32 %gep_int12... can share an output register with another operation already assigned to main_signed_add_32_1
  %gep126 = add i32 %gep_int12... can share an output register with another operation already assigned to main_signed_add_32_2
  %gep126 = add i32 %gep_int12... can share an output register with another operation already assigned to main_signed_add_32_3
  %gep126 = add i32 %gep_int12... can share an output register with another operation already assigned to main_signed_add_32_4
  %gep126 = add i32 %gep_int12... can share an output register with another operation already assigned to main_signed_add_32_5
  %gep126 = add i32 %gep_int12... can share an output register with another operation already assigned to main_signed_add_32_6
  %gep126 = add i32 %gep_int12... can share an output register with another operation already assigned to main_signed_add_32_7
  %gep126 = add i32 %gep_int12... can share an output register with another operation already assigned to main_signed_add_32_8
  %gep126 = add i32 %gep_int12... can share an output register with another operation already assigned to main_signed_add_32_9
  %gep126 = add i32 %gep_int12... can share an output register with another operation already assigned to main_signed_add_32_10
  %gep126 = add i32 %gep_int12... can share an output register with another operation already assigned to main_signed_add_32_11
  %gep126 = add i32 %gep_int12... can share an output register with another operation already assigned to main_signed_add_32_12
  %gep126 = add i32 %gep_int12... can share an output register with another operation already assigned to main_signed_add_32_13
  %gep126 = add i32 %gep_int12... can share an output register with another operation already assigned to main_signed_add_32_14
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         
  %gep126 = add i32 %gep_int12... (idx: 0)        -945                          -255                          -74                           -24                           -24                           -24                           -34                           -54                           -55                           -64                           -64                           -64                           -104                          -4                            95                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         
  %gep126 = add i32 %gep_int12... (idx: 0)        1                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %gep126 = add i32 %gep_int12... (idx: 0) -> main_signed_add_32_0 (mux inputs: 96)
State: LEGUP_F_main_BB_thread98i
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %559 = load i16* %558, align... can share an output register with another operation already assigned to main_mem_dual_port_0
                                                  main_mem_dual_port_0          
  %559 = load i16* %558, align... (idx: 0)        -95                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          
  %559 = load i16* %558, align... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %559 = load i16* %558, align... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 11)
State: LEGUP_F_main_BB_thread98i
Binding functional unit type: signed_multiply_32
Weight matrix for operation/function unit matching:
  %561 = mul i32 %560, 40960 can share an output register with another operation already assigned to main_signed_multiply_32_0
  %561 = mul i32 %560, 40960 can share an output register with another operation already assigned to main_signed_multiply_32_1
  %561 = mul i32 %560, 40960 can share an output register with another operation already assigned to main_signed_multiply_32_2
  %561 = mul i32 %560, 40960 can share an output register with another operation already assigned to main_signed_multiply_32_3
  %561 = mul i32 %560, 40960 can share an output register with another operation already assigned to main_signed_multiply_32_4
  %561 = mul i32 %560, 40960 can share an output register with another operation already assigned to main_signed_multiply_32_5
  %561 = mul i32 %560, 40960 can share an output register with another operation already assigned to main_signed_multiply_32_6
  %561 = mul i32 %560, 40960 can share an output register with another operation already assigned to main_signed_multiply_32_7
  %561 = mul i32 %560, 40960 can share an output register with another operation already assigned to main_signed_multiply_32_8
  %561 = mul i32 %560, 40960 can share an output register with another operation already assigned to main_signed_multiply_32_9
  %561 = mul i32 %560, 40960 can share an output register with another operation already assigned to main_signed_multiply_32_10
  %561 = mul i32 %560, 40960 can share an output register with another operation already assigned to main_signed_multiply_32_11
  %561 = mul i32 %560, 40960 can share an output register with another operation already assigned to main_signed_multiply_32_12
  %561 = mul i32 %560, 40960 can share an output register with another operation already assigned to main_signed_multiply_32_13
  %561 = mul i32 %560, 40960 can share an output register with another operation already assigned to main_signed_multiply_32_14
                                                  main_signed_multiply_32_0     main_signed_multiply_32_1     main_signed_multiply_32_2     main_signed_multiply_32_3     main_signed_multiply_32_4     main_signed_multiply_32_5     main_signed_multiply_32_6     main_signed_multiply_32_7     main_signed_multiply_32_8     main_signed_multiply_32_9     main_signed_multiply_32_10    main_signed_multiply_32_11    main_signed_multiply_32_12    main_signed_multiply_32_13    main_signed_multiply_32_14    
  %561 = mul i32 %560, 40960 (idx: 0)             -205                          -14                           -14                           -14                           -14                           -34                           -34                           -24                           -24                           -74                           -54                           -54                           -44                           -44                           -104                          
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_multiply_32_0     main_signed_multiply_32_1     main_signed_multiply_32_2     main_signed_multiply_32_3     main_signed_multiply_32_4     main_signed_multiply_32_5     main_signed_multiply_32_6     main_signed_multiply_32_7     main_signed_multiply_32_8     main_signed_multiply_32_9     main_signed_multiply_32_10    main_signed_multiply_32_11    main_signed_multiply_32_12    main_signed_multiply_32_13    main_signed_multiply_32_14    
  %561 = mul i32 %560, 40960 (idx: 0)             1                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %561 = mul i32 %560, 40960 (idx: 0) -> main_signed_multiply_32_0 (mux inputs: 22)
State: LEGUP_F_main_BB_thread98i
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %562 = add i32 %561, 40960 can share an output register with another operation already assigned to main_signed_add_32_0
  %562 = add i32 %561, 40960 can share an output register with another operation already assigned to main_signed_add_32_1
  %562 = add i32 %561, 40960 can share an output register with another operation already assigned to main_signed_add_32_2
  %562 = add i32 %561, 40960 can share an output register with another operation already assigned to main_signed_add_32_3
  %562 = add i32 %561, 40960 can share an output register with another operation already assigned to main_signed_add_32_4
  %562 = add i32 %561, 40960 can share an output register with another operation already assigned to main_signed_add_32_5
  %562 = add i32 %561, 40960 can share an output register with another operation already assigned to main_signed_add_32_6
  %562 = add i32 %561, 40960 can share an output register with another operation already assigned to main_signed_add_32_7
  %562 = add i32 %561, 40960 can share an output register with another operation already assigned to main_signed_add_32_8
  %562 = add i32 %561, 40960 can share an output register with another operation already assigned to main_signed_add_32_9
  %562 = add i32 %561, 40960 can share an output register with another operation already assigned to main_signed_add_32_10
  %562 = add i32 %561, 40960 can share an output register with another operation already assigned to main_signed_add_32_11
  %562 = add i32 %561, 40960 can share an output register with another operation already assigned to main_signed_add_32_12
  %562 = add i32 %561, 40960 can share an output register with another operation already assigned to main_signed_add_32_13
  %562 = add i32 %561, 40960 can share an output register with another operation already assigned to main_signed_add_32_14
  %564 = add nsw i32 %563, 204... can share an output register with another operation already assigned to main_signed_add_32_0
  %564 = add nsw i32 %563, 204... can share an output register with another operation already assigned to main_signed_add_32_1
  %564 = add nsw i32 %563, 204... can share an output register with another operation already assigned to main_signed_add_32_2
  %564 = add nsw i32 %563, 204... can share an output register with another operation already assigned to main_signed_add_32_3
  %564 = add nsw i32 %563, 204... can share an output register with another operation already assigned to main_signed_add_32_4
  %564 = add nsw i32 %563, 204... can share an output register with another operation already assigned to main_signed_add_32_5
  %564 = add nsw i32 %563, 204... can share an output register with another operation already assigned to main_signed_add_32_6
  %564 = add nsw i32 %563, 204... can share an output register with another operation already assigned to main_signed_add_32_7
  %564 = add nsw i32 %563, 204... can share an output register with another operation already assigned to main_signed_add_32_8
  %564 = add nsw i32 %563, 204... can share an output register with another operation already assigned to main_signed_add_32_9
  %564 = add nsw i32 %563, 204... can share an output register with another operation already assigned to main_signed_add_32_10
  %564 = add nsw i32 %563, 204... can share an output register with another operation already assigned to main_signed_add_32_11
  %564 = add nsw i32 %563, 204... can share an output register with another operation already assigned to main_signed_add_32_12
  %564 = add nsw i32 %563, 204... can share an output register with another operation already assigned to main_signed_add_32_13
  %564 = add nsw i32 %563, 204... can share an output register with another operation already assigned to main_signed_add_32_14
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         
  %562 = add i32 %561, 40960 (idx: 0)             -954                          -254                          -74                           -24                           -24                           -24                           -34                           -54                           -54                           -64                           -64                           -64                           -104                          -3                            95                            
  %564 = add nsw i32 %563, 204... (idx: 1)        -955                          -254                          -74                           -24                           -24                           -24                           -34                           -54                           -54                           -64                           -64                           -64                           -104                          -4                            95                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         
  %562 = add i32 %561, 40960 (idx: 0)             0                             1                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             
  %564 = add nsw i32 %563, 204... (idx: 1)        1                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %564 = add nsw i32 %563, 204... (idx: 1) -> main_signed_add_32_0 (mux inputs: 97)
  %562 = add i32 %561, 40960 (idx: 0) -> main_signed_add_32_1 (mux inputs: 27)
State: LEGUP_F_main_BB__566
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %.op45.i = add nsw i32 %568,... can share an output register with another operation already assigned to main_signed_add_32_0
  %.op45.i = add nsw i32 %568,... can share an output register with another operation already assigned to main_signed_add_32_1
  %.op45.i = add nsw i32 %568,... can share an output register with another operation already assigned to main_signed_add_32_2
  %.op45.i = add nsw i32 %568,... can share an output register with another operation already assigned to main_signed_add_32_3
  %.op45.i = add nsw i32 %568,... can share an output register with another operation already assigned to main_signed_add_32_4
  %.op45.i = add nsw i32 %568,... can share an output register with another operation already assigned to main_signed_add_32_5
  %.op45.i = add nsw i32 %568,... can share an output register with another operation already assigned to main_signed_add_32_6
  %.op45.i = add nsw i32 %568,... can share an output register with another operation already assigned to main_signed_add_32_7
  %.op45.i = add nsw i32 %568,... can share an output register with another operation already assigned to main_signed_add_32_8
  %.op45.i = add nsw i32 %568,... can share an output register with another operation already assigned to main_signed_add_32_9
  %.op45.i = add nsw i32 %568,... can share an output register with another operation already assigned to main_signed_add_32_10
  %.op45.i = add nsw i32 %568,... can share an output register with another operation already assigned to main_signed_add_32_11
  %.op45.i = add nsw i32 %568,... can share an output register with another operation already assigned to main_signed_add_32_12
  %.op45.i = add nsw i32 %568,... can share an output register with another operation already assigned to main_signed_add_32_13
  %.op45.i = add nsw i32 %568,... can share an output register with another operation already assigned to main_signed_add_32_14
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         
  %.op45.i = add nsw i32 %568,... (idx: 0)        -965                          -264                          -74                           -24                           -24                           -24                           -34                           -54                           -54                           -64                           -64                           -64                           -104                          -4                            95                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         
  %.op45.i = add nsw i32 %568,... (idx: 0)        1                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %.op45.i = add nsw i32 %568,... (idx: 0) -> main_signed_add_32_0 (mux inputs: 98)
State: LEGUP_F_main_BB__574
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %575 = add nsw i32 %.op49.i,... can share an output register with another operation already assigned to main_signed_add_32_0
  %575 = add nsw i32 %.op49.i,... can share an output register with another operation already assigned to main_signed_add_32_1
  %575 = add nsw i32 %.op49.i,... can share an output register with another operation already assigned to main_signed_add_32_2
  %575 = add nsw i32 %.op49.i,... can share an output register with another operation already assigned to main_signed_add_32_3
  %575 = add nsw i32 %.op49.i,... can share an output register with another operation already assigned to main_signed_add_32_4
  %575 = add nsw i32 %.op49.i,... can share an output register with another operation already assigned to main_signed_add_32_5
  %575 = add nsw i32 %.op49.i,... can share an output register with another operation already assigned to main_signed_add_32_6
  %575 = add nsw i32 %.op49.i,... can share an output register with another operation already assigned to main_signed_add_32_7
  %575 = add nsw i32 %.op49.i,... can share an output register with another operation already assigned to main_signed_add_32_8
  %575 = add nsw i32 %.op49.i,... can share an output register with another operation already assigned to main_signed_add_32_9
  %575 = add nsw i32 %.op49.i,... can share an output register with another operation already assigned to main_signed_add_32_10
  %575 = add nsw i32 %.op49.i,... can share an output register with another operation already assigned to main_signed_add_32_11
  %575 = add nsw i32 %.op49.i,... can share an output register with another operation already assigned to main_signed_add_32_12
  %575 = add nsw i32 %.op49.i,... can share an output register with another operation already assigned to main_signed_add_32_13
  %575 = add nsw i32 %.op49.i,... can share an output register with another operation already assigned to main_signed_add_32_14
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         
  %575 = add nsw i32 %.op49.i,... (idx: 0)        -975                          -264                          -74                           -24                           -24                           -24                           -34                           -54                           -54                           -64                           -64                           -64                           -104                          -4                            95                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         
  %575 = add nsw i32 %.op49.i,... (idx: 0)        1                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %575 = add nsw i32 %.op49.i,... (idx: 0) -> main_signed_add_32_0 (mux inputs: 99)
State: LEGUP_F_main_BB_thread102i
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  store i16 %576, i16* %558, a... hey can share an input with another operation already assigned to main_mem_dual_port_0
  store i16 %576, i16* %558, a... can share an output register with another operation already assigned to main_mem_dual_port_0
                                                  main_mem_dual_port_0          
  store i16 %576, i16* %558, a... (idx: 0)        -105                          
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          
  store i16 %576, i16* %558, a... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i16 %576, i16* %558, a... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 12)
State: LEGUP_F_main_BB_thread102i
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %gep128 = add i32 %gep_int12... can share an output register with another operation already assigned to main_signed_add_32_0
  %gep128 = add i32 %gep_int12... can share an output register with another operation already assigned to main_signed_add_32_1
  %gep128 = add i32 %gep_int12... can share an output register with another operation already assigned to main_signed_add_32_2
  %gep128 = add i32 %gep_int12... can share an output register with another operation already assigned to main_signed_add_32_3
  %gep128 = add i32 %gep_int12... can share an output register with another operation already assigned to main_signed_add_32_4
  %gep128 = add i32 %gep_int12... can share an output register with another operation already assigned to main_signed_add_32_5
  %gep128 = add i32 %gep_int12... can share an output register with another operation already assigned to main_signed_add_32_6
  %gep128 = add i32 %gep_int12... can share an output register with another operation already assigned to main_signed_add_32_7
  %gep128 = add i32 %gep_int12... can share an output register with another operation already assigned to main_signed_add_32_8
  %gep128 = add i32 %gep_int12... can share an output register with another operation already assigned to main_signed_add_32_9
  %gep128 = add i32 %gep_int12... can share an output register with another operation already assigned to main_signed_add_32_10
  %gep128 = add i32 %gep_int12... can share an output register with another operation already assigned to main_signed_add_32_11
  %gep128 = add i32 %gep_int12... can share an output register with another operation already assigned to main_signed_add_32_12
  %gep128 = add i32 %gep_int12... can share an output register with another operation already assigned to main_signed_add_32_13
  %gep128 = add i32 %gep_int12... can share an output register with another operation already assigned to main_signed_add_32_14
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         
  %gep128 = add i32 %gep_int12... (idx: 0)        -985                          -264                          -75                           -24                           -24                           -24                           -34                           -54                           -54                           -65                           -64                           -64                           -104                          -4                            95                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         
  %gep128 = add i32 %gep_int12... (idx: 0)        1                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %gep128 = add i32 %gep_int12... (idx: 0) -> main_signed_add_32_0 (mux inputs: 100)
State: LEGUP_F_main_BB_thread102i
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %578 = load i16* %577, align... can share an output register with another operation already assigned to main_mem_dual_port_0
                                                  main_mem_dual_port_0          
  %578 = load i16* %577, align... (idx: 0)        -115                          
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          
  %578 = load i16* %577, align... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %578 = load i16* %577, align... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 13)
State: LEGUP_F_main_BB_thread102i
Binding functional unit type: signed_multiply_32
Weight matrix for operation/function unit matching:
  %580 = mul i32 %579, 40960 can share an output register with another operation already assigned to main_signed_multiply_32_0
  %580 = mul i32 %579, 40960 can share an output register with another operation already assigned to main_signed_multiply_32_1
  %580 = mul i32 %579, 40960 can share an output register with another operation already assigned to main_signed_multiply_32_2
  %580 = mul i32 %579, 40960 can share an output register with another operation already assigned to main_signed_multiply_32_3
  %580 = mul i32 %579, 40960 can share an output register with another operation already assigned to main_signed_multiply_32_4
  %580 = mul i32 %579, 40960 can share an output register with another operation already assigned to main_signed_multiply_32_5
  %580 = mul i32 %579, 40960 can share an output register with another operation already assigned to main_signed_multiply_32_6
  %580 = mul i32 %579, 40960 can share an output register with another operation already assigned to main_signed_multiply_32_7
  %580 = mul i32 %579, 40960 can share an output register with another operation already assigned to main_signed_multiply_32_8
  %580 = mul i32 %579, 40960 can share an output register with another operation already assigned to main_signed_multiply_32_9
  %580 = mul i32 %579, 40960 can share an output register with another operation already assigned to main_signed_multiply_32_10
  %580 = mul i32 %579, 40960 can share an output register with another operation already assigned to main_signed_multiply_32_11
  %580 = mul i32 %579, 40960 can share an output register with another operation already assigned to main_signed_multiply_32_12
  %580 = mul i32 %579, 40960 can share an output register with another operation already assigned to main_signed_multiply_32_13
  %580 = mul i32 %579, 40960 can share an output register with another operation already assigned to main_signed_multiply_32_14
                                                  main_signed_multiply_32_0     main_signed_multiply_32_1     main_signed_multiply_32_2     main_signed_multiply_32_3     main_signed_multiply_32_4     main_signed_multiply_32_5     main_signed_multiply_32_6     main_signed_multiply_32_7     main_signed_multiply_32_8     main_signed_multiply_32_9     main_signed_multiply_32_10    main_signed_multiply_32_11    main_signed_multiply_32_12    main_signed_multiply_32_13    main_signed_multiply_32_14    
  %580 = mul i32 %579, 40960 (idx: 0)             -215                          -14                           -14                           -14                           -14                           -34                           -34                           -24                           -24                           -74                           -54                           -54                           -44                           -44                           -104                          
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_multiply_32_0     main_signed_multiply_32_1     main_signed_multiply_32_2     main_signed_multiply_32_3     main_signed_multiply_32_4     main_signed_multiply_32_5     main_signed_multiply_32_6     main_signed_multiply_32_7     main_signed_multiply_32_8     main_signed_multiply_32_9     main_signed_multiply_32_10    main_signed_multiply_32_11    main_signed_multiply_32_12    main_signed_multiply_32_13    main_signed_multiply_32_14    
  %580 = mul i32 %579, 40960 (idx: 0)             1                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %580 = mul i32 %579, 40960 (idx: 0) -> main_signed_multiply_32_0 (mux inputs: 23)
State: LEGUP_F_main_BB_thread102i
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %581 = add i32 %580, 40960 can share an output register with another operation already assigned to main_signed_add_32_0
  %581 = add i32 %580, 40960 can share an output register with another operation already assigned to main_signed_add_32_1
  %581 = add i32 %580, 40960 can share an output register with another operation already assigned to main_signed_add_32_2
  %581 = add i32 %580, 40960 can share an output register with another operation already assigned to main_signed_add_32_3
  %581 = add i32 %580, 40960 can share an output register with another operation already assigned to main_signed_add_32_4
  %581 = add i32 %580, 40960 can share an output register with another operation already assigned to main_signed_add_32_5
  %581 = add i32 %580, 40960 can share an output register with another operation already assigned to main_signed_add_32_6
  %581 = add i32 %580, 40960 can share an output register with another operation already assigned to main_signed_add_32_7
  %581 = add i32 %580, 40960 can share an output register with another operation already assigned to main_signed_add_32_8
  %581 = add i32 %580, 40960 can share an output register with another operation already assigned to main_signed_add_32_9
  %581 = add i32 %580, 40960 can share an output register with another operation already assigned to main_signed_add_32_10
  %581 = add i32 %580, 40960 can share an output register with another operation already assigned to main_signed_add_32_11
  %581 = add i32 %580, 40960 can share an output register with another operation already assigned to main_signed_add_32_12
  %581 = add i32 %580, 40960 can share an output register with another operation already assigned to main_signed_add_32_13
  %581 = add i32 %580, 40960 can share an output register with another operation already assigned to main_signed_add_32_14
  %583 = add nsw i32 %582, -25... can share an output register with another operation already assigned to main_signed_add_32_0
  %583 = add nsw i32 %582, -25... can share an output register with another operation already assigned to main_signed_add_32_1
  %583 = add nsw i32 %582, -25... can share an output register with another operation already assigned to main_signed_add_32_2
  %583 = add nsw i32 %582, -25... can share an output register with another operation already assigned to main_signed_add_32_3
  %583 = add nsw i32 %582, -25... can share an output register with another operation already assigned to main_signed_add_32_4
  %583 = add nsw i32 %582, -25... can share an output register with another operation already assigned to main_signed_add_32_5
  %583 = add nsw i32 %582, -25... can share an output register with another operation already assigned to main_signed_add_32_6
  %583 = add nsw i32 %582, -25... can share an output register with another operation already assigned to main_signed_add_32_7
  %583 = add nsw i32 %582, -25... can share an output register with another operation already assigned to main_signed_add_32_8
  %583 = add nsw i32 %582, -25... can share an output register with another operation already assigned to main_signed_add_32_9
  %583 = add nsw i32 %582, -25... can share an output register with another operation already assigned to main_signed_add_32_10
  %583 = add nsw i32 %582, -25... can share an output register with another operation already assigned to main_signed_add_32_11
  %583 = add nsw i32 %582, -25... can share an output register with another operation already assigned to main_signed_add_32_12
  %583 = add nsw i32 %582, -25... can share an output register with another operation already assigned to main_signed_add_32_13
  %583 = add nsw i32 %582, -25... can share an output register with another operation already assigned to main_signed_add_32_14
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         
  %581 = add i32 %580, 40960 (idx: 0)             -994                          -264                          -74                           -24                           -24                           -24                           -34                           -54                           -54                           -64                           -64                           -64                           -104                          -3                            95                            
  %583 = add nsw i32 %582, -25... (idx: 1)        -994                          -264                          -74                           -24                           -24                           -24                           -34                           -54                           -54                           -64                           -64                           -64                           -104                          -4                            95                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         
  %581 = add i32 %580, 40960 (idx: 0)             1                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             
  %583 = add nsw i32 %582, -25... (idx: 1)        0                             1                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %581 = add i32 %580, 40960 (idx: 0) -> main_signed_add_32_0 (mux inputs: 101)
  %583 = add nsw i32 %582, -25... (idx: 1) -> main_signed_add_32_1 (mux inputs: 28)
State: LEGUP_F_main_BB__585
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %.op54.i = add nsw i32 %587,... can share an output register with another operation already assigned to main_signed_add_32_0
  %.op54.i = add nsw i32 %587,... can share an output register with another operation already assigned to main_signed_add_32_1
  %.op54.i = add nsw i32 %587,... can share an output register with another operation already assigned to main_signed_add_32_2
  %.op54.i = add nsw i32 %587,... can share an output register with another operation already assigned to main_signed_add_32_3
  %.op54.i = add nsw i32 %587,... can share an output register with another operation already assigned to main_signed_add_32_4
  %.op54.i = add nsw i32 %587,... can share an output register with another operation already assigned to main_signed_add_32_5
  %.op54.i = add nsw i32 %587,... can share an output register with another operation already assigned to main_signed_add_32_6
  %.op54.i = add nsw i32 %587,... can share an output register with another operation already assigned to main_signed_add_32_7
  %.op54.i = add nsw i32 %587,... can share an output register with another operation already assigned to main_signed_add_32_8
  %.op54.i = add nsw i32 %587,... can share an output register with another operation already assigned to main_signed_add_32_9
  %.op54.i = add nsw i32 %587,... can share an output register with another operation already assigned to main_signed_add_32_10
  %.op54.i = add nsw i32 %587,... can share an output register with another operation already assigned to main_signed_add_32_11
  %.op54.i = add nsw i32 %587,... can share an output register with another operation already assigned to main_signed_add_32_12
  %.op54.i = add nsw i32 %587,... can share an output register with another operation already assigned to main_signed_add_32_13
  %.op54.i = add nsw i32 %587,... can share an output register with another operation already assigned to main_signed_add_32_14
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         
  %.op54.i = add nsw i32 %587,... (idx: 0)        -1005                         -274                          -74                           -24                           -24                           -24                           -34                           -54                           -54                           -64                           -64                           -64                           -104                          -4                            95                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         
  %.op54.i = add nsw i32 %587,... (idx: 0)        1                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %.op54.i = add nsw i32 %587,... (idx: 0) -> main_signed_add_32_0 (mux inputs: 102)
State: LEGUP_F_main_BB__593
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %594 = add nsw i32 %.op58.i,... can share an output register with another operation already assigned to main_signed_add_32_0
  %594 = add nsw i32 %.op58.i,... can share an output register with another operation already assigned to main_signed_add_32_1
  %594 = add nsw i32 %.op58.i,... can share an output register with another operation already assigned to main_signed_add_32_2
  %594 = add nsw i32 %.op58.i,... can share an output register with another operation already assigned to main_signed_add_32_3
  %594 = add nsw i32 %.op58.i,... can share an output register with another operation already assigned to main_signed_add_32_4
  %594 = add nsw i32 %.op58.i,... can share an output register with another operation already assigned to main_signed_add_32_5
  %594 = add nsw i32 %.op58.i,... can share an output register with another operation already assigned to main_signed_add_32_6
  %594 = add nsw i32 %.op58.i,... can share an output register with another operation already assigned to main_signed_add_32_7
  %594 = add nsw i32 %.op58.i,... can share an output register with another operation already assigned to main_signed_add_32_8
  %594 = add nsw i32 %.op58.i,... can share an output register with another operation already assigned to main_signed_add_32_9
  %594 = add nsw i32 %.op58.i,... can share an output register with another operation already assigned to main_signed_add_32_10
  %594 = add nsw i32 %.op58.i,... can share an output register with another operation already assigned to main_signed_add_32_11
  %594 = add nsw i32 %.op58.i,... can share an output register with another operation already assigned to main_signed_add_32_12
  %594 = add nsw i32 %.op58.i,... can share an output register with another operation already assigned to main_signed_add_32_13
  %594 = add nsw i32 %.op58.i,... can share an output register with another operation already assigned to main_signed_add_32_14
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         
  %594 = add nsw i32 %.op58.i,... (idx: 0)        -1015                         -274                          -74                           -24                           -24                           -24                           -34                           -54                           -54                           -64                           -64                           -64                           -104                          -4                            95                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         
  %594 = add nsw i32 %.op58.i,... (idx: 0)        1                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %594 = add nsw i32 %.op58.i,... (idx: 0) -> main_signed_add_32_0 (mux inputs: 103)
State: LEGUP_F_main_BB_thread107i
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  store i16 %595, i16* %577, a... hey can share an input with another operation already assigned to main_mem_dual_port_0
  store i16 %595, i16* %577, a... can share an output register with another operation already assigned to main_mem_dual_port_0
                                                  main_mem_dual_port_0          
  store i16 %595, i16* %577, a... (idx: 0)        -125                          
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          
  store i16 %595, i16* %577, a... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i16 %595, i16* %577, a... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 14)
State: LEGUP_F_main_BB_thread107i
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %gep130 = add i32 %gep_int12... can share an output register with another operation already assigned to main_signed_add_32_0
  %gep130 = add i32 %gep_int12... can share an output register with another operation already assigned to main_signed_add_32_1
  %gep130 = add i32 %gep_int12... can share an output register with another operation already assigned to main_signed_add_32_2
  %gep130 = add i32 %gep_int12... can share an output register with another operation already assigned to main_signed_add_32_3
  %gep130 = add i32 %gep_int12... can share an output register with another operation already assigned to main_signed_add_32_4
  %gep130 = add i32 %gep_int12... can share an output register with another operation already assigned to main_signed_add_32_5
  %gep130 = add i32 %gep_int12... can share an output register with another operation already assigned to main_signed_add_32_6
  %gep130 = add i32 %gep_int12... can share an output register with another operation already assigned to main_signed_add_32_7
  %gep130 = add i32 %gep_int12... can share an output register with another operation already assigned to main_signed_add_32_8
  %gep130 = add i32 %gep_int12... can share an output register with another operation already assigned to main_signed_add_32_9
  %gep130 = add i32 %gep_int12... can share an output register with another operation already assigned to main_signed_add_32_10
  %gep130 = add i32 %gep_int12... can share an output register with another operation already assigned to main_signed_add_32_11
  %gep130 = add i32 %gep_int12... can share an output register with another operation already assigned to main_signed_add_32_12
  %gep130 = add i32 %gep_int12... can share an output register with another operation already assigned to main_signed_add_32_13
  %gep130 = add i32 %gep_int12... can share an output register with another operation already assigned to main_signed_add_32_14
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         
  %gep130 = add i32 %gep_int12... (idx: 0)        -1025                         -274                          -74                           -25                           -24                           -24                           -34                           -54                           -55                           -64                           -65                           -64                           -104                          -4                            95                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         
  %gep130 = add i32 %gep_int12... (idx: 0)        1                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %gep130 = add i32 %gep_int12... (idx: 0) -> main_signed_add_32_0 (mux inputs: 104)
State: LEGUP_F_main_BB_thread107i
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %597 = load i16* %596, align... can share an output register with another operation already assigned to main_mem_dual_port_0
                                                  main_mem_dual_port_0          
  %597 = load i16* %596, align... (idx: 0)        -135                          
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          
  %597 = load i16* %596, align... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %597 = load i16* %596, align... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 15)
State: LEGUP_F_main_BB_thread107i
Binding functional unit type: signed_multiply_32
Weight matrix for operation/function unit matching:
  %599 = mul i32 %598, 27928 can share an output register with another operation already assigned to main_signed_multiply_32_0
  %599 = mul i32 %598, 27928 can share an output register with another operation already assigned to main_signed_multiply_32_1
  %599 = mul i32 %598, 27928 can share an output register with another operation already assigned to main_signed_multiply_32_2
  %599 = mul i32 %598, 27928 can share an output register with another operation already assigned to main_signed_multiply_32_3
  %599 = mul i32 %598, 27928 can share an output register with another operation already assigned to main_signed_multiply_32_4
  %599 = mul i32 %598, 27928 can share an output register with another operation already assigned to main_signed_multiply_32_5
  %599 = mul i32 %598, 27928 can share an output register with another operation already assigned to main_signed_multiply_32_6
  %599 = mul i32 %598, 27928 can share an output register with another operation already assigned to main_signed_multiply_32_7
  %599 = mul i32 %598, 27928 can share an output register with another operation already assigned to main_signed_multiply_32_8
  %599 = mul i32 %598, 27928 can share an output register with another operation already assigned to main_signed_multiply_32_9
  %599 = mul i32 %598, 27928 can share an output register with another operation already assigned to main_signed_multiply_32_10
  %599 = mul i32 %598, 27928 can share an output register with another operation already assigned to main_signed_multiply_32_11
  %599 = mul i32 %598, 27928 can share an output register with another operation already assigned to main_signed_multiply_32_12
  %599 = mul i32 %598, 27928 can share an output register with another operation already assigned to main_signed_multiply_32_13
  %599 = mul i32 %598, 27928 can share an output register with another operation already assigned to main_signed_multiply_32_14
                                                  main_signed_multiply_32_0     main_signed_multiply_32_1     main_signed_multiply_32_2     main_signed_multiply_32_3     main_signed_multiply_32_4     main_signed_multiply_32_5     main_signed_multiply_32_6     main_signed_multiply_32_7     main_signed_multiply_32_8     main_signed_multiply_32_9     main_signed_multiply_32_10    main_signed_multiply_32_11    main_signed_multiply_32_12    main_signed_multiply_32_13    main_signed_multiply_32_14    
  %599 = mul i32 %598, 27928 (idx: 0)             -225                          -14                           -14                           -14                           -14                           -34                           -34                           -24                           -24                           -74                           -54                           -54                           -44                           -44                           -104                          
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_multiply_32_0     main_signed_multiply_32_1     main_signed_multiply_32_2     main_signed_multiply_32_3     main_signed_multiply_32_4     main_signed_multiply_32_5     main_signed_multiply_32_6     main_signed_multiply_32_7     main_signed_multiply_32_8     main_signed_multiply_32_9     main_signed_multiply_32_10    main_signed_multiply_32_11    main_signed_multiply_32_12    main_signed_multiply_32_13    main_signed_multiply_32_14    
  %599 = mul i32 %598, 27928 (idx: 0)             1                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %599 = mul i32 %598, 27928 (idx: 0) -> main_signed_multiply_32_0 (mux inputs: 24)
State: LEGUP_F_main_BB_thread107i
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %600 = add i32 %599, 27928 can share an output register with another operation already assigned to main_signed_add_32_0
  %600 = add i32 %599, 27928 can share an output register with another operation already assigned to main_signed_add_32_1
  %600 = add i32 %599, 27928 can share an output register with another operation already assigned to main_signed_add_32_2
  %600 = add i32 %599, 27928 can share an output register with another operation already assigned to main_signed_add_32_3
  %600 = add i32 %599, 27928 can share an output register with another operation already assigned to main_signed_add_32_4
  %600 = add i32 %599, 27928 can share an output register with another operation already assigned to main_signed_add_32_5
  %600 = add i32 %599, 27928 can share an output register with another operation already assigned to main_signed_add_32_6
  %600 = add i32 %599, 27928 can share an output register with another operation already assigned to main_signed_add_32_7
  %600 = add i32 %599, 27928 can share an output register with another operation already assigned to main_signed_add_32_8
  %600 = add i32 %599, 27928 can share an output register with another operation already assigned to main_signed_add_32_9
  %600 = add i32 %599, 27928 can share an output register with another operation already assigned to main_signed_add_32_10
  %600 = add i32 %599, 27928 can share an output register with another operation already assigned to main_signed_add_32_11
  %600 = add i32 %599, 27928 can share an output register with another operation already assigned to main_signed_add_32_12
  %600 = add i32 %599, 27928 can share an output register with another operation already assigned to main_signed_add_32_13
  %600 = add i32 %599, 27928 can share an output register with another operation already assigned to main_signed_add_32_14
  %602 = add nsw i32 %601, 94 can share an output register with another operation already assigned to main_signed_add_32_0
  %602 = add nsw i32 %601, 94 can share an output register with another operation already assigned to main_signed_add_32_1
  %602 = add nsw i32 %601, 94 can share an output register with another operation already assigned to main_signed_add_32_2
  %602 = add nsw i32 %601, 94 can share an output register with another operation already assigned to main_signed_add_32_3
  %602 = add nsw i32 %601, 94 can share an output register with another operation already assigned to main_signed_add_32_4
  %602 = add nsw i32 %601, 94 can share an output register with another operation already assigned to main_signed_add_32_5
  %602 = add nsw i32 %601, 94 can share an output register with another operation already assigned to main_signed_add_32_6
  %602 = add nsw i32 %601, 94 can share an output register with another operation already assigned to main_signed_add_32_7
  %602 = add nsw i32 %601, 94 can share an output register with another operation already assigned to main_signed_add_32_8
  %602 = add nsw i32 %601, 94 can share an output register with another operation already assigned to main_signed_add_32_9
  %602 = add nsw i32 %601, 94 can share an output register with another operation already assigned to main_signed_add_32_10
  %602 = add nsw i32 %601, 94 can share an output register with another operation already assigned to main_signed_add_32_11
  %602 = add nsw i32 %601, 94 can share an output register with another operation already assigned to main_signed_add_32_12
  %602 = add nsw i32 %601, 94 can share an output register with another operation already assigned to main_signed_add_32_13
  %602 = add nsw i32 %601, 94 can share an output register with another operation already assigned to main_signed_add_32_14
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         
  %600 = add i32 %599, 27928 (idx: 0)             -1034                         -274                          -74                           -24                           -24                           -24                           -34                           -54                           -54                           -64                           -64                           -64                           -104                          -3                            95                            
  %602 = add nsw i32 %601, 94 (idx: 1)            -1035                         -274                          -74                           -24                           -24                           -24                           -34                           -54                           -54                           -64                           -64                           -64                           -104                          -4                            95                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         
  %600 = add i32 %599, 27928 (idx: 0)             0                             1                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             
  %602 = add nsw i32 %601, 94 (idx: 1)            1                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %602 = add nsw i32 %601, 94 (idx: 1) -> main_signed_add_32_0 (mux inputs: 105)
  %600 = add i32 %599, 27928 (idx: 0) -> main_signed_add_32_1 (mux inputs: 29)
State: LEGUP_F_main_BB__604
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %.op63.i = add nsw i32 %606,... can share an output register with another operation already assigned to main_signed_add_32_0
  %.op63.i = add nsw i32 %606,... can share an output register with another operation already assigned to main_signed_add_32_1
  %.op63.i = add nsw i32 %606,... can share an output register with another operation already assigned to main_signed_add_32_2
  %.op63.i = add nsw i32 %606,... can share an output register with another operation already assigned to main_signed_add_32_3
  %.op63.i = add nsw i32 %606,... can share an output register with another operation already assigned to main_signed_add_32_4
  %.op63.i = add nsw i32 %606,... can share an output register with another operation already assigned to main_signed_add_32_5
  %.op63.i = add nsw i32 %606,... can share an output register with another operation already assigned to main_signed_add_32_6
  %.op63.i = add nsw i32 %606,... can share an output register with another operation already assigned to main_signed_add_32_7
  %.op63.i = add nsw i32 %606,... can share an output register with another operation already assigned to main_signed_add_32_8
  %.op63.i = add nsw i32 %606,... can share an output register with another operation already assigned to main_signed_add_32_9
  %.op63.i = add nsw i32 %606,... can share an output register with another operation already assigned to main_signed_add_32_10
  %.op63.i = add nsw i32 %606,... can share an output register with another operation already assigned to main_signed_add_32_11
  %.op63.i = add nsw i32 %606,... can share an output register with another operation already assigned to main_signed_add_32_12
  %.op63.i = add nsw i32 %606,... can share an output register with another operation already assigned to main_signed_add_32_13
  %.op63.i = add nsw i32 %606,... can share an output register with another operation already assigned to main_signed_add_32_14
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         
  %.op63.i = add nsw i32 %606,... (idx: 0)        -1045                         -284                          -74                           -24                           -24                           -24                           -34                           -54                           -54                           -64                           -64                           -64                           -104                          -4                            95                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         
  %.op63.i = add nsw i32 %606,... (idx: 0)        1                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %.op63.i = add nsw i32 %606,... (idx: 0) -> main_signed_add_32_0 (mux inputs: 106)
State: LEGUP_F_main_BB__612
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %613 = add nsw i32 %.op67.i,... can share an output register with another operation already assigned to main_signed_add_32_0
  %613 = add nsw i32 %.op67.i,... can share an output register with another operation already assigned to main_signed_add_32_1
  %613 = add nsw i32 %.op67.i,... can share an output register with another operation already assigned to main_signed_add_32_2
  %613 = add nsw i32 %.op67.i,... can share an output register with another operation already assigned to main_signed_add_32_3
  %613 = add nsw i32 %.op67.i,... can share an output register with another operation already assigned to main_signed_add_32_4
  %613 = add nsw i32 %.op67.i,... can share an output register with another operation already assigned to main_signed_add_32_5
  %613 = add nsw i32 %.op67.i,... can share an output register with another operation already assigned to main_signed_add_32_6
  %613 = add nsw i32 %.op67.i,... can share an output register with another operation already assigned to main_signed_add_32_7
  %613 = add nsw i32 %.op67.i,... can share an output register with another operation already assigned to main_signed_add_32_8
  %613 = add nsw i32 %.op67.i,... can share an output register with another operation already assigned to main_signed_add_32_9
  %613 = add nsw i32 %.op67.i,... can share an output register with another operation already assigned to main_signed_add_32_10
  %613 = add nsw i32 %.op67.i,... can share an output register with another operation already assigned to main_signed_add_32_11
  %613 = add nsw i32 %.op67.i,... can share an output register with another operation already assigned to main_signed_add_32_12
  %613 = add nsw i32 %.op67.i,... can share an output register with another operation already assigned to main_signed_add_32_13
  %613 = add nsw i32 %.op67.i,... can share an output register with another operation already assigned to main_signed_add_32_14
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         
  %613 = add nsw i32 %.op67.i,... (idx: 0)        -1055                         -284                          -74                           -25                           -24                           -24                           -34                           -54                           -55                           -64                           -65                           -64                           -104                          -4                            95                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         
  %613 = add nsw i32 %.op67.i,... (idx: 0)        1                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %613 = add nsw i32 %.op67.i,... (idx: 0) -> main_signed_add_32_0 (mux inputs: 107)
State: LEGUP_F_main_BB_thread112i
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  store i16 %614, i16* %596, a... hey can share an input with another operation already assigned to main_mem_dual_port_0
  store i16 %614, i16* %596, a... can share an output register with another operation already assigned to main_mem_dual_port_0
                                                  main_mem_dual_port_0          
  store i16 %614, i16* %596, a... (idx: 0)        -145                          
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          
  store i16 %614, i16* %596, a... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i16 %614, i16* %596, a... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 16)
State: LEGUP_F_main_BB_thread112i
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %gep132 = add i32 %gep_int13... can share an output register with another operation already assigned to main_signed_add_32_0
  %gep132 = add i32 %gep_int13... can share an output register with another operation already assigned to main_signed_add_32_1
  %gep132 = add i32 %gep_int13... can share an output register with another operation already assigned to main_signed_add_32_2
  %gep132 = add i32 %gep_int13... can share an output register with another operation already assigned to main_signed_add_32_3
  %gep132 = add i32 %gep_int13... can share an output register with another operation already assigned to main_signed_add_32_4
  %gep132 = add i32 %gep_int13... can share an output register with another operation already assigned to main_signed_add_32_5
  %gep132 = add i32 %gep_int13... can share an output register with another operation already assigned to main_signed_add_32_6
  %gep132 = add i32 %gep_int13... can share an output register with another operation already assigned to main_signed_add_32_7
  %gep132 = add i32 %gep_int13... can share an output register with another operation already assigned to main_signed_add_32_8
  %gep132 = add i32 %gep_int13... can share an output register with another operation already assigned to main_signed_add_32_9
  %gep132 = add i32 %gep_int13... can share an output register with another operation already assigned to main_signed_add_32_10
  %gep132 = add i32 %gep_int13... can share an output register with another operation already assigned to main_signed_add_32_11
  %gep132 = add i32 %gep_int13... can share an output register with another operation already assigned to main_signed_add_32_12
  %gep132 = add i32 %gep_int13... can share an output register with another operation already assigned to main_signed_add_32_13
  %gep132 = add i32 %gep_int13... can share an output register with another operation already assigned to main_signed_add_32_14
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         
  %gep132 = add i32 %gep_int13... (idx: 0)        -1065                         -284                          -74                           -24                           -25                           -24                           -34                           -54                           -54                           -64                           -64                           -65                           -104                          -4                            95                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         
  %gep132 = add i32 %gep_int13... (idx: 0)        1                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %gep132 = add i32 %gep_int13... (idx: 0) -> main_signed_add_32_0 (mux inputs: 108)
State: LEGUP_F_main_BB_thread112i
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %616 = load i16* %615, align... can share an output register with another operation already assigned to main_mem_dual_port_0
                                                  main_mem_dual_port_0          
  %616 = load i16* %615, align... (idx: 0)        -155                          
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          
  %616 = load i16* %615, align... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %616 = load i16* %615, align... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 17)
State: LEGUP_F_main_BB_thread112i
Binding functional unit type: signed_multiply_32
Weight matrix for operation/function unit matching:
  %618 = mul i32 %617, 30720 can share an output register with another operation already assigned to main_signed_multiply_32_0
  %618 = mul i32 %617, 30720 can share an output register with another operation already assigned to main_signed_multiply_32_1
  %618 = mul i32 %617, 30720 can share an output register with another operation already assigned to main_signed_multiply_32_2
  %618 = mul i32 %617, 30720 can share an output register with another operation already assigned to main_signed_multiply_32_3
  %618 = mul i32 %617, 30720 can share an output register with another operation already assigned to main_signed_multiply_32_4
  %618 = mul i32 %617, 30720 can share an output register with another operation already assigned to main_signed_multiply_32_5
  %618 = mul i32 %617, 30720 can share an output register with another operation already assigned to main_signed_multiply_32_6
  %618 = mul i32 %617, 30720 can share an output register with another operation already assigned to main_signed_multiply_32_7
  %618 = mul i32 %617, 30720 can share an output register with another operation already assigned to main_signed_multiply_32_8
  %618 = mul i32 %617, 30720 can share an output register with another operation already assigned to main_signed_multiply_32_9
  %618 = mul i32 %617, 30720 can share an output register with another operation already assigned to main_signed_multiply_32_10
  %618 = mul i32 %617, 30720 can share an output register with another operation already assigned to main_signed_multiply_32_11
  %618 = mul i32 %617, 30720 can share an output register with another operation already assigned to main_signed_multiply_32_12
  %618 = mul i32 %617, 30720 can share an output register with another operation already assigned to main_signed_multiply_32_13
  %618 = mul i32 %617, 30720 can share an output register with another operation already assigned to main_signed_multiply_32_14
                                                  main_signed_multiply_32_0     main_signed_multiply_32_1     main_signed_multiply_32_2     main_signed_multiply_32_3     main_signed_multiply_32_4     main_signed_multiply_32_5     main_signed_multiply_32_6     main_signed_multiply_32_7     main_signed_multiply_32_8     main_signed_multiply_32_9     main_signed_multiply_32_10    main_signed_multiply_32_11    main_signed_multiply_32_12    main_signed_multiply_32_13    main_signed_multiply_32_14    
  %618 = mul i32 %617, 30720 (idx: 0)             -235                          -14                           -14                           -14                           -14                           -34                           -34                           -24                           -24                           -74                           -54                           -54                           -44                           -44                           -104                          
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_multiply_32_0     main_signed_multiply_32_1     main_signed_multiply_32_2     main_signed_multiply_32_3     main_signed_multiply_32_4     main_signed_multiply_32_5     main_signed_multiply_32_6     main_signed_multiply_32_7     main_signed_multiply_32_8     main_signed_multiply_32_9     main_signed_multiply_32_10    main_signed_multiply_32_11    main_signed_multiply_32_12    main_signed_multiply_32_13    main_signed_multiply_32_14    
  %618 = mul i32 %617, 30720 (idx: 0)             1                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %618 = mul i32 %617, 30720 (idx: 0) -> main_signed_multiply_32_0 (mux inputs: 25)
State: LEGUP_F_main_BB_thread112i
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %619 = add i32 %618, 30720 can share an output register with another operation already assigned to main_signed_add_32_0
  %619 = add i32 %618, 30720 can share an output register with another operation already assigned to main_signed_add_32_1
  %619 = add i32 %618, 30720 can share an output register with another operation already assigned to main_signed_add_32_2
  %619 = add i32 %618, 30720 can share an output register with another operation already assigned to main_signed_add_32_3
  %619 = add i32 %618, 30720 can share an output register with another operation already assigned to main_signed_add_32_4
  %619 = add i32 %618, 30720 can share an output register with another operation already assigned to main_signed_add_32_5
  %619 = add i32 %618, 30720 can share an output register with another operation already assigned to main_signed_add_32_6
  %619 = add i32 %618, 30720 can share an output register with another operation already assigned to main_signed_add_32_7
  %619 = add i32 %618, 30720 can share an output register with another operation already assigned to main_signed_add_32_8
  %619 = add i32 %618, 30720 can share an output register with another operation already assigned to main_signed_add_32_9
  %619 = add i32 %618, 30720 can share an output register with another operation already assigned to main_signed_add_32_10
  %619 = add i32 %618, 30720 can share an output register with another operation already assigned to main_signed_add_32_11
  %619 = add i32 %618, 30720 can share an output register with another operation already assigned to main_signed_add_32_12
  %619 = add i32 %618, 30720 can share an output register with another operation already assigned to main_signed_add_32_13
  %619 = add i32 %618, 30720 can share an output register with another operation already assigned to main_signed_add_32_14
  %621 = add nsw i32 %620, -17... can share an output register with another operation already assigned to main_signed_add_32_0
  %621 = add nsw i32 %620, -17... can share an output register with another operation already assigned to main_signed_add_32_1
  %621 = add nsw i32 %620, -17... can share an output register with another operation already assigned to main_signed_add_32_2
  %621 = add nsw i32 %620, -17... can share an output register with another operation already assigned to main_signed_add_32_3
  %621 = add nsw i32 %620, -17... can share an output register with another operation already assigned to main_signed_add_32_4
  %621 = add nsw i32 %620, -17... can share an output register with another operation already assigned to main_signed_add_32_5
  %621 = add nsw i32 %620, -17... can share an output register with another operation already assigned to main_signed_add_32_6
  %621 = add nsw i32 %620, -17... can share an output register with another operation already assigned to main_signed_add_32_7
  %621 = add nsw i32 %620, -17... can share an output register with another operation already assigned to main_signed_add_32_8
  %621 = add nsw i32 %620, -17... can share an output register with another operation already assigned to main_signed_add_32_9
  %621 = add nsw i32 %620, -17... can share an output register with another operation already assigned to main_signed_add_32_10
  %621 = add nsw i32 %620, -17... can share an output register with another operation already assigned to main_signed_add_32_11
  %621 = add nsw i32 %620, -17... can share an output register with another operation already assigned to main_signed_add_32_12
  %621 = add nsw i32 %620, -17... can share an output register with another operation already assigned to main_signed_add_32_13
  %621 = add nsw i32 %620, -17... can share an output register with another operation already assigned to main_signed_add_32_14
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         
  %619 = add i32 %618, 30720 (idx: 0)             -1074                         -284                          -74                           -24                           -24                           -24                           -34                           -54                           -54                           -64                           -64                           -64                           -104                          -3                            95                            
  %621 = add nsw i32 %620, -17... (idx: 1)        -1074                         -284                          -74                           -24                           -24                           -24                           -34                           -54                           -54                           -64                           -64                           -64                           -104                          -4                            95                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         
  %619 = add i32 %618, 30720 (idx: 0)             1                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             
  %621 = add nsw i32 %620, -17... (idx: 1)        0                             1                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %619 = add i32 %618, 30720 (idx: 0) -> main_signed_add_32_0 (mux inputs: 109)
  %621 = add nsw i32 %620, -17... (idx: 1) -> main_signed_add_32_1 (mux inputs: 30)
State: LEGUP_F_main_BB__623
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %.op72.i = add nsw i32 %625,... can share an output register with another operation already assigned to main_signed_add_32_0
  %.op72.i = add nsw i32 %625,... can share an output register with another operation already assigned to main_signed_add_32_1
  %.op72.i = add nsw i32 %625,... can share an output register with another operation already assigned to main_signed_add_32_2
  %.op72.i = add nsw i32 %625,... can share an output register with another operation already assigned to main_signed_add_32_3
  %.op72.i = add nsw i32 %625,... can share an output register with another operation already assigned to main_signed_add_32_4
  %.op72.i = add nsw i32 %625,... can share an output register with another operation already assigned to main_signed_add_32_5
  %.op72.i = add nsw i32 %625,... can share an output register with another operation already assigned to main_signed_add_32_6
  %.op72.i = add nsw i32 %625,... can share an output register with another operation already assigned to main_signed_add_32_7
  %.op72.i = add nsw i32 %625,... can share an output register with another operation already assigned to main_signed_add_32_8
  %.op72.i = add nsw i32 %625,... can share an output register with another operation already assigned to main_signed_add_32_9
  %.op72.i = add nsw i32 %625,... can share an output register with another operation already assigned to main_signed_add_32_10
  %.op72.i = add nsw i32 %625,... can share an output register with another operation already assigned to main_signed_add_32_11
  %.op72.i = add nsw i32 %625,... can share an output register with another operation already assigned to main_signed_add_32_12
  %.op72.i = add nsw i32 %625,... can share an output register with another operation already assigned to main_signed_add_32_13
  %.op72.i = add nsw i32 %625,... can share an output register with another operation already assigned to main_signed_add_32_14
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         
  %.op72.i = add nsw i32 %625,... (idx: 0)        -1085                         -294                          -74                           -24                           -24                           -24                           -34                           -54                           -54                           -64                           -64                           -64                           -104                          -4                            95                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         
  %.op72.i = add nsw i32 %625,... (idx: 0)        1                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %.op72.i = add nsw i32 %625,... (idx: 0) -> main_signed_add_32_0 (mux inputs: 110)
State: LEGUP_F_main_BB__631
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %632 = add nsw i32 %.op76.i,... can share an output register with another operation already assigned to main_signed_add_32_0
  %632 = add nsw i32 %.op76.i,... can share an output register with another operation already assigned to main_signed_add_32_1
  %632 = add nsw i32 %.op76.i,... can share an output register with another operation already assigned to main_signed_add_32_2
  %632 = add nsw i32 %.op76.i,... can share an output register with another operation already assigned to main_signed_add_32_3
  %632 = add nsw i32 %.op76.i,... can share an output register with another operation already assigned to main_signed_add_32_4
  %632 = add nsw i32 %.op76.i,... can share an output register with another operation already assigned to main_signed_add_32_5
  %632 = add nsw i32 %.op76.i,... can share an output register with another operation already assigned to main_signed_add_32_6
  %632 = add nsw i32 %.op76.i,... can share an output register with another operation already assigned to main_signed_add_32_7
  %632 = add nsw i32 %.op76.i,... can share an output register with another operation already assigned to main_signed_add_32_8
  %632 = add nsw i32 %.op76.i,... can share an output register with another operation already assigned to main_signed_add_32_9
  %632 = add nsw i32 %.op76.i,... can share an output register with another operation already assigned to main_signed_add_32_10
  %632 = add nsw i32 %.op76.i,... can share an output register with another operation already assigned to main_signed_add_32_11
  %632 = add nsw i32 %.op76.i,... can share an output register with another operation already assigned to main_signed_add_32_12
  %632 = add nsw i32 %.op76.i,... can share an output register with another operation already assigned to main_signed_add_32_13
  %632 = add nsw i32 %.op76.i,... can share an output register with another operation already assigned to main_signed_add_32_14
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         
  %632 = add nsw i32 %.op76.i,... (idx: 0)        -1095                         -294                          -74                           -25                           -24                           -24                           -34                           -54                           -55                           -64                           -65                           -64                           -104                          -4                            95                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         
  %632 = add nsw i32 %.op76.i,... (idx: 0)        1                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %632 = add nsw i32 %.op76.i,... (idx: 0) -> main_signed_add_32_0 (mux inputs: 111)
State: LEGUP_F_main_BB_thread117i
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  store i16 %633, i16* %615, a... hey can share an input with another operation already assigned to main_mem_dual_port_0
  store i16 %633, i16* %615, a... can share an output register with another operation already assigned to main_mem_dual_port_0
                                                  main_mem_dual_port_0          
  store i16 %633, i16* %615, a... (idx: 0)        -165                          
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          
  store i16 %633, i16* %615, a... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i16 %633, i16* %615, a... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 18)
State: LEGUP_F_main_BB_thread117i
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %gep134 = add i32 %gep_int13... can share an output register with another operation already assigned to main_signed_add_32_0
  %gep134 = add i32 %gep_int13... can share an output register with another operation already assigned to main_signed_add_32_1
  %gep134 = add i32 %gep_int13... can share an output register with another operation already assigned to main_signed_add_32_2
  %gep134 = add i32 %gep_int13... can share an output register with another operation already assigned to main_signed_add_32_3
  %gep134 = add i32 %gep_int13... can share an output register with another operation already assigned to main_signed_add_32_4
  %gep134 = add i32 %gep_int13... can share an output register with another operation already assigned to main_signed_add_32_5
  %gep134 = add i32 %gep_int13... can share an output register with another operation already assigned to main_signed_add_32_6
  %gep134 = add i32 %gep_int13... can share an output register with another operation already assigned to main_signed_add_32_7
  %gep134 = add i32 %gep_int13... can share an output register with another operation already assigned to main_signed_add_32_8
  %gep134 = add i32 %gep_int13... can share an output register with another operation already assigned to main_signed_add_32_9
  %gep134 = add i32 %gep_int13... can share an output register with another operation already assigned to main_signed_add_32_10
  %gep134 = add i32 %gep_int13... can share an output register with another operation already assigned to main_signed_add_32_11
  %gep134 = add i32 %gep_int13... can share an output register with another operation already assigned to main_signed_add_32_12
  %gep134 = add i32 %gep_int13... can share an output register with another operation already assigned to main_signed_add_32_13
  %gep134 = add i32 %gep_int13... can share an output register with another operation already assigned to main_signed_add_32_14
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         
  %gep134 = add i32 %gep_int13... (idx: 0)        -1105                         -294                          -74                           -24                           -24                           -25                           -34                           -54                           -54                           -64                           -64                           -64                           -105                          -4                            95                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         
  %gep134 = add i32 %gep_int13... (idx: 0)        1                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %gep134 = add i32 %gep_int13... (idx: 0) -> main_signed_add_32_0 (mux inputs: 112)
State: LEGUP_F_main_BB_thread117i
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %635 = load i16* %634, align... can share an output register with another operation already assigned to main_mem_dual_port_0
                                                  main_mem_dual_port_0          
  %635 = load i16* %634, align... (idx: 0)        -175                          
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          
  %635 = load i16* %634, align... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %635 = load i16* %634, align... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 19)
State: LEGUP_F_main_BB_thread117i
Binding functional unit type: signed_multiply_32
Weight matrix for operation/function unit matching:
  %637 = mul i32 %636, 17068 can share an output register with another operation already assigned to main_signed_multiply_32_0
  %637 = mul i32 %636, 17068 can share an output register with another operation already assigned to main_signed_multiply_32_1
  %637 = mul i32 %636, 17068 can share an output register with another operation already assigned to main_signed_multiply_32_2
  %637 = mul i32 %636, 17068 can share an output register with another operation already assigned to main_signed_multiply_32_3
  %637 = mul i32 %636, 17068 can share an output register with another operation already assigned to main_signed_multiply_32_4
  %637 = mul i32 %636, 17068 can share an output register with another operation already assigned to main_signed_multiply_32_5
  %637 = mul i32 %636, 17068 can share an output register with another operation already assigned to main_signed_multiply_32_6
  %637 = mul i32 %636, 17068 can share an output register with another operation already assigned to main_signed_multiply_32_7
  %637 = mul i32 %636, 17068 can share an output register with another operation already assigned to main_signed_multiply_32_8
  %637 = mul i32 %636, 17068 can share an output register with another operation already assigned to main_signed_multiply_32_9
  %637 = mul i32 %636, 17068 can share an output register with another operation already assigned to main_signed_multiply_32_10
  %637 = mul i32 %636, 17068 can share an output register with another operation already assigned to main_signed_multiply_32_11
  %637 = mul i32 %636, 17068 can share an output register with another operation already assigned to main_signed_multiply_32_12
  %637 = mul i32 %636, 17068 can share an output register with another operation already assigned to main_signed_multiply_32_13
  %637 = mul i32 %636, 17068 can share an output register with another operation already assigned to main_signed_multiply_32_14
                                                  main_signed_multiply_32_0     main_signed_multiply_32_1     main_signed_multiply_32_2     main_signed_multiply_32_3     main_signed_multiply_32_4     main_signed_multiply_32_5     main_signed_multiply_32_6     main_signed_multiply_32_7     main_signed_multiply_32_8     main_signed_multiply_32_9     main_signed_multiply_32_10    main_signed_multiply_32_11    main_signed_multiply_32_12    main_signed_multiply_32_13    main_signed_multiply_32_14    
  %637 = mul i32 %636, 17068 (idx: 0)             -245                          -14                           -14                           -14                           -14                           -34                           -34                           -24                           -24                           -74                           -54                           -54                           -44                           -44                           -104                          
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_multiply_32_0     main_signed_multiply_32_1     main_signed_multiply_32_2     main_signed_multiply_32_3     main_signed_multiply_32_4     main_signed_multiply_32_5     main_signed_multiply_32_6     main_signed_multiply_32_7     main_signed_multiply_32_8     main_signed_multiply_32_9     main_signed_multiply_32_10    main_signed_multiply_32_11    main_signed_multiply_32_12    main_signed_multiply_32_13    main_signed_multiply_32_14    
  %637 = mul i32 %636, 17068 (idx: 0)             1                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %637 = mul i32 %636, 17068 (idx: 0) -> main_signed_multiply_32_0 (mux inputs: 26)
State: LEGUP_F_main_BB_thread117i
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %638 = add i32 %637, 17068 can share an output register with another operation already assigned to main_signed_add_32_0
  %638 = add i32 %637, 17068 can share an output register with another operation already assigned to main_signed_add_32_1
  %638 = add i32 %637, 17068 can share an output register with another operation already assigned to main_signed_add_32_2
  %638 = add i32 %637, 17068 can share an output register with another operation already assigned to main_signed_add_32_3
  %638 = add i32 %637, 17068 can share an output register with another operation already assigned to main_signed_add_32_4
  %638 = add i32 %637, 17068 can share an output register with another operation already assigned to main_signed_add_32_5
  %638 = add i32 %637, 17068 can share an output register with another operation already assigned to main_signed_add_32_6
  %638 = add i32 %637, 17068 can share an output register with another operation already assigned to main_signed_add_32_7
  %638 = add i32 %637, 17068 can share an output register with another operation already assigned to main_signed_add_32_8
  %638 = add i32 %637, 17068 can share an output register with another operation already assigned to main_signed_add_32_9
  %638 = add i32 %637, 17068 can share an output register with another operation already assigned to main_signed_add_32_10
  %638 = add i32 %637, 17068 can share an output register with another operation already assigned to main_signed_add_32_11
  %638 = add i32 %637, 17068 can share an output register with another operation already assigned to main_signed_add_32_12
  %638 = add i32 %637, 17068 can share an output register with another operation already assigned to main_signed_add_32_13
  %638 = add i32 %637, 17068 can share an output register with another operation already assigned to main_signed_add_32_14
  %640 = add nsw i32 %639, -34... can share an output register with another operation already assigned to main_signed_add_32_0
  %640 = add nsw i32 %639, -34... can share an output register with another operation already assigned to main_signed_add_32_1
  %640 = add nsw i32 %639, -34... can share an output register with another operation already assigned to main_signed_add_32_2
  %640 = add nsw i32 %639, -34... can share an output register with another operation already assigned to main_signed_add_32_3
  %640 = add nsw i32 %639, -34... can share an output register with another operation already assigned to main_signed_add_32_4
  %640 = add nsw i32 %639, -34... can share an output register with another operation already assigned to main_signed_add_32_5
  %640 = add nsw i32 %639, -34... can share an output register with another operation already assigned to main_signed_add_32_6
  %640 = add nsw i32 %639, -34... can share an output register with another operation already assigned to main_signed_add_32_7
  %640 = add nsw i32 %639, -34... can share an output register with another operation already assigned to main_signed_add_32_8
  %640 = add nsw i32 %639, -34... can share an output register with another operation already assigned to main_signed_add_32_9
  %640 = add nsw i32 %639, -34... can share an output register with another operation already assigned to main_signed_add_32_10
  %640 = add nsw i32 %639, -34... can share an output register with another operation already assigned to main_signed_add_32_11
  %640 = add nsw i32 %639, -34... can share an output register with another operation already assigned to main_signed_add_32_12
  %640 = add nsw i32 %639, -34... can share an output register with another operation already assigned to main_signed_add_32_13
  %640 = add nsw i32 %639, -34... can share an output register with another operation already assigned to main_signed_add_32_14
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         
  %638 = add i32 %637, 17068 (idx: 0)             -1114                         -294                          -74                           -24                           -24                           -24                           -34                           -54                           -54                           -64                           -64                           -64                           -104                          -3                            95                            
  %640 = add nsw i32 %639, -34... (idx: 1)        -1114                         -294                          -74                           -24                           -24                           -24                           -34                           -54                           -54                           -64                           -64                           -64                           -104                          -4                            95                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         
  %638 = add i32 %637, 17068 (idx: 0)             1                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             
  %640 = add nsw i32 %639, -34... (idx: 1)        0                             1                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %638 = add i32 %637, 17068 (idx: 0) -> main_signed_add_32_0 (mux inputs: 113)
  %640 = add nsw i32 %639, -34... (idx: 1) -> main_signed_add_32_1 (mux inputs: 31)
State: LEGUP_F_main_BB__642
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %.op81.i = add nsw i32 %644,... can share an output register with another operation already assigned to main_signed_add_32_0
  %.op81.i = add nsw i32 %644,... can share an output register with another operation already assigned to main_signed_add_32_1
  %.op81.i = add nsw i32 %644,... can share an output register with another operation already assigned to main_signed_add_32_2
  %.op81.i = add nsw i32 %644,... can share an output register with another operation already assigned to main_signed_add_32_3
  %.op81.i = add nsw i32 %644,... can share an output register with another operation already assigned to main_signed_add_32_4
  %.op81.i = add nsw i32 %644,... can share an output register with another operation already assigned to main_signed_add_32_5
  %.op81.i = add nsw i32 %644,... can share an output register with another operation already assigned to main_signed_add_32_6
  %.op81.i = add nsw i32 %644,... can share an output register with another operation already assigned to main_signed_add_32_7
  %.op81.i = add nsw i32 %644,... can share an output register with another operation already assigned to main_signed_add_32_8
  %.op81.i = add nsw i32 %644,... can share an output register with another operation already assigned to main_signed_add_32_9
  %.op81.i = add nsw i32 %644,... can share an output register with another operation already assigned to main_signed_add_32_10
  %.op81.i = add nsw i32 %644,... can share an output register with another operation already assigned to main_signed_add_32_11
  %.op81.i = add nsw i32 %644,... can share an output register with another operation already assigned to main_signed_add_32_12
  %.op81.i = add nsw i32 %644,... can share an output register with another operation already assigned to main_signed_add_32_13
  %.op81.i = add nsw i32 %644,... can share an output register with another operation already assigned to main_signed_add_32_14
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         
  %.op81.i = add nsw i32 %644,... (idx: 0)        -1125                         -304                          -74                           -24                           -24                           -24                           -34                           -54                           -54                           -64                           -64                           -64                           -104                          -4                            95                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         
  %.op81.i = add nsw i32 %644,... (idx: 0)        1                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %.op81.i = add nsw i32 %644,... (idx: 0) -> main_signed_add_32_0 (mux inputs: 114)
State: LEGUP_F_main_BB__650
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %651 = add nsw i32 %.op85.i,... can share an output register with another operation already assigned to main_signed_add_32_0
  %651 = add nsw i32 %.op85.i,... can share an output register with another operation already assigned to main_signed_add_32_1
  %651 = add nsw i32 %.op85.i,... can share an output register with another operation already assigned to main_signed_add_32_2
  %651 = add nsw i32 %.op85.i,... can share an output register with another operation already assigned to main_signed_add_32_3
  %651 = add nsw i32 %.op85.i,... can share an output register with another operation already assigned to main_signed_add_32_4
  %651 = add nsw i32 %.op85.i,... can share an output register with another operation already assigned to main_signed_add_32_5
  %651 = add nsw i32 %.op85.i,... can share an output register with another operation already assigned to main_signed_add_32_6
  %651 = add nsw i32 %.op85.i,... can share an output register with another operation already assigned to main_signed_add_32_7
  %651 = add nsw i32 %.op85.i,... can share an output register with another operation already assigned to main_signed_add_32_8
  %651 = add nsw i32 %.op85.i,... can share an output register with another operation already assigned to main_signed_add_32_9
  %651 = add nsw i32 %.op85.i,... can share an output register with another operation already assigned to main_signed_add_32_10
  %651 = add nsw i32 %.op85.i,... can share an output register with another operation already assigned to main_signed_add_32_11
  %651 = add nsw i32 %.op85.i,... can share an output register with another operation already assigned to main_signed_add_32_12
  %651 = add nsw i32 %.op85.i,... can share an output register with another operation already assigned to main_signed_add_32_13
  %651 = add nsw i32 %.op85.i,... can share an output register with another operation already assigned to main_signed_add_32_14
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         
  %651 = add nsw i32 %.op85.i,... (idx: 0)        -1135                         -305                          -74                           -24                           -24                           -24                           -34                           -54                           -55                           -64                           -64                           -64                           -104                          -4                            95                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         
  %651 = add nsw i32 %.op85.i,... (idx: 0)        1                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %651 = add nsw i32 %.op85.i,... (idx: 0) -> main_signed_add_32_0 (mux inputs: 115)
State: LEGUP_F_main_BB_thread122i
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  store i16 %652, i16* %634, a... hey can share an input with another operation already assigned to main_mem_dual_port_0
  store i16 %652, i16* %634, a... can share an output register with another operation already assigned to main_mem_dual_port_0
                                                  main_mem_dual_port_0          
  store i16 %652, i16* %634, a... (idx: 0)        -185                          
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          
  store i16 %652, i16* %634, a... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i16 %652, i16* %634, a... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 20)
State: LEGUP_F_main_BB_thread122i
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %gep136 = add i32 %gep_int13... can share an output register with another operation already assigned to main_signed_add_32_0
  %gep136 = add i32 %gep_int13... can share an output register with another operation already assigned to main_signed_add_32_1
  %gep136 = add i32 %gep_int13... can share an output register with another operation already assigned to main_signed_add_32_2
  %gep136 = add i32 %gep_int13... can share an output register with another operation already assigned to main_signed_add_32_3
  %gep136 = add i32 %gep_int13... can share an output register with another operation already assigned to main_signed_add_32_4
  %gep136 = add i32 %gep_int13... can share an output register with another operation already assigned to main_signed_add_32_5
  %gep136 = add i32 %gep_int13... can share an output register with another operation already assigned to main_signed_add_32_6
  %gep136 = add i32 %gep_int13... can share an output register with another operation already assigned to main_signed_add_32_7
  %gep136 = add i32 %gep_int13... can share an output register with another operation already assigned to main_signed_add_32_8
  %gep136 = add i32 %gep_int13... can share an output register with another operation already assigned to main_signed_add_32_9
  %gep136 = add i32 %gep_int13... can share an output register with another operation already assigned to main_signed_add_32_10
  %gep136 = add i32 %gep_int13... can share an output register with another operation already assigned to main_signed_add_32_11
  %gep136 = add i32 %gep_int13... can share an output register with another operation already assigned to main_signed_add_32_12
  %gep136 = add i32 %gep_int13... can share an output register with another operation already assigned to main_signed_add_32_13
  %gep136 = add i32 %gep_int13... can share an output register with another operation already assigned to main_signed_add_32_14
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         
  %gep136 = add i32 %gep_int13... (idx: 0)        -1145                         -304                          -74                           -24                           -24                           -24                           -35                           -54                           -54                           -64                           -64                           -64                           -104                          -4                            95                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         
  %gep136 = add i32 %gep_int13... (idx: 0)        1                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %gep136 = add i32 %gep_int13... (idx: 0) -> main_signed_add_32_0 (mux inputs: 116)
State: LEGUP_F_main_BB_thread122i
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %654 = load i16* %653, align... can share an output register with another operation already assigned to main_mem_dual_port_0
                                                  main_mem_dual_port_0          
  %654 = load i16* %653, align... (idx: 0)        -195                          
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          
  %654 = load i16* %653, align... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %654 = load i16* %653, align... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 21)
State: LEGUP_F_main_BB_thread122i
Binding functional unit type: signed_multiply_32
Weight matrix for operation/function unit matching:
  %656 = mul i32 %655, 18072 can share an output register with another operation already assigned to main_signed_multiply_32_0
  %656 = mul i32 %655, 18072 can share an output register with another operation already assigned to main_signed_multiply_32_1
  %656 = mul i32 %655, 18072 can share an output register with another operation already assigned to main_signed_multiply_32_2
  %656 = mul i32 %655, 18072 can share an output register with another operation already assigned to main_signed_multiply_32_3
  %656 = mul i32 %655, 18072 can share an output register with another operation already assigned to main_signed_multiply_32_4
  %656 = mul i32 %655, 18072 can share an output register with another operation already assigned to main_signed_multiply_32_5
  %656 = mul i32 %655, 18072 can share an output register with another operation already assigned to main_signed_multiply_32_6
  %656 = mul i32 %655, 18072 can share an output register with another operation already assigned to main_signed_multiply_32_7
  %656 = mul i32 %655, 18072 can share an output register with another operation already assigned to main_signed_multiply_32_8
  %656 = mul i32 %655, 18072 can share an output register with another operation already assigned to main_signed_multiply_32_9
  %656 = mul i32 %655, 18072 can share an output register with another operation already assigned to main_signed_multiply_32_10
  %656 = mul i32 %655, 18072 can share an output register with another operation already assigned to main_signed_multiply_32_11
  %656 = mul i32 %655, 18072 can share an output register with another operation already assigned to main_signed_multiply_32_12
  %656 = mul i32 %655, 18072 can share an output register with another operation already assigned to main_signed_multiply_32_13
  %656 = mul i32 %655, 18072 can share an output register with another operation already assigned to main_signed_multiply_32_14
                                                  main_signed_multiply_32_0     main_signed_multiply_32_1     main_signed_multiply_32_2     main_signed_multiply_32_3     main_signed_multiply_32_4     main_signed_multiply_32_5     main_signed_multiply_32_6     main_signed_multiply_32_7     main_signed_multiply_32_8     main_signed_multiply_32_9     main_signed_multiply_32_10    main_signed_multiply_32_11    main_signed_multiply_32_12    main_signed_multiply_32_13    main_signed_multiply_32_14    
  %656 = mul i32 %655, 18072 (idx: 0)             -255                          -14                           -14                           -14                           -14                           -34                           -34                           -24                           -24                           -74                           -54                           -54                           -44                           -44                           -104                          
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_multiply_32_0     main_signed_multiply_32_1     main_signed_multiply_32_2     main_signed_multiply_32_3     main_signed_multiply_32_4     main_signed_multiply_32_5     main_signed_multiply_32_6     main_signed_multiply_32_7     main_signed_multiply_32_8     main_signed_multiply_32_9     main_signed_multiply_32_10    main_signed_multiply_32_11    main_signed_multiply_32_12    main_signed_multiply_32_13    main_signed_multiply_32_14    
  %656 = mul i32 %655, 18072 (idx: 0)             1                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %656 = mul i32 %655, 18072 (idx: 0) -> main_signed_multiply_32_0 (mux inputs: 27)
State: LEGUP_F_main_BB_thread122i
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %657 = add i32 %656, 18072 can share an output register with another operation already assigned to main_signed_add_32_0
  %657 = add i32 %656, 18072 can share an output register with another operation already assigned to main_signed_add_32_1
  %657 = add i32 %656, 18072 can share an output register with another operation already assigned to main_signed_add_32_2
  %657 = add i32 %656, 18072 can share an output register with another operation already assigned to main_signed_add_32_3
  %657 = add i32 %656, 18072 can share an output register with another operation already assigned to main_signed_add_32_4
  %657 = add i32 %656, 18072 can share an output register with another operation already assigned to main_signed_add_32_5
  %657 = add i32 %656, 18072 can share an output register with another operation already assigned to main_signed_add_32_6
  %657 = add i32 %656, 18072 can share an output register with another operation already assigned to main_signed_add_32_7
  %657 = add i32 %656, 18072 can share an output register with another operation already assigned to main_signed_add_32_8
  %657 = add i32 %656, 18072 can share an output register with another operation already assigned to main_signed_add_32_9
  %657 = add i32 %656, 18072 can share an output register with another operation already assigned to main_signed_add_32_10
  %657 = add i32 %656, 18072 can share an output register with another operation already assigned to main_signed_add_32_11
  %657 = add i32 %656, 18072 can share an output register with another operation already assigned to main_signed_add_32_12
  %657 = add i32 %656, 18072 can share an output register with another operation already assigned to main_signed_add_32_13
  %657 = add i32 %656, 18072 can share an output register with another operation already assigned to main_signed_add_32_14
  %659 = add nsw i32 %658, -11... can share an output register with another operation already assigned to main_signed_add_32_0
  %659 = add nsw i32 %658, -11... can share an output register with another operation already assigned to main_signed_add_32_1
  %659 = add nsw i32 %658, -11... can share an output register with another operation already assigned to main_signed_add_32_2
  %659 = add nsw i32 %658, -11... can share an output register with another operation already assigned to main_signed_add_32_3
  %659 = add nsw i32 %658, -11... can share an output register with another operation already assigned to main_signed_add_32_4
  %659 = add nsw i32 %658, -11... can share an output register with another operation already assigned to main_signed_add_32_5
  %659 = add nsw i32 %658, -11... can share an output register with another operation already assigned to main_signed_add_32_6
  %659 = add nsw i32 %658, -11... can share an output register with another operation already assigned to main_signed_add_32_7
  %659 = add nsw i32 %658, -11... can share an output register with another operation already assigned to main_signed_add_32_8
  %659 = add nsw i32 %658, -11... can share an output register with another operation already assigned to main_signed_add_32_9
  %659 = add nsw i32 %658, -11... can share an output register with another operation already assigned to main_signed_add_32_10
  %659 = add nsw i32 %658, -11... can share an output register with another operation already assigned to main_signed_add_32_11
  %659 = add nsw i32 %658, -11... can share an output register with another operation already assigned to main_signed_add_32_12
  %659 = add nsw i32 %658, -11... can share an output register with another operation already assigned to main_signed_add_32_13
  %659 = add nsw i32 %658, -11... can share an output register with another operation already assigned to main_signed_add_32_14
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         
  %657 = add i32 %656, 18072 (idx: 0)             -1154                         -304                          -74                           -24                           -24                           -24                           -34                           -54                           -54                           -64                           -64                           -64                           -104                          -3                            95                            
  %659 = add nsw i32 %658, -11... (idx: 1)        -1154                         -304                          -74                           -24                           -24                           -24                           -34                           -54                           -54                           -64                           -64                           -64                           -104                          -4                            95                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         
  %657 = add i32 %656, 18072 (idx: 0)             1                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             
  %659 = add nsw i32 %658, -11... (idx: 1)        0                             1                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %657 = add i32 %656, 18072 (idx: 0) -> main_signed_add_32_0 (mux inputs: 117)
  %659 = add nsw i32 %658, -11... (idx: 1) -> main_signed_add_32_1 (mux inputs: 32)
State: LEGUP_F_main_BB__661
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %.op90.i = add nsw i32 %663,... can share an output register with another operation already assigned to main_signed_add_32_0
  %.op90.i = add nsw i32 %663,... can share an output register with another operation already assigned to main_signed_add_32_1
  %.op90.i = add nsw i32 %663,... can share an output register with another operation already assigned to main_signed_add_32_2
  %.op90.i = add nsw i32 %663,... can share an output register with another operation already assigned to main_signed_add_32_3
  %.op90.i = add nsw i32 %663,... can share an output register with another operation already assigned to main_signed_add_32_4
  %.op90.i = add nsw i32 %663,... can share an output register with another operation already assigned to main_signed_add_32_5
  %.op90.i = add nsw i32 %663,... can share an output register with another operation already assigned to main_signed_add_32_6
  %.op90.i = add nsw i32 %663,... can share an output register with another operation already assigned to main_signed_add_32_7
  %.op90.i = add nsw i32 %663,... can share an output register with another operation already assigned to main_signed_add_32_8
  %.op90.i = add nsw i32 %663,... can share an output register with another operation already assigned to main_signed_add_32_9
  %.op90.i = add nsw i32 %663,... can share an output register with another operation already assigned to main_signed_add_32_10
  %.op90.i = add nsw i32 %663,... can share an output register with another operation already assigned to main_signed_add_32_11
  %.op90.i = add nsw i32 %663,... can share an output register with another operation already assigned to main_signed_add_32_12
  %.op90.i = add nsw i32 %663,... can share an output register with another operation already assigned to main_signed_add_32_13
  %.op90.i = add nsw i32 %663,... can share an output register with another operation already assigned to main_signed_add_32_14
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         
  %.op90.i = add nsw i32 %663,... (idx: 0)        -1165                         -314                          -74                           -24                           -24                           -24                           -34                           -54                           -54                           -64                           -64                           -64                           -104                          -4                            95                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         
  %.op90.i = add nsw i32 %663,... (idx: 0)        1                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %.op90.i = add nsw i32 %663,... (idx: 0) -> main_signed_add_32_0 (mux inputs: 118)
State: LEGUP_F_main_BB__669
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %670 = add nsw i32 %.op94.i,... can share an output register with another operation already assigned to main_signed_add_32_0
  %670 = add nsw i32 %.op94.i,... can share an output register with another operation already assigned to main_signed_add_32_1
  %670 = add nsw i32 %.op94.i,... can share an output register with another operation already assigned to main_signed_add_32_2
  %670 = add nsw i32 %.op94.i,... can share an output register with another operation already assigned to main_signed_add_32_3
  %670 = add nsw i32 %.op94.i,... can share an output register with another operation already assigned to main_signed_add_32_4
  %670 = add nsw i32 %.op94.i,... can share an output register with another operation already assigned to main_signed_add_32_5
  %670 = add nsw i32 %.op94.i,... can share an output register with another operation already assigned to main_signed_add_32_6
  %670 = add nsw i32 %.op94.i,... can share an output register with another operation already assigned to main_signed_add_32_7
  %670 = add nsw i32 %.op94.i,... can share an output register with another operation already assigned to main_signed_add_32_8
  %670 = add nsw i32 %.op94.i,... can share an output register with another operation already assigned to main_signed_add_32_9
  %670 = add nsw i32 %.op94.i,... can share an output register with another operation already assigned to main_signed_add_32_10
  %670 = add nsw i32 %.op94.i,... can share an output register with another operation already assigned to main_signed_add_32_11
  %670 = add nsw i32 %.op94.i,... can share an output register with another operation already assigned to main_signed_add_32_12
  %670 = add nsw i32 %.op94.i,... can share an output register with another operation already assigned to main_signed_add_32_13
  %670 = add nsw i32 %.op94.i,... can share an output register with another operation already assigned to main_signed_add_32_14
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         
  %670 = add nsw i32 %.op94.i,... (idx: 0)        -1175                         -315                          -74                           -24                           -24                           -24                           -34                           -54                           -55                           -64                           -64                           -64                           -104                          -4                            95                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         
  %670 = add nsw i32 %.op94.i,... (idx: 0)        1                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %670 = add nsw i32 %.op94.i,... (idx: 0) -> main_signed_add_32_0 (mux inputs: 119)
State: LEGUP_F_main_BB_Quantization_and_codingexit
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  store i16 %671, i16* %653, a... hey can share an input with another operation already assigned to main_mem_dual_port_0
  store i16 %671, i16* %653, a... can share an output register with another operation already assigned to main_mem_dual_port_0
                                                  main_mem_dual_port_0          
  store i16 %671, i16* %653, a... (idx: 0)        -205                          
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          
  store i16 %671, i16* %653, a... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i16 %671, i16* %653, a... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 22)
State: LEGUP_F_main_BB_preheader
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %674 = add nsw i32 %673, %.l... can share an output register with another operation already assigned to main_signed_add_32_0
  %674 = add nsw i32 %673, %.l... can share an output register with another operation already assigned to main_signed_add_32_1
  %674 = add nsw i32 %673, %.l... can share an output register with another operation already assigned to main_signed_add_32_2
  %674 = add nsw i32 %673, %.l... can share an output register with another operation already assigned to main_signed_add_32_3
  %674 = add nsw i32 %673, %.l... can share an output register with another operation already assigned to main_signed_add_32_4
  %674 = add nsw i32 %673, %.l... can share an output register with another operation already assigned to main_signed_add_32_5
  %674 = add nsw i32 %673, %.l... can share an output register with another operation already assigned to main_signed_add_32_6
  %674 = add nsw i32 %673, %.l... can share an output register with another operation already assigned to main_signed_add_32_7
  %674 = add nsw i32 %673, %.l... can share an output register with another operation already assigned to main_signed_add_32_8
  %674 = add nsw i32 %673, %.l... can share an output register with another operation already assigned to main_signed_add_32_9
  %674 = add nsw i32 %673, %.l... can share an output register with another operation already assigned to main_signed_add_32_10
  %674 = add nsw i32 %673, %.l... can share an output register with another operation already assigned to main_signed_add_32_11
  %674 = add nsw i32 %673, %.l... can share an output register with another operation already assigned to main_signed_add_32_12
  %674 = add nsw i32 %673, %.l... can share an output register with another operation already assigned to main_signed_add_32_13
  %674 = add nsw i32 %673, %.l... can share an output register with another operation already assigned to main_signed_add_32_14
  %677 = add nsw i32 %676, %67... can share an output register with another operation already assigned to main_signed_add_32_0
  %677 = add nsw i32 %676, %67... can share an output register with another operation already assigned to main_signed_add_32_1
  %677 = add nsw i32 %676, %67... can share an output register with another operation already assigned to main_signed_add_32_2
  %677 = add nsw i32 %676, %67... can share an output register with another operation already assigned to main_signed_add_32_3
  %677 = add nsw i32 %676, %67... can share an output register with another operation already assigned to main_signed_add_32_4
  %677 = add nsw i32 %676, %67... can share an output register with another operation already assigned to main_signed_add_32_5
  %677 = add nsw i32 %676, %67... can share an output register with another operation already assigned to main_signed_add_32_6
  %677 = add nsw i32 %676, %67... can share an output register with another operation already assigned to main_signed_add_32_7
  %677 = add nsw i32 %676, %67... can share an output register with another operation already assigned to main_signed_add_32_8
  %677 = add nsw i32 %676, %67... can share an output register with another operation already assigned to main_signed_add_32_9
  %677 = add nsw i32 %676, %67... can share an output register with another operation already assigned to main_signed_add_32_10
  %677 = add nsw i32 %676, %67... can share an output register with another operation already assigned to main_signed_add_32_11
  %677 = add nsw i32 %676, %67... can share an output register with another operation already assigned to main_signed_add_32_12
  %677 = add nsw i32 %676, %67... can share an output register with another operation already assigned to main_signed_add_32_13
  %677 = add nsw i32 %676, %67... can share an output register with another operation already assigned to main_signed_add_32_14
  %680 = add nsw i32 %679, %67... can share an output register with another operation already assigned to main_signed_add_32_0
  %680 = add nsw i32 %679, %67... can share an output register with another operation already assigned to main_signed_add_32_1
  %680 = add nsw i32 %679, %67... can share an output register with another operation already assigned to main_signed_add_32_2
  %680 = add nsw i32 %679, %67... can share an output register with another operation already assigned to main_signed_add_32_3
  %680 = add nsw i32 %679, %67... can share an output register with another operation already assigned to main_signed_add_32_4
  %680 = add nsw i32 %679, %67... can share an output register with another operation already assigned to main_signed_add_32_5
  %680 = add nsw i32 %679, %67... can share an output register with another operation already assigned to main_signed_add_32_6
  %680 = add nsw i32 %679, %67... can share an output register with another operation already assigned to main_signed_add_32_7
  %680 = add nsw i32 %679, %67... can share an output register with another operation already assigned to main_signed_add_32_8
  %680 = add nsw i32 %679, %67... can share an output register with another operation already assigned to main_signed_add_32_9
  %680 = add nsw i32 %679, %67... can share an output register with another operation already assigned to main_signed_add_32_10
  %680 = add nsw i32 %679, %67... can share an output register with another operation already assigned to main_signed_add_32_11
  %680 = add nsw i32 %679, %67... can share an output register with another operation already assigned to main_signed_add_32_12
  %680 = add nsw i32 %679, %67... can share an output register with another operation already assigned to main_signed_add_32_13
  %680 = add nsw i32 %679, %67... can share an output register with another operation already assigned to main_signed_add_32_14
  %683 = add nsw i32 %682, %68... can share an output register with another operation already assigned to main_signed_add_32_0
  %683 = add nsw i32 %682, %68... can share an output register with another operation already assigned to main_signed_add_32_1
  %683 = add nsw i32 %682, %68... can share an output register with another operation already assigned to main_signed_add_32_2
  %683 = add nsw i32 %682, %68... can share an output register with another operation already assigned to main_signed_add_32_3
  %683 = add nsw i32 %682, %68... can share an output register with another operation already assigned to main_signed_add_32_4
  %683 = add nsw i32 %682, %68... can share an output register with another operation already assigned to main_signed_add_32_5
  %683 = add nsw i32 %682, %68... can share an output register with another operation already assigned to main_signed_add_32_6
  %683 = add nsw i32 %682, %68... can share an output register with another operation already assigned to main_signed_add_32_7
  %683 = add nsw i32 %682, %68... can share an output register with another operation already assigned to main_signed_add_32_8
  %683 = add nsw i32 %682, %68... can share an output register with another operation already assigned to main_signed_add_32_9
  %683 = add nsw i32 %682, %68... can share an output register with another operation already assigned to main_signed_add_32_10
  %683 = add nsw i32 %682, %68... can share an output register with another operation already assigned to main_signed_add_32_11
  %683 = add nsw i32 %682, %68... can share an output register with another operation already assigned to main_signed_add_32_12
  %683 = add nsw i32 %682, %68... can share an output register with another operation already assigned to main_signed_add_32_13
  %683 = add nsw i32 %682, %68... can share an output register with another operation already assigned to main_signed_add_32_14
  %686 = add nsw i32 %685, %68... can share an output register with another operation already assigned to main_signed_add_32_0
  %686 = add nsw i32 %685, %68... can share an output register with another operation already assigned to main_signed_add_32_1
  %686 = add nsw i32 %685, %68... can share an output register with another operation already assigned to main_signed_add_32_2
  %686 = add nsw i32 %685, %68... can share an output register with another operation already assigned to main_signed_add_32_3
  %686 = add nsw i32 %685, %68... can share an output register with another operation already assigned to main_signed_add_32_4
  %686 = add nsw i32 %685, %68... can share an output register with another operation already assigned to main_signed_add_32_5
  %686 = add nsw i32 %685, %68... can share an output register with another operation already assigned to main_signed_add_32_6
  %686 = add nsw i32 %685, %68... can share an output register with another operation already assigned to main_signed_add_32_7
  %686 = add nsw i32 %685, %68... can share an output register with another operation already assigned to main_signed_add_32_8
  %686 = add nsw i32 %685, %68... can share an output register with another operation already assigned to main_signed_add_32_9
  %686 = add nsw i32 %685, %68... can share an output register with another operation already assigned to main_signed_add_32_10
  %686 = add nsw i32 %685, %68... can share an output register with another operation already assigned to main_signed_add_32_11
  %686 = add nsw i32 %685, %68... can share an output register with another operation already assigned to main_signed_add_32_12
  %686 = add nsw i32 %685, %68... can share an output register with another operation already assigned to main_signed_add_32_13
  %686 = add nsw i32 %685, %68... can share an output register with another operation already assigned to main_signed_add_32_14
  %689 = add nsw i32 %688, %68... can share an output register with another operation already assigned to main_signed_add_32_0
  %689 = add nsw i32 %688, %68... can share an output register with another operation already assigned to main_signed_add_32_1
  %689 = add nsw i32 %688, %68... can share an output register with another operation already assigned to main_signed_add_32_2
  %689 = add nsw i32 %688, %68... can share an output register with another operation already assigned to main_signed_add_32_3
  %689 = add nsw i32 %688, %68... can share an output register with another operation already assigned to main_signed_add_32_4
  %689 = add nsw i32 %688, %68... can share an output register with another operation already assigned to main_signed_add_32_5
  %689 = add nsw i32 %688, %68... can share an output register with another operation already assigned to main_signed_add_32_6
  %689 = add nsw i32 %688, %68... can share an output register with another operation already assigned to main_signed_add_32_7
  %689 = add nsw i32 %688, %68... can share an output register with another operation already assigned to main_signed_add_32_8
  %689 = add nsw i32 %688, %68... can share an output register with another operation already assigned to main_signed_add_32_9
  %689 = add nsw i32 %688, %68... can share an output register with another operation already assigned to main_signed_add_32_10
  %689 = add nsw i32 %688, %68... can share an output register with another operation already assigned to main_signed_add_32_11
  %689 = add nsw i32 %688, %68... can share an output register with another operation already assigned to main_signed_add_32_12
  %689 = add nsw i32 %688, %68... can share an output register with another operation already assigned to main_signed_add_32_13
  %689 = add nsw i32 %688, %68... can share an output register with another operation already assigned to main_signed_add_32_14
  %692 = add nsw i32 %691, %68... can share an output register with another operation already assigned to main_signed_add_32_0
  %692 = add nsw i32 %691, %68... can share an output register with another operation already assigned to main_signed_add_32_1
  %692 = add nsw i32 %691, %68... can share an output register with another operation already assigned to main_signed_add_32_2
  %692 = add nsw i32 %691, %68... can share an output register with another operation already assigned to main_signed_add_32_3
  %692 = add nsw i32 %691, %68... can share an output register with another operation already assigned to main_signed_add_32_4
  %692 = add nsw i32 %691, %68... can share an output register with another operation already assigned to main_signed_add_32_5
  %692 = add nsw i32 %691, %68... can share an output register with another operation already assigned to main_signed_add_32_6
  %692 = add nsw i32 %691, %68... can share an output register with another operation already assigned to main_signed_add_32_7
  %692 = add nsw i32 %691, %68... can share an output register with another operation already assigned to main_signed_add_32_8
  %692 = add nsw i32 %691, %68... can share an output register with another operation already assigned to main_signed_add_32_9
  %692 = add nsw i32 %691, %68... can share an output register with another operation already assigned to main_signed_add_32_10
  %692 = add nsw i32 %691, %68... can share an output register with another operation already assigned to main_signed_add_32_11
  %692 = add nsw i32 %691, %68... can share an output register with another operation already assigned to main_signed_add_32_12
  %692 = add nsw i32 %691, %68... can share an output register with another operation already assigned to main_signed_add_32_13
  %692 = add nsw i32 %691, %68... can share an output register with another operation already assigned to main_signed_add_32_14
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         
  %674 = add nsw i32 %673, %.l... (idx: 0)        -1190                         -320                          -80                           -30                           -30                           -30                           -40                           -60                           -60                           -70                           -70                           -70                           -109                          -10                           90                            
  %677 = add nsw i32 %676, %67... (idx: 1)        -1190                         -320                          -80                           -30                           -30                           -30                           -40                           -60                           -60                           -70                           -70                           -70                           -109                          -10                           90                            
  %680 = add nsw i32 %679, %67... (idx: 2)        -1190                         -320                          -80                           -30                           -30                           -30                           -40                           -60                           -60                           -70                           -70                           -70                           -109                          -10                           90                            
  %683 = add nsw i32 %682, %68... (idx: 3)        -1190                         -320                          -80                           -30                           -30                           -30                           -40                           -60                           -60                           -70                           -70                           -70                           -109                          -10                           90                            
  %686 = add nsw i32 %685, %68... (idx: 4)        -1190                         -320                          -80                           -30                           -30                           -30                           -40                           -60                           -60                           -70                           -70                           -70                           -109                          -10                           90                            
  %689 = add nsw i32 %688, %68... (idx: 5)        -1190                         -320                          -80                           -30                           -30                           -30                           -40                           -60                           -60                           -70                           -70                           -70                           -109                          -10                           90                            
  %692 = add nsw i32 %691, %68... (idx: 6)        -1190                         -320                          -80                           -30                           -30                           -30                           -40                           -60                           -60                           -70                           -70                           -70                           -109                          -10                           90                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         
  %674 = add nsw i32 %673, %.l... (idx: 0)        1                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             
  %677 = add nsw i32 %676, %67... (idx: 1)        0                             1                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             
  %680 = add nsw i32 %679, %67... (idx: 2)        0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             1                             0                             0                             
  %683 = add nsw i32 %682, %68... (idx: 3)        0                             0                             1                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             
  %686 = add nsw i32 %685, %68... (idx: 4)        0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             1                             0                             0                             0                             
  %689 = add nsw i32 %688, %68... (idx: 5)        0                             0                             0                             0                             0                             0                             0                             0                             0                             1                             0                             0                             0                             0                             0                             
  %692 = add nsw i32 %691, %68... (idx: 6)        0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             1                             0                             0                             0                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %674 = add nsw i32 %673, %.l... (idx: 0) -> main_signed_add_32_0 (mux inputs: 121)
  %677 = add nsw i32 %676, %67... (idx: 1) -> main_signed_add_32_1 (mux inputs: 34)
  %683 = add nsw i32 %682, %68... (idx: 3) -> main_signed_add_32_2 (mux inputs: 10)
  %689 = add nsw i32 %688, %68... (idx: 5) -> main_signed_add_32_9 (mux inputs: 9)
  %692 = add nsw i32 %691, %68... (idx: 6) -> main_signed_add_32_10 (mux inputs: 9)
  %686 = add nsw i32 %685, %68... (idx: 4) -> main_signed_add_32_11 (mux inputs: 9)
  %680 = add nsw i32 %679, %67... (idx: 2) -> main_signed_add_32_12 (mux inputs: 13)
State: LEGUP_F_main_BB_preheader
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %695 = add nsw i32 %694, %69... can share an output register with another operation already assigned to main_signed_add_32_0
  %695 = add nsw i32 %694, %69... can share an output register with another operation already assigned to main_signed_add_32_1
  %695 = add nsw i32 %694, %69... can share an output register with another operation already assigned to main_signed_add_32_2
  %695 = add nsw i32 %694, %69... can share an output register with another operation already assigned to main_signed_add_32_3
  %695 = add nsw i32 %694, %69... can share an output register with another operation already assigned to main_signed_add_32_4
  %695 = add nsw i32 %694, %69... can share an output register with another operation already assigned to main_signed_add_32_5
  %695 = add nsw i32 %694, %69... can share an output register with another operation already assigned to main_signed_add_32_6
  %695 = add nsw i32 %694, %69... can share an output register with another operation already assigned to main_signed_add_32_7
  %695 = add nsw i32 %694, %69... can share an output register with another operation already assigned to main_signed_add_32_8
  %695 = add nsw i32 %694, %69... can share an output register with another operation already assigned to main_signed_add_32_9
  %695 = add nsw i32 %694, %69... can share an output register with another operation already assigned to main_signed_add_32_10
  %695 = add nsw i32 %694, %69... can share an output register with another operation already assigned to main_signed_add_32_11
  %695 = add nsw i32 %694, %69... can share an output register with another operation already assigned to main_signed_add_32_12
  %695 = add nsw i32 %694, %69... can share an output register with another operation already assigned to main_signed_add_32_13
  %695 = add nsw i32 %694, %69... can share an output register with another operation already assigned to main_signed_add_32_14
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         
  %695 = add nsw i32 %694, %69... (idx: 0)        -1210                         -340                          -100                          -30                           -30                           -30                           -40                           -60                           -60                           -90                           -90                           -90                           -129                          -10                           90                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         
  %695 = add nsw i32 %694, %69... (idx: 0)        1                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %695 = add nsw i32 %694, %69... (idx: 0) -> main_signed_add_32_0 (mux inputs: 123)
State: LEGUP_F_main_BB__698
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %706 = add nsw i32 %i.13, 1 can share an output register with another operation already assigned to main_signed_add_32_0
  %706 = add nsw i32 %i.13, 1 can share an output register with another operation already assigned to main_signed_add_32_1
  %706 = add nsw i32 %i.13, 1 can share an output register with another operation already assigned to main_signed_add_32_2
  %706 = add nsw i32 %i.13, 1 can share an output register with another operation already assigned to main_signed_add_32_9
  %706 = add nsw i32 %i.13, 1 can share an output register with another operation already assigned to main_signed_add_32_10
  %706 = add nsw i32 %i.13, 1 can share an output register with another operation already assigned to main_signed_add_32_11
  %706 = add nsw i32 %i.13, 1 can share an output register with another operation already assigned to main_signed_add_32_12
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         
  %706 = add nsw i32 %i.13, 1 (idx: 0)            -1225                         -335                          -94                           -34                           -34                           -34                           -44                           -64                           -65                           -84                           -84                           -84                           -123                          -14                           85                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         
  %706 = add nsw i32 %i.13, 1 (idx: 0)            1                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %706 = add nsw i32 %i.13, 1 (idx: 0) -> main_signed_add_32_0 (mux inputs: 124)
State: LEGUP_F_main_BB__698
Binding functional unit type: main_0_so_local_mem_dual_port
Weight matrix for operation/function unit matching:
  %700 = load i16* %699, align... can share an output register with another operation already assigned to main_main_0_so_local_mem_dual_port_0
  %700 = load i16* %699, align... can share an output register with another operation already assigned to main_main_0_so_local_mem_dual_port_1
                                                  main_main_0_so_local_mem_dual_port_0main_main_0_so_local_mem_dual_port_1
  %700 = load i16* %699, align... (idx: 0)        -75                           25                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_main_0_so_local_mem_dual_port_0main_main_0_so_local_mem_dual_port_1
  %700 = load i16* %699, align... (idx: 0)        1                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %700 = load i16* %699, align... (idx: 0) -> main_main_0_so_local_mem_dual_port_0 (mux inputs: 19)
State: LEGUP_F_main_BB__698
Binding functional unit type: outData_local_mem_dual_port
Weight matrix for operation/function unit matching:
                                                  main_outData_local_mem_dual_port_0
  %702 = load i16* %701, align... (idx: 0)        95                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_outData_local_mem_dual_port_0
  %702 = load i16* %701, align... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %702 = load i16* %701, align... (idx: 0) -> main_outData_local_mem_dual_port_0 (mux inputs: 1)
State: LEGUP_F_main_BB__698
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %gep153 = add i32 %gep_int15... can share an output register with another operation already assigned to main_signed_add_32_0
  %gep153 = add i32 %gep_int15... can share an output register with another operation already assigned to main_signed_add_32_1
  %gep153 = add i32 %gep_int15... can share an output register with another operation already assigned to main_signed_add_32_2
  %gep153 = add i32 %gep_int15... can share an output register with another operation already assigned to main_signed_add_32_3
  %gep153 = add i32 %gep_int15... can share an output register with another operation already assigned to main_signed_add_32_4
  %gep153 = add i32 %gep_int15... can share an output register with another operation already assigned to main_signed_add_32_5
  %gep153 = add i32 %gep_int15... can share an output register with another operation already assigned to main_signed_add_32_6
  %gep153 = add i32 %gep_int15... can share an output register with another operation already assigned to main_signed_add_32_7
  %gep153 = add i32 %gep_int15... can share an output register with another operation already assigned to main_signed_add_32_8
  %gep153 = add i32 %gep_int15... can share an output register with another operation already assigned to main_signed_add_32_9
  %gep153 = add i32 %gep_int15... can share an output register with another operation already assigned to main_signed_add_32_10
  %gep153 = add i32 %gep_int15... can share an output register with another operation already assigned to main_signed_add_32_11
  %gep153 = add i32 %gep_int15... can share an output register with another operation already assigned to main_signed_add_32_12
  %gep153 = add i32 %gep_int15... can share an output register with another operation already assigned to main_signed_add_32_13
  %gep153 = add i32 %gep_int15... can share an output register with another operation already assigned to main_signed_add_32_14
  %gep156 = add i32 %gep_int15... can share an output register with another operation already assigned to main_signed_add_32_0
  %gep156 = add i32 %gep_int15... can share an output register with another operation already assigned to main_signed_add_32_1
  %gep156 = add i32 %gep_int15... can share an output register with another operation already assigned to main_signed_add_32_2
  %gep156 = add i32 %gep_int15... can share an output register with another operation already assigned to main_signed_add_32_3
  %gep156 = add i32 %gep_int15... can share an output register with another operation already assigned to main_signed_add_32_4
  %gep156 = add i32 %gep_int15... can share an output register with another operation already assigned to main_signed_add_32_5
  %gep156 = add i32 %gep_int15... can share an output register with another operation already assigned to main_signed_add_32_6
  %gep156 = add i32 %gep_int15... can share an output register with another operation already assigned to main_signed_add_32_7
  %gep156 = add i32 %gep_int15... can share an output register with another operation already assigned to main_signed_add_32_8
  %gep156 = add i32 %gep_int15... can share an output register with another operation already assigned to main_signed_add_32_9
  %gep156 = add i32 %gep_int15... can share an output register with another operation already assigned to main_signed_add_32_10
  %gep156 = add i32 %gep_int15... can share an output register with another operation already assigned to main_signed_add_32_11
  %gep156 = add i32 %gep_int15... can share an output register with another operation already assigned to main_signed_add_32_12
  %gep156 = add i32 %gep_int15... can share an output register with another operation already assigned to main_signed_add_32_13
  %gep156 = add i32 %gep_int15... can share an output register with another operation already assigned to main_signed_add_32_14
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         
  %gep153 = add i32 %gep_int15... (idx: 0)        -1240                         -340                          -100                          -30                           -30                           -30                           -40                           -60                           -60                           -90                           -90                           -90                           -130                          -9                            90                            
  %gep156 = add i32 %gep_int15... (idx: 1)        -1240                         -340                          -100                          -30                           -30                           -30                           -40                           -60                           -60                           -90                           -90                           -90                           -130                          -9                            90                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         
  %gep153 = add i32 %gep_int15... (idx: 0)        1                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             
  %gep156 = add i32 %gep_int15... (idx: 1)        0                             1                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %gep153 = add i32 %gep_int15... (idx: 0) -> main_signed_add_32_0 (mux inputs: 126)
  %gep156 = add i32 %gep_int15... (idx: 1) -> main_signed_add_32_1 (mux inputs: 36)
State: LEGUP_F_main_BB__698
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         
  %705 = add nsw i32 %704, %ma... (idx: 0)        -1270                         -370                          -110                          -40                           -40                           -40                           -50                           -70                           -70                           -100                          -100                          -100                          -139                          -20                           80                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         
  %705 = add nsw i32 %704, %ma... (idx: 0)        1                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %705 = add nsw i32 %704, %ma... (idx: 0) -> main_signed_add_32_0 (mux inputs: 128)


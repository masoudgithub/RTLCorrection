//----------------------------------------------------------------------------//
// Generated by LegUp High-Level Synthesis Tool Version 4.0 (http://legup.org)
// Compiled: Tue Jun 18 03:11:52 2019
// University of Toronto
// For research and academic purposes only. Commercial use is prohibited.
// Please send bugs to: legup@eecg.toronto.edu
// Date: Sun Jun 23 14:36:51 2019
//----------------------------------------------------------------------------//

--------------------------------------------------------------------------------
Function: main
--------------------------------------------------------------------------------
Function unit type:           Number Required               
mem_dual_port                 2                             
signed_add_32                 7                             
signed_subtract_32            1                             

Running Bipartite Weighted Matching on function: main
State: LEGUP_F_main_BB__0
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i8* getelementptr inbo... (idx: 0)        0                             0                             
  store i32 68157440, i32* @ld... (idx: 1)        0                             0                             
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i8* getelementptr inbo... (idx: 0)        1                             0                             
  store i32 68157440, i32* @ld... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i8* getelementptr inbo... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 0)
  store i32 68157440, i32* @ld... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 0)
State: LEGUP_F_main_BB__0
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  store i32 0, i32* @ld_Incnt,... can share an output register with another operation already assigned to main_mem_dual_port_0
  store i32 0, i32* @ld_Incnt,... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 0, i32* @ld_Incnt,... (idx: 0)        10                            10                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 0, i32* @ld_Incnt,... (idx: 0)        1                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 0, i32* @ld_Incnt,... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 0)
State: LEGUP_F_main_BB_lrphiiii
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %1 = load i8* %p2.02.i.i.i.i... can share an output register with another operation already assigned to main_mem_dual_port_0
  %1 = load i8* %p2.02.i.i.i.i... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %1 = load i8* %p2.02.i.i.i.i... (idx: 0)        5                             5                             
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %1 = load i8* %p2.02.i.i.i.i... (idx: 0)        1                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %1 = load i8* %p2.02.i.i.i.i... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 1)
State: LEGUP_F_main_BB_lrphiiii
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          
  %gep = add i32 %gep_int, 1 (idx: 0)             -5                            -5                            -5                            -5                            -5                            -5                            -5                            
  %gep2 = add i32 %gep_int1, 1 (idx: 1)           -5                            -5                            -5                            -5                            -5                            -5                            -5                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          
  %gep = add i32 %gep_int, 1 (idx: 0)             1                             0                             0                             0                             0                             0                             0                             
  %gep2 = add i32 %gep_int1, 1 (idx: 1)           0                             1                             0                             0                             0                             0                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %gep = add i32 %gep_int, 1 (idx: 0) -> main_signed_add_32_0 (mux inputs: 1)
  %gep2 = add i32 %gep_int1, 1 (idx: 1) -> main_signed_add_32_1 (mux inputs: 1)
State: LEGUP_F_main_BB_lrphiiii
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  store i8 %1, i8* %p1.01.i.i.... can share an output register with another operation already assigned to main_mem_dual_port_0
  store i8 %1, i8* %p1.01.i.i.... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i8 %1, i8* %p1.01.i.i.... (idx: 0)        -10                           0                             
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i8 %1, i8* %p1.01.i.i.... (idx: 0)        1                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i8 %1, i8* %p1.01.i.i.... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 3)
State: LEGUP_F_main_BB_Get_Bitsexiti
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %4 = load i8* getelementptr ... can share an output register with another operation already assigned to main_mem_dual_port_0
  %4 = load i8* getelementptr ... can share an output register with another operation already assigned to main_mem_dual_port_1
  %.pre.i = load i8* getelemen... can share an output register with another operation already assigned to main_mem_dual_port_0
  %.pre.i = load i8* getelemen... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %4 = load i8* getelementptr ... (idx: 0)        -20                           10                            
  %.pre.i = load i8* getelemen... (idx: 1)        -20                           10                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %4 = load i8* getelementptr ... (idx: 0)        1                             0                             
  %.pre.i = load i8* getelemen... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %4 = load i8* getelementptr ... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 3)
  %.pre.i = load i8* getelemen... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 0)
State: LEGUP_F_main_BB_Get_Bitsexiti
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %.pre1.i = load i8* geteleme... can share an output register with another operation already assigned to main_mem_dual_port_0
  %.pre1.i = load i8* geteleme... can share an output register with another operation already assigned to main_mem_dual_port_1
  %.pre2.i = load i8* geteleme... can share an output register with another operation already assigned to main_mem_dual_port_0
  %.pre2.i = load i8* geteleme... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %.pre1.i = load i8* geteleme... (idx: 0)        -20                           10                            
  %.pre2.i = load i8* geteleme... (idx: 1)        -20                           10                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %.pre1.i = load i8* geteleme... (idx: 0)        1                             0                             
  %.pre2.i = load i8* geteleme... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %.pre1.i = load i8* geteleme... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 3)
  %.pre2.i = load i8* geteleme... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 0)
State: LEGUP_F_main_BB_Get_Bitsexiti
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  store i8* getelementptr inbo... can share an output register with another operation already assigned to main_mem_dual_port_0
  store i8* getelementptr inbo... can share an output register with another operation already assigned to main_mem_dual_port_1
  store i32 31, i32* @ld_Incnt... can share an output register with another operation already assigned to main_mem_dual_port_0
  store i32 31, i32* @ld_Incnt... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i8* getelementptr inbo... (idx: 0)        -20                           10                            
  store i32 31, i32* @ld_Incnt... (idx: 1)        -20                           10                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i8* getelementptr inbo... (idx: 0)        1                             0                             
  store i32 31, i32* @ld_Incnt... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i8* getelementptr inbo... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 3)
  store i32 31, i32* @ld_Incnt... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 0)
State: LEGUP_F_main_BB_Get_Bitsexiti
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  store i32 %12, i32* @ld_Bfr,... can share an output register with another operation already assigned to main_mem_dual_port_0
  store i32 %12, i32* @ld_Bfr,... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 %12, i32* @ld_Bfr,... (idx: 0)        -25                           5                             
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 %12, i32* @ld_Bfr,... (idx: 0)        1                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 %12, i32* @ld_Bfr,... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 4)
State: LEGUP_F_main_BB__15
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %16 = load i32* @ld_Bfr, ali... can share an output register with another operation already assigned to main_mem_dual_port_0
  %16 = load i32* @ld_Bfr, ali... can share an output register with another operation already assigned to main_mem_dual_port_1
  %18 = load i32* @ld_Incnt, a... can share an output register with another operation already assigned to main_mem_dual_port_0
  %18 = load i32* @ld_Incnt, a... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %16 = load i32* @ld_Bfr, ali... (idx: 0)        -30                           10                            
  %18 = load i32* @ld_Incnt, a... (idx: 1)        -30                           10                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %16 = load i32* @ld_Bfr, ali... (idx: 0)        1                             0                             
  %18 = load i32* @ld_Incnt, a... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %16 = load i32* @ld_Bfr, ali... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 4)
  %18 = load i32* @ld_Incnt, a... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 0)
State: LEGUP_F_main_BB__15
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  store i32 undef, i32* @ld_Bf... can share an output register with another operation already assigned to main_mem_dual_port_0
  store i32 undef, i32* @ld_Bf... can share an output register with another operation already assigned to main_mem_dual_port_1
  store i32 %19, i32* @ld_Incn... can share an output register with another operation already assigned to main_mem_dual_port_0
  store i32 %19, i32* @ld_Incn... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 undef, i32* @ld_Bf... (idx: 0)        -30                           10                            
  store i32 %19, i32* @ld_Incn... (idx: 1)        -35                           5                             
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 undef, i32* @ld_Bf... (idx: 0)        1                             0                             
  store i32 %19, i32* @ld_Incn... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 undef, i32* @ld_Bf... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 4)
  store i32 %19, i32* @ld_Incn... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 1)
State: LEGUP_F_main_BB__15
Binding functional unit type: signed_subtract_32
Weight matrix for operation/function unit matching:
                                                  main_signed_subtract_32_0     
  %19 = sub nsw i32 %18, 200 (idx: 0)             -5                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_subtract_32_0     
  %19 = sub nsw i32 %18, 200 (idx: 0)             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %19 = sub nsw i32 %18, 200 (idx: 0) -> main_signed_subtract_32_0 (mux inputs: 1)
State: LEGUP_F_main_BB__21
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %22 = load i8** @ld_Rdptr, a... can share an output register with another operation already assigned to main_mem_dual_port_0
  %22 = load i8** @ld_Rdptr, a... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %22 = load i8** @ld_Rdptr, a... (idx: 0)        -30                           0                             
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %22 = load i8** @ld_Rdptr, a... (idx: 0)        1                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %22 = load i8** @ld_Rdptr, a... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 4)
State: LEGUP_F_main_BB__21
Binding functional unit type: signed_subtract_32
Weight matrix for operation/function unit matching:
  %24 = sub i32 224, %18 can share an input with another operation already assigned to main_signed_subtract_32_0
                                                  main_signed_subtract_32_0     
  %24 = sub i32 224, %18 (idx: 0)                 -10                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_subtract_32_0     
  %24 = sub i32 224, %18 (idx: 0)                 1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %24 = sub i32 224, %18 (idx: 0) -> main_signed_subtract_32_0 (mux inputs: 1)
State: LEGUP_F_main_BB_lrphiiiiii
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %27 = load i8* %p2.02.i.i.i.... can share an output register with another operation already assigned to main_mem_dual_port_0
  %27 = load i8* %p2.02.i.i.i.... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %27 = load i8* %p2.02.i.i.i.... (idx: 0)        -35                           -5                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %27 = load i8* %p2.02.i.i.i.... (idx: 0)        1                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %27 = load i8* %p2.02.i.i.i.... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 5)
State: LEGUP_F_main_BB_lrphiiiiii
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %gep4 = add i32 %gep_int3, 1 can share an output register with another operation already assigned to main_signed_add_32_0
  %gep4 = add i32 %gep_int3, 1 can share an output register with another operation already assigned to main_signed_add_32_1
  %gep6 = add i32 %gep_int5, 1 can share an output register with another operation already assigned to main_signed_add_32_0
  %gep6 = add i32 %gep_int5, 1 can share an output register with another operation already assigned to main_signed_add_32_1
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          
  %gep4 = add i32 %gep_int3, 1 (idx: 0)           -5                            -5                            -5                            -5                            -5                            -5                            -5                            
  %gep6 = add i32 %gep_int5, 1 (idx: 1)           -5                            -5                            -5                            -5                            -5                            -5                            -5                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          
  %gep4 = add i32 %gep_int3, 1 (idx: 0)           1                             0                             0                             0                             0                             0                             0                             
  %gep6 = add i32 %gep_int5, 1 (idx: 1)           0                             1                             0                             0                             0                             0                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %gep4 = add i32 %gep_int3, 1 (idx: 0) -> main_signed_add_32_0 (mux inputs: 2)
  %gep6 = add i32 %gep_int5, 1 (idx: 1) -> main_signed_add_32_1 (mux inputs: 2)
State: LEGUP_F_main_BB_lrphiiiiii
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  store i8 %27, i8* %p1.01.i.i... can share an output register with another operation already assigned to main_mem_dual_port_0
  store i8 %27, i8* %p1.01.i.i... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i8 %27, i8* %p1.01.i.i... (idx: 0)        -50                           -10                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i8 %27, i8* %p1.01.i.i... (idx: 0)        1                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i8 %27, i8* %p1.01.i.i... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 7)
State: LEGUP_F_main_BB_Fill_Bufferexitiiii
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %gep8 = add i32 %gep_int7, 1 can share an output register with another operation already assigned to main_signed_add_32_0
  %gep8 = add i32 %gep_int7, 1 can share an output register with another operation already assigned to main_signed_add_32_1
  %32 = add nsw i32 %Incnt.1.i... can share an output register with another operation already assigned to main_signed_add_32_0
  %32 = add nsw i32 %Incnt.1.i... can share an output register with another operation already assigned to main_signed_add_32_1
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          
  %gep8 = add i32 %gep_int7, 1 (idx: 0)           -15                           -15                           -5                            -5                            -5                            -5                            -5                            
  %32 = add nsw i32 %Incnt.1.i... (idx: 1)        -15                           -15                           -5                            -5                            -5                            -5                            -5                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          
  %gep8 = add i32 %gep_int7, 1 (idx: 0)           1                             0                             0                             0                             0                             0                             0                             
  %32 = add nsw i32 %Incnt.1.i... (idx: 1)        0                             1                             0                             0                             0                             0                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %gep8 = add i32 %gep_int7, 1 (idx: 0) -> main_signed_add_32_0 (mux inputs: 3)
  %32 = add nsw i32 %Incnt.1.i... (idx: 1) -> main_signed_add_32_1 (mux inputs: 3)
State: LEGUP_F_main_BB_loopexitiiii
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  store i8* %scevgep30, i8** @... can share an output register with another operation already assigned to main_mem_dual_port_0
  store i8* %scevgep30, i8** @... can share an output register with another operation already assigned to main_mem_dual_port_1
  store i32 -1, i32* @ld_Bfr, ... can share an output register with another operation already assigned to main_mem_dual_port_0
  store i32 -1, i32* @ld_Bfr, ... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i8* %scevgep30, i8** @... (idx: 0)        -65                           -5                            
  store i32 -1, i32* @ld_Bfr, ... (idx: 1)        -60                           0                             
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i8* %scevgep30, i8** @... (idx: 0)        1                             0                             
  store i32 -1, i32* @ld_Bfr, ... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i8* %scevgep30, i8** @... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 8)
  store i32 -1, i32* @ld_Bfr, ... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 1)
State: LEGUP_F_main_BB_loopexitiiii
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %35 = add i32 %34, 1 can share an output register with another operation already assigned to main_signed_add_32_0
  %35 = add i32 %34, 1 can share an output register with another operation already assigned to main_signed_add_32_1
  %gep10 = add i32 %gep_int9, ... can share an output register with another operation already assigned to main_signed_add_32_0
  %gep10 = add i32 %gep_int9, ... can share an output register with another operation already assigned to main_signed_add_32_1
  %37 = add i32 -192, %18 can share an output register with another operation already assigned to main_signed_add_32_0
  %37 = add i32 -192, %18 can share an output register with another operation already assigned to main_signed_add_32_1
  %38 = add i32 %37, %36 can share an output register with another operation already assigned to main_signed_add_32_0
  %38 = add i32 %37, %36 can share an output register with another operation already assigned to main_signed_add_32_1
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          
  %35 = add i32 %34, 1 (idx: 0)                   -25                           -25                           -5                            -5                            -5                            -5                            -5                            
  %gep10 = add i32 %gep_int9, ... (idx: 1)        -30                           -30                           -10                           -10                           -10                           -10                           -10                           
  %37 = add i32 -192, %18 (idx: 2)                -25                           -25                           -5                            -5                            -5                            -5                            -5                            
  %38 = add i32 %37, %36 (idx: 3)                 -30                           -30                           -10                           -10                           -10                           -10                           -10                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          
  %35 = add i32 %34, 1 (idx: 0)                   1                             0                             0                             0                             0                             0                             0                             
  %gep10 = add i32 %gep_int9, ... (idx: 1)        0                             1                             0                             0                             0                             0                             0                             
  %37 = add i32 -192, %18 (idx: 2)                0                             0                             0                             0                             0                             1                             0                             
  %38 = add i32 %37, %36 (idx: 3)                 0                             0                             0                             0                             0                             0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %35 = add i32 %34, 1 (idx: 0) -> main_signed_add_32_0 (mux inputs: 4)
  %gep10 = add i32 %gep_int9, ... (idx: 1) -> main_signed_add_32_1 (mux inputs: 5)
  %37 = add i32 -192, %18 (idx: 2) -> main_signed_add_32_5 (mux inputs: 1)
  %38 = add i32 %37, %36 (idx: 3) -> main_signed_add_32_6 (mux inputs: 2)
State: LEGUP_F_main_BB_loopexit2iloopexitiii
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  store i8* %.lcssa2, i8** @ld... can share an output register with another operation already assigned to main_mem_dual_port_0
  store i8* %.lcssa2, i8** @ld... can share an output register with another operation already assigned to main_mem_dual_port_1
  store i32 -1, i32* @ld_Bfr, ... can share an output register with another operation already assigned to main_mem_dual_port_0
  store i32 -1, i32* @ld_Bfr, ... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i8* %.lcssa2, i8** @ld... (idx: 0)        -75                           -5                            
  store i32 -1, i32* @ld_Bfr, ... (idx: 1)        -70                           0                             
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i8* %.lcssa2, i8** @ld... (idx: 0)        1                             0                             
  store i32 -1, i32* @ld_Bfr, ... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i8* %.lcssa2, i8** @ld... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 9)
  store i32 -1, i32* @ld_Bfr, ... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 1)
State: LEGUP_F_main_BB_loopexit2iloopexitiii
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %40 = add i32 -192, %18 can share an output register with another operation already assigned to main_signed_add_32_0
  %40 = add i32 -192, %18 can share an output register with another operation already assigned to main_signed_add_32_1
  %40 = add i32 -192, %18 can share an input with another operation already assigned to main_signed_add_32_5
  %40 = add i32 -192, %18 can share an output register with another operation already assigned to main_signed_add_32_5
  %40 = add i32 -192, %18 can share an output register with another operation already assigned to main_signed_add_32_6
  %41 = add i32 %40, %39 can share an output register with another operation already assigned to main_signed_add_32_0
  %41 = add i32 %40, %39 can share an output register with another operation already assigned to main_signed_add_32_1
  %41 = add i32 %40, %39 can share an output register with another operation already assigned to main_signed_add_32_5
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          
  %40 = add i32 -192, %18 (idx: 0)                -35                           -45                           -5                            -5                            -5                            0                             -15                           
  %41 = add i32 %40, %39 (idx: 1)                 -40                           -50                           -10                           -10                           -10                           -10                           -30                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          
  %40 = add i32 -192, %18 (idx: 0)                0                             1                             0                             0                             0                             0                             0                             
  %41 = add i32 %40, %39 (idx: 1)                 1                             0                             0                             0                             0                             0                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %41 = add i32 %40, %39 (idx: 1) -> main_signed_add_32_0 (mux inputs: 6)
  %40 = add i32 -192, %18 (idx: 0) -> main_signed_add_32_1 (mux inputs: 6)
State: LEGUP_F_main_BB_loopexit2iiii
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  store i32 %Incnt.2.i.i.i.i, ... can share an output register with another operation already assigned to main_mem_dual_port_0
  store i32 %Incnt.2.i.i.i.i, ... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 %Incnt.2.i.i.i.i, ... (idx: 0)        -85                           -5                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 %Incnt.2.i.i.i.i, ... (idx: 0)        1                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 %Incnt.2.i.i.i.i, ... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 10)
State: LEGUP_F_main_BB__43
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %44 = add nsw i32 %13, -1 can share an output register with another operation already assigned to main_signed_add_32_0
  %44 = add nsw i32 %13, -1 can share an output register with another operation already assigned to main_signed_add_32_1
  %44 = add nsw i32 %13, -1 can share an output register with another operation already assigned to main_signed_add_32_5
  %44 = add nsw i32 %13, -1 can share an output register with another operation already assigned to main_signed_add_32_6
  %46 = add i32 %17, 1 can share an output register with another operation already assigned to main_signed_add_32_0
  %46 = add i32 %17, 1 can share an output register with another operation already assigned to main_signed_add_32_1
  %46 = add i32 %17, 1 can share an output register with another operation already assigned to main_signed_add_32_5
  %46 = add i32 %17, 1 can share an output register with another operation already assigned to main_signed_add_32_6
  %47 = add i32 %46, %45 can share an output register with another operation already assigned to main_signed_add_32_0
  %47 = add i32 %46, %45 can share an output register with another operation already assigned to main_signed_add_32_1
  %47 = add i32 %46, %45 can share an output register with another operation already assigned to main_signed_add_32_5
  %47 = add i32 %46, %45 can share an output register with another operation already assigned to main_signed_add_32_6
  %48 = add i32 %47, 45 can share an output register with another operation already assigned to main_signed_add_32_0
  %48 = add i32 %47, 45 can share an output register with another operation already assigned to main_signed_add_32_1
  %48 = add i32 %47, 45 can share an output register with another operation already assigned to main_signed_add_32_5
  %48 = add i32 %47, 45 can share an output register with another operation already assigned to main_signed_add_32_6
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          
  %44 = add nsw i32 %13, -1 (idx: 0)              -55                           -55                           -5                            -5                            -5                            -5                            -15                           
  %46 = add i32 %17, 1 (idx: 1)                   -55                           -55                           -5                            -5                            -5                            -5                            -15                           
  %47 = add i32 %46, %45 (idx: 2)                 -60                           -60                           -10                           -10                           -10                           -10                           -20                           
  %48 = add i32 %47, 45 (idx: 3)                  -55                           -55                           -5                            -5                            -5                            -5                            -15                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          
  %44 = add nsw i32 %13, -1 (idx: 0)              1                             0                             0                             0                             0                             0                             0                             
  %46 = add i32 %17, 1 (idx: 1)                   0                             1                             0                             0                             0                             0                             0                             
  %47 = add i32 %46, %45 (idx: 2)                 0                             0                             0                             0                             0                             0                             1                             
  %48 = add i32 %47, 45 (idx: 3)                  0                             0                             0                             0                             0                             1                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %44 = add nsw i32 %13, -1 (idx: 0) -> main_signed_add_32_0 (mux inputs: 7)
  %46 = add i32 %17, 1 (idx: 1) -> main_signed_add_32_1 (mux inputs: 7)
  %48 = add i32 %47, 45 (idx: 3) -> main_signed_add_32_5 (mux inputs: 2)
  %47 = add i32 %46, %45 (idx: 2) -> main_signed_add_32_6 (mux inputs: 4)
State: LEGUP_F_main_BB__43
Binding functional unit type: signed_subtract_32
Weight matrix for operation/function unit matching:
  %50 = sub nsw i32 %48, 8192 can share an output register with another operation already assigned to main_signed_subtract_32_0
                                                  main_signed_subtract_32_0     
  %50 = sub nsw i32 %48, 8192 (idx: 0)            -5                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_subtract_32_0     
  %50 = sub nsw i32 %48, 8192 (idx: 0)            1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %50 = sub nsw i32 %48, 8192 (idx: 0) -> main_signed_subtract_32_0 (mux inputs: 2)
State: LEGUP_F_main_BB__53
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %56 = add i32 %.neg2.i.i.i, ... can share an output register with another operation already assigned to main_signed_add_32_0
  %56 = add i32 %.neg2.i.i.i, ... can share an output register with another operation already assigned to main_signed_add_32_1
  %56 = add i32 %.neg2.i.i.i, ... can share an output register with another operation already assigned to main_signed_add_32_5
  %56 = add i32 %.neg2.i.i.i, ... can share an output register with another operation already assigned to main_signed_add_32_6
  %58 = add nsw i32 %56, 8192 can share an output register with another operation already assigned to main_signed_add_32_0
  %58 = add nsw i32 %56, 8192 can share an output register with another operation already assigned to main_signed_add_32_1
  %58 = add nsw i32 %56, 8192 can share an output register with another operation already assigned to main_signed_add_32_5
  %58 = add nsw i32 %56, 8192 can share an output register with another operation already assigned to main_signed_add_32_6
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          
  %56 = add i32 %.neg2.i.i.i, ... (idx: 0)        -65                           -65                           -5                            -5                            -5                            -15                           -35                           
  %58 = add nsw i32 %56, 8192 (idx: 1)            -65                           -65                           -5                            -5                            -5                            -15                           -35                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          
  %56 = add i32 %.neg2.i.i.i, ... (idx: 0)        1                             0                             0                             0                             0                             0                             0                             
  %58 = add nsw i32 %56, 8192 (idx: 1)            0                             1                             0                             0                             0                             0                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %56 = add i32 %.neg2.i.i.i, ... (idx: 0) -> main_signed_add_32_0 (mux inputs: 8)
  %58 = add nsw i32 %56, 8192 (idx: 1) -> main_signed_add_32_1 (mux inputs: 8)
State: LEGUP_F_main_BB__53
Binding functional unit type: signed_subtract_32
Weight matrix for operation/function unit matching:
  %.neg2.i.i.i = sub i32 %.neg... can share an output register with another operation already assigned to main_signed_subtract_32_0
                                                  main_signed_subtract_32_0     
  %.neg2.i.i.i = sub i32 %.neg... (idx: 0)        -20                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_subtract_32_0     
  %.neg2.i.i.i = sub i32 %.neg... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %.neg2.i.i.i = sub i32 %.neg... (idx: 0) -> main_signed_subtract_32_0 (mux inputs: 4)
State: LEGUP_F_main_BB__61
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %62 = load i32* @ld_Bfr, ali... can share an output register with another operation already assigned to main_mem_dual_port_0
  %62 = load i32* @ld_Bfr, ali... can share an output register with another operation already assigned to main_mem_dual_port_1
  %64 = load i32* @ld_Incnt, a... can share an output register with another operation already assigned to main_mem_dual_port_0
  %64 = load i32* @ld_Incnt, a... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %62 = load i32* @ld_Bfr, ali... (idx: 0)        -90                           0                             
  %64 = load i32* @ld_Incnt, a... (idx: 1)        -90                           0                             
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %62 = load i32* @ld_Bfr, ali... (idx: 0)        1                             0                             
  %64 = load i32* @ld_Incnt, a... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %62 = load i32* @ld_Bfr, ali... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 10)
  %64 = load i32* @ld_Incnt, a... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 1)
State: LEGUP_F_main_BB__61
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  store i32 undef, i32* @ld_Bf... can share an output register with another operation already assigned to main_mem_dual_port_0
  store i32 undef, i32* @ld_Bf... can share an output register with another operation already assigned to main_mem_dual_port_1
  store i32 %65, i32* @ld_Incn... can share an output register with another operation already assigned to main_mem_dual_port_0
  store i32 %65, i32* @ld_Incn... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 undef, i32* @ld_Bf... (idx: 0)        -90                           0                             
  store i32 %65, i32* @ld_Incn... (idx: 1)        -95                           -5                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 undef, i32* @ld_Bf... (idx: 0)        1                             0                             
  store i32 %65, i32* @ld_Incn... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 undef, i32* @ld_Bf... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 10)
  store i32 %65, i32* @ld_Incn... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 2)
State: LEGUP_F_main_BB__61
Binding functional unit type: signed_subtract_32
Weight matrix for operation/function unit matching:
  %65 = sub nsw i32 %64, 200 can share an output register with another operation already assigned to main_signed_subtract_32_0
                                                  main_signed_subtract_32_0     
  %65 = sub nsw i32 %64, 200 (idx: 0)             -35                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_subtract_32_0     
  %65 = sub nsw i32 %64, 200 (idx: 0)             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %65 = sub nsw i32 %64, 200 (idx: 0) -> main_signed_subtract_32_0 (mux inputs: 5)
State: LEGUP_F_main_BB__67
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %68 = load i8** @ld_Rdptr, a... can share an output register with another operation already assigned to main_mem_dual_port_0
  %68 = load i8** @ld_Rdptr, a... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %68 = load i8** @ld_Rdptr, a... (idx: 0)        -90                           -10                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %68 = load i8** @ld_Rdptr, a... (idx: 0)        1                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %68 = load i8** @ld_Rdptr, a... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 10)
State: LEGUP_F_main_BB__67
Binding functional unit type: signed_subtract_32
Weight matrix for operation/function unit matching:
  %70 = sub i32 224, %64 can share an input with another operation already assigned to main_signed_subtract_32_0
  %70 = sub i32 224, %64 can share an output register with another operation already assigned to main_signed_subtract_32_0
                                                  main_signed_subtract_32_0     
  %70 = sub i32 224, %64 (idx: 0)                 -40                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_subtract_32_0     
  %70 = sub i32 224, %64 (idx: 0)                 1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %70 = sub i32 224, %64 (idx: 0) -> main_signed_subtract_32_0 (mux inputs: 5)
State: LEGUP_F_main_BB_lrphiiii16ii
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %73 = load i8* %p2.02.i.i.i.... can share an output register with another operation already assigned to main_mem_dual_port_0
  %73 = load i8* %p2.02.i.i.i.... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %73 = load i8* %p2.02.i.i.i.... (idx: 0)        -95                           -15                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  %73 = load i8* %p2.02.i.i.i.... (idx: 0)        1                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %73 = load i8* %p2.02.i.i.i.... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 11)
State: LEGUP_F_main_BB_lrphiiii16ii
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %gep12 = add i32 %gep_int11,... can share an output register with another operation already assigned to main_signed_add_32_0
  %gep12 = add i32 %gep_int11,... can share an output register with another operation already assigned to main_signed_add_32_1
  %gep12 = add i32 %gep_int11,... can share an output register with another operation already assigned to main_signed_add_32_5
  %gep12 = add i32 %gep_int11,... can share an output register with another operation already assigned to main_signed_add_32_6
  %gep14 = add i32 %gep_int13,... can share an output register with another operation already assigned to main_signed_add_32_0
  %gep14 = add i32 %gep_int13,... can share an output register with another operation already assigned to main_signed_add_32_1
  %gep14 = add i32 %gep_int13,... can share an output register with another operation already assigned to main_signed_add_32_5
  %gep14 = add i32 %gep_int13,... can share an output register with another operation already assigned to main_signed_add_32_6
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          
  %gep12 = add i32 %gep_int11,... (idx: 0)        -75                           -75                           -5                            -5                            -5                            -15                           -35                           
  %gep14 = add i32 %gep_int13,... (idx: 1)        -75                           -75                           -5                            -5                            -5                            -15                           -35                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          
  %gep12 = add i32 %gep_int11,... (idx: 0)        1                             0                             0                             0                             0                             0                             0                             
  %gep14 = add i32 %gep_int13,... (idx: 1)        0                             1                             0                             0                             0                             0                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %gep12 = add i32 %gep_int11,... (idx: 0) -> main_signed_add_32_0 (mux inputs: 9)
  %gep14 = add i32 %gep_int13,... (idx: 1) -> main_signed_add_32_1 (mux inputs: 9)
State: LEGUP_F_main_BB_lrphiiii16ii
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  store i8 %73, i8* %p1.01.i.i... can share an output register with another operation already assigned to main_mem_dual_port_0
  store i8 %73, i8* %p1.01.i.i... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i8 %73, i8* %p1.01.i.i... (idx: 0)        -110                          -20                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i8 %73, i8* %p1.01.i.i... (idx: 0)        1                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i8 %73, i8* %p1.01.i.i... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 13)
State: LEGUP_F_main_BB_Fill_Bufferexitii18ii
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %gep16 = add i32 %gep_int15,... can share an output register with another operation already assigned to main_signed_add_32_0
  %gep16 = add i32 %gep_int15,... can share an output register with another operation already assigned to main_signed_add_32_1
  %gep16 = add i32 %gep_int15,... can share an output register with another operation already assigned to main_signed_add_32_5
  %gep16 = add i32 %gep_int15,... can share an output register with another operation already assigned to main_signed_add_32_6
  %78 = add nsw i32 %Incnt.1.i... can share an output register with another operation already assigned to main_signed_add_32_0
  %78 = add nsw i32 %Incnt.1.i... can share an output register with another operation already assigned to main_signed_add_32_1
  %78 = add nsw i32 %Incnt.1.i... can share an output register with another operation already assigned to main_signed_add_32_5
  %78 = add nsw i32 %Incnt.1.i... can share an output register with another operation already assigned to main_signed_add_32_6
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          
  %gep16 = add i32 %gep_int15,... (idx: 0)        -85                           -85                           -5                            -5                            -5                            -15                           -35                           
  %78 = add nsw i32 %Incnt.1.i... (idx: 1)        -85                           -85                           -5                            -5                            -5                            -15                           -35                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          
  %gep16 = add i32 %gep_int15,... (idx: 0)        1                             0                             0                             0                             0                             0                             0                             
  %78 = add nsw i32 %Incnt.1.i... (idx: 1)        0                             1                             0                             0                             0                             0                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %gep16 = add i32 %gep_int15,... (idx: 0) -> main_signed_add_32_0 (mux inputs: 10)
  %78 = add nsw i32 %Incnt.1.i... (idx: 1) -> main_signed_add_32_1 (mux inputs: 10)
State: LEGUP_F_main_BB_loopexitii19ii
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  store i8* %scevgep, i8** @ld... can share an output register with another operation already assigned to main_mem_dual_port_0
  store i8* %scevgep, i8** @ld... can share an output register with another operation already assigned to main_mem_dual_port_1
  store i32 -1, i32* @ld_Bfr, ... can share an output register with another operation already assigned to main_mem_dual_port_0
  store i32 -1, i32* @ld_Bfr, ... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i8* %scevgep, i8** @ld... (idx: 0)        -125                          -15                           
  store i32 -1, i32* @ld_Bfr, ... (idx: 1)        -120                          -10                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i8* %scevgep, i8** @ld... (idx: 0)        1                             0                             
  store i32 -1, i32* @ld_Bfr, ... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i8* %scevgep, i8** @ld... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 14)
  store i32 -1, i32* @ld_Bfr, ... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 2)
State: LEGUP_F_main_BB_loopexitii19ii
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %81 = add i32 %80, 1 can share an output register with another operation already assigned to main_signed_add_32_0
  %81 = add i32 %80, 1 can share an output register with another operation already assigned to main_signed_add_32_1
  %81 = add i32 %80, 1 can share an output register with another operation already assigned to main_signed_add_32_5
  %81 = add i32 %80, 1 can share an output register with another operation already assigned to main_signed_add_32_6
  %gep18 = add i32 %gep_int17,... can share an output register with another operation already assigned to main_signed_add_32_0
  %gep18 = add i32 %gep_int17,... can share an output register with another operation already assigned to main_signed_add_32_1
  %gep18 = add i32 %gep_int17,... can share an output register with another operation already assigned to main_signed_add_32_5
  %gep18 = add i32 %gep_int17,... can share an output register with another operation already assigned to main_signed_add_32_6
  %83 = add i32 -192, %64 can share an output register with another operation already assigned to main_signed_add_32_0
  %83 = add i32 -192, %64 can share an output register with another operation already assigned to main_signed_add_32_1
  %83 = add i32 -192, %64 can share an output register with another operation already assigned to main_signed_add_32_5
  %83 = add i32 -192, %64 can share an output register with another operation already assigned to main_signed_add_32_6
  %84 = add i32 %83, %82 can share an output register with another operation already assigned to main_signed_add_32_0
  %84 = add i32 %83, %82 can share an output register with another operation already assigned to main_signed_add_32_1
  %84 = add i32 %83, %82 can share an output register with another operation already assigned to main_signed_add_32_5
  %84 = add i32 %83, %82 can share an output register with another operation already assigned to main_signed_add_32_6
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          
  %81 = add i32 %80, 1 (idx: 0)                   -95                           -95                           -5                            -5                            -5                            -15                           -35                           
  %gep18 = add i32 %gep_int17,... (idx: 1)        -100                          -100                          -10                           -10                           -10                           -20                           -40                           
  %83 = add i32 -192, %64 (idx: 2)                -95                           -95                           -5                            -5                            -5                            -15                           -35                           
  %84 = add i32 %83, %82 (idx: 3)                 -100                          -100                          -10                           -10                           -10                           -20                           -40                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          
  %81 = add i32 %80, 1 (idx: 0)                   1                             0                             0                             0                             0                             0                             0                             
  %gep18 = add i32 %gep_int17,... (idx: 1)        0                             1                             0                             0                             0                             0                             0                             
  %83 = add i32 -192, %64 (idx: 2)                0                             0                             0                             0                             0                             0                             1                             
  %84 = add i32 %83, %82 (idx: 3)                 0                             0                             0                             0                             0                             1                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %81 = add i32 %80, 1 (idx: 0) -> main_signed_add_32_0 (mux inputs: 11)
  %gep18 = add i32 %gep_int17,... (idx: 1) -> main_signed_add_32_1 (mux inputs: 12)
  %84 = add i32 %83, %82 (idx: 3) -> main_signed_add_32_5 (mux inputs: 4)
  %83 = add i32 -192, %64 (idx: 2) -> main_signed_add_32_6 (mux inputs: 5)
State: LEGUP_F_main_BB_loopexit2iloopexiti20ii
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  store i8* %.lcssa, i8** @ld_... can share an output register with another operation already assigned to main_mem_dual_port_0
  store i8* %.lcssa, i8** @ld_... can share an output register with another operation already assigned to main_mem_dual_port_1
  store i32 -1, i32* @ld_Bfr, ... can share an output register with another operation already assigned to main_mem_dual_port_0
  store i32 -1, i32* @ld_Bfr, ... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i8* %.lcssa, i8** @ld_... (idx: 0)        -135                          -15                           
  store i32 -1, i32* @ld_Bfr, ... (idx: 1)        -130                          -10                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i8* %.lcssa, i8** @ld_... (idx: 0)        1                             0                             
  store i32 -1, i32* @ld_Bfr, ... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i8* %.lcssa, i8** @ld_... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 15)
  store i32 -1, i32* @ld_Bfr, ... (idx: 1) -> main_mem_dual_port_1 (mux inputs: 2)
State: LEGUP_F_main_BB_loopexit2iloopexiti20ii
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %86 = add i32 -192, %64 can share an output register with another operation already assigned to main_signed_add_32_0
  %86 = add i32 -192, %64 can share an output register with another operation already assigned to main_signed_add_32_1
  %86 = add i32 -192, %64 can share an output register with another operation already assigned to main_signed_add_32_5
  %86 = add i32 -192, %64 can share an input with another operation already assigned to main_signed_add_32_6
  %86 = add i32 -192, %64 can share an output register with another operation already assigned to main_signed_add_32_6
  %87 = add i32 %86, %85 can share an output register with another operation already assigned to main_signed_add_32_0
  %87 = add i32 %86, %85 can share an output register with another operation already assigned to main_signed_add_32_1
  %87 = add i32 %86, %85 can share an output register with another operation already assigned to main_signed_add_32_5
  %87 = add i32 %86, %85 can share an output register with another operation already assigned to main_signed_add_32_6
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          
  %86 = add i32 -192, %64 (idx: 0)                -105                          -115                          -5                            -5                            -5                            -35                           -40                           
  %87 = add i32 %86, %85 (idx: 1)                 -110                          -120                          -10                           -10                           -10                           -40                           -50                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          
  %86 = add i32 -192, %64 (idx: 0)                0                             1                             0                             0                             0                             0                             0                             
  %87 = add i32 %86, %85 (idx: 1)                 1                             0                             0                             0                             0                             0                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %87 = add i32 %86, %85 (idx: 1) -> main_signed_add_32_0 (mux inputs: 13)
  %86 = add i32 -192, %64 (idx: 0) -> main_signed_add_32_1 (mux inputs: 13)
State: LEGUP_F_main_BB_loopexit2ii22ii
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  store i32 %Incnt.2.i.i21.i.i... can share an output register with another operation already assigned to main_mem_dual_port_0
  store i32 %Incnt.2.i.i21.i.i... can share an output register with another operation already assigned to main_mem_dual_port_1
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 %Incnt.2.i.i21.i.i... (idx: 0)        -145                          -15                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          main_mem_dual_port_1          
  store i32 %Incnt.2.i.i21.i.i... (idx: 0)        1                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 %Incnt.2.i.i21.i.i... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 16)
State: LEGUP_F_main_BB__89
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %90 = add nsw i32 %59, -1 can share an output register with another operation already assigned to main_signed_add_32_0
  %90 = add nsw i32 %59, -1 can share an output register with another operation already assigned to main_signed_add_32_1
  %90 = add nsw i32 %59, -1 can share an output register with another operation already assigned to main_signed_add_32_5
  %90 = add nsw i32 %59, -1 can share an output register with another operation already assigned to main_signed_add_32_6
  %92 = add i32 %63, 1 can share an output register with another operation already assigned to main_signed_add_32_0
  %92 = add i32 %63, 1 can share an output register with another operation already assigned to main_signed_add_32_1
  %92 = add i32 %63, 1 can share an output register with another operation already assigned to main_signed_add_32_5
  %92 = add i32 %63, 1 can share an output register with another operation already assigned to main_signed_add_32_6
  %93 = add i32 %92, %91 can share an output register with another operation already assigned to main_signed_add_32_0
  %93 = add i32 %92, %91 can share an output register with another operation already assigned to main_signed_add_32_1
  %93 = add i32 %92, %91 can share an output register with another operation already assigned to main_signed_add_32_5
  %93 = add i32 %92, %91 can share an output register with another operation already assigned to main_signed_add_32_6
  %94 = add i32 %93, 103 can share an output register with another operation already assigned to main_signed_add_32_0
  %94 = add i32 %93, 103 can share an output register with another operation already assigned to main_signed_add_32_1
  %94 = add i32 %93, 103 can share an output register with another operation already assigned to main_signed_add_32_5
  %94 = add i32 %93, 103 can share an output register with another operation already assigned to main_signed_add_32_6
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          
  %90 = add nsw i32 %59, -1 (idx: 0)              -125                          -125                          -5                            -5                            -5                            -35                           -45                           
  %92 = add i32 %63, 1 (idx: 1)                   -125                          -125                          -5                            -5                            -5                            -35                           -45                           
  %93 = add i32 %92, %91 (idx: 2)                 -130                          -130                          -10                           -10                           -10                           -40                           -50                           
  %94 = add i32 %93, 103 (idx: 3)                 -125                          -125                          -5                            -5                            -5                            -35                           -45                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          
  %90 = add nsw i32 %59, -1 (idx: 0)              1                             0                             0                             0                             0                             0                             0                             
  %92 = add i32 %63, 1 (idx: 1)                   0                             1                             0                             0                             0                             0                             0                             
  %93 = add i32 %92, %91 (idx: 2)                 0                             0                             0                             0                             0                             0                             1                             
  %94 = add i32 %93, 103 (idx: 3)                 0                             0                             0                             0                             0                             1                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %90 = add nsw i32 %59, -1 (idx: 0) -> main_signed_add_32_0 (mux inputs: 14)
  %92 = add i32 %63, 1 (idx: 1) -> main_signed_add_32_1 (mux inputs: 14)
  %94 = add i32 %93, 103 (idx: 3) -> main_signed_add_32_5 (mux inputs: 5)
  %93 = add i32 %92, %91 (idx: 2) -> main_signed_add_32_6 (mux inputs: 7)
State: LEGUP_F_main_BB__89
Binding functional unit type: signed_subtract_32
Weight matrix for operation/function unit matching:
  %96 = sub nsw i32 %94, 8192 can share an output register with another operation already assigned to main_signed_subtract_32_0
                                                  main_signed_subtract_32_0     
  %96 = sub nsw i32 %94, 8192 (idx: 0)            -45                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_subtract_32_0     
  %96 = sub nsw i32 %94, 8192 (idx: 0)            1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %96 = sub nsw i32 %94, 8192 (idx: 0) -> main_signed_subtract_32_0 (mux inputs: 6)
State: LEGUP_F_main_BB__99
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %102 = add i32 %.neg2.i5.i.i... can share an output register with another operation already assigned to main_signed_add_32_0
  %102 = add i32 %.neg2.i5.i.i... can share an output register with another operation already assigned to main_signed_add_32_1
  %102 = add i32 %.neg2.i5.i.i... can share an output register with another operation already assigned to main_signed_add_32_5
  %102 = add i32 %.neg2.i5.i.i... can share an output register with another operation already assigned to main_signed_add_32_6
  %104 = add nsw i32 %102, 819... can share an output register with another operation already assigned to main_signed_add_32_0
  %104 = add nsw i32 %102, 819... can share an output register with another operation already assigned to main_signed_add_32_1
  %104 = add nsw i32 %102, 819... can share an output register with another operation already assigned to main_signed_add_32_5
  %104 = add nsw i32 %102, 819... can share an output register with another operation already assigned to main_signed_add_32_6
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          
  %102 = add i32 %.neg2.i5.i.i... (idx: 0)        -135                          -135                          -5                            -5                            -5                            -45                           -65                           
  %104 = add nsw i32 %102, 819... (idx: 1)        -135                          -135                          -5                            -5                            -5                            -45                           -65                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          
  %102 = add i32 %.neg2.i5.i.i... (idx: 0)        1                             0                             0                             0                             0                             0                             0                             
  %104 = add nsw i32 %102, 819... (idx: 1)        0                             1                             0                             0                             0                             0                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %102 = add i32 %.neg2.i5.i.i... (idx: 0) -> main_signed_add_32_0 (mux inputs: 15)
  %104 = add nsw i32 %102, 819... (idx: 1) -> main_signed_add_32_1 (mux inputs: 15)
State: LEGUP_F_main_BB__99
Binding functional unit type: signed_subtract_32
Weight matrix for operation/function unit matching:
  %.neg2.i5.i.i = sub i32 %.ne... can share an output register with another operation already assigned to main_signed_subtract_32_0
                                                  main_signed_subtract_32_0     
  %.neg2.i5.i.i = sub i32 %.ne... (idx: 0)        -60                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_subtract_32_0     
  %.neg2.i5.i.i = sub i32 %.ne... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %.neg2.i5.i.i = sub i32 %.ne... (idx: 0) -> main_signed_subtract_32_0 (mux inputs: 8)
State: LEGUP_F_main_BB_motion_vectorsexit
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %109 = add nuw nsw i32 %108,... can share an output register with another operation already assigned to main_signed_add_32_0
  %109 = add nuw nsw i32 %108,... can share an output register with another operation already assigned to main_signed_add_32_1
  %109 = add nuw nsw i32 %108,... can share an output register with another operation already assigned to main_signed_add_32_5
  %109 = add nuw nsw i32 %108,... can share an output register with another operation already assigned to main_signed_add_32_6
  %112 = add nuw nsw i32 %111,... can share an output register with another operation already assigned to main_signed_add_32_0
  %112 = add nuw nsw i32 %111,... can share an output register with another operation already assigned to main_signed_add_32_1
  %112 = add nuw nsw i32 %111,... can share an output register with another operation already assigned to main_signed_add_32_5
  %112 = add nuw nsw i32 %111,... can share an output register with another operation already assigned to main_signed_add_32_6
  %113 = add nuw nsw i32 1, %1... can share an output register with another operation already assigned to main_signed_add_32_0
  %113 = add nuw nsw i32 1, %1... can share an output register with another operation already assigned to main_signed_add_32_1
  %113 = add nuw nsw i32 1, %1... can share an output register with another operation already assigned to main_signed_add_32_5
  %113 = add nuw nsw i32 1, %1... can share an output register with another operation already assigned to main_signed_add_32_6
  %114 = add nuw nsw i32 1, %1... can share an output register with another operation already assigned to main_signed_add_32_0
  %114 = add nuw nsw i32 1, %1... can share an output register with another operation already assigned to main_signed_add_32_1
  %114 = add nuw nsw i32 1, %1... can share an output register with another operation already assigned to main_signed_add_32_5
  %114 = add nuw nsw i32 1, %1... can share an output register with another operation already assigned to main_signed_add_32_6
  %115 = add nuw nsw i32 1, %1... can share an output register with another operation already assigned to main_signed_add_32_0
  %115 = add nuw nsw i32 1, %1... can share an output register with another operation already assigned to main_signed_add_32_1
  %115 = add nuw nsw i32 1, %1... can share an output register with another operation already assigned to main_signed_add_32_5
  %115 = add nuw nsw i32 1, %1... can share an output register with another operation already assigned to main_signed_add_32_6
  %116 = add nuw nsw i32 %106,... can share an output register with another operation already assigned to main_signed_add_32_0
  %116 = add nuw nsw i32 %106,... can share an output register with another operation already assigned to main_signed_add_32_1
  %116 = add nuw nsw i32 %106,... can share an output register with another operation already assigned to main_signed_add_32_5
  %116 = add nuw nsw i32 %106,... can share an output register with another operation already assigned to main_signed_add_32_6
  %117 = add nsw i32 %108, %11... can share an output register with another operation already assigned to main_signed_add_32_0
  %117 = add nsw i32 %108, %11... can share an output register with another operation already assigned to main_signed_add_32_1
  %117 = add nsw i32 %108, %11... can share an output register with another operation already assigned to main_signed_add_32_5
  %117 = add nsw i32 %108, %11... can share an output register with another operation already assigned to main_signed_add_32_6
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          
  %109 = add nuw nsw i32 %108,... (idx: 0)        -150                          -150                          -10                           -10                           -10                           -50                           -70                           
  %112 = add nuw nsw i32 %111,... (idx: 1)        -150                          -150                          -10                           -10                           -10                           -50                           -70                           
  %113 = add nuw nsw i32 1, %1... (idx: 2)        -145                          -145                          -5                            -5                            -5                            -45                           -65                           
  %114 = add nuw nsw i32 1, %1... (idx: 3)        -145                          -145                          -5                            -5                            -5                            -45                           -65                           
  %115 = add nuw nsw i32 1, %1... (idx: 4)        -145                          -145                          -5                            -5                            -5                            -45                           -65                           
  %116 = add nuw nsw i32 %106,... (idx: 5)        -150                          -150                          -10                           -10                           -10                           -50                           -70                           
  %117 = add nsw i32 %108, %11... (idx: 6)        -150                          -150                          -10                           -10                           -10                           -50                           -70                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          
  %109 = add nuw nsw i32 %108,... (idx: 0)        1                             0                             0                             0                             0                             0                             0                             
  %112 = add nuw nsw i32 %111,... (idx: 1)        0                             1                             0                             0                             0                             0                             0                             
  %113 = add nuw nsw i32 1, %1... (idx: 2)        0                             0                             1                             0                             0                             0                             0                             
  %114 = add nuw nsw i32 1, %1... (idx: 3)        0                             0                             0                             1                             0                             0                             0                             
  %115 = add nuw nsw i32 1, %1... (idx: 4)        0                             0                             0                             0                             1                             0                             0                             
  %116 = add nuw nsw i32 %106,... (idx: 5)        0                             0                             0                             0                             0                             1                             0                             
  %117 = add nsw i32 %108, %11... (idx: 6)        0                             0                             0                             0                             0                             0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %109 = add nuw nsw i32 %108,... (idx: 0) -> main_signed_add_32_0 (mux inputs: 17)
  %112 = add nuw nsw i32 %111,... (idx: 1) -> main_signed_add_32_1 (mux inputs: 17)
  %113 = add nuw nsw i32 1, %1... (idx: 2) -> main_signed_add_32_2 (mux inputs: 1)
  %114 = add nuw nsw i32 1, %1... (idx: 3) -> main_signed_add_32_3 (mux inputs: 1)
  %115 = add nuw nsw i32 1, %1... (idx: 4) -> main_signed_add_32_4 (mux inputs: 1)
  %116 = add nuw nsw i32 %106,... (idx: 5) -> main_signed_add_32_5 (mux inputs: 7)
  %117 = add nsw i32 %108, %11... (idx: 6) -> main_signed_add_32_6 (mux inputs: 9)
State: LEGUP_F_main_BB_motion_vectorsexit
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %118 = add nsw i32 %111, %11... can share an output register with another operation already assigned to main_signed_add_32_0
  %118 = add nsw i32 %111, %11... can share an input with another operation already assigned to main_signed_add_32_1
  %118 = add nsw i32 %111, %11... can share an output register with another operation already assigned to main_signed_add_32_1
  %118 = add nsw i32 %111, %11... can share an output register with another operation already assigned to main_signed_add_32_2
  %118 = add nsw i32 %111, %11... can share an output register with another operation already assigned to main_signed_add_32_3
  %118 = add nsw i32 %111, %11... can share an output register with another operation already assigned to main_signed_add_32_4
  %118 = add nsw i32 %111, %11... can share an output register with another operation already assigned to main_signed_add_32_5
  %118 = add nsw i32 %111, %11... can share an output register with another operation already assigned to main_signed_add_32_6
  %119 = add nsw i32 1, %118 can share an output register with another operation already assigned to main_signed_add_32_0
  %119 = add nsw i32 1, %118 can share an output register with another operation already assigned to main_signed_add_32_1
  %119 = add nsw i32 1, %118 can share an output register with another operation already assigned to main_signed_add_32_2
  %119 = add nsw i32 1, %118 can share an output register with another operation already assigned to main_signed_add_32_3
  %119 = add nsw i32 1, %118 can share an output register with another operation already assigned to main_signed_add_32_4
  %119 = add nsw i32 1, %118 can share an output register with another operation already assigned to main_signed_add_32_5
  %119 = add nsw i32 1, %118 can share an output register with another operation already assigned to main_signed_add_32_6
  %120 = add nsw i32 1, %119 can share an output register with another operation already assigned to main_signed_add_32_0
  %120 = add nsw i32 1, %119 can share an output register with another operation already assigned to main_signed_add_32_1
  %120 = add nsw i32 1, %119 can share an output register with another operation already assigned to main_signed_add_32_2
  %120 = add nsw i32 1, %119 can share an output register with another operation already assigned to main_signed_add_32_3
  %120 = add nsw i32 1, %119 can share an output register with another operation already assigned to main_signed_add_32_4
  %120 = add nsw i32 1, %119 can share an output register with another operation already assigned to main_signed_add_32_5
  %120 = add nsw i32 1, %119 can share an output register with another operation already assigned to main_signed_add_32_6
  %121 = add nsw i32 1, %120 can share an output register with another operation already assigned to main_signed_add_32_0
  %121 = add nsw i32 1, %120 can share an output register with another operation already assigned to main_signed_add_32_1
  %121 = add nsw i32 1, %120 can share an output register with another operation already assigned to main_signed_add_32_5
  %121 = add nsw i32 1, %120 can share an output register with another operation already assigned to main_signed_add_32_6
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          
  %118 = add nsw i32 %111, %11... (idx: 0)        -170                          -165                          -10                           -10                           -10                           -70                           -90                           
  %119 = add nsw i32 1, %118 (idx: 1)             -165                          -165                          -5                            -5                            -5                            -65                           -85                           
  %120 = add nsw i32 1, %119 (idx: 2)             -165                          -165                          -5                            -5                            -5                            -65                           -85                           
  %121 = add nsw i32 1, %120 (idx: 3)             -165                          -165                          -15                           -15                           -15                           -65                           -85                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          
  %118 = add nsw i32 %111, %11... (idx: 0)        1                             0                             0                             0                             0                             0                             0                             
  %119 = add nsw i32 1, %118 (idx: 1)             0                             1                             0                             0                             0                             0                             0                             
  %120 = add nsw i32 1, %119 (idx: 2)             0                             0                             0                             0                             0                             0                             1                             
  %121 = add nsw i32 1, %120 (idx: 3)             0                             0                             0                             0                             0                             1                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %118 = add nsw i32 %111, %11... (idx: 0) -> main_signed_add_32_0 (mux inputs: 19)
  %119 = add nsw i32 1, %118 (idx: 1) -> main_signed_add_32_1 (mux inputs: 18)
  %121 = add nsw i32 1, %120 (idx: 3) -> main_signed_add_32_5 (mux inputs: 8)
  %120 = add nsw i32 1, %119 (idx: 2) -> main_signed_add_32_6 (mux inputs: 10)


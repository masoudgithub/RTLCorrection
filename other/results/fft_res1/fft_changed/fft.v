//----------------------------------------------------------------------------//
// Generated by LegUp High-Level Synthesis Tool Version 4.0 (http://legup.org)
// Compiled: Tue Aug 18 02:53:46 2015
// University of Toronto
// For research and academic purposes only. Commercial use is prohibited.
// Please send bugs to: legup@eecg.toronto.edu
// Date: Mon Jun 17 14:14:47 2019
//----------------------------------------------------------------------------//

`define MEMORY_CONTROLLER_ADDR_SIZE 32
`define MEMORY_CONTROLLER_DATA_SIZE 64
// Number of RAM elements: 6
`define MEMORY_CONTROLLER_TAG_SIZE 9
// @sin_lookup = internal unnamed_addr constant [126 x i16] [i16 32767, i16 0, i16 32767, i16 0, i16 0, i16 32767, i16 32767, i16 0, i16 23169, i16 23169, i16 0, i16 32767, i16 -23169, i16 23169, i16 327...
`define TAG_g_sin_lookup `MEMORY_CONTROLLER_TAG_SIZE'd2
`define TAG_g_sin_lookup_a {`TAG_g_sin_lookup, 23'd0}
//   %Imag = alloca [64 x i16], align 2
`define TAG_main_0_Imag `MEMORY_CONTROLLER_TAG_SIZE'd4
`define TAG_main_0_Imag_a {`TAG_main_0_Imag, 23'd0}
//   %New_Imag = alloca [64 x i16], align 2
`define TAG_main_0_New_Imag `MEMORY_CONTROLLER_TAG_SIZE'd6
`define TAG_main_0_New_Imag_a {`TAG_main_0_New_Imag, 23'd0}
//   %New_Real = alloca [64 x i16], align 2
`define TAG_main_0_New_Real `MEMORY_CONTROLLER_TAG_SIZE'd5
`define TAG_main_0_New_Real_a {`TAG_main_0_New_Real, 23'd0}
//   %Real = alloca [64 x i16], align 2
`define TAG_main_0_Real `MEMORY_CONTROLLER_TAG_SIZE'd3
`define TAG_main_0_Real_a {`TAG_main_0_Real, 23'd0}
//   %input_temp = alloca i16, align 2
`define TAG_main_0_input_temp `MEMORY_CONTROLLER_TAG_SIZE'd7
`define TAG_main_0_input_temp_a {`TAG_main_0_input_temp, 23'd0}

// Turn off warning 'ignoring unsupported system task'
// altera message_off 10175

`timescale 1 ns / 1 ns
module top
	(
		clk,
		reset,
		start,
		finish,
		waitrequest,
		return_val
	);
input clk;
input reset;
input start;
output wire finish;
input waitrequest;
output wire [31:0] return_val;
wire memory_controller_waitrequest;
wire memory_controller_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
wire memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
wire [1:0] memory_controller_size_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;

wire memory_controller_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
wire memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
wire [1:0] memory_controller_size_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;

/* synthesis translate_off */
assign memory_controller_waitrequest = waitrequest;
/* synthesis translate_on */

memory_controller memory_controller_inst (
	.clk( clk ),
	.memory_controller_enable_a( memory_controller_enable_a ),
	.memory_controller_enable_b( memory_controller_enable_b ),
	.memory_controller_address_a( memory_controller_address_a ),
	.memory_controller_address_b( memory_controller_address_b ),
	.memory_controller_write_enable_a( memory_controller_write_enable_a ),
	.memory_controller_write_enable_b( memory_controller_write_enable_b ),
	.memory_controller_in_a( memory_controller_in_a ),
	.memory_controller_in_b( memory_controller_in_b ),
	.memory_controller_size_a( memory_controller_size_a ),
	.memory_controller_size_b( memory_controller_size_b ),
	.memory_controller_waitrequest( memory_controller_waitrequest ),
	.memory_controller_out_reg_a( memory_controller_out_a ),
	.memory_controller_out_reg_b( memory_controller_out_b )
);

main main_inst(
	.clk( clk ),
	.clk2x( clk2x ),
	.clk1x_follower( clk1x_follower ),
	.reset( reset ),
	.start( start ),
	.finish( finish ),
	.return_val( return_val ),
	.memory_controller_waitrequest(memory_controller_waitrequest),
	.memory_controller_enable_a(memory_controller_enable_a),
	.memory_controller_address_a(memory_controller_address_a),
	.memory_controller_write_enable_a(memory_controller_write_enable_a),
	.memory_controller_in_a(memory_controller_in_a),
	.memory_controller_size_a(memory_controller_size_a),
	.memory_controller_out_a(memory_controller_out_a),
	.memory_controller_enable_b(memory_controller_enable_b),
	.memory_controller_address_b(memory_controller_address_b),
	.memory_controller_write_enable_b(memory_controller_write_enable_b),
	.memory_controller_in_b(memory_controller_in_b),
	.memory_controller_size_b(memory_controller_size_b),
	.memory_controller_out_b(memory_controller_out_b)
);

endmodule

`timescale 1 ns / 1 ns
module memory_controller
(
	clk,
	memory_controller_address_a,
	memory_controller_address_b,
	memory_controller_enable_a,
	memory_controller_enable_b,
	memory_controller_write_enable_a,
	memory_controller_write_enable_b,
	memory_controller_in_a,
	memory_controller_in_b,
	memory_controller_size_a,
	memory_controller_size_b,
	memory_controller_waitrequest,
	memory_controller_out_reg_a,
	memory_controller_out_reg_b
);

parameter latency = 2;

parameter ram_latency = latency-1;

integer j;

input clk;
input memory_controller_waitrequest;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
input memory_controller_enable_a;
input memory_controller_write_enable_a;
input [64-1:0] memory_controller_in_a;
input [1:0] memory_controller_size_a;
output reg [64-1:0] memory_controller_out_reg_a;
reg [64-1:0] memory_controller_out_prev_a;
reg [64-1:0] memory_controller_out_a;

reg memory_controller_enable_reg_a;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
input memory_controller_enable_b;
input memory_controller_write_enable_b;
input [64-1:0] memory_controller_in_b;
input [1:0] memory_controller_size_b;
output reg [64-1:0] memory_controller_out_reg_b;
reg [64-1:0] memory_controller_out_prev_b;
reg [64-1:0] memory_controller_out_b;

reg memory_controller_enable_reg_b;

reg [6:0] sin_lookup_address_a;
reg [6:0] sin_lookup_address_b;
reg sin_lookup_write_enable_a;
reg sin_lookup_write_enable_b;
reg [15:0] sin_lookup_in_a;
reg [15:0] sin_lookup_in_b;
wire [15:0] sin_lookup_out_a;
wire [15:0] sin_lookup_out_b;

// @sin_lookup = internal unnamed_addr constant [126 x i16] [i16 32767, i16 0, i16 32767, i16 0, i16 0, i16 32767, i16 32767, i16 0, i16 23169, i16 23169, i16 0, i16 32767, i16 -23169, i16 23169, i16 327...
rom_dual_port sin_lookup (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( sin_lookup_address_a ),
	.address_b( sin_lookup_address_b ),
	.q_a( sin_lookup_out_a ),
	.q_b( sin_lookup_out_b)
);
defparam sin_lookup.width_a = 16;
defparam sin_lookup.width_b = 16;
defparam sin_lookup.widthad_a = 7;
defparam sin_lookup.widthad_b = 7;
defparam sin_lookup.numwords_a = 126;
defparam sin_lookup.numwords_b = 126;
defparam sin_lookup.latency = ram_latency;
defparam sin_lookup.init_file = "sin_lookup.mif";

reg [5:0] main_0_Real_address_a;
reg [5:0] main_0_Real_address_b;
reg main_0_Real_write_enable_a;
reg main_0_Real_write_enable_b;
reg [15:0] main_0_Real_in_a;
reg [15:0] main_0_Real_in_b;
wire [15:0] main_0_Real_out_a;
wire [15:0] main_0_Real_out_b;

//   %Real = alloca [64 x i16], align 2
ram_dual_port main_0_Real (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( main_0_Real_address_a ),
	.address_b( main_0_Real_address_b ),
	.wren_a( main_0_Real_write_enable_a ),
	.wren_b( main_0_Real_write_enable_b ),
	.data_a( main_0_Real_in_a ),
	.data_b( main_0_Real_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( main_0_Real_out_a ),
	.q_b( main_0_Real_out_b)
);
defparam main_0_Real.width_a = 16;
defparam main_0_Real.width_b = 16;
defparam main_0_Real.widthad_a = 6;
defparam main_0_Real.widthad_b = 6;
defparam main_0_Real.width_be_a = 1;
defparam main_0_Real.width_be_b = 1;
defparam main_0_Real.numwords_a = 64;
defparam main_0_Real.numwords_b = 64;
defparam main_0_Real.latency = ram_latency;

reg [5:0] main_0_Imag_address_a;
reg [5:0] main_0_Imag_address_b;
reg main_0_Imag_write_enable_a;
reg main_0_Imag_write_enable_b;
reg [15:0] main_0_Imag_in_a;
reg [15:0] main_0_Imag_in_b;
wire [15:0] main_0_Imag_out_a;
wire [15:0] main_0_Imag_out_b;

//   %Imag = alloca [64 x i16], align 2
ram_dual_port main_0_Imag (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( main_0_Imag_address_a ),
	.address_b( main_0_Imag_address_b ),
	.wren_a( main_0_Imag_write_enable_a ),
	.wren_b( main_0_Imag_write_enable_b ),
	.data_a( main_0_Imag_in_a ),
	.data_b( main_0_Imag_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( main_0_Imag_out_a ),
	.q_b( main_0_Imag_out_b)
);
defparam main_0_Imag.width_a = 16;
defparam main_0_Imag.width_b = 16;
defparam main_0_Imag.widthad_a = 6;
defparam main_0_Imag.widthad_b = 6;
defparam main_0_Imag.width_be_a = 1;
defparam main_0_Imag.width_be_b = 1;
defparam main_0_Imag.numwords_a = 64;
defparam main_0_Imag.numwords_b = 64;
defparam main_0_Imag.latency = ram_latency;

reg [5:0] main_0_New_Real_address_a;
reg [5:0] main_0_New_Real_address_b;
reg main_0_New_Real_write_enable_a;
reg main_0_New_Real_write_enable_b;
reg [15:0] main_0_New_Real_in_a;
reg [15:0] main_0_New_Real_in_b;
wire [15:0] main_0_New_Real_out_a;
wire [15:0] main_0_New_Real_out_b;

//   %New_Real = alloca [64 x i16], align 2
ram_dual_port main_0_New_Real (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( main_0_New_Real_address_a ),
	.address_b( main_0_New_Real_address_b ),
	.wren_a( main_0_New_Real_write_enable_a ),
	.wren_b( main_0_New_Real_write_enable_b ),
	.data_a( main_0_New_Real_in_a ),
	.data_b( main_0_New_Real_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( main_0_New_Real_out_a ),
	.q_b( main_0_New_Real_out_b)
);
defparam main_0_New_Real.width_a = 16;
defparam main_0_New_Real.width_b = 16;
defparam main_0_New_Real.widthad_a = 6;
defparam main_0_New_Real.widthad_b = 6;
defparam main_0_New_Real.width_be_a = 1;
defparam main_0_New_Real.width_be_b = 1;
defparam main_0_New_Real.numwords_a = 64;
defparam main_0_New_Real.numwords_b = 64;
defparam main_0_New_Real.latency = ram_latency;

reg [5:0] main_0_New_Imag_address_a;
reg [5:0] main_0_New_Imag_address_b;
reg main_0_New_Imag_write_enable_a;
reg main_0_New_Imag_write_enable_b;
reg [15:0] main_0_New_Imag_in_a;
reg [15:0] main_0_New_Imag_in_b;
wire [15:0] main_0_New_Imag_out_a;
wire [15:0] main_0_New_Imag_out_b;

//   %New_Imag = alloca [64 x i16], align 2
ram_dual_port main_0_New_Imag (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( main_0_New_Imag_address_a ),
	.address_b( main_0_New_Imag_address_b ),
	.wren_a( main_0_New_Imag_write_enable_a ),
	.wren_b( main_0_New_Imag_write_enable_b ),
	.data_a( main_0_New_Imag_in_a ),
	.data_b( main_0_New_Imag_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( main_0_New_Imag_out_a ),
	.q_b( main_0_New_Imag_out_b)
);
defparam main_0_New_Imag.width_a = 16;
defparam main_0_New_Imag.width_b = 16;
defparam main_0_New_Imag.widthad_a = 6;
defparam main_0_New_Imag.widthad_b = 6;
defparam main_0_New_Imag.width_be_a = 1;
defparam main_0_New_Imag.width_be_b = 1;
defparam main_0_New_Imag.numwords_a = 64;
defparam main_0_New_Imag.numwords_b = 64;
defparam main_0_New_Imag.latency = ram_latency;

reg [0:0] main_0_input_temp_address_a;
reg [0:0] main_0_input_temp_address_b;
reg main_0_input_temp_write_enable_a;
reg main_0_input_temp_write_enable_b;
reg [15:0] main_0_input_temp_in_a;
reg [15:0] main_0_input_temp_in_b;
wire [15:0] main_0_input_temp_out_a;
wire [15:0] main_0_input_temp_out_b;

//   %input_temp = alloca i16, align 2
ram_dual_port main_0_input_temp (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( main_0_input_temp_address_a ),
	.address_b( main_0_input_temp_address_b ),
	.wren_a( main_0_input_temp_write_enable_a ),
	.wren_b( main_0_input_temp_write_enable_b ),
	.data_a( main_0_input_temp_in_a ),
	.data_b( main_0_input_temp_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( main_0_input_temp_out_a ),
	.q_b( main_0_input_temp_out_b)
);
defparam main_0_input_temp.width_a = 16;
defparam main_0_input_temp.width_b = 16;
defparam main_0_input_temp.widthad_a = 1;
defparam main_0_input_temp.widthad_b = 1;
defparam main_0_input_temp.width_be_a = 1;
defparam main_0_input_temp.width_be_b = 1;
defparam main_0_input_temp.numwords_a = 1;
defparam main_0_input_temp.numwords_b = 1;
defparam main_0_input_temp.latency = ram_latency;
wire [`MEMORY_CONTROLLER_TAG_SIZE-1:0] tag_a;
assign tag_a = memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:`MEMORY_CONTROLLER_ADDR_SIZE-`MEMORY_CONTROLLER_TAG_SIZE];
reg [2:0] prevAddr_a;
reg [1:0] prevSize_a;
reg [2:0] prevSize_a_and;

always @(posedge clk)
if (!memory_controller_waitrequest)
begin
	prevAddr_a <= memory_controller_address_a[2:0];
	prevSize_a <= memory_controller_size_a;
end
wire [`MEMORY_CONTROLLER_TAG_SIZE-1:0] tag_b;
assign tag_b = memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:`MEMORY_CONTROLLER_ADDR_SIZE-`MEMORY_CONTROLLER_TAG_SIZE];
reg [2:0] prevAddr_b;
reg [1:0] prevSize_b;
reg [2:0] prevSize_b_and;

always @(posedge clk)
if (!memory_controller_waitrequest)
begin
	prevAddr_b <= memory_controller_address_b[2:0];
	prevSize_b <= memory_controller_size_b;
end

reg [2:0] select_not_struct_a;

wire select_sin_lookup_a;
assign select_sin_lookup_a = (tag_a == `TAG_g_sin_lookup);
reg [ram_latency:0] select_sin_lookup_reg_a;
wire [15:0] memory_controller_sin_lookup_out_a;
assign memory_controller_sin_lookup_out_a = {16{ select_sin_lookup_reg_a[ram_latency]}} & sin_lookup_out_a;

wire select_main_0_Real_a;
assign select_main_0_Real_a = (tag_a == `TAG_main_0_Real);
reg [ram_latency:0] select_main_0_Real_reg_a;
wire [15:0] memory_controller_main_0_Real_out_a;
assign memory_controller_main_0_Real_out_a = {16{ select_main_0_Real_reg_a[ram_latency]}} & main_0_Real_out_a;

wire select_main_0_Imag_a;
assign select_main_0_Imag_a = (tag_a == `TAG_main_0_Imag);
reg [ram_latency:0] select_main_0_Imag_reg_a;
wire [15:0] memory_controller_main_0_Imag_out_a;
assign memory_controller_main_0_Imag_out_a = {16{ select_main_0_Imag_reg_a[ram_latency]}} & main_0_Imag_out_a;

wire select_main_0_New_Real_a;
assign select_main_0_New_Real_a = (tag_a == `TAG_main_0_New_Real);
reg [ram_latency:0] select_main_0_New_Real_reg_a;
wire [15:0] memory_controller_main_0_New_Real_out_a;
assign memory_controller_main_0_New_Real_out_a = {16{ select_main_0_New_Real_reg_a[ram_latency]}} & main_0_New_Real_out_a;

wire select_main_0_New_Imag_a;
assign select_main_0_New_Imag_a = (tag_a == `TAG_main_0_New_Imag);
reg [ram_latency:0] select_main_0_New_Imag_reg_a;
wire [15:0] memory_controller_main_0_New_Imag_out_a;
assign memory_controller_main_0_New_Imag_out_a = {16{ select_main_0_New_Imag_reg_a[ram_latency]}} & main_0_New_Imag_out_a;

wire select_main_0_input_temp_a;
assign select_main_0_input_temp_a = (tag_a == `TAG_main_0_input_temp);
reg [ram_latency:0] select_main_0_input_temp_reg_a;
wire [15:0] memory_controller_main_0_input_temp_out_a;
assign memory_controller_main_0_input_temp_out_a = {16{ select_main_0_input_temp_reg_a[ram_latency]}} & main_0_input_temp_out_a;

always @(*)
begin
	sin_lookup_address_a = memory_controller_address_a [7-1+1:1] & {7{select_sin_lookup_a}};
	sin_lookup_write_enable_a = memory_controller_write_enable_a & select_sin_lookup_a;
	sin_lookup_in_a [16-1:0] = memory_controller_in_a[16-1:0];

	main_0_Real_address_a = memory_controller_address_a [6-1+1:1] & {6{select_main_0_Real_a}};
	main_0_Real_write_enable_a = memory_controller_write_enable_a & select_main_0_Real_a;
	main_0_Real_in_a [16-1:0] = memory_controller_in_a[16-1:0];

	main_0_Imag_address_a = memory_controller_address_a [6-1+1:1] & {6{select_main_0_Imag_a}};
	main_0_Imag_write_enable_a = memory_controller_write_enable_a & select_main_0_Imag_a;
	main_0_Imag_in_a [16-1:0] = memory_controller_in_a[16-1:0];

	main_0_New_Real_address_a = memory_controller_address_a [6-1+1:1] & {6{select_main_0_New_Real_a}};
	main_0_New_Real_write_enable_a = memory_controller_write_enable_a & select_main_0_New_Real_a;
	main_0_New_Real_in_a [16-1:0] = memory_controller_in_a[16-1:0];

	main_0_New_Imag_address_a = memory_controller_address_a [6-1+1:1] & {6{select_main_0_New_Imag_a}};
	main_0_New_Imag_write_enable_a = memory_controller_write_enable_a & select_main_0_New_Imag_a;
	main_0_New_Imag_in_a [16-1:0] = memory_controller_in_a[16-1:0];

	main_0_input_temp_address_a = memory_controller_address_a [1-1+1:1] & {1{select_main_0_input_temp_a}};
	main_0_input_temp_write_enable_a = memory_controller_write_enable_a & select_main_0_input_temp_a;
	main_0_input_temp_in_a [16-1:0] = memory_controller_in_a[16-1:0];

end
always @(*)
begin
	select_not_struct_a [2:0] = 3'b0 | {1{select_sin_lookup_reg_a[ram_latency]}} | {1{select_main_0_Real_reg_a[ram_latency]}} | {1{select_main_0_Imag_reg_a[ram_latency]}} | {1{select_main_0_New_Real_reg_a[ram_latency]}} | {1{select_main_0_New_Imag_reg_a[ram_latency]}} | {1{select_main_0_input_temp_reg_a[ram_latency]}};
	if (prevAddr_a[2:0] & select_not_struct_a[2:0] != 0 && memory_controller_enable_a)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end

	prevSize_a_and[0] = prevSize_a[1] | prevSize_a[0];
	prevSize_a_and[1] = prevSize_a[1];
	prevSize_a_and[2] = prevSize_a[1] & prevSize_a[0];
	if ((prevAddr_a & prevSize_a_and) != 0 && memory_controller_enable_a)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end
	memory_controller_out_prev_a = memory_controller_out_reg_a & { 64{!memory_controller_enable_reg_a}};
	memory_controller_out_a = 1'b0 | memory_controller_out_prev_a | memory_controller_sin_lookup_out_a | memory_controller_main_0_Real_out_a | memory_controller_main_0_Imag_out_a | memory_controller_main_0_New_Real_out_a | memory_controller_main_0_New_Imag_out_a | memory_controller_main_0_input_temp_out_a;
end

always @(posedge clk)
if (!memory_controller_waitrequest)
begin
memory_controller_out_reg_a <= memory_controller_out_a;
memory_controller_enable_reg_a <= memory_controller_enable_a;
end

always @(posedge clk)
if (!memory_controller_waitrequest)
for (j = 0; j < ram_latency; j=j+1)
begin
select_sin_lookup_reg_a[j+1] <= select_sin_lookup_reg_a[j];
select_main_0_Real_reg_a[j+1] <= select_main_0_Real_reg_a[j];
select_main_0_Imag_reg_a[j+1] <= select_main_0_Imag_reg_a[j];
select_main_0_New_Real_reg_a[j+1] <= select_main_0_New_Real_reg_a[j];
select_main_0_New_Imag_reg_a[j+1] <= select_main_0_New_Imag_reg_a[j];
select_main_0_input_temp_reg_a[j+1] <= select_main_0_input_temp_reg_a[j];
end
always @(*)
begin
select_sin_lookup_reg_a[0] <= select_sin_lookup_a;
select_main_0_Real_reg_a[0] <= select_main_0_Real_a;
select_main_0_Imag_reg_a[0] <= select_main_0_Imag_a;
select_main_0_New_Real_reg_a[0] <= select_main_0_New_Real_a;
select_main_0_New_Imag_reg_a[0] <= select_main_0_New_Imag_a;
select_main_0_input_temp_reg_a[0] <= select_main_0_input_temp_a;
end

reg [2:0] select_not_struct_b;

wire select_sin_lookup_b;
assign select_sin_lookup_b = (tag_b == `TAG_g_sin_lookup);
reg [ram_latency:0] select_sin_lookup_reg_b;
wire [15:0] memory_controller_sin_lookup_out_b;
assign memory_controller_sin_lookup_out_b = {16{ select_sin_lookup_reg_b[ram_latency]}} & sin_lookup_out_b;

wire select_main_0_Real_b;
assign select_main_0_Real_b = (tag_b == `TAG_main_0_Real);
reg [ram_latency:0] select_main_0_Real_reg_b;
wire [15:0] memory_controller_main_0_Real_out_b;
assign memory_controller_main_0_Real_out_b = {16{ select_main_0_Real_reg_b[ram_latency]}} & main_0_Real_out_b;

wire select_main_0_Imag_b;
assign select_main_0_Imag_b = (tag_b == `TAG_main_0_Imag);
reg [ram_latency:0] select_main_0_Imag_reg_b;
wire [15:0] memory_controller_main_0_Imag_out_b;
assign memory_controller_main_0_Imag_out_b = {16{ select_main_0_Imag_reg_b[ram_latency]}} & main_0_Imag_out_b;

wire select_main_0_New_Real_b;
assign select_main_0_New_Real_b = (tag_b == `TAG_main_0_New_Real);
reg [ram_latency:0] select_main_0_New_Real_reg_b;
wire [15:0] memory_controller_main_0_New_Real_out_b;
assign memory_controller_main_0_New_Real_out_b = {16{ select_main_0_New_Real_reg_b[ram_latency]}} & main_0_New_Real_out_b;

wire select_main_0_New_Imag_b;
assign select_main_0_New_Imag_b = (tag_b == `TAG_main_0_New_Imag);
reg [ram_latency:0] select_main_0_New_Imag_reg_b;
wire [15:0] memory_controller_main_0_New_Imag_out_b;
assign memory_controller_main_0_New_Imag_out_b = {16{ select_main_0_New_Imag_reg_b[ram_latency]}} & main_0_New_Imag_out_b;

wire select_main_0_input_temp_b;
assign select_main_0_input_temp_b = (tag_b == `TAG_main_0_input_temp);
reg [ram_latency:0] select_main_0_input_temp_reg_b;
wire [15:0] memory_controller_main_0_input_temp_out_b;
assign memory_controller_main_0_input_temp_out_b = {16{ select_main_0_input_temp_reg_b[ram_latency]}} & main_0_input_temp_out_b;

always @(*)
begin
	sin_lookup_address_b = memory_controller_address_b [7-1+1:1] & {7{select_sin_lookup_b}};
	sin_lookup_write_enable_b = memory_controller_write_enable_b & select_sin_lookup_b;
	sin_lookup_in_b [16-1:0] = memory_controller_in_b[16-1:0];

	main_0_Real_address_b = memory_controller_address_b [6-1+1:1] & {6{select_main_0_Real_b}};
	main_0_Real_write_enable_b = memory_controller_write_enable_b & select_main_0_Real_b;
	main_0_Real_in_b [16-1:0] = memory_controller_in_b[16-1:0];

	main_0_Imag_address_b = memory_controller_address_b [6-1+1:1] & {6{select_main_0_Imag_b}};
	main_0_Imag_write_enable_b = memory_controller_write_enable_b & select_main_0_Imag_b;
	main_0_Imag_in_b [16-1:0] = memory_controller_in_b[16-1:0];

	main_0_New_Real_address_b = memory_controller_address_b [6-1+1:1] & {6{select_main_0_New_Real_b}};
	main_0_New_Real_write_enable_b = memory_controller_write_enable_b & select_main_0_New_Real_b;
	main_0_New_Real_in_b [16-1:0] = memory_controller_in_b[16-1:0];

	main_0_New_Imag_address_b = memory_controller_address_b [6-1+1:1] & {6{select_main_0_New_Imag_b}};
	main_0_New_Imag_write_enable_b = memory_controller_write_enable_b & select_main_0_New_Imag_b;
	main_0_New_Imag_in_b [16-1:0] = memory_controller_in_b[16-1:0];

	main_0_input_temp_address_b = memory_controller_address_b [1-1+1:1] & {1{select_main_0_input_temp_b}};
	main_0_input_temp_write_enable_b = memory_controller_write_enable_b & select_main_0_input_temp_b;
	main_0_input_temp_in_b [16-1:0] = memory_controller_in_b[16-1:0];

end
always @(*)
begin
	select_not_struct_b [2:0] = 3'b0 | {1{select_sin_lookup_reg_b[ram_latency]}} | {1{select_main_0_Real_reg_b[ram_latency]}} | {1{select_main_0_Imag_reg_b[ram_latency]}} | {1{select_main_0_New_Real_reg_b[ram_latency]}} | {1{select_main_0_New_Imag_reg_b[ram_latency]}} | {1{select_main_0_input_temp_reg_b[ram_latency]}};
	if (prevAddr_b[2:0] & select_not_struct_b[2:0] != 0 && memory_controller_enable_b)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end

	prevSize_b_and[0] = prevSize_b[1] | prevSize_b[0];
	prevSize_b_and[1] = prevSize_b[1];
	prevSize_b_and[2] = prevSize_b[1] & prevSize_b[0];
	if ((prevAddr_b & prevSize_b_and) != 0 && memory_controller_enable_b)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end
	memory_controller_out_prev_b = memory_controller_out_reg_b & { 64{!memory_controller_enable_reg_b}};
	memory_controller_out_b = 1'b0 | memory_controller_out_prev_b | memory_controller_sin_lookup_out_b | memory_controller_main_0_Real_out_b | memory_controller_main_0_Imag_out_b | memory_controller_main_0_New_Real_out_b | memory_controller_main_0_New_Imag_out_b | memory_controller_main_0_input_temp_out_b;
end

always @(posedge clk)
if (!memory_controller_waitrequest)
begin
memory_controller_out_reg_b <= memory_controller_out_b;
memory_controller_enable_reg_b <= memory_controller_enable_b;
end

always @(posedge clk)
if (!memory_controller_waitrequest)
for (j = 0; j < ram_latency; j=j+1)
begin
select_sin_lookup_reg_b[j+1] <= select_sin_lookup_reg_b[j];
select_main_0_Real_reg_b[j+1] <= select_main_0_Real_reg_b[j];
select_main_0_Imag_reg_b[j+1] <= select_main_0_Imag_reg_b[j];
select_main_0_New_Real_reg_b[j+1] <= select_main_0_New_Real_reg_b[j];
select_main_0_New_Imag_reg_b[j+1] <= select_main_0_New_Imag_reg_b[j];
select_main_0_input_temp_reg_b[j+1] <= select_main_0_input_temp_reg_b[j];
end
always @(*)
begin
select_sin_lookup_reg_b[0] <= select_sin_lookup_b;
select_main_0_Real_reg_b[0] <= select_main_0_Real_b;
select_main_0_Imag_reg_b[0] <= select_main_0_Imag_b;
select_main_0_New_Real_reg_b[0] <= select_main_0_New_Real_b;
select_main_0_New_Imag_reg_b[0] <= select_main_0_New_Imag_b;
select_main_0_input_temp_reg_b[0] <= select_main_0_input_temp_b;
end

endmodule 

`timescale 1 ns / 1 ns
module main
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_waitrequest,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	return_val
);

parameter [7:0] LEGUP_0 = 8'd0;
parameter [7:0] LEGUP_F_main_BB__0_1 = 8'd1;
parameter [7:0] LEGUP_F_main_BB__1_2 = 8'd2;
parameter [7:0] LEGUP_F_main_BB__1_3 = 8'd3;
parameter [7:0] LEGUP_F_main_BB__1_4 = 8'd4;
parameter [7:0] LEGUP_F_main_BB__1_5 = 8'd5;
parameter [7:0] LEGUP_F_main_BB__1_6 = 8'd6;
parameter [7:0] LEGUP_F_main_BB__1_7 = 8'd7;
parameter [7:0] LEGUP_F_main_BB__1_8 = 8'd8;
parameter [7:0] LEGUP_F_main_BB__1_9 = 8'd9;
parameter [7:0] LEGUP_F_main_BB__5_10 = 8'd10;
parameter [7:0] LEGUP_F_main_BB__5_11 = 8'd11;
parameter [7:0] LEGUP_F_main_BB__5_12 = 8'd12;
parameter [7:0] LEGUP_F_main_BB__5_13 = 8'd13;
parameter [7:0] LEGUP_F_main_BB__5_14 = 8'd14;
parameter [7:0] LEGUP_F_main_BB__5_15 = 8'd15;
parameter [7:0] LEGUP_F_main_BB__5_16 = 8'd16;
parameter [7:0] LEGUP_F_main_BB__5_17 = 8'd17;
parameter [7:0] LEGUP_F_main_BB__5_18 = 8'd18;
parameter [7:0] LEGUP_F_main_BB__5_19 = 8'd19;
parameter [7:0] LEGUP_F_main_BB__5_20 = 8'd20;
parameter [7:0] LEGUP_F_main_BB__5_21 = 8'd21;
parameter [7:0] LEGUP_F_main_BB__5_22 = 8'd22;
parameter [7:0] LEGUP_F_main_BB__5_23 = 8'd23;
parameter [7:0] LEGUP_F_main_BB__5_24 = 8'd24;
parameter [7:0] LEGUP_F_main_BB__5_25 = 8'd25;
parameter [7:0] LEGUP_F_main_BB__5_26 = 8'd26;
parameter [7:0] LEGUP_F_main_BB__5_27 = 8'd27;
parameter [7:0] LEGUP_F_main_BB__5_28 = 8'd28;
parameter [7:0] LEGUP_F_main_BB__5_29 = 8'd29;
parameter [7:0] LEGUP_F_main_BB__5_30 = 8'd30;
parameter [7:0] LEGUP_F_main_BB__5_31 = 8'd31;
parameter [7:0] LEGUP_F_main_BB__5_32 = 8'd32;
parameter [7:0] LEGUP_F_main_BB__5_33 = 8'd33;
parameter [7:0] LEGUP_F_main_BB__5_34 = 8'd34;
parameter [7:0] LEGUP_F_main_BB__5_35 = 8'd35;
parameter [7:0] LEGUP_F_main_BB__5_36 = 8'd36;
parameter [7:0] LEGUP_F_main_BB__5_37 = 8'd37;
parameter [7:0] LEGUP_F_main_BB__5_38 = 8'd38;
parameter [7:0] LEGUP_F_main_BB__5_39 = 8'd39;
parameter [7:0] LEGUP_F_main_BB__5_40 = 8'd40;
parameter [7:0] LEGUP_F_main_BB__5_41 = 8'd41;
parameter [7:0] LEGUP_F_main_BB__5_42 = 8'd42;
parameter [7:0] LEGUP_F_main_BB__5_43 = 8'd43;
parameter [7:0] LEGUP_F_main_BB__5_44 = 8'd44;
parameter [7:0] LEGUP_F_main_BB__5_45 = 8'd45;
parameter [7:0] LEGUP_F_main_BB__5_46 = 8'd46;
parameter [7:0] LEGUP_F_main_BB__5_47 = 8'd47;
parameter [7:0] LEGUP_F_main_BB__5_48 = 8'd48;
parameter [7:0] LEGUP_F_main_BB__5_49 = 8'd49;
parameter [7:0] LEGUP_F_main_BB__5_50 = 8'd50;
parameter [7:0] LEGUP_F_main_BB__5_51 = 8'd51;
parameter [7:0] LEGUP_F_main_BB__5_52 = 8'd52;
parameter [7:0] LEGUP_F_main_BB__5_53 = 8'd53;
parameter [7:0] LEGUP_F_main_BB__5_54 = 8'd54;
parameter [7:0] LEGUP_F_main_BB__5_55 = 8'd55;
parameter [7:0] LEGUP_F_main_BB__5_56 = 8'd56;
parameter [7:0] LEGUP_F_main_BB__5_57 = 8'd57;
parameter [7:0] LEGUP_F_main_BB__5_58 = 8'd58;
parameter [7:0] LEGUP_F_main_BB__5_59 = 8'd59;
parameter [7:0] LEGUP_F_main_BB__5_60 = 8'd60;
parameter [7:0] LEGUP_F_main_BB__5_61 = 8'd61;
parameter [7:0] LEGUP_F_main_BB__5_62 = 8'd62;
parameter [7:0] LEGUP_F_main_BB__5_63 = 8'd63;
parameter [7:0] LEGUP_F_main_BB__5_64 = 8'd64;
parameter [7:0] LEGUP_F_main_BB__5_65 = 8'd65;
parameter [7:0] LEGUP_F_main_BB__5_66 = 8'd66;
parameter [7:0] LEGUP_F_main_BB__5_67 = 8'd67;
parameter [7:0] LEGUP_F_main_BB__5_68 = 8'd68;
parameter [7:0] LEGUP_F_main_BB__5_69 = 8'd69;
parameter [7:0] LEGUP_F_main_BB__5_70 = 8'd70;
parameter [7:0] LEGUP_F_main_BB__5_71 = 8'd71;
parameter [7:0] LEGUP_F_main_BB__5_72 = 8'd72;
parameter [7:0] LEGUP_F_main_BB__5_73 = 8'd73;
parameter [7:0] LEGUP_F_main_BB__5_74 = 8'd74;
parameter [7:0] LEGUP_F_main_BB__5_75 = 8'd75;
parameter [7:0] LEGUP_F_main_BB__5_76 = 8'd76;
parameter [7:0] LEGUP_F_main_BB__5_77 = 8'd77;
parameter [7:0] LEGUP_F_main_BB__5_78 = 8'd78;
parameter [7:0] LEGUP_F_main_BB__5_79 = 8'd79;
parameter [7:0] LEGUP_F_main_BB__5_80 = 8'd80;
parameter [7:0] LEGUP_F_main_BB__5_81 = 8'd81;
parameter [7:0] LEGUP_F_main_BB__5_82 = 8'd82;
parameter [7:0] LEGUP_F_main_BB__5_83 = 8'd83;
parameter [7:0] LEGUP_F_main_BB__5_84 = 8'd84;
parameter [7:0] LEGUP_F_main_BB__5_85 = 8'd85;
parameter [7:0] LEGUP_F_main_BB__5_86 = 8'd86;
parameter [7:0] LEGUP_F_main_BB__5_87 = 8'd87;
parameter [7:0] LEGUP_F_main_BB__5_88 = 8'd88;
parameter [7:0] LEGUP_F_main_BB__5_89 = 8'd89;
parameter [7:0] LEGUP_F_main_BB__5_90 = 8'd90;
parameter [7:0] LEGUP_F_main_BB__5_91 = 8'd91;
parameter [7:0] LEGUP_F_main_BB__5_92 = 8'd92;
parameter [7:0] LEGUP_F_main_BB__5_93 = 8'd93;
parameter [7:0] LEGUP_F_main_BB__5_94 = 8'd94;
parameter [7:0] LEGUP_F_main_BB__5_95 = 8'd95;
parameter [7:0] LEGUP_F_main_BB__5_96 = 8'd96;
parameter [7:0] LEGUP_F_main_BB__5_97 = 8'd97;
parameter [7:0] LEGUP_F_main_BB__5_98 = 8'd98;
parameter [7:0] LEGUP_F_main_BB__5_99 = 8'd99;
parameter [7:0] LEGUP_F_main_BB__5_100 = 8'd100;
parameter [7:0] LEGUP_F_main_BB__5_101 = 8'd101;
parameter [7:0] LEGUP_F_main_BB__5_102 = 8'd102;
parameter [7:0] LEGUP_F_main_BB__5_103 = 8'd103;
parameter [7:0] LEGUP_F_main_BB__5_104 = 8'd104;
parameter [7:0] LEGUP_F_main_BB__5_105 = 8'd105;
parameter [7:0] LEGUP_F_main_BB__5_106 = 8'd106;
parameter [7:0] LEGUP_F_main_BB__5_107 = 8'd107;
parameter [7:0] LEGUP_F_main_BB__5_108 = 8'd108;
parameter [7:0] LEGUP_F_main_BB__5_109 = 8'd109;
parameter [7:0] LEGUP_F_main_BB__5_110 = 8'd110;
parameter [7:0] LEGUP_F_main_BB__5_111 = 8'd111;
parameter [7:0] LEGUP_F_main_BB__5_112 = 8'd112;
parameter [7:0] LEGUP_F_main_BB__5_113 = 8'd113;
parameter [7:0] LEGUP_F_main_BB__5_114 = 8'd114;
parameter [7:0] LEGUP_F_main_BB__5_115 = 8'd115;
parameter [7:0] LEGUP_F_main_BB__5_116 = 8'd116;
parameter [7:0] LEGUP_F_main_BB__5_117 = 8'd117;
parameter [7:0] LEGUP_F_main_BB__5_118 = 8'd118;
parameter [7:0] LEGUP_F_main_BB__5_119 = 8'd119;
parameter [7:0] LEGUP_F_main_BB__5_120 = 8'd120;
parameter [7:0] LEGUP_F_main_BB__5_121 = 8'd121;
parameter [7:0] LEGUP_F_main_BB__5_122 = 8'd122;
parameter [7:0] LEGUP_F_main_BB__5_123 = 8'd123;
parameter [7:0] LEGUP_F_main_BB__5_124 = 8'd124;
parameter [7:0] LEGUP_F_main_BB__5_125 = 8'd125;
parameter [7:0] LEGUP_F_main_BB__5_126 = 8'd126;
parameter [7:0] LEGUP_F_main_BB__5_127 = 8'd127;
parameter [7:0] LEGUP_F_main_BB__5_128 = 8'd128;
parameter [7:0] LEGUP_F_main_BB__5_129 = 8'd129;
parameter [7:0] LEGUP_F_main_BB__5_130 = 8'd130;
parameter [7:0] LEGUP_F_main_BB__5_131 = 8'd131;
parameter [7:0] LEGUP_F_main_BB__5_132 = 8'd132;
parameter [7:0] LEGUP_F_main_BB__5_133 = 8'd133;
parameter [7:0] LEGUP_F_main_BB__5_134 = 8'd134;
parameter [7:0] LEGUP_F_main_BB__5_135 = 8'd135;
parameter [7:0] LEGUP_F_main_BB__5_136 = 8'd136;
parameter [7:0] LEGUP_F_main_BB__5_137 = 8'd137;
parameter [7:0] LEGUP_F_main_BB__5_138 = 8'd138;
parameter [7:0] LEGUP_F_main_BB_preheaderi_139 = 8'd139;
parameter [7:0] LEGUP_F_main_BB_lrph17i_140 = 8'd140;
parameter [7:0] LEGUP_F_main_BB__393_141 = 8'd141;
parameter [7:0] LEGUP_F_main_BB_lrphi_142 = 8'd142;
parameter [7:0] LEGUP_F_main_BB_lrphi_143 = 8'd143;
parameter [7:0] LEGUP_F_main_BB_lrphi_144 = 8'd144;
parameter [7:0] LEGUP_F_main_BB_lrphi_145 = 8'd145;
parameter [7:0] LEGUP_F_main_BB__407_146 = 8'd146;
parameter [7:0] LEGUP_F_main_BB__407_147 = 8'd147;
parameter [7:0] LEGUP_F_main_BB__407_148 = 8'd148;
parameter [7:0] LEGUP_F_main_BB__407_149 = 8'd149;
parameter [7:0] LEGUP_F_main_BB__407_150 = 8'd150;
parameter [7:0] LEGUP_F_main_BB__407_151 = 8'd151;
parameter [7:0] LEGUP_F_main_BB__407_152 = 8'd152;
parameter [7:0] LEGUP_F_main_BB__407_153 = 8'd153;
parameter [7:0] LEGUP_F_main_BB__crit_edgeiloopexit_154 = 8'd154;
parameter [7:0] LEGUP_F_main_BB__crit_edgei_155 = 8'd155;
parameter [7:0] LEGUP_F_main_BB__crit_edge18iloopexit_156 = 8'd156;
parameter [7:0] LEGUP_F_main_BB__crit_edge18i_157 = 8'd157;
parameter [7:0] LEGUP_F_main_BB_fftexitpreheader_158 = 8'd158;
parameter [7:0] LEGUP_F_main_BB_fftexit_159 = 8'd159;
parameter [7:0] LEGUP_F_main_BB_fftexit_160 = 8'd160;
parameter [7:0] LEGUP_F_main_BB_fftexit_161 = 8'd161;
parameter [7:0] LEGUP_F_main_BB__487_162 = 8'd162;
parameter [7:0] LEGUP_F_main_BB__490_163 = 8'd163;
parameter [7:0] LEGUP_F_main_BB__492_164 = 8'd164;
parameter [7:0] LEGUP_F_main_BB__494_165 = 8'd165;
parameter [8:0] tag_offset = 9'd0;
parameter [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tag_addr_offset = {tag_offset, 23'd0};

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
input  memory_controller_waitrequest;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
output reg [31:0] return_val;
reg [7:0] cur_state;
reg [7:0] next_state;
reg [31:0] main_1_indvarsiv4;
reg [31:0] main_1_indvarsiv4_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep5;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep5_reg;
reg [31:0] main_1_2;
reg [15:0] main_1_3;
reg [15:0] main_1_3_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep6;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep6_reg;
reg [15:0] main_1_input_temp0input_temp0input_temp0;
reg [15:0] main_1_input_temp0input_temp0input_temp0_reg;
reg [15:0] main_1_input_temp0input_temp0input_temp01;
reg [31:0] main_1_4;
reg [31:0] main_1_4_reg;
reg  main_1_exitcond4;
reg  main_1_exitcond4_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_6;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_7;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_8;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_8_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_9;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_9_reg;
reg [15:0] main_5_10;
reg [15:0] main_5_10_reg;
reg [15:0] main_5_11;
reg [15:0] main_5_11_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_12;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_12_reg;
reg [15:0] main_5_13;
reg [15:0] main_5_13_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_14;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_14_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_15;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_15_reg;
reg [15:0] main_5_16;
reg [15:0] main_5_16_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_17;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_17_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_18;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_18_reg;
reg [15:0] main_5_19;
reg [15:0] main_5_19_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_20;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_20_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_21;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_21_reg;
reg [15:0] main_5_22;
reg [15:0] main_5_22_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_23;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_23_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_24;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_24_reg;
reg [15:0] main_5_25;
reg [15:0] main_5_25_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_26;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_26_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_27;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_27_reg;
reg [15:0] main_5_28;
reg [15:0] main_5_28_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_29;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_29_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_30;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_30_reg;
reg [15:0] main_5_31;
reg [15:0] main_5_31_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_32;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_32_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_33;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_33_reg;
reg [15:0] main_5_34;
reg [15:0] main_5_34_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_35;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_35_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_36;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_36_reg;
reg [15:0] main_5_37;
reg [15:0] main_5_37_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_38;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_38_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_39;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_39_reg;
reg [15:0] main_5_40;
reg [15:0] main_5_40_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_41;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_41_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_42;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_42_reg;
reg [15:0] main_5_43;
reg [15:0] main_5_43_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_44;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_44_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_45;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_45_reg;
reg [15:0] main_5_46;
reg [15:0] main_5_46_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_47;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_47_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_48;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_48_reg;
reg [15:0] main_5_49;
reg [15:0] main_5_49_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_50;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_50_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_51;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_51_reg;
reg [15:0] main_5_52;
reg [15:0] main_5_52_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_53;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_53_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_54;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_54_reg;
reg [15:0] main_5_55;
reg [15:0] main_5_55_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_56;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_56_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_57;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_57_reg;
reg [15:0] main_5_58;
reg [15:0] main_5_58_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_59;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_59_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_60;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_60_reg;
reg [15:0] main_5_61;
reg [15:0] main_5_61_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_62;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_62_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_63;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_63_reg;
reg [15:0] main_5_64;
reg [15:0] main_5_64_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_65;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_65_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_66;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_66_reg;
reg [15:0] main_5_67;
reg [15:0] main_5_67_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_68;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_68_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_69;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_69_reg;
reg [15:0] main_5_70;
reg [15:0] main_5_70_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_71;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_71_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_72;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_72_reg;
reg [15:0] main_5_73;
reg [15:0] main_5_73_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_74;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_74_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_75;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_75_reg;
reg [15:0] main_5_76;
reg [15:0] main_5_76_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_77;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_77_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_78;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_78_reg;
reg [15:0] main_5_79;
reg [15:0] main_5_79_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_80;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_80_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_81;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_81_reg;
reg [15:0] main_5_82;
reg [15:0] main_5_82_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_83;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_83_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_84;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_84_reg;
reg [15:0] main_5_85;
reg [15:0] main_5_85_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_86;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_86_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_87;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_87_reg;
reg [15:0] main_5_88;
reg [15:0] main_5_88_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_89;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_89_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_90;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_90_reg;
reg [15:0] main_5_91;
reg [15:0] main_5_91_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_92;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_92_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_93;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_93_reg;
reg [15:0] main_5_94;
reg [15:0] main_5_94_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_95;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_95_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_96;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_96_reg;
reg [15:0] main_5_97;
reg [15:0] main_5_97_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_98;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_98_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_99;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_99_reg;
reg [15:0] main_5_100;
reg [15:0] main_5_100_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_101;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_101_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_102;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_102_reg;
reg [15:0] main_5_103;
reg [15:0] main_5_103_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_104;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_104_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_105;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_105_reg;
reg [15:0] main_5_106;
reg [15:0] main_5_106_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_107;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_107_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_108;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_108_reg;
reg [15:0] main_5_109;
reg [15:0] main_5_109_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_110;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_110_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_111;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_111_reg;
reg [15:0] main_5_112;
reg [15:0] main_5_112_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_113;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_113_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_114;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_114_reg;
reg [15:0] main_5_115;
reg [15:0] main_5_115_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_116;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_116_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_117;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_117_reg;
reg [15:0] main_5_118;
reg [15:0] main_5_118_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_119;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_119_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_120;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_120_reg;
reg [15:0] main_5_121;
reg [15:0] main_5_121_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_122;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_122_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_123;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_123_reg;
reg [15:0] main_5_124;
reg [15:0] main_5_124_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_125;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_125_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_126;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_126_reg;
reg [15:0] main_5_127;
reg [15:0] main_5_127_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_128;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_128_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_129;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_129_reg;
reg [15:0] main_5_130;
reg [15:0] main_5_130_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_131;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_131_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_132;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_132_reg;
reg [15:0] main_5_133;
reg [15:0] main_5_133_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_134;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_134_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_135;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_135_reg;
reg [15:0] main_5_136;
reg [15:0] main_5_136_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_137;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_137_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_138;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_138_reg;
reg [15:0] main_5_139;
reg [15:0] main_5_139_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_140;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_140_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_141;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_141_reg;
reg [15:0] main_5_142;
reg [15:0] main_5_142_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_143;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_143_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_144;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_144_reg;
reg [15:0] main_5_145;
reg [15:0] main_5_145_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_146;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_146_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_147;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_147_reg;
reg [15:0] main_5_148;
reg [15:0] main_5_148_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_149;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_149_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_150;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_150_reg;
reg [15:0] main_5_151;
reg [15:0] main_5_151_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_152;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_152_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_153;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_153_reg;
reg [15:0] main_5_154;
reg [15:0] main_5_154_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_155;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_155_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_156;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_156_reg;
reg [15:0] main_5_157;
reg [15:0] main_5_157_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_158;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_158_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_159;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_159_reg;
reg [15:0] main_5_160;
reg [15:0] main_5_160_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_161;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_161_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_162;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_162_reg;
reg [15:0] main_5_163;
reg [15:0] main_5_163_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_164;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_164_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_165;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_165_reg;
reg [15:0] main_5_166;
reg [15:0] main_5_166_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_167;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_167_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_168;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_168_reg;
reg [15:0] main_5_169;
reg [15:0] main_5_169_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_170;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_170_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_171;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_171_reg;
reg [15:0] main_5_172;
reg [15:0] main_5_172_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_173;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_173_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_174;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_174_reg;
reg [15:0] main_5_175;
reg [15:0] main_5_175_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_176;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_176_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_177;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_177_reg;
reg [15:0] main_5_178;
reg [15:0] main_5_178_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_179;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_179_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_180;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_180_reg;
reg [15:0] main_5_181;
reg [15:0] main_5_181_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_182;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_182_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_183;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_183_reg;
reg [15:0] main_5_184;
reg [15:0] main_5_184_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_185;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_185_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_186;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_186_reg;
reg [15:0] main_5_187;
reg [15:0] main_5_187_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_188;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_188_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_189;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_189_reg;
reg [15:0] main_5_190;
reg [15:0] main_5_190_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_191;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_191_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_192;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_192_reg;
reg [15:0] main_5_193;
reg [15:0] main_5_193_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_194;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_194_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_195;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_195_reg;
reg [15:0] main_5_196;
reg [15:0] main_5_196_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_197;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_197_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_198;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_198_reg;
reg [15:0] main_5_199;
reg [15:0] main_5_199_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_200;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_200_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_201;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_201_reg;
reg [15:0] main_5_202;
reg [15:0] main_5_202_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_203;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_203_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_204;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_204_reg;
reg [15:0] main_5_205;
reg [15:0] main_5_205_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_206;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_206_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_207;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_207_reg;
reg [15:0] main_5_208;
reg [15:0] main_5_208_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_209;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_209_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_210;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_210_reg;
reg [15:0] main_5_211;
reg [15:0] main_5_211_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_212;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_212_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_213;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_213_reg;
reg [15:0] main_5_214;
reg [15:0] main_5_214_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_215;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_215_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_216;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_216_reg;
reg [15:0] main_5_217;
reg [15:0] main_5_217_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_218;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_218_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_219;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_219_reg;
reg [15:0] main_5_220;
reg [15:0] main_5_220_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_221;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_221_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_222;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_222_reg;
reg [15:0] main_5_223;
reg [15:0] main_5_223_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_224;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_224_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_225;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_225_reg;
reg [15:0] main_5_226;
reg [15:0] main_5_226_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_227;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_227_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_228;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_228_reg;
reg [15:0] main_5_229;
reg [15:0] main_5_229_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_230;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_230_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_231;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_231_reg;
reg [15:0] main_5_232;
reg [15:0] main_5_232_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_233;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_233_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_234;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_234_reg;
reg [15:0] main_5_235;
reg [15:0] main_5_235_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_236;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_236_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_237;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_237_reg;
reg [15:0] main_5_238;
reg [15:0] main_5_238_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_239;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_239_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_240;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_240_reg;
reg [15:0] main_5_241;
reg [15:0] main_5_241_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_242;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_242_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_243;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_243_reg;
reg [15:0] main_5_244;
reg [15:0] main_5_244_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_245;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_245_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_246;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_246_reg;
reg [15:0] main_5_247;
reg [15:0] main_5_247_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_248;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_248_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_249;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_249_reg;
reg [15:0] main_5_250;
reg [15:0] main_5_250_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_251;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_251_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_252;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_252_reg;
reg [15:0] main_5_253;
reg [15:0] main_5_253_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_254;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_254_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_255;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_255_reg;
reg [15:0] main_5_256;
reg [15:0] main_5_256_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_257;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_257_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_258;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_258_reg;
reg [15:0] main_5_259;
reg [15:0] main_5_259_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_260;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_260_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_261;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_261_reg;
reg [15:0] main_5_262;
reg [15:0] main_5_262_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_263;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_263_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_264;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_264_reg;
reg [15:0] main_5_265;
reg [15:0] main_5_265_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_266;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_266_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_267;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_267_reg;
reg [15:0] main_5_268;
reg [15:0] main_5_268_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_269;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_269_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_270;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_270_reg;
reg [15:0] main_5_271;
reg [15:0] main_5_271_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_272;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_272_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_273;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_273_reg;
reg [15:0] main_5_274;
reg [15:0] main_5_274_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_275;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_275_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_276;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_276_reg;
reg [15:0] main_5_277;
reg [15:0] main_5_277_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_278;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_278_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_279;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_279_reg;
reg [15:0] main_5_280;
reg [15:0] main_5_280_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_281;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_281_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_282;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_282_reg;
reg [15:0] main_5_283;
reg [15:0] main_5_283_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_284;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_284_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_285;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_285_reg;
reg [15:0] main_5_286;
reg [15:0] main_5_286_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_287;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_287_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_288;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_288_reg;
reg [15:0] main_5_289;
reg [15:0] main_5_289_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_290;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_290_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_291;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_291_reg;
reg [15:0] main_5_292;
reg [15:0] main_5_292_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_293;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_293_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_294;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_294_reg;
reg [15:0] main_5_295;
reg [15:0] main_5_295_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_296;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_296_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_297;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_297_reg;
reg [15:0] main_5_298;
reg [15:0] main_5_298_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_299;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_299_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_300;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_300_reg;
reg [15:0] main_5_301;
reg [15:0] main_5_301_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_302;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_302_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_303;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_303_reg;
reg [15:0] main_5_304;
reg [15:0] main_5_304_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_305;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_305_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_306;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_306_reg;
reg [15:0] main_5_307;
reg [15:0] main_5_307_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_308;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_308_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_309;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_309_reg;
reg [15:0] main_5_310;
reg [15:0] main_5_310_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_311;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_311_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_312;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_312_reg;
reg [15:0] main_5_313;
reg [15:0] main_5_313_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_314;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_314_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_315;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_315_reg;
reg [15:0] main_5_316;
reg [15:0] main_5_316_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_317;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_317_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_318;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_318_reg;
reg [15:0] main_5_319;
reg [15:0] main_5_319_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_320;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_320_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_321;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_321_reg;
reg [15:0] main_5_322;
reg [15:0] main_5_322_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_323;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_323_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_324;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_324_reg;
reg [15:0] main_5_325;
reg [15:0] main_5_325_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_326;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_326_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_327;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_327_reg;
reg [15:0] main_5_328;
reg [15:0] main_5_328_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_329;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_329_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_330;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_330_reg;
reg [15:0] main_5_331;
reg [15:0] main_5_331_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_332;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_332_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_333;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_333_reg;
reg [15:0] main_5_334;
reg [15:0] main_5_334_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_335;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_335_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_336;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_336_reg;
reg [15:0] main_5_337;
reg [15:0] main_5_337_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_338;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_338_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_339;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_339_reg;
reg [15:0] main_5_340;
reg [15:0] main_5_340_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_341;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_341_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_342;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_342_reg;
reg [15:0] main_5_343;
reg [15:0] main_5_343_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_344;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_344_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_345;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_345_reg;
reg [15:0] main_5_346;
reg [15:0] main_5_346_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_347;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_347_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_348;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_348_reg;
reg [15:0] main_5_349;
reg [15:0] main_5_349_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_350;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_350_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_351;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_351_reg;
reg [15:0] main_5_352;
reg [15:0] main_5_352_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_353;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_353_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_354;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_354_reg;
reg [15:0] main_5_355;
reg [15:0] main_5_355_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_356;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_356_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_357;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_357_reg;
reg [15:0] main_5_358;
reg [15:0] main_5_358_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_359;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_359_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_360;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_360_reg;
reg [15:0] main_5_361;
reg [15:0] main_5_361_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_362;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_362_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_363;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_363_reg;
reg [15:0] main_5_364;
reg [15:0] main_5_364_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_365;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_365_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_366;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_366_reg;
reg [15:0] main_5_367;
reg [15:0] main_5_367_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_368;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_368_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_369;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_369_reg;
reg [15:0] main_5_370;
reg [15:0] main_5_370_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_371;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_371_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_372;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_372_reg;
reg [15:0] main_5_373;
reg [15:0] main_5_373_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_374;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_374_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_375;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_375_reg;
reg [15:0] main_5_376;
reg [15:0] main_5_376_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_377;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_377_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_378;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_378_reg;
reg [15:0] main_5_379;
reg [15:0] main_5_379_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_380;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_380_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_381;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_381_reg;
reg [15:0] main_5_382;
reg [15:0] main_5_382_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_383;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_383_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_384;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_384_reg;
reg [15:0] main_5_385;
reg [15:0] main_5_385_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_386;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_386_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_387;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_387_reg;
reg [15:0] main_5_388;
reg [15:0] main_5_388_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_389;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_5_389_reg;
reg [31:0] main_preheaderi_indvar;
reg [31:0] main_preheaderi_indvar_reg;
reg [15:0] main_preheaderi_sin_index020i;
reg [15:0] main_preheaderi_sin_index020i_reg;
reg [31:0] main_preheaderi_l019i;
reg [31:0] main_preheaderi_l019i_reg;
reg  main_preheaderi_390;
reg [31:0] main_lrph17i_391;
reg [31:0] main_lrph17i_391_reg;
reg [15:0] main_lrph17i_392;
reg [15:0] main_lrph17i_392_reg;
reg [15:0] main_393_394;
reg [15:0] main_393_394_reg;
reg [15:0] main_393_395;
reg [15:0] main_393_395_reg;
reg [15:0] main_393_396;
reg [15:0] main_393_397;
reg [15:0] main_393_397_reg;
reg [15:0] main_393_sin_index115i;
reg [31:0] main_393_398;
reg [31:0] main_393_398_reg;
reg  main_393_399;
reg [31:0] main_lrphi_400;
reg [31:0] main_lrphi_400_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrphi_401;
reg [15:0] main_lrphi_402;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrphi_403;
reg [15:0] main_lrphi_404;
reg [31:0] main_lrphi_405;
reg [31:0] main_lrphi_405_reg;
reg [31:0] main_lrphi_406;
reg [31:0] main_lrphi_406_reg;
reg [15:0] main_407_ini;
reg [15:0] main_407_ini_reg;
reg [31:0] main_407_408;
reg [31:0] main_407_409;
reg [31:0] main_407_sext1i;
reg [31:0] main_407_410;
reg [31:0] main_407_410_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_407_411;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_407_411_reg;
reg [15:0] main_407_412;
reg [31:0] main_407_413;
reg [31:0] main_407_414;
reg [31:0] main_407_415;
reg [31:0] main_407_416;
reg [31:0] main_407_417;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_407_418;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_407_418_reg;
reg [15:0] main_407_419;
reg [31:0] main_407_420;
reg [31:0] main_407_421;
reg [31:0] main_407_422;
reg [31:0] main_407_423;
reg [31:0] main_407_424;
reg [31:0] main_407_neg12i;
reg [31:0] main_407_425;
reg [31:0] main_407_426;
reg [31:0] main_407_427;
reg [31:0] main_407_428;
reg [31:0] main_407_429;
reg [31:0] main_407_430;
reg [31:0] main_407_431;
reg [31:0] main_407_432;
reg [31:0] main_407_433;
reg [31:0] main_407_434;
reg [31:0] main_407_435;
reg [31:0] main_407_436;
reg [31:0] main_407_437;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_407_438;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_407_438_reg;
reg [15:0] main_407_439;
reg [31:0] main_407_440;
reg [31:0] main_407_440_reg;
reg [31:0] main_407_sext9i;
reg [31:0] main_407_441;
reg [31:0] main_407_441_reg;
reg [31:0] main_407_sext10i;
reg [31:0] main_407_442;
reg [31:0] main_407_443;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_407_444;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_407_444_reg;
reg [15:0] main_407_445;
reg [31:0] main_407_446;
reg [31:0] main_407_446_reg;
reg [31:0] main_407_447;
reg [31:0] main_407_448;
reg [31:0] main_407_449;
reg [31:0] main_407_450;
reg [31:0] main_407_451;
reg [31:0] main_407_sext4i;
reg [31:0] main_407_452;
reg [31:0] main_407_453;
reg [31:0] main_407_454;
reg [31:0] main_407_sext5i;
reg [31:0] main_407_455;
reg [31:0] main_407_456;
reg [15:0] main_407_457;
reg [31:0] main_407_sext7i;
reg [31:0] main_407_458;
reg [31:0] main_407_459;
reg [31:0] main_407_460;
reg [15:0] main_407_461;
reg [31:0] main_407_462;
reg [31:0] main_407_463;
reg [15:0] main_407_464;
reg [15:0] main_407_464_reg;
reg [31:0] main_407_465;
reg [31:0] main_407_466;
reg [15:0] main_407_467;
reg [15:0] main_407_467_reg;
reg [31:0] main_407_468;
reg [15:0] main_407_469;
reg [15:0] main_407_469_reg;
reg  main_407_470;
reg  main_407_470_reg;
reg [15:0] main__crit_edgei_471;
reg [31:0] main__crit_edgei_472;
reg  main__crit_edgei_473;
reg [15:0] main__crit_edge18i_sin_index1lcssai;
reg [15:0] main__crit_edge18i_sin_index1lcssai_reg;
reg [31:0] main__crit_edge18i_sexti;
reg [31:0] main__crit_edge18i_phitmpi;
reg [31:0] main__crit_edge18i_indvarnext;
reg  main__crit_edge18i_exitcond;
reg [31:0] main_fftexit_indvarsiv;
reg [31:0] main_fftexit_indvarsiv_reg;
reg [31:0] main_fftexit_sum02;
reg [31:0] main_fftexit_sum02_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_fftexit_scevgep;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_fftexit_scevgep3;
reg [15:0] main_fftexit_474;
reg [31:0] main_fftexit_475;
reg  main_fftexit_476;
reg [31:0] main_fftexit_477;
reg [31:0] main_fftexit_478;
reg [31:0] main_fftexit_479;
reg [15:0] main_fftexit_480;
reg [31:0] main_fftexit_481;
reg  main_fftexit_482;
reg [31:0] main_fftexit_483;
reg [31:0] main_fftexit_484;
reg [31:0] main_fftexit_485;
reg [31:0] main_fftexit_485_reg;
reg [31:0] main_fftexit_486;
reg [31:0] main_fftexit_486_reg;
reg  main_fftexit_exitcond2;
reg  main_fftexit_exitcond2_reg;
reg  main_487_489;
reg  lpm_mult_main_1_2_en;
reg [31:0] main_1_2_stage0_reg;
reg  lpm_mult_main_407_414_en;
reg [31:0] main_407_414_stage0_reg;
reg  lpm_mult_main_407_421_en;
reg [31:0] main_407_421_stage0_reg;
reg  lpm_mult_main_407_427_en;
reg [31:0] main_407_427_stage0_reg;
reg  lpm_mult_main_407_431_en;
reg [31:0] main_407_431_stage0_reg;
reg  lpm_mult_main_407_443_en;
reg [31:0] main_407_443_stage0_reg;
reg  lpm_mult_main_407_447_en;
reg [31:0] main_407_447_stage0_reg;


/* Unsynthesizable Statements */
always @(posedge clk)
	if (!memory_controller_waitrequest) begin
	/* main: %487*/
	/*   %488 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([12 x i8]* @.str, i32 0, i32 0), i32 %485) #1*/
	if ((cur_state == LEGUP_F_main_BB__487_162)) begin
		$write("Result: %d\n", $signed(main_fftexit_485_reg));
		// to fix quartus warning
		if (reset == 1'b0 && ^(main_fftexit_485_reg) === 1'bX) finish <= 0;
	end
	/* main: %490*/
	/*   %491 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([14 x i8]* @.str1, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_F_main_BB__490_163)) begin
		$write("RESULT: PASS\n");
	end
	/* main: %492*/
	/*   %493 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([14 x i8]* @.str2, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_F_main_BB__492_164)) begin
		$write("RESULT: FAIL\n");
	end
end
always @(posedge clk) begin
if (reset == 1'b1)
	cur_state <= LEGUP_0;
else if (memory_controller_waitrequest == 1'd1)
	cur_state <= cur_state;
else
	cur_state <= next_state;
end

always @(*)
begin
next_state = cur_state;
case(cur_state)  // synthesis parallel_case  
LEGUP_0:
	if ((start == 1'd1))
		next_state = LEGUP_F_main_BB__0_1;
LEGUP_F_main_BB__0_1:
		next_state = LEGUP_F_main_BB__1_2;
LEGUP_F_main_BB__1_2:
		next_state = LEGUP_F_main_BB__1_3;
LEGUP_F_main_BB__1_3:
		next_state = LEGUP_F_main_BB__1_4;
LEGUP_F_main_BB__1_4:
		next_state = LEGUP_F_main_BB__1_5;
LEGUP_F_main_BB__1_5:
		next_state = LEGUP_F_main_BB__1_6;
LEGUP_F_main_BB__1_6:
		next_state = LEGUP_F_main_BB__1_7;
LEGUP_F_main_BB__1_7:
		next_state = LEGUP_F_main_BB__1_8;
LEGUP_F_main_BB__1_8:
		next_state = LEGUP_F_main_BB__1_9;
LEGUP_F_main_BB__1_9:
	if ((main_1_exitcond4_reg == 1'd1))
		next_state = LEGUP_F_main_BB__5_10;
	else if ((main_1_exitcond4_reg == 1'd0))
		next_state = LEGUP_F_main_BB__1_2;
LEGUP_F_main_BB__393_141:
	if ((main_393_399 == 1'd1))
		next_state = LEGUP_F_main_BB_lrphi_142;
	else if ((main_393_399 == 1'd0))
		next_state = LEGUP_F_main_BB__crit_edgei_155;
LEGUP_F_main_BB__407_146:
		next_state = LEGUP_F_main_BB__407_147;
LEGUP_F_main_BB__407_147:
		next_state = LEGUP_F_main_BB__407_148;
LEGUP_F_main_BB__407_148:
		next_state = LEGUP_F_main_BB__407_149;
LEGUP_F_main_BB__407_149:
		next_state = LEGUP_F_main_BB__407_150;
LEGUP_F_main_BB__407_150:
		next_state = LEGUP_F_main_BB__407_151;
LEGUP_F_main_BB__407_151:
		next_state = LEGUP_F_main_BB__407_152;
LEGUP_F_main_BB__407_152:
		next_state = LEGUP_F_main_BB__407_153;
LEGUP_F_main_BB__407_153:
	if ((main_407_470_reg == 1'd1))
		next_state = LEGUP_F_main_BB__407_146;
	else if ((main_407_470_reg == 1'd0))
		next_state = LEGUP_F_main_BB__crit_edgeiloopexit_154;
LEGUP_F_main_BB__487_162:
	if ((main_487_489 == 1'd1))
		next_state = LEGUP_F_main_BB__490_163;
	else if ((main_487_489 == 1'd0))
		next_state = LEGUP_F_main_BB__492_164;
LEGUP_F_main_BB__490_163:
		next_state = LEGUP_F_main_BB__494_165;
LEGUP_F_main_BB__492_164:
		next_state = LEGUP_F_main_BB__494_165;
LEGUP_F_main_BB__494_165:
		next_state = LEGUP_0;
LEGUP_F_main_BB__5_10:
		next_state = LEGUP_F_main_BB__5_11;
LEGUP_F_main_BB__5_100:
		next_state = LEGUP_F_main_BB__5_101;
LEGUP_F_main_BB__5_101:
		next_state = LEGUP_F_main_BB__5_102;
LEGUP_F_main_BB__5_102:
		next_state = LEGUP_F_main_BB__5_103;
LEGUP_F_main_BB__5_103:
		next_state = LEGUP_F_main_BB__5_104;
LEGUP_F_main_BB__5_104:
		next_state = LEGUP_F_main_BB__5_105;
LEGUP_F_main_BB__5_105:
		next_state = LEGUP_F_main_BB__5_106;
LEGUP_F_main_BB__5_106:
		next_state = LEGUP_F_main_BB__5_107;
LEGUP_F_main_BB__5_107:
		next_state = LEGUP_F_main_BB__5_108;
LEGUP_F_main_BB__5_108:
		next_state = LEGUP_F_main_BB__5_109;
LEGUP_F_main_BB__5_109:
		next_state = LEGUP_F_main_BB__5_110;
LEGUP_F_main_BB__5_11:
		next_state = LEGUP_F_main_BB__5_12;
LEGUP_F_main_BB__5_110:
		next_state = LEGUP_F_main_BB__5_111;
LEGUP_F_main_BB__5_111:
		next_state = LEGUP_F_main_BB__5_112;
LEGUP_F_main_BB__5_112:
		next_state = LEGUP_F_main_BB__5_113;
LEGUP_F_main_BB__5_113:
		next_state = LEGUP_F_main_BB__5_114;
LEGUP_F_main_BB__5_114:
		next_state = LEGUP_F_main_BB__5_115;
LEGUP_F_main_BB__5_115:
		next_state = LEGUP_F_main_BB__5_116;
LEGUP_F_main_BB__5_116:
		next_state = LEGUP_F_main_BB__5_117;
LEGUP_F_main_BB__5_117:
		next_state = LEGUP_F_main_BB__5_118;
LEGUP_F_main_BB__5_118:
		next_state = LEGUP_F_main_BB__5_119;
LEGUP_F_main_BB__5_119:
		next_state = LEGUP_F_main_BB__5_120;
LEGUP_F_main_BB__5_12:
		next_state = LEGUP_F_main_BB__5_13;
LEGUP_F_main_BB__5_120:
		next_state = LEGUP_F_main_BB__5_121;
LEGUP_F_main_BB__5_121:
		next_state = LEGUP_F_main_BB__5_122;
LEGUP_F_main_BB__5_122:
		next_state = LEGUP_F_main_BB__5_123;
LEGUP_F_main_BB__5_123:
		next_state = LEGUP_F_main_BB__5_124;
LEGUP_F_main_BB__5_124:
		next_state = LEGUP_F_main_BB__5_125;
LEGUP_F_main_BB__5_125:
		next_state = LEGUP_F_main_BB__5_126;
LEGUP_F_main_BB__5_126:
		next_state = LEGUP_F_main_BB__5_127;
LEGUP_F_main_BB__5_127:
		next_state = LEGUP_F_main_BB__5_128;
LEGUP_F_main_BB__5_128:
		next_state = LEGUP_F_main_BB__5_129;
LEGUP_F_main_BB__5_129:
		next_state = LEGUP_F_main_BB__5_130;
LEGUP_F_main_BB__5_13:
		next_state = LEGUP_F_main_BB__5_14;
LEGUP_F_main_BB__5_130:
		next_state = LEGUP_F_main_BB__5_131;
LEGUP_F_main_BB__5_131:
		next_state = LEGUP_F_main_BB__5_132;
LEGUP_F_main_BB__5_132:
		next_state = LEGUP_F_main_BB__5_133;
LEGUP_F_main_BB__5_133:
		next_state = LEGUP_F_main_BB__5_134;
LEGUP_F_main_BB__5_134:
		next_state = LEGUP_F_main_BB__5_135;
LEGUP_F_main_BB__5_135:
		next_state = LEGUP_F_main_BB__5_136;
LEGUP_F_main_BB__5_136:
		next_state = LEGUP_F_main_BB__5_137;
LEGUP_F_main_BB__5_137:
		next_state = LEGUP_F_main_BB__5_138;
LEGUP_F_main_BB__5_138:
		next_state = LEGUP_F_main_BB_preheaderi_139;
LEGUP_F_main_BB__5_14:
		next_state = LEGUP_F_main_BB__5_15;
LEGUP_F_main_BB__5_15:
		next_state = LEGUP_F_main_BB__5_16;
LEGUP_F_main_BB__5_16:
		next_state = LEGUP_F_main_BB__5_17;
LEGUP_F_main_BB__5_17:
		next_state = LEGUP_F_main_BB__5_18;
LEGUP_F_main_BB__5_18:
		next_state = LEGUP_F_main_BB__5_19;
LEGUP_F_main_BB__5_19:
		next_state = LEGUP_F_main_BB__5_20;
LEGUP_F_main_BB__5_20:
		next_state = LEGUP_F_main_BB__5_21;
LEGUP_F_main_BB__5_21:
		next_state = LEGUP_F_main_BB__5_22;
LEGUP_F_main_BB__5_22:
		next_state = LEGUP_F_main_BB__5_23;
LEGUP_F_main_BB__5_23:
		next_state = LEGUP_F_main_BB__5_24;
LEGUP_F_main_BB__5_24:
		next_state = LEGUP_F_main_BB__5_25;
LEGUP_F_main_BB__5_25:
		next_state = LEGUP_F_main_BB__5_26;
LEGUP_F_main_BB__5_26:
		next_state = LEGUP_F_main_BB__5_27;
LEGUP_F_main_BB__5_27:
		next_state = LEGUP_F_main_BB__5_28;
LEGUP_F_main_BB__5_28:
		next_state = LEGUP_F_main_BB__5_29;
LEGUP_F_main_BB__5_29:
		next_state = LEGUP_F_main_BB__5_30;
LEGUP_F_main_BB__5_30:
		next_state = LEGUP_F_main_BB__5_31;
LEGUP_F_main_BB__5_31:
		next_state = LEGUP_F_main_BB__5_32;
LEGUP_F_main_BB__5_32:
		next_state = LEGUP_F_main_BB__5_33;
LEGUP_F_main_BB__5_33:
		next_state = LEGUP_F_main_BB__5_34;
LEGUP_F_main_BB__5_34:
		next_state = LEGUP_F_main_BB__5_35;
LEGUP_F_main_BB__5_35:
		next_state = LEGUP_F_main_BB__5_36;
LEGUP_F_main_BB__5_36:
		next_state = LEGUP_F_main_BB__5_37;
LEGUP_F_main_BB__5_37:
		next_state = LEGUP_F_main_BB__5_38;
LEGUP_F_main_BB__5_38:
		next_state = LEGUP_F_main_BB__5_39;
LEGUP_F_main_BB__5_39:
		next_state = LEGUP_F_main_BB__5_40;
LEGUP_F_main_BB__5_40:
		next_state = LEGUP_F_main_BB__5_41;
LEGUP_F_main_BB__5_41:
		next_state = LEGUP_F_main_BB__5_42;
LEGUP_F_main_BB__5_42:
		next_state = LEGUP_F_main_BB__5_43;
LEGUP_F_main_BB__5_43:
		next_state = LEGUP_F_main_BB__5_44;
LEGUP_F_main_BB__5_44:
		next_state = LEGUP_F_main_BB__5_45;
LEGUP_F_main_BB__5_45:
		next_state = LEGUP_F_main_BB__5_46;
LEGUP_F_main_BB__5_46:
		next_state = LEGUP_F_main_BB__5_47;
LEGUP_F_main_BB__5_47:
		next_state = LEGUP_F_main_BB__5_48;
LEGUP_F_main_BB__5_48:
		next_state = LEGUP_F_main_BB__5_49;
LEGUP_F_main_BB__5_49:
		next_state = LEGUP_F_main_BB__5_50;
LEGUP_F_main_BB__5_50:
		next_state = LEGUP_F_main_BB__5_51;
LEGUP_F_main_BB__5_51:
		next_state = LEGUP_F_main_BB__5_52;
LEGUP_F_main_BB__5_52:
		next_state = LEGUP_F_main_BB__5_53;
LEGUP_F_main_BB__5_53:
		next_state = LEGUP_F_main_BB__5_54;
LEGUP_F_main_BB__5_54:
		next_state = LEGUP_F_main_BB__5_55;
LEGUP_F_main_BB__5_55:
		next_state = LEGUP_F_main_BB__5_56;
LEGUP_F_main_BB__5_56:
		next_state = LEGUP_F_main_BB__5_57;
LEGUP_F_main_BB__5_57:
		next_state = LEGUP_F_main_BB__5_58;
LEGUP_F_main_BB__5_58:
		next_state = LEGUP_F_main_BB__5_59;
LEGUP_F_main_BB__5_59:
		next_state = LEGUP_F_main_BB__5_60;
LEGUP_F_main_BB__5_60:
		next_state = LEGUP_F_main_BB__5_61;
LEGUP_F_main_BB__5_61:
		next_state = LEGUP_F_main_BB__5_62;
LEGUP_F_main_BB__5_62:
		next_state = LEGUP_F_main_BB__5_63;
LEGUP_F_main_BB__5_63:
		next_state = LEGUP_F_main_BB__5_64;
LEGUP_F_main_BB__5_64:
		next_state = LEGUP_F_main_BB__5_65;
LEGUP_F_main_BB__5_65:
		next_state = LEGUP_F_main_BB__5_66;
LEGUP_F_main_BB__5_66:
		next_state = LEGUP_F_main_BB__5_67;
LEGUP_F_main_BB__5_67:
		next_state = LEGUP_F_main_BB__5_68;
LEGUP_F_main_BB__5_68:
		next_state = LEGUP_F_main_BB__5_69;
LEGUP_F_main_BB__5_69:
		next_state = LEGUP_F_main_BB__5_70;
LEGUP_F_main_BB__5_70:
		next_state = LEGUP_F_main_BB__5_71;
LEGUP_F_main_BB__5_71:
		next_state = LEGUP_F_main_BB__5_72;
LEGUP_F_main_BB__5_72:
		next_state = LEGUP_F_main_BB__5_73;
LEGUP_F_main_BB__5_73:
		next_state = LEGUP_F_main_BB__5_74;
LEGUP_F_main_BB__5_74:
		next_state = LEGUP_F_main_BB__5_75;
LEGUP_F_main_BB__5_75:
		next_state = LEGUP_F_main_BB__5_76;
LEGUP_F_main_BB__5_76:
		next_state = LEGUP_F_main_BB__5_77;
LEGUP_F_main_BB__5_77:
		next_state = LEGUP_F_main_BB__5_78;
LEGUP_F_main_BB__5_78:
		next_state = LEGUP_F_main_BB__5_79;
LEGUP_F_main_BB__5_79:
		next_state = LEGUP_F_main_BB__5_80;
LEGUP_F_main_BB__5_80:
		next_state = LEGUP_F_main_BB__5_81;
LEGUP_F_main_BB__5_81:
		next_state = LEGUP_F_main_BB__5_82;
LEGUP_F_main_BB__5_82:
		next_state = LEGUP_F_main_BB__5_83;
LEGUP_F_main_BB__5_83:
		next_state = LEGUP_F_main_BB__5_84;
LEGUP_F_main_BB__5_84:
		next_state = LEGUP_F_main_BB__5_85;
LEGUP_F_main_BB__5_85:
		next_state = LEGUP_F_main_BB__5_86;
LEGUP_F_main_BB__5_86:
		next_state = LEGUP_F_main_BB__5_87;
LEGUP_F_main_BB__5_87:
		next_state = LEGUP_F_main_BB__5_88;
LEGUP_F_main_BB__5_88:
		next_state = LEGUP_F_main_BB__5_89;
LEGUP_F_main_BB__5_89:
		next_state = LEGUP_F_main_BB__5_90;
LEGUP_F_main_BB__5_90:
		next_state = LEGUP_F_main_BB__5_91;
LEGUP_F_main_BB__5_91:
		next_state = LEGUP_F_main_BB__5_92;
LEGUP_F_main_BB__5_92:
		next_state = LEGUP_F_main_BB__5_93;
LEGUP_F_main_BB__5_93:
		next_state = LEGUP_F_main_BB__5_94;
LEGUP_F_main_BB__5_94:
		next_state = LEGUP_F_main_BB__5_95;
LEGUP_F_main_BB__5_95:
		next_state = LEGUP_F_main_BB__5_96;
LEGUP_F_main_BB__5_96:
		next_state = LEGUP_F_main_BB__5_97;
LEGUP_F_main_BB__5_97:
		next_state = LEGUP_F_main_BB__5_98;
LEGUP_F_main_BB__5_98:
		next_state = LEGUP_F_main_BB__5_99;
LEGUP_F_main_BB__5_99:
		next_state = LEGUP_F_main_BB__5_100;
LEGUP_F_main_BB__crit_edge18i_157:
	if ((main__crit_edge18i_exitcond == 1'd1))
		next_state = LEGUP_F_main_BB_fftexitpreheader_158;
	else if ((main__crit_edge18i_exitcond == 1'd0))
		next_state = LEGUP_F_main_BB_preheaderi_139;
LEGUP_F_main_BB__crit_edge18iloopexit_156:
		next_state = LEGUP_F_main_BB__crit_edge18i_157;
LEGUP_F_main_BB__crit_edgei_155:
	if ((main__crit_edgei_473 == 1'd1))
		next_state = LEGUP_F_main_BB__393_141;
	else if ((main__crit_edgei_473 == 1'd0))
		next_state = LEGUP_F_main_BB__crit_edge18iloopexit_156;
LEGUP_F_main_BB__crit_edgeiloopexit_154:
		next_state = LEGUP_F_main_BB__crit_edgei_155;
LEGUP_F_main_BB_fftexit_159:
		next_state = LEGUP_F_main_BB_fftexit_160;
LEGUP_F_main_BB_fftexit_160:
		next_state = LEGUP_F_main_BB_fftexit_161;
LEGUP_F_main_BB_fftexit_161:
	if ((main_fftexit_exitcond2_reg == 1'd1))
		next_state = LEGUP_F_main_BB__487_162;
	else if ((main_fftexit_exitcond2_reg == 1'd0))
		next_state = LEGUP_F_main_BB_fftexit_159;
LEGUP_F_main_BB_fftexitpreheader_158:
		next_state = LEGUP_F_main_BB_fftexit_159;
LEGUP_F_main_BB_lrph17i_140:
		next_state = LEGUP_F_main_BB__393_141;
LEGUP_F_main_BB_lrphi_142:
		next_state = LEGUP_F_main_BB_lrphi_143;
LEGUP_F_main_BB_lrphi_143:
		next_state = LEGUP_F_main_BB_lrphi_144;
LEGUP_F_main_BB_lrphi_144:
		next_state = LEGUP_F_main_BB_lrphi_145;
LEGUP_F_main_BB_lrphi_145:
		next_state = LEGUP_F_main_BB__407_146;
LEGUP_F_main_BB_preheaderi_139:
	if ((main_preheaderi_390 == 1'd1))
		next_state = LEGUP_F_main_BB_lrph17i_140;
	else if ((main_preheaderi_390 == 1'd0))
		next_state = LEGUP_F_main_BB__crit_edge18i_157;
default:
	next_state = cur_state;
endcase

end
always @(*) begin
	/* main: %1*/
	/*   %indvars.iv4 = phi i32 [ 0, %0 ], [ %4, %1 ]*/
	if (((cur_state == LEGUP_F_main_BB__0_1) & (memory_controller_waitrequest == 1'd0))) begin
		main_1_indvarsiv4 = 32'd0;
	end
	/* main: %1*/
	/*   %indvars.iv4 = phi i32 [ 0, %0 ], [ %4, %1 ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__1_9) & (memory_controller_waitrequest == 1'd0)) & (main_1_exitcond4_reg == 1'd0))) */ begin
		main_1_indvarsiv4 = main_1_4_reg;
	end
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %indvars.iv4 = phi i32 [ 0, %0 ], [ %4, %1 ]*/
	if (((cur_state == LEGUP_F_main_BB__0_1) & (memory_controller_waitrequest == 1'd0))) begin
		main_1_indvarsiv4_reg <= main_1_indvarsiv4;
		if (start == 1'b0 && ^(main_1_indvarsiv4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_indvarsiv4_reg"); $finish; end
	end
	/* main: %1*/
	/*   %indvars.iv4 = phi i32 [ 0, %0 ], [ %4, %1 ]*/
	if ((((cur_state == LEGUP_F_main_BB__1_9) & (memory_controller_waitrequest == 1'd0)) & (main_1_exitcond4_reg == 1'd0))) begin
		main_1_indvarsiv4_reg <= main_1_indvarsiv4;
		if (start == 1'b0 && ^(main_1_indvarsiv4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_indvarsiv4_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %scevgep5 = getelementptr [64 x i16]* %Real, i32 0, i32 %indvars.iv4*/
		main_1_scevgep5 = (`TAG_main_0_Real_a + (2 * main_1_indvarsiv4_reg));
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %scevgep5 = getelementptr [64 x i16]* %Real, i32 0, i32 %indvars.iv4*/
	if ((cur_state == LEGUP_F_main_BB__1_2)) begin
		main_1_scevgep5_reg <= main_1_scevgep5;
		if (start == 1'b0 && ^(main_1_scevgep5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_scevgep5_reg"); $finish; end
	end
end
always @(*) begin
	main_1_2 = main_1_2_stage0_reg;
end
always @(*) begin
	/* main: %1*/
	/*   %3 = trunc i32 %2 to i16*/
		main_1_3 = main_1_2[15:0];
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %3 = trunc i32 %2 to i16*/
	if ((cur_state == LEGUP_F_main_BB__1_3)) begin
		main_1_3_reg <= main_1_3;
		if (start == 1'b0 && ^(main_1_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_3_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %scevgep6 = getelementptr [64 x i16]* %Imag, i32 0, i32 %indvars.iv4*/
		main_1_scevgep6 = (`TAG_main_0_Imag_a + (2 * main_1_indvarsiv4_reg));
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %scevgep6 = getelementptr [64 x i16]* %Imag, i32 0, i32 %indvars.iv4*/
	if ((cur_state == LEGUP_F_main_BB__1_2)) begin
		main_1_scevgep6_reg <= main_1_scevgep6;
		if (start == 1'b0 && ^(main_1_scevgep6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_scevgep6_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %input_temp.0.input_temp.0.input_temp.0. = load volatile i16* %input_temp, align 2*/
		main_1_input_temp0input_temp0input_temp0 = memory_controller_out_a[15:0];
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %input_temp.0.input_temp.0.input_temp.0. = load volatile i16* %input_temp, align 2*/
	if ((cur_state == LEGUP_F_main_BB__1_5)) begin
		main_1_input_temp0input_temp0input_temp0_reg <= main_1_input_temp0input_temp0input_temp0;
		if (start == 1'b0 && ^(main_1_input_temp0input_temp0input_temp0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_input_temp0input_temp0input_temp0_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %input_temp.0.input_temp.0.input_temp.0.1 = load volatile i16* %input_temp, align 2*/
		main_1_input_temp0input_temp0input_temp01 = memory_controller_out_b[15:0];
end
always @(*) begin
	/* main: %1*/
	/*   %4 = add nuw nsw i32 %indvars.iv4, 1*/
		main_1_4 = (main_1_indvarsiv4_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %4 = add nuw nsw i32 %indvars.iv4, 1*/
	if ((cur_state == LEGUP_F_main_BB__1_2)) begin
		main_1_4_reg <= main_1_4;
		if (start == 1'b0 && ^(main_1_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_4_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %exitcond4 = icmp eq i32 %4, 64*/
		main_1_exitcond4 = (main_1_4 == 32'd64);
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %exitcond4 = icmp eq i32 %4, 64*/
	if ((cur_state == LEGUP_F_main_BB__1_2)) begin
		main_1_exitcond4_reg <= main_1_exitcond4;
		if (start == 1'b0 && ^(main_1_exitcond4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_exitcond4_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %6 = getelementptr inbounds [64 x i16]* %Real, i32 0, i32 0*/
if (reset) begin main_5_6 = 0; end
		main_5_6 = `TAG_main_0_Real_a;
end
always @(*) begin
	/* main: %5*/
	/*   %7 = getelementptr inbounds [64 x i16]* %Imag, i32 0, i32 0*/
if (reset) begin main_5_7 = 0; end
		main_5_7 = `TAG_main_0_Imag_a;
end
always @(*) begin
	/* main: %5*/
	/*   %8 = getelementptr inbounds [64 x i16]* %New_Real, i32 0, i32 0*/
if (reset) begin main_5_8 = 0; end
		main_5_8 = `TAG_main_0_New_Real_a;
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %8 = getelementptr inbounds [64 x i16]* %New_Real, i32 0, i32 0*/
	if ((cur_state == LEGUP_F_main_BB__5_10)) begin
		main_5_8_reg <= main_5_8;
		if (start == 1'b0 && ^(main_5_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_8_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %9 = getelementptr inbounds [64 x i16]* %New_Imag, i32 0, i32 0*/
if (reset) begin main_5_9 = 0; end
		main_5_9 = `TAG_main_0_New_Imag_a;
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %9 = getelementptr inbounds [64 x i16]* %New_Imag, i32 0, i32 0*/
	if ((cur_state == LEGUP_F_main_BB__5_10)) begin
		main_5_9_reg <= main_5_9;
		if (start == 1'b0 && ^(main_5_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_9_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %10 = load i16* %6, align 2, !tbaa !1*/
		main_5_10 = memory_controller_out_a[15:0];
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %10 = load i16* %6, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_12)) begin
		main_5_10_reg <= main_5_10;
		if (start == 1'b0 && ^(main_5_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_10_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %11 = load i16* %7, align 2, !tbaa !1*/
		main_5_11 = memory_controller_out_b[15:0];
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %11 = load i16* %7, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_12)) begin
		main_5_11_reg <= main_5_11;
		if (start == 1'b0 && ^(main_5_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_11_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %12 = getelementptr inbounds [64 x i16]* %Real, i32 0, i32 32*/
if (reset) begin main_5_12 = 0; end
		main_5_12 = (`TAG_main_0_Real_a + (2 * 32'd32));
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %12 = getelementptr inbounds [64 x i16]* %Real, i32 0, i32 32*/
	if ((cur_state == LEGUP_F_main_BB__5_10)) begin
		main_5_12_reg <= main_5_12;
		if (start == 1'b0 && ^(main_5_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_12_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %13 = load i16* %12, align 2, !tbaa !1*/
		main_5_13 = memory_controller_out_a[15:0];
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %13 = load i16* %12, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_13)) begin
		main_5_13_reg <= main_5_13;
		if (start == 1'b0 && ^(main_5_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_13_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %14 = getelementptr inbounds [64 x i16]* %New_Real, i32 0, i32 1*/
if (reset) begin main_5_14 = 0; end
		main_5_14 = (`TAG_main_0_New_Real_a + (2 * 32'd1));
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %14 = getelementptr inbounds [64 x i16]* %New_Real, i32 0, i32 1*/
	if ((cur_state == LEGUP_F_main_BB__5_10)) begin
		main_5_14_reg <= main_5_14;
		if (start == 1'b0 && ^(main_5_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_14_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %15 = getelementptr inbounds [64 x i16]* %Imag, i32 0, i32 32*/
if (reset) begin main_5_15 = 0; end
		main_5_15 = (`TAG_main_0_Imag_a + (2 * 32'd32));
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %15 = getelementptr inbounds [64 x i16]* %Imag, i32 0, i32 32*/
	if ((cur_state == LEGUP_F_main_BB__5_10)) begin
		main_5_15_reg <= main_5_15;
		if (start == 1'b0 && ^(main_5_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_15_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %16 = load i16* %15, align 2, !tbaa !1*/
		main_5_16 = memory_controller_out_b[15:0];
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %16 = load i16* %15, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_13)) begin
		main_5_16_reg <= main_5_16;
		if (start == 1'b0 && ^(main_5_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_16_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %17 = getelementptr inbounds [64 x i16]* %New_Imag, i32 0, i32 1*/
if (reset) begin main_5_17 = 0; end
		main_5_17 = (`TAG_main_0_New_Imag_a + (2 * 32'd1));
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %17 = getelementptr inbounds [64 x i16]* %New_Imag, i32 0, i32 1*/
	if ((cur_state == LEGUP_F_main_BB__5_10)) begin
		main_5_17_reg <= main_5_17;
		if (start == 1'b0 && ^(main_5_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_17_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %18 = getelementptr inbounds [64 x i16]* %Real, i32 0, i32 16*/
if (reset) begin main_5_18 = 0; end
		main_5_18 = (`TAG_main_0_Real_a + (2 * 32'd16));
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %18 = getelementptr inbounds [64 x i16]* %Real, i32 0, i32 16*/
	if ((cur_state == LEGUP_F_main_BB__5_10)) begin
		main_5_18_reg <= main_5_18;
		if (start == 1'b0 && ^(main_5_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_18_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %19 = load i16* %18, align 2, !tbaa !1*/
		main_5_19 = memory_controller_out_a[15:0];
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %19 = load i16* %18, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_14)) begin
		main_5_19_reg <= main_5_19;
		if (start == 1'b0 && ^(main_5_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_19_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %20 = getelementptr inbounds [64 x i16]* %New_Real, i32 0, i32 2*/
if (reset) begin main_5_20 = 0; end
		main_5_20 = (`TAG_main_0_New_Real_a + (2 * 32'd2));
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %20 = getelementptr inbounds [64 x i16]* %New_Real, i32 0, i32 2*/
	if ((cur_state == LEGUP_F_main_BB__5_10)) begin
		main_5_20_reg <= main_5_20;
		if (start == 1'b0 && ^(main_5_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_20_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %21 = getelementptr inbounds [64 x i16]* %Imag, i32 0, i32 16*/
if (reset) begin main_5_21 = 0; end
		main_5_21 = (`TAG_main_0_Imag_a + (2 * 32'd16));
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %21 = getelementptr inbounds [64 x i16]* %Imag, i32 0, i32 16*/
	if ((cur_state == LEGUP_F_main_BB__5_10)) begin
		main_5_21_reg <= main_5_21;
		if (start == 1'b0 && ^(main_5_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_21_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %22 = load i16* %21, align 2, !tbaa !1*/
		main_5_22 = memory_controller_out_b[15:0];
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %22 = load i16* %21, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_14)) begin
		main_5_22_reg <= main_5_22;
		if (start == 1'b0 && ^(main_5_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_22_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %23 = getelementptr inbounds [64 x i16]* %New_Imag, i32 0, i32 2*/
if (reset) begin main_5_23 = 0; end
		main_5_23 = (`TAG_main_0_New_Imag_a + (2 * 32'd2));
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %23 = getelementptr inbounds [64 x i16]* %New_Imag, i32 0, i32 2*/
	if ((cur_state == LEGUP_F_main_BB__5_10)) begin
		main_5_23_reg <= main_5_23;
		if (start == 1'b0 && ^(main_5_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_23_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %24 = getelementptr inbounds [64 x i16]* %Real, i32 0, i32 48*/
if (reset) begin main_5_24 = 0; end
		main_5_24 = (`TAG_main_0_Real_a + (2 * 32'd48));
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %24 = getelementptr inbounds [64 x i16]* %Real, i32 0, i32 48*/
	if ((cur_state == LEGUP_F_main_BB__5_10)) begin
		main_5_24_reg <= main_5_24;
		if (start == 1'b0 && ^(main_5_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_24_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %25 = load i16* %24, align 2, !tbaa !1*/
		main_5_25 = memory_controller_out_a[15:0];
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %25 = load i16* %24, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_15)) begin
		main_5_25_reg <= main_5_25;
		if (start == 1'b0 && ^(main_5_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_25_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %26 = getelementptr inbounds [64 x i16]* %New_Real, i32 0, i32 3*/
if (reset) begin main_5_26 = 0; end
		main_5_26 = (`TAG_main_0_New_Real_a + (2 * 32'd3));
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %26 = getelementptr inbounds [64 x i16]* %New_Real, i32 0, i32 3*/
	if ((cur_state == LEGUP_F_main_BB__5_10)) begin
		main_5_26_reg <= main_5_26;
		if (start == 1'b0 && ^(main_5_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_26_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %27 = getelementptr inbounds [64 x i16]* %Imag, i32 0, i32 48*/
if (reset) begin main_5_27 = 0; end
		main_5_27 = (`TAG_main_0_Imag_a + (2 * 32'd48));
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %27 = getelementptr inbounds [64 x i16]* %Imag, i32 0, i32 48*/
	if ((cur_state == LEGUP_F_main_BB__5_10)) begin
		main_5_27_reg <= main_5_27;
		if (start == 1'b0 && ^(main_5_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_27_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %28 = load i16* %27, align 2, !tbaa !1*/
		main_5_28 = memory_controller_out_b[15:0];
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %28 = load i16* %27, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_15)) begin
		main_5_28_reg <= main_5_28;
		if (start == 1'b0 && ^(main_5_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_28_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %29 = getelementptr inbounds [64 x i16]* %New_Imag, i32 0, i32 3*/
if (reset) begin main_5_29 = 0; end
		main_5_29 = (`TAG_main_0_New_Imag_a + (2 * 32'd3));
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %29 = getelementptr inbounds [64 x i16]* %New_Imag, i32 0, i32 3*/
	if ((cur_state == LEGUP_F_main_BB__5_10)) begin
		main_5_29_reg <= main_5_29;
		if (start == 1'b0 && ^(main_5_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_29_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %30 = getelementptr inbounds [64 x i16]* %Real, i32 0, i32 8*/
if (reset) begin main_5_30 = 0; end
		main_5_30 = (`TAG_main_0_Real_a + (2 * 32'd8));
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %30 = getelementptr inbounds [64 x i16]* %Real, i32 0, i32 8*/
	if ((cur_state == LEGUP_F_main_BB__5_10)) begin
		main_5_30_reg <= main_5_30;
		if (start == 1'b0 && ^(main_5_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_30_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %31 = load i16* %30, align 2, !tbaa !1*/
		main_5_31 = memory_controller_out_a[15:0];
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %31 = load i16* %30, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_16)) begin
		main_5_31_reg <= main_5_31;
		if (start == 1'b0 && ^(main_5_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_31_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %32 = getelementptr inbounds [64 x i16]* %New_Real, i32 0, i32 4*/
if (reset) begin main_5_32 = 0; end
		main_5_32 = (`TAG_main_0_New_Real_a + (2 * 32'd4));
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %32 = getelementptr inbounds [64 x i16]* %New_Real, i32 0, i32 4*/
	if ((cur_state == LEGUP_F_main_BB__5_10)) begin
		main_5_32_reg <= main_5_32;
		if (start == 1'b0 && ^(main_5_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_32_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %33 = getelementptr inbounds [64 x i16]* %Imag, i32 0, i32 8*/
if (reset) begin main_5_33 = 0; end
		main_5_33 = (`TAG_main_0_Imag_a + (2 * 32'd8));
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %33 = getelementptr inbounds [64 x i16]* %Imag, i32 0, i32 8*/
	if ((cur_state == LEGUP_F_main_BB__5_10)) begin
		main_5_33_reg <= main_5_33;
		if (start == 1'b0 && ^(main_5_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_33_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %34 = load i16* %33, align 2, !tbaa !1*/
		main_5_34 = memory_controller_out_b[15:0];
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %34 = load i16* %33, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_16)) begin
		main_5_34_reg <= main_5_34;
		if (start == 1'b0 && ^(main_5_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_34_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %35 = getelementptr inbounds [64 x i16]* %New_Imag, i32 0, i32 4*/
if (reset) begin main_5_35 = 0; end
		main_5_35 = (`TAG_main_0_New_Imag_a + (2 * 32'd4));
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %35 = getelementptr inbounds [64 x i16]* %New_Imag, i32 0, i32 4*/
	if ((cur_state == LEGUP_F_main_BB__5_10)) begin
		main_5_35_reg <= main_5_35;
		if (start == 1'b0 && ^(main_5_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_35_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %36 = getelementptr inbounds [64 x i16]* %Real, i32 0, i32 40*/
if (reset) begin main_5_36 = 0; end
		main_5_36 = (`TAG_main_0_Real_a + (2 * 32'd40));
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %36 = getelementptr inbounds [64 x i16]* %Real, i32 0, i32 40*/
	if ((cur_state == LEGUP_F_main_BB__5_10)) begin
		main_5_36_reg <= main_5_36;
		if (start == 1'b0 && ^(main_5_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_36_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %37 = load i16* %36, align 2, !tbaa !1*/
		main_5_37 = memory_controller_out_a[15:0];
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %37 = load i16* %36, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_17)) begin
		main_5_37_reg <= main_5_37;
		if (start == 1'b0 && ^(main_5_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_37_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %38 = getelementptr inbounds [64 x i16]* %New_Real, i32 0, i32 5*/
if (reset) begin main_5_38 = 0; end
		main_5_38 = (`TAG_main_0_New_Real_a + (2 * 32'd5));
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %38 = getelementptr inbounds [64 x i16]* %New_Real, i32 0, i32 5*/
	if ((cur_state == LEGUP_F_main_BB__5_10)) begin
		main_5_38_reg <= main_5_38;
		if (start == 1'b0 && ^(main_5_38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_38_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %39 = getelementptr inbounds [64 x i16]* %Imag, i32 0, i32 40*/
if (reset) begin main_5_39 = 0; end
		main_5_39 = (`TAG_main_0_Imag_a + (2 * 32'd40));
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %39 = getelementptr inbounds [64 x i16]* %Imag, i32 0, i32 40*/
	if ((cur_state == LEGUP_F_main_BB__5_10)) begin
		main_5_39_reg <= main_5_39;
		if (start == 1'b0 && ^(main_5_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_39_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %40 = load i16* %39, align 2, !tbaa !1*/
		main_5_40 = memory_controller_out_b[15:0];
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %40 = load i16* %39, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_17)) begin
		main_5_40_reg <= main_5_40;
		if (start == 1'b0 && ^(main_5_40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_40_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %41 = getelementptr inbounds [64 x i16]* %New_Imag, i32 0, i32 5*/
if (reset) begin main_5_41 = 0; end
		main_5_41 = (`TAG_main_0_New_Imag_a + (2 * 32'd5));
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %41 = getelementptr inbounds [64 x i16]* %New_Imag, i32 0, i32 5*/
	if ((cur_state == LEGUP_F_main_BB__5_10)) begin
		main_5_41_reg <= main_5_41;
		if (start == 1'b0 && ^(main_5_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_41_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %42 = getelementptr inbounds [64 x i16]* %Real, i32 0, i32 24*/
if (reset) begin main_5_42 = 0; end
		main_5_42 = (`TAG_main_0_Real_a + (2 * 32'd24));
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %42 = getelementptr inbounds [64 x i16]* %Real, i32 0, i32 24*/
	if ((cur_state == LEGUP_F_main_BB__5_10)) begin
		main_5_42_reg <= main_5_42;
		if (start == 1'b0 && ^(main_5_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_42_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %43 = load i16* %42, align 2, !tbaa !1*/
		main_5_43 = memory_controller_out_a[15:0];
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %43 = load i16* %42, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_18)) begin
		main_5_43_reg <= main_5_43;
		if (start == 1'b0 && ^(main_5_43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_43_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %44 = getelementptr inbounds [64 x i16]* %New_Real, i32 0, i32 6*/
if (reset) begin main_5_44 = 0; end
		main_5_44 = (`TAG_main_0_New_Real_a + (2 * 32'd6));
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %44 = getelementptr inbounds [64 x i16]* %New_Real, i32 0, i32 6*/
	if ((cur_state == LEGUP_F_main_BB__5_10)) begin
		main_5_44_reg <= main_5_44;
		if (start == 1'b0 && ^(main_5_44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_44_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %45 = getelementptr inbounds [64 x i16]* %Imag, i32 0, i32 24*/
if (reset) begin main_5_45 = 0; end
		main_5_45 = (`TAG_main_0_Imag_a + (2 * 32'd24));
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %45 = getelementptr inbounds [64 x i16]* %Imag, i32 0, i32 24*/
	if ((cur_state == LEGUP_F_main_BB__5_10)) begin
		main_5_45_reg <= main_5_45;
		if (start == 1'b0 && ^(main_5_45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_45_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %46 = load i16* %45, align 2, !tbaa !1*/
		main_5_46 = memory_controller_out_b[15:0];
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %46 = load i16* %45, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_18)) begin
		main_5_46_reg <= main_5_46;
		if (start == 1'b0 && ^(main_5_46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_46_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %47 = getelementptr inbounds [64 x i16]* %New_Imag, i32 0, i32 6*/
if (reset) begin main_5_47 = 0; end
		main_5_47 = (`TAG_main_0_New_Imag_a + (2 * 32'd6));
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %47 = getelementptr inbounds [64 x i16]* %New_Imag, i32 0, i32 6*/
	if ((cur_state == LEGUP_F_main_BB__5_10)) begin
		main_5_47_reg <= main_5_47;
		if (start == 1'b0 && ^(main_5_47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_47_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %48 = getelementptr inbounds [64 x i16]* %Real, i32 0, i32 56*/
if (reset) begin main_5_48 = 0; end
		main_5_48 = (`TAG_main_0_Real_a + (2 * 32'd56));
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %48 = getelementptr inbounds [64 x i16]* %Real, i32 0, i32 56*/
	if ((cur_state == LEGUP_F_main_BB__5_10)) begin
		main_5_48_reg <= main_5_48;
		if (start == 1'b0 && ^(main_5_48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_48_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %49 = load i16* %48, align 2, !tbaa !1*/
		main_5_49 = memory_controller_out_a[15:0];
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %49 = load i16* %48, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_19)) begin
		main_5_49_reg <= main_5_49;
		if (start == 1'b0 && ^(main_5_49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_49_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %50 = getelementptr inbounds [64 x i16]* %New_Real, i32 0, i32 7*/
if (reset) begin main_5_50 = 0; end
		main_5_50 = (`TAG_main_0_New_Real_a + (2 * 32'd7));
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %50 = getelementptr inbounds [64 x i16]* %New_Real, i32 0, i32 7*/
	if ((cur_state == LEGUP_F_main_BB__5_10)) begin
		main_5_50_reg <= main_5_50;
		if (start == 1'b0 && ^(main_5_50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_50_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %51 = getelementptr inbounds [64 x i16]* %Imag, i32 0, i32 56*/
if (reset) begin main_5_51 = 0; end
		main_5_51 = (`TAG_main_0_Imag_a + (2 * 32'd56));
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %51 = getelementptr inbounds [64 x i16]* %Imag, i32 0, i32 56*/
	if ((cur_state == LEGUP_F_main_BB__5_10)) begin
		main_5_51_reg <= main_5_51;
		if (start == 1'b0 && ^(main_5_51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_51_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %52 = load i16* %51, align 2, !tbaa !1*/
		main_5_52 = memory_controller_out_b[15:0];
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %52 = load i16* %51, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_19)) begin
		main_5_52_reg <= main_5_52;
		if (start == 1'b0 && ^(main_5_52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_52_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %53 = getelementptr inbounds [64 x i16]* %New_Imag, i32 0, i32 7*/
if (reset) begin main_5_53 = 0; end
		main_5_53 = (`TAG_main_0_New_Imag_a + (2 * 32'd7));
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %53 = getelementptr inbounds [64 x i16]* %New_Imag, i32 0, i32 7*/
	if ((cur_state == LEGUP_F_main_BB__5_10)) begin
		main_5_53_reg <= main_5_53;
		if (start == 1'b0 && ^(main_5_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_53_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %54 = getelementptr inbounds [64 x i16]* %Real, i32 0, i32 4*/
if (reset) begin main_5_54 = 0; end
		main_5_54 = (`TAG_main_0_Real_a + (2 * 32'd4));
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %54 = getelementptr inbounds [64 x i16]* %Real, i32 0, i32 4*/
	if ((cur_state == LEGUP_F_main_BB__5_10)) begin
		main_5_54_reg <= main_5_54;
		if (start == 1'b0 && ^(main_5_54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_54_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %55 = load i16* %54, align 2, !tbaa !1*/
		main_5_55 = memory_controller_out_a[15:0];
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %55 = load i16* %54, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_20)) begin
		main_5_55_reg <= main_5_55;
		if (start == 1'b0 && ^(main_5_55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_55_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %56 = getelementptr inbounds [64 x i16]* %New_Real, i32 0, i32 8*/
if (reset) begin main_5_56 = 0; end
		main_5_56 = (`TAG_main_0_New_Real_a + (2 * 32'd8));
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %56 = getelementptr inbounds [64 x i16]* %New_Real, i32 0, i32 8*/
	if ((cur_state == LEGUP_F_main_BB__5_10)) begin
		main_5_56_reg <= main_5_56;
		if (start == 1'b0 && ^(main_5_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_56_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %57 = getelementptr inbounds [64 x i16]* %Imag, i32 0, i32 4*/
if (reset) begin main_5_57 = 0; end
		main_5_57 = (`TAG_main_0_Imag_a + (2 * 32'd4));
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %57 = getelementptr inbounds [64 x i16]* %Imag, i32 0, i32 4*/
	if ((cur_state == LEGUP_F_main_BB__5_10)) begin
		main_5_57_reg <= main_5_57;
		if (start == 1'b0 && ^(main_5_57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_57_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %58 = load i16* %57, align 2, !tbaa !1*/
		main_5_58 = memory_controller_out_b[15:0];
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %58 = load i16* %57, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_20)) begin
		main_5_58_reg <= main_5_58;
		if (start == 1'b0 && ^(main_5_58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_58_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %59 = getelementptr inbounds [64 x i16]* %New_Imag, i32 0, i32 8*/
if (reset) begin main_5_59 = 0; end
		main_5_59 = (`TAG_main_0_New_Imag_a + (2 * 32'd8));
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %59 = getelementptr inbounds [64 x i16]* %New_Imag, i32 0, i32 8*/
	if ((cur_state == LEGUP_F_main_BB__5_10)) begin
		main_5_59_reg <= main_5_59;
		if (start == 1'b0 && ^(main_5_59) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_59_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %60 = getelementptr inbounds [64 x i16]* %Real, i32 0, i32 36*/
if (reset) begin main_5_60 = 0; end
		main_5_60 = (`TAG_main_0_Real_a + (2 * 32'd36));
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %60 = getelementptr inbounds [64 x i16]* %Real, i32 0, i32 36*/
	if ((cur_state == LEGUP_F_main_BB__5_10)) begin
		main_5_60_reg <= main_5_60;
		if (start == 1'b0 && ^(main_5_60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_60_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %61 = load i16* %60, align 2, !tbaa !1*/
		main_5_61 = memory_controller_out_a[15:0];
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %61 = load i16* %60, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_21)) begin
		main_5_61_reg <= main_5_61;
		if (start == 1'b0 && ^(main_5_61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_61_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %62 = getelementptr inbounds [64 x i16]* %New_Real, i32 0, i32 9*/
if (reset) begin main_5_62 = 0; end
		main_5_62 = (`TAG_main_0_New_Real_a + (2 * 32'd9));
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %62 = getelementptr inbounds [64 x i16]* %New_Real, i32 0, i32 9*/
	if ((cur_state == LEGUP_F_main_BB__5_10)) begin
		main_5_62_reg <= main_5_62;
		if (start == 1'b0 && ^(main_5_62) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_62_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %63 = getelementptr inbounds [64 x i16]* %Imag, i32 0, i32 36*/
if (reset) begin main_5_63 = 0; end
		main_5_63 = (`TAG_main_0_Imag_a + (2 * 32'd36));
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %63 = getelementptr inbounds [64 x i16]* %Imag, i32 0, i32 36*/
	if ((cur_state == LEGUP_F_main_BB__5_10)) begin
		main_5_63_reg <= main_5_63;
		if (start == 1'b0 && ^(main_5_63) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_63_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %64 = load i16* %63, align 2, !tbaa !1*/
		main_5_64 = memory_controller_out_b[15:0];
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %64 = load i16* %63, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_21)) begin
		main_5_64_reg <= main_5_64;
		if (start == 1'b0 && ^(main_5_64) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_64_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %65 = getelementptr inbounds [64 x i16]* %New_Imag, i32 0, i32 9*/
if (reset) begin main_5_65 = 0; end
		main_5_65 = (`TAG_main_0_New_Imag_a + (2 * 32'd9));
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %65 = getelementptr inbounds [64 x i16]* %New_Imag, i32 0, i32 9*/
	if ((cur_state == LEGUP_F_main_BB__5_10)) begin
		main_5_65_reg <= main_5_65;
		if (start == 1'b0 && ^(main_5_65) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_65_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %66 = getelementptr inbounds [64 x i16]* %Real, i32 0, i32 20*/
if (reset) begin main_5_66 = 0; end
		main_5_66 = (`TAG_main_0_Real_a + (2 * 32'd20));
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %66 = getelementptr inbounds [64 x i16]* %Real, i32 0, i32 20*/
	if ((cur_state == LEGUP_F_main_BB__5_10)) begin
		main_5_66_reg <= main_5_66;
		if (start == 1'b0 && ^(main_5_66) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_66_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %67 = load i16* %66, align 2, !tbaa !1*/
		main_5_67 = memory_controller_out_a[15:0];
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %67 = load i16* %66, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_22)) begin
		main_5_67_reg <= main_5_67;
		if (start == 1'b0 && ^(main_5_67) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_67_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %68 = getelementptr inbounds [64 x i16]* %New_Real, i32 0, i32 10*/
if (reset) begin main_5_68 = 0; end
		main_5_68 = (`TAG_main_0_New_Real_a + (2 * 32'd10));
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %68 = getelementptr inbounds [64 x i16]* %New_Real, i32 0, i32 10*/
	if ((cur_state == LEGUP_F_main_BB__5_10)) begin
		main_5_68_reg <= main_5_68;
		if (start == 1'b0 && ^(main_5_68) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_68_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %69 = getelementptr inbounds [64 x i16]* %Imag, i32 0, i32 20*/
if (reset) begin main_5_69 = 0; end
		main_5_69 = (`TAG_main_0_Imag_a + (2 * 32'd20));
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %69 = getelementptr inbounds [64 x i16]* %Imag, i32 0, i32 20*/
	if ((cur_state == LEGUP_F_main_BB__5_10)) begin
		main_5_69_reg <= main_5_69;
		if (start == 1'b0 && ^(main_5_69) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_69_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %70 = load i16* %69, align 2, !tbaa !1*/
		main_5_70 = memory_controller_out_b[15:0];
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %70 = load i16* %69, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_22)) begin
		main_5_70_reg <= main_5_70;
		if (start == 1'b0 && ^(main_5_70) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_70_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %71 = getelementptr inbounds [64 x i16]* %New_Imag, i32 0, i32 10*/
if (reset) begin main_5_71 = 0; end
		main_5_71 = (`TAG_main_0_New_Imag_a + (2 * 32'd10));
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %71 = getelementptr inbounds [64 x i16]* %New_Imag, i32 0, i32 10*/
	if ((cur_state == LEGUP_F_main_BB__5_10)) begin
		main_5_71_reg <= main_5_71;
		if (start == 1'b0 && ^(main_5_71) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_71_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %72 = getelementptr inbounds [64 x i16]* %Real, i32 0, i32 52*/
if (reset) begin main_5_72 = 0; end
		main_5_72 = (`TAG_main_0_Real_a + (2 * 32'd52));
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %72 = getelementptr inbounds [64 x i16]* %Real, i32 0, i32 52*/
	if ((cur_state == LEGUP_F_main_BB__5_10)) begin
		main_5_72_reg <= main_5_72;
		if (start == 1'b0 && ^(main_5_72) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_72_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %73 = load i16* %72, align 2, !tbaa !1*/
		main_5_73 = memory_controller_out_a[15:0];
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %73 = load i16* %72, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_23)) begin
		main_5_73_reg <= main_5_73;
		if (start == 1'b0 && ^(main_5_73) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_73_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %74 = getelementptr inbounds [64 x i16]* %New_Real, i32 0, i32 11*/
if (reset) begin main_5_74 = 0; end
		main_5_74 = (`TAG_main_0_New_Real_a + (2 * 32'd11));
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %74 = getelementptr inbounds [64 x i16]* %New_Real, i32 0, i32 11*/
	if ((cur_state == LEGUP_F_main_BB__5_10)) begin
		main_5_74_reg <= main_5_74;
		if (start == 1'b0 && ^(main_5_74) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_74_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %75 = getelementptr inbounds [64 x i16]* %Imag, i32 0, i32 52*/
if (reset) begin main_5_75 = 0; end
		main_5_75 = (`TAG_main_0_Imag_a + (2 * 32'd52));
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %75 = getelementptr inbounds [64 x i16]* %Imag, i32 0, i32 52*/
	if ((cur_state == LEGUP_F_main_BB__5_10)) begin
		main_5_75_reg <= main_5_75;
		if (start == 1'b0 && ^(main_5_75) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_75_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %76 = load i16* %75, align 2, !tbaa !1*/
		main_5_76 = memory_controller_out_b[15:0];
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %76 = load i16* %75, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_23)) begin
		main_5_76_reg <= main_5_76;
		if (start == 1'b0 && ^(main_5_76) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_76_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %77 = getelementptr inbounds [64 x i16]* %New_Imag, i32 0, i32 11*/
if (reset) begin main_5_77 = 0; end
		main_5_77 = (`TAG_main_0_New_Imag_a + (2 * 32'd11));
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %77 = getelementptr inbounds [64 x i16]* %New_Imag, i32 0, i32 11*/
	if ((cur_state == LEGUP_F_main_BB__5_10)) begin
		main_5_77_reg <= main_5_77;
		if (start == 1'b0 && ^(main_5_77) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_77_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %78 = getelementptr inbounds [64 x i16]* %Real, i32 0, i32 12*/
if (reset) begin main_5_78 = 0; end
		main_5_78 = (`TAG_main_0_Real_a + (2 * 32'd12));
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %78 = getelementptr inbounds [64 x i16]* %Real, i32 0, i32 12*/
	if ((cur_state == LEGUP_F_main_BB__5_10)) begin
		main_5_78_reg <= main_5_78;
		if (start == 1'b0 && ^(main_5_78) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_78_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %79 = load i16* %78, align 2, !tbaa !1*/
		main_5_79 = memory_controller_out_a[15:0];
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %79 = load i16* %78, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_24)) begin
		main_5_79_reg <= main_5_79;
		if (start == 1'b0 && ^(main_5_79) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_79_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %80 = getelementptr inbounds [64 x i16]* %New_Real, i32 0, i32 12*/
if (reset) begin main_5_80 = 0; end
		main_5_80 = (`TAG_main_0_New_Real_a + (2 * 32'd12));
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %80 = getelementptr inbounds [64 x i16]* %New_Real, i32 0, i32 12*/
	if ((cur_state == LEGUP_F_main_BB__5_10)) begin
		main_5_80_reg <= main_5_80;
		if (start == 1'b0 && ^(main_5_80) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_80_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %81 = getelementptr inbounds [64 x i16]* %Imag, i32 0, i32 12*/
if (reset) begin main_5_81 = 0; end
		main_5_81 = (`TAG_main_0_Imag_a + (2 * 32'd12));
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %81 = getelementptr inbounds [64 x i16]* %Imag, i32 0, i32 12*/
	if ((cur_state == LEGUP_F_main_BB__5_10)) begin
		main_5_81_reg <= main_5_81;
		if (start == 1'b0 && ^(main_5_81) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_81_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %82 = load i16* %81, align 2, !tbaa !1*/
		main_5_82 = memory_controller_out_b[15:0];
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %82 = load i16* %81, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_24)) begin
		main_5_82_reg <= main_5_82;
		if (start == 1'b0 && ^(main_5_82) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_82_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %83 = getelementptr inbounds [64 x i16]* %New_Imag, i32 0, i32 12*/
if (reset) begin main_5_83 = 0; end
		main_5_83 = (`TAG_main_0_New_Imag_a + (2 * 32'd12));
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %83 = getelementptr inbounds [64 x i16]* %New_Imag, i32 0, i32 12*/
	if ((cur_state == LEGUP_F_main_BB__5_10)) begin
		main_5_83_reg <= main_5_83;
		if (start == 1'b0 && ^(main_5_83) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_83_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %84 = getelementptr inbounds [64 x i16]* %Real, i32 0, i32 44*/
if (reset) begin main_5_84 = 0; end
		main_5_84 = (`TAG_main_0_Real_a + (2 * 32'd44));
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %84 = getelementptr inbounds [64 x i16]* %Real, i32 0, i32 44*/
	if ((cur_state == LEGUP_F_main_BB__5_10)) begin
		main_5_84_reg <= main_5_84;
		if (start == 1'b0 && ^(main_5_84) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_84_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %85 = load i16* %84, align 2, !tbaa !1*/
		main_5_85 = memory_controller_out_a[15:0];
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %85 = load i16* %84, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_25)) begin
		main_5_85_reg <= main_5_85;
		if (start == 1'b0 && ^(main_5_85) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_85_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %86 = getelementptr inbounds [64 x i16]* %New_Real, i32 0, i32 13*/
if (reset) begin main_5_86 = 0; end
		main_5_86 = (`TAG_main_0_New_Real_a + (2 * 32'd13));
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %86 = getelementptr inbounds [64 x i16]* %New_Real, i32 0, i32 13*/
	if ((cur_state == LEGUP_F_main_BB__5_10)) begin
		main_5_86_reg <= main_5_86;
		if (start == 1'b0 && ^(main_5_86) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_86_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %87 = getelementptr inbounds [64 x i16]* %Imag, i32 0, i32 44*/
if (reset) begin main_5_87 = 0; end
		main_5_87 = (`TAG_main_0_Imag_a + (2 * 32'd44));
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %87 = getelementptr inbounds [64 x i16]* %Imag, i32 0, i32 44*/
	if ((cur_state == LEGUP_F_main_BB__5_10)) begin
		main_5_87_reg <= main_5_87;
		if (start == 1'b0 && ^(main_5_87) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_87_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %88 = load i16* %87, align 2, !tbaa !1*/
		main_5_88 = memory_controller_out_b[15:0];
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %88 = load i16* %87, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_25)) begin
		main_5_88_reg <= main_5_88;
		if (start == 1'b0 && ^(main_5_88) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_88_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %89 = getelementptr inbounds [64 x i16]* %New_Imag, i32 0, i32 13*/
if (reset) begin main_5_89 = 0; end
		main_5_89 = (`TAG_main_0_New_Imag_a + (2 * 32'd13));
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %89 = getelementptr inbounds [64 x i16]* %New_Imag, i32 0, i32 13*/
	if ((cur_state == LEGUP_F_main_BB__5_10)) begin
		main_5_89_reg <= main_5_89;
		if (start == 1'b0 && ^(main_5_89) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_89_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %90 = getelementptr inbounds [64 x i16]* %Real, i32 0, i32 28*/
if (reset) begin main_5_90 = 0; end
		main_5_90 = (`TAG_main_0_Real_a + (2 * 32'd28));
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %90 = getelementptr inbounds [64 x i16]* %Real, i32 0, i32 28*/
	if ((cur_state == LEGUP_F_main_BB__5_10)) begin
		main_5_90_reg <= main_5_90;
		if (start == 1'b0 && ^(main_5_90) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_90_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %91 = load i16* %90, align 2, !tbaa !1*/
		main_5_91 = memory_controller_out_a[15:0];
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %91 = load i16* %90, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_26)) begin
		main_5_91_reg <= main_5_91;
		if (start == 1'b0 && ^(main_5_91) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_91_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %92 = getelementptr inbounds [64 x i16]* %New_Real, i32 0, i32 14*/
if (reset) begin main_5_92 = 0; end
		main_5_92 = (`TAG_main_0_New_Real_a + (2 * 32'd14));
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %92 = getelementptr inbounds [64 x i16]* %New_Real, i32 0, i32 14*/
	if ((cur_state == LEGUP_F_main_BB__5_10)) begin
		main_5_92_reg <= main_5_92;
		if (start == 1'b0 && ^(main_5_92) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_92_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %93 = getelementptr inbounds [64 x i16]* %Imag, i32 0, i32 28*/
if (reset) begin main_5_93 = 0; end
		main_5_93 = (`TAG_main_0_Imag_a + (2 * 32'd28));
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %93 = getelementptr inbounds [64 x i16]* %Imag, i32 0, i32 28*/
	if ((cur_state == LEGUP_F_main_BB__5_10)) begin
		main_5_93_reg <= main_5_93;
		if (start == 1'b0 && ^(main_5_93) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_93_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %94 = load i16* %93, align 2, !tbaa !1*/
		main_5_94 = memory_controller_out_b[15:0];
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %94 = load i16* %93, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_26)) begin
		main_5_94_reg <= main_5_94;
		if (start == 1'b0 && ^(main_5_94) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_94_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %95 = getelementptr inbounds [64 x i16]* %New_Imag, i32 0, i32 14*/
if (reset) begin main_5_95 = 0; end
		main_5_95 = (`TAG_main_0_New_Imag_a + (2 * 32'd14));
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %95 = getelementptr inbounds [64 x i16]* %New_Imag, i32 0, i32 14*/
	if ((cur_state == LEGUP_F_main_BB__5_10)) begin
		main_5_95_reg <= main_5_95;
		if (start == 1'b0 && ^(main_5_95) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_95_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %96 = getelementptr inbounds [64 x i16]* %Real, i32 0, i32 60*/
if (reset) begin main_5_96 = 0; end
		main_5_96 = (`TAG_main_0_Real_a + (2 * 32'd60));
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %96 = getelementptr inbounds [64 x i16]* %Real, i32 0, i32 60*/
	if ((cur_state == LEGUP_F_main_BB__5_10)) begin
		main_5_96_reg <= main_5_96;
		if (start == 1'b0 && ^(main_5_96) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_96_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %97 = load i16* %96, align 2, !tbaa !1*/
		main_5_97 = memory_controller_out_a[15:0];
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %97 = load i16* %96, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_27)) begin
		main_5_97_reg <= main_5_97;
		if (start == 1'b0 && ^(main_5_97) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_97_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %98 = getelementptr inbounds [64 x i16]* %New_Real, i32 0, i32 15*/
if (reset) begin main_5_98 = 0; end
		main_5_98 = (`TAG_main_0_New_Real_a + (2 * 32'd15));
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %98 = getelementptr inbounds [64 x i16]* %New_Real, i32 0, i32 15*/
	if ((cur_state == LEGUP_F_main_BB__5_10)) begin
		main_5_98_reg <= main_5_98;
		if (start == 1'b0 && ^(main_5_98) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_98_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %99 = getelementptr inbounds [64 x i16]* %Imag, i32 0, i32 60*/
if (reset) begin main_5_99 = 0; end
		main_5_99 = (`TAG_main_0_Imag_a + (2 * 32'd60));
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %99 = getelementptr inbounds [64 x i16]* %Imag, i32 0, i32 60*/
	if ((cur_state == LEGUP_F_main_BB__5_10)) begin
		main_5_99_reg <= main_5_99;
		if (start == 1'b0 && ^(main_5_99) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_99_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %100 = load i16* %99, align 2, !tbaa !1*/
		main_5_100 = memory_controller_out_b[15:0];
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %100 = load i16* %99, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_27)) begin
		main_5_100_reg <= main_5_100;
		if (start == 1'b0 && ^(main_5_100) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_100_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %101 = getelementptr inbounds [64 x i16]* %New_Imag, i32 0, i32 15*/
if (reset) begin main_5_101 = 0; end
		main_5_101 = (`TAG_main_0_New_Imag_a + (2 * 32'd15));
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %101 = getelementptr inbounds [64 x i16]* %New_Imag, i32 0, i32 15*/
	if ((cur_state == LEGUP_F_main_BB__5_10)) begin
		main_5_101_reg <= main_5_101;
		if (start == 1'b0 && ^(main_5_101) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_101_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %102 = getelementptr inbounds [64 x i16]* %Real, i32 0, i32 2*/
if (reset) begin main_5_102 = 0; end
		main_5_102 = (`TAG_main_0_Real_a + (2 * 32'd2));
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %102 = getelementptr inbounds [64 x i16]* %Real, i32 0, i32 2*/
	if ((cur_state == LEGUP_F_main_BB__5_10)) begin
		main_5_102_reg <= main_5_102;
		if (start == 1'b0 && ^(main_5_102) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_102_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %103 = load i16* %102, align 2, !tbaa !1*/
		main_5_103 = memory_controller_out_a[15:0];
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %103 = load i16* %102, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_28)) begin
		main_5_103_reg <= main_5_103;
		if (start == 1'b0 && ^(main_5_103) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_103_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %104 = getelementptr inbounds [64 x i16]* %New_Real, i32 0, i32 16*/
if (reset) begin main_5_104 = 0; end
		main_5_104 = (`TAG_main_0_New_Real_a + (2 * 32'd16));
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %104 = getelementptr inbounds [64 x i16]* %New_Real, i32 0, i32 16*/
	if ((cur_state == LEGUP_F_main_BB__5_10)) begin
		main_5_104_reg <= main_5_104;
		if (start == 1'b0 && ^(main_5_104) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_104_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %105 = getelementptr inbounds [64 x i16]* %Imag, i32 0, i32 2*/
if (reset) begin main_5_105 = 0; end
		main_5_105 = (`TAG_main_0_Imag_a + (2 * 32'd2));
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %105 = getelementptr inbounds [64 x i16]* %Imag, i32 0, i32 2*/
	if ((cur_state == LEGUP_F_main_BB__5_10)) begin
		main_5_105_reg <= main_5_105;
		if (start == 1'b0 && ^(main_5_105) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_105_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %106 = load i16* %105, align 2, !tbaa !1*/
		main_5_106 = memory_controller_out_b[15:0];
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %106 = load i16* %105, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_28)) begin
		main_5_106_reg <= main_5_106;
		if (start == 1'b0 && ^(main_5_106) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_106_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %107 = getelementptr inbounds [64 x i16]* %New_Imag, i32 0, i32 16*/
if (reset) begin main_5_107 = 0; end
		main_5_107 = (`TAG_main_0_New_Imag_a + (2 * 32'd16));
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %107 = getelementptr inbounds [64 x i16]* %New_Imag, i32 0, i32 16*/
	if ((cur_state == LEGUP_F_main_BB__5_10)) begin
		main_5_107_reg <= main_5_107;
		if (start == 1'b0 && ^(main_5_107) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_107_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %108 = getelementptr inbounds [64 x i16]* %Real, i32 0, i32 34*/
if (reset) begin main_5_108 = 0; end
		main_5_108 = (`TAG_main_0_Real_a + (2 * 32'd34));
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %108 = getelementptr inbounds [64 x i16]* %Real, i32 0, i32 34*/
	if ((cur_state == LEGUP_F_main_BB__5_10)) begin
		main_5_108_reg <= main_5_108;
		if (start == 1'b0 && ^(main_5_108) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_108_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %109 = load i16* %108, align 2, !tbaa !1*/
		main_5_109 = memory_controller_out_a[15:0];
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %109 = load i16* %108, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_29)) begin
		main_5_109_reg <= main_5_109;
		if (start == 1'b0 && ^(main_5_109) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_109_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %110 = getelementptr inbounds [64 x i16]* %New_Real, i32 0, i32 17*/
if (reset) begin main_5_110 = 0; end
		main_5_110 = (`TAG_main_0_New_Real_a + (2 * 32'd17));
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %110 = getelementptr inbounds [64 x i16]* %New_Real, i32 0, i32 17*/
	if ((cur_state == LEGUP_F_main_BB__5_10)) begin
		main_5_110_reg <= main_5_110;
		if (start == 1'b0 && ^(main_5_110) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_110_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %111 = getelementptr inbounds [64 x i16]* %Imag, i32 0, i32 34*/
if (reset) begin main_5_111 = 0; end
		main_5_111 = (`TAG_main_0_Imag_a + (2 * 32'd34));
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %111 = getelementptr inbounds [64 x i16]* %Imag, i32 0, i32 34*/
	if ((cur_state == LEGUP_F_main_BB__5_10)) begin
		main_5_111_reg <= main_5_111;
		if (start == 1'b0 && ^(main_5_111) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_111_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %112 = load i16* %111, align 2, !tbaa !1*/
		main_5_112 = memory_controller_out_b[15:0];
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %112 = load i16* %111, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_29)) begin
		main_5_112_reg <= main_5_112;
		if (start == 1'b0 && ^(main_5_112) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_112_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %113 = getelementptr inbounds [64 x i16]* %New_Imag, i32 0, i32 17*/
if (reset) begin main_5_113 = 0; end
		main_5_113 = (`TAG_main_0_New_Imag_a + (2 * 32'd17));
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %113 = getelementptr inbounds [64 x i16]* %New_Imag, i32 0, i32 17*/
	if ((cur_state == LEGUP_F_main_BB__5_10)) begin
		main_5_113_reg <= main_5_113;
		if (start == 1'b0 && ^(main_5_113) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_113_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %114 = getelementptr inbounds [64 x i16]* %Real, i32 0, i32 18*/
if (reset) begin main_5_114 = 0; end
		main_5_114 = (`TAG_main_0_Real_a + (2 * 32'd18));
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %114 = getelementptr inbounds [64 x i16]* %Real, i32 0, i32 18*/
	if ((cur_state == LEGUP_F_main_BB__5_10)) begin
		main_5_114_reg <= main_5_114;
		if (start == 1'b0 && ^(main_5_114) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_114_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %115 = load i16* %114, align 2, !tbaa !1*/
		main_5_115 = memory_controller_out_a[15:0];
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %115 = load i16* %114, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_30)) begin
		main_5_115_reg <= main_5_115;
		if (start == 1'b0 && ^(main_5_115) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_115_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %116 = getelementptr inbounds [64 x i16]* %New_Real, i32 0, i32 18*/
if (reset) begin main_5_116 = 0; end
		main_5_116 = (`TAG_main_0_New_Real_a + (2 * 32'd18));
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %116 = getelementptr inbounds [64 x i16]* %New_Real, i32 0, i32 18*/
	if ((cur_state == LEGUP_F_main_BB__5_10)) begin
		main_5_116_reg <= main_5_116;
		if (start == 1'b0 && ^(main_5_116) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_116_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %117 = getelementptr inbounds [64 x i16]* %Imag, i32 0, i32 18*/
if (reset) begin main_5_117 = 0; end
		main_5_117 = (`TAG_main_0_Imag_a + (2 * 32'd18));
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %117 = getelementptr inbounds [64 x i16]* %Imag, i32 0, i32 18*/
	if ((cur_state == LEGUP_F_main_BB__5_10)) begin
		main_5_117_reg <= main_5_117;
		if (start == 1'b0 && ^(main_5_117) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_117_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %118 = load i16* %117, align 2, !tbaa !1*/
		main_5_118 = memory_controller_out_b[15:0];
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %118 = load i16* %117, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_30)) begin
		main_5_118_reg <= main_5_118;
		if (start == 1'b0 && ^(main_5_118) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_118_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %119 = getelementptr inbounds [64 x i16]* %New_Imag, i32 0, i32 18*/
if (reset) begin main_5_119 = 0; end
		main_5_119 = (`TAG_main_0_New_Imag_a + (2 * 32'd18));
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %119 = getelementptr inbounds [64 x i16]* %New_Imag, i32 0, i32 18*/
	if ((cur_state == LEGUP_F_main_BB__5_10)) begin
		main_5_119_reg <= main_5_119;
		if (start == 1'b0 && ^(main_5_119) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_119_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %120 = getelementptr inbounds [64 x i16]* %Real, i32 0, i32 50*/
if (reset) begin main_5_120 = 0; end
		main_5_120 = (`TAG_main_0_Real_a + (2 * 32'd50));
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %120 = getelementptr inbounds [64 x i16]* %Real, i32 0, i32 50*/
	if ((cur_state == LEGUP_F_main_BB__5_10)) begin
		main_5_120_reg <= main_5_120;
		if (start == 1'b0 && ^(main_5_120) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_120_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %121 = load i16* %120, align 2, !tbaa !1*/
		main_5_121 = memory_controller_out_a[15:0];
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %121 = load i16* %120, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_31)) begin
		main_5_121_reg <= main_5_121;
		if (start == 1'b0 && ^(main_5_121) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_121_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %122 = getelementptr inbounds [64 x i16]* %New_Real, i32 0, i32 19*/
if (reset) begin main_5_122 = 0; end
		main_5_122 = (`TAG_main_0_New_Real_a + (2 * 32'd19));
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %122 = getelementptr inbounds [64 x i16]* %New_Real, i32 0, i32 19*/
	if ((cur_state == LEGUP_F_main_BB__5_10)) begin
		main_5_122_reg <= main_5_122;
		if (start == 1'b0 && ^(main_5_122) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_122_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %123 = getelementptr inbounds [64 x i16]* %Imag, i32 0, i32 50*/
if (reset) begin main_5_123 = 0; end
		main_5_123 = (`TAG_main_0_Imag_a + (2 * 32'd50));
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %123 = getelementptr inbounds [64 x i16]* %Imag, i32 0, i32 50*/
	if ((cur_state == LEGUP_F_main_BB__5_10)) begin
		main_5_123_reg <= main_5_123;
		if (start == 1'b0 && ^(main_5_123) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_123_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %124 = load i16* %123, align 2, !tbaa !1*/
		main_5_124 = memory_controller_out_b[15:0];
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %124 = load i16* %123, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_31)) begin
		main_5_124_reg <= main_5_124;
		if (start == 1'b0 && ^(main_5_124) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_124_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %125 = getelementptr inbounds [64 x i16]* %New_Imag, i32 0, i32 19*/
if (reset) begin main_5_125 = 0; end
		main_5_125 = (`TAG_main_0_New_Imag_a + (2 * 32'd19));
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %125 = getelementptr inbounds [64 x i16]* %New_Imag, i32 0, i32 19*/
	if ((cur_state == LEGUP_F_main_BB__5_10)) begin
		main_5_125_reg <= main_5_125;
		if (start == 1'b0 && ^(main_5_125) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_125_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %126 = getelementptr inbounds [64 x i16]* %Real, i32 0, i32 10*/
if (reset) begin main_5_126 = 0; end
		main_5_126 = (`TAG_main_0_Real_a + (2 * 32'd10));
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %126 = getelementptr inbounds [64 x i16]* %Real, i32 0, i32 10*/
	if ((cur_state == LEGUP_F_main_BB__5_10)) begin
		main_5_126_reg <= main_5_126;
		if (start == 1'b0 && ^(main_5_126) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_126_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %127 = load i16* %126, align 2, !tbaa !1*/
		main_5_127 = memory_controller_out_a[15:0];
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %127 = load i16* %126, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_32)) begin
		main_5_127_reg <= main_5_127;
		if (start == 1'b0 && ^(main_5_127) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_127_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %128 = getelementptr inbounds [64 x i16]* %New_Real, i32 0, i32 20*/
if (reset) begin main_5_128 = 0; end
		main_5_128 = (`TAG_main_0_New_Real_a + (2 * 32'd20));
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %128 = getelementptr inbounds [64 x i16]* %New_Real, i32 0, i32 20*/
	if ((cur_state == LEGUP_F_main_BB__5_10)) begin
		main_5_128_reg <= main_5_128;
		if (start == 1'b0 && ^(main_5_128) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_128_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %129 = getelementptr inbounds [64 x i16]* %Imag, i32 0, i32 10*/
if (reset) begin main_5_129 = 0; end
		main_5_129 = (`TAG_main_0_Imag_a + (2 * 32'd10));
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %129 = getelementptr inbounds [64 x i16]* %Imag, i32 0, i32 10*/
	if ((cur_state == LEGUP_F_main_BB__5_10)) begin
		main_5_129_reg <= main_5_129;
		if (start == 1'b0 && ^(main_5_129) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_129_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %130 = load i16* %129, align 2, !tbaa !1*/
		main_5_130 = memory_controller_out_b[15:0];
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %130 = load i16* %129, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_32)) begin
		main_5_130_reg <= main_5_130;
		if (start == 1'b0 && ^(main_5_130) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_130_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %131 = getelementptr inbounds [64 x i16]* %New_Imag, i32 0, i32 20*/
if (reset) begin main_5_131 = 0; end
		main_5_131 = (`TAG_main_0_New_Imag_a + (2 * 32'd20));
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %131 = getelementptr inbounds [64 x i16]* %New_Imag, i32 0, i32 20*/
	if ((cur_state == LEGUP_F_main_BB__5_10)) begin
		main_5_131_reg <= main_5_131;
		if (start == 1'b0 && ^(main_5_131) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_131_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %132 = getelementptr inbounds [64 x i16]* %Real, i32 0, i32 42*/
if (reset) begin main_5_132 = 0; end
		main_5_132 = (`TAG_main_0_Real_a + (2 * 32'd42));
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %132 = getelementptr inbounds [64 x i16]* %Real, i32 0, i32 42*/
	if ((cur_state == LEGUP_F_main_BB__5_10)) begin
		main_5_132_reg <= main_5_132;
		if (start == 1'b0 && ^(main_5_132) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_132_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %133 = load i16* %132, align 2, !tbaa !1*/
		main_5_133 = memory_controller_out_a[15:0];
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %133 = load i16* %132, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_33)) begin
		main_5_133_reg <= main_5_133;
		if (start == 1'b0 && ^(main_5_133) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_133_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %134 = getelementptr inbounds [64 x i16]* %New_Real, i32 0, i32 21*/
if (reset) begin main_5_134 = 0; end
		main_5_134 = (`TAG_main_0_New_Real_a + (2 * 32'd21));
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %134 = getelementptr inbounds [64 x i16]* %New_Real, i32 0, i32 21*/
	if ((cur_state == LEGUP_F_main_BB__5_10)) begin
		main_5_134_reg <= main_5_134;
		if (start == 1'b0 && ^(main_5_134) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_134_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %135 = getelementptr inbounds [64 x i16]* %Imag, i32 0, i32 42*/
if (reset) begin main_5_135 = 0; end
		main_5_135 = (`TAG_main_0_Imag_a + (2 * 32'd42));
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %135 = getelementptr inbounds [64 x i16]* %Imag, i32 0, i32 42*/
	if ((cur_state == LEGUP_F_main_BB__5_10)) begin
		main_5_135_reg <= main_5_135;
		if (start == 1'b0 && ^(main_5_135) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_135_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %136 = load i16* %135, align 2, !tbaa !1*/
		main_5_136 = memory_controller_out_b[15:0];
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %136 = load i16* %135, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_33)) begin
		main_5_136_reg <= main_5_136;
		if (start == 1'b0 && ^(main_5_136) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_136_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %137 = getelementptr inbounds [64 x i16]* %New_Imag, i32 0, i32 21*/
if (reset) begin main_5_137 = 0; end
		main_5_137 = (`TAG_main_0_New_Imag_a + (2 * 32'd21));
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %137 = getelementptr inbounds [64 x i16]* %New_Imag, i32 0, i32 21*/
	if ((cur_state == LEGUP_F_main_BB__5_10)) begin
		main_5_137_reg <= main_5_137;
		if (start == 1'b0 && ^(main_5_137) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_137_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %138 = getelementptr inbounds [64 x i16]* %Real, i32 0, i32 26*/
if (reset) begin main_5_138 = 0; end
		main_5_138 = (`TAG_main_0_Real_a + (2 * 32'd26));
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %138 = getelementptr inbounds [64 x i16]* %Real, i32 0, i32 26*/
	if ((cur_state == LEGUP_F_main_BB__5_10)) begin
		main_5_138_reg <= main_5_138;
		if (start == 1'b0 && ^(main_5_138) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_138_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %139 = load i16* %138, align 2, !tbaa !1*/
		main_5_139 = memory_controller_out_a[15:0];
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %139 = load i16* %138, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_34)) begin
		main_5_139_reg <= main_5_139;
		if (start == 1'b0 && ^(main_5_139) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_139_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %140 = getelementptr inbounds [64 x i16]* %New_Real, i32 0, i32 22*/
if (reset) begin main_5_140 = 0; end
		main_5_140 = (`TAG_main_0_New_Real_a + (2 * 32'd22));
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %140 = getelementptr inbounds [64 x i16]* %New_Real, i32 0, i32 22*/
	if ((cur_state == LEGUP_F_main_BB__5_10)) begin
		main_5_140_reg <= main_5_140;
		if (start == 1'b0 && ^(main_5_140) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_140_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %141 = getelementptr inbounds [64 x i16]* %Imag, i32 0, i32 26*/
if (reset) begin main_5_141 = 0; end
		main_5_141 = (`TAG_main_0_Imag_a + (2 * 32'd26));
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %141 = getelementptr inbounds [64 x i16]* %Imag, i32 0, i32 26*/
	if ((cur_state == LEGUP_F_main_BB__5_10)) begin
		main_5_141_reg <= main_5_141;
		if (start == 1'b0 && ^(main_5_141) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_141_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %142 = load i16* %141, align 2, !tbaa !1*/
		main_5_142 = memory_controller_out_b[15:0];
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %142 = load i16* %141, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_34)) begin
		main_5_142_reg <= main_5_142;
		if (start == 1'b0 && ^(main_5_142) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_142_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %143 = getelementptr inbounds [64 x i16]* %New_Imag, i32 0, i32 22*/
if (reset) begin main_5_143 = 0; end
		main_5_143 = (`TAG_main_0_New_Imag_a + (2 * 32'd22));
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %143 = getelementptr inbounds [64 x i16]* %New_Imag, i32 0, i32 22*/
	if ((cur_state == LEGUP_F_main_BB__5_10)) begin
		main_5_143_reg <= main_5_143;
		if (start == 1'b0 && ^(main_5_143) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_143_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %144 = getelementptr inbounds [64 x i16]* %Real, i32 0, i32 58*/
if (reset) begin main_5_144 = 0; end
		main_5_144 = (`TAG_main_0_Real_a + (2 * 32'd58));
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %144 = getelementptr inbounds [64 x i16]* %Real, i32 0, i32 58*/
	if ((cur_state == LEGUP_F_main_BB__5_10)) begin
		main_5_144_reg <= main_5_144;
		if (start == 1'b0 && ^(main_5_144) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_144_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %145 = load i16* %144, align 2, !tbaa !1*/
		main_5_145 = memory_controller_out_a[15:0];
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %145 = load i16* %144, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_35)) begin
		main_5_145_reg <= main_5_145;
		if (start == 1'b0 && ^(main_5_145) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_145_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %146 = getelementptr inbounds [64 x i16]* %New_Real, i32 0, i32 23*/
if (reset) begin main_5_146 = 0; end
		main_5_146 = (`TAG_main_0_New_Real_a + (2 * 32'd23));
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %146 = getelementptr inbounds [64 x i16]* %New_Real, i32 0, i32 23*/
	if ((cur_state == LEGUP_F_main_BB__5_10)) begin
		main_5_146_reg <= main_5_146;
		if (start == 1'b0 && ^(main_5_146) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_146_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %147 = getelementptr inbounds [64 x i16]* %Imag, i32 0, i32 58*/
if (reset) begin main_5_147 = 0; end
		main_5_147 = (`TAG_main_0_Imag_a + (2 * 32'd58));
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %147 = getelementptr inbounds [64 x i16]* %Imag, i32 0, i32 58*/
	if ((cur_state == LEGUP_F_main_BB__5_10)) begin
		main_5_147_reg <= main_5_147;
		if (start == 1'b0 && ^(main_5_147) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_147_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %148 = load i16* %147, align 2, !tbaa !1*/
		main_5_148 = memory_controller_out_b[15:0];
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %148 = load i16* %147, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_35)) begin
		main_5_148_reg <= main_5_148;
		if (start == 1'b0 && ^(main_5_148) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_148_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %149 = getelementptr inbounds [64 x i16]* %New_Imag, i32 0, i32 23*/
if (reset) begin main_5_149 = 0; end
		main_5_149 = (`TAG_main_0_New_Imag_a + (2 * 32'd23));
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %149 = getelementptr inbounds [64 x i16]* %New_Imag, i32 0, i32 23*/
	if ((cur_state == LEGUP_F_main_BB__5_10)) begin
		main_5_149_reg <= main_5_149;
		if (start == 1'b0 && ^(main_5_149) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_149_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %150 = getelementptr inbounds [64 x i16]* %Real, i32 0, i32 6*/
if (reset) begin main_5_150 = 0; end
		main_5_150 = (`TAG_main_0_Real_a + (2 * 32'd6));
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %150 = getelementptr inbounds [64 x i16]* %Real, i32 0, i32 6*/
	if ((cur_state == LEGUP_F_main_BB__5_10)) begin
		main_5_150_reg <= main_5_150;
		if (start == 1'b0 && ^(main_5_150) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_150_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %151 = load i16* %150, align 2, !tbaa !1*/
		main_5_151 = memory_controller_out_a[15:0];
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %151 = load i16* %150, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_36)) begin
		main_5_151_reg <= main_5_151;
		if (start == 1'b0 && ^(main_5_151) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_151_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %152 = getelementptr inbounds [64 x i16]* %New_Real, i32 0, i32 24*/
if (reset) begin main_5_152 = 0; end
		main_5_152 = (`TAG_main_0_New_Real_a + (2 * 32'd24));
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %152 = getelementptr inbounds [64 x i16]* %New_Real, i32 0, i32 24*/
	if ((cur_state == LEGUP_F_main_BB__5_10)) begin
		main_5_152_reg <= main_5_152;
		if (start == 1'b0 && ^(main_5_152) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_152_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %153 = getelementptr inbounds [64 x i16]* %Imag, i32 0, i32 6*/
if (reset) begin main_5_153 = 0; end
		main_5_153 = (`TAG_main_0_Imag_a + (2 * 32'd6));
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %153 = getelementptr inbounds [64 x i16]* %Imag, i32 0, i32 6*/
	if ((cur_state == LEGUP_F_main_BB__5_10)) begin
		main_5_153_reg <= main_5_153;
		if (start == 1'b0 && ^(main_5_153) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_153_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %154 = load i16* %153, align 2, !tbaa !1*/
		main_5_154 = memory_controller_out_b[15:0];
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %154 = load i16* %153, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_36)) begin
		main_5_154_reg <= main_5_154;
		if (start == 1'b0 && ^(main_5_154) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_154_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %155 = getelementptr inbounds [64 x i16]* %New_Imag, i32 0, i32 24*/
if (reset) begin main_5_155 = 0; end
		main_5_155 = (`TAG_main_0_New_Imag_a + (2 * 32'd24));
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %155 = getelementptr inbounds [64 x i16]* %New_Imag, i32 0, i32 24*/
	if ((cur_state == LEGUP_F_main_BB__5_10)) begin
		main_5_155_reg <= main_5_155;
		if (start == 1'b0 && ^(main_5_155) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_155_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %156 = getelementptr inbounds [64 x i16]* %Real, i32 0, i32 38*/
if (reset) begin main_5_156 = 0; end
		main_5_156 = (`TAG_main_0_Real_a + (2 * 32'd38));
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %156 = getelementptr inbounds [64 x i16]* %Real, i32 0, i32 38*/
	if ((cur_state == LEGUP_F_main_BB__5_10)) begin
		main_5_156_reg <= main_5_156;
		if (start == 1'b0 && ^(main_5_156) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_156_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %157 = load i16* %156, align 2, !tbaa !1*/
		main_5_157 = memory_controller_out_a[15:0];
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %157 = load i16* %156, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_37)) begin
		main_5_157_reg <= main_5_157;
		if (start == 1'b0 && ^(main_5_157) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_157_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %158 = getelementptr inbounds [64 x i16]* %New_Real, i32 0, i32 25*/
if (reset) begin main_5_158 = 0; end
		main_5_158 = (`TAG_main_0_New_Real_a + (2 * 32'd25));
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %158 = getelementptr inbounds [64 x i16]* %New_Real, i32 0, i32 25*/
	if ((cur_state == LEGUP_F_main_BB__5_10)) begin
		main_5_158_reg <= main_5_158;
		if (start == 1'b0 && ^(main_5_158) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_158_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %159 = getelementptr inbounds [64 x i16]* %Imag, i32 0, i32 38*/
if (reset) begin main_5_159 = 0; end
		main_5_159 = (`TAG_main_0_Imag_a + (2 * 32'd38));
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %159 = getelementptr inbounds [64 x i16]* %Imag, i32 0, i32 38*/
	if ((cur_state == LEGUP_F_main_BB__5_10)) begin
		main_5_159_reg <= main_5_159;
		if (start == 1'b0 && ^(main_5_159) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_159_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %160 = load i16* %159, align 2, !tbaa !1*/
		main_5_160 = memory_controller_out_b[15:0];
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %160 = load i16* %159, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_37)) begin
		main_5_160_reg <= main_5_160;
		if (start == 1'b0 && ^(main_5_160) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_160_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %161 = getelementptr inbounds [64 x i16]* %New_Imag, i32 0, i32 25*/
if (reset) begin main_5_161 = 0; end
		main_5_161 = (`TAG_main_0_New_Imag_a + (2 * 32'd25));
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %161 = getelementptr inbounds [64 x i16]* %New_Imag, i32 0, i32 25*/
	if ((cur_state == LEGUP_F_main_BB__5_10)) begin
		main_5_161_reg <= main_5_161;
		if (start == 1'b0 && ^(main_5_161) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_161_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %162 = getelementptr inbounds [64 x i16]* %Real, i32 0, i32 22*/
if (reset) begin main_5_162 = 0; end
		main_5_162 = (`TAG_main_0_Real_a + (2 * 32'd22));
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %162 = getelementptr inbounds [64 x i16]* %Real, i32 0, i32 22*/
	if ((cur_state == LEGUP_F_main_BB__5_10)) begin
		main_5_162_reg <= main_5_162;
		if (start == 1'b0 && ^(main_5_162) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_162_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %163 = load i16* %162, align 2, !tbaa !1*/
		main_5_163 = memory_controller_out_a[15:0];
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %163 = load i16* %162, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_38)) begin
		main_5_163_reg <= main_5_163;
		if (start == 1'b0 && ^(main_5_163) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_163_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %164 = getelementptr inbounds [64 x i16]* %New_Real, i32 0, i32 26*/
if (reset) begin main_5_164 = 0; end
		main_5_164 = (`TAG_main_0_New_Real_a + (2 * 32'd26));
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %164 = getelementptr inbounds [64 x i16]* %New_Real, i32 0, i32 26*/
	if ((cur_state == LEGUP_F_main_BB__5_10)) begin
		main_5_164_reg <= main_5_164;
		if (start == 1'b0 && ^(main_5_164) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_164_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %165 = getelementptr inbounds [64 x i16]* %Imag, i32 0, i32 22*/
if (reset) begin main_5_165 = 0; end
		main_5_165 = (`TAG_main_0_Imag_a + (2 * 32'd22));
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %165 = getelementptr inbounds [64 x i16]* %Imag, i32 0, i32 22*/
	if ((cur_state == LEGUP_F_main_BB__5_10)) begin
		main_5_165_reg <= main_5_165;
		if (start == 1'b0 && ^(main_5_165) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_165_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %166 = load i16* %165, align 2, !tbaa !1*/
		main_5_166 = memory_controller_out_b[15:0];
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %166 = load i16* %165, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_38)) begin
		main_5_166_reg <= main_5_166;
		if (start == 1'b0 && ^(main_5_166) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_166_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %167 = getelementptr inbounds [64 x i16]* %New_Imag, i32 0, i32 26*/
if (reset) begin main_5_167 = 0; end
		main_5_167 = (`TAG_main_0_New_Imag_a + (2 * 32'd26));
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %167 = getelementptr inbounds [64 x i16]* %New_Imag, i32 0, i32 26*/
	if ((cur_state == LEGUP_F_main_BB__5_10)) begin
		main_5_167_reg <= main_5_167;
		if (start == 1'b0 && ^(main_5_167) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_167_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %168 = getelementptr inbounds [64 x i16]* %Real, i32 0, i32 54*/
if (reset) begin main_5_168 = 0; end
		main_5_168 = (`TAG_main_0_Real_a + (2 * 32'd54));
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %168 = getelementptr inbounds [64 x i16]* %Real, i32 0, i32 54*/
	if ((cur_state == LEGUP_F_main_BB__5_10)) begin
		main_5_168_reg <= main_5_168;
		if (start == 1'b0 && ^(main_5_168) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_168_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %169 = load i16* %168, align 2, !tbaa !1*/
		main_5_169 = memory_controller_out_a[15:0];
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %169 = load i16* %168, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_39)) begin
		main_5_169_reg <= main_5_169;
		if (start == 1'b0 && ^(main_5_169) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_169_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %170 = getelementptr inbounds [64 x i16]* %New_Real, i32 0, i32 27*/
if (reset) begin main_5_170 = 0; end
		main_5_170 = (`TAG_main_0_New_Real_a + (2 * 32'd27));
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %170 = getelementptr inbounds [64 x i16]* %New_Real, i32 0, i32 27*/
	if ((cur_state == LEGUP_F_main_BB__5_10)) begin
		main_5_170_reg <= main_5_170;
		if (start == 1'b0 && ^(main_5_170) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_170_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %171 = getelementptr inbounds [64 x i16]* %Imag, i32 0, i32 54*/
if (reset) begin main_5_171 = 0; end
		main_5_171 = (`TAG_main_0_Imag_a + (2 * 32'd54));
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %171 = getelementptr inbounds [64 x i16]* %Imag, i32 0, i32 54*/
	if ((cur_state == LEGUP_F_main_BB__5_10)) begin
		main_5_171_reg <= main_5_171;
		if (start == 1'b0 && ^(main_5_171) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_171_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %172 = load i16* %171, align 2, !tbaa !1*/
		main_5_172 = memory_controller_out_b[15:0];
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %172 = load i16* %171, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_39)) begin
		main_5_172_reg <= main_5_172;
		if (start == 1'b0 && ^(main_5_172) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_172_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %173 = getelementptr inbounds [64 x i16]* %New_Imag, i32 0, i32 27*/
if (reset) begin main_5_173 = 0; end
		main_5_173 = (`TAG_main_0_New_Imag_a + (2 * 32'd27));
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %173 = getelementptr inbounds [64 x i16]* %New_Imag, i32 0, i32 27*/
	if ((cur_state == LEGUP_F_main_BB__5_10)) begin
		main_5_173_reg <= main_5_173;
		if (start == 1'b0 && ^(main_5_173) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_173_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %174 = getelementptr inbounds [64 x i16]* %Real, i32 0, i32 14*/
if (reset) begin main_5_174 = 0; end
		main_5_174 = (`TAG_main_0_Real_a + (2 * 32'd14));
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %174 = getelementptr inbounds [64 x i16]* %Real, i32 0, i32 14*/
	if ((cur_state == LEGUP_F_main_BB__5_10)) begin
		main_5_174_reg <= main_5_174;
		if (start == 1'b0 && ^(main_5_174) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_174_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %175 = load i16* %174, align 2, !tbaa !1*/
		main_5_175 = memory_controller_out_a[15:0];
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %175 = load i16* %174, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_40)) begin
		main_5_175_reg <= main_5_175;
		if (start == 1'b0 && ^(main_5_175) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_175_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %176 = getelementptr inbounds [64 x i16]* %New_Real, i32 0, i32 28*/
if (reset) begin main_5_176 = 0; end
		main_5_176 = (`TAG_main_0_New_Real_a + (2 * 32'd28));
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %176 = getelementptr inbounds [64 x i16]* %New_Real, i32 0, i32 28*/
	if ((cur_state == LEGUP_F_main_BB__5_10)) begin
		main_5_176_reg <= main_5_176;
		if (start == 1'b0 && ^(main_5_176) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_176_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %177 = getelementptr inbounds [64 x i16]* %Imag, i32 0, i32 14*/
if (reset) begin main_5_177 = 0; end
		main_5_177 = (`TAG_main_0_Imag_a + (2 * 32'd14));
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %177 = getelementptr inbounds [64 x i16]* %Imag, i32 0, i32 14*/
	if ((cur_state == LEGUP_F_main_BB__5_10)) begin
		main_5_177_reg <= main_5_177;
		if (start == 1'b0 && ^(main_5_177) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_177_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %178 = load i16* %177, align 2, !tbaa !1*/
		main_5_178 = memory_controller_out_b[15:0];
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %178 = load i16* %177, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_40)) begin
		main_5_178_reg <= main_5_178;
		if (start == 1'b0 && ^(main_5_178) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_178_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %179 = getelementptr inbounds [64 x i16]* %New_Imag, i32 0, i32 28*/
if (reset) begin main_5_179 = 0; end
		main_5_179 = (`TAG_main_0_New_Imag_a + (2 * 32'd28));
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %179 = getelementptr inbounds [64 x i16]* %New_Imag, i32 0, i32 28*/
	if ((cur_state == LEGUP_F_main_BB__5_10)) begin
		main_5_179_reg <= main_5_179;
		if (start == 1'b0 && ^(main_5_179) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_179_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %180 = getelementptr inbounds [64 x i16]* %Real, i32 0, i32 46*/
if (reset) begin main_5_180 = 0; end
		main_5_180 = (`TAG_main_0_Real_a + (2 * 32'd46));
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %180 = getelementptr inbounds [64 x i16]* %Real, i32 0, i32 46*/
	if ((cur_state == LEGUP_F_main_BB__5_10)) begin
		main_5_180_reg <= main_5_180;
		if (start == 1'b0 && ^(main_5_180) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_180_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %181 = load i16* %180, align 2, !tbaa !1*/
		main_5_181 = memory_controller_out_a[15:0];
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %181 = load i16* %180, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_41)) begin
		main_5_181_reg <= main_5_181;
		if (start == 1'b0 && ^(main_5_181) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_181_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %182 = getelementptr inbounds [64 x i16]* %New_Real, i32 0, i32 29*/
if (reset) begin main_5_182 = 0; end
		main_5_182 = (`TAG_main_0_New_Real_a + (2 * 32'd29));
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %182 = getelementptr inbounds [64 x i16]* %New_Real, i32 0, i32 29*/
	if ((cur_state == LEGUP_F_main_BB__5_10)) begin
		main_5_182_reg <= main_5_182;
		if (start == 1'b0 && ^(main_5_182) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_182_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %183 = getelementptr inbounds [64 x i16]* %Imag, i32 0, i32 46*/
if (reset) begin main_5_183 = 0; end
		main_5_183 = (`TAG_main_0_Imag_a + (2 * 32'd46));
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %183 = getelementptr inbounds [64 x i16]* %Imag, i32 0, i32 46*/
	if ((cur_state == LEGUP_F_main_BB__5_10)) begin
		main_5_183_reg <= main_5_183;
		if (start == 1'b0 && ^(main_5_183) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_183_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %184 = load i16* %183, align 2, !tbaa !1*/
		main_5_184 = memory_controller_out_b[15:0];
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %184 = load i16* %183, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_41)) begin
		main_5_184_reg <= main_5_184;
		if (start == 1'b0 && ^(main_5_184) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_184_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %185 = getelementptr inbounds [64 x i16]* %New_Imag, i32 0, i32 29*/
if (reset) begin main_5_185 = 0; end
		main_5_185 = (`TAG_main_0_New_Imag_a + (2 * 32'd29));
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %185 = getelementptr inbounds [64 x i16]* %New_Imag, i32 0, i32 29*/
	if ((cur_state == LEGUP_F_main_BB__5_10)) begin
		main_5_185_reg <= main_5_185;
		if (start == 1'b0 && ^(main_5_185) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_185_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %186 = getelementptr inbounds [64 x i16]* %Real, i32 0, i32 30*/
if (reset) begin main_5_186 = 0; end
		main_5_186 = (`TAG_main_0_Real_a + (2 * 32'd30));
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %186 = getelementptr inbounds [64 x i16]* %Real, i32 0, i32 30*/
	if ((cur_state == LEGUP_F_main_BB__5_10)) begin
		main_5_186_reg <= main_5_186;
		if (start == 1'b0 && ^(main_5_186) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_186_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %187 = load i16* %186, align 2, !tbaa !1*/
		main_5_187 = memory_controller_out_a[15:0];
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %187 = load i16* %186, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_42)) begin
		main_5_187_reg <= main_5_187;
		if (start == 1'b0 && ^(main_5_187) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_187_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %188 = getelementptr inbounds [64 x i16]* %New_Real, i32 0, i32 30*/
if (reset) begin main_5_188 = 0; end
		main_5_188 = (`TAG_main_0_New_Real_a + (2 * 32'd30));
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %188 = getelementptr inbounds [64 x i16]* %New_Real, i32 0, i32 30*/
	if ((cur_state == LEGUP_F_main_BB__5_10)) begin
		main_5_188_reg <= main_5_188;
		if (start == 1'b0 && ^(main_5_188) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_188_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %189 = getelementptr inbounds [64 x i16]* %Imag, i32 0, i32 30*/
if (reset) begin main_5_189 = 0; end
		main_5_189 = (`TAG_main_0_Imag_a + (2 * 32'd30));
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %189 = getelementptr inbounds [64 x i16]* %Imag, i32 0, i32 30*/
	if ((cur_state == LEGUP_F_main_BB__5_10)) begin
		main_5_189_reg <= main_5_189;
		if (start == 1'b0 && ^(main_5_189) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_189_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %190 = load i16* %189, align 2, !tbaa !1*/
		main_5_190 = memory_controller_out_b[15:0];
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %190 = load i16* %189, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_42)) begin
		main_5_190_reg <= main_5_190;
		if (start == 1'b0 && ^(main_5_190) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_190_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %191 = getelementptr inbounds [64 x i16]* %New_Imag, i32 0, i32 30*/
if (reset) begin main_5_191 = 0; end
		main_5_191 = (`TAG_main_0_New_Imag_a + (2 * 32'd30));
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %191 = getelementptr inbounds [64 x i16]* %New_Imag, i32 0, i32 30*/
	if ((cur_state == LEGUP_F_main_BB__5_10)) begin
		main_5_191_reg <= main_5_191;
		if (start == 1'b0 && ^(main_5_191) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_191_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %192 = getelementptr inbounds [64 x i16]* %Real, i32 0, i32 62*/
if (reset) begin main_5_192 = 0; end
		main_5_192 = (`TAG_main_0_Real_a + (2 * 32'd62));
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %192 = getelementptr inbounds [64 x i16]* %Real, i32 0, i32 62*/
	if ((cur_state == LEGUP_F_main_BB__5_10)) begin
		main_5_192_reg <= main_5_192;
		if (start == 1'b0 && ^(main_5_192) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_192_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %193 = load i16* %192, align 2, !tbaa !1*/
		main_5_193 = memory_controller_out_a[15:0];
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %193 = load i16* %192, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_43)) begin
		main_5_193_reg <= main_5_193;
		if (start == 1'b0 && ^(main_5_193) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_193_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %194 = getelementptr inbounds [64 x i16]* %New_Real, i32 0, i32 31*/
if (reset) begin main_5_194 = 0; end
		main_5_194 = (`TAG_main_0_New_Real_a + (2 * 32'd31));
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %194 = getelementptr inbounds [64 x i16]* %New_Real, i32 0, i32 31*/
	if ((cur_state == LEGUP_F_main_BB__5_10)) begin
		main_5_194_reg <= main_5_194;
		if (start == 1'b0 && ^(main_5_194) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_194_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %195 = getelementptr inbounds [64 x i16]* %Imag, i32 0, i32 62*/
if (reset) begin main_5_195 = 0; end
		main_5_195 = (`TAG_main_0_Imag_a + (2 * 32'd62));
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %195 = getelementptr inbounds [64 x i16]* %Imag, i32 0, i32 62*/
	if ((cur_state == LEGUP_F_main_BB__5_10)) begin
		main_5_195_reg <= main_5_195;
		if (start == 1'b0 && ^(main_5_195) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_195_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %196 = load i16* %195, align 2, !tbaa !1*/
		main_5_196 = memory_controller_out_b[15:0];
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %196 = load i16* %195, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_43)) begin
		main_5_196_reg <= main_5_196;
		if (start == 1'b0 && ^(main_5_196) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_196_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %197 = getelementptr inbounds [64 x i16]* %New_Imag, i32 0, i32 31*/
if (reset) begin main_5_197 = 0; end
		main_5_197 = (`TAG_main_0_New_Imag_a + (2 * 32'd31));
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %197 = getelementptr inbounds [64 x i16]* %New_Imag, i32 0, i32 31*/
	if ((cur_state == LEGUP_F_main_BB__5_10)) begin
		main_5_197_reg <= main_5_197;
		if (start == 1'b0 && ^(main_5_197) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_197_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %198 = getelementptr inbounds [64 x i16]* %Real, i32 0, i32 1*/
if (reset) begin main_5_198 = 0; end
		main_5_198 = (`TAG_main_0_Real_a + (2 * 32'd1));
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %198 = getelementptr inbounds [64 x i16]* %Real, i32 0, i32 1*/
	if ((cur_state == LEGUP_F_main_BB__5_10)) begin
		main_5_198_reg <= main_5_198;
		if (start == 1'b0 && ^(main_5_198) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_198_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %199 = load i16* %198, align 2, !tbaa !1*/
		main_5_199 = memory_controller_out_a[15:0];
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %199 = load i16* %198, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_44)) begin
		main_5_199_reg <= main_5_199;
		if (start == 1'b0 && ^(main_5_199) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_199_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %200 = getelementptr inbounds [64 x i16]* %New_Real, i32 0, i32 32*/
if (reset) begin main_5_200 = 0; end
		main_5_200 = (`TAG_main_0_New_Real_a + (2 * 32'd32));
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %200 = getelementptr inbounds [64 x i16]* %New_Real, i32 0, i32 32*/
	if ((cur_state == LEGUP_F_main_BB__5_10)) begin
		main_5_200_reg <= main_5_200;
		if (start == 1'b0 && ^(main_5_200) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_200_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %201 = getelementptr inbounds [64 x i16]* %Imag, i32 0, i32 1*/
if (reset) begin main_5_201 = 0; end
		main_5_201 = (`TAG_main_0_Imag_a + (2 * 32'd1));
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %201 = getelementptr inbounds [64 x i16]* %Imag, i32 0, i32 1*/
	if ((cur_state == LEGUP_F_main_BB__5_10)) begin
		main_5_201_reg <= main_5_201;
		if (start == 1'b0 && ^(main_5_201) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_201_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %202 = load i16* %201, align 2, !tbaa !1*/
		main_5_202 = memory_controller_out_b[15:0];
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %202 = load i16* %201, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_44)) begin
		main_5_202_reg <= main_5_202;
		if (start == 1'b0 && ^(main_5_202) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_202_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %203 = getelementptr inbounds [64 x i16]* %New_Imag, i32 0, i32 32*/
if (reset) begin main_5_203 = 0; end
		main_5_203 = (`TAG_main_0_New_Imag_a + (2 * 32'd32));
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %203 = getelementptr inbounds [64 x i16]* %New_Imag, i32 0, i32 32*/
	if ((cur_state == LEGUP_F_main_BB__5_10)) begin
		main_5_203_reg <= main_5_203;
		if (start == 1'b0 && ^(main_5_203) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_203_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %204 = getelementptr inbounds [64 x i16]* %Real, i32 0, i32 33*/
if (reset) begin main_5_204 = 0; end
		main_5_204 = (`TAG_main_0_Real_a + (2 * 32'd33));
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %204 = getelementptr inbounds [64 x i16]* %Real, i32 0, i32 33*/
	if ((cur_state == LEGUP_F_main_BB__5_10)) begin
		main_5_204_reg <= main_5_204;
		if (start == 1'b0 && ^(main_5_204) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_204_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %205 = load i16* %204, align 2, !tbaa !1*/
		main_5_205 = memory_controller_out_a[15:0];
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %205 = load i16* %204, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_45)) begin
		main_5_205_reg <= main_5_205;
		if (start == 1'b0 && ^(main_5_205) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_205_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %206 = getelementptr inbounds [64 x i16]* %New_Real, i32 0, i32 33*/
if (reset) begin main_5_206 = 0; end
		main_5_206 = (`TAG_main_0_New_Real_a + (2 * 32'd33));
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %206 = getelementptr inbounds [64 x i16]* %New_Real, i32 0, i32 33*/
	if ((cur_state == LEGUP_F_main_BB__5_10)) begin
		main_5_206_reg <= main_5_206;
		if (start == 1'b0 && ^(main_5_206) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_206_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %207 = getelementptr inbounds [64 x i16]* %Imag, i32 0, i32 33*/
if (reset) begin main_5_207 = 0; end
		main_5_207 = (`TAG_main_0_Imag_a + (2 * 32'd33));
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %207 = getelementptr inbounds [64 x i16]* %Imag, i32 0, i32 33*/
	if ((cur_state == LEGUP_F_main_BB__5_10)) begin
		main_5_207_reg <= main_5_207;
		if (start == 1'b0 && ^(main_5_207) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_207_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %208 = load i16* %207, align 2, !tbaa !1*/
		main_5_208 = memory_controller_out_b[15:0];
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %208 = load i16* %207, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_45)) begin
		main_5_208_reg <= main_5_208;
		if (start == 1'b0 && ^(main_5_208) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_208_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %209 = getelementptr inbounds [64 x i16]* %New_Imag, i32 0, i32 33*/
if (reset) begin main_5_209 = 0; end
		main_5_209 = (`TAG_main_0_New_Imag_a + (2 * 32'd33));
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %209 = getelementptr inbounds [64 x i16]* %New_Imag, i32 0, i32 33*/
	if ((cur_state == LEGUP_F_main_BB__5_10)) begin
		main_5_209_reg <= main_5_209;
		if (start == 1'b0 && ^(main_5_209) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_209_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %210 = getelementptr inbounds [64 x i16]* %Real, i32 0, i32 17*/
if (reset) begin main_5_210 = 0; end
		main_5_210 = (`TAG_main_0_Real_a + (2 * 32'd17));
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %210 = getelementptr inbounds [64 x i16]* %Real, i32 0, i32 17*/
	if ((cur_state == LEGUP_F_main_BB__5_10)) begin
		main_5_210_reg <= main_5_210;
		if (start == 1'b0 && ^(main_5_210) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_210_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %211 = load i16* %210, align 2, !tbaa !1*/
		main_5_211 = memory_controller_out_a[15:0];
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %211 = load i16* %210, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_46)) begin
		main_5_211_reg <= main_5_211;
		if (start == 1'b0 && ^(main_5_211) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_211_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %212 = getelementptr inbounds [64 x i16]* %New_Real, i32 0, i32 34*/
if (reset) begin main_5_212 = 0; end
		main_5_212 = (`TAG_main_0_New_Real_a + (2 * 32'd34));
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %212 = getelementptr inbounds [64 x i16]* %New_Real, i32 0, i32 34*/
	if ((cur_state == LEGUP_F_main_BB__5_10)) begin
		main_5_212_reg <= main_5_212;
		if (start == 1'b0 && ^(main_5_212) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_212_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %213 = getelementptr inbounds [64 x i16]* %Imag, i32 0, i32 17*/
if (reset) begin main_5_213 = 0; end
		main_5_213 = (`TAG_main_0_Imag_a + (2 * 32'd17));
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %213 = getelementptr inbounds [64 x i16]* %Imag, i32 0, i32 17*/
	if ((cur_state == LEGUP_F_main_BB__5_10)) begin
		main_5_213_reg <= main_5_213;
		if (start == 1'b0 && ^(main_5_213) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_213_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %214 = load i16* %213, align 2, !tbaa !1*/
		main_5_214 = memory_controller_out_b[15:0];
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %214 = load i16* %213, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_46)) begin
		main_5_214_reg <= main_5_214;
		if (start == 1'b0 && ^(main_5_214) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_214_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %215 = getelementptr inbounds [64 x i16]* %New_Imag, i32 0, i32 34*/
if (reset) begin main_5_215 = 0; end
		main_5_215 = (`TAG_main_0_New_Imag_a + (2 * 32'd34));
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %215 = getelementptr inbounds [64 x i16]* %New_Imag, i32 0, i32 34*/
	if ((cur_state == LEGUP_F_main_BB__5_10)) begin
		main_5_215_reg <= main_5_215;
		if (start == 1'b0 && ^(main_5_215) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_215_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %216 = getelementptr inbounds [64 x i16]* %Real, i32 0, i32 49*/
if (reset) begin main_5_216 = 0; end
		main_5_216 = (`TAG_main_0_Real_a + (2 * 32'd49));
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %216 = getelementptr inbounds [64 x i16]* %Real, i32 0, i32 49*/
	if ((cur_state == LEGUP_F_main_BB__5_10)) begin
		main_5_216_reg <= main_5_216;
		if (start == 1'b0 && ^(main_5_216) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_216_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %217 = load i16* %216, align 2, !tbaa !1*/
		main_5_217 = memory_controller_out_a[15:0];
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %217 = load i16* %216, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_47)) begin
		main_5_217_reg <= main_5_217;
		if (start == 1'b0 && ^(main_5_217) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_217_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %218 = getelementptr inbounds [64 x i16]* %New_Real, i32 0, i32 35*/
if (reset) begin main_5_218 = 0; end
		main_5_218 = (`TAG_main_0_New_Real_a + (2 * 32'd35));
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %218 = getelementptr inbounds [64 x i16]* %New_Real, i32 0, i32 35*/
	if ((cur_state == LEGUP_F_main_BB__5_10)) begin
		main_5_218_reg <= main_5_218;
		if (start == 1'b0 && ^(main_5_218) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_218_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %219 = getelementptr inbounds [64 x i16]* %Imag, i32 0, i32 49*/
if (reset) begin main_5_219 = 0; end
		main_5_219 = (`TAG_main_0_Imag_a + (2 * 32'd49));
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %219 = getelementptr inbounds [64 x i16]* %Imag, i32 0, i32 49*/
	if ((cur_state == LEGUP_F_main_BB__5_10)) begin
		main_5_219_reg <= main_5_219;
		if (start == 1'b0 && ^(main_5_219) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_219_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %220 = load i16* %219, align 2, !tbaa !1*/
		main_5_220 = memory_controller_out_b[15:0];
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %220 = load i16* %219, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_47)) begin
		main_5_220_reg <= main_5_220;
		if (start == 1'b0 && ^(main_5_220) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_220_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %221 = getelementptr inbounds [64 x i16]* %New_Imag, i32 0, i32 35*/
if (reset) begin main_5_221 = 0; end
		main_5_221 = (`TAG_main_0_New_Imag_a + (2 * 32'd35));
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %221 = getelementptr inbounds [64 x i16]* %New_Imag, i32 0, i32 35*/
	if ((cur_state == LEGUP_F_main_BB__5_10)) begin
		main_5_221_reg <= main_5_221;
		if (start == 1'b0 && ^(main_5_221) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_221_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %222 = getelementptr inbounds [64 x i16]* %Real, i32 0, i32 9*/
if (reset) begin main_5_222 = 0; end
		main_5_222 = (`TAG_main_0_Real_a + (2 * 32'd9));
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %222 = getelementptr inbounds [64 x i16]* %Real, i32 0, i32 9*/
	if ((cur_state == LEGUP_F_main_BB__5_10)) begin
		main_5_222_reg <= main_5_222;
		if (start == 1'b0 && ^(main_5_222) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_222_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %223 = load i16* %222, align 2, !tbaa !1*/
		main_5_223 = memory_controller_out_a[15:0];
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %223 = load i16* %222, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_48)) begin
		main_5_223_reg <= main_5_223;
		if (start == 1'b0 && ^(main_5_223) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_223_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %224 = getelementptr inbounds [64 x i16]* %New_Real, i32 0, i32 36*/
if (reset) begin main_5_224 = 0; end
		main_5_224 = (`TAG_main_0_New_Real_a + (2 * 32'd36));
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %224 = getelementptr inbounds [64 x i16]* %New_Real, i32 0, i32 36*/
	if ((cur_state == LEGUP_F_main_BB__5_10)) begin
		main_5_224_reg <= main_5_224;
		if (start == 1'b0 && ^(main_5_224) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_224_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %225 = getelementptr inbounds [64 x i16]* %Imag, i32 0, i32 9*/
if (reset) begin main_5_225 = 0; end
		main_5_225 = (`TAG_main_0_Imag_a + (2 * 32'd9));
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %225 = getelementptr inbounds [64 x i16]* %Imag, i32 0, i32 9*/
	if ((cur_state == LEGUP_F_main_BB__5_10)) begin
		main_5_225_reg <= main_5_225;
		if (start == 1'b0 && ^(main_5_225) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_225_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %226 = load i16* %225, align 2, !tbaa !1*/
		main_5_226 = memory_controller_out_b[15:0];
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %226 = load i16* %225, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_48)) begin
		main_5_226_reg <= main_5_226;
		if (start == 1'b0 && ^(main_5_226) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_226_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %227 = getelementptr inbounds [64 x i16]* %New_Imag, i32 0, i32 36*/
if (reset) begin main_5_227 = 0; end
		main_5_227 = (`TAG_main_0_New_Imag_a + (2 * 32'd36));
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %227 = getelementptr inbounds [64 x i16]* %New_Imag, i32 0, i32 36*/
	if ((cur_state == LEGUP_F_main_BB__5_10)) begin
		main_5_227_reg <= main_5_227;
		if (start == 1'b0 && ^(main_5_227) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_227_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %228 = getelementptr inbounds [64 x i16]* %Real, i32 0, i32 41*/
if (reset) begin main_5_228 = 0; end
		main_5_228 = (`TAG_main_0_Real_a + (2 * 32'd41));
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %228 = getelementptr inbounds [64 x i16]* %Real, i32 0, i32 41*/
	if ((cur_state == LEGUP_F_main_BB__5_10)) begin
		main_5_228_reg <= main_5_228;
		if (start == 1'b0 && ^(main_5_228) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_228_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %229 = load i16* %228, align 2, !tbaa !1*/
		main_5_229 = memory_controller_out_a[15:0];
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %229 = load i16* %228, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_49)) begin
		main_5_229_reg <= main_5_229;
		if (start == 1'b0 && ^(main_5_229) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_229_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %230 = getelementptr inbounds [64 x i16]* %New_Real, i32 0, i32 37*/
if (reset) begin main_5_230 = 0; end
		main_5_230 = (`TAG_main_0_New_Real_a + (2 * 32'd37));
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %230 = getelementptr inbounds [64 x i16]* %New_Real, i32 0, i32 37*/
	if ((cur_state == LEGUP_F_main_BB__5_10)) begin
		main_5_230_reg <= main_5_230;
		if (start == 1'b0 && ^(main_5_230) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_230_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %231 = getelementptr inbounds [64 x i16]* %Imag, i32 0, i32 41*/
if (reset) begin main_5_231 = 0; end
		main_5_231 = (`TAG_main_0_Imag_a + (2 * 32'd41));
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %231 = getelementptr inbounds [64 x i16]* %Imag, i32 0, i32 41*/
	if ((cur_state == LEGUP_F_main_BB__5_10)) begin
		main_5_231_reg <= main_5_231;
		if (start == 1'b0 && ^(main_5_231) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_231_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %232 = load i16* %231, align 2, !tbaa !1*/
		main_5_232 = memory_controller_out_b[15:0];
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %232 = load i16* %231, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_49)) begin
		main_5_232_reg <= main_5_232;
		if (start == 1'b0 && ^(main_5_232) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_232_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %233 = getelementptr inbounds [64 x i16]* %New_Imag, i32 0, i32 37*/
if (reset) begin main_5_233 = 0; end
		main_5_233 = (`TAG_main_0_New_Imag_a + (2 * 32'd37));
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %233 = getelementptr inbounds [64 x i16]* %New_Imag, i32 0, i32 37*/
	if ((cur_state == LEGUP_F_main_BB__5_10)) begin
		main_5_233_reg <= main_5_233;
		if (start == 1'b0 && ^(main_5_233) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_233_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %234 = getelementptr inbounds [64 x i16]* %Real, i32 0, i32 25*/
if (reset) begin main_5_234 = 0; end
		main_5_234 = (`TAG_main_0_Real_a + (2 * 32'd25));
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %234 = getelementptr inbounds [64 x i16]* %Real, i32 0, i32 25*/
	if ((cur_state == LEGUP_F_main_BB__5_10)) begin
		main_5_234_reg <= main_5_234;
		if (start == 1'b0 && ^(main_5_234) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_234_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %235 = load i16* %234, align 2, !tbaa !1*/
		main_5_235 = memory_controller_out_a[15:0];
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %235 = load i16* %234, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_50)) begin
		main_5_235_reg <= main_5_235;
		if (start == 1'b0 && ^(main_5_235) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_235_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %236 = getelementptr inbounds [64 x i16]* %New_Real, i32 0, i32 38*/
if (reset) begin main_5_236 = 0; end
		main_5_236 = (`TAG_main_0_New_Real_a + (2 * 32'd38));
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %236 = getelementptr inbounds [64 x i16]* %New_Real, i32 0, i32 38*/
	if ((cur_state == LEGUP_F_main_BB__5_10)) begin
		main_5_236_reg <= main_5_236;
		if (start == 1'b0 && ^(main_5_236) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_236_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %237 = getelementptr inbounds [64 x i16]* %Imag, i32 0, i32 25*/
if (reset) begin main_5_237 = 0; end
		main_5_237 = (`TAG_main_0_Imag_a + (2 * 32'd25));
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %237 = getelementptr inbounds [64 x i16]* %Imag, i32 0, i32 25*/
	if ((cur_state == LEGUP_F_main_BB__5_10)) begin
		main_5_237_reg <= main_5_237;
		if (start == 1'b0 && ^(main_5_237) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_237_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %238 = load i16* %237, align 2, !tbaa !1*/
		main_5_238 = memory_controller_out_b[15:0];
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %238 = load i16* %237, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_50)) begin
		main_5_238_reg <= main_5_238;
		if (start == 1'b0 && ^(main_5_238) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_238_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %239 = getelementptr inbounds [64 x i16]* %New_Imag, i32 0, i32 38*/
if (reset) begin main_5_239 = 0; end
		main_5_239 = (`TAG_main_0_New_Imag_a + (2 * 32'd38));
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %239 = getelementptr inbounds [64 x i16]* %New_Imag, i32 0, i32 38*/
	if ((cur_state == LEGUP_F_main_BB__5_10)) begin
		main_5_239_reg <= main_5_239;
		if (start == 1'b0 && ^(main_5_239) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_239_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %240 = getelementptr inbounds [64 x i16]* %Real, i32 0, i32 57*/
if (reset) begin main_5_240 = 0; end
		main_5_240 = (`TAG_main_0_Real_a + (2 * 32'd57));
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %240 = getelementptr inbounds [64 x i16]* %Real, i32 0, i32 57*/
	if ((cur_state == LEGUP_F_main_BB__5_10)) begin
		main_5_240_reg <= main_5_240;
		if (start == 1'b0 && ^(main_5_240) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_240_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %241 = load i16* %240, align 2, !tbaa !1*/
		main_5_241 = memory_controller_out_a[15:0];
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %241 = load i16* %240, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_51)) begin
		main_5_241_reg <= main_5_241;
		if (start == 1'b0 && ^(main_5_241) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_241_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %242 = getelementptr inbounds [64 x i16]* %New_Real, i32 0, i32 39*/
if (reset) begin main_5_242 = 0; end
		main_5_242 = (`TAG_main_0_New_Real_a + (2 * 32'd39));
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %242 = getelementptr inbounds [64 x i16]* %New_Real, i32 0, i32 39*/
	if ((cur_state == LEGUP_F_main_BB__5_10)) begin
		main_5_242_reg <= main_5_242;
		if (start == 1'b0 && ^(main_5_242) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_242_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %243 = getelementptr inbounds [64 x i16]* %Imag, i32 0, i32 57*/
if (reset) begin main_5_243 = 0; end
		main_5_243 = (`TAG_main_0_Imag_a + (2 * 32'd57));
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %243 = getelementptr inbounds [64 x i16]* %Imag, i32 0, i32 57*/
	if ((cur_state == LEGUP_F_main_BB__5_10)) begin
		main_5_243_reg <= main_5_243;
		if (start == 1'b0 && ^(main_5_243) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_243_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %244 = load i16* %243, align 2, !tbaa !1*/
		main_5_244 = memory_controller_out_b[15:0];
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %244 = load i16* %243, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_51)) begin
		main_5_244_reg <= main_5_244;
		if (start == 1'b0 && ^(main_5_244) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_244_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %245 = getelementptr inbounds [64 x i16]* %New_Imag, i32 0, i32 39*/
if (reset) begin main_5_245 = 0; end
		main_5_245 = (`TAG_main_0_New_Imag_a + (2 * 32'd39));
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %245 = getelementptr inbounds [64 x i16]* %New_Imag, i32 0, i32 39*/
	if ((cur_state == LEGUP_F_main_BB__5_10)) begin
		main_5_245_reg <= main_5_245;
		if (start == 1'b0 && ^(main_5_245) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_245_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %246 = getelementptr inbounds [64 x i16]* %Real, i32 0, i32 5*/
if (reset) begin main_5_246 = 0; end
		main_5_246 = (`TAG_main_0_Real_a + (2 * 32'd5));
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %246 = getelementptr inbounds [64 x i16]* %Real, i32 0, i32 5*/
	if ((cur_state == LEGUP_F_main_BB__5_10)) begin
		main_5_246_reg <= main_5_246;
		if (start == 1'b0 && ^(main_5_246) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_246_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %247 = load i16* %246, align 2, !tbaa !1*/
		main_5_247 = memory_controller_out_a[15:0];
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %247 = load i16* %246, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_52)) begin
		main_5_247_reg <= main_5_247;
		if (start == 1'b0 && ^(main_5_247) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_247_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %248 = getelementptr inbounds [64 x i16]* %New_Real, i32 0, i32 40*/
if (reset) begin main_5_248 = 0; end
		main_5_248 = (`TAG_main_0_New_Real_a + (2 * 32'd40));
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %248 = getelementptr inbounds [64 x i16]* %New_Real, i32 0, i32 40*/
	if ((cur_state == LEGUP_F_main_BB__5_10)) begin
		main_5_248_reg <= main_5_248;
		if (start == 1'b0 && ^(main_5_248) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_248_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %249 = getelementptr inbounds [64 x i16]* %Imag, i32 0, i32 5*/
if (reset) begin main_5_249 = 0; end
		main_5_249 = (`TAG_main_0_Imag_a + (2 * 32'd5));
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %249 = getelementptr inbounds [64 x i16]* %Imag, i32 0, i32 5*/
	if ((cur_state == LEGUP_F_main_BB__5_10)) begin
		main_5_249_reg <= main_5_249;
		if (start == 1'b0 && ^(main_5_249) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_249_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %250 = load i16* %249, align 2, !tbaa !1*/
		main_5_250 = memory_controller_out_b[15:0];
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %250 = load i16* %249, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_52)) begin
		main_5_250_reg <= main_5_250;
		if (start == 1'b0 && ^(main_5_250) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_250_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %251 = getelementptr inbounds [64 x i16]* %New_Imag, i32 0, i32 40*/
if (reset) begin main_5_251 = 0; end
		main_5_251 = (`TAG_main_0_New_Imag_a + (2 * 32'd40));
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %251 = getelementptr inbounds [64 x i16]* %New_Imag, i32 0, i32 40*/
	if ((cur_state == LEGUP_F_main_BB__5_10)) begin
		main_5_251_reg <= main_5_251;
		if (start == 1'b0 && ^(main_5_251) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_251_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %252 = getelementptr inbounds [64 x i16]* %Real, i32 0, i32 37*/
if (reset) begin main_5_252 = 0; end
		main_5_252 = (`TAG_main_0_Real_a + (2 * 32'd37));
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %252 = getelementptr inbounds [64 x i16]* %Real, i32 0, i32 37*/
	if ((cur_state == LEGUP_F_main_BB__5_10)) begin
		main_5_252_reg <= main_5_252;
		if (start == 1'b0 && ^(main_5_252) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_252_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %253 = load i16* %252, align 2, !tbaa !1*/
		main_5_253 = memory_controller_out_a[15:0];
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %253 = load i16* %252, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_53)) begin
		main_5_253_reg <= main_5_253;
		if (start == 1'b0 && ^(main_5_253) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_253_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %254 = getelementptr inbounds [64 x i16]* %New_Real, i32 0, i32 41*/
if (reset) begin main_5_254 = 0; end
		main_5_254 = (`TAG_main_0_New_Real_a + (2 * 32'd41));
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %254 = getelementptr inbounds [64 x i16]* %New_Real, i32 0, i32 41*/
	if ((cur_state == LEGUP_F_main_BB__5_10)) begin
		main_5_254_reg <= main_5_254;
		if (start == 1'b0 && ^(main_5_254) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_254_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %255 = getelementptr inbounds [64 x i16]* %Imag, i32 0, i32 37*/
if (reset) begin main_5_255 = 0; end
		main_5_255 = (`TAG_main_0_Imag_a + (2 * 32'd37));
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %255 = getelementptr inbounds [64 x i16]* %Imag, i32 0, i32 37*/
	if ((cur_state == LEGUP_F_main_BB__5_10)) begin
		main_5_255_reg <= main_5_255;
		if (start == 1'b0 && ^(main_5_255) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_255_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %256 = load i16* %255, align 2, !tbaa !1*/
		main_5_256 = memory_controller_out_b[15:0];
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %256 = load i16* %255, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_53)) begin
		main_5_256_reg <= main_5_256;
		if (start == 1'b0 && ^(main_5_256) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_256_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %257 = getelementptr inbounds [64 x i16]* %New_Imag, i32 0, i32 41*/
if (reset) begin main_5_257 = 0; end
		main_5_257 = (`TAG_main_0_New_Imag_a + (2 * 32'd41));
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %257 = getelementptr inbounds [64 x i16]* %New_Imag, i32 0, i32 41*/
	if ((cur_state == LEGUP_F_main_BB__5_10)) begin
		main_5_257_reg <= main_5_257;
		if (start == 1'b0 && ^(main_5_257) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_257_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %258 = getelementptr inbounds [64 x i16]* %Real, i32 0, i32 21*/
if (reset) begin main_5_258 = 0; end
		main_5_258 = (`TAG_main_0_Real_a + (2 * 32'd21));
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %258 = getelementptr inbounds [64 x i16]* %Real, i32 0, i32 21*/
	if ((cur_state == LEGUP_F_main_BB__5_10)) begin
		main_5_258_reg <= main_5_258;
		if (start == 1'b0 && ^(main_5_258) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_258_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %259 = load i16* %258, align 2, !tbaa !1*/
		main_5_259 = memory_controller_out_a[15:0];
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %259 = load i16* %258, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_54)) begin
		main_5_259_reg <= main_5_259;
		if (start == 1'b0 && ^(main_5_259) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_259_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %260 = getelementptr inbounds [64 x i16]* %New_Real, i32 0, i32 42*/
if (reset) begin main_5_260 = 0; end
		main_5_260 = (`TAG_main_0_New_Real_a + (2 * 32'd42));
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %260 = getelementptr inbounds [64 x i16]* %New_Real, i32 0, i32 42*/
	if ((cur_state == LEGUP_F_main_BB__5_10)) begin
		main_5_260_reg <= main_5_260;
		if (start == 1'b0 && ^(main_5_260) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_260_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %261 = getelementptr inbounds [64 x i16]* %Imag, i32 0, i32 21*/
if (reset) begin main_5_261 = 0; end
		main_5_261 = (`TAG_main_0_Imag_a + (2 * 32'd21));
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %261 = getelementptr inbounds [64 x i16]* %Imag, i32 0, i32 21*/
	if ((cur_state == LEGUP_F_main_BB__5_10)) begin
		main_5_261_reg <= main_5_261;
		if (start == 1'b0 && ^(main_5_261) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_261_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %262 = load i16* %261, align 2, !tbaa !1*/
		main_5_262 = memory_controller_out_b[15:0];
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %262 = load i16* %261, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_54)) begin
		main_5_262_reg <= main_5_262;
		if (start == 1'b0 && ^(main_5_262) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_262_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %263 = getelementptr inbounds [64 x i16]* %New_Imag, i32 0, i32 42*/
if (reset) begin main_5_263 = 0; end
		main_5_263 = (`TAG_main_0_New_Imag_a + (2 * 32'd42));
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %263 = getelementptr inbounds [64 x i16]* %New_Imag, i32 0, i32 42*/
	if ((cur_state == LEGUP_F_main_BB__5_10)) begin
		main_5_263_reg <= main_5_263;
		if (start == 1'b0 && ^(main_5_263) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_263_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %264 = getelementptr inbounds [64 x i16]* %Real, i32 0, i32 53*/
if (reset) begin main_5_264 = 0; end
		main_5_264 = (`TAG_main_0_Real_a + (2 * 32'd53));
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %264 = getelementptr inbounds [64 x i16]* %Real, i32 0, i32 53*/
	if ((cur_state == LEGUP_F_main_BB__5_10)) begin
		main_5_264_reg <= main_5_264;
		if (start == 1'b0 && ^(main_5_264) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_264_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %265 = load i16* %264, align 2, !tbaa !1*/
		main_5_265 = memory_controller_out_a[15:0];
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %265 = load i16* %264, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_55)) begin
		main_5_265_reg <= main_5_265;
		if (start == 1'b0 && ^(main_5_265) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_265_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %266 = getelementptr inbounds [64 x i16]* %New_Real, i32 0, i32 43*/
if (reset) begin main_5_266 = 0; end
		main_5_266 = (`TAG_main_0_New_Real_a + (2 * 32'd43));
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %266 = getelementptr inbounds [64 x i16]* %New_Real, i32 0, i32 43*/
	if ((cur_state == LEGUP_F_main_BB__5_10)) begin
		main_5_266_reg <= main_5_266;
		if (start == 1'b0 && ^(main_5_266) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_266_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %267 = getelementptr inbounds [64 x i16]* %Imag, i32 0, i32 53*/
if (reset) begin main_5_267 = 0; end
		main_5_267 = (`TAG_main_0_Imag_a + (2 * 32'd53));
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %267 = getelementptr inbounds [64 x i16]* %Imag, i32 0, i32 53*/
	if ((cur_state == LEGUP_F_main_BB__5_10)) begin
		main_5_267_reg <= main_5_267;
		if (start == 1'b0 && ^(main_5_267) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_267_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %268 = load i16* %267, align 2, !tbaa !1*/
		main_5_268 = memory_controller_out_b[15:0];
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %268 = load i16* %267, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_55)) begin
		main_5_268_reg <= main_5_268;
		if (start == 1'b0 && ^(main_5_268) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_268_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %269 = getelementptr inbounds [64 x i16]* %New_Imag, i32 0, i32 43*/
if (reset) begin main_5_269 = 0; end
		main_5_269 = (`TAG_main_0_New_Imag_a + (2 * 32'd43));
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %269 = getelementptr inbounds [64 x i16]* %New_Imag, i32 0, i32 43*/
	if ((cur_state == LEGUP_F_main_BB__5_10)) begin
		main_5_269_reg <= main_5_269;
		if (start == 1'b0 && ^(main_5_269) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_269_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %270 = getelementptr inbounds [64 x i16]* %Real, i32 0, i32 13*/
if (reset) begin main_5_270 = 0; end
		main_5_270 = (`TAG_main_0_Real_a + (2 * 32'd13));
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %270 = getelementptr inbounds [64 x i16]* %Real, i32 0, i32 13*/
	if ((cur_state == LEGUP_F_main_BB__5_10)) begin
		main_5_270_reg <= main_5_270;
		if (start == 1'b0 && ^(main_5_270) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_270_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %271 = load i16* %270, align 2, !tbaa !1*/
		main_5_271 = memory_controller_out_a[15:0];
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %271 = load i16* %270, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_56)) begin
		main_5_271_reg <= main_5_271;
		if (start == 1'b0 && ^(main_5_271) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_271_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %272 = getelementptr inbounds [64 x i16]* %New_Real, i32 0, i32 44*/
if (reset) begin main_5_272 = 0; end
		main_5_272 = (`TAG_main_0_New_Real_a + (2 * 32'd44));
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %272 = getelementptr inbounds [64 x i16]* %New_Real, i32 0, i32 44*/
	if ((cur_state == LEGUP_F_main_BB__5_10)) begin
		main_5_272_reg <= main_5_272;
		if (start == 1'b0 && ^(main_5_272) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_272_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %273 = getelementptr inbounds [64 x i16]* %Imag, i32 0, i32 13*/
if (reset) begin main_5_273 = 0; end
		main_5_273 = (`TAG_main_0_Imag_a + (2 * 32'd13));
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %273 = getelementptr inbounds [64 x i16]* %Imag, i32 0, i32 13*/
	if ((cur_state == LEGUP_F_main_BB__5_10)) begin
		main_5_273_reg <= main_5_273;
		if (start == 1'b0 && ^(main_5_273) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_273_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %274 = load i16* %273, align 2, !tbaa !1*/
		main_5_274 = memory_controller_out_b[15:0];
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %274 = load i16* %273, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_56)) begin
		main_5_274_reg <= main_5_274;
		if (start == 1'b0 && ^(main_5_274) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_274_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %275 = getelementptr inbounds [64 x i16]* %New_Imag, i32 0, i32 44*/
if (reset) begin main_5_275 = 0; end
		main_5_275 = (`TAG_main_0_New_Imag_a + (2 * 32'd44));
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %275 = getelementptr inbounds [64 x i16]* %New_Imag, i32 0, i32 44*/
	if ((cur_state == LEGUP_F_main_BB__5_10)) begin
		main_5_275_reg <= main_5_275;
		if (start == 1'b0 && ^(main_5_275) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_275_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %276 = getelementptr inbounds [64 x i16]* %Real, i32 0, i32 45*/
if (reset) begin main_5_276 = 0; end
		main_5_276 = (`TAG_main_0_Real_a + (2 * 32'd45));
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %276 = getelementptr inbounds [64 x i16]* %Real, i32 0, i32 45*/
	if ((cur_state == LEGUP_F_main_BB__5_10)) begin
		main_5_276_reg <= main_5_276;
		if (start == 1'b0 && ^(main_5_276) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_276_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %277 = load i16* %276, align 2, !tbaa !1*/
		main_5_277 = memory_controller_out_a[15:0];
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %277 = load i16* %276, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_57)) begin
		main_5_277_reg <= main_5_277;
		if (start == 1'b0 && ^(main_5_277) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_277_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %278 = getelementptr inbounds [64 x i16]* %New_Real, i32 0, i32 45*/
if (reset) begin main_5_278 = 0; end
		main_5_278 = (`TAG_main_0_New_Real_a + (2 * 32'd45));
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %278 = getelementptr inbounds [64 x i16]* %New_Real, i32 0, i32 45*/
	if ((cur_state == LEGUP_F_main_BB__5_10)) begin
		main_5_278_reg <= main_5_278;
		if (start == 1'b0 && ^(main_5_278) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_278_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %279 = getelementptr inbounds [64 x i16]* %Imag, i32 0, i32 45*/
if (reset) begin main_5_279 = 0; end
		main_5_279 = (`TAG_main_0_Imag_a + (2 * 32'd45));
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %279 = getelementptr inbounds [64 x i16]* %Imag, i32 0, i32 45*/
	if ((cur_state == LEGUP_F_main_BB__5_10)) begin
		main_5_279_reg <= main_5_279;
		if (start == 1'b0 && ^(main_5_279) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_279_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %280 = load i16* %279, align 2, !tbaa !1*/
		main_5_280 = memory_controller_out_b[15:0];
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %280 = load i16* %279, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_57)) begin
		main_5_280_reg <= main_5_280;
		if (start == 1'b0 && ^(main_5_280) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_280_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %281 = getelementptr inbounds [64 x i16]* %New_Imag, i32 0, i32 45*/
if (reset) begin main_5_281 = 0; end
		main_5_281 = (`TAG_main_0_New_Imag_a + (2 * 32'd45));
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %281 = getelementptr inbounds [64 x i16]* %New_Imag, i32 0, i32 45*/
	if ((cur_state == LEGUP_F_main_BB__5_10)) begin
		main_5_281_reg <= main_5_281;
		if (start == 1'b0 && ^(main_5_281) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_281_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %282 = getelementptr inbounds [64 x i16]* %Real, i32 0, i32 29*/
if (reset) begin main_5_282 = 0; end
		main_5_282 = (`TAG_main_0_Real_a + (2 * 32'd29));
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %282 = getelementptr inbounds [64 x i16]* %Real, i32 0, i32 29*/
	if ((cur_state == LEGUP_F_main_BB__5_10)) begin
		main_5_282_reg <= main_5_282;
		if (start == 1'b0 && ^(main_5_282) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_282_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %283 = load i16* %282, align 2, !tbaa !1*/
		main_5_283 = memory_controller_out_a[15:0];
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %283 = load i16* %282, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_58)) begin
		main_5_283_reg <= main_5_283;
		if (start == 1'b0 && ^(main_5_283) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_283_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %284 = getelementptr inbounds [64 x i16]* %New_Real, i32 0, i32 46*/
if (reset) begin main_5_284 = 0; end
		main_5_284 = (`TAG_main_0_New_Real_a + (2 * 32'd46));
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %284 = getelementptr inbounds [64 x i16]* %New_Real, i32 0, i32 46*/
	if ((cur_state == LEGUP_F_main_BB__5_10)) begin
		main_5_284_reg <= main_5_284;
		if (start == 1'b0 && ^(main_5_284) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_284_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %285 = getelementptr inbounds [64 x i16]* %Imag, i32 0, i32 29*/
if (reset) begin main_5_285 = 0; end
		main_5_285 = (`TAG_main_0_Imag_a + (2 * 32'd29));
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %285 = getelementptr inbounds [64 x i16]* %Imag, i32 0, i32 29*/
	if ((cur_state == LEGUP_F_main_BB__5_10)) begin
		main_5_285_reg <= main_5_285;
		if (start == 1'b0 && ^(main_5_285) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_285_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %286 = load i16* %285, align 2, !tbaa !1*/
		main_5_286 = memory_controller_out_b[15:0];
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %286 = load i16* %285, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_58)) begin
		main_5_286_reg <= main_5_286;
		if (start == 1'b0 && ^(main_5_286) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_286_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %287 = getelementptr inbounds [64 x i16]* %New_Imag, i32 0, i32 46*/
if (reset) begin main_5_287 = 0; end
		main_5_287 = (`TAG_main_0_New_Imag_a + (2 * 32'd46));
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %287 = getelementptr inbounds [64 x i16]* %New_Imag, i32 0, i32 46*/
	if ((cur_state == LEGUP_F_main_BB__5_10)) begin
		main_5_287_reg <= main_5_287;
		if (start == 1'b0 && ^(main_5_287) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_287_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %288 = getelementptr inbounds [64 x i16]* %Real, i32 0, i32 61*/
if (reset) begin main_5_288 = 0; end
		main_5_288 = (`TAG_main_0_Real_a + (2 * 32'd61));
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %288 = getelementptr inbounds [64 x i16]* %Real, i32 0, i32 61*/
	if ((cur_state == LEGUP_F_main_BB__5_10)) begin
		main_5_288_reg <= main_5_288;
		if (start == 1'b0 && ^(main_5_288) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_288_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %289 = load i16* %288, align 2, !tbaa !1*/
		main_5_289 = memory_controller_out_a[15:0];
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %289 = load i16* %288, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_59)) begin
		main_5_289_reg <= main_5_289;
		if (start == 1'b0 && ^(main_5_289) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_289_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %290 = getelementptr inbounds [64 x i16]* %New_Real, i32 0, i32 47*/
if (reset) begin main_5_290 = 0; end
		main_5_290 = (`TAG_main_0_New_Real_a + (2 * 32'd47));
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %290 = getelementptr inbounds [64 x i16]* %New_Real, i32 0, i32 47*/
	if ((cur_state == LEGUP_F_main_BB__5_10)) begin
		main_5_290_reg <= main_5_290;
		if (start == 1'b0 && ^(main_5_290) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_290_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %291 = getelementptr inbounds [64 x i16]* %Imag, i32 0, i32 61*/
if (reset) begin main_5_291 = 0; end
		main_5_291 = (`TAG_main_0_Imag_a + (2 * 32'd61));
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %291 = getelementptr inbounds [64 x i16]* %Imag, i32 0, i32 61*/
	if ((cur_state == LEGUP_F_main_BB__5_10)) begin
		main_5_291_reg <= main_5_291;
		if (start == 1'b0 && ^(main_5_291) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_291_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %292 = load i16* %291, align 2, !tbaa !1*/
		main_5_292 = memory_controller_out_b[15:0];
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %292 = load i16* %291, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_59)) begin
		main_5_292_reg <= main_5_292;
		if (start == 1'b0 && ^(main_5_292) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_292_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %293 = getelementptr inbounds [64 x i16]* %New_Imag, i32 0, i32 47*/
if (reset) begin main_5_293 = 0; end
		main_5_293 = (`TAG_main_0_New_Imag_a + (2 * 32'd47));
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %293 = getelementptr inbounds [64 x i16]* %New_Imag, i32 0, i32 47*/
	if ((cur_state == LEGUP_F_main_BB__5_10)) begin
		main_5_293_reg <= main_5_293;
		if (start == 1'b0 && ^(main_5_293) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_293_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %294 = getelementptr inbounds [64 x i16]* %Real, i32 0, i32 3*/
if (reset) begin main_5_294 = 0; end
		main_5_294 = (`TAG_main_0_Real_a + (2 * 32'd3));
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %294 = getelementptr inbounds [64 x i16]* %Real, i32 0, i32 3*/
	if ((cur_state == LEGUP_F_main_BB__5_10)) begin
		main_5_294_reg <= main_5_294;
		if (start == 1'b0 && ^(main_5_294) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_294_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %295 = load i16* %294, align 2, !tbaa !1*/
		main_5_295 = memory_controller_out_a[15:0];
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %295 = load i16* %294, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_60)) begin
		main_5_295_reg <= main_5_295;
		if (start == 1'b0 && ^(main_5_295) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_295_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %296 = getelementptr inbounds [64 x i16]* %New_Real, i32 0, i32 48*/
if (reset) begin main_5_296 = 0; end
		main_5_296 = (`TAG_main_0_New_Real_a + (2 * 32'd48));
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %296 = getelementptr inbounds [64 x i16]* %New_Real, i32 0, i32 48*/
	if ((cur_state == LEGUP_F_main_BB__5_10)) begin
		main_5_296_reg <= main_5_296;
		if (start == 1'b0 && ^(main_5_296) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_296_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %297 = getelementptr inbounds [64 x i16]* %Imag, i32 0, i32 3*/
if (reset) begin main_5_297 = 0; end
		main_5_297 = (`TAG_main_0_Imag_a + (2 * 32'd3));
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %297 = getelementptr inbounds [64 x i16]* %Imag, i32 0, i32 3*/
	if ((cur_state == LEGUP_F_main_BB__5_10)) begin
		main_5_297_reg <= main_5_297;
		if (start == 1'b0 && ^(main_5_297) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_297_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %298 = load i16* %297, align 2, !tbaa !1*/
		main_5_298 = memory_controller_out_b[15:0];
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %298 = load i16* %297, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_60)) begin
		main_5_298_reg <= main_5_298;
		if (start == 1'b0 && ^(main_5_298) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_298_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %299 = getelementptr inbounds [64 x i16]* %New_Imag, i32 0, i32 48*/
if (reset) begin main_5_299 = 0; end
		main_5_299 = (`TAG_main_0_New_Imag_a + (2 * 32'd48));
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %299 = getelementptr inbounds [64 x i16]* %New_Imag, i32 0, i32 48*/
	if ((cur_state == LEGUP_F_main_BB__5_10)) begin
		main_5_299_reg <= main_5_299;
		if (start == 1'b0 && ^(main_5_299) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_299_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %300 = getelementptr inbounds [64 x i16]* %Real, i32 0, i32 35*/
if (reset) begin main_5_300 = 0; end
		main_5_300 = (`TAG_main_0_Real_a + (2 * 32'd35));
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %300 = getelementptr inbounds [64 x i16]* %Real, i32 0, i32 35*/
	if ((cur_state == LEGUP_F_main_BB__5_10)) begin
		main_5_300_reg <= main_5_300;
		if (start == 1'b0 && ^(main_5_300) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_300_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %301 = load i16* %300, align 2, !tbaa !1*/
		main_5_301 = memory_controller_out_a[15:0];
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %301 = load i16* %300, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_61)) begin
		main_5_301_reg <= main_5_301;
		if (start == 1'b0 && ^(main_5_301) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_301_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %302 = getelementptr inbounds [64 x i16]* %New_Real, i32 0, i32 49*/
if (reset) begin main_5_302 = 0; end
		main_5_302 = (`TAG_main_0_New_Real_a + (2 * 32'd49));
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %302 = getelementptr inbounds [64 x i16]* %New_Real, i32 0, i32 49*/
	if ((cur_state == LEGUP_F_main_BB__5_10)) begin
		main_5_302_reg <= main_5_302;
		if (start == 1'b0 && ^(main_5_302) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_302_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %303 = getelementptr inbounds [64 x i16]* %Imag, i32 0, i32 35*/
if (reset) begin main_5_303 = 0; end
		main_5_303 = (`TAG_main_0_Imag_a + (2 * 32'd35));
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %303 = getelementptr inbounds [64 x i16]* %Imag, i32 0, i32 35*/
	if ((cur_state == LEGUP_F_main_BB__5_10)) begin
		main_5_303_reg <= main_5_303;
		if (start == 1'b0 && ^(main_5_303) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_303_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %304 = load i16* %303, align 2, !tbaa !1*/
		main_5_304 = memory_controller_out_b[15:0];
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %304 = load i16* %303, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_61)) begin
		main_5_304_reg <= main_5_304;
		if (start == 1'b0 && ^(main_5_304) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_304_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %305 = getelementptr inbounds [64 x i16]* %New_Imag, i32 0, i32 49*/
if (reset) begin main_5_305 = 0; end
		main_5_305 = (`TAG_main_0_New_Imag_a + (2 * 32'd49));
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %305 = getelementptr inbounds [64 x i16]* %New_Imag, i32 0, i32 49*/
	if ((cur_state == LEGUP_F_main_BB__5_10)) begin
		main_5_305_reg <= main_5_305;
		if (start == 1'b0 && ^(main_5_305) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_305_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %306 = getelementptr inbounds [64 x i16]* %Real, i32 0, i32 19*/
if (reset) begin main_5_306 = 0; end
		main_5_306 = (`TAG_main_0_Real_a + (2 * 32'd19));
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %306 = getelementptr inbounds [64 x i16]* %Real, i32 0, i32 19*/
	if ((cur_state == LEGUP_F_main_BB__5_10)) begin
		main_5_306_reg <= main_5_306;
		if (start == 1'b0 && ^(main_5_306) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_306_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %307 = load i16* %306, align 2, !tbaa !1*/
		main_5_307 = memory_controller_out_a[15:0];
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %307 = load i16* %306, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_62)) begin
		main_5_307_reg <= main_5_307;
		if (start == 1'b0 && ^(main_5_307) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_307_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %308 = getelementptr inbounds [64 x i16]* %New_Real, i32 0, i32 50*/
if (reset) begin main_5_308 = 0; end
		main_5_308 = (`TAG_main_0_New_Real_a + (2 * 32'd50));
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %308 = getelementptr inbounds [64 x i16]* %New_Real, i32 0, i32 50*/
	if ((cur_state == LEGUP_F_main_BB__5_10)) begin
		main_5_308_reg <= main_5_308;
		if (start == 1'b0 && ^(main_5_308) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_308_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %309 = getelementptr inbounds [64 x i16]* %Imag, i32 0, i32 19*/
if (reset) begin main_5_309 = 0; end
		main_5_309 = (`TAG_main_0_Imag_a + (2 * 32'd19));
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %309 = getelementptr inbounds [64 x i16]* %Imag, i32 0, i32 19*/
	if ((cur_state == LEGUP_F_main_BB__5_10)) begin
		main_5_309_reg <= main_5_309;
		if (start == 1'b0 && ^(main_5_309) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_309_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %310 = load i16* %309, align 2, !tbaa !1*/
		main_5_310 = memory_controller_out_b[15:0];
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %310 = load i16* %309, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_62)) begin
		main_5_310_reg <= main_5_310;
		if (start == 1'b0 && ^(main_5_310) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_310_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %311 = getelementptr inbounds [64 x i16]* %New_Imag, i32 0, i32 50*/
if (reset) begin main_5_311 = 0; end
		main_5_311 = (`TAG_main_0_New_Imag_a + (2 * 32'd50));
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %311 = getelementptr inbounds [64 x i16]* %New_Imag, i32 0, i32 50*/
	if ((cur_state == LEGUP_F_main_BB__5_10)) begin
		main_5_311_reg <= main_5_311;
		if (start == 1'b0 && ^(main_5_311) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_311_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %312 = getelementptr inbounds [64 x i16]* %Real, i32 0, i32 51*/
if (reset) begin main_5_312 = 0; end
		main_5_312 = (`TAG_main_0_Real_a + (2 * 32'd51));
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %312 = getelementptr inbounds [64 x i16]* %Real, i32 0, i32 51*/
	if ((cur_state == LEGUP_F_main_BB__5_10)) begin
		main_5_312_reg <= main_5_312;
		if (start == 1'b0 && ^(main_5_312) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_312_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %313 = load i16* %312, align 2, !tbaa !1*/
		main_5_313 = memory_controller_out_a[15:0];
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %313 = load i16* %312, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_63)) begin
		main_5_313_reg <= main_5_313;
		if (start == 1'b0 && ^(main_5_313) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_313_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %314 = getelementptr inbounds [64 x i16]* %New_Real, i32 0, i32 51*/
if (reset) begin main_5_314 = 0; end
		main_5_314 = (`TAG_main_0_New_Real_a + (2 * 32'd51));
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %314 = getelementptr inbounds [64 x i16]* %New_Real, i32 0, i32 51*/
	if ((cur_state == LEGUP_F_main_BB__5_10)) begin
		main_5_314_reg <= main_5_314;
		if (start == 1'b0 && ^(main_5_314) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_314_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %315 = getelementptr inbounds [64 x i16]* %Imag, i32 0, i32 51*/
if (reset) begin main_5_315 = 0; end
		main_5_315 = (`TAG_main_0_Imag_a + (2 * 32'd51));
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %315 = getelementptr inbounds [64 x i16]* %Imag, i32 0, i32 51*/
	if ((cur_state == LEGUP_F_main_BB__5_10)) begin
		main_5_315_reg <= main_5_315;
		if (start == 1'b0 && ^(main_5_315) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_315_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %316 = load i16* %315, align 2, !tbaa !1*/
		main_5_316 = memory_controller_out_b[15:0];
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %316 = load i16* %315, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_63)) begin
		main_5_316_reg <= main_5_316;
		if (start == 1'b0 && ^(main_5_316) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_316_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %317 = getelementptr inbounds [64 x i16]* %New_Imag, i32 0, i32 51*/
if (reset) begin main_5_317 = 0; end
		main_5_317 = (`TAG_main_0_New_Imag_a + (2 * 32'd51));
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %317 = getelementptr inbounds [64 x i16]* %New_Imag, i32 0, i32 51*/
	if ((cur_state == LEGUP_F_main_BB__5_10)) begin
		main_5_317_reg <= main_5_317;
		if (start == 1'b0 && ^(main_5_317) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_317_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %318 = getelementptr inbounds [64 x i16]* %Real, i32 0, i32 11*/
if (reset) begin main_5_318 = 0; end
		main_5_318 = (`TAG_main_0_Real_a + (2 * 32'd11));
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %318 = getelementptr inbounds [64 x i16]* %Real, i32 0, i32 11*/
	if ((cur_state == LEGUP_F_main_BB__5_10)) begin
		main_5_318_reg <= main_5_318;
		if (start == 1'b0 && ^(main_5_318) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_318_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %319 = load i16* %318, align 2, !tbaa !1*/
		main_5_319 = memory_controller_out_a[15:0];
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %319 = load i16* %318, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_64)) begin
		main_5_319_reg <= main_5_319;
		if (start == 1'b0 && ^(main_5_319) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_319_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %320 = getelementptr inbounds [64 x i16]* %New_Real, i32 0, i32 52*/
if (reset) begin main_5_320 = 0; end
		main_5_320 = (`TAG_main_0_New_Real_a + (2 * 32'd52));
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %320 = getelementptr inbounds [64 x i16]* %New_Real, i32 0, i32 52*/
	if ((cur_state == LEGUP_F_main_BB__5_10)) begin
		main_5_320_reg <= main_5_320;
		if (start == 1'b0 && ^(main_5_320) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_320_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %321 = getelementptr inbounds [64 x i16]* %Imag, i32 0, i32 11*/
if (reset) begin main_5_321 = 0; end
		main_5_321 = (`TAG_main_0_Imag_a + (2 * 32'd11));
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %321 = getelementptr inbounds [64 x i16]* %Imag, i32 0, i32 11*/
	if ((cur_state == LEGUP_F_main_BB__5_10)) begin
		main_5_321_reg <= main_5_321;
		if (start == 1'b0 && ^(main_5_321) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_321_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %322 = load i16* %321, align 2, !tbaa !1*/
		main_5_322 = memory_controller_out_b[15:0];
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %322 = load i16* %321, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_64)) begin
		main_5_322_reg <= main_5_322;
		if (start == 1'b0 && ^(main_5_322) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_322_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %323 = getelementptr inbounds [64 x i16]* %New_Imag, i32 0, i32 52*/
if (reset) begin main_5_323 = 0; end
		main_5_323 = (`TAG_main_0_New_Imag_a + (2 * 32'd52));
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %323 = getelementptr inbounds [64 x i16]* %New_Imag, i32 0, i32 52*/
	if ((cur_state == LEGUP_F_main_BB__5_10)) begin
		main_5_323_reg <= main_5_323;
		if (start == 1'b0 && ^(main_5_323) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_323_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %324 = getelementptr inbounds [64 x i16]* %Real, i32 0, i32 43*/
if (reset) begin main_5_324 = 0; end
		main_5_324 = (`TAG_main_0_Real_a + (2 * 32'd43));
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %324 = getelementptr inbounds [64 x i16]* %Real, i32 0, i32 43*/
	if ((cur_state == LEGUP_F_main_BB__5_10)) begin
		main_5_324_reg <= main_5_324;
		if (start == 1'b0 && ^(main_5_324) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_324_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %325 = load i16* %324, align 2, !tbaa !1*/
		main_5_325 = memory_controller_out_a[15:0];
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %325 = load i16* %324, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_65)) begin
		main_5_325_reg <= main_5_325;
		if (start == 1'b0 && ^(main_5_325) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_325_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %326 = getelementptr inbounds [64 x i16]* %New_Real, i32 0, i32 53*/
if (reset) begin main_5_326 = 0; end
		main_5_326 = (`TAG_main_0_New_Real_a + (2 * 32'd53));
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %326 = getelementptr inbounds [64 x i16]* %New_Real, i32 0, i32 53*/
	if ((cur_state == LEGUP_F_main_BB__5_10)) begin
		main_5_326_reg <= main_5_326;
		if (start == 1'b0 && ^(main_5_326) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_326_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %327 = getelementptr inbounds [64 x i16]* %Imag, i32 0, i32 43*/
if (reset) begin main_5_327 = 0; end
		main_5_327 = (`TAG_main_0_Imag_a + (2 * 32'd43));
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %327 = getelementptr inbounds [64 x i16]* %Imag, i32 0, i32 43*/
	if ((cur_state == LEGUP_F_main_BB__5_10)) begin
		main_5_327_reg <= main_5_327;
		if (start == 1'b0 && ^(main_5_327) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_327_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %328 = load i16* %327, align 2, !tbaa !1*/
		main_5_328 = memory_controller_out_b[15:0];
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %328 = load i16* %327, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_65)) begin
		main_5_328_reg <= main_5_328;
		if (start == 1'b0 && ^(main_5_328) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_328_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %329 = getelementptr inbounds [64 x i16]* %New_Imag, i32 0, i32 53*/
if (reset) begin main_5_329 = 0; end
		main_5_329 = (`TAG_main_0_New_Imag_a + (2 * 32'd53));
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %329 = getelementptr inbounds [64 x i16]* %New_Imag, i32 0, i32 53*/
	if ((cur_state == LEGUP_F_main_BB__5_10)) begin
		main_5_329_reg <= main_5_329;
		if (start == 1'b0 && ^(main_5_329) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_329_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %330 = getelementptr inbounds [64 x i16]* %Real, i32 0, i32 27*/
if (reset) begin main_5_330 = 0; end
		main_5_330 = (`TAG_main_0_Real_a + (2 * 32'd27));
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %330 = getelementptr inbounds [64 x i16]* %Real, i32 0, i32 27*/
	if ((cur_state == LEGUP_F_main_BB__5_10)) begin
		main_5_330_reg <= main_5_330;
		if (start == 1'b0 && ^(main_5_330) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_330_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %331 = load i16* %330, align 2, !tbaa !1*/
		main_5_331 = memory_controller_out_a[15:0];
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %331 = load i16* %330, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_66)) begin
		main_5_331_reg <= main_5_331;
		if (start == 1'b0 && ^(main_5_331) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_331_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %332 = getelementptr inbounds [64 x i16]* %New_Real, i32 0, i32 54*/
if (reset) begin main_5_332 = 0; end
		main_5_332 = (`TAG_main_0_New_Real_a + (2 * 32'd54));
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %332 = getelementptr inbounds [64 x i16]* %New_Real, i32 0, i32 54*/
	if ((cur_state == LEGUP_F_main_BB__5_10)) begin
		main_5_332_reg <= main_5_332;
		if (start == 1'b0 && ^(main_5_332) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_332_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %333 = getelementptr inbounds [64 x i16]* %Imag, i32 0, i32 27*/
if (reset) begin main_5_333 = 0; end
		main_5_333 = (`TAG_main_0_Imag_a + (2 * 32'd27));
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %333 = getelementptr inbounds [64 x i16]* %Imag, i32 0, i32 27*/
	if ((cur_state == LEGUP_F_main_BB__5_10)) begin
		main_5_333_reg <= main_5_333;
		if (start == 1'b0 && ^(main_5_333) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_333_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %334 = load i16* %333, align 2, !tbaa !1*/
		main_5_334 = memory_controller_out_b[15:0];
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %334 = load i16* %333, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_66)) begin
		main_5_334_reg <= main_5_334;
		if (start == 1'b0 && ^(main_5_334) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_334_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %335 = getelementptr inbounds [64 x i16]* %New_Imag, i32 0, i32 54*/
if (reset) begin main_5_335 = 0; end
		main_5_335 = (`TAG_main_0_New_Imag_a + (2 * 32'd54));
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %335 = getelementptr inbounds [64 x i16]* %New_Imag, i32 0, i32 54*/
	if ((cur_state == LEGUP_F_main_BB__5_10)) begin
		main_5_335_reg <= main_5_335;
		if (start == 1'b0 && ^(main_5_335) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_335_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %336 = getelementptr inbounds [64 x i16]* %Real, i32 0, i32 59*/
if (reset) begin main_5_336 = 0; end
		main_5_336 = (`TAG_main_0_Real_a + (2 * 32'd59));
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %336 = getelementptr inbounds [64 x i16]* %Real, i32 0, i32 59*/
	if ((cur_state == LEGUP_F_main_BB__5_10)) begin
		main_5_336_reg <= main_5_336;
		if (start == 1'b0 && ^(main_5_336) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_336_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %337 = load i16* %336, align 2, !tbaa !1*/
		main_5_337 = memory_controller_out_a[15:0];
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %337 = load i16* %336, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_67)) begin
		main_5_337_reg <= main_5_337;
		if (start == 1'b0 && ^(main_5_337) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_337_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %338 = getelementptr inbounds [64 x i16]* %New_Real, i32 0, i32 55*/
if (reset) begin main_5_338 = 0; end
		main_5_338 = (`TAG_main_0_New_Real_a + (2 * 32'd55));
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %338 = getelementptr inbounds [64 x i16]* %New_Real, i32 0, i32 55*/
	if ((cur_state == LEGUP_F_main_BB__5_10)) begin
		main_5_338_reg <= main_5_338;
		if (start == 1'b0 && ^(main_5_338) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_338_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %339 = getelementptr inbounds [64 x i16]* %Imag, i32 0, i32 59*/
if (reset) begin main_5_339 = 0; end
		main_5_339 = (`TAG_main_0_Imag_a + (2 * 32'd59));
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %339 = getelementptr inbounds [64 x i16]* %Imag, i32 0, i32 59*/
	if ((cur_state == LEGUP_F_main_BB__5_10)) begin
		main_5_339_reg <= main_5_339;
		if (start == 1'b0 && ^(main_5_339) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_339_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %340 = load i16* %339, align 2, !tbaa !1*/
		main_5_340 = memory_controller_out_b[15:0];
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %340 = load i16* %339, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_67)) begin
		main_5_340_reg <= main_5_340;
		if (start == 1'b0 && ^(main_5_340) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_340_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %341 = getelementptr inbounds [64 x i16]* %New_Imag, i32 0, i32 55*/
if (reset) begin main_5_341 = 0; end
		main_5_341 = (`TAG_main_0_New_Imag_a + (2 * 32'd55));
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %341 = getelementptr inbounds [64 x i16]* %New_Imag, i32 0, i32 55*/
	if ((cur_state == LEGUP_F_main_BB__5_10)) begin
		main_5_341_reg <= main_5_341;
		if (start == 1'b0 && ^(main_5_341) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_341_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %342 = getelementptr inbounds [64 x i16]* %Real, i32 0, i32 7*/
if (reset) begin main_5_342 = 0; end
		main_5_342 = (`TAG_main_0_Real_a + (2 * 32'd7));
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %342 = getelementptr inbounds [64 x i16]* %Real, i32 0, i32 7*/
	if ((cur_state == LEGUP_F_main_BB__5_10)) begin
		main_5_342_reg <= main_5_342;
		if (start == 1'b0 && ^(main_5_342) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_342_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %343 = load i16* %342, align 2, !tbaa !1*/
		main_5_343 = memory_controller_out_a[15:0];
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %343 = load i16* %342, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_68)) begin
		main_5_343_reg <= main_5_343;
		if (start == 1'b0 && ^(main_5_343) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_343_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %344 = getelementptr inbounds [64 x i16]* %New_Real, i32 0, i32 56*/
if (reset) begin main_5_344 = 0; end
		main_5_344 = (`TAG_main_0_New_Real_a + (2 * 32'd56));
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %344 = getelementptr inbounds [64 x i16]* %New_Real, i32 0, i32 56*/
	if ((cur_state == LEGUP_F_main_BB__5_10)) begin
		main_5_344_reg <= main_5_344;
		if (start == 1'b0 && ^(main_5_344) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_344_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %345 = getelementptr inbounds [64 x i16]* %Imag, i32 0, i32 7*/
if (reset) begin main_5_345 = 0; end
		main_5_345 = (`TAG_main_0_Imag_a + (2 * 32'd7));
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %345 = getelementptr inbounds [64 x i16]* %Imag, i32 0, i32 7*/
	if ((cur_state == LEGUP_F_main_BB__5_10)) begin
		main_5_345_reg <= main_5_345;
		if (start == 1'b0 && ^(main_5_345) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_345_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %346 = load i16* %345, align 2, !tbaa !1*/
		main_5_346 = memory_controller_out_b[15:0];
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %346 = load i16* %345, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_68)) begin
		main_5_346_reg <= main_5_346;
		if (start == 1'b0 && ^(main_5_346) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_346_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %347 = getelementptr inbounds [64 x i16]* %New_Imag, i32 0, i32 56*/
if (reset) begin main_5_347 = 0; end
		main_5_347 = (`TAG_main_0_New_Imag_a + (2 * 32'd56));
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %347 = getelementptr inbounds [64 x i16]* %New_Imag, i32 0, i32 56*/
	if ((cur_state == LEGUP_F_main_BB__5_10)) begin
		main_5_347_reg <= main_5_347;
		if (start == 1'b0 && ^(main_5_347) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_347_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %348 = getelementptr inbounds [64 x i16]* %Real, i32 0, i32 39*/
if (reset) begin main_5_348 = 0; end
		main_5_348 = (`TAG_main_0_Real_a + (2 * 32'd39));
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %348 = getelementptr inbounds [64 x i16]* %Real, i32 0, i32 39*/
	if ((cur_state == LEGUP_F_main_BB__5_10)) begin
		main_5_348_reg <= main_5_348;
		if (start == 1'b0 && ^(main_5_348) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_348_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %349 = load i16* %348, align 2, !tbaa !1*/
		main_5_349 = memory_controller_out_a[15:0];
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %349 = load i16* %348, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_69)) begin
		main_5_349_reg <= main_5_349;
		if (start == 1'b0 && ^(main_5_349) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_349_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %350 = getelementptr inbounds [64 x i16]* %New_Real, i32 0, i32 57*/
if (reset) begin main_5_350 = 0; end
		main_5_350 = (`TAG_main_0_New_Real_a + (2 * 32'd57));
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %350 = getelementptr inbounds [64 x i16]* %New_Real, i32 0, i32 57*/
	if ((cur_state == LEGUP_F_main_BB__5_10)) begin
		main_5_350_reg <= main_5_350;
		if (start == 1'b0 && ^(main_5_350) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_350_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %351 = getelementptr inbounds [64 x i16]* %Imag, i32 0, i32 39*/
if (reset) begin main_5_351 = 0; end
		main_5_351 = (`TAG_main_0_Imag_a + (2 * 32'd39));
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %351 = getelementptr inbounds [64 x i16]* %Imag, i32 0, i32 39*/
	if ((cur_state == LEGUP_F_main_BB__5_10)) begin
		main_5_351_reg <= main_5_351;
		if (start == 1'b0 && ^(main_5_351) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_351_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %352 = load i16* %351, align 2, !tbaa !1*/
		main_5_352 = memory_controller_out_b[15:0];
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %352 = load i16* %351, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_69)) begin
		main_5_352_reg <= main_5_352;
		if (start == 1'b0 && ^(main_5_352) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_352_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %353 = getelementptr inbounds [64 x i16]* %New_Imag, i32 0, i32 57*/
if (reset) begin main_5_353 = 0; end
		main_5_353 = (`TAG_main_0_New_Imag_a + (2 * 32'd57));
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %353 = getelementptr inbounds [64 x i16]* %New_Imag, i32 0, i32 57*/
	if ((cur_state == LEGUP_F_main_BB__5_10)) begin
		main_5_353_reg <= main_5_353;
		if (start == 1'b0 && ^(main_5_353) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_353_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %354 = getelementptr inbounds [64 x i16]* %Real, i32 0, i32 23*/
if (reset) begin main_5_354 = 0; end
		main_5_354 = (`TAG_main_0_Real_a + (2 * 32'd23));
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %354 = getelementptr inbounds [64 x i16]* %Real, i32 0, i32 23*/
	if ((cur_state == LEGUP_F_main_BB__5_10)) begin
		main_5_354_reg <= main_5_354;
		if (start == 1'b0 && ^(main_5_354) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_354_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %355 = load i16* %354, align 2, !tbaa !1*/
		main_5_355 = memory_controller_out_a[15:0];
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %355 = load i16* %354, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_70)) begin
		main_5_355_reg <= main_5_355;
		if (start == 1'b0 && ^(main_5_355) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_355_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %356 = getelementptr inbounds [64 x i16]* %New_Real, i32 0, i32 58*/
if (reset) begin main_5_356 = 0; end
		main_5_356 = (`TAG_main_0_New_Real_a + (2 * 32'd58));
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %356 = getelementptr inbounds [64 x i16]* %New_Real, i32 0, i32 58*/
	if ((cur_state == LEGUP_F_main_BB__5_10)) begin
		main_5_356_reg <= main_5_356;
		if (start == 1'b0 && ^(main_5_356) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_356_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %357 = getelementptr inbounds [64 x i16]* %Imag, i32 0, i32 23*/
if (reset) begin main_5_357 = 0; end
		main_5_357 = (`TAG_main_0_Imag_a + (2 * 32'd23));
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %357 = getelementptr inbounds [64 x i16]* %Imag, i32 0, i32 23*/
	if ((cur_state == LEGUP_F_main_BB__5_10)) begin
		main_5_357_reg <= main_5_357;
		if (start == 1'b0 && ^(main_5_357) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_357_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %358 = load i16* %357, align 2, !tbaa !1*/
		main_5_358 = memory_controller_out_b[15:0];
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %358 = load i16* %357, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_70)) begin
		main_5_358_reg <= main_5_358;
		if (start == 1'b0 && ^(main_5_358) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_358_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %359 = getelementptr inbounds [64 x i16]* %New_Imag, i32 0, i32 58*/
if (reset) begin main_5_359 = 0; end
		main_5_359 = (`TAG_main_0_New_Imag_a + (2 * 32'd58));
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %359 = getelementptr inbounds [64 x i16]* %New_Imag, i32 0, i32 58*/
	if ((cur_state == LEGUP_F_main_BB__5_10)) begin
		main_5_359_reg <= main_5_359;
		if (start == 1'b0 && ^(main_5_359) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_359_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %360 = getelementptr inbounds [64 x i16]* %Real, i32 0, i32 55*/
if (reset) begin main_5_360 = 0; end
		main_5_360 = (`TAG_main_0_Real_a + (2 * 32'd55));
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %360 = getelementptr inbounds [64 x i16]* %Real, i32 0, i32 55*/
	if ((cur_state == LEGUP_F_main_BB__5_10)) begin
		main_5_360_reg <= main_5_360;
		if (start == 1'b0 && ^(main_5_360) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_360_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %361 = load i16* %360, align 2, !tbaa !1*/
		main_5_361 = memory_controller_out_a[15:0];
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %361 = load i16* %360, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_71)) begin
		main_5_361_reg <= main_5_361;
		if (start == 1'b0 && ^(main_5_361) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_361_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %362 = getelementptr inbounds [64 x i16]* %New_Real, i32 0, i32 59*/
if (reset) begin main_5_362 = 0; end
		main_5_362 = (`TAG_main_0_New_Real_a + (2 * 32'd59));
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %362 = getelementptr inbounds [64 x i16]* %New_Real, i32 0, i32 59*/
	if ((cur_state == LEGUP_F_main_BB__5_10)) begin
		main_5_362_reg <= main_5_362;
		if (start == 1'b0 && ^(main_5_362) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_362_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %363 = getelementptr inbounds [64 x i16]* %Imag, i32 0, i32 55*/
if (reset) begin main_5_363 = 0; end
		main_5_363 = (`TAG_main_0_Imag_a + (2 * 32'd55));
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %363 = getelementptr inbounds [64 x i16]* %Imag, i32 0, i32 55*/
	if ((cur_state == LEGUP_F_main_BB__5_10)) begin
		main_5_363_reg <= main_5_363;
		if (start == 1'b0 && ^(main_5_363) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_363_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %364 = load i16* %363, align 2, !tbaa !1*/
		main_5_364 = memory_controller_out_b[15:0];
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %364 = load i16* %363, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_71)) begin
		main_5_364_reg <= main_5_364;
		if (start == 1'b0 && ^(main_5_364) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_364_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %365 = getelementptr inbounds [64 x i16]* %New_Imag, i32 0, i32 59*/
if (reset) begin main_5_365 = 0; end
		main_5_365 = (`TAG_main_0_New_Imag_a + (2 * 32'd59));
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %365 = getelementptr inbounds [64 x i16]* %New_Imag, i32 0, i32 59*/
	if ((cur_state == LEGUP_F_main_BB__5_10)) begin
		main_5_365_reg <= main_5_365;
		if (start == 1'b0 && ^(main_5_365) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_365_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %366 = getelementptr inbounds [64 x i16]* %Real, i32 0, i32 15*/
if (reset) begin main_5_366 = 0; end
		main_5_366 = (`TAG_main_0_Real_a + (2 * 32'd15));
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %366 = getelementptr inbounds [64 x i16]* %Real, i32 0, i32 15*/
	if ((cur_state == LEGUP_F_main_BB__5_10)) begin
		main_5_366_reg <= main_5_366;
		if (start == 1'b0 && ^(main_5_366) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_366_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %367 = load i16* %366, align 2, !tbaa !1*/
		main_5_367 = memory_controller_out_a[15:0];
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %367 = load i16* %366, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_72)) begin
		main_5_367_reg <= main_5_367;
		if (start == 1'b0 && ^(main_5_367) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_367_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %368 = getelementptr inbounds [64 x i16]* %New_Real, i32 0, i32 60*/
if (reset) begin main_5_368 = 0; end
		main_5_368 = (`TAG_main_0_New_Real_a + (2 * 32'd60));
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %368 = getelementptr inbounds [64 x i16]* %New_Real, i32 0, i32 60*/
	if ((cur_state == LEGUP_F_main_BB__5_10)) begin
		main_5_368_reg <= main_5_368;
		if (start == 1'b0 && ^(main_5_368) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_368_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %369 = getelementptr inbounds [64 x i16]* %Imag, i32 0, i32 15*/
if (reset) begin main_5_369 = 0; end
		main_5_369 = (`TAG_main_0_Imag_a + (2 * 32'd15));
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %369 = getelementptr inbounds [64 x i16]* %Imag, i32 0, i32 15*/
	if ((cur_state == LEGUP_F_main_BB__5_10)) begin
		main_5_369_reg <= main_5_369;
		if (start == 1'b0 && ^(main_5_369) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_369_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %370 = load i16* %369, align 2, !tbaa !1*/
		main_5_370 = memory_controller_out_b[15:0];
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %370 = load i16* %369, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_72)) begin
		main_5_370_reg <= main_5_370;
		if (start == 1'b0 && ^(main_5_370) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_370_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %371 = getelementptr inbounds [64 x i16]* %New_Imag, i32 0, i32 60*/
if (reset) begin main_5_371 = 0; end
		main_5_371 = (`TAG_main_0_New_Imag_a + (2 * 32'd60));
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %371 = getelementptr inbounds [64 x i16]* %New_Imag, i32 0, i32 60*/
	if ((cur_state == LEGUP_F_main_BB__5_10)) begin
		main_5_371_reg <= main_5_371;
		if (start == 1'b0 && ^(main_5_371) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_371_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %372 = getelementptr inbounds [64 x i16]* %Real, i32 0, i32 47*/
if (reset) begin main_5_372 = 0; end
		main_5_372 = (`TAG_main_0_Real_a + (2 * 32'd47));
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %372 = getelementptr inbounds [64 x i16]* %Real, i32 0, i32 47*/
	if ((cur_state == LEGUP_F_main_BB__5_10)) begin
		main_5_372_reg <= main_5_372;
		if (start == 1'b0 && ^(main_5_372) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_372_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %373 = load i16* %372, align 2, !tbaa !1*/
		main_5_373 = memory_controller_out_a[15:0];
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %373 = load i16* %372, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_73)) begin
		main_5_373_reg <= main_5_373;
		if (start == 1'b0 && ^(main_5_373) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_373_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %374 = getelementptr inbounds [64 x i16]* %New_Real, i32 0, i32 61*/
if (reset) begin main_5_374 = 0; end
		main_5_374 = (`TAG_main_0_New_Real_a + (2 * 32'd61));
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %374 = getelementptr inbounds [64 x i16]* %New_Real, i32 0, i32 61*/
	if ((cur_state == LEGUP_F_main_BB__5_10)) begin
		main_5_374_reg <= main_5_374;
		if (start == 1'b0 && ^(main_5_374) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_374_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %375 = getelementptr inbounds [64 x i16]* %Imag, i32 0, i32 47*/
if (reset) begin main_5_375 = 0; end
		main_5_375 = (`TAG_main_0_Imag_a + (2 * 32'd47));
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %375 = getelementptr inbounds [64 x i16]* %Imag, i32 0, i32 47*/
	if ((cur_state == LEGUP_F_main_BB__5_10)) begin
		main_5_375_reg <= main_5_375;
		if (start == 1'b0 && ^(main_5_375) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_375_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %376 = load i16* %375, align 2, !tbaa !1*/
		main_5_376 = memory_controller_out_b[15:0];
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %376 = load i16* %375, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_73)) begin
		main_5_376_reg <= main_5_376;
		if (start == 1'b0 && ^(main_5_376) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_376_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %377 = getelementptr inbounds [64 x i16]* %New_Imag, i32 0, i32 61*/
if (reset) begin main_5_377 = 0; end
		main_5_377 = (`TAG_main_0_New_Imag_a + (2 * 32'd61));
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %377 = getelementptr inbounds [64 x i16]* %New_Imag, i32 0, i32 61*/
	if ((cur_state == LEGUP_F_main_BB__5_10)) begin
		main_5_377_reg <= main_5_377;
		if (start == 1'b0 && ^(main_5_377) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_377_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %378 = getelementptr inbounds [64 x i16]* %Real, i32 0, i32 31*/
if (reset) begin main_5_378 = 0; end
		main_5_378 = (`TAG_main_0_Real_a + (2 * 32'd31));
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %378 = getelementptr inbounds [64 x i16]* %Real, i32 0, i32 31*/
	if ((cur_state == LEGUP_F_main_BB__5_10)) begin
		main_5_378_reg <= main_5_378;
		if (start == 1'b0 && ^(main_5_378) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_378_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %379 = load i16* %378, align 2, !tbaa !1*/
		main_5_379 = memory_controller_out_a[15:0];
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %379 = load i16* %378, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_74)) begin
		main_5_379_reg <= main_5_379;
		if (start == 1'b0 && ^(main_5_379) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_379_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %380 = getelementptr inbounds [64 x i16]* %New_Real, i32 0, i32 62*/
if (reset) begin main_5_380 = 0; end
		main_5_380 = (`TAG_main_0_New_Real_a + (2 * 32'd62));
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %380 = getelementptr inbounds [64 x i16]* %New_Real, i32 0, i32 62*/
	if ((cur_state == LEGUP_F_main_BB__5_10)) begin
		main_5_380_reg <= main_5_380;
		if (start == 1'b0 && ^(main_5_380) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_380_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %381 = getelementptr inbounds [64 x i16]* %Imag, i32 0, i32 31*/
if (reset) begin main_5_381 = 0; end
		main_5_381 = (`TAG_main_0_Imag_a + (2 * 32'd31));
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %381 = getelementptr inbounds [64 x i16]* %Imag, i32 0, i32 31*/
	if ((cur_state == LEGUP_F_main_BB__5_10)) begin
		main_5_381_reg <= main_5_381;
		if (start == 1'b0 && ^(main_5_381) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_381_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %382 = load i16* %381, align 2, !tbaa !1*/
		main_5_382 = memory_controller_out_b[15:0];
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %382 = load i16* %381, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_74)) begin
		main_5_382_reg <= main_5_382;
		if (start == 1'b0 && ^(main_5_382) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_382_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %383 = getelementptr inbounds [64 x i16]* %New_Imag, i32 0, i32 62*/
if (reset) begin main_5_383 = 0; end
		main_5_383 = (`TAG_main_0_New_Imag_a + (2 * 32'd62));
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %383 = getelementptr inbounds [64 x i16]* %New_Imag, i32 0, i32 62*/
	if ((cur_state == LEGUP_F_main_BB__5_10)) begin
		main_5_383_reg <= main_5_383;
		if (start == 1'b0 && ^(main_5_383) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_383_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %384 = getelementptr inbounds [64 x i16]* %Real, i32 0, i32 63*/
if (reset) begin main_5_384 = 0; end
		main_5_384 = (`TAG_main_0_Real_a + (2 * 32'd63));
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %384 = getelementptr inbounds [64 x i16]* %Real, i32 0, i32 63*/
	if ((cur_state == LEGUP_F_main_BB__5_10)) begin
		main_5_384_reg <= main_5_384;
		if (start == 1'b0 && ^(main_5_384) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_384_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %385 = load i16* %384, align 2, !tbaa !1*/
		main_5_385 = memory_controller_out_a[15:0];
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %385 = load i16* %384, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_75)) begin
		main_5_385_reg <= main_5_385;
		if (start == 1'b0 && ^(main_5_385) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_385_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %386 = getelementptr inbounds [64 x i16]* %New_Real, i32 0, i32 63*/
if (reset) begin main_5_386 = 0; end
		main_5_386 = (`TAG_main_0_New_Real_a + (2 * 32'd63));
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %386 = getelementptr inbounds [64 x i16]* %New_Real, i32 0, i32 63*/
	if ((cur_state == LEGUP_F_main_BB__5_10)) begin
		main_5_386_reg <= main_5_386;
		if (start == 1'b0 && ^(main_5_386) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_386_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %387 = getelementptr inbounds [64 x i16]* %Imag, i32 0, i32 63*/
if (reset) begin main_5_387 = 0; end
		main_5_387 = (`TAG_main_0_Imag_a + (2 * 32'd63));
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %387 = getelementptr inbounds [64 x i16]* %Imag, i32 0, i32 63*/
	if ((cur_state == LEGUP_F_main_BB__5_10)) begin
		main_5_387_reg <= main_5_387;
		if (start == 1'b0 && ^(main_5_387) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_387_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %388 = load i16* %387, align 2, !tbaa !1*/
		main_5_388 = memory_controller_out_b[15:0];
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %388 = load i16* %387, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_75)) begin
		main_5_388_reg <= main_5_388;
		if (start == 1'b0 && ^(main_5_388) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_388_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %5*/
	/*   %389 = getelementptr inbounds [64 x i16]* %New_Imag, i32 0, i32 63*/
if (reset) begin main_5_389 = 0; end
		main_5_389 = (`TAG_main_0_New_Imag_a + (2 * 32'd63));
end
always @(posedge clk) begin
	/* main: %5*/
	/*   %389 = getelementptr inbounds [64 x i16]* %New_Imag, i32 0, i32 63*/
	if ((cur_state == LEGUP_F_main_BB__5_10)) begin
		main_5_389_reg <= main_5_389;
		if (start == 1'b0 && ^(main_5_389) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_5_389_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %indvar = phi i32 [ %indvar.next, %._crit_edge18.i ], [ 0, %5 ]*/
	if (((cur_state == LEGUP_F_main_BB__5_138) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_indvar = 32'd0;
	end
	/* main: %.preheader.i*/
	/*   %indvar = phi i32 [ %indvar.next, %._crit_edge18.i ], [ 0, %5 ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__crit_edge18i_157) & (memory_controller_waitrequest == 1'd0)) & (main__crit_edge18i_exitcond == 1'd0))) */ begin
		main_preheaderi_indvar = main__crit_edge18i_indvarnext;
	end
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %indvar = phi i32 [ %indvar.next, %._crit_edge18.i ], [ 0, %5 ]*/
	if (((cur_state == LEGUP_F_main_BB__5_138) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_indvar_reg <= main_preheaderi_indvar;
		if (start == 1'b0 && ^(main_preheaderi_indvar) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_indvar_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %indvar = phi i32 [ %indvar.next, %._crit_edge18.i ], [ 0, %5 ]*/
	if ((((cur_state == LEGUP_F_main_BB__crit_edge18i_157) & (memory_controller_waitrequest == 1'd0)) & (main__crit_edge18i_exitcond == 1'd0))) begin
		main_preheaderi_indvar_reg <= main_preheaderi_indvar;
		if (start == 1'b0 && ^(main_preheaderi_indvar) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_indvar_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %sin_index.020.i = phi i16 [ %sin_index.1.lcssa.i, %._crit_edge18.i ], [ 0, %5 ]*/
	if (((cur_state == LEGUP_F_main_BB__5_138) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_sin_index020i = 16'd0;
	end
	/* main: %.preheader.i*/
	/*   %sin_index.020.i = phi i16 [ %sin_index.1.lcssa.i, %._crit_edge18.i ], [ 0, %5 ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__crit_edge18i_157) & (memory_controller_waitrequest == 1'd0)) & (main__crit_edge18i_exitcond == 1'd0))) */ begin
		main_preheaderi_sin_index020i = main__crit_edge18i_sin_index1lcssai_reg;
	end
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %sin_index.020.i = phi i16 [ %sin_index.1.lcssa.i, %._crit_edge18.i ], [ 0, %5 ]*/
	if (((cur_state == LEGUP_F_main_BB__5_138) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_sin_index020i_reg <= main_preheaderi_sin_index020i;
		if (start == 1'b0 && ^(main_preheaderi_sin_index020i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_sin_index020i_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %sin_index.020.i = phi i16 [ %sin_index.1.lcssa.i, %._crit_edge18.i ], [ 0, %5 ]*/
	if ((((cur_state == LEGUP_F_main_BB__crit_edge18i_157) & (memory_controller_waitrequest == 1'd0)) & (main__crit_edge18i_exitcond == 1'd0))) begin
		main_preheaderi_sin_index020i_reg <= main_preheaderi_sin_index020i;
		if (start == 1'b0 && ^(main_preheaderi_sin_index020i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_sin_index020i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %l.019.i = phi i32 [ %phitmp.i, %._crit_edge18.i ], [ 1, %5 ]*/
	if (((cur_state == LEGUP_F_main_BB__5_138) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_l019i = 32'd1;
	end
	/* main: %.preheader.i*/
	/*   %l.019.i = phi i32 [ %phitmp.i, %._crit_edge18.i ], [ 1, %5 ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__crit_edge18i_157) & (memory_controller_waitrequest == 1'd0)) & (main__crit_edge18i_exitcond == 1'd0))) */ begin
		main_preheaderi_l019i = main__crit_edge18i_phitmpi;
	end
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %l.019.i = phi i32 [ %phitmp.i, %._crit_edge18.i ], [ 1, %5 ]*/
	if (((cur_state == LEGUP_F_main_BB__5_138) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_l019i_reg <= main_preheaderi_l019i;
		if (start == 1'b0 && ^(main_preheaderi_l019i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_l019i_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %l.019.i = phi i32 [ %phitmp.i, %._crit_edge18.i ], [ 1, %5 ]*/
	if ((((cur_state == LEGUP_F_main_BB__crit_edge18i_157) & (memory_controller_waitrequest == 1'd0)) & (main__crit_edge18i_exitcond == 1'd0))) begin
		main_preheaderi_l019i_reg <= main_preheaderi_l019i;
		if (start == 1'b0 && ^(main_preheaderi_l019i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_l019i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %390 = icmp sgt i32 %l.019.i, 0*/
		main_preheaderi_390 = ($signed(main_preheaderi_l019i_reg) > $signed(32'd0));
end
always @(*) begin
	/* main: %.lr.ph17.i*/
	/*   %391 = shl nsw i32 %l.019.i, 1*/
		main_lrph17i_391 = (main_preheaderi_l019i_reg <<< (32'd1 % 32));
end
always @(posedge clk) begin
	/* main: %.lr.ph17.i*/
	/*   %391 = shl nsw i32 %l.019.i, 1*/
	if ((cur_state == LEGUP_F_main_BB_lrph17i_140)) begin
		main_lrph17i_391_reg <= main_lrph17i_391;
		if (start == 1'b0 && ^(main_lrph17i_391) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph17i_391_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph17.i*/
	/*   %392 = add i16 %sin_index.020.i, 2*/
		main_lrph17i_392 = (main_preheaderi_sin_index020i_reg + 16'd2);
end
always @(posedge clk) begin
	/* main: %.lr.ph17.i*/
	/*   %392 = add i16 %sin_index.020.i, 2*/
	if ((cur_state == LEGUP_F_main_BB_lrph17i_140)) begin
		main_lrph17i_392_reg <= main_lrph17i_392;
		if (start == 1'b0 && ^(main_lrph17i_392) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph17i_392_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %393*/
	/*   %394 = phi i16 [ 0, %.lr.ph17.i ], [ %471, %._crit_edge.i ]*/
	if (((cur_state == LEGUP_F_main_BB_lrph17i_140) & (memory_controller_waitrequest == 1'd0))) begin
		main_393_394 = 16'd0;
	end
	/* main: %393*/
	/*   %394 = phi i16 [ 0, %.lr.ph17.i ], [ %471, %._crit_edge.i ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__crit_edgei_155) & (memory_controller_waitrequest == 1'd0)) & (main__crit_edgei_473 == 1'd1))) */ begin
		main_393_394 = main__crit_edgei_471;
	end
end
always @(posedge clk) begin
	/* main: %393*/
	/*   %394 = phi i16 [ 0, %.lr.ph17.i ], [ %471, %._crit_edge.i ]*/
	if (((cur_state == LEGUP_F_main_BB_lrph17i_140) & (memory_controller_waitrequest == 1'd0))) begin
		main_393_394_reg <= main_393_394;
		if (start == 1'b0 && ^(main_393_394) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_393_394_reg"); $finish; end
	end
	/* main: %393*/
	/*   %394 = phi i16 [ 0, %.lr.ph17.i ], [ %471, %._crit_edge.i ]*/
	if ((((cur_state == LEGUP_F_main_BB__crit_edgei_155) & (memory_controller_waitrequest == 1'd0)) & (main__crit_edgei_473 == 1'd1))) begin
		main_393_394_reg <= main_393_394;
		if (start == 1'b0 && ^(main_393_394) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_393_394_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %393*/
	/*   %395 = add i16 %394, 1*/
		main_393_395 = (main_393_394_reg + 16'd1);
end
always @(posedge clk) begin
	/* main: %393*/
	/*   %395 = add i16 %394, 1*/
	if ((cur_state == LEGUP_F_main_BB__393_141)) begin
		main_393_395_reg <= main_393_395;
		if (start == 1'b0 && ^(main_393_395) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_393_395_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %393*/
	/*   %396 = shl i16 %394, 1*/
		main_393_396 = (main_393_394_reg <<< (16'd1 % 16'd16));
end
always @(*) begin
	/* main: %393*/
	/*   %397 = add i16 %392, %396*/
		main_393_397 = (main_lrph17i_392_reg + main_393_396);
end
always @(posedge clk) begin
	/* main: %393*/
	/*   %397 = add i16 %392, %396*/
	if ((cur_state == LEGUP_F_main_BB__393_141)) begin
		main_393_397_reg <= main_393_397;
		if (start == 1'b0 && ^(main_393_397) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_393_397_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %393*/
	/*   %sin_index.115.i = add i16 %sin_index.020.i, %396*/
		main_393_sin_index115i = (main_preheaderi_sin_index020i_reg + main_393_396);
end
always @(*) begin
	/* main: %393*/
	/*   %398 = sext i16 %sin_index.115.i to i32*/
		main_393_398 = $signed(main_393_sin_index115i);
end
always @(posedge clk) begin
	/* main: %393*/
	/*   %398 = sext i16 %sin_index.115.i to i32*/
	if ((cur_state == LEGUP_F_main_BB__393_141)) begin
		main_393_398_reg <= main_393_398;
		if (start == 1'b0 && ^(main_393_398) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_393_398_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %393*/
	/*   %399 = icmp slt i16 %394, 64*/
		main_393_399 = ($signed(main_393_394_reg) < $signed(16'd64));
end
always @(*) begin
	/* main: %.lr.ph.i*/
	/*   %400 = add nsw i32 %398, 1*/
		main_lrphi_400 = (main_393_398_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %.lr.ph.i*/
	/*   %400 = add nsw i32 %398, 1*/
	if ((cur_state == LEGUP_F_main_BB_lrphi_142)) begin
		main_lrphi_400_reg <= main_lrphi_400;
		if (start == 1'b0 && ^(main_lrphi_400) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphi_400_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i*/
	/*   %401 = getelementptr inbounds [126 x i16]* @sin_lookup, i32 0, i32 %400*/
		main_lrphi_401 = (`TAG_g_sin_lookup_a + (2 * main_lrphi_400_reg));
end
always @(*) begin
	/* main: %.lr.ph.i*/
	/*   %402 = load i16* %401, align 2, !tbaa !1*/
		main_lrphi_402 = memory_controller_out_a[15:0];
end
always @(*) begin
	/* main: %.lr.ph.i*/
	/*   %403 = getelementptr inbounds [126 x i16]* @sin_lookup, i32 0, i32 %398*/
		main_lrphi_403 = (`TAG_g_sin_lookup_a + (2 * main_393_398_reg));
end
always @(*) begin
	/* main: %.lr.ph.i*/
	/*   %404 = load i16* %403, align 2, !tbaa !1*/
		main_lrphi_404 = memory_controller_out_a[15:0];
end
always @(*) begin
	/* main: %.lr.ph.i*/
	/*   %405 = sext i16 %404 to i32*/
		main_lrphi_405 = $signed(main_lrphi_404);
end
always @(posedge clk) begin
	/* main: %.lr.ph.i*/
	/*   %405 = sext i16 %404 to i32*/
	if ((cur_state == LEGUP_F_main_BB_lrphi_144)) begin
		main_lrphi_405_reg <= main_lrphi_405;
		if (start == 1'b0 && ^(main_lrphi_405) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphi_405_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i*/
	/*   %406 = sext i16 %402 to i32*/
		main_lrphi_406 = $signed(main_lrphi_402);
end
always @(posedge clk) begin
	/* main: %.lr.ph.i*/
	/*   %406 = sext i16 %402 to i32*/
	if ((cur_state == LEGUP_F_main_BB_lrphi_145)) begin
		main_lrphi_406_reg <= main_lrphi_406;
		if (start == 1'b0 && ^(main_lrphi_406) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphi_406_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %407*/
	/*   %.in.i = phi i16 [ %394, %.lr.ph.i ], [ %469, %407 ]*/
	if (((cur_state == LEGUP_F_main_BB_lrphi_145) & (memory_controller_waitrequest == 1'd0))) begin
		main_407_ini = main_393_394_reg;
	end
	/* main: %407*/
	/*   %.in.i = phi i16 [ %394, %.lr.ph.i ], [ %469, %407 ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__407_153) & (memory_controller_waitrequest == 1'd0)) & (main_407_470_reg == 1'd1))) */ begin
		main_407_ini = main_407_469_reg;
	end
end
always @(posedge clk) begin
	/* main: %407*/
	/*   %.in.i = phi i16 [ %394, %.lr.ph.i ], [ %469, %407 ]*/
	if (((cur_state == LEGUP_F_main_BB_lrphi_145) & (memory_controller_waitrequest == 1'd0))) begin
		main_407_ini_reg <= main_407_ini;
		if (start == 1'b0 && ^(main_407_ini) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_407_ini_reg"); $finish; end
	end
	/* main: %407*/
	/*   %.in.i = phi i16 [ %394, %.lr.ph.i ], [ %469, %407 ]*/
	if ((((cur_state == LEGUP_F_main_BB__407_153) & (memory_controller_waitrequest == 1'd0)) & (main_407_470_reg == 1'd1))) begin
		main_407_ini_reg <= main_407_ini;
		if (start == 1'b0 && ^(main_407_ini) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_407_ini_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %407*/
	/*   %408 = sext i16 %.in.i to i32*/
		main_407_408 = $signed(main_407_ini_reg);
end
always @(*) begin
	/* main: %407*/
	/*   %409 = add nsw i32 %408, %l.019.i*/
		main_407_409 = (main_407_408 + main_preheaderi_l019i_reg);
end
always @(*) begin
	/* main: %407*/
	/*   %sext1.i = shl i32 %409, 16*/
		main_407_sext1i = (main_407_409 <<< (32'd16 % 32));
end
always @(*) begin
	/* main: %407*/
	/*   %410 = ashr exact i32 %sext1.i, 16*/
		main_407_410 = ($signed(main_407_sext1i) >>> 32'd16);
end
always @(posedge clk) begin
	/* main: %407*/
	/*   %410 = ashr exact i32 %sext1.i, 16*/
	if ((cur_state == LEGUP_F_main_BB__407_146)) begin
		main_407_410_reg <= main_407_410;
		if (start == 1'b0 && ^(main_407_410) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_407_410_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %407*/
	/*   %411 = getelementptr inbounds [64 x i16]* %New_Imag, i32 0, i32 %410*/
		main_407_411 = (`TAG_main_0_New_Imag_a + (2 * main_407_410_reg));
end
always @(posedge clk) begin
	/* main: %407*/
	/*   %411 = getelementptr inbounds [64 x i16]* %New_Imag, i32 0, i32 %410*/
	if ((cur_state == LEGUP_F_main_BB__407_147)) begin
		main_407_411_reg <= main_407_411;
		if (start == 1'b0 && ^(main_407_411) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_407_411_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %407*/
	/*   %412 = load i16* %411, align 2, !tbaa !1*/
		main_407_412 = memory_controller_out_a[15:0];
end
always @(*) begin
	/* main: %407*/
	/*   %413 = sext i16 %412 to i32*/
		main_407_413 = $signed(main_407_412);
end
always @(*) begin
	main_407_414 = main_407_414_stage0_reg;
end
always @(*) begin
	/* main: %407*/
	/*   %415 = lshr i32 %414, 15*/
		main_407_415 = (main_407_414 >>> (32'd15 % 32));
end
always @(*) begin
	/* main: %407*/
	/*   %416 = lshr i32 %414, 14*/
		main_407_416 = (main_407_414 >>> (32'd14 % 32));
end
always @(*) begin
	/* main: %407*/
	/*   %417 = and i32 %416, 1*/
		main_407_417 = (main_407_416 & 32'd1);
end
always @(*) begin
	/* main: %407*/
	/*   %418 = getelementptr inbounds [64 x i16]* %New_Real, i32 0, i32 %410*/
		main_407_418 = (`TAG_main_0_New_Real_a + (2 * main_407_410_reg));
end
always @(posedge clk) begin
	/* main: %407*/
	/*   %418 = getelementptr inbounds [64 x i16]* %New_Real, i32 0, i32 %410*/
	if ((cur_state == LEGUP_F_main_BB__407_147)) begin
		main_407_418_reg <= main_407_418;
		if (start == 1'b0 && ^(main_407_418) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_407_418_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %407*/
	/*   %419 = load i16* %418, align 2, !tbaa !1*/
		main_407_419 = memory_controller_out_b[15:0];
end
always @(*) begin
	/* main: %407*/
	/*   %420 = sext i16 %419 to i32*/
		main_407_420 = $signed(main_407_419);
end
always @(*) begin
	main_407_421 = main_407_421_stage0_reg;
end
always @(*) begin
	/* main: %407*/
	/*   %422 = lshr i32 %421, 15*/
		main_407_422 = (main_407_421 >>> (32'd15 % 32));
end
always @(*) begin
	/* main: %407*/
	/*   %423 = lshr i32 %421, 14*/
		main_407_423 = (main_407_421 >>> (32'd14 % 32));
end
always @(*) begin
	/* main: %407*/
	/*   %424 = and i32 %423, 1*/
		main_407_424 = (main_407_423 & 32'd1);
end
always @(*) begin
	/* main: %407*/
	/*   %.neg12.i = add nuw nsw i32 %417, %415*/
		main_407_neg12i = (main_407_417 + main_407_415);
end
always @(*) begin
	/* main: %407*/
	/*   %425 = sub i32 %.neg12.i, %422*/
		main_407_425 = (main_407_neg12i - main_407_422);
end
always @(*) begin
	/* main: %407*/
	/*   %426 = sub i32 %425, %424*/
		main_407_426 = (main_407_425 - main_407_424);
end
always @(*) begin
	main_407_427 = main_407_427_stage0_reg;
end
always @(*) begin
	/* main: %407*/
	/*   %428 = lshr i32 %427, 15*/
		main_407_428 = (main_407_427 >>> (32'd15 % 32));
end
always @(*) begin
	/* main: %407*/
	/*   %429 = lshr i32 %427, 14*/
		main_407_429 = (main_407_427 >>> (32'd14 % 32));
end
always @(*) begin
	/* main: %407*/
	/*   %430 = and i32 %429, 1*/
		main_407_430 = (main_407_429 & 32'd1);
end
always @(*) begin
	main_407_431 = main_407_431_stage0_reg;
end
always @(*) begin
	/* main: %407*/
	/*   %432 = lshr i32 %431, 15*/
		main_407_432 = (main_407_431 >>> (32'd15 % 32));
end
always @(*) begin
	/* main: %407*/
	/*   %433 = lshr i32 %431, 14*/
		main_407_433 = (main_407_431 >>> (32'd14 % 32));
end
always @(*) begin
	/* main: %407*/
	/*   %434 = and i32 %433, 1*/
		main_407_434 = (main_407_433 & 32'd1);
end
always @(*) begin
	/* main: %407*/
	/*   %435 = add nuw nsw i32 %428, %432*/
		main_407_435 = (main_407_428 + main_407_432);
end
always @(*) begin
	/* main: %407*/
	/*   %436 = add nuw nsw i32 %435, %434*/
		main_407_436 = (main_407_435 + main_407_434);
end
always @(*) begin
	/* main: %407*/
	/*   %437 = add nuw nsw i32 %436, %430*/
		main_407_437 = (main_407_436 + main_407_430);
end
always @(*) begin
	/* main: %407*/
	/*   %438 = getelementptr inbounds [64 x i16]* %New_Imag, i32 0, i32 %408*/
		main_407_438 = (`TAG_main_0_New_Imag_a + (2 * main_407_408));
end
always @(posedge clk) begin
	/* main: %407*/
	/*   %438 = getelementptr inbounds [64 x i16]* %New_Imag, i32 0, i32 %408*/
	if ((cur_state == LEGUP_F_main_BB__407_146)) begin
		main_407_438_reg <= main_407_438;
		if (start == 1'b0 && ^(main_407_438) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_407_438_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %407*/
	/*   %439 = load i16* %438, align 2, !tbaa !1*/
		main_407_439 = memory_controller_out_a[15:0];
end
always @(*) begin
	/* main: %407*/
	/*   %440 = sext i16 %439 to i32*/
		main_407_440 = $signed(main_407_439);
end
always @(posedge clk) begin
	/* main: %407*/
	/*   %440 = sext i16 %439 to i32*/
	if ((cur_state == LEGUP_F_main_BB__407_150)) begin
		main_407_440_reg <= main_407_440;
		if (start == 1'b0 && ^(main_407_440) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_407_440_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %407*/
	/*   %sext9.i = shl i32 %426, 16*/
		main_407_sext9i = (main_407_426 <<< (32'd16 % 32));
end
always @(*) begin
	/* main: %407*/
	/*   %441 = ashr exact i32 %sext9.i, 16*/
		main_407_441 = ($signed(main_407_sext9i) >>> 32'd16);
end
always @(posedge clk) begin
	/* main: %407*/
	/*   %441 = ashr exact i32 %sext9.i, 16*/
	if ((cur_state == LEGUP_F_main_BB__407_150)) begin
		main_407_441_reg <= main_407_441;
		if (start == 1'b0 && ^(main_407_441) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_407_441_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %407*/
	/*   %sext10.i = shl i32 %437, 16*/
		main_407_sext10i = (main_407_437 <<< (32'd16 % 32));
end
always @(*) begin
	/* main: %407*/
	/*   %442 = ashr exact i32 %sext10.i, 16*/
		main_407_442 = ($signed(main_407_sext10i) >>> 32'd16);
end
always @(*) begin
	main_407_443 = main_407_443_stage0_reg;
end
always @(*) begin
	/* main: %407*/
	/*   %444 = getelementptr inbounds [64 x i16]* %New_Real, i32 0, i32 %408*/
		main_407_444 = (`TAG_main_0_New_Real_a + (2 * main_407_408));
end
always @(posedge clk) begin
	/* main: %407*/
	/*   %444 = getelementptr inbounds [64 x i16]* %New_Real, i32 0, i32 %408*/
	if ((cur_state == LEGUP_F_main_BB__407_146)) begin
		main_407_444_reg <= main_407_444;
		if (start == 1'b0 && ^(main_407_444) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_407_444_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %407*/
	/*   %445 = load i16* %444, align 2, !tbaa !1*/
		main_407_445 = memory_controller_out_b[15:0];
end
always @(*) begin
	/* main: %407*/
	/*   %446 = sext i16 %445 to i32*/
		main_407_446 = $signed(main_407_445);
end
always @(posedge clk) begin
	/* main: %407*/
	/*   %446 = sext i16 %445 to i32*/
	if ((cur_state == LEGUP_F_main_BB__407_150)) begin
		main_407_446_reg <= main_407_446;
		if (start == 1'b0 && ^(main_407_446) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_407_446_reg"); $finish; end
	end
end
always @(*) begin
	main_407_447 = main_407_447_stage0_reg;
end
always @(*) begin
	/* main: %407*/
	/*   %448 = add i32 %447, %440*/
		main_407_448 = (main_407_447 + main_407_440_reg);
end
always @(*) begin
	/* main: %407*/
	/*   %449 = add i32 %448, %443*/
		main_407_449 = (main_407_448 + main_407_443);
end
always @(*) begin
	/* main: %407*/
	/*   %450 = sub i32 %446, %447*/
		main_407_450 = (main_407_446_reg - main_407_447);
end
always @(*) begin
	/* main: %407*/
	/*   %451 = add i32 %450, %443*/
		main_407_451 = (main_407_450 + main_407_443);
end
always @(*) begin
	/* main: %407*/
	/*   %sext4.i = shl i32 %449, 16*/
		main_407_sext4i = (main_407_449 <<< (32'd16 % 32));
end
always @(*) begin
	/* main: %407*/
	/*   %452 = ashr exact i32 %sext4.i, 16*/
		main_407_452 = ($signed(main_407_sext4i) >>> 32'd16);
end
always @(*) begin
	/* main: %407*/
	/*   %453 = add i32 %449, %441*/
		main_407_453 = (main_407_449 + main_407_441_reg);
end
always @(*) begin
	/* main: %407*/
	/*   %454 = shl i32 %453, 16*/
		main_407_454 = (main_407_453 <<< (32'd16 % 32));
end
always @(*) begin
	/* main: %407*/
	/*   %sext5.i = ashr exact i32 %454, 16*/
		main_407_sext5i = ($signed(main_407_454) >>> 32'd16);
end
always @(*) begin
	/* main: %407*/
	/*   %455 = add nsw i32 %452, %441*/
		main_407_455 = (main_407_452 + main_407_441_reg);
end
always @(*) begin
	/* main: %407*/
	/*   %456 = sub i32 %455, %sext5.i*/
		main_407_456 = (main_407_455 - main_407_sext5i);
end
always @(*) begin
	/* main: %407*/
	/*   %457 = trunc i32 %456 to i16*/
		main_407_457 = main_407_456[15:0];
end
always @(*) begin
	/* main: %407*/
	/*   %sext7.i = shl i32 %451, 16*/
		main_407_sext7i = (main_407_451 <<< (32'd16 % 32));
end
always @(*) begin
	/* main: %407*/
	/*   %458 = ashr exact i32 %sext7.i, 16*/
		main_407_458 = ($signed(main_407_sext7i) >>> 32'd16);
end
always @(*) begin
	/* main: %407*/
	/*   %459 = sub i32 %458, %441*/
		main_407_459 = (main_407_458 - main_407_441_reg);
end
always @(*) begin
	/* main: %407*/
	/*   %460 = add nsw i32 %459, %sext5.i*/
		main_407_460 = (main_407_459 + main_407_sext5i);
end
always @(*) begin
	/* main: %407*/
	/*   %461 = trunc i32 %460 to i16*/
		main_407_461 = main_407_460[15:0];
end
always @(*) begin
	/* main: %407*/
	/*   %462 = add nsw i32 %458, %452*/
		main_407_462 = (main_407_458 + main_407_452);
end
always @(*) begin
	/* main: %407*/
	/*   %463 = add nsw i32 %462, %sext5.i*/
		main_407_463 = (main_407_462 + main_407_sext5i);
end
always @(*) begin
	/* main: %407*/
	/*   %464 = trunc i32 %463 to i16*/
		main_407_464 = main_407_463[15:0];
end
always @(posedge clk) begin
	/* main: %407*/
	/*   %464 = trunc i32 %463 to i16*/
	if ((cur_state == LEGUP_F_main_BB__407_151)) begin
		main_407_464_reg <= main_407_464;
		if (start == 1'b0 && ^(main_407_464) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_407_464_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %407*/
	/*   %465 = add nsw i32 %458, %441*/
		main_407_465 = (main_407_458 + main_407_441_reg);
end
always @(*) begin
	/* main: %407*/
	/*   %466 = add nsw i32 %465, %452*/
		main_407_466 = (main_407_465 + main_407_452);
end
always @(*) begin
	/* main: %407*/
	/*   %467 = trunc i32 %466 to i16*/
		main_407_467 = main_407_466[15:0];
end
always @(posedge clk) begin
	/* main: %407*/
	/*   %467 = trunc i32 %466 to i16*/
	if ((cur_state == LEGUP_F_main_BB__407_151)) begin
		main_407_467_reg <= main_407_467;
		if (start == 1'b0 && ^(main_407_467) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_407_467_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %407*/
	/*   %468 = add nsw i32 %408, %391*/
		main_407_468 = (main_407_408 + main_lrph17i_391_reg);
end
always @(*) begin
	/* main: %407*/
	/*   %469 = trunc i32 %468 to i16*/
		main_407_469 = main_407_468[15:0];
end
always @(posedge clk) begin
	/* main: %407*/
	/*   %469 = trunc i32 %468 to i16*/
	if ((cur_state == LEGUP_F_main_BB__407_146)) begin
		main_407_469_reg <= main_407_469;
		if (start == 1'b0 && ^(main_407_469) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_407_469_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %407*/
	/*   %470 = icmp slt i16 %469, 64*/
		main_407_470 = ($signed(main_407_469) < $signed(16'd64));
end
always @(posedge clk) begin
	/* main: %407*/
	/*   %470 = icmp slt i16 %469, 64*/
	if ((cur_state == LEGUP_F_main_BB__407_146)) begin
		main_407_470_reg <= main_407_470;
		if (start == 1'b0 && ^(main_407_470) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_407_470_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %._crit_edge.i*/
	/*   %471 = add i16 %394, 1*/
		main__crit_edgei_471 = (main_393_394_reg + 16'd1);
end
always @(*) begin
	/* main: %._crit_edge.i*/
	/*   %472 = sext i16 %395 to i32*/
		main__crit_edgei_472 = $signed(main_393_395_reg);
end
always @(*) begin
	/* main: %._crit_edge.i*/
	/*   %473 = icmp slt i32 %472, %l.019.i*/
		main__crit_edgei_473 = ($signed(main__crit_edgei_472) < $signed(main_preheaderi_l019i_reg));
end
always @(*) begin
	/* main: %._crit_edge18.i*/
	/*   %sin_index.1.lcssa.i = phi i16 [ %sin_index.020.i, %.preheader.i ], [ %397, %._crit_edge18.i.loopexit ]*/
	if ((((cur_state == LEGUP_F_main_BB_preheaderi_139) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_390 == 1'd0))) begin
		main__crit_edge18i_sin_index1lcssai = main_preheaderi_sin_index020i_reg;
	end
	/* main: %._crit_edge18.i*/
	/*   %sin_index.1.lcssa.i = phi i16 [ %sin_index.020.i, %.preheader.i ], [ %397, %._crit_edge18.i.loopexit ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__crit_edge18iloopexit_156) & (memory_controller_waitrequest == 1'd0))) */ begin
		main__crit_edge18i_sin_index1lcssai = main_393_397_reg;
	end
end
always @(posedge clk) begin
	/* main: %._crit_edge18.i*/
	/*   %sin_index.1.lcssa.i = phi i16 [ %sin_index.020.i, %.preheader.i ], [ %397, %._crit_edge18.i.loopexit ]*/
	if ((((cur_state == LEGUP_F_main_BB_preheaderi_139) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_390 == 1'd0))) begin
		main__crit_edge18i_sin_index1lcssai_reg <= main__crit_edge18i_sin_index1lcssai;
		if (start == 1'b0 && ^(main__crit_edge18i_sin_index1lcssai) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edge18i_sin_index1lcssai_reg"); $finish; end
	end
	/* main: %._crit_edge18.i*/
	/*   %sin_index.1.lcssa.i = phi i16 [ %sin_index.020.i, %.preheader.i ], [ %397, %._crit_edge18.i.loopexit ]*/
	if (((cur_state == LEGUP_F_main_BB__crit_edge18iloopexit_156) & (memory_controller_waitrequest == 1'd0))) begin
		main__crit_edge18i_sin_index1lcssai_reg <= main__crit_edge18i_sin_index1lcssai;
		if (start == 1'b0 && ^(main__crit_edge18i_sin_index1lcssai) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edge18i_sin_index1lcssai_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %._crit_edge18.i*/
	/*   %sext.i = shl i32 %l.019.i, 17*/
		main__crit_edge18i_sexti = (main_preheaderi_l019i_reg <<< (32'd17 % 32));
end
always @(*) begin
	/* main: %._crit_edge18.i*/
	/*   %phitmp.i = ashr exact i32 %sext.i, 16*/
		main__crit_edge18i_phitmpi = ($signed(main__crit_edge18i_sexti) >>> 32'd16);
end
always @(*) begin
	/* main: %._crit_edge18.i*/
	/*   %indvar.next = add i32 %indvar, 1*/
		main__crit_edge18i_indvarnext = (main_preheaderi_indvar_reg + 32'd1);
end
always @(*) begin
	/* main: %._crit_edge18.i*/
	/*   %exitcond = icmp eq i32 %indvar.next, 6*/
		main__crit_edge18i_exitcond = (main__crit_edge18i_indvarnext == 32'd6);
end
always @(*) begin
	/* main: %fft.exit*/
	/*   %indvars.iv = phi i32 [ %486, %fft.exit ], [ 0, %fft.exit.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_fftexitpreheader_158) & (memory_controller_waitrequest == 1'd0))) begin
		main_fftexit_indvarsiv = 32'd0;
	end
	/* main: %fft.exit*/
	/*   %indvars.iv = phi i32 [ %486, %fft.exit ], [ 0, %fft.exit.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_fftexit_161) & (memory_controller_waitrequest == 1'd0)) & (main_fftexit_exitcond2_reg == 1'd0))) */ begin
		main_fftexit_indvarsiv = main_fftexit_486_reg;
	end
end
always @(posedge clk) begin
	/* main: %fft.exit*/
	/*   %indvars.iv = phi i32 [ %486, %fft.exit ], [ 0, %fft.exit.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_fftexitpreheader_158) & (memory_controller_waitrequest == 1'd0))) begin
		main_fftexit_indvarsiv_reg <= main_fftexit_indvarsiv;
		if (start == 1'b0 && ^(main_fftexit_indvarsiv) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_fftexit_indvarsiv_reg"); $finish; end
	end
	/* main: %fft.exit*/
	/*   %indvars.iv = phi i32 [ %486, %fft.exit ], [ 0, %fft.exit.preheader ]*/
	if ((((cur_state == LEGUP_F_main_BB_fftexit_161) & (memory_controller_waitrequest == 1'd0)) & (main_fftexit_exitcond2_reg == 1'd0))) begin
		main_fftexit_indvarsiv_reg <= main_fftexit_indvarsiv;
		if (start == 1'b0 && ^(main_fftexit_indvarsiv) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_fftexit_indvarsiv_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %fft.exit*/
	/*   %sum.02 = phi i32 [ %485, %fft.exit ], [ 0, %fft.exit.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_fftexitpreheader_158) & (memory_controller_waitrequest == 1'd0))) begin
		main_fftexit_sum02 = 32'd0;
	end
	/* main: %fft.exit*/
	/*   %sum.02 = phi i32 [ %485, %fft.exit ], [ 0, %fft.exit.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_fftexit_161) & (memory_controller_waitrequest == 1'd0)) & (main_fftexit_exitcond2_reg == 1'd0))) */ begin
		main_fftexit_sum02 = main_fftexit_485;
	end
end
always @(posedge clk) begin
	/* main: %fft.exit*/
	/*   %sum.02 = phi i32 [ %485, %fft.exit ], [ 0, %fft.exit.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_fftexitpreheader_158) & (memory_controller_waitrequest == 1'd0))) begin
		main_fftexit_sum02_reg <= main_fftexit_sum02;
		if (start == 1'b0 && ^(main_fftexit_sum02) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_fftexit_sum02_reg"); $finish; end
	end
	/* main: %fft.exit*/
	/*   %sum.02 = phi i32 [ %485, %fft.exit ], [ 0, %fft.exit.preheader ]*/
	if ((((cur_state == LEGUP_F_main_BB_fftexit_161) & (memory_controller_waitrequest == 1'd0)) & (main_fftexit_exitcond2_reg == 1'd0))) begin
		main_fftexit_sum02_reg <= main_fftexit_sum02;
		if (start == 1'b0 && ^(main_fftexit_sum02) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_fftexit_sum02_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %fft.exit*/
	/*   %scevgep = getelementptr [64 x i16]* %New_Imag, i32 0, i32 %indvars.iv*/
		main_fftexit_scevgep = (`TAG_main_0_New_Imag_a + (2 * main_fftexit_indvarsiv_reg));
end
always @(*) begin
	/* main: %fft.exit*/
	/*   %scevgep3 = getelementptr [64 x i16]* %New_Real, i32 0, i32 %indvars.iv*/
		main_fftexit_scevgep3 = (`TAG_main_0_New_Real_a + (2 * main_fftexit_indvarsiv_reg));
end
always @(*) begin
	/* main: %fft.exit*/
	/*   %474 = load i16* %scevgep3, align 2, !tbaa !1*/
		main_fftexit_474 = memory_controller_out_a[15:0];
end
always @(*) begin
	/* main: %fft.exit*/
	/*   %475 = sext i16 %474 to i32*/
		main_fftexit_475 = $signed(main_fftexit_474);
end
always @(*) begin
	/* main: %fft.exit*/
	/*   %476 = icmp slt i16 %474, 0*/
		main_fftexit_476 = ($signed(main_fftexit_474) < $signed(16'd0));
end
always @(*) begin
	/* main: %fft.exit*/
	/*   %477 = sub nsw i32 0, %475*/
		main_fftexit_477 = (32'd0 - main_fftexit_475);
end
always @(*) begin
	/* main: %fft.exit*/
	/*   %478 = select i1 %476, i32 %477, i32 %475*/
		main_fftexit_478 = (main_fftexit_476 ? main_fftexit_477 : main_fftexit_475);
end
always @(*) begin
	/* main: %fft.exit*/
	/*   %479 = add nsw i32 %478, %sum.02*/
		main_fftexit_479 = (main_fftexit_478 + main_fftexit_sum02_reg);
end
always @(*) begin
	/* main: %fft.exit*/
	/*   %480 = load i16* %scevgep, align 2, !tbaa !1*/
		main_fftexit_480 = memory_controller_out_b[15:0];
end
always @(*) begin
	/* main: %fft.exit*/
	/*   %481 = sext i16 %480 to i32*/
		main_fftexit_481 = $signed(main_fftexit_480);
end
always @(*) begin
	/* main: %fft.exit*/
	/*   %482 = icmp slt i16 %480, 0*/
		main_fftexit_482 = ($signed(main_fftexit_480) < $signed(16'd0));
end
always @(*) begin
	/* main: %fft.exit*/
	/*   %483 = sub nsw i32 0, %481*/
		main_fftexit_483 = (32'd0 - main_fftexit_481);
end
always @(*) begin
	/* main: %fft.exit*/
	/*   %484 = select i1 %482, i32 %483, i32 %481*/
		main_fftexit_484 = (main_fftexit_482 ? main_fftexit_483 : main_fftexit_481);
end
always @(*) begin
	/* main: %fft.exit*/
	/*   %485 = add nsw i32 %479, %484*/
		main_fftexit_485 = (main_fftexit_479 + main_fftexit_484);
end
always @(posedge clk) begin
	/* main: %fft.exit*/
	/*   %485 = add nsw i32 %479, %484*/
	if ((cur_state == LEGUP_F_main_BB_fftexit_161)) begin
		main_fftexit_485_reg <= main_fftexit_485;
		if (start == 1'b0 && ^(main_fftexit_485) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_fftexit_485_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %fft.exit*/
	/*   %486 = add nuw nsw i32 %indvars.iv, 1*/
		main_fftexit_486 = (main_fftexit_indvarsiv_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %fft.exit*/
	/*   %486 = add nuw nsw i32 %indvars.iv, 1*/
	if ((cur_state == LEGUP_F_main_BB_fftexit_159)) begin
		main_fftexit_486_reg <= main_fftexit_486;
		if (start == 1'b0 && ^(main_fftexit_486) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_fftexit_486_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %fft.exit*/
	/*   %exitcond2 = icmp eq i32 %486, 64*/
		main_fftexit_exitcond2 = (main_fftexit_486 == 32'd64);
end
always @(posedge clk) begin
	/* main: %fft.exit*/
	/*   %exitcond2 = icmp eq i32 %486, 64*/
	if ((cur_state == LEGUP_F_main_BB_fftexit_159)) begin
		main_fftexit_exitcond2_reg <= main_fftexit_exitcond2;
		if (start == 1'b0 && ^(main_fftexit_exitcond2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_fftexit_exitcond2_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %487*/
	/*   %489 = icmp eq i32 %485, 87100*/
		main_487_489 = (main_fftexit_485_reg == 32'd87100);
end
always @(*) begin
	lpm_mult_main_1_2_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %2 = mul i32 %indvars.iv4, 10*/
	if ((lpm_mult_main_1_2_en == 1'd1)) begin
		main_1_2_stage0_reg <= (main_1_indvarsiv4_reg * 32'd10);
	end
end
always @(*) begin
	lpm_mult_main_407_414_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* main: %407*/
	/*   %414 = mul nsw i32 %413, %405*/
	if ((lpm_mult_main_407_414_en == 1'd1)) begin
		main_407_414_stage0_reg <= (main_407_413 * main_lrphi_405_reg);
	end
end
always @(*) begin
	lpm_mult_main_407_421_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* main: %407*/
	/*   %421 = mul nsw i32 %420, %406*/
	if ((lpm_mult_main_407_421_en == 1'd1)) begin
		main_407_421_stage0_reg <= (main_407_420 * main_lrphi_406_reg);
	end
end
always @(*) begin
	lpm_mult_main_407_427_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* main: %407*/
	/*   %427 = mul nsw i32 %420, %405*/
	if ((lpm_mult_main_407_427_en == 1'd1)) begin
		main_407_427_stage0_reg <= (main_407_420 * main_lrphi_405_reg);
	end
end
always @(*) begin
	lpm_mult_main_407_431_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* main: %407*/
	/*   %431 = mul nsw i32 %413, %406*/
	if ((lpm_mult_main_407_431_en == 1'd1)) begin
		main_407_431_stage0_reg <= (main_407_413 * main_lrphi_406_reg);
	end
end
always @(*) begin
	lpm_mult_main_407_443_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* main: %407*/
	/*   %443 = mul nsw i32 %441, %442*/
	if ((lpm_mult_main_407_443_en == 1'd1)) begin
		main_407_443_stage0_reg <= (main_407_441 * main_407_442);
	end
end
always @(*) begin
	lpm_mult_main_407_447_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* main: %407*/
	/*   %447 = mul nsw i32 %446, %440*/
	if ((lpm_mult_main_407_447_en == 1'd1)) begin
		main_407_447_stage0_reg <= (main_407_446 * main_407_440);
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		finish <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
	/* main: %494*/
	/*   ret i32 %485*/
	if ((cur_state == LEGUP_F_main_BB__494_165)) begin
		finish <= (memory_controller_waitrequest == 1'd0);
		if (start == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
end
always @(*) begin
	memory_controller_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_a = 1'd0;
	end
	/* main: %1*/
	/*   store volatile i16 0, i16* %input_temp, align 2*/
	if ((cur_state == LEGUP_F_main_BB__1_2)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %1*/
	/*   %input_temp.0.input_temp.0.input_temp.0. = load volatile i16* %input_temp, align 2*/
	if ((cur_state == LEGUP_F_main_BB__1_3)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %1*/
	/*   store volatile i16 %3, i16* %input_temp, align 2*/
	if ((cur_state == LEGUP_F_main_BB__1_5)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %1*/
	/*   store i16 %input_temp.0.input_temp.0.input_temp.0., i16* %scevgep6, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_6)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %1*/
	/*   store i16 %input_temp.0.input_temp.0.input_temp.0.1, i16* %scevgep5, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_8)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %5*/
	/*   %10 = load i16* %6, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_10)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %5*/
	/*   %13 = load i16* %12, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_11)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %5*/
	/*   %19 = load i16* %18, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_12)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %5*/
	/*   %25 = load i16* %24, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_13)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %5*/
	/*   %31 = load i16* %30, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_14)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %5*/
	/*   %37 = load i16* %36, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_15)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %5*/
	/*   %43 = load i16* %42, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_16)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %5*/
	/*   %49 = load i16* %48, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_17)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %5*/
	/*   %55 = load i16* %54, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_18)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %5*/
	/*   %61 = load i16* %60, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_19)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %5*/
	/*   %67 = load i16* %66, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_20)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %5*/
	/*   %73 = load i16* %72, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_21)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %5*/
	/*   %79 = load i16* %78, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_22)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %5*/
	/*   %85 = load i16* %84, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_23)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %5*/
	/*   %91 = load i16* %90, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_24)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %5*/
	/*   %97 = load i16* %96, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_25)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %5*/
	/*   %103 = load i16* %102, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_26)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %5*/
	/*   %109 = load i16* %108, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_27)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %5*/
	/*   %115 = load i16* %114, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_28)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %5*/
	/*   %121 = load i16* %120, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_29)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %5*/
	/*   %127 = load i16* %126, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_30)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %5*/
	/*   %133 = load i16* %132, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_31)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %5*/
	/*   %139 = load i16* %138, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_32)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %5*/
	/*   %145 = load i16* %144, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_33)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %5*/
	/*   %151 = load i16* %150, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_34)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %5*/
	/*   %157 = load i16* %156, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_35)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %5*/
	/*   %163 = load i16* %162, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_36)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %5*/
	/*   %169 = load i16* %168, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_37)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %5*/
	/*   %175 = load i16* %174, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_38)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %5*/
	/*   %181 = load i16* %180, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_39)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %5*/
	/*   %187 = load i16* %186, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_40)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %5*/
	/*   %193 = load i16* %192, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_41)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %5*/
	/*   %199 = load i16* %198, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_42)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %5*/
	/*   %205 = load i16* %204, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_43)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %5*/
	/*   %211 = load i16* %210, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_44)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %5*/
	/*   %217 = load i16* %216, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_45)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %5*/
	/*   %223 = load i16* %222, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_46)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %5*/
	/*   %229 = load i16* %228, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_47)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %5*/
	/*   %235 = load i16* %234, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_48)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %5*/
	/*   %241 = load i16* %240, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_49)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %5*/
	/*   %247 = load i16* %246, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_50)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %5*/
	/*   %253 = load i16* %252, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_51)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %5*/
	/*   %259 = load i16* %258, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_52)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %5*/
	/*   %265 = load i16* %264, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_53)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %5*/
	/*   %271 = load i16* %270, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_54)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %5*/
	/*   %277 = load i16* %276, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_55)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %5*/
	/*   %283 = load i16* %282, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_56)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %5*/
	/*   %289 = load i16* %288, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_57)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %5*/
	/*   %295 = load i16* %294, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_58)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %5*/
	/*   %301 = load i16* %300, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_59)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %5*/
	/*   %307 = load i16* %306, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_60)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %5*/
	/*   %313 = load i16* %312, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_61)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %5*/
	/*   %319 = load i16* %318, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_62)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %5*/
	/*   %325 = load i16* %324, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_63)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %5*/
	/*   %331 = load i16* %330, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_64)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %5*/
	/*   %337 = load i16* %336, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_65)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %5*/
	/*   %343 = load i16* %342, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_66)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %5*/
	/*   %349 = load i16* %348, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_67)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %5*/
	/*   %355 = load i16* %354, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_68)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %5*/
	/*   %361 = load i16* %360, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_69)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %5*/
	/*   %367 = load i16* %366, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_70)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %5*/
	/*   %373 = load i16* %372, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_71)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %5*/
	/*   %379 = load i16* %378, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_72)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %5*/
	/*   %385 = load i16* %384, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_73)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %5*/
	/*   store i16 %10, i16* %8, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_74)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %5*/
	/*   store i16 %13, i16* %14, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_75)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %5*/
	/*   store i16 %19, i16* %20, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_76)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %5*/
	/*   store i16 %25, i16* %26, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_77)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %5*/
	/*   store i16 %31, i16* %32, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_78)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %5*/
	/*   store i16 %37, i16* %38, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_79)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %5*/
	/*   store i16 %43, i16* %44, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_80)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %5*/
	/*   store i16 %49, i16* %50, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_81)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %5*/
	/*   store i16 %55, i16* %56, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_82)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %5*/
	/*   store i16 %61, i16* %62, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_83)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %5*/
	/*   store i16 %67, i16* %68, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_84)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %5*/
	/*   store i16 %73, i16* %74, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_85)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %5*/
	/*   store i16 %79, i16* %80, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_86)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %5*/
	/*   store i16 %85, i16* %86, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_87)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %5*/
	/*   store i16 %91, i16* %92, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_88)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %5*/
	/*   store i16 %97, i16* %98, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_89)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %5*/
	/*   store i16 %103, i16* %104, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_90)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %5*/
	/*   store i16 %109, i16* %110, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_91)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %5*/
	/*   store i16 %115, i16* %116, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_92)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %5*/
	/*   store i16 %121, i16* %122, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_93)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %5*/
	/*   store i16 %127, i16* %128, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_94)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %5*/
	/*   store i16 %133, i16* %134, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_95)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %5*/
	/*   store i16 %139, i16* %140, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_96)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %5*/
	/*   store i16 %145, i16* %146, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_97)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %5*/
	/*   store i16 %151, i16* %152, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_98)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %5*/
	/*   store i16 %157, i16* %158, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_99)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %5*/
	/*   store i16 %163, i16* %164, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_100)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %5*/
	/*   store i16 %169, i16* %170, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_101)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %5*/
	/*   store i16 %175, i16* %176, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_102)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %5*/
	/*   store i16 %181, i16* %182, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_103)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %5*/
	/*   store i16 %187, i16* %188, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_104)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %5*/
	/*   store i16 %193, i16* %194, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_105)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %5*/
	/*   store i16 %199, i16* %200, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_106)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %5*/
	/*   store i16 %205, i16* %206, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_107)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %5*/
	/*   store i16 %211, i16* %212, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_108)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %5*/
	/*   store i16 %217, i16* %218, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_109)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %5*/
	/*   store i16 %223, i16* %224, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_110)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %5*/
	/*   store i16 %229, i16* %230, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_111)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %5*/
	/*   store i16 %235, i16* %236, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_112)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %5*/
	/*   store i16 %241, i16* %242, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_113)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %5*/
	/*   store i16 %247, i16* %248, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_114)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %5*/
	/*   store i16 %253, i16* %254, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_115)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %5*/
	/*   store i16 %259, i16* %260, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_116)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %5*/
	/*   store i16 %265, i16* %266, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_117)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %5*/
	/*   store i16 %271, i16* %272, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_118)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %5*/
	/*   store i16 %277, i16* %278, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_119)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %5*/
	/*   store i16 %283, i16* %284, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_120)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %5*/
	/*   store i16 %289, i16* %290, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_121)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %5*/
	/*   store i16 %295, i16* %296, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_122)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %5*/
	/*   store i16 %301, i16* %302, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_123)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %5*/
	/*   store i16 %307, i16* %308, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_124)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %5*/
	/*   store i16 %313, i16* %314, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_125)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %5*/
	/*   store i16 %319, i16* %320, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_126)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %5*/
	/*   store i16 %325, i16* %326, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_127)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %5*/
	/*   store i16 %331, i16* %332, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_128)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %5*/
	/*   store i16 %337, i16* %338, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_129)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %5*/
	/*   store i16 %343, i16* %344, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_130)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %5*/
	/*   store i16 %349, i16* %350, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_131)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %5*/
	/*   store i16 %355, i16* %356, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_132)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %5*/
	/*   store i16 %361, i16* %362, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_133)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %5*/
	/*   store i16 %367, i16* %368, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_134)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %5*/
	/*   store i16 %373, i16* %374, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_135)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %5*/
	/*   store i16 %379, i16* %380, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_136)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %5*/
	/*   store i16 %385, i16* %386, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_137)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.lr.ph.i*/
	/*   %404 = load i16* %403, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrphi_142)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.lr.ph.i*/
	/*   %402 = load i16* %401, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrphi_143)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %407*/
	/*   %412 = load i16* %411, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__407_147)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %407*/
	/*   %439 = load i16* %438, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__407_148)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %407*/
	/*   store i16 %457, i16* %411, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__407_151)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %407*/
	/*   store i16 %464, i16* %438, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__407_152)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %fft.exit*/
	/*   %474 = load i16* %scevgep3, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_fftexit_159)) begin
		memory_controller_enable_a = 1'd1;
	end
end
always @(*) begin
	memory_controller_address_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_a = 1'd0;
	end
	/* main: %1*/
	/*   store volatile i16 0, i16* %input_temp, align 2*/
	if ((cur_state == LEGUP_F_main_BB__1_2)) begin
		memory_controller_address_a = `TAG_main_0_input_temp_a;
	end
	/* main: %1*/
	/*   %input_temp.0.input_temp.0.input_temp.0. = load volatile i16* %input_temp, align 2*/
	if ((cur_state == LEGUP_F_main_BB__1_3)) begin
		memory_controller_address_a = `TAG_main_0_input_temp_a;
	end
	/* main: %1*/
	/*   store volatile i16 %3, i16* %input_temp, align 2*/
	if ((cur_state == LEGUP_F_main_BB__1_5)) begin
		memory_controller_address_a = `TAG_main_0_input_temp_a;
	end
	/* main: %1*/
	/*   store i16 %input_temp.0.input_temp.0.input_temp.0., i16* %scevgep6, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_6)) begin
		memory_controller_address_a = main_1_scevgep6_reg;
	end
	/* main: %1*/
	/*   store i16 %input_temp.0.input_temp.0.input_temp.0.1, i16* %scevgep5, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_8)) begin
		memory_controller_address_a = main_1_scevgep5_reg;
	end
	/* main: %5*/
	/*   %10 = load i16* %6, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_10)) begin
		memory_controller_address_a = main_5_6;
	end
	/* main: %5*/
	/*   %13 = load i16* %12, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_11)) begin
		memory_controller_address_a = main_5_12_reg;
	end
	/* main: %5*/
	/*   %19 = load i16* %18, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_12)) begin
		memory_controller_address_a = main_5_18_reg;
	end
	/* main: %5*/
	/*   %25 = load i16* %24, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_13)) begin
		memory_controller_address_a = main_5_24_reg;
	end
	/* main: %5*/
	/*   %31 = load i16* %30, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_14)) begin
		memory_controller_address_a = main_5_30_reg;
	end
	/* main: %5*/
	/*   %37 = load i16* %36, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_15)) begin
		memory_controller_address_a = main_5_36_reg;
	end
	/* main: %5*/
	/*   %43 = load i16* %42, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_16)) begin
		memory_controller_address_a = main_5_42_reg;
	end
	/* main: %5*/
	/*   %49 = load i16* %48, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_17)) begin
		memory_controller_address_a = main_5_48_reg;
	end
	/* main: %5*/
	/*   %55 = load i16* %54, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_18)) begin
		memory_controller_address_a = main_5_54_reg;
	end
	/* main: %5*/
	/*   %61 = load i16* %60, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_19)) begin
		memory_controller_address_a = main_5_60_reg;
	end
	/* main: %5*/
	/*   %67 = load i16* %66, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_20)) begin
		memory_controller_address_a = main_5_66_reg;
	end
	/* main: %5*/
	/*   %73 = load i16* %72, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_21)) begin
		memory_controller_address_a = main_5_72_reg;
	end
	/* main: %5*/
	/*   %79 = load i16* %78, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_22)) begin
		memory_controller_address_a = main_5_78_reg;
	end
	/* main: %5*/
	/*   %85 = load i16* %84, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_23)) begin
		memory_controller_address_a = main_5_84_reg;
	end
	/* main: %5*/
	/*   %91 = load i16* %90, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_24)) begin
		memory_controller_address_a = main_5_90_reg;
	end
	/* main: %5*/
	/*   %97 = load i16* %96, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_25)) begin
		memory_controller_address_a = main_5_96_reg;
	end
	/* main: %5*/
	/*   %103 = load i16* %102, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_26)) begin
		memory_controller_address_a = main_5_102_reg;
	end
	/* main: %5*/
	/*   %109 = load i16* %108, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_27)) begin
		memory_controller_address_a = main_5_108_reg;
	end
	/* main: %5*/
	/*   %115 = load i16* %114, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_28)) begin
		memory_controller_address_a = main_5_114_reg;
	end
	/* main: %5*/
	/*   %121 = load i16* %120, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_29)) begin
		memory_controller_address_a = main_5_120_reg;
	end
	/* main: %5*/
	/*   %127 = load i16* %126, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_30)) begin
		memory_controller_address_a = main_5_126_reg;
	end
	/* main: %5*/
	/*   %133 = load i16* %132, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_31)) begin
		memory_controller_address_a = main_5_132_reg;
	end
	/* main: %5*/
	/*   %139 = load i16* %138, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_32)) begin
		memory_controller_address_a = main_5_138_reg;
	end
	/* main: %5*/
	/*   %145 = load i16* %144, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_33)) begin
		memory_controller_address_a = main_5_144_reg;
	end
	/* main: %5*/
	/*   %151 = load i16* %150, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_34)) begin
		memory_controller_address_a = main_5_150_reg;
	end
	/* main: %5*/
	/*   %157 = load i16* %156, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_35)) begin
		memory_controller_address_a = main_5_156_reg;
	end
	/* main: %5*/
	/*   %163 = load i16* %162, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_36)) begin
		memory_controller_address_a = main_5_162_reg;
	end
	/* main: %5*/
	/*   %169 = load i16* %168, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_37)) begin
		memory_controller_address_a = main_5_168_reg;
	end
	/* main: %5*/
	/*   %175 = load i16* %174, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_38)) begin
		memory_controller_address_a = main_5_174_reg;
	end
	/* main: %5*/
	/*   %181 = load i16* %180, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_39)) begin
		memory_controller_address_a = main_5_180_reg;
	end
	/* main: %5*/
	/*   %187 = load i16* %186, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_40)) begin
		memory_controller_address_a = main_5_186_reg;
	end
	/* main: %5*/
	/*   %193 = load i16* %192, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_41)) begin
		memory_controller_address_a = main_5_192_reg;
	end
	/* main: %5*/
	/*   %199 = load i16* %198, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_42)) begin
		memory_controller_address_a = main_5_198_reg;
	end
	/* main: %5*/
	/*   %205 = load i16* %204, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_43)) begin
		memory_controller_address_a = main_5_204_reg;
	end
	/* main: %5*/
	/*   %211 = load i16* %210, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_44)) begin
		memory_controller_address_a = main_5_210_reg;
	end
	/* main: %5*/
	/*   %217 = load i16* %216, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_45)) begin
		memory_controller_address_a = main_5_216_reg;
	end
	/* main: %5*/
	/*   %223 = load i16* %222, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_46)) begin
		memory_controller_address_a = main_5_222_reg;
	end
	/* main: %5*/
	/*   %229 = load i16* %228, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_47)) begin
		memory_controller_address_a = main_5_228_reg;
	end
	/* main: %5*/
	/*   %235 = load i16* %234, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_48)) begin
		memory_controller_address_a = main_5_234_reg;
	end
	/* main: %5*/
	/*   %241 = load i16* %240, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_49)) begin
		memory_controller_address_a = main_5_240_reg;
	end
	/* main: %5*/
	/*   %247 = load i16* %246, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_50)) begin
		memory_controller_address_a = main_5_246_reg;
	end
	/* main: %5*/
	/*   %253 = load i16* %252, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_51)) begin
		memory_controller_address_a = main_5_252_reg;
	end
	/* main: %5*/
	/*   %259 = load i16* %258, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_52)) begin
		memory_controller_address_a = main_5_258_reg;
	end
	/* main: %5*/
	/*   %265 = load i16* %264, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_53)) begin
		memory_controller_address_a = main_5_264_reg;
	end
	/* main: %5*/
	/*   %271 = load i16* %270, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_54)) begin
		memory_controller_address_a = main_5_270_reg;
	end
	/* main: %5*/
	/*   %277 = load i16* %276, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_55)) begin
		memory_controller_address_a = main_5_276_reg;
	end
	/* main: %5*/
	/*   %283 = load i16* %282, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_56)) begin
		memory_controller_address_a = main_5_282_reg;
	end
	/* main: %5*/
	/*   %289 = load i16* %288, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_57)) begin
		memory_controller_address_a = main_5_288_reg;
	end
	/* main: %5*/
	/*   %295 = load i16* %294, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_58)) begin
		memory_controller_address_a = main_5_294_reg;
	end
	/* main: %5*/
	/*   %301 = load i16* %300, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_59)) begin
		memory_controller_address_a = main_5_300_reg;
	end
	/* main: %5*/
	/*   %307 = load i16* %306, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_60)) begin
		memory_controller_address_a = main_5_306_reg;
	end
	/* main: %5*/
	/*   %313 = load i16* %312, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_61)) begin
		memory_controller_address_a = main_5_312_reg;
	end
	/* main: %5*/
	/*   %319 = load i16* %318, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_62)) begin
		memory_controller_address_a = main_5_318_reg;
	end
	/* main: %5*/
	/*   %325 = load i16* %324, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_63)) begin
		memory_controller_address_a = main_5_324_reg;
	end
	/* main: %5*/
	/*   %331 = load i16* %330, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_64)) begin
		memory_controller_address_a = main_5_330_reg;
	end
	/* main: %5*/
	/*   %337 = load i16* %336, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_65)) begin
		memory_controller_address_a = main_5_336_reg;
	end
	/* main: %5*/
	/*   %343 = load i16* %342, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_66)) begin
		memory_controller_address_a = main_5_342_reg;
	end
	/* main: %5*/
	/*   %349 = load i16* %348, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_67)) begin
		memory_controller_address_a = main_5_348_reg;
	end
	/* main: %5*/
	/*   %355 = load i16* %354, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_68)) begin
		memory_controller_address_a = main_5_354_reg;
	end
	/* main: %5*/
	/*   %361 = load i16* %360, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_69)) begin
		memory_controller_address_a = main_5_360_reg;
	end
	/* main: %5*/
	/*   %367 = load i16* %366, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_70)) begin
		memory_controller_address_a = main_5_366_reg;
	end
	/* main: %5*/
	/*   %373 = load i16* %372, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_71)) begin
		memory_controller_address_a = main_5_372_reg;
	end
	/* main: %5*/
	/*   %379 = load i16* %378, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_72)) begin
		memory_controller_address_a = main_5_378_reg;
	end
	/* main: %5*/
	/*   %385 = load i16* %384, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_73)) begin
		memory_controller_address_a = main_5_384_reg;
	end
	/* main: %5*/
	/*   store i16 %10, i16* %8, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_74)) begin
		memory_controller_address_a = main_5_8_reg;
	end
	/* main: %5*/
	/*   store i16 %13, i16* %14, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_75)) begin
		memory_controller_address_a = main_5_14_reg;
	end
	/* main: %5*/
	/*   store i16 %19, i16* %20, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_76)) begin
		memory_controller_address_a = main_5_20_reg;
	end
	/* main: %5*/
	/*   store i16 %25, i16* %26, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_77)) begin
		memory_controller_address_a = main_5_26_reg;
	end
	/* main: %5*/
	/*   store i16 %31, i16* %32, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_78)) begin
		memory_controller_address_a = main_5_32_reg;
	end
	/* main: %5*/
	/*   store i16 %37, i16* %38, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_79)) begin
		memory_controller_address_a = main_5_38_reg;
	end
	/* main: %5*/
	/*   store i16 %43, i16* %44, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_80)) begin
		memory_controller_address_a = main_5_44_reg;
	end
	/* main: %5*/
	/*   store i16 %49, i16* %50, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_81)) begin
		memory_controller_address_a = main_5_50_reg;
	end
	/* main: %5*/
	/*   store i16 %55, i16* %56, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_82)) begin
		memory_controller_address_a = main_5_56_reg;
	end
	/* main: %5*/
	/*   store i16 %61, i16* %62, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_83)) begin
		memory_controller_address_a = main_5_62_reg;
	end
	/* main: %5*/
	/*   store i16 %67, i16* %68, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_84)) begin
		memory_controller_address_a = main_5_68_reg;
	end
	/* main: %5*/
	/*   store i16 %73, i16* %74, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_85)) begin
		memory_controller_address_a = main_5_74_reg;
	end
	/* main: %5*/
	/*   store i16 %79, i16* %80, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_86)) begin
		memory_controller_address_a = main_5_80_reg;
	end
	/* main: %5*/
	/*   store i16 %85, i16* %86, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_87)) begin
		memory_controller_address_a = main_5_86_reg;
	end
	/* main: %5*/
	/*   store i16 %91, i16* %92, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_88)) begin
		memory_controller_address_a = main_5_92_reg;
	end
	/* main: %5*/
	/*   store i16 %97, i16* %98, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_89)) begin
		memory_controller_address_a = main_5_98_reg;
	end
	/* main: %5*/
	/*   store i16 %103, i16* %104, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_90)) begin
		memory_controller_address_a = main_5_104_reg;
	end
	/* main: %5*/
	/*   store i16 %109, i16* %110, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_91)) begin
		memory_controller_address_a = main_5_110_reg;
	end
	/* main: %5*/
	/*   store i16 %115, i16* %116, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_92)) begin
		memory_controller_address_a = main_5_116_reg;
	end
	/* main: %5*/
	/*   store i16 %121, i16* %122, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_93)) begin
		memory_controller_address_a = main_5_122_reg;
	end
	/* main: %5*/
	/*   store i16 %127, i16* %128, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_94)) begin
		memory_controller_address_a = main_5_128_reg;
	end
	/* main: %5*/
	/*   store i16 %133, i16* %134, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_95)) begin
		memory_controller_address_a = main_5_134_reg;
	end
	/* main: %5*/
	/*   store i16 %139, i16* %140, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_96)) begin
		memory_controller_address_a = main_5_140_reg;
	end
	/* main: %5*/
	/*   store i16 %145, i16* %146, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_97)) begin
		memory_controller_address_a = main_5_146_reg;
	end
	/* main: %5*/
	/*   store i16 %151, i16* %152, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_98)) begin
		memory_controller_address_a = main_5_152_reg;
	end
	/* main: %5*/
	/*   store i16 %157, i16* %158, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_99)) begin
		memory_controller_address_a = main_5_158_reg;
	end
	/* main: %5*/
	/*   store i16 %163, i16* %164, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_100)) begin
		memory_controller_address_a = main_5_164_reg;
	end
	/* main: %5*/
	/*   store i16 %169, i16* %170, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_101)) begin
		memory_controller_address_a = main_5_170_reg;
	end
	/* main: %5*/
	/*   store i16 %175, i16* %176, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_102)) begin
		memory_controller_address_a = main_5_176_reg;
	end
	/* main: %5*/
	/*   store i16 %181, i16* %182, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_103)) begin
		memory_controller_address_a = main_5_182_reg;
	end
	/* main: %5*/
	/*   store i16 %187, i16* %188, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_104)) begin
		memory_controller_address_a = main_5_188_reg;
	end
	/* main: %5*/
	/*   store i16 %193, i16* %194, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_105)) begin
		memory_controller_address_a = main_5_194_reg;
	end
	/* main: %5*/
	/*   store i16 %199, i16* %200, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_106)) begin
		memory_controller_address_a = main_5_200_reg;
	end
	/* main: %5*/
	/*   store i16 %205, i16* %206, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_107)) begin
		memory_controller_address_a = main_5_206_reg;
	end
	/* main: %5*/
	/*   store i16 %211, i16* %212, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_108)) begin
		memory_controller_address_a = main_5_212_reg;
	end
	/* main: %5*/
	/*   store i16 %217, i16* %218, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_109)) begin
		memory_controller_address_a = main_5_218_reg;
	end
	/* main: %5*/
	/*   store i16 %223, i16* %224, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_110)) begin
		memory_controller_address_a = main_5_224_reg;
	end
	/* main: %5*/
	/*   store i16 %229, i16* %230, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_111)) begin
		memory_controller_address_a = main_5_230_reg;
	end
	/* main: %5*/
	/*   store i16 %235, i16* %236, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_112)) begin
		memory_controller_address_a = main_5_236_reg;
	end
	/* main: %5*/
	/*   store i16 %241, i16* %242, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_113)) begin
		memory_controller_address_a = main_5_242_reg;
	end
	/* main: %5*/
	/*   store i16 %247, i16* %248, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_114)) begin
		memory_controller_address_a = main_5_248_reg;
	end
	/* main: %5*/
	/*   store i16 %253, i16* %254, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_115)) begin
		memory_controller_address_a = main_5_254_reg;
	end
	/* main: %5*/
	/*   store i16 %259, i16* %260, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_116)) begin
		memory_controller_address_a = main_5_260_reg;
	end
	/* main: %5*/
	/*   store i16 %265, i16* %266, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_117)) begin
		memory_controller_address_a = main_5_266_reg;
	end
	/* main: %5*/
	/*   store i16 %271, i16* %272, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_118)) begin
		memory_controller_address_a = main_5_272_reg;
	end
	/* main: %5*/
	/*   store i16 %277, i16* %278, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_119)) begin
		memory_controller_address_a = main_5_278_reg;
	end
	/* main: %5*/
	/*   store i16 %283, i16* %284, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_120)) begin
		memory_controller_address_a = main_5_284_reg;
	end
	/* main: %5*/
	/*   store i16 %289, i16* %290, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_121)) begin
		memory_controller_address_a = main_5_290_reg;
	end
	/* main: %5*/
	/*   store i16 %295, i16* %296, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_122)) begin
		memory_controller_address_a = main_5_296_reg;
	end
	/* main: %5*/
	/*   store i16 %301, i16* %302, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_123)) begin
		memory_controller_address_a = main_5_302_reg;
	end
	/* main: %5*/
	/*   store i16 %307, i16* %308, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_124)) begin
		memory_controller_address_a = main_5_308_reg;
	end
	/* main: %5*/
	/*   store i16 %313, i16* %314, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_125)) begin
		memory_controller_address_a = main_5_314_reg;
	end
	/* main: %5*/
	/*   store i16 %319, i16* %320, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_126)) begin
		memory_controller_address_a = main_5_320_reg;
	end
	/* main: %5*/
	/*   store i16 %325, i16* %326, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_127)) begin
		memory_controller_address_a = main_5_326_reg;
	end
	/* main: %5*/
	/*   store i16 %331, i16* %332, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_128)) begin
		memory_controller_address_a = main_5_332_reg;
	end
	/* main: %5*/
	/*   store i16 %337, i16* %338, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_129)) begin
		memory_controller_address_a = main_5_338_reg;
	end
	/* main: %5*/
	/*   store i16 %343, i16* %344, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_130)) begin
		memory_controller_address_a = main_5_344_reg;
	end
	/* main: %5*/
	/*   store i16 %349, i16* %350, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_131)) begin
		memory_controller_address_a = main_5_350_reg;
	end
	/* main: %5*/
	/*   store i16 %355, i16* %356, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_132)) begin
		memory_controller_address_a = main_5_356_reg;
	end
	/* main: %5*/
	/*   store i16 %361, i16* %362, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_133)) begin
		memory_controller_address_a = main_5_362_reg;
	end
	/* main: %5*/
	/*   store i16 %367, i16* %368, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_134)) begin
		memory_controller_address_a = main_5_368_reg;
	end
	/* main: %5*/
	/*   store i16 %373, i16* %374, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_135)) begin
		memory_controller_address_a = main_5_374_reg;
	end
	/* main: %5*/
	/*   store i16 %379, i16* %380, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_136)) begin
		memory_controller_address_a = main_5_380_reg;
	end
	/* main: %5*/
	/*   store i16 %385, i16* %386, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_137)) begin
		memory_controller_address_a = main_5_386_reg;
	end
	/* main: %.lr.ph.i*/
	/*   %404 = load i16* %403, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrphi_142)) begin
		memory_controller_address_a = main_lrphi_403;
	end
	/* main: %.lr.ph.i*/
	/*   %402 = load i16* %401, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrphi_143)) begin
		memory_controller_address_a = main_lrphi_401;
	end
	/* main: %407*/
	/*   %412 = load i16* %411, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__407_147)) begin
		memory_controller_address_a = main_407_411;
	end
	/* main: %407*/
	/*   %439 = load i16* %438, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__407_148)) begin
		memory_controller_address_a = main_407_438_reg;
	end
	/* main: %407*/
	/*   store i16 %457, i16* %411, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__407_151)) begin
		memory_controller_address_a = main_407_411_reg;
	end
	/* main: %407*/
	/*   store i16 %464, i16* %438, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__407_152)) begin
		memory_controller_address_a = main_407_438_reg;
	end
	/* main: %fft.exit*/
	/*   %474 = load i16* %scevgep3, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_fftexit_159)) begin
		memory_controller_address_a = main_fftexit_scevgep3;
	end
end
always @(*) begin
	memory_controller_write_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %1*/
	/*   store volatile i16 0, i16* %input_temp, align 2*/
	if ((cur_state == LEGUP_F_main_BB__1_2)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %1*/
	/*   %input_temp.0.input_temp.0.input_temp.0. = load volatile i16* %input_temp, align 2*/
	if ((cur_state == LEGUP_F_main_BB__1_3)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %1*/
	/*   store volatile i16 %3, i16* %input_temp, align 2*/
	if ((cur_state == LEGUP_F_main_BB__1_5)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %1*/
	/*   store i16 %input_temp.0.input_temp.0.input_temp.0., i16* %scevgep6, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_6)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %1*/
	/*   store i16 %input_temp.0.input_temp.0.input_temp.0.1, i16* %scevgep5, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_8)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %5*/
	/*   %10 = load i16* %6, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_10)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %5*/
	/*   %13 = load i16* %12, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_11)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %5*/
	/*   %19 = load i16* %18, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_12)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %5*/
	/*   %25 = load i16* %24, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_13)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %5*/
	/*   %31 = load i16* %30, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_14)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %5*/
	/*   %37 = load i16* %36, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_15)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %5*/
	/*   %43 = load i16* %42, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_16)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %5*/
	/*   %49 = load i16* %48, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_17)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %5*/
	/*   %55 = load i16* %54, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_18)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %5*/
	/*   %61 = load i16* %60, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_19)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %5*/
	/*   %67 = load i16* %66, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_20)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %5*/
	/*   %73 = load i16* %72, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_21)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %5*/
	/*   %79 = load i16* %78, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_22)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %5*/
	/*   %85 = load i16* %84, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_23)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %5*/
	/*   %91 = load i16* %90, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_24)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %5*/
	/*   %97 = load i16* %96, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_25)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %5*/
	/*   %103 = load i16* %102, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_26)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %5*/
	/*   %109 = load i16* %108, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_27)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %5*/
	/*   %115 = load i16* %114, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_28)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %5*/
	/*   %121 = load i16* %120, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_29)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %5*/
	/*   %127 = load i16* %126, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_30)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %5*/
	/*   %133 = load i16* %132, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_31)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %5*/
	/*   %139 = load i16* %138, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_32)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %5*/
	/*   %145 = load i16* %144, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_33)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %5*/
	/*   %151 = load i16* %150, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_34)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %5*/
	/*   %157 = load i16* %156, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_35)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %5*/
	/*   %163 = load i16* %162, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_36)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %5*/
	/*   %169 = load i16* %168, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_37)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %5*/
	/*   %175 = load i16* %174, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_38)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %5*/
	/*   %181 = load i16* %180, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_39)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %5*/
	/*   %187 = load i16* %186, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_40)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %5*/
	/*   %193 = load i16* %192, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_41)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %5*/
	/*   %199 = load i16* %198, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_42)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %5*/
	/*   %205 = load i16* %204, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_43)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %5*/
	/*   %211 = load i16* %210, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_44)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %5*/
	/*   %217 = load i16* %216, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_45)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %5*/
	/*   %223 = load i16* %222, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_46)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %5*/
	/*   %229 = load i16* %228, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_47)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %5*/
	/*   %235 = load i16* %234, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_48)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %5*/
	/*   %241 = load i16* %240, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_49)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %5*/
	/*   %247 = load i16* %246, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_50)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %5*/
	/*   %253 = load i16* %252, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_51)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %5*/
	/*   %259 = load i16* %258, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_52)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %5*/
	/*   %265 = load i16* %264, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_53)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %5*/
	/*   %271 = load i16* %270, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_54)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %5*/
	/*   %277 = load i16* %276, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_55)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %5*/
	/*   %283 = load i16* %282, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_56)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %5*/
	/*   %289 = load i16* %288, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_57)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %5*/
	/*   %295 = load i16* %294, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_58)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %5*/
	/*   %301 = load i16* %300, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_59)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %5*/
	/*   %307 = load i16* %306, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_60)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %5*/
	/*   %313 = load i16* %312, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_61)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %5*/
	/*   %319 = load i16* %318, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_62)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %5*/
	/*   %325 = load i16* %324, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_63)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %5*/
	/*   %331 = load i16* %330, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_64)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %5*/
	/*   %337 = load i16* %336, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_65)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %5*/
	/*   %343 = load i16* %342, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_66)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %5*/
	/*   %349 = load i16* %348, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_67)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %5*/
	/*   %355 = load i16* %354, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_68)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %5*/
	/*   %361 = load i16* %360, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_69)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %5*/
	/*   %367 = load i16* %366, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_70)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %5*/
	/*   %373 = load i16* %372, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_71)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %5*/
	/*   %379 = load i16* %378, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_72)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %5*/
	/*   %385 = load i16* %384, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_73)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %5*/
	/*   store i16 %10, i16* %8, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_74)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %5*/
	/*   store i16 %13, i16* %14, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_75)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %5*/
	/*   store i16 %19, i16* %20, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_76)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %5*/
	/*   store i16 %25, i16* %26, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_77)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %5*/
	/*   store i16 %31, i16* %32, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_78)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %5*/
	/*   store i16 %37, i16* %38, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_79)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %5*/
	/*   store i16 %43, i16* %44, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_80)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %5*/
	/*   store i16 %49, i16* %50, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_81)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %5*/
	/*   store i16 %55, i16* %56, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_82)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %5*/
	/*   store i16 %61, i16* %62, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_83)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %5*/
	/*   store i16 %67, i16* %68, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_84)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %5*/
	/*   store i16 %73, i16* %74, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_85)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %5*/
	/*   store i16 %79, i16* %80, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_86)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %5*/
	/*   store i16 %85, i16* %86, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_87)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %5*/
	/*   store i16 %91, i16* %92, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_88)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %5*/
	/*   store i16 %97, i16* %98, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_89)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %5*/
	/*   store i16 %103, i16* %104, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_90)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %5*/
	/*   store i16 %109, i16* %110, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_91)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %5*/
	/*   store i16 %115, i16* %116, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_92)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %5*/
	/*   store i16 %121, i16* %122, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_93)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %5*/
	/*   store i16 %127, i16* %128, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_94)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %5*/
	/*   store i16 %133, i16* %134, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_95)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %5*/
	/*   store i16 %139, i16* %140, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_96)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %5*/
	/*   store i16 %145, i16* %146, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_97)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %5*/
	/*   store i16 %151, i16* %152, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_98)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %5*/
	/*   store i16 %157, i16* %158, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_99)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %5*/
	/*   store i16 %163, i16* %164, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_100)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %5*/
	/*   store i16 %169, i16* %170, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_101)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %5*/
	/*   store i16 %175, i16* %176, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_102)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %5*/
	/*   store i16 %181, i16* %182, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_103)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %5*/
	/*   store i16 %187, i16* %188, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_104)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %5*/
	/*   store i16 %193, i16* %194, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_105)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %5*/
	/*   store i16 %199, i16* %200, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_106)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %5*/
	/*   store i16 %205, i16* %206, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_107)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %5*/
	/*   store i16 %211, i16* %212, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_108)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %5*/
	/*   store i16 %217, i16* %218, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_109)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %5*/
	/*   store i16 %223, i16* %224, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_110)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %5*/
	/*   store i16 %229, i16* %230, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_111)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %5*/
	/*   store i16 %235, i16* %236, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_112)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %5*/
	/*   store i16 %241, i16* %242, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_113)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %5*/
	/*   store i16 %247, i16* %248, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_114)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %5*/
	/*   store i16 %253, i16* %254, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_115)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %5*/
	/*   store i16 %259, i16* %260, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_116)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %5*/
	/*   store i16 %265, i16* %266, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_117)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %5*/
	/*   store i16 %271, i16* %272, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_118)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %5*/
	/*   store i16 %277, i16* %278, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_119)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %5*/
	/*   store i16 %283, i16* %284, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_120)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %5*/
	/*   store i16 %289, i16* %290, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_121)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %5*/
	/*   store i16 %295, i16* %296, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_122)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %5*/
	/*   store i16 %301, i16* %302, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_123)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %5*/
	/*   store i16 %307, i16* %308, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_124)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %5*/
	/*   store i16 %313, i16* %314, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_125)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %5*/
	/*   store i16 %319, i16* %320, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_126)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %5*/
	/*   store i16 %325, i16* %326, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_127)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %5*/
	/*   store i16 %331, i16* %332, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_128)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %5*/
	/*   store i16 %337, i16* %338, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_129)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %5*/
	/*   store i16 %343, i16* %344, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_130)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %5*/
	/*   store i16 %349, i16* %350, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_131)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %5*/
	/*   store i16 %355, i16* %356, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_132)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %5*/
	/*   store i16 %361, i16* %362, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_133)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %5*/
	/*   store i16 %367, i16* %368, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_134)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %5*/
	/*   store i16 %373, i16* %374, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_135)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %5*/
	/*   store i16 %379, i16* %380, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_136)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %5*/
	/*   store i16 %385, i16* %386, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_137)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %.lr.ph.i*/
	/*   %404 = load i16* %403, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrphi_142)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %.lr.ph.i*/
	/*   %402 = load i16* %401, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrphi_143)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %407*/
	/*   %412 = load i16* %411, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__407_147)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %407*/
	/*   %439 = load i16* %438, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__407_148)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %407*/
	/*   store i16 %457, i16* %411, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__407_151)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %407*/
	/*   store i16 %464, i16* %438, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__407_152)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %fft.exit*/
	/*   %474 = load i16* %scevgep3, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_fftexit_159)) begin
		memory_controller_write_enable_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_a = 1'd0;
	end
	/* main: %1*/
	/*   store volatile i16 0, i16* %input_temp, align 2*/
	if ((cur_state == LEGUP_F_main_BB__1_2)) begin
		memory_controller_in_a = 16'd0;
	end
	/* main: %1*/
	/*   store volatile i16 %3, i16* %input_temp, align 2*/
	if ((cur_state == LEGUP_F_main_BB__1_5)) begin
		memory_controller_in_a = main_1_3_reg;
	end
	/* main: %1*/
	/*   store i16 %input_temp.0.input_temp.0.input_temp.0., i16* %scevgep6, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_6)) begin
		memory_controller_in_a = main_1_input_temp0input_temp0input_temp0_reg;
	end
	/* main: %1*/
	/*   store i16 %input_temp.0.input_temp.0.input_temp.0.1, i16* %scevgep5, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_8)) begin
		memory_controller_in_a = main_1_input_temp0input_temp0input_temp01;
	end
	/* main: %5*/
	/*   store i16 %10, i16* %8, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_74)) begin
		memory_controller_in_a = main_5_10_reg;
	end
	/* main: %5*/
	/*   store i16 %13, i16* %14, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_75)) begin
		memory_controller_in_a = main_5_13_reg;
	end
	/* main: %5*/
	/*   store i16 %19, i16* %20, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_76)) begin
		memory_controller_in_a = main_5_19_reg;
	end
	/* main: %5*/
	/*   store i16 %25, i16* %26, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_77)) begin
		memory_controller_in_a = main_5_25_reg;
	end
	/* main: %5*/
	/*   store i16 %31, i16* %32, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_78)) begin
		memory_controller_in_a = main_5_31_reg;
	end
	/* main: %5*/
	/*   store i16 %37, i16* %38, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_79)) begin
		memory_controller_in_a = main_5_37_reg;
	end
	/* main: %5*/
	/*   store i16 %43, i16* %44, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_80)) begin
		memory_controller_in_a = main_5_43_reg;
	end
	/* main: %5*/
	/*   store i16 %49, i16* %50, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_81)) begin
		memory_controller_in_a = main_5_49_reg;
	end
	/* main: %5*/
	/*   store i16 %55, i16* %56, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_82)) begin
		memory_controller_in_a = main_5_55_reg;
	end
	/* main: %5*/
	/*   store i16 %61, i16* %62, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_83)) begin
		memory_controller_in_a = main_5_61_reg;
	end
	/* main: %5*/
	/*   store i16 %67, i16* %68, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_84)) begin
		memory_controller_in_a = main_5_67_reg;
	end
	/* main: %5*/
	/*   store i16 %73, i16* %74, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_85)) begin
		memory_controller_in_a = main_5_73_reg;
	end
	/* main: %5*/
	/*   store i16 %79, i16* %80, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_86)) begin
		memory_controller_in_a = main_5_79_reg;
	end
	/* main: %5*/
	/*   store i16 %85, i16* %86, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_87)) begin
		memory_controller_in_a = main_5_85_reg;
	end
	/* main: %5*/
	/*   store i16 %91, i16* %92, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_88)) begin
		memory_controller_in_a = main_5_91_reg;
	end
	/* main: %5*/
	/*   store i16 %97, i16* %98, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_89)) begin
		memory_controller_in_a = main_5_97_reg;
	end
	/* main: %5*/
	/*   store i16 %103, i16* %104, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_90)) begin
		memory_controller_in_a = main_5_103_reg;
	end
	/* main: %5*/
	/*   store i16 %109, i16* %110, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_91)) begin
		memory_controller_in_a = main_5_109_reg;
	end
	/* main: %5*/
	/*   store i16 %115, i16* %116, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_92)) begin
		memory_controller_in_a = main_5_115_reg;
	end
	/* main: %5*/
	/*   store i16 %121, i16* %122, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_93)) begin
		memory_controller_in_a = main_5_121_reg;
	end
	/* main: %5*/
	/*   store i16 %127, i16* %128, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_94)) begin
		memory_controller_in_a = main_5_127_reg;
	end
	/* main: %5*/
	/*   store i16 %133, i16* %134, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_95)) begin
		memory_controller_in_a = main_5_133_reg;
	end
	/* main: %5*/
	/*   store i16 %139, i16* %140, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_96)) begin
		memory_controller_in_a = main_5_139_reg;
	end
	/* main: %5*/
	/*   store i16 %145, i16* %146, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_97)) begin
		memory_controller_in_a = main_5_145_reg;
	end
	/* main: %5*/
	/*   store i16 %151, i16* %152, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_98)) begin
		memory_controller_in_a = main_5_151_reg;
	end
	/* main: %5*/
	/*   store i16 %157, i16* %158, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_99)) begin
		memory_controller_in_a = main_5_157_reg;
	end
	/* main: %5*/
	/*   store i16 %163, i16* %164, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_100)) begin
		memory_controller_in_a = main_5_163_reg;
	end
	/* main: %5*/
	/*   store i16 %169, i16* %170, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_101)) begin
		memory_controller_in_a = main_5_169_reg;
	end
	/* main: %5*/
	/*   store i16 %175, i16* %176, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_102)) begin
		memory_controller_in_a = main_5_175_reg;
	end
	/* main: %5*/
	/*   store i16 %181, i16* %182, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_103)) begin
		memory_controller_in_a = main_5_181_reg;
	end
	/* main: %5*/
	/*   store i16 %187, i16* %188, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_104)) begin
		memory_controller_in_a = main_5_187_reg;
	end
	/* main: %5*/
	/*   store i16 %193, i16* %194, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_105)) begin
		memory_controller_in_a = main_5_193_reg;
	end
	/* main: %5*/
	/*   store i16 %199, i16* %200, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_106)) begin
		memory_controller_in_a = main_5_199_reg;
	end
	/* main: %5*/
	/*   store i16 %205, i16* %206, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_107)) begin
		memory_controller_in_a = main_5_205_reg;
	end
	/* main: %5*/
	/*   store i16 %211, i16* %212, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_108)) begin
		memory_controller_in_a = main_5_211_reg;
	end
	/* main: %5*/
	/*   store i16 %217, i16* %218, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_109)) begin
		memory_controller_in_a = main_5_217_reg;
	end
	/* main: %5*/
	/*   store i16 %223, i16* %224, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_110)) begin
		memory_controller_in_a = main_5_223_reg;
	end
	/* main: %5*/
	/*   store i16 %229, i16* %230, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_111)) begin
		memory_controller_in_a = main_5_229_reg;
	end
	/* main: %5*/
	/*   store i16 %235, i16* %236, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_112)) begin
		memory_controller_in_a = main_5_235_reg;
	end
	/* main: %5*/
	/*   store i16 %241, i16* %242, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_113)) begin
		memory_controller_in_a = main_5_241_reg;
	end
	/* main: %5*/
	/*   store i16 %247, i16* %248, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_114)) begin
		memory_controller_in_a = main_5_247_reg;
	end
	/* main: %5*/
	/*   store i16 %253, i16* %254, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_115)) begin
		memory_controller_in_a = main_5_253_reg;
	end
	/* main: %5*/
	/*   store i16 %259, i16* %260, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_116)) begin
		memory_controller_in_a = main_5_259_reg;
	end
	/* main: %5*/
	/*   store i16 %265, i16* %266, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_117)) begin
		memory_controller_in_a = main_5_265_reg;
	end
	/* main: %5*/
	/*   store i16 %271, i16* %272, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_118)) begin
		memory_controller_in_a = main_5_271_reg;
	end
	/* main: %5*/
	/*   store i16 %277, i16* %278, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_119)) begin
		memory_controller_in_a = main_5_277_reg;
	end
	/* main: %5*/
	/*   store i16 %283, i16* %284, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_120)) begin
		memory_controller_in_a = main_5_283_reg;
	end
	/* main: %5*/
	/*   store i16 %289, i16* %290, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_121)) begin
		memory_controller_in_a = main_5_289_reg;
	end
	/* main: %5*/
	/*   store i16 %295, i16* %296, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_122)) begin
		memory_controller_in_a = main_5_295_reg;
	end
	/* main: %5*/
	/*   store i16 %301, i16* %302, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_123)) begin
		memory_controller_in_a = main_5_301_reg;
	end
	/* main: %5*/
	/*   store i16 %307, i16* %308, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_124)) begin
		memory_controller_in_a = main_5_307_reg;
	end
	/* main: %5*/
	/*   store i16 %313, i16* %314, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_125)) begin
		memory_controller_in_a = main_5_313_reg;
	end
	/* main: %5*/
	/*   store i16 %319, i16* %320, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_126)) begin
		memory_controller_in_a = main_5_319_reg;
	end
	/* main: %5*/
	/*   store i16 %325, i16* %326, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_127)) begin
		memory_controller_in_a = main_5_325_reg;
	end
	/* main: %5*/
	/*   store i16 %331, i16* %332, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_128)) begin
		memory_controller_in_a = main_5_331_reg;
	end
	/* main: %5*/
	/*   store i16 %337, i16* %338, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_129)) begin
		memory_controller_in_a = main_5_337_reg;
	end
	/* main: %5*/
	/*   store i16 %343, i16* %344, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_130)) begin
		memory_controller_in_a = main_5_343_reg;
	end
	/* main: %5*/
	/*   store i16 %349, i16* %350, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_131)) begin
		memory_controller_in_a = main_5_349_reg;
	end
	/* main: %5*/
	/*   store i16 %355, i16* %356, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_132)) begin
		memory_controller_in_a = main_5_355_reg;
	end
	/* main: %5*/
	/*   store i16 %361, i16* %362, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_133)) begin
		memory_controller_in_a = main_5_361_reg;
	end
	/* main: %5*/
	/*   store i16 %367, i16* %368, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_134)) begin
		memory_controller_in_a = main_5_367_reg;
	end
	/* main: %5*/
	/*   store i16 %373, i16* %374, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_135)) begin
		memory_controller_in_a = main_5_373_reg;
	end
	/* main: %5*/
	/*   store i16 %379, i16* %380, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_136)) begin
		memory_controller_in_a = main_5_379_reg;
	end
	/* main: %5*/
	/*   store i16 %385, i16* %386, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_137)) begin
		memory_controller_in_a = main_5_385_reg;
	end
	/* main: %407*/
	/*   store i16 %457, i16* %411, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__407_151)) begin
		memory_controller_in_a = main_407_457;
	end
	/* main: %407*/
	/*   store i16 %464, i16* %438, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__407_152)) begin
		memory_controller_in_a = main_407_464_reg;
	end
end
always @(*) begin
	memory_controller_size_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_a = 1'd0;
	end
	/* main: %1*/
	/*   store volatile i16 0, i16* %input_temp, align 2*/
	if ((cur_state == LEGUP_F_main_BB__1_2)) begin
		memory_controller_size_a = 2'd1;
	end
	/* main: %1*/
	/*   %input_temp.0.input_temp.0.input_temp.0. = load volatile i16* %input_temp, align 2*/
	if ((cur_state == LEGUP_F_main_BB__1_3)) begin
		memory_controller_size_a = 2'd1;
	end
	/* main: %1*/
	/*   store volatile i16 %3, i16* %input_temp, align 2*/
	if ((cur_state == LEGUP_F_main_BB__1_5)) begin
		memory_controller_size_a = 2'd1;
	end
	/* main: %1*/
	/*   store i16 %input_temp.0.input_temp.0.input_temp.0., i16* %scevgep6, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_6)) begin
		memory_controller_size_a = 2'd1;
	end
	/* main: %1*/
	/*   store i16 %input_temp.0.input_temp.0.input_temp.0.1, i16* %scevgep5, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_8)) begin
		memory_controller_size_a = 2'd1;
	end
	/* main: %5*/
	/*   %10 = load i16* %6, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_10)) begin
		memory_controller_size_a = 2'd1;
	end
	/* main: %5*/
	/*   %13 = load i16* %12, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_11)) begin
		memory_controller_size_a = 2'd1;
	end
	/* main: %5*/
	/*   %19 = load i16* %18, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_12)) begin
		memory_controller_size_a = 2'd1;
	end
	/* main: %5*/
	/*   %25 = load i16* %24, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_13)) begin
		memory_controller_size_a = 2'd1;
	end
	/* main: %5*/
	/*   %31 = load i16* %30, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_14)) begin
		memory_controller_size_a = 2'd1;
	end
	/* main: %5*/
	/*   %37 = load i16* %36, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_15)) begin
		memory_controller_size_a = 2'd1;
	end
	/* main: %5*/
	/*   %43 = load i16* %42, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_16)) begin
		memory_controller_size_a = 2'd1;
	end
	/* main: %5*/
	/*   %49 = load i16* %48, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_17)) begin
		memory_controller_size_a = 2'd1;
	end
	/* main: %5*/
	/*   %55 = load i16* %54, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_18)) begin
		memory_controller_size_a = 2'd1;
	end
	/* main: %5*/
	/*   %61 = load i16* %60, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_19)) begin
		memory_controller_size_a = 2'd1;
	end
	/* main: %5*/
	/*   %67 = load i16* %66, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_20)) begin
		memory_controller_size_a = 2'd1;
	end
	/* main: %5*/
	/*   %73 = load i16* %72, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_21)) begin
		memory_controller_size_a = 2'd1;
	end
	/* main: %5*/
	/*   %79 = load i16* %78, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_22)) begin
		memory_controller_size_a = 2'd1;
	end
	/* main: %5*/
	/*   %85 = load i16* %84, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_23)) begin
		memory_controller_size_a = 2'd1;
	end
	/* main: %5*/
	/*   %91 = load i16* %90, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_24)) begin
		memory_controller_size_a = 2'd1;
	end
	/* main: %5*/
	/*   %97 = load i16* %96, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_25)) begin
		memory_controller_size_a = 2'd1;
	end
	/* main: %5*/
	/*   %103 = load i16* %102, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_26)) begin
		memory_controller_size_a = 2'd1;
	end
	/* main: %5*/
	/*   %109 = load i16* %108, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_27)) begin
		memory_controller_size_a = 2'd1;
	end
	/* main: %5*/
	/*   %115 = load i16* %114, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_28)) begin
		memory_controller_size_a = 2'd1;
	end
	/* main: %5*/
	/*   %121 = load i16* %120, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_29)) begin
		memory_controller_size_a = 2'd1;
	end
	/* main: %5*/
	/*   %127 = load i16* %126, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_30)) begin
		memory_controller_size_a = 2'd1;
	end
	/* main: %5*/
	/*   %133 = load i16* %132, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_31)) begin
		memory_controller_size_a = 2'd1;
	end
	/* main: %5*/
	/*   %139 = load i16* %138, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_32)) begin
		memory_controller_size_a = 2'd1;
	end
	/* main: %5*/
	/*   %145 = load i16* %144, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_33)) begin
		memory_controller_size_a = 2'd1;
	end
	/* main: %5*/
	/*   %151 = load i16* %150, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_34)) begin
		memory_controller_size_a = 2'd1;
	end
	/* main: %5*/
	/*   %157 = load i16* %156, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_35)) begin
		memory_controller_size_a = 2'd1;
	end
	/* main: %5*/
	/*   %163 = load i16* %162, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_36)) begin
		memory_controller_size_a = 2'd1;
	end
	/* main: %5*/
	/*   %169 = load i16* %168, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_37)) begin
		memory_controller_size_a = 2'd1;
	end
	/* main: %5*/
	/*   %175 = load i16* %174, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_38)) begin
		memory_controller_size_a = 2'd1;
	end
	/* main: %5*/
	/*   %181 = load i16* %180, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_39)) begin
		memory_controller_size_a = 2'd1;
	end
	/* main: %5*/
	/*   %187 = load i16* %186, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_40)) begin
		memory_controller_size_a = 2'd1;
	end
	/* main: %5*/
	/*   %193 = load i16* %192, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_41)) begin
		memory_controller_size_a = 2'd1;
	end
	/* main: %5*/
	/*   %199 = load i16* %198, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_42)) begin
		memory_controller_size_a = 2'd1;
	end
	/* main: %5*/
	/*   %205 = load i16* %204, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_43)) begin
		memory_controller_size_a = 2'd1;
	end
	/* main: %5*/
	/*   %211 = load i16* %210, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_44)) begin
		memory_controller_size_a = 2'd1;
	end
	/* main: %5*/
	/*   %217 = load i16* %216, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_45)) begin
		memory_controller_size_a = 2'd1;
	end
	/* main: %5*/
	/*   %223 = load i16* %222, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_46)) begin
		memory_controller_size_a = 2'd1;
	end
	/* main: %5*/
	/*   %229 = load i16* %228, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_47)) begin
		memory_controller_size_a = 2'd1;
	end
	/* main: %5*/
	/*   %235 = load i16* %234, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_48)) begin
		memory_controller_size_a = 2'd1;
	end
	/* main: %5*/
	/*   %241 = load i16* %240, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_49)) begin
		memory_controller_size_a = 2'd1;
	end
	/* main: %5*/
	/*   %247 = load i16* %246, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_50)) begin
		memory_controller_size_a = 2'd1;
	end
	/* main: %5*/
	/*   %253 = load i16* %252, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_51)) begin
		memory_controller_size_a = 2'd1;
	end
	/* main: %5*/
	/*   %259 = load i16* %258, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_52)) begin
		memory_controller_size_a = 2'd1;
	end
	/* main: %5*/
	/*   %265 = load i16* %264, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_53)) begin
		memory_controller_size_a = 2'd1;
	end
	/* main: %5*/
	/*   %271 = load i16* %270, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_54)) begin
		memory_controller_size_a = 2'd1;
	end
	/* main: %5*/
	/*   %277 = load i16* %276, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_55)) begin
		memory_controller_size_a = 2'd1;
	end
	/* main: %5*/
	/*   %283 = load i16* %282, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_56)) begin
		memory_controller_size_a = 2'd1;
	end
	/* main: %5*/
	/*   %289 = load i16* %288, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_57)) begin
		memory_controller_size_a = 2'd1;
	end
	/* main: %5*/
	/*   %295 = load i16* %294, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_58)) begin
		memory_controller_size_a = 2'd1;
	end
	/* main: %5*/
	/*   %301 = load i16* %300, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_59)) begin
		memory_controller_size_a = 2'd1;
	end
	/* main: %5*/
	/*   %307 = load i16* %306, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_60)) begin
		memory_controller_size_a = 2'd1;
	end
	/* main: %5*/
	/*   %313 = load i16* %312, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_61)) begin
		memory_controller_size_a = 2'd1;
	end
	/* main: %5*/
	/*   %319 = load i16* %318, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_62)) begin
		memory_controller_size_a = 2'd1;
	end
	/* main: %5*/
	/*   %325 = load i16* %324, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_63)) begin
		memory_controller_size_a = 2'd1;
	end
	/* main: %5*/
	/*   %331 = load i16* %330, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_64)) begin
		memory_controller_size_a = 2'd1;
	end
	/* main: %5*/
	/*   %337 = load i16* %336, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_65)) begin
		memory_controller_size_a = 2'd1;
	end
	/* main: %5*/
	/*   %343 = load i16* %342, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_66)) begin
		memory_controller_size_a = 2'd1;
	end
	/* main: %5*/
	/*   %349 = load i16* %348, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_67)) begin
		memory_controller_size_a = 2'd1;
	end
	/* main: %5*/
	/*   %355 = load i16* %354, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_68)) begin
		memory_controller_size_a = 2'd1;
	end
	/* main: %5*/
	/*   %361 = load i16* %360, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_69)) begin
		memory_controller_size_a = 2'd1;
	end
	/* main: %5*/
	/*   %367 = load i16* %366, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_70)) begin
		memory_controller_size_a = 2'd1;
	end
	/* main: %5*/
	/*   %373 = load i16* %372, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_71)) begin
		memory_controller_size_a = 2'd1;
	end
	/* main: %5*/
	/*   %379 = load i16* %378, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_72)) begin
		memory_controller_size_a = 2'd1;
	end
	/* main: %5*/
	/*   %385 = load i16* %384, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_73)) begin
		memory_controller_size_a = 2'd1;
	end
	/* main: %5*/
	/*   store i16 %10, i16* %8, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_74)) begin
		memory_controller_size_a = 2'd1;
	end
	/* main: %5*/
	/*   store i16 %13, i16* %14, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_75)) begin
		memory_controller_size_a = 2'd1;
	end
	/* main: %5*/
	/*   store i16 %19, i16* %20, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_76)) begin
		memory_controller_size_a = 2'd1;
	end
	/* main: %5*/
	/*   store i16 %25, i16* %26, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_77)) begin
		memory_controller_size_a = 2'd1;
	end
	/* main: %5*/
	/*   store i16 %31, i16* %32, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_78)) begin
		memory_controller_size_a = 2'd1;
	end
	/* main: %5*/
	/*   store i16 %37, i16* %38, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_79)) begin
		memory_controller_size_a = 2'd1;
	end
	/* main: %5*/
	/*   store i16 %43, i16* %44, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_80)) begin
		memory_controller_size_a = 2'd1;
	end
	/* main: %5*/
	/*   store i16 %49, i16* %50, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_81)) begin
		memory_controller_size_a = 2'd1;
	end
	/* main: %5*/
	/*   store i16 %55, i16* %56, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_82)) begin
		memory_controller_size_a = 2'd1;
	end
	/* main: %5*/
	/*   store i16 %61, i16* %62, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_83)) begin
		memory_controller_size_a = 2'd1;
	end
	/* main: %5*/
	/*   store i16 %67, i16* %68, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_84)) begin
		memory_controller_size_a = 2'd1;
	end
	/* main: %5*/
	/*   store i16 %73, i16* %74, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_85)) begin
		memory_controller_size_a = 2'd1;
	end
	/* main: %5*/
	/*   store i16 %79, i16* %80, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_86)) begin
		memory_controller_size_a = 2'd1;
	end
	/* main: %5*/
	/*   store i16 %85, i16* %86, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_87)) begin
		memory_controller_size_a = 2'd1;
	end
	/* main: %5*/
	/*   store i16 %91, i16* %92, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_88)) begin
		memory_controller_size_a = 2'd1;
	end
	/* main: %5*/
	/*   store i16 %97, i16* %98, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_89)) begin
		memory_controller_size_a = 2'd1;
	end
	/* main: %5*/
	/*   store i16 %103, i16* %104, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_90)) begin
		memory_controller_size_a = 2'd1;
	end
	/* main: %5*/
	/*   store i16 %109, i16* %110, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_91)) begin
		memory_controller_size_a = 2'd1;
	end
	/* main: %5*/
	/*   store i16 %115, i16* %116, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_92)) begin
		memory_controller_size_a = 2'd1;
	end
	/* main: %5*/
	/*   store i16 %121, i16* %122, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_93)) begin
		memory_controller_size_a = 2'd1;
	end
	/* main: %5*/
	/*   store i16 %127, i16* %128, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_94)) begin
		memory_controller_size_a = 2'd1;
	end
	/* main: %5*/
	/*   store i16 %133, i16* %134, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_95)) begin
		memory_controller_size_a = 2'd1;
	end
	/* main: %5*/
	/*   store i16 %139, i16* %140, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_96)) begin
		memory_controller_size_a = 2'd1;
	end
	/* main: %5*/
	/*   store i16 %145, i16* %146, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_97)) begin
		memory_controller_size_a = 2'd1;
	end
	/* main: %5*/
	/*   store i16 %151, i16* %152, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_98)) begin
		memory_controller_size_a = 2'd1;
	end
	/* main: %5*/
	/*   store i16 %157, i16* %158, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_99)) begin
		memory_controller_size_a = 2'd1;
	end
	/* main: %5*/
	/*   store i16 %163, i16* %164, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_100)) begin
		memory_controller_size_a = 2'd1;
	end
	/* main: %5*/
	/*   store i16 %169, i16* %170, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_101)) begin
		memory_controller_size_a = 2'd1;
	end
	/* main: %5*/
	/*   store i16 %175, i16* %176, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_102)) begin
		memory_controller_size_a = 2'd1;
	end
	/* main: %5*/
	/*   store i16 %181, i16* %182, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_103)) begin
		memory_controller_size_a = 2'd1;
	end
	/* main: %5*/
	/*   store i16 %187, i16* %188, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_104)) begin
		memory_controller_size_a = 2'd1;
	end
	/* main: %5*/
	/*   store i16 %193, i16* %194, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_105)) begin
		memory_controller_size_a = 2'd1;
	end
	/* main: %5*/
	/*   store i16 %199, i16* %200, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_106)) begin
		memory_controller_size_a = 2'd1;
	end
	/* main: %5*/
	/*   store i16 %205, i16* %206, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_107)) begin
		memory_controller_size_a = 2'd1;
	end
	/* main: %5*/
	/*   store i16 %211, i16* %212, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_108)) begin
		memory_controller_size_a = 2'd1;
	end
	/* main: %5*/
	/*   store i16 %217, i16* %218, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_109)) begin
		memory_controller_size_a = 2'd1;
	end
	/* main: %5*/
	/*   store i16 %223, i16* %224, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_110)) begin
		memory_controller_size_a = 2'd1;
	end
	/* main: %5*/
	/*   store i16 %229, i16* %230, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_111)) begin
		memory_controller_size_a = 2'd1;
	end
	/* main: %5*/
	/*   store i16 %235, i16* %236, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_112)) begin
		memory_controller_size_a = 2'd1;
	end
	/* main: %5*/
	/*   store i16 %241, i16* %242, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_113)) begin
		memory_controller_size_a = 2'd1;
	end
	/* main: %5*/
	/*   store i16 %247, i16* %248, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_114)) begin
		memory_controller_size_a = 2'd1;
	end
	/* main: %5*/
	/*   store i16 %253, i16* %254, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_115)) begin
		memory_controller_size_a = 2'd1;
	end
	/* main: %5*/
	/*   store i16 %259, i16* %260, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_116)) begin
		memory_controller_size_a = 2'd1;
	end
	/* main: %5*/
	/*   store i16 %265, i16* %266, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_117)) begin
		memory_controller_size_a = 2'd1;
	end
	/* main: %5*/
	/*   store i16 %271, i16* %272, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_118)) begin
		memory_controller_size_a = 2'd1;
	end
	/* main: %5*/
	/*   store i16 %277, i16* %278, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_119)) begin
		memory_controller_size_a = 2'd1;
	end
	/* main: %5*/
	/*   store i16 %283, i16* %284, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_120)) begin
		memory_controller_size_a = 2'd1;
	end
	/* main: %5*/
	/*   store i16 %289, i16* %290, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_121)) begin
		memory_controller_size_a = 2'd1;
	end
	/* main: %5*/
	/*   store i16 %295, i16* %296, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_122)) begin
		memory_controller_size_a = 2'd1;
	end
	/* main: %5*/
	/*   store i16 %301, i16* %302, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_123)) begin
		memory_controller_size_a = 2'd1;
	end
	/* main: %5*/
	/*   store i16 %307, i16* %308, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_124)) begin
		memory_controller_size_a = 2'd1;
	end
	/* main: %5*/
	/*   store i16 %313, i16* %314, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_125)) begin
		memory_controller_size_a = 2'd1;
	end
	/* main: %5*/
	/*   store i16 %319, i16* %320, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_126)) begin
		memory_controller_size_a = 2'd1;
	end
	/* main: %5*/
	/*   store i16 %325, i16* %326, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_127)) begin
		memory_controller_size_a = 2'd1;
	end
	/* main: %5*/
	/*   store i16 %331, i16* %332, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_128)) begin
		memory_controller_size_a = 2'd1;
	end
	/* main: %5*/
	/*   store i16 %337, i16* %338, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_129)) begin
		memory_controller_size_a = 2'd1;
	end
	/* main: %5*/
	/*   store i16 %343, i16* %344, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_130)) begin
		memory_controller_size_a = 2'd1;
	end
	/* main: %5*/
	/*   store i16 %349, i16* %350, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_131)) begin
		memory_controller_size_a = 2'd1;
	end
	/* main: %5*/
	/*   store i16 %355, i16* %356, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_132)) begin
		memory_controller_size_a = 2'd1;
	end
	/* main: %5*/
	/*   store i16 %361, i16* %362, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_133)) begin
		memory_controller_size_a = 2'd1;
	end
	/* main: %5*/
	/*   store i16 %367, i16* %368, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_134)) begin
		memory_controller_size_a = 2'd1;
	end
	/* main: %5*/
	/*   store i16 %373, i16* %374, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_135)) begin
		memory_controller_size_a = 2'd1;
	end
	/* main: %5*/
	/*   store i16 %379, i16* %380, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_136)) begin
		memory_controller_size_a = 2'd1;
	end
	/* main: %5*/
	/*   store i16 %385, i16* %386, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_137)) begin
		memory_controller_size_a = 2'd1;
	end
	/* main: %.lr.ph.i*/
	/*   %404 = load i16* %403, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrphi_142)) begin
		memory_controller_size_a = 2'd1;
	end
	/* main: %.lr.ph.i*/
	/*   %402 = load i16* %401, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrphi_143)) begin
		memory_controller_size_a = 2'd1;
	end
	/* main: %407*/
	/*   %412 = load i16* %411, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__407_147)) begin
		memory_controller_size_a = 2'd1;
	end
	/* main: %407*/
	/*   %439 = load i16* %438, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__407_148)) begin
		memory_controller_size_a = 2'd1;
	end
	/* main: %407*/
	/*   store i16 %457, i16* %411, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__407_151)) begin
		memory_controller_size_a = 2'd1;
	end
	/* main: %407*/
	/*   store i16 %464, i16* %438, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__407_152)) begin
		memory_controller_size_a = 2'd1;
	end
	/* main: %fft.exit*/
	/*   %474 = load i16* %scevgep3, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_fftexit_159)) begin
		memory_controller_size_a = 2'd1;
	end
end
always @(*) begin
	memory_controller_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_b = 1'd0;
	end
	/* main: %1*/
	/*   %input_temp.0.input_temp.0.input_temp.0.1 = load volatile i16* %input_temp, align 2*/
	if ((cur_state == LEGUP_F_main_BB__1_6)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %5*/
	/*   %11 = load i16* %7, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_10)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %5*/
	/*   %16 = load i16* %15, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_11)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %5*/
	/*   %22 = load i16* %21, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_12)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %5*/
	/*   %28 = load i16* %27, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_13)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %5*/
	/*   %34 = load i16* %33, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_14)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %5*/
	/*   %40 = load i16* %39, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_15)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %5*/
	/*   %46 = load i16* %45, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_16)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %5*/
	/*   %52 = load i16* %51, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_17)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %5*/
	/*   %58 = load i16* %57, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_18)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %5*/
	/*   %64 = load i16* %63, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_19)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %5*/
	/*   %70 = load i16* %69, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_20)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %5*/
	/*   %76 = load i16* %75, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_21)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %5*/
	/*   %82 = load i16* %81, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_22)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %5*/
	/*   %88 = load i16* %87, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_23)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %5*/
	/*   %94 = load i16* %93, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_24)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %5*/
	/*   %100 = load i16* %99, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_25)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %5*/
	/*   %106 = load i16* %105, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_26)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %5*/
	/*   %112 = load i16* %111, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_27)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %5*/
	/*   %118 = load i16* %117, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_28)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %5*/
	/*   %124 = load i16* %123, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_29)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %5*/
	/*   %130 = load i16* %129, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_30)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %5*/
	/*   %136 = load i16* %135, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_31)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %5*/
	/*   %142 = load i16* %141, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_32)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %5*/
	/*   %148 = load i16* %147, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_33)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %5*/
	/*   %154 = load i16* %153, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_34)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %5*/
	/*   %160 = load i16* %159, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_35)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %5*/
	/*   %166 = load i16* %165, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_36)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %5*/
	/*   %172 = load i16* %171, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_37)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %5*/
	/*   %178 = load i16* %177, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_38)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %5*/
	/*   %184 = load i16* %183, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_39)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %5*/
	/*   %190 = load i16* %189, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_40)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %5*/
	/*   %196 = load i16* %195, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_41)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %5*/
	/*   %202 = load i16* %201, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_42)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %5*/
	/*   %208 = load i16* %207, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_43)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %5*/
	/*   %214 = load i16* %213, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_44)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %5*/
	/*   %220 = load i16* %219, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_45)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %5*/
	/*   %226 = load i16* %225, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_46)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %5*/
	/*   %232 = load i16* %231, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_47)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %5*/
	/*   %238 = load i16* %237, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_48)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %5*/
	/*   %244 = load i16* %243, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_49)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %5*/
	/*   %250 = load i16* %249, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_50)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %5*/
	/*   %256 = load i16* %255, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_51)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %5*/
	/*   %262 = load i16* %261, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_52)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %5*/
	/*   %268 = load i16* %267, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_53)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %5*/
	/*   %274 = load i16* %273, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_54)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %5*/
	/*   %280 = load i16* %279, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_55)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %5*/
	/*   %286 = load i16* %285, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_56)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %5*/
	/*   %292 = load i16* %291, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_57)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %5*/
	/*   %298 = load i16* %297, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_58)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %5*/
	/*   %304 = load i16* %303, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_59)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %5*/
	/*   %310 = load i16* %309, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_60)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %5*/
	/*   %316 = load i16* %315, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_61)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %5*/
	/*   %322 = load i16* %321, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_62)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %5*/
	/*   %328 = load i16* %327, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_63)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %5*/
	/*   %334 = load i16* %333, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_64)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %5*/
	/*   %340 = load i16* %339, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_65)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %5*/
	/*   %346 = load i16* %345, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_66)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %5*/
	/*   %352 = load i16* %351, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_67)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %5*/
	/*   %358 = load i16* %357, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_68)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %5*/
	/*   %364 = load i16* %363, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_69)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %5*/
	/*   %370 = load i16* %369, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_70)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %5*/
	/*   %376 = load i16* %375, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_71)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %5*/
	/*   %382 = load i16* %381, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_72)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %5*/
	/*   %388 = load i16* %387, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_73)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %5*/
	/*   store i16 %11, i16* %9, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_74)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %5*/
	/*   store i16 %16, i16* %17, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_75)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %5*/
	/*   store i16 %22, i16* %23, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_76)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %5*/
	/*   store i16 %28, i16* %29, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_77)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %5*/
	/*   store i16 %34, i16* %35, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_78)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %5*/
	/*   store i16 %40, i16* %41, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_79)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %5*/
	/*   store i16 %46, i16* %47, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_80)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %5*/
	/*   store i16 %52, i16* %53, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_81)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %5*/
	/*   store i16 %58, i16* %59, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_82)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %5*/
	/*   store i16 %64, i16* %65, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_83)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %5*/
	/*   store i16 %70, i16* %71, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_84)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %5*/
	/*   store i16 %76, i16* %77, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_85)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %5*/
	/*   store i16 %82, i16* %83, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_86)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %5*/
	/*   store i16 %88, i16* %89, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_87)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %5*/
	/*   store i16 %94, i16* %95, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_88)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %5*/
	/*   store i16 %100, i16* %101, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_89)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %5*/
	/*   store i16 %106, i16* %107, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_90)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %5*/
	/*   store i16 %112, i16* %113, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_91)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %5*/
	/*   store i16 %118, i16* %119, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_92)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %5*/
	/*   store i16 %124, i16* %125, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_93)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %5*/
	/*   store i16 %130, i16* %131, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_94)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %5*/
	/*   store i16 %136, i16* %137, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_95)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %5*/
	/*   store i16 %142, i16* %143, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_96)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %5*/
	/*   store i16 %148, i16* %149, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_97)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %5*/
	/*   store i16 %154, i16* %155, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_98)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %5*/
	/*   store i16 %160, i16* %161, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_99)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %5*/
	/*   store i16 %166, i16* %167, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_100)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %5*/
	/*   store i16 %172, i16* %173, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_101)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %5*/
	/*   store i16 %178, i16* %179, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_102)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %5*/
	/*   store i16 %184, i16* %185, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_103)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %5*/
	/*   store i16 %190, i16* %191, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_104)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %5*/
	/*   store i16 %196, i16* %197, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_105)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %5*/
	/*   store i16 %202, i16* %203, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_106)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %5*/
	/*   store i16 %208, i16* %209, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_107)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %5*/
	/*   store i16 %214, i16* %215, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_108)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %5*/
	/*   store i16 %220, i16* %221, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_109)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %5*/
	/*   store i16 %226, i16* %227, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_110)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %5*/
	/*   store i16 %232, i16* %233, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_111)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %5*/
	/*   store i16 %238, i16* %239, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_112)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %5*/
	/*   store i16 %244, i16* %245, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_113)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %5*/
	/*   store i16 %250, i16* %251, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_114)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %5*/
	/*   store i16 %256, i16* %257, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_115)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %5*/
	/*   store i16 %262, i16* %263, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_116)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %5*/
	/*   store i16 %268, i16* %269, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_117)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %5*/
	/*   store i16 %274, i16* %275, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_118)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %5*/
	/*   store i16 %280, i16* %281, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_119)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %5*/
	/*   store i16 %286, i16* %287, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_120)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %5*/
	/*   store i16 %292, i16* %293, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_121)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %5*/
	/*   store i16 %298, i16* %299, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_122)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %5*/
	/*   store i16 %304, i16* %305, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_123)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %5*/
	/*   store i16 %310, i16* %311, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_124)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %5*/
	/*   store i16 %316, i16* %317, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_125)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %5*/
	/*   store i16 %322, i16* %323, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_126)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %5*/
	/*   store i16 %328, i16* %329, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_127)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %5*/
	/*   store i16 %334, i16* %335, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_128)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %5*/
	/*   store i16 %340, i16* %341, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_129)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %5*/
	/*   store i16 %346, i16* %347, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_130)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %5*/
	/*   store i16 %352, i16* %353, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_131)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %5*/
	/*   store i16 %358, i16* %359, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_132)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %5*/
	/*   store i16 %364, i16* %365, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_133)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %5*/
	/*   store i16 %370, i16* %371, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_134)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %5*/
	/*   store i16 %376, i16* %377, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_135)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %5*/
	/*   store i16 %382, i16* %383, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_136)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %5*/
	/*   store i16 %388, i16* %389, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_137)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %407*/
	/*   %419 = load i16* %418, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__407_147)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %407*/
	/*   %445 = load i16* %444, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__407_148)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %407*/
	/*   store i16 %461, i16* %418, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__407_151)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %407*/
	/*   store i16 %467, i16* %444, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__407_152)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %fft.exit*/
	/*   %480 = load i16* %scevgep, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_fftexit_159)) begin
		memory_controller_enable_b = 1'd1;
	end
end
always @(*) begin
	memory_controller_address_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_b = 1'd0;
	end
	/* main: %1*/
	/*   %input_temp.0.input_temp.0.input_temp.0.1 = load volatile i16* %input_temp, align 2*/
	if ((cur_state == LEGUP_F_main_BB__1_6)) begin
		memory_controller_address_b = `TAG_main_0_input_temp_a;
	end
	/* main: %5*/
	/*   %11 = load i16* %7, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_10)) begin
		memory_controller_address_b = main_5_7;
	end
	/* main: %5*/
	/*   %16 = load i16* %15, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_11)) begin
		memory_controller_address_b = main_5_15_reg;
	end
	/* main: %5*/
	/*   %22 = load i16* %21, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_12)) begin
		memory_controller_address_b = main_5_21_reg;
	end
	/* main: %5*/
	/*   %28 = load i16* %27, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_13)) begin
		memory_controller_address_b = main_5_27_reg;
	end
	/* main: %5*/
	/*   %34 = load i16* %33, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_14)) begin
		memory_controller_address_b = main_5_33_reg;
	end
	/* main: %5*/
	/*   %40 = load i16* %39, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_15)) begin
		memory_controller_address_b = main_5_39_reg;
	end
	/* main: %5*/
	/*   %46 = load i16* %45, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_16)) begin
		memory_controller_address_b = main_5_45_reg;
	end
	/* main: %5*/
	/*   %52 = load i16* %51, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_17)) begin
		memory_controller_address_b = main_5_51_reg;
	end
	/* main: %5*/
	/*   %58 = load i16* %57, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_18)) begin
		memory_controller_address_b = main_5_57_reg;
	end
	/* main: %5*/
	/*   %64 = load i16* %63, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_19)) begin
		memory_controller_address_b = main_5_63_reg;
	end
	/* main: %5*/
	/*   %70 = load i16* %69, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_20)) begin
		memory_controller_address_b = main_5_69_reg;
	end
	/* main: %5*/
	/*   %76 = load i16* %75, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_21)) begin
		memory_controller_address_b = main_5_75_reg;
	end
	/* main: %5*/
	/*   %82 = load i16* %81, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_22)) begin
		memory_controller_address_b = main_5_81_reg;
	end
	/* main: %5*/
	/*   %88 = load i16* %87, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_23)) begin
		memory_controller_address_b = main_5_87_reg;
	end
	/* main: %5*/
	/*   %94 = load i16* %93, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_24)) begin
		memory_controller_address_b = main_5_93_reg;
	end
	/* main: %5*/
	/*   %100 = load i16* %99, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_25)) begin
		memory_controller_address_b = main_5_99_reg;
	end
	/* main: %5*/
	/*   %106 = load i16* %105, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_26)) begin
		memory_controller_address_b = main_5_105_reg;
	end
	/* main: %5*/
	/*   %112 = load i16* %111, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_27)) begin
		memory_controller_address_b = main_5_111_reg;
	end
	/* main: %5*/
	/*   %118 = load i16* %117, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_28)) begin
		memory_controller_address_b = main_5_117_reg;
	end
	/* main: %5*/
	/*   %124 = load i16* %123, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_29)) begin
		memory_controller_address_b = main_5_123_reg;
	end
	/* main: %5*/
	/*   %130 = load i16* %129, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_30)) begin
		memory_controller_address_b = main_5_129_reg;
	end
	/* main: %5*/
	/*   %136 = load i16* %135, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_31)) begin
		memory_controller_address_b = main_5_135_reg;
	end
	/* main: %5*/
	/*   %142 = load i16* %141, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_32)) begin
		memory_controller_address_b = main_5_141_reg;
	end
	/* main: %5*/
	/*   %148 = load i16* %147, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_33)) begin
		memory_controller_address_b = main_5_147_reg;
	end
	/* main: %5*/
	/*   %154 = load i16* %153, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_34)) begin
		memory_controller_address_b = main_5_153_reg;
	end
	/* main: %5*/
	/*   %160 = load i16* %159, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_35)) begin
		memory_controller_address_b = main_5_159_reg;
	end
	/* main: %5*/
	/*   %166 = load i16* %165, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_36)) begin
		memory_controller_address_b = main_5_165_reg;
	end
	/* main: %5*/
	/*   %172 = load i16* %171, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_37)) begin
		memory_controller_address_b = main_5_171_reg;
	end
	/* main: %5*/
	/*   %178 = load i16* %177, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_38)) begin
		memory_controller_address_b = main_5_177_reg;
	end
	/* main: %5*/
	/*   %184 = load i16* %183, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_39)) begin
		memory_controller_address_b = main_5_183_reg;
	end
	/* main: %5*/
	/*   %190 = load i16* %189, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_40)) begin
		memory_controller_address_b = main_5_189_reg;
	end
	/* main: %5*/
	/*   %196 = load i16* %195, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_41)) begin
		memory_controller_address_b = main_5_195_reg;
	end
	/* main: %5*/
	/*   %202 = load i16* %201, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_42)) begin
		memory_controller_address_b = main_5_201_reg;
	end
	/* main: %5*/
	/*   %208 = load i16* %207, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_43)) begin
		memory_controller_address_b = main_5_207_reg;
	end
	/* main: %5*/
	/*   %214 = load i16* %213, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_44)) begin
		memory_controller_address_b = main_5_213_reg;
	end
	/* main: %5*/
	/*   %220 = load i16* %219, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_45)) begin
		memory_controller_address_b = main_5_219_reg;
	end
	/* main: %5*/
	/*   %226 = load i16* %225, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_46)) begin
		memory_controller_address_b = main_5_225_reg;
	end
	/* main: %5*/
	/*   %232 = load i16* %231, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_47)) begin
		memory_controller_address_b = main_5_231_reg;
	end
	/* main: %5*/
	/*   %238 = load i16* %237, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_48)) begin
		memory_controller_address_b = main_5_237_reg;
	end
	/* main: %5*/
	/*   %244 = load i16* %243, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_49)) begin
		memory_controller_address_b = main_5_243_reg;
	end
	/* main: %5*/
	/*   %250 = load i16* %249, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_50)) begin
		memory_controller_address_b = main_5_249_reg;
	end
	/* main: %5*/
	/*   %256 = load i16* %255, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_51)) begin
		memory_controller_address_b = main_5_255_reg;
	end
	/* main: %5*/
	/*   %262 = load i16* %261, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_52)) begin
		memory_controller_address_b = main_5_261_reg;
	end
	/* main: %5*/
	/*   %268 = load i16* %267, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_53)) begin
		memory_controller_address_b = main_5_267_reg;
	end
	/* main: %5*/
	/*   %274 = load i16* %273, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_54)) begin
		memory_controller_address_b = main_5_273_reg;
	end
	/* main: %5*/
	/*   %280 = load i16* %279, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_55)) begin
		memory_controller_address_b = main_5_279_reg;
	end
	/* main: %5*/
	/*   %286 = load i16* %285, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_56)) begin
		memory_controller_address_b = main_5_285_reg;
	end
	/* main: %5*/
	/*   %292 = load i16* %291, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_57)) begin
		memory_controller_address_b = main_5_291_reg;
	end
	/* main: %5*/
	/*   %298 = load i16* %297, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_58)) begin
		memory_controller_address_b = main_5_297_reg;
	end
	/* main: %5*/
	/*   %304 = load i16* %303, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_59)) begin
		memory_controller_address_b = main_5_303_reg;
	end
	/* main: %5*/
	/*   %310 = load i16* %309, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_60)) begin
		memory_controller_address_b = main_5_309_reg;
	end
	/* main: %5*/
	/*   %316 = load i16* %315, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_61)) begin
		memory_controller_address_b = main_5_315_reg;
	end
	/* main: %5*/
	/*   %322 = load i16* %321, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_62)) begin
		memory_controller_address_b = main_5_321_reg;
	end
	/* main: %5*/
	/*   %328 = load i16* %327, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_63)) begin
		memory_controller_address_b = main_5_327_reg;
	end
	/* main: %5*/
	/*   %334 = load i16* %333, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_64)) begin
		memory_controller_address_b = main_5_333_reg;
	end
	/* main: %5*/
	/*   %340 = load i16* %339, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_65)) begin
		memory_controller_address_b = main_5_339_reg;
	end
	/* main: %5*/
	/*   %346 = load i16* %345, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_66)) begin
		memory_controller_address_b = main_5_345_reg;
	end
	/* main: %5*/
	/*   %352 = load i16* %351, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_67)) begin
		memory_controller_address_b = main_5_351_reg;
	end
	/* main: %5*/
	/*   %358 = load i16* %357, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_68)) begin
		memory_controller_address_b = main_5_357_reg;
	end
	/* main: %5*/
	/*   %364 = load i16* %363, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_69)) begin
		memory_controller_address_b = main_5_363_reg;
	end
	/* main: %5*/
	/*   %370 = load i16* %369, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_70)) begin
		memory_controller_address_b = main_5_369_reg;
	end
	/* main: %5*/
	/*   %376 = load i16* %375, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_71)) begin
		memory_controller_address_b = main_5_375_reg;
	end
	/* main: %5*/
	/*   %382 = load i16* %381, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_72)) begin
		memory_controller_address_b = main_5_381_reg;
	end
	/* main: %5*/
	/*   %388 = load i16* %387, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_73)) begin
		memory_controller_address_b = main_5_387_reg;
	end
	/* main: %5*/
	/*   store i16 %11, i16* %9, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_74)) begin
		memory_controller_address_b = main_5_9_reg;
	end
	/* main: %5*/
	/*   store i16 %16, i16* %17, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_75)) begin
		memory_controller_address_b = main_5_17_reg;
	end
	/* main: %5*/
	/*   store i16 %22, i16* %23, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_76)) begin
		memory_controller_address_b = main_5_23_reg;
	end
	/* main: %5*/
	/*   store i16 %28, i16* %29, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_77)) begin
		memory_controller_address_b = main_5_29_reg;
	end
	/* main: %5*/
	/*   store i16 %34, i16* %35, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_78)) begin
		memory_controller_address_b = main_5_35_reg;
	end
	/* main: %5*/
	/*   store i16 %40, i16* %41, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_79)) begin
		memory_controller_address_b = main_5_41_reg;
	end
	/* main: %5*/
	/*   store i16 %46, i16* %47, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_80)) begin
		memory_controller_address_b = main_5_47_reg;
	end
	/* main: %5*/
	/*   store i16 %52, i16* %53, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_81)) begin
		memory_controller_address_b = main_5_53_reg;
	end
	/* main: %5*/
	/*   store i16 %58, i16* %59, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_82)) begin
		memory_controller_address_b = main_5_59_reg;
	end
	/* main: %5*/
	/*   store i16 %64, i16* %65, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_83)) begin
		memory_controller_address_b = main_5_65_reg;
	end
	/* main: %5*/
	/*   store i16 %70, i16* %71, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_84)) begin
		memory_controller_address_b = main_5_71_reg;
	end
	/* main: %5*/
	/*   store i16 %76, i16* %77, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_85)) begin
		memory_controller_address_b = main_5_77_reg;
	end
	/* main: %5*/
	/*   store i16 %82, i16* %83, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_86)) begin
		memory_controller_address_b = main_5_83_reg;
	end
	/* main: %5*/
	/*   store i16 %88, i16* %89, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_87)) begin
		memory_controller_address_b = main_5_89_reg;
	end
	/* main: %5*/
	/*   store i16 %94, i16* %95, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_88)) begin
		memory_controller_address_b = main_5_95_reg;
	end
	/* main: %5*/
	/*   store i16 %100, i16* %101, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_89)) begin
		memory_controller_address_b = main_5_101_reg;
	end
	/* main: %5*/
	/*   store i16 %106, i16* %107, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_90)) begin
		memory_controller_address_b = main_5_107_reg;
	end
	/* main: %5*/
	/*   store i16 %112, i16* %113, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_91)) begin
		memory_controller_address_b = main_5_113_reg;
	end
	/* main: %5*/
	/*   store i16 %118, i16* %119, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_92)) begin
		memory_controller_address_b = main_5_119_reg;
	end
	/* main: %5*/
	/*   store i16 %124, i16* %125, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_93)) begin
		memory_controller_address_b = main_5_125_reg;
	end
	/* main: %5*/
	/*   store i16 %130, i16* %131, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_94)) begin
		memory_controller_address_b = main_5_131_reg;
	end
	/* main: %5*/
	/*   store i16 %136, i16* %137, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_95)) begin
		memory_controller_address_b = main_5_137_reg;
	end
	/* main: %5*/
	/*   store i16 %142, i16* %143, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_96)) begin
		memory_controller_address_b = main_5_143_reg;
	end
	/* main: %5*/
	/*   store i16 %148, i16* %149, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_97)) begin
		memory_controller_address_b = main_5_149_reg;
	end
	/* main: %5*/
	/*   store i16 %154, i16* %155, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_98)) begin
		memory_controller_address_b = main_5_155_reg;
	end
	/* main: %5*/
	/*   store i16 %160, i16* %161, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_99)) begin
		memory_controller_address_b = main_5_161_reg;
	end
	/* main: %5*/
	/*   store i16 %166, i16* %167, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_100)) begin
		memory_controller_address_b = main_5_167_reg;
	end
	/* main: %5*/
	/*   store i16 %172, i16* %173, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_101)) begin
		memory_controller_address_b = main_5_173_reg;
	end
	/* main: %5*/
	/*   store i16 %178, i16* %179, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_102)) begin
		memory_controller_address_b = main_5_179_reg;
	end
	/* main: %5*/
	/*   store i16 %184, i16* %185, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_103)) begin
		memory_controller_address_b = main_5_185_reg;
	end
	/* main: %5*/
	/*   store i16 %190, i16* %191, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_104)) begin
		memory_controller_address_b = main_5_191_reg;
	end
	/* main: %5*/
	/*   store i16 %196, i16* %197, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_105)) begin
		memory_controller_address_b = main_5_197_reg;
	end
	/* main: %5*/
	/*   store i16 %202, i16* %203, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_106)) begin
		memory_controller_address_b = main_5_203_reg;
	end
	/* main: %5*/
	/*   store i16 %208, i16* %209, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_107)) begin
		memory_controller_address_b = main_5_209_reg;
	end
	/* main: %5*/
	/*   store i16 %214, i16* %215, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_108)) begin
		memory_controller_address_b = main_5_215_reg;
	end
	/* main: %5*/
	/*   store i16 %220, i16* %221, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_109)) begin
		memory_controller_address_b = main_5_221_reg;
	end
	/* main: %5*/
	/*   store i16 %226, i16* %227, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_110)) begin
		memory_controller_address_b = main_5_227_reg;
	end
	/* main: %5*/
	/*   store i16 %232, i16* %233, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_111)) begin
		memory_controller_address_b = main_5_233_reg;
	end
	/* main: %5*/
	/*   store i16 %238, i16* %239, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_112)) begin
		memory_controller_address_b = main_5_239_reg;
	end
	/* main: %5*/
	/*   store i16 %244, i16* %245, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_113)) begin
		memory_controller_address_b = main_5_245_reg;
	end
	/* main: %5*/
	/*   store i16 %250, i16* %251, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_114)) begin
		memory_controller_address_b = main_5_251_reg;
	end
	/* main: %5*/
	/*   store i16 %256, i16* %257, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_115)) begin
		memory_controller_address_b = main_5_257_reg;
	end
	/* main: %5*/
	/*   store i16 %262, i16* %263, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_116)) begin
		memory_controller_address_b = main_5_263_reg;
	end
	/* main: %5*/
	/*   store i16 %268, i16* %269, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_117)) begin
		memory_controller_address_b = main_5_269_reg;
	end
	/* main: %5*/
	/*   store i16 %274, i16* %275, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_118)) begin
		memory_controller_address_b = main_5_275_reg;
	end
	/* main: %5*/
	/*   store i16 %280, i16* %281, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_119)) begin
		memory_controller_address_b = main_5_281_reg;
	end
	/* main: %5*/
	/*   store i16 %286, i16* %287, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_120)) begin
		memory_controller_address_b = main_5_287_reg;
	end
	/* main: %5*/
	/*   store i16 %292, i16* %293, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_121)) begin
		memory_controller_address_b = main_5_293_reg;
	end
	/* main: %5*/
	/*   store i16 %298, i16* %299, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_122)) begin
		memory_controller_address_b = main_5_299_reg;
	end
	/* main: %5*/
	/*   store i16 %304, i16* %305, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_123)) begin
		memory_controller_address_b = main_5_305_reg;
	end
	/* main: %5*/
	/*   store i16 %310, i16* %311, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_124)) begin
		memory_controller_address_b = main_5_311_reg;
	end
	/* main: %5*/
	/*   store i16 %316, i16* %317, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_125)) begin
		memory_controller_address_b = main_5_317_reg;
	end
	/* main: %5*/
	/*   store i16 %322, i16* %323, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_126)) begin
		memory_controller_address_b = main_5_323_reg;
	end
	/* main: %5*/
	/*   store i16 %328, i16* %329, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_127)) begin
		memory_controller_address_b = main_5_329_reg;
	end
	/* main: %5*/
	/*   store i16 %334, i16* %335, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_128)) begin
		memory_controller_address_b = main_5_335_reg;
	end
	/* main: %5*/
	/*   store i16 %340, i16* %341, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_129)) begin
		memory_controller_address_b = main_5_341_reg;
	end
	/* main: %5*/
	/*   store i16 %346, i16* %347, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_130)) begin
		memory_controller_address_b = main_5_347_reg;
	end
	/* main: %5*/
	/*   store i16 %352, i16* %353, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_131)) begin
		memory_controller_address_b = main_5_353_reg;
	end
	/* main: %5*/
	/*   store i16 %358, i16* %359, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_132)) begin
		memory_controller_address_b = main_5_359_reg;
	end
	/* main: %5*/
	/*   store i16 %364, i16* %365, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_133)) begin
		memory_controller_address_b = main_5_365_reg;
	end
	/* main: %5*/
	/*   store i16 %370, i16* %371, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_134)) begin
		memory_controller_address_b = main_5_371_reg;
	end
	/* main: %5*/
	/*   store i16 %376, i16* %377, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_135)) begin
		memory_controller_address_b = main_5_377_reg;
	end
	/* main: %5*/
	/*   store i16 %382, i16* %383, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_136)) begin
		memory_controller_address_b = main_5_383_reg;
	end
	/* main: %5*/
	/*   store i16 %388, i16* %389, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_137)) begin
		memory_controller_address_b = main_5_389_reg;
	end
	/* main: %407*/
	/*   %419 = load i16* %418, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__407_147)) begin
		memory_controller_address_b = main_407_418;
	end
	/* main: %407*/
	/*   %445 = load i16* %444, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__407_148)) begin
		memory_controller_address_b = main_407_444_reg;
	end
	/* main: %407*/
	/*   store i16 %461, i16* %418, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__407_151)) begin
		memory_controller_address_b = main_407_418_reg;
	end
	/* main: %407*/
	/*   store i16 %467, i16* %444, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__407_152)) begin
		memory_controller_address_b = main_407_444_reg;
	end
	/* main: %fft.exit*/
	/*   %480 = load i16* %scevgep, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_fftexit_159)) begin
		memory_controller_address_b = main_fftexit_scevgep;
	end
end
always @(*) begin
	memory_controller_write_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %1*/
	/*   %input_temp.0.input_temp.0.input_temp.0.1 = load volatile i16* %input_temp, align 2*/
	if ((cur_state == LEGUP_F_main_BB__1_6)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %5*/
	/*   %11 = load i16* %7, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_10)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %5*/
	/*   %16 = load i16* %15, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_11)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %5*/
	/*   %22 = load i16* %21, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_12)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %5*/
	/*   %28 = load i16* %27, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_13)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %5*/
	/*   %34 = load i16* %33, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_14)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %5*/
	/*   %40 = load i16* %39, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_15)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %5*/
	/*   %46 = load i16* %45, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_16)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %5*/
	/*   %52 = load i16* %51, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_17)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %5*/
	/*   %58 = load i16* %57, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_18)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %5*/
	/*   %64 = load i16* %63, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_19)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %5*/
	/*   %70 = load i16* %69, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_20)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %5*/
	/*   %76 = load i16* %75, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_21)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %5*/
	/*   %82 = load i16* %81, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_22)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %5*/
	/*   %88 = load i16* %87, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_23)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %5*/
	/*   %94 = load i16* %93, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_24)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %5*/
	/*   %100 = load i16* %99, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_25)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %5*/
	/*   %106 = load i16* %105, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_26)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %5*/
	/*   %112 = load i16* %111, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_27)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %5*/
	/*   %118 = load i16* %117, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_28)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %5*/
	/*   %124 = load i16* %123, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_29)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %5*/
	/*   %130 = load i16* %129, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_30)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %5*/
	/*   %136 = load i16* %135, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_31)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %5*/
	/*   %142 = load i16* %141, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_32)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %5*/
	/*   %148 = load i16* %147, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_33)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %5*/
	/*   %154 = load i16* %153, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_34)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %5*/
	/*   %160 = load i16* %159, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_35)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %5*/
	/*   %166 = load i16* %165, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_36)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %5*/
	/*   %172 = load i16* %171, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_37)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %5*/
	/*   %178 = load i16* %177, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_38)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %5*/
	/*   %184 = load i16* %183, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_39)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %5*/
	/*   %190 = load i16* %189, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_40)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %5*/
	/*   %196 = load i16* %195, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_41)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %5*/
	/*   %202 = load i16* %201, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_42)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %5*/
	/*   %208 = load i16* %207, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_43)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %5*/
	/*   %214 = load i16* %213, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_44)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %5*/
	/*   %220 = load i16* %219, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_45)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %5*/
	/*   %226 = load i16* %225, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_46)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %5*/
	/*   %232 = load i16* %231, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_47)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %5*/
	/*   %238 = load i16* %237, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_48)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %5*/
	/*   %244 = load i16* %243, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_49)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %5*/
	/*   %250 = load i16* %249, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_50)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %5*/
	/*   %256 = load i16* %255, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_51)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %5*/
	/*   %262 = load i16* %261, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_52)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %5*/
	/*   %268 = load i16* %267, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_53)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %5*/
	/*   %274 = load i16* %273, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_54)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %5*/
	/*   %280 = load i16* %279, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_55)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %5*/
	/*   %286 = load i16* %285, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_56)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %5*/
	/*   %292 = load i16* %291, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_57)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %5*/
	/*   %298 = load i16* %297, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_58)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %5*/
	/*   %304 = load i16* %303, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_59)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %5*/
	/*   %310 = load i16* %309, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_60)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %5*/
	/*   %316 = load i16* %315, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_61)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %5*/
	/*   %322 = load i16* %321, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_62)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %5*/
	/*   %328 = load i16* %327, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_63)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %5*/
	/*   %334 = load i16* %333, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_64)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %5*/
	/*   %340 = load i16* %339, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_65)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %5*/
	/*   %346 = load i16* %345, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_66)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %5*/
	/*   %352 = load i16* %351, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_67)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %5*/
	/*   %358 = load i16* %357, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_68)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %5*/
	/*   %364 = load i16* %363, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_69)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %5*/
	/*   %370 = load i16* %369, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_70)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %5*/
	/*   %376 = load i16* %375, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_71)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %5*/
	/*   %382 = load i16* %381, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_72)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %5*/
	/*   %388 = load i16* %387, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_73)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %5*/
	/*   store i16 %11, i16* %9, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_74)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %5*/
	/*   store i16 %16, i16* %17, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_75)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %5*/
	/*   store i16 %22, i16* %23, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_76)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %5*/
	/*   store i16 %28, i16* %29, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_77)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %5*/
	/*   store i16 %34, i16* %35, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_78)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %5*/
	/*   store i16 %40, i16* %41, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_79)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %5*/
	/*   store i16 %46, i16* %47, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_80)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %5*/
	/*   store i16 %52, i16* %53, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_81)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %5*/
	/*   store i16 %58, i16* %59, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_82)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %5*/
	/*   store i16 %64, i16* %65, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_83)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %5*/
	/*   store i16 %70, i16* %71, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_84)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %5*/
	/*   store i16 %76, i16* %77, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_85)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %5*/
	/*   store i16 %82, i16* %83, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_86)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %5*/
	/*   store i16 %88, i16* %89, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_87)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %5*/
	/*   store i16 %94, i16* %95, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_88)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %5*/
	/*   store i16 %100, i16* %101, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_89)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %5*/
	/*   store i16 %106, i16* %107, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_90)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %5*/
	/*   store i16 %112, i16* %113, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_91)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %5*/
	/*   store i16 %118, i16* %119, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_92)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %5*/
	/*   store i16 %124, i16* %125, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_93)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %5*/
	/*   store i16 %130, i16* %131, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_94)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %5*/
	/*   store i16 %136, i16* %137, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_95)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %5*/
	/*   store i16 %142, i16* %143, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_96)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %5*/
	/*   store i16 %148, i16* %149, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_97)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %5*/
	/*   store i16 %154, i16* %155, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_98)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %5*/
	/*   store i16 %160, i16* %161, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_99)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %5*/
	/*   store i16 %166, i16* %167, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_100)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %5*/
	/*   store i16 %172, i16* %173, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_101)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %5*/
	/*   store i16 %178, i16* %179, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_102)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %5*/
	/*   store i16 %184, i16* %185, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_103)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %5*/
	/*   store i16 %190, i16* %191, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_104)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %5*/
	/*   store i16 %196, i16* %197, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_105)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %5*/
	/*   store i16 %202, i16* %203, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_106)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %5*/
	/*   store i16 %208, i16* %209, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_107)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %5*/
	/*   store i16 %214, i16* %215, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_108)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %5*/
	/*   store i16 %220, i16* %221, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_109)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %5*/
	/*   store i16 %226, i16* %227, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_110)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %5*/
	/*   store i16 %232, i16* %233, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_111)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %5*/
	/*   store i16 %238, i16* %239, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_112)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %5*/
	/*   store i16 %244, i16* %245, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_113)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %5*/
	/*   store i16 %250, i16* %251, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_114)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %5*/
	/*   store i16 %256, i16* %257, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_115)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %5*/
	/*   store i16 %262, i16* %263, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_116)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %5*/
	/*   store i16 %268, i16* %269, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_117)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %5*/
	/*   store i16 %274, i16* %275, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_118)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %5*/
	/*   store i16 %280, i16* %281, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_119)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %5*/
	/*   store i16 %286, i16* %287, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_120)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %5*/
	/*   store i16 %292, i16* %293, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_121)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %5*/
	/*   store i16 %298, i16* %299, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_122)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %5*/
	/*   store i16 %304, i16* %305, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_123)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %5*/
	/*   store i16 %310, i16* %311, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_124)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %5*/
	/*   store i16 %316, i16* %317, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_125)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %5*/
	/*   store i16 %322, i16* %323, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_126)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %5*/
	/*   store i16 %328, i16* %329, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_127)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %5*/
	/*   store i16 %334, i16* %335, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_128)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %5*/
	/*   store i16 %340, i16* %341, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_129)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %5*/
	/*   store i16 %346, i16* %347, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_130)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %5*/
	/*   store i16 %352, i16* %353, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_131)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %5*/
	/*   store i16 %358, i16* %359, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_132)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %5*/
	/*   store i16 %364, i16* %365, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_133)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %5*/
	/*   store i16 %370, i16* %371, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_134)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %5*/
	/*   store i16 %376, i16* %377, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_135)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %5*/
	/*   store i16 %382, i16* %383, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_136)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %5*/
	/*   store i16 %388, i16* %389, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_137)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %407*/
	/*   %419 = load i16* %418, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__407_147)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %407*/
	/*   %445 = load i16* %444, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__407_148)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %407*/
	/*   store i16 %461, i16* %418, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__407_151)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %407*/
	/*   store i16 %467, i16* %444, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__407_152)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %fft.exit*/
	/*   %480 = load i16* %scevgep, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_fftexit_159)) begin
		memory_controller_write_enable_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_b = 1'd0;
	end
	/* main: %5*/
	/*   store i16 %11, i16* %9, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_74)) begin
		memory_controller_in_b = main_5_11_reg;
	end
	/* main: %5*/
	/*   store i16 %16, i16* %17, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_75)) begin
		memory_controller_in_b = main_5_16_reg;
	end
	/* main: %5*/
	/*   store i16 %22, i16* %23, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_76)) begin
		memory_controller_in_b = main_5_22_reg;
	end
	/* main: %5*/
	/*   store i16 %28, i16* %29, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_77)) begin
		memory_controller_in_b = main_5_28_reg;
	end
	/* main: %5*/
	/*   store i16 %34, i16* %35, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_78)) begin
		memory_controller_in_b = main_5_34_reg;
	end
	/* main: %5*/
	/*   store i16 %40, i16* %41, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_79)) begin
		memory_controller_in_b = main_5_40_reg;
	end
	/* main: %5*/
	/*   store i16 %46, i16* %47, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_80)) begin
		memory_controller_in_b = main_5_46_reg;
	end
	/* main: %5*/
	/*   store i16 %52, i16* %53, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_81)) begin
		memory_controller_in_b = main_5_52_reg;
	end
	/* main: %5*/
	/*   store i16 %58, i16* %59, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_82)) begin
		memory_controller_in_b = main_5_58_reg;
	end
	/* main: %5*/
	/*   store i16 %64, i16* %65, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_83)) begin
		memory_controller_in_b = main_5_64_reg;
	end
	/* main: %5*/
	/*   store i16 %70, i16* %71, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_84)) begin
		memory_controller_in_b = main_5_70_reg;
	end
	/* main: %5*/
	/*   store i16 %76, i16* %77, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_85)) begin
		memory_controller_in_b = main_5_76_reg;
	end
	/* main: %5*/
	/*   store i16 %82, i16* %83, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_86)) begin
		memory_controller_in_b = main_5_82_reg;
	end
	/* main: %5*/
	/*   store i16 %88, i16* %89, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_87)) begin
		memory_controller_in_b = main_5_88_reg;
	end
	/* main: %5*/
	/*   store i16 %94, i16* %95, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_88)) begin
		memory_controller_in_b = main_5_94_reg;
	end
	/* main: %5*/
	/*   store i16 %100, i16* %101, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_89)) begin
		memory_controller_in_b = main_5_100_reg;
	end
	/* main: %5*/
	/*   store i16 %106, i16* %107, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_90)) begin
		memory_controller_in_b = main_5_106_reg;
	end
	/* main: %5*/
	/*   store i16 %112, i16* %113, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_91)) begin
		memory_controller_in_b = main_5_112_reg;
	end
	/* main: %5*/
	/*   store i16 %118, i16* %119, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_92)) begin
		memory_controller_in_b = main_5_118_reg;
	end
	/* main: %5*/
	/*   store i16 %124, i16* %125, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_93)) begin
		memory_controller_in_b = main_5_124_reg;
	end
	/* main: %5*/
	/*   store i16 %130, i16* %131, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_94)) begin
		memory_controller_in_b = main_5_130_reg;
	end
	/* main: %5*/
	/*   store i16 %136, i16* %137, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_95)) begin
		memory_controller_in_b = main_5_136_reg;
	end
	/* main: %5*/
	/*   store i16 %142, i16* %143, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_96)) begin
		memory_controller_in_b = main_5_142_reg;
	end
	/* main: %5*/
	/*   store i16 %148, i16* %149, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_97)) begin
		memory_controller_in_b = main_5_148_reg;
	end
	/* main: %5*/
	/*   store i16 %154, i16* %155, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_98)) begin
		memory_controller_in_b = main_5_154_reg;
	end
	/* main: %5*/
	/*   store i16 %160, i16* %161, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_99)) begin
		memory_controller_in_b = main_5_160_reg;
	end
	/* main: %5*/
	/*   store i16 %166, i16* %167, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_100)) begin
		memory_controller_in_b = main_5_166_reg;
	end
	/* main: %5*/
	/*   store i16 %172, i16* %173, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_101)) begin
		memory_controller_in_b = main_5_172_reg;
	end
	/* main: %5*/
	/*   store i16 %178, i16* %179, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_102)) begin
		memory_controller_in_b = main_5_178_reg;
	end
	/* main: %5*/
	/*   store i16 %184, i16* %185, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_103)) begin
		memory_controller_in_b = main_5_184_reg;
	end
	/* main: %5*/
	/*   store i16 %190, i16* %191, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_104)) begin
		memory_controller_in_b = main_5_190_reg;
	end
	/* main: %5*/
	/*   store i16 %196, i16* %197, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_105)) begin
		memory_controller_in_b = main_5_196_reg;
	end
	/* main: %5*/
	/*   store i16 %202, i16* %203, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_106)) begin
		memory_controller_in_b = main_5_202_reg;
	end
	/* main: %5*/
	/*   store i16 %208, i16* %209, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_107)) begin
		memory_controller_in_b = main_5_208_reg;
	end
	/* main: %5*/
	/*   store i16 %214, i16* %215, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_108)) begin
		memory_controller_in_b = main_5_214_reg;
	end
	/* main: %5*/
	/*   store i16 %220, i16* %221, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_109)) begin
		memory_controller_in_b = main_5_220_reg;
	end
	/* main: %5*/
	/*   store i16 %226, i16* %227, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_110)) begin
		memory_controller_in_b = main_5_226_reg;
	end
	/* main: %5*/
	/*   store i16 %232, i16* %233, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_111)) begin
		memory_controller_in_b = main_5_232_reg;
	end
	/* main: %5*/
	/*   store i16 %238, i16* %239, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_112)) begin
		memory_controller_in_b = main_5_238_reg;
	end
	/* main: %5*/
	/*   store i16 %244, i16* %245, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_113)) begin
		memory_controller_in_b = main_5_244_reg;
	end
	/* main: %5*/
	/*   store i16 %250, i16* %251, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_114)) begin
		memory_controller_in_b = main_5_250_reg;
	end
	/* main: %5*/
	/*   store i16 %256, i16* %257, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_115)) begin
		memory_controller_in_b = main_5_256_reg;
	end
	/* main: %5*/
	/*   store i16 %262, i16* %263, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_116)) begin
		memory_controller_in_b = main_5_262_reg;
	end
	/* main: %5*/
	/*   store i16 %268, i16* %269, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_117)) begin
		memory_controller_in_b = main_5_268_reg;
	end
	/* main: %5*/
	/*   store i16 %274, i16* %275, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_118)) begin
		memory_controller_in_b = main_5_274_reg;
	end
	/* main: %5*/
	/*   store i16 %280, i16* %281, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_119)) begin
		memory_controller_in_b = main_5_280_reg;
	end
	/* main: %5*/
	/*   store i16 %286, i16* %287, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_120)) begin
		memory_controller_in_b = main_5_286_reg;
	end
	/* main: %5*/
	/*   store i16 %292, i16* %293, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_121)) begin
		memory_controller_in_b = main_5_292_reg;
	end
	/* main: %5*/
	/*   store i16 %298, i16* %299, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_122)) begin
		memory_controller_in_b = main_5_298_reg;
	end
	/* main: %5*/
	/*   store i16 %304, i16* %305, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_123)) begin
		memory_controller_in_b = main_5_304_reg;
	end
	/* main: %5*/
	/*   store i16 %310, i16* %311, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_124)) begin
		memory_controller_in_b = main_5_310_reg;
	end
	/* main: %5*/
	/*   store i16 %316, i16* %317, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_125)) begin
		memory_controller_in_b = main_5_316_reg;
	end
	/* main: %5*/
	/*   store i16 %322, i16* %323, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_126)) begin
		memory_controller_in_b = main_5_322_reg;
	end
	/* main: %5*/
	/*   store i16 %328, i16* %329, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_127)) begin
		memory_controller_in_b = main_5_328_reg;
	end
	/* main: %5*/
	/*   store i16 %334, i16* %335, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_128)) begin
		memory_controller_in_b = main_5_334_reg;
	end
	/* main: %5*/
	/*   store i16 %340, i16* %341, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_129)) begin
		memory_controller_in_b = main_5_340_reg;
	end
	/* main: %5*/
	/*   store i16 %346, i16* %347, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_130)) begin
		memory_controller_in_b = main_5_346_reg;
	end
	/* main: %5*/
	/*   store i16 %352, i16* %353, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_131)) begin
		memory_controller_in_b = main_5_352_reg;
	end
	/* main: %5*/
	/*   store i16 %358, i16* %359, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_132)) begin
		memory_controller_in_b = main_5_358_reg;
	end
	/* main: %5*/
	/*   store i16 %364, i16* %365, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_133)) begin
		memory_controller_in_b = main_5_364_reg;
	end
	/* main: %5*/
	/*   store i16 %370, i16* %371, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_134)) begin
		memory_controller_in_b = main_5_370_reg;
	end
	/* main: %5*/
	/*   store i16 %376, i16* %377, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_135)) begin
		memory_controller_in_b = main_5_376_reg;
	end
	/* main: %5*/
	/*   store i16 %382, i16* %383, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_136)) begin
		memory_controller_in_b = main_5_382_reg;
	end
	/* main: %5*/
	/*   store i16 %388, i16* %389, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_137)) begin
		memory_controller_in_b = main_5_388_reg;
	end
	/* main: %407*/
	/*   store i16 %461, i16* %418, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__407_151)) begin
		memory_controller_in_b = main_407_461;
	end
	/* main: %407*/
	/*   store i16 %467, i16* %444, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__407_152)) begin
		memory_controller_in_b = main_407_467_reg;
	end
end
always @(*) begin
	memory_controller_size_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_b = 1'd0;
	end
	/* main: %1*/
	/*   %input_temp.0.input_temp.0.input_temp.0.1 = load volatile i16* %input_temp, align 2*/
	if ((cur_state == LEGUP_F_main_BB__1_6)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %5*/
	/*   %11 = load i16* %7, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_10)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %5*/
	/*   %16 = load i16* %15, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_11)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %5*/
	/*   %22 = load i16* %21, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_12)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %5*/
	/*   %28 = load i16* %27, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_13)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %5*/
	/*   %34 = load i16* %33, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_14)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %5*/
	/*   %40 = load i16* %39, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_15)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %5*/
	/*   %46 = load i16* %45, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_16)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %5*/
	/*   %52 = load i16* %51, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_17)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %5*/
	/*   %58 = load i16* %57, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_18)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %5*/
	/*   %64 = load i16* %63, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_19)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %5*/
	/*   %70 = load i16* %69, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_20)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %5*/
	/*   %76 = load i16* %75, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_21)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %5*/
	/*   %82 = load i16* %81, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_22)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %5*/
	/*   %88 = load i16* %87, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_23)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %5*/
	/*   %94 = load i16* %93, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_24)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %5*/
	/*   %100 = load i16* %99, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_25)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %5*/
	/*   %106 = load i16* %105, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_26)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %5*/
	/*   %112 = load i16* %111, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_27)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %5*/
	/*   %118 = load i16* %117, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_28)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %5*/
	/*   %124 = load i16* %123, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_29)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %5*/
	/*   %130 = load i16* %129, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_30)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %5*/
	/*   %136 = load i16* %135, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_31)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %5*/
	/*   %142 = load i16* %141, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_32)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %5*/
	/*   %148 = load i16* %147, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_33)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %5*/
	/*   %154 = load i16* %153, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_34)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %5*/
	/*   %160 = load i16* %159, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_35)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %5*/
	/*   %166 = load i16* %165, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_36)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %5*/
	/*   %172 = load i16* %171, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_37)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %5*/
	/*   %178 = load i16* %177, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_38)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %5*/
	/*   %184 = load i16* %183, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_39)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %5*/
	/*   %190 = load i16* %189, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_40)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %5*/
	/*   %196 = load i16* %195, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_41)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %5*/
	/*   %202 = load i16* %201, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_42)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %5*/
	/*   %208 = load i16* %207, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_43)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %5*/
	/*   %214 = load i16* %213, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_44)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %5*/
	/*   %220 = load i16* %219, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_45)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %5*/
	/*   %226 = load i16* %225, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_46)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %5*/
	/*   %232 = load i16* %231, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_47)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %5*/
	/*   %238 = load i16* %237, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_48)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %5*/
	/*   %244 = load i16* %243, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_49)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %5*/
	/*   %250 = load i16* %249, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_50)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %5*/
	/*   %256 = load i16* %255, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_51)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %5*/
	/*   %262 = load i16* %261, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_52)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %5*/
	/*   %268 = load i16* %267, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_53)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %5*/
	/*   %274 = load i16* %273, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_54)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %5*/
	/*   %280 = load i16* %279, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_55)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %5*/
	/*   %286 = load i16* %285, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_56)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %5*/
	/*   %292 = load i16* %291, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_57)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %5*/
	/*   %298 = load i16* %297, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_58)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %5*/
	/*   %304 = load i16* %303, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_59)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %5*/
	/*   %310 = load i16* %309, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_60)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %5*/
	/*   %316 = load i16* %315, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_61)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %5*/
	/*   %322 = load i16* %321, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_62)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %5*/
	/*   %328 = load i16* %327, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_63)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %5*/
	/*   %334 = load i16* %333, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_64)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %5*/
	/*   %340 = load i16* %339, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_65)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %5*/
	/*   %346 = load i16* %345, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_66)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %5*/
	/*   %352 = load i16* %351, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_67)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %5*/
	/*   %358 = load i16* %357, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_68)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %5*/
	/*   %364 = load i16* %363, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_69)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %5*/
	/*   %370 = load i16* %369, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_70)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %5*/
	/*   %376 = load i16* %375, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_71)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %5*/
	/*   %382 = load i16* %381, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_72)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %5*/
	/*   %388 = load i16* %387, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_73)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %5*/
	/*   store i16 %11, i16* %9, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_74)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %5*/
	/*   store i16 %16, i16* %17, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_75)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %5*/
	/*   store i16 %22, i16* %23, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_76)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %5*/
	/*   store i16 %28, i16* %29, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_77)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %5*/
	/*   store i16 %34, i16* %35, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_78)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %5*/
	/*   store i16 %40, i16* %41, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_79)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %5*/
	/*   store i16 %46, i16* %47, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_80)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %5*/
	/*   store i16 %52, i16* %53, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_81)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %5*/
	/*   store i16 %58, i16* %59, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_82)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %5*/
	/*   store i16 %64, i16* %65, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_83)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %5*/
	/*   store i16 %70, i16* %71, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_84)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %5*/
	/*   store i16 %76, i16* %77, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_85)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %5*/
	/*   store i16 %82, i16* %83, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_86)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %5*/
	/*   store i16 %88, i16* %89, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_87)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %5*/
	/*   store i16 %94, i16* %95, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_88)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %5*/
	/*   store i16 %100, i16* %101, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_89)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %5*/
	/*   store i16 %106, i16* %107, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_90)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %5*/
	/*   store i16 %112, i16* %113, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_91)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %5*/
	/*   store i16 %118, i16* %119, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_92)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %5*/
	/*   store i16 %124, i16* %125, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_93)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %5*/
	/*   store i16 %130, i16* %131, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_94)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %5*/
	/*   store i16 %136, i16* %137, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_95)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %5*/
	/*   store i16 %142, i16* %143, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_96)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %5*/
	/*   store i16 %148, i16* %149, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_97)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %5*/
	/*   store i16 %154, i16* %155, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_98)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %5*/
	/*   store i16 %160, i16* %161, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_99)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %5*/
	/*   store i16 %166, i16* %167, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_100)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %5*/
	/*   store i16 %172, i16* %173, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_101)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %5*/
	/*   store i16 %178, i16* %179, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_102)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %5*/
	/*   store i16 %184, i16* %185, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_103)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %5*/
	/*   store i16 %190, i16* %191, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_104)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %5*/
	/*   store i16 %196, i16* %197, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_105)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %5*/
	/*   store i16 %202, i16* %203, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_106)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %5*/
	/*   store i16 %208, i16* %209, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_107)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %5*/
	/*   store i16 %214, i16* %215, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_108)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %5*/
	/*   store i16 %220, i16* %221, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_109)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %5*/
	/*   store i16 %226, i16* %227, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_110)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %5*/
	/*   store i16 %232, i16* %233, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_111)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %5*/
	/*   store i16 %238, i16* %239, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_112)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %5*/
	/*   store i16 %244, i16* %245, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_113)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %5*/
	/*   store i16 %250, i16* %251, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_114)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %5*/
	/*   store i16 %256, i16* %257, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_115)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %5*/
	/*   store i16 %262, i16* %263, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_116)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %5*/
	/*   store i16 %268, i16* %269, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_117)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %5*/
	/*   store i16 %274, i16* %275, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_118)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %5*/
	/*   store i16 %280, i16* %281, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_119)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %5*/
	/*   store i16 %286, i16* %287, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_120)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %5*/
	/*   store i16 %292, i16* %293, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_121)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %5*/
	/*   store i16 %298, i16* %299, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_122)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %5*/
	/*   store i16 %304, i16* %305, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_123)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %5*/
	/*   store i16 %310, i16* %311, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_124)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %5*/
	/*   store i16 %316, i16* %317, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_125)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %5*/
	/*   store i16 %322, i16* %323, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_126)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %5*/
	/*   store i16 %328, i16* %329, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_127)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %5*/
	/*   store i16 %334, i16* %335, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_128)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %5*/
	/*   store i16 %340, i16* %341, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_129)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %5*/
	/*   store i16 %346, i16* %347, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_130)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %5*/
	/*   store i16 %352, i16* %353, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_131)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %5*/
	/*   store i16 %358, i16* %359, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_132)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %5*/
	/*   store i16 %364, i16* %365, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_133)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %5*/
	/*   store i16 %370, i16* %371, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_134)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %5*/
	/*   store i16 %376, i16* %377, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_135)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %5*/
	/*   store i16 %382, i16* %383, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_136)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %5*/
	/*   store i16 %388, i16* %389, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__5_137)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %407*/
	/*   %419 = load i16* %418, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__407_147)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %407*/
	/*   %445 = load i16* %444, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__407_148)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %407*/
	/*   store i16 %461, i16* %418, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__407_151)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %407*/
	/*   store i16 %467, i16* %444, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__407_152)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %fft.exit*/
	/*   %480 = load i16* %scevgep, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_fftexit_159)) begin
		memory_controller_size_b = 2'd1;
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		return_val <= 0;
		if (start == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
	/* main: %494*/
	/*   ret i32 %485*/
	if ((cur_state == LEGUP_F_main_BB__494_165)) begin
		return_val <= main_fftexit_485_reg;
		if (start == 1'b0 && ^(main_fftexit_485_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
end

endmodule 
module ram_dual_port
(
	clk,
	clken,
	address_a,
	address_b,
	wren_a,
	wren_b,
	data_a,
	data_b,
	byteena_a,
	byteena_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED.mif";
parameter  width_be_a = 1'd0;
parameter  width_be_b = 1'd0;
parameter  latency = 1;

input  clk;
input  clken;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output wire [(width_a-1):0] q_a;
output wire [(width_b-1):0] q_b;
reg [(width_a-1):0] q_a_wire;
reg [(width_b-1):0] q_b_wire;
input  wren_a;
input  wren_b;
input [(width_a-1):0] data_a;
input [(width_b-1):0] data_b;
// byte enable is unsupported by inferred RAMs
input [width_be_a-1:0] byteena_a;
input [width_be_b-1:0] byteena_b;

(* ramstyle = "no_rw_check", ram_init_file = init_file *) reg [width_a-1:0] ram[numwords_a-1:0];

/* synthesis translate_off */
integer i;
ALTERA_MF_MEMORY_INITIALIZATION mem ();
reg [8*256:1] ram_ver_file;
initial begin
	if (init_file == "UNUSED.mif")
    begin
		for (i = 0; i < numwords_a; i = i + 1)
			ram[i] = 0;
    end
	else
    begin
        // modelsim can't read .mif files directly. So use Altera function to
        // convert them to .ver files
        mem.convert_to_ver_file(init_file, width_a, ram_ver_file);
        $readmemh(ram_ver_file, ram);
    end
end
/* synthesis translate_on */

always @ (posedge clk)
if (clken)
begin // Port A
if (wren_a)
begin
    ram[address_a] <= data_a;
    q_a_wire <= {width_a{1'bX}};
end
else
    q_a_wire <= ram[address_a];
end
always @ (posedge clk)
if (clken)
begin // Port b
if (wren_b)
begin
    ram[address_b] <= data_b;
    q_b_wire <= {width_b{1'bX}};
end
else
    q_b_wire <= ram[address_b];
end



integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
if (clken)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = (clken) ? q_a_reg[latency] : 0;
assign q_b = (clken) ? q_b_reg[latency] : 0;


endmodule
module rom_dual_port
(
	clk,
	clken,
	address_a,
	address_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED.mif";
parameter  latency = 1;

input  clk;
input  clken;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output wire [(width_a-1):0] q_a;
output wire [(width_b-1):0] q_b;
reg [(width_a-1):0] q_a_wire;
reg [(width_b-1):0] q_b_wire;

(* ramstyle = "no_rw_check", ram_init_file = init_file *) reg [width_a-1:0] ram[numwords_a-1:0];

/* synthesis translate_off */
integer i;
ALTERA_MF_MEMORY_INITIALIZATION mem ();
reg [8*256:1] ram_ver_file;
initial begin
	if (init_file == "UNUSED.mif")
    begin
		for (i = 0; i < numwords_a; i = i + 1)
			ram[i] = 0;
    end
	else
    begin
        // modelsim can't read .mif files directly. So use Altera function to
        // convert them to .ver files
        mem.convert_to_ver_file(init_file, width_a, ram_ver_file);
        $readmemh(ram_ver_file, ram);
    end
end
/* synthesis translate_on */

always @ (posedge clk)
if (clken)
begin
    q_a_wire <= ram[address_a];
    q_b_wire <= ram[address_b];
end



integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
if (clken)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = (clken) ? q_a_reg[latency] : 0;
assign q_b = (clken) ? q_b_reg[latency] : 0;


endmodule
// Adding code from verilog file: ../../boards/Virtex6/ML605/top.v


module ML605 (
       USER_CLOCK,
	    KEY,
	    SW,	    
       LED,
       LEDG,
		UART_RXD,
		UART_TXD

	    );

   input USER_CLOCK;
   input [4:0] KEY;
   input [7:0] SW;
   output [7:0] LED;
   output [7:0] LEDG;
   wire CLOCK_50;

    input UART_RXD;
    output UART_TXD;    
	wire clk = CLOCK_50;
	wire go = ~KEY[1];



   wire 	reset = ~KEY[0];
   wire 	start;
   wire [31:0] 	return_val;
   reg  [31:0] 	return_val_reg;
   wire 	finish;
   wire [3:0]	state;
   
   reg [6:0]   hex0, hex1, hex2, hex3, hex4, hex5, hex6, hex7;

   assign CLOCK_50 = USER_CLOCK;
   assign LED = 0;
   
	always @ (*) begin
		hex7 <= return_val_reg[31:28];
		hex6 <= return_val_reg[27:24];
		hex5 <= return_val_reg[23:20];
		hex4 <= return_val_reg[19:16];
		hex3 <= return_val_reg[15:12];
		hex2 <= return_val_reg[11:8];
		hex1 <= return_val_reg[7:4];
		hex0 <= return_val_reg[3:0];
	end
assign UART_TXD = 1'b0;

    parameter s_WAIT = 3'b001, s_START = 3'b010, s_EXE = 3'b011,
                s_DONE = 3'b100;

    // state registers
    reg [3:0] y_Q, Y_D;

    assign LEDG[3:0] = y_Q;

    // next state
    always @(*)
    begin
        case (y_Q)
            s_WAIT: if (go) Y_D = s_START; else Y_D = y_Q;

            s_START: Y_D = s_EXE;

            s_EXE: if (!finish) Y_D = s_EXE; else Y_D = s_DONE;

            s_DONE: Y_D = s_DONE;

            default: Y_D = 3'bxxx;
        endcase
    end

    // current state
    always @(posedge clk)
    begin
        if (reset) // synchronous clear
            y_Q <= s_WAIT;
        else
            y_Q <= Y_D;
    end

    always @(posedge clk)
        if (y_Q == s_EXE && finish)
            return_val_reg <= return_val;
        else if (y_Q == s_DONE)
            return_val_reg <= return_val_reg;
        else
            return_val_reg <= 0;


    assign start = (y_Q == s_START);

   
   top top_inst (
      .clk (clk),
      .reset (reset),
      .finish (finish),
      .return_val (return_val),
        .start (start)

    );

   

endmodule

// Adding code from verilog file: ../../boards/StratixIV/DE4/top.v


module de4 ( 
    	     OSC_50_BANK2, 
             BUTTON, 
             LED, 
    	     SEG0_D, 
    	     SEG1_D 
	     ); 
   input OSC_50_BANK2; 
   input [1:0] BUTTON; 
   output [6:0] SEG0_D; 
   output [6:0] SEG1_D; 
   output [7:0] LED; 
   
   de2 de2_inst ( 
		  .CLOCK_50 (OSC_50_BANK2), 
		  .LEDG (LED), 
		  .KEY (BUTTON), 
		  .SW (), 
		  .HEX0 (SEG0_D), 
		  .HEX1 (SEG1_D), 
		  .HEX2 (), 
		  .HEX3 (), 
		  .HEX4 (), 
		  .HEX5 (), 
		  .HEX6 (), 
		  .HEX7 () 
		  ); 
   
endmodule
// Adding code from verilog file: ../../boards/CycloneII/DE2/top.v


module de2 (
	    CLOCK_50,
	    KEY,
	    SW,
	    HEX0,
	    HEX1,
	    HEX2,
	    HEX3,
	    HEX4,
	    HEX5,
	    HEX6,
	    HEX7,
	    LEDG,
		UART_RXD,
		UART_TXD

	    );

   input CLOCK_50;
   input [3:0] KEY;
   input [17:0] SW;
   output [6:0] HEX0, HEX1,  HEX2,  HEX3,  HEX4,  HEX5,  HEX6,  HEX7;
   reg [6:0] 	hex0, hex1, hex2, hex3, hex4, hex5, hex6, hex7;
   

   output [7:0] LEDG;
    input UART_RXD;
    output UART_TXD;    
	wire clk = CLOCK_50;
	wire go = ~KEY[1];



   wire 	reset = ~KEY[0];
   wire 	start;
   wire [31:0] 	return_val;
   reg  [31:0] 	return_val_reg;
   wire 	finish;
   wire [3:0]	state;

   hex_digits h7( .x(hex7), .hex_LEDs(HEX7));
   hex_digits h6( .x(hex6), .hex_LEDs(HEX6));
   hex_digits h5( .x(hex5), .hex_LEDs(HEX5));
   hex_digits h4( .x(hex4), .hex_LEDs(HEX4));
   hex_digits h3( .x(hex3), .hex_LEDs(HEX3));
   hex_digits h2( .x(hex2), .hex_LEDs(HEX2));
   hex_digits h1( .x(hex1), .hex_LEDs(HEX1));
   hex_digits h0( .x(hex0), .hex_LEDs(HEX0));
   
	always @ (*) begin
		hex7 <= return_val_reg[31:28];
		hex6 <= return_val_reg[27:24];
		hex5 <= return_val_reg[23:20];
		hex4 <= return_val_reg[19:16];
		hex3 <= return_val_reg[15:12];
		hex2 <= return_val_reg[11:8];
		hex1 <= return_val_reg[7:4];
		hex0 <= return_val_reg[3:0];
	end
assign UART_TXD = 1'b0;

    parameter s_WAIT = 3'b001, s_START = 3'b010, s_EXE = 3'b011,
                s_DONE = 3'b100;

    // state registers
    reg [3:0] y_Q, Y_D;

    assign LEDG[3:0] = y_Q;

    // next state
    always @(*)
    begin
        case (y_Q)
            s_WAIT: if (go) Y_D = s_START; else Y_D = y_Q;

            s_START: Y_D = s_EXE;

            s_EXE: if (!finish) Y_D = s_EXE; else Y_D = s_DONE;

            s_DONE: Y_D = s_DONE;

            default: Y_D = 3'bxxx;
        endcase
    end

    // current state
    always @(posedge clk)
    begin
        if (reset) // synchronous clear
            y_Q <= s_WAIT;
        else
            y_Q <= Y_D;
    end

    always @(posedge clk)
        if (y_Q == s_EXE && finish)
            return_val_reg <= return_val;
        else if (y_Q == s_DONE)
            return_val_reg <= return_val_reg;
        else
            return_val_reg <= 0;


    assign start = (y_Q == s_START);

   
   top top_inst (
      .clk (clk),
      .reset (reset),
      .finish (finish),
      .return_val (return_val),
        .start (start)

    );

endmodule

module circuit_start_control (
    go,
    control_key
);
    input control_key;
    output go;
    assign go = control_key;
endmodule
module hex_digits(x, hex_LEDs);
    input [3:0] x;
    output [6:0] hex_LEDs;
    
    assign hex_LEDs[0] = (~x[3] & ~x[2] & ~x[1] & x[0]) |
                            (~x[3] & x[2] & ~x[1] & ~x[0]) |
                            (x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & ~x[2] & x[1] & x[0]);
    assign hex_LEDs[1] = (~x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & x[1] & x[0]) |
                            (x[3] & x[2] & ~x[0]) |
                            (x[2] & x[1] & ~x[0]);
    assign hex_LEDs[2] = (x[3] & x[2] & ~x[0]) |
                            (x[3] & x[2] & x[1]) |
                            (~x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[3] = (~x[3] & ~x[2] & ~x[1] & x[0]) | 
                            (~x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (x[2] & x[1] & x[0]) | 
                            (x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[4] = (~x[3] & x[0]) |
                            (~x[3] & x[2] & ~x[1]) |
                            (~x[2] & ~x[1] & x[0]);
    assign hex_LEDs[5] = (~x[3] & ~x[2] & x[0]) | 
                            (~x[3] & ~x[2] & x[1]) | 
                            (~x[3] & x[1] & x[0]) | 
                            (x[3] & x[2] & ~x[1] & x[0]);
    assign hex_LEDs[6] = (~x[3] & ~x[2] & ~x[1]) | 
                            (x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (~x[3] & x[2] & x[1] & x[0]);
    
endmodule
`timescale 1 ns / 1 ns
module main_tb
(
);

reg  clk;
reg  reset;
reg  start;
reg  waitrequest;
wire [31:0] return_val;
wire  finish;


top top_inst (
	.clk (clk),
	.reset (reset),
	.start (start),
	.waitrequest (waitrequest),
	.finish (finish),
	.return_val (return_val)
);




initial 
    clk = 0;
always @(clk)
    clk <= #10 ~clk;

initial begin
//$monitor("At t=%t clk=%b %b %b %b %d", $time, clk, reset, start, finish, return_val);
@(negedge clk);
reset <= 1;
@(negedge clk);
reset <= 0;
start <= 1;
@(negedge clk);
start <= 0;
end

always@(finish) begin
    if (finish == 1) begin
        $display("At t=%t clk=%b finish=%b return_val=%d", $time, clk, finish, return_val);
        $display("Cycles: %d", ($time-50)/20);
        $finish;
    end
end

initial begin
waitrequest <= 1;
@(negedge clk);
@(negedge clk);
waitrequest <= 0;
end


endmodule 

//----------------------------------------------------------------------------//
// Generated by LegUp High-Level Synthesis Tool Version 4.0 (http://legup.org)
// Compiled: Tue Aug 18 02:53:46 2015
// University of Toronto
// For research and academic purposes only. Commercial use is prohibited.
// Please send bugs to: legup@eecg.toronto.edu
// Date: Mon Jun 17 16:03:25 2019
//----------------------------------------------------------------------------//

`define MEMORY_CONTROLLER_ADDR_SIZE 32
`define MEMORY_CONTROLLER_DATA_SIZE 64
// Number of RAM elements: 6
`define MEMORY_CONTROLLER_TAG_SIZE 9
// @sin_lookup = internal unnamed_addr constant [126 x i16] [i16 32767, i16 0, i16 32767, i16 0, i16 0, i16 32767, i16 32767, i16 0, i16 23169, i16 23169, i16 0, i16 32767, i16 -23169, i16 23169, i16 327...
`define TAG_g_sin_lookup `MEMORY_CONTROLLER_TAG_SIZE'd2
`define TAG_g_sin_lookup_a {`TAG_g_sin_lookup, 23'd0}
//   %Imag = alloca [64 x i16], align 2
`define TAG_main_0_Imag `MEMORY_CONTROLLER_TAG_SIZE'd4
`define TAG_main_0_Imag_a {`TAG_main_0_Imag, 23'd0}
//   %New_Imag = alloca [64 x i16], align 2
`define TAG_main_0_New_Imag `MEMORY_CONTROLLER_TAG_SIZE'd6
`define TAG_main_0_New_Imag_a {`TAG_main_0_New_Imag, 23'd0}
//   %New_Real = alloca [64 x i16], align 2
`define TAG_main_0_New_Real `MEMORY_CONTROLLER_TAG_SIZE'd5
`define TAG_main_0_New_Real_a {`TAG_main_0_New_Real, 23'd0}
//   %Real = alloca [64 x i16], align 2
`define TAG_main_0_Real `MEMORY_CONTROLLER_TAG_SIZE'd3
`define TAG_main_0_Real_a {`TAG_main_0_Real, 23'd0}
//   %input_temp = alloca i16, align 2
`define TAG_main_0_input_temp `MEMORY_CONTROLLER_TAG_SIZE'd7
`define TAG_main_0_input_temp_a {`TAG_main_0_input_temp, 23'd0}

// Turn off warning 'ignoring unsupported system task'
// altera message_off 10175

`timescale 1 ns / 1 ns
module top
	(
		clk,
		reset,
		start,
		finish,
		waitrequest,
		return_val
	);
input clk;
input reset;
input start;
output wire finish;
input waitrequest;
output wire [31:0] return_val;
wire memory_controller_waitrequest;
wire memory_controller_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
wire memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
wire [1:0] memory_controller_size_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;

wire memory_controller_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
wire memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
wire [1:0] memory_controller_size_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;

/* synthesis translate_off */
assign memory_controller_waitrequest = waitrequest;
/* synthesis translate_on */

memory_controller memory_controller_inst (
	.clk( clk ),
	.memory_controller_enable_a( memory_controller_enable_a ),
	.memory_controller_enable_b( memory_controller_enable_b ),
	.memory_controller_address_a( memory_controller_address_a ),
	.memory_controller_address_b( memory_controller_address_b ),
	.memory_controller_write_enable_a( memory_controller_write_enable_a ),
	.memory_controller_write_enable_b( memory_controller_write_enable_b ),
	.memory_controller_in_a( memory_controller_in_a ),
	.memory_controller_in_b( memory_controller_in_b ),
	.memory_controller_size_a( memory_controller_size_a ),
	.memory_controller_size_b( memory_controller_size_b ),
	.memory_controller_waitrequest( memory_controller_waitrequest ),
	.memory_controller_out_reg_a( memory_controller_out_a ),
	.memory_controller_out_reg_b( memory_controller_out_b )
);

main main_inst(
	.clk( clk ),
	.clk2x( clk2x ),
	.clk1x_follower( clk1x_follower ),
	.reset( reset ),
	.start( start ),
	.finish( finish ),
	.return_val( return_val ),
	.memory_controller_waitrequest(memory_controller_waitrequest),
	.memory_controller_enable_a(memory_controller_enable_a),
	.memory_controller_address_a(memory_controller_address_a),
	.memory_controller_write_enable_a(memory_controller_write_enable_a),
	.memory_controller_in_a(memory_controller_in_a),
	.memory_controller_size_a(memory_controller_size_a),
	.memory_controller_out_a(memory_controller_out_a),
	.memory_controller_enable_b(memory_controller_enable_b),
	.memory_controller_address_b(memory_controller_address_b),
	.memory_controller_write_enable_b(memory_controller_write_enable_b),
	.memory_controller_in_b(memory_controller_in_b),
	.memory_controller_size_b(memory_controller_size_b),
	.memory_controller_out_b(memory_controller_out_b)
);

endmodule

`timescale 1 ns / 1 ns
module memory_controller
(
	clk,
	memory_controller_address_a,
	memory_controller_address_b,
	memory_controller_enable_a,
	memory_controller_enable_b,
	memory_controller_write_enable_a,
	memory_controller_write_enable_b,
	memory_controller_in_a,
	memory_controller_in_b,
	memory_controller_size_a,
	memory_controller_size_b,
	memory_controller_waitrequest,
	memory_controller_out_reg_a,
	memory_controller_out_reg_b
);

parameter latency = 2;

parameter ram_latency = latency-1;

integer j;

input clk;
input memory_controller_waitrequest;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
input memory_controller_enable_a;
input memory_controller_write_enable_a;
input [64-1:0] memory_controller_in_a;
input [1:0] memory_controller_size_a;
output reg [64-1:0] memory_controller_out_reg_a;
reg [64-1:0] memory_controller_out_prev_a;
reg [64-1:0] memory_controller_out_a;

reg memory_controller_enable_reg_a;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
input memory_controller_enable_b;
input memory_controller_write_enable_b;
input [64-1:0] memory_controller_in_b;
input [1:0] memory_controller_size_b;
output reg [64-1:0] memory_controller_out_reg_b;
reg [64-1:0] memory_controller_out_prev_b;
reg [64-1:0] memory_controller_out_b;

reg memory_controller_enable_reg_b;

reg [6:0] sin_lookup_address_a;
reg [6:0] sin_lookup_address_b;
reg sin_lookup_write_enable_a;
reg sin_lookup_write_enable_b;
reg [15:0] sin_lookup_in_a;
reg [15:0] sin_lookup_in_b;
wire [15:0] sin_lookup_out_a;
wire [15:0] sin_lookup_out_b;

// @sin_lookup = internal unnamed_addr constant [126 x i16] [i16 32767, i16 0, i16 32767, i16 0, i16 0, i16 32767, i16 32767, i16 0, i16 23169, i16 23169, i16 0, i16 32767, i16 -23169, i16 23169, i16 327...
rom_dual_port sin_lookup (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( sin_lookup_address_a ),
	.address_b( sin_lookup_address_b ),
	.q_a( sin_lookup_out_a ),
	.q_b( sin_lookup_out_b)
);
defparam sin_lookup.width_a = 16;
defparam sin_lookup.width_b = 16;
defparam sin_lookup.widthad_a = 7;
defparam sin_lookup.widthad_b = 7;
defparam sin_lookup.numwords_a = 126;
defparam sin_lookup.numwords_b = 126;
defparam sin_lookup.latency = ram_latency;
defparam sin_lookup.init_file = "sin_lookup.mif";

reg [5:0] main_0_Real_address_a;
reg [5:0] main_0_Real_address_b;
reg main_0_Real_write_enable_a;
reg main_0_Real_write_enable_b;
reg [15:0] main_0_Real_in_a;
reg [15:0] main_0_Real_in_b;
wire [15:0] main_0_Real_out_a;
wire [15:0] main_0_Real_out_b;

//   %Real = alloca [64 x i16], align 2
ram_dual_port main_0_Real (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( main_0_Real_address_a ),
	.address_b( main_0_Real_address_b ),
	.wren_a( main_0_Real_write_enable_a ),
	.wren_b( main_0_Real_write_enable_b ),
	.data_a( main_0_Real_in_a ),
	.data_b( main_0_Real_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( main_0_Real_out_a ),
	.q_b( main_0_Real_out_b)
);
defparam main_0_Real.width_a = 16;
defparam main_0_Real.width_b = 16;
defparam main_0_Real.widthad_a = 6;
defparam main_0_Real.widthad_b = 6;
defparam main_0_Real.width_be_a = 1;
defparam main_0_Real.width_be_b = 1;
defparam main_0_Real.numwords_a = 64;
defparam main_0_Real.numwords_b = 64;
defparam main_0_Real.latency = ram_latency;

reg [5:0] main_0_Imag_address_a;
reg [5:0] main_0_Imag_address_b;
reg main_0_Imag_write_enable_a;
reg main_0_Imag_write_enable_b;
reg [15:0] main_0_Imag_in_a;
reg [15:0] main_0_Imag_in_b;
wire [15:0] main_0_Imag_out_a;
wire [15:0] main_0_Imag_out_b;

//   %Imag = alloca [64 x i16], align 2
ram_dual_port main_0_Imag (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( main_0_Imag_address_a ),
	.address_b( main_0_Imag_address_b ),
	.wren_a( main_0_Imag_write_enable_a ),
	.wren_b( main_0_Imag_write_enable_b ),
	.data_a( main_0_Imag_in_a ),
	.data_b( main_0_Imag_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( main_0_Imag_out_a ),
	.q_b( main_0_Imag_out_b)
);
defparam main_0_Imag.width_a = 16;
defparam main_0_Imag.width_b = 16;
defparam main_0_Imag.widthad_a = 6;
defparam main_0_Imag.widthad_b = 6;
defparam main_0_Imag.width_be_a = 1;
defparam main_0_Imag.width_be_b = 1;
defparam main_0_Imag.numwords_a = 64;
defparam main_0_Imag.numwords_b = 64;
defparam main_0_Imag.latency = ram_latency;

reg [5:0] main_0_New_Real_address_a;
reg [5:0] main_0_New_Real_address_b;
reg main_0_New_Real_write_enable_a;
reg main_0_New_Real_write_enable_b;
reg [15:0] main_0_New_Real_in_a;
reg [15:0] main_0_New_Real_in_b;
wire [15:0] main_0_New_Real_out_a;
wire [15:0] main_0_New_Real_out_b;

//   %New_Real = alloca [64 x i16], align 2
ram_dual_port main_0_New_Real (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( main_0_New_Real_address_a ),
	.address_b( main_0_New_Real_address_b ),
	.wren_a( main_0_New_Real_write_enable_a ),
	.wren_b( main_0_New_Real_write_enable_b ),
	.data_a( main_0_New_Real_in_a ),
	.data_b( main_0_New_Real_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( main_0_New_Real_out_a ),
	.q_b( main_0_New_Real_out_b)
);
defparam main_0_New_Real.width_a = 16;
defparam main_0_New_Real.width_b = 16;
defparam main_0_New_Real.widthad_a = 6;
defparam main_0_New_Real.widthad_b = 6;
defparam main_0_New_Real.width_be_a = 1;
defparam main_0_New_Real.width_be_b = 1;
defparam main_0_New_Real.numwords_a = 64;
defparam main_0_New_Real.numwords_b = 64;
defparam main_0_New_Real.latency = ram_latency;

reg [5:0] main_0_New_Imag_address_a;
reg [5:0] main_0_New_Imag_address_b;
reg main_0_New_Imag_write_enable_a;
reg main_0_New_Imag_write_enable_b;
reg [15:0] main_0_New_Imag_in_a;
reg [15:0] main_0_New_Imag_in_b;
wire [15:0] main_0_New_Imag_out_a;
wire [15:0] main_0_New_Imag_out_b;

//   %New_Imag = alloca [64 x i16], align 2
ram_dual_port main_0_New_Imag (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( main_0_New_Imag_address_a ),
	.address_b( main_0_New_Imag_address_b ),
	.wren_a( main_0_New_Imag_write_enable_a ),
	.wren_b( main_0_New_Imag_write_enable_b ),
	.data_a( main_0_New_Imag_in_a ),
	.data_b( main_0_New_Imag_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( main_0_New_Imag_out_a ),
	.q_b( main_0_New_Imag_out_b)
);
defparam main_0_New_Imag.width_a = 16;
defparam main_0_New_Imag.width_b = 16;
defparam main_0_New_Imag.widthad_a = 6;
defparam main_0_New_Imag.widthad_b = 6;
defparam main_0_New_Imag.width_be_a = 1;
defparam main_0_New_Imag.width_be_b = 1;
defparam main_0_New_Imag.numwords_a = 64;
defparam main_0_New_Imag.numwords_b = 64;
defparam main_0_New_Imag.latency = ram_latency;

reg [0:0] main_0_input_temp_address_a;
reg [0:0] main_0_input_temp_address_b;
reg main_0_input_temp_write_enable_a;
reg main_0_input_temp_write_enable_b;
reg [15:0] main_0_input_temp_in_a;
reg [15:0] main_0_input_temp_in_b;
wire [15:0] main_0_input_temp_out_a;
wire [15:0] main_0_input_temp_out_b;

//   %input_temp = alloca i16, align 2
ram_dual_port main_0_input_temp (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( main_0_input_temp_address_a ),
	.address_b( main_0_input_temp_address_b ),
	.wren_a( main_0_input_temp_write_enable_a ),
	.wren_b( main_0_input_temp_write_enable_b ),
	.data_a( main_0_input_temp_in_a ),
	.data_b( main_0_input_temp_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( main_0_input_temp_out_a ),
	.q_b( main_0_input_temp_out_b)
);
defparam main_0_input_temp.width_a = 16;
defparam main_0_input_temp.width_b = 16;
defparam main_0_input_temp.widthad_a = 1;
defparam main_0_input_temp.widthad_b = 1;
defparam main_0_input_temp.width_be_a = 1;
defparam main_0_input_temp.width_be_b = 1;
defparam main_0_input_temp.numwords_a = 1;
defparam main_0_input_temp.numwords_b = 1;
defparam main_0_input_temp.latency = ram_latency;
wire [`MEMORY_CONTROLLER_TAG_SIZE-1:0] tag_a;
assign tag_a = memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:`MEMORY_CONTROLLER_ADDR_SIZE-`MEMORY_CONTROLLER_TAG_SIZE];
reg [2:0] prevAddr_a;
reg [1:0] prevSize_a;
reg [2:0] prevSize_a_and;

always @(posedge clk)
if (!memory_controller_waitrequest)
begin
	prevAddr_a <= memory_controller_address_a[2:0];
	prevSize_a <= memory_controller_size_a;
end
wire [`MEMORY_CONTROLLER_TAG_SIZE-1:0] tag_b;
assign tag_b = memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:`MEMORY_CONTROLLER_ADDR_SIZE-`MEMORY_CONTROLLER_TAG_SIZE];
reg [2:0] prevAddr_b;
reg [1:0] prevSize_b;
reg [2:0] prevSize_b_and;

always @(posedge clk)
if (!memory_controller_waitrequest)
begin
	prevAddr_b <= memory_controller_address_b[2:0];
	prevSize_b <= memory_controller_size_b;
end

reg [2:0] select_not_struct_a;

wire select_sin_lookup_a;
assign select_sin_lookup_a = (tag_a == `TAG_g_sin_lookup);
reg [ram_latency:0] select_sin_lookup_reg_a;
wire [15:0] memory_controller_sin_lookup_out_a;
assign memory_controller_sin_lookup_out_a = {16{ select_sin_lookup_reg_a[ram_latency]}} & sin_lookup_out_a;

wire select_main_0_Real_a;
assign select_main_0_Real_a = (tag_a == `TAG_main_0_Real);
reg [ram_latency:0] select_main_0_Real_reg_a;
wire [15:0] memory_controller_main_0_Real_out_a;
assign memory_controller_main_0_Real_out_a = {16{ select_main_0_Real_reg_a[ram_latency]}} & main_0_Real_out_a;

wire select_main_0_Imag_a;
assign select_main_0_Imag_a = (tag_a == `TAG_main_0_Imag);
reg [ram_latency:0] select_main_0_Imag_reg_a;
wire [15:0] memory_controller_main_0_Imag_out_a;
assign memory_controller_main_0_Imag_out_a = {16{ select_main_0_Imag_reg_a[ram_latency]}} & main_0_Imag_out_a;

wire select_main_0_New_Real_a;
assign select_main_0_New_Real_a = (tag_a == `TAG_main_0_New_Real);
reg [ram_latency:0] select_main_0_New_Real_reg_a;
wire [15:0] memory_controller_main_0_New_Real_out_a;
assign memory_controller_main_0_New_Real_out_a = {16{ select_main_0_New_Real_reg_a[ram_latency]}} & main_0_New_Real_out_a;

wire select_main_0_New_Imag_a;
assign select_main_0_New_Imag_a = (tag_a == `TAG_main_0_New_Imag);
reg [ram_latency:0] select_main_0_New_Imag_reg_a;
wire [15:0] memory_controller_main_0_New_Imag_out_a;
assign memory_controller_main_0_New_Imag_out_a = {16{ select_main_0_New_Imag_reg_a[ram_latency]}} & main_0_New_Imag_out_a;

wire select_main_0_input_temp_a;
assign select_main_0_input_temp_a = (tag_a == `TAG_main_0_input_temp);
reg [ram_latency:0] select_main_0_input_temp_reg_a;
wire [15:0] memory_controller_main_0_input_temp_out_a;
assign memory_controller_main_0_input_temp_out_a = {16{ select_main_0_input_temp_reg_a[ram_latency]}} & main_0_input_temp_out_a;

always @(*)
begin
	sin_lookup_address_a = memory_controller_address_a [7-1+1:1] & {7{select_sin_lookup_a}};
	sin_lookup_write_enable_a = memory_controller_write_enable_a & select_sin_lookup_a;
	sin_lookup_in_a [16-1:0] = memory_controller_in_a[16-1:0];

	main_0_Real_address_a = memory_controller_address_a [6-1+1:1] & {6{select_main_0_Real_a}};
	main_0_Real_write_enable_a = memory_controller_write_enable_a & select_main_0_Real_a;
	main_0_Real_in_a [16-1:0] = memory_controller_in_a[16-1:0];

	main_0_Imag_address_a = memory_controller_address_a [6-1+1:1] & {6{select_main_0_Imag_a}};
	main_0_Imag_write_enable_a = memory_controller_write_enable_a & select_main_0_Imag_a;
	main_0_Imag_in_a [16-1:0] = memory_controller_in_a[16-1:0];

	main_0_New_Real_address_a = memory_controller_address_a [6-1+1:1] & {6{select_main_0_New_Real_a}};
	main_0_New_Real_write_enable_a = memory_controller_write_enable_a & select_main_0_New_Real_a;
	main_0_New_Real_in_a [16-1:0] = memory_controller_in_a[16-1:0];

	main_0_New_Imag_address_a = memory_controller_address_a [6-1+1:1] & {6{select_main_0_New_Imag_a}};
	main_0_New_Imag_write_enable_a = memory_controller_write_enable_a & select_main_0_New_Imag_a;
	main_0_New_Imag_in_a [16-1:0] = memory_controller_in_a[16-1:0];

	main_0_input_temp_address_a = memory_controller_address_a [1-1+1:1] & {1{select_main_0_input_temp_a}};
	main_0_input_temp_write_enable_a = memory_controller_write_enable_a & select_main_0_input_temp_a;
	main_0_input_temp_in_a [16-1:0] = memory_controller_in_a[16-1:0];

end
always @(*)
begin
	select_not_struct_a [2:0] = 3'b0 | {1{select_sin_lookup_reg_a[ram_latency]}} | {1{select_main_0_Real_reg_a[ram_latency]}} | {1{select_main_0_Imag_reg_a[ram_latency]}} | {1{select_main_0_New_Real_reg_a[ram_latency]}} | {1{select_main_0_New_Imag_reg_a[ram_latency]}} | {1{select_main_0_input_temp_reg_a[ram_latency]}};
	if (prevAddr_a[2:0] & select_not_struct_a[2:0] != 0 && memory_controller_enable_a)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end

	prevSize_a_and[0] = prevSize_a[1] | prevSize_a[0];
	prevSize_a_and[1] = prevSize_a[1];
	prevSize_a_and[2] = prevSize_a[1] & prevSize_a[0];
	if ((prevAddr_a & prevSize_a_and) != 0 && memory_controller_enable_a)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end
	memory_controller_out_prev_a = memory_controller_out_reg_a & { 64{!memory_controller_enable_reg_a}};
	memory_controller_out_a = 1'b0 | memory_controller_out_prev_a | memory_controller_sin_lookup_out_a | memory_controller_main_0_Real_out_a | memory_controller_main_0_Imag_out_a | memory_controller_main_0_New_Real_out_a | memory_controller_main_0_New_Imag_out_a | memory_controller_main_0_input_temp_out_a;
end

always @(posedge clk)
if (!memory_controller_waitrequest)
begin
memory_controller_out_reg_a <= memory_controller_out_a;
memory_controller_enable_reg_a <= memory_controller_enable_a;
end

always @(posedge clk)
if (!memory_controller_waitrequest)
for (j = 0; j < ram_latency; j=j+1)
begin
select_sin_lookup_reg_a[j+1] <= select_sin_lookup_reg_a[j];
select_main_0_Real_reg_a[j+1] <= select_main_0_Real_reg_a[j];
select_main_0_Imag_reg_a[j+1] <= select_main_0_Imag_reg_a[j];
select_main_0_New_Real_reg_a[j+1] <= select_main_0_New_Real_reg_a[j];
select_main_0_New_Imag_reg_a[j+1] <= select_main_0_New_Imag_reg_a[j];
select_main_0_input_temp_reg_a[j+1] <= select_main_0_input_temp_reg_a[j];
end
always @(*)
begin
select_sin_lookup_reg_a[0] <= select_sin_lookup_a;
select_main_0_Real_reg_a[0] <= select_main_0_Real_a;
select_main_0_Imag_reg_a[0] <= select_main_0_Imag_a;
select_main_0_New_Real_reg_a[0] <= select_main_0_New_Real_a;
select_main_0_New_Imag_reg_a[0] <= select_main_0_New_Imag_a;
select_main_0_input_temp_reg_a[0] <= select_main_0_input_temp_a;
end

reg [2:0] select_not_struct_b;

wire select_sin_lookup_b;
assign select_sin_lookup_b = (tag_b == `TAG_g_sin_lookup);
reg [ram_latency:0] select_sin_lookup_reg_b;
wire [15:0] memory_controller_sin_lookup_out_b;
assign memory_controller_sin_lookup_out_b = {16{ select_sin_lookup_reg_b[ram_latency]}} & sin_lookup_out_b;

wire select_main_0_Real_b;
assign select_main_0_Real_b = (tag_b == `TAG_main_0_Real);
reg [ram_latency:0] select_main_0_Real_reg_b;
wire [15:0] memory_controller_main_0_Real_out_b;
assign memory_controller_main_0_Real_out_b = {16{ select_main_0_Real_reg_b[ram_latency]}} & main_0_Real_out_b;

wire select_main_0_Imag_b;
assign select_main_0_Imag_b = (tag_b == `TAG_main_0_Imag);
reg [ram_latency:0] select_main_0_Imag_reg_b;
wire [15:0] memory_controller_main_0_Imag_out_b;
assign memory_controller_main_0_Imag_out_b = {16{ select_main_0_Imag_reg_b[ram_latency]}} & main_0_Imag_out_b;

wire select_main_0_New_Real_b;
assign select_main_0_New_Real_b = (tag_b == `TAG_main_0_New_Real);
reg [ram_latency:0] select_main_0_New_Real_reg_b;
wire [15:0] memory_controller_main_0_New_Real_out_b;
assign memory_controller_main_0_New_Real_out_b = {16{ select_main_0_New_Real_reg_b[ram_latency]}} & main_0_New_Real_out_b;

wire select_main_0_New_Imag_b;
assign select_main_0_New_Imag_b = (tag_b == `TAG_main_0_New_Imag);
reg [ram_latency:0] select_main_0_New_Imag_reg_b;
wire [15:0] memory_controller_main_0_New_Imag_out_b;
assign memory_controller_main_0_New_Imag_out_b = {16{ select_main_0_New_Imag_reg_b[ram_latency]}} & main_0_New_Imag_out_b;

wire select_main_0_input_temp_b;
assign select_main_0_input_temp_b = (tag_b == `TAG_main_0_input_temp);
reg [ram_latency:0] select_main_0_input_temp_reg_b;
wire [15:0] memory_controller_main_0_input_temp_out_b;
assign memory_controller_main_0_input_temp_out_b = {16{ select_main_0_input_temp_reg_b[ram_latency]}} & main_0_input_temp_out_b;

always @(*)
begin
	sin_lookup_address_b = memory_controller_address_b [7-1+1:1] & {7{select_sin_lookup_b}};
	sin_lookup_write_enable_b = memory_controller_write_enable_b & select_sin_lookup_b;
	sin_lookup_in_b [16-1:0] = memory_controller_in_b[16-1:0];

	main_0_Real_address_b = memory_controller_address_b [6-1+1:1] & {6{select_main_0_Real_b}};
	main_0_Real_write_enable_b = memory_controller_write_enable_b & select_main_0_Real_b;
	main_0_Real_in_b [16-1:0] = memory_controller_in_b[16-1:0];

	main_0_Imag_address_b = memory_controller_address_b [6-1+1:1] & {6{select_main_0_Imag_b}};
	main_0_Imag_write_enable_b = memory_controller_write_enable_b & select_main_0_Imag_b;
	main_0_Imag_in_b [16-1:0] = memory_controller_in_b[16-1:0];

	main_0_New_Real_address_b = memory_controller_address_b [6-1+1:1] & {6{select_main_0_New_Real_b}};
	main_0_New_Real_write_enable_b = memory_controller_write_enable_b & select_main_0_New_Real_b;
	main_0_New_Real_in_b [16-1:0] = memory_controller_in_b[16-1:0];

	main_0_New_Imag_address_b = memory_controller_address_b [6-1+1:1] & {6{select_main_0_New_Imag_b}};
	main_0_New_Imag_write_enable_b = memory_controller_write_enable_b & select_main_0_New_Imag_b;
	main_0_New_Imag_in_b [16-1:0] = memory_controller_in_b[16-1:0];

	main_0_input_temp_address_b = memory_controller_address_b [1-1+1:1] & {1{select_main_0_input_temp_b}};
	main_0_input_temp_write_enable_b = memory_controller_write_enable_b & select_main_0_input_temp_b;
	main_0_input_temp_in_b [16-1:0] = memory_controller_in_b[16-1:0];

end
always @(*)
begin
	select_not_struct_b [2:0] = 3'b0 | {1{select_sin_lookup_reg_b[ram_latency]}} | {1{select_main_0_Real_reg_b[ram_latency]}} | {1{select_main_0_Imag_reg_b[ram_latency]}} | {1{select_main_0_New_Real_reg_b[ram_latency]}} | {1{select_main_0_New_Imag_reg_b[ram_latency]}} | {1{select_main_0_input_temp_reg_b[ram_latency]}};
	if (prevAddr_b[2:0] & select_not_struct_b[2:0] != 0 && memory_controller_enable_b)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end

	prevSize_b_and[0] = prevSize_b[1] | prevSize_b[0];
	prevSize_b_and[1] = prevSize_b[1];
	prevSize_b_and[2] = prevSize_b[1] & prevSize_b[0];
	if ((prevAddr_b & prevSize_b_and) != 0 && memory_controller_enable_b)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end
	memory_controller_out_prev_b = memory_controller_out_reg_b & { 64{!memory_controller_enable_reg_b}};
	memory_controller_out_b = 1'b0 | memory_controller_out_prev_b | memory_controller_sin_lookup_out_b | memory_controller_main_0_Real_out_b | memory_controller_main_0_Imag_out_b | memory_controller_main_0_New_Real_out_b | memory_controller_main_0_New_Imag_out_b | memory_controller_main_0_input_temp_out_b;
end

always @(posedge clk)
if (!memory_controller_waitrequest)
begin
memory_controller_out_reg_b <= memory_controller_out_b;
memory_controller_enable_reg_b <= memory_controller_enable_b;
end

always @(posedge clk)
if (!memory_controller_waitrequest)
for (j = 0; j < ram_latency; j=j+1)
begin
select_sin_lookup_reg_b[j+1] <= select_sin_lookup_reg_b[j];
select_main_0_Real_reg_b[j+1] <= select_main_0_Real_reg_b[j];
select_main_0_Imag_reg_b[j+1] <= select_main_0_Imag_reg_b[j];
select_main_0_New_Real_reg_b[j+1] <= select_main_0_New_Real_reg_b[j];
select_main_0_New_Imag_reg_b[j+1] <= select_main_0_New_Imag_reg_b[j];
select_main_0_input_temp_reg_b[j+1] <= select_main_0_input_temp_reg_b[j];
end
always @(*)
begin
select_sin_lookup_reg_b[0] <= select_sin_lookup_b;
select_main_0_Real_reg_b[0] <= select_main_0_Real_b;
select_main_0_Imag_reg_b[0] <= select_main_0_Imag_b;
select_main_0_New_Real_reg_b[0] <= select_main_0_New_Real_b;
select_main_0_New_Imag_reg_b[0] <= select_main_0_New_Imag_b;
select_main_0_input_temp_reg_b[0] <= select_main_0_input_temp_b;
end

endmodule 

`timescale 1 ns / 1 ns
module main
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_waitrequest,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	return_val
);

parameter [8:0] LEGUP_0 = 9'd0;
parameter [8:0] LEGUP_F_main_BB__0_1 = 9'd1;
parameter [8:0] LEGUP_F_main_BB__1_2 = 9'd2;
parameter [8:0] LEGUP_F_main_BB__1_3 = 9'd3;
parameter [8:0] LEGUP_F_main_BB__1_4 = 9'd4;
parameter [8:0] LEGUP_F_main_BB__1_5 = 9'd5;
parameter [8:0] LEGUP_F_main_BB__1_6 = 9'd6;
parameter [8:0] LEGUP_F_main_BB__1_7 = 9'd7;
parameter [8:0] LEGUP_F_main_BB__1_8 = 9'd8;
parameter [8:0] LEGUP_F_main_BB__1_9 = 9'd9;
parameter [8:0] LEGUP_F_main_BB__1_10 = 9'd10;
parameter [8:0] LEGUP_F_main_BB__6_11 = 9'd11;
parameter [8:0] LEGUP_F_main_BB__6_12 = 9'd12;
parameter [8:0] LEGUP_F_main_BB__6_13 = 9'd13;
parameter [8:0] LEGUP_F_main_BB__6_14 = 9'd14;
parameter [8:0] LEGUP_F_main_BB__6_15 = 9'd15;
parameter [8:0] LEGUP_F_main_BB__6_16 = 9'd16;
parameter [8:0] LEGUP_F_main_BB__6_17 = 9'd17;
parameter [8:0] LEGUP_F_main_BB__6_18 = 9'd18;
parameter [8:0] LEGUP_F_main_BB__6_19 = 9'd19;
parameter [8:0] LEGUP_F_main_BB__6_20 = 9'd20;
parameter [8:0] LEGUP_F_main_BB__6_21 = 9'd21;
parameter [8:0] LEGUP_F_main_BB__6_22 = 9'd22;
parameter [8:0] LEGUP_F_main_BB__6_23 = 9'd23;
parameter [8:0] LEGUP_F_main_BB__6_24 = 9'd24;
parameter [8:0] LEGUP_F_main_BB__6_25 = 9'd25;
parameter [8:0] LEGUP_F_main_BB__6_26 = 9'd26;
parameter [8:0] LEGUP_F_main_BB__6_27 = 9'd27;
parameter [8:0] LEGUP_F_main_BB__6_28 = 9'd28;
parameter [8:0] LEGUP_F_main_BB__6_29 = 9'd29;
parameter [8:0] LEGUP_F_main_BB__6_30 = 9'd30;
parameter [8:0] LEGUP_F_main_BB__6_31 = 9'd31;
parameter [8:0] LEGUP_F_main_BB__6_32 = 9'd32;
parameter [8:0] LEGUP_F_main_BB__6_33 = 9'd33;
parameter [8:0] LEGUP_F_main_BB__6_34 = 9'd34;
parameter [8:0] LEGUP_F_main_BB__6_35 = 9'd35;
parameter [8:0] LEGUP_F_main_BB__6_36 = 9'd36;
parameter [8:0] LEGUP_F_main_BB__6_37 = 9'd37;
parameter [8:0] LEGUP_F_main_BB__6_38 = 9'd38;
parameter [8:0] LEGUP_F_main_BB__6_39 = 9'd39;
parameter [8:0] LEGUP_F_main_BB__6_40 = 9'd40;
parameter [8:0] LEGUP_F_main_BB__6_41 = 9'd41;
parameter [8:0] LEGUP_F_main_BB__6_42 = 9'd42;
parameter [8:0] LEGUP_F_main_BB__6_43 = 9'd43;
parameter [8:0] LEGUP_F_main_BB__6_44 = 9'd44;
parameter [8:0] LEGUP_F_main_BB__6_45 = 9'd45;
parameter [8:0] LEGUP_F_main_BB__6_46 = 9'd46;
parameter [8:0] LEGUP_F_main_BB__6_47 = 9'd47;
parameter [8:0] LEGUP_F_main_BB__6_48 = 9'd48;
parameter [8:0] LEGUP_F_main_BB__6_49 = 9'd49;
parameter [8:0] LEGUP_F_main_BB__6_50 = 9'd50;
parameter [8:0] LEGUP_F_main_BB__6_51 = 9'd51;
parameter [8:0] LEGUP_F_main_BB__6_52 = 9'd52;
parameter [8:0] LEGUP_F_main_BB__6_53 = 9'd53;
parameter [8:0] LEGUP_F_main_BB__6_54 = 9'd54;
parameter [8:0] LEGUP_F_main_BB__6_55 = 9'd55;
parameter [8:0] LEGUP_F_main_BB__6_56 = 9'd56;
parameter [8:0] LEGUP_F_main_BB__6_57 = 9'd57;
parameter [8:0] LEGUP_F_main_BB__6_58 = 9'd58;
parameter [8:0] LEGUP_F_main_BB__6_59 = 9'd59;
parameter [8:0] LEGUP_F_main_BB__6_60 = 9'd60;
parameter [8:0] LEGUP_F_main_BB__6_61 = 9'd61;
parameter [8:0] LEGUP_F_main_BB__6_62 = 9'd62;
parameter [8:0] LEGUP_F_main_BB__6_63 = 9'd63;
parameter [8:0] LEGUP_F_main_BB__6_64 = 9'd64;
parameter [8:0] LEGUP_F_main_BB__6_65 = 9'd65;
parameter [8:0] LEGUP_F_main_BB__6_66 = 9'd66;
parameter [8:0] LEGUP_F_main_BB__6_67 = 9'd67;
parameter [8:0] LEGUP_F_main_BB__6_68 = 9'd68;
parameter [8:0] LEGUP_F_main_BB__6_69 = 9'd69;
parameter [8:0] LEGUP_F_main_BB__6_70 = 9'd70;
parameter [8:0] LEGUP_F_main_BB__6_71 = 9'd71;
parameter [8:0] LEGUP_F_main_BB__6_72 = 9'd72;
parameter [8:0] LEGUP_F_main_BB__6_73 = 9'd73;
parameter [8:0] LEGUP_F_main_BB__6_74 = 9'd74;
parameter [8:0] LEGUP_F_main_BB__6_75 = 9'd75;
parameter [8:0] LEGUP_F_main_BB__6_76 = 9'd76;
parameter [8:0] LEGUP_F_main_BB__6_77 = 9'd77;
parameter [8:0] LEGUP_F_main_BB__6_78 = 9'd78;
parameter [8:0] LEGUP_F_main_BB__6_79 = 9'd79;
parameter [8:0] LEGUP_F_main_BB__6_80 = 9'd80;
parameter [8:0] LEGUP_F_main_BB__6_81 = 9'd81;
parameter [8:0] LEGUP_F_main_BB__6_82 = 9'd82;
parameter [8:0] LEGUP_F_main_BB__6_83 = 9'd83;
parameter [8:0] LEGUP_F_main_BB__6_84 = 9'd84;
parameter [8:0] LEGUP_F_main_BB__6_85 = 9'd85;
parameter [8:0] LEGUP_F_main_BB__6_86 = 9'd86;
parameter [8:0] LEGUP_F_main_BB__6_87 = 9'd87;
parameter [8:0] LEGUP_F_main_BB__6_88 = 9'd88;
parameter [8:0] LEGUP_F_main_BB__6_89 = 9'd89;
parameter [8:0] LEGUP_F_main_BB__6_90 = 9'd90;
parameter [8:0] LEGUP_F_main_BB__6_91 = 9'd91;
parameter [8:0] LEGUP_F_main_BB__6_92 = 9'd92;
parameter [8:0] LEGUP_F_main_BB__6_93 = 9'd93;
parameter [8:0] LEGUP_F_main_BB__6_94 = 9'd94;
parameter [8:0] LEGUP_F_main_BB__6_95 = 9'd95;
parameter [8:0] LEGUP_F_main_BB__6_96 = 9'd96;
parameter [8:0] LEGUP_F_main_BB__6_97 = 9'd97;
parameter [8:0] LEGUP_F_main_BB__6_98 = 9'd98;
parameter [8:0] LEGUP_F_main_BB__6_99 = 9'd99;
parameter [8:0] LEGUP_F_main_BB__6_100 = 9'd100;
parameter [8:0] LEGUP_F_main_BB__6_101 = 9'd101;
parameter [8:0] LEGUP_F_main_BB__6_102 = 9'd102;
parameter [8:0] LEGUP_F_main_BB__6_103 = 9'd103;
parameter [8:0] LEGUP_F_main_BB__6_104 = 9'd104;
parameter [8:0] LEGUP_F_main_BB__6_105 = 9'd105;
parameter [8:0] LEGUP_F_main_BB__6_106 = 9'd106;
parameter [8:0] LEGUP_F_main_BB__6_107 = 9'd107;
parameter [8:0] LEGUP_F_main_BB__6_108 = 9'd108;
parameter [8:0] LEGUP_F_main_BB__6_109 = 9'd109;
parameter [8:0] LEGUP_F_main_BB__6_110 = 9'd110;
parameter [8:0] LEGUP_F_main_BB__6_111 = 9'd111;
parameter [8:0] LEGUP_F_main_BB__6_112 = 9'd112;
parameter [8:0] LEGUP_F_main_BB__6_113 = 9'd113;
parameter [8:0] LEGUP_F_main_BB__6_114 = 9'd114;
parameter [8:0] LEGUP_F_main_BB__6_115 = 9'd115;
parameter [8:0] LEGUP_F_main_BB__6_116 = 9'd116;
parameter [8:0] LEGUP_F_main_BB__6_117 = 9'd117;
parameter [8:0] LEGUP_F_main_BB__6_118 = 9'd118;
parameter [8:0] LEGUP_F_main_BB__6_119 = 9'd119;
parameter [8:0] LEGUP_F_main_BB__6_120 = 9'd120;
parameter [8:0] LEGUP_F_main_BB__6_121 = 9'd121;
parameter [8:0] LEGUP_F_main_BB__6_122 = 9'd122;
parameter [8:0] LEGUP_F_main_BB__6_123 = 9'd123;
parameter [8:0] LEGUP_F_main_BB__6_124 = 9'd124;
parameter [8:0] LEGUP_F_main_BB__6_125 = 9'd125;
parameter [8:0] LEGUP_F_main_BB__6_126 = 9'd126;
parameter [8:0] LEGUP_F_main_BB__6_127 = 9'd127;
parameter [8:0] LEGUP_F_main_BB__6_128 = 9'd128;
parameter [8:0] LEGUP_F_main_BB__6_129 = 9'd129;
parameter [8:0] LEGUP_F_main_BB__6_130 = 9'd130;
parameter [8:0] LEGUP_F_main_BB__6_131 = 9'd131;
parameter [8:0] LEGUP_F_main_BB__6_132 = 9'd132;
parameter [8:0] LEGUP_F_main_BB__6_133 = 9'd133;
parameter [8:0] LEGUP_F_main_BB__6_134 = 9'd134;
parameter [8:0] LEGUP_F_main_BB__6_135 = 9'd135;
parameter [8:0] LEGUP_F_main_BB__6_136 = 9'd136;
parameter [8:0] LEGUP_F_main_BB__6_137 = 9'd137;
parameter [8:0] LEGUP_F_main_BB__6_138 = 9'd138;
parameter [8:0] LEGUP_F_main_BB__6_139 = 9'd139;
parameter [8:0] LEGUP_F_main_BB__6_140 = 9'd140;
parameter [8:0] LEGUP_F_main_BB__6_141 = 9'd141;
parameter [8:0] LEGUP_F_main_BB__6_142 = 9'd142;
parameter [8:0] LEGUP_F_main_BB__6_143 = 9'd143;
parameter [8:0] LEGUP_F_main_BB__6_144 = 9'd144;
parameter [8:0] LEGUP_F_main_BB__6_145 = 9'd145;
parameter [8:0] LEGUP_F_main_BB__6_146 = 9'd146;
parameter [8:0] LEGUP_F_main_BB__6_147 = 9'd147;
parameter [8:0] LEGUP_F_main_BB__6_148 = 9'd148;
parameter [8:0] LEGUP_F_main_BB__6_149 = 9'd149;
parameter [8:0] LEGUP_F_main_BB__6_150 = 9'd150;
parameter [8:0] LEGUP_F_main_BB__6_151 = 9'd151;
parameter [8:0] LEGUP_F_main_BB__6_152 = 9'd152;
parameter [8:0] LEGUP_F_main_BB__6_153 = 9'd153;
parameter [8:0] LEGUP_F_main_BB__6_154 = 9'd154;
parameter [8:0] LEGUP_F_main_BB__6_155 = 9'd155;
parameter [8:0] LEGUP_F_main_BB__6_156 = 9'd156;
parameter [8:0] LEGUP_F_main_BB__6_157 = 9'd157;
parameter [8:0] LEGUP_F_main_BB__6_158 = 9'd158;
parameter [8:0] LEGUP_F_main_BB__6_159 = 9'd159;
parameter [8:0] LEGUP_F_main_BB__6_160 = 9'd160;
parameter [8:0] LEGUP_F_main_BB__6_161 = 9'd161;
parameter [8:0] LEGUP_F_main_BB__6_162 = 9'd162;
parameter [8:0] LEGUP_F_main_BB__6_163 = 9'd163;
parameter [8:0] LEGUP_F_main_BB__6_164 = 9'd164;
parameter [8:0] LEGUP_F_main_BB__6_165 = 9'd165;
parameter [8:0] LEGUP_F_main_BB__6_166 = 9'd166;
parameter [8:0] LEGUP_F_main_BB__6_167 = 9'd167;
parameter [8:0] LEGUP_F_main_BB__6_168 = 9'd168;
parameter [8:0] LEGUP_F_main_BB__6_169 = 9'd169;
parameter [8:0] LEGUP_F_main_BB__6_170 = 9'd170;
parameter [8:0] LEGUP_F_main_BB__6_171 = 9'd171;
parameter [8:0] LEGUP_F_main_BB__6_172 = 9'd172;
parameter [8:0] LEGUP_F_main_BB__6_173 = 9'd173;
parameter [8:0] LEGUP_F_main_BB__6_174 = 9'd174;
parameter [8:0] LEGUP_F_main_BB__6_175 = 9'd175;
parameter [8:0] LEGUP_F_main_BB__6_176 = 9'd176;
parameter [8:0] LEGUP_F_main_BB__6_177 = 9'd177;
parameter [8:0] LEGUP_F_main_BB__6_178 = 9'd178;
parameter [8:0] LEGUP_F_main_BB__6_179 = 9'd179;
parameter [8:0] LEGUP_F_main_BB__6_180 = 9'd180;
parameter [8:0] LEGUP_F_main_BB__6_181 = 9'd181;
parameter [8:0] LEGUP_F_main_BB__6_182 = 9'd182;
parameter [8:0] LEGUP_F_main_BB__6_183 = 9'd183;
parameter [8:0] LEGUP_F_main_BB__6_184 = 9'd184;
parameter [8:0] LEGUP_F_main_BB__6_185 = 9'd185;
parameter [8:0] LEGUP_F_main_BB__6_186 = 9'd186;
parameter [8:0] LEGUP_F_main_BB__6_187 = 9'd187;
parameter [8:0] LEGUP_F_main_BB__6_188 = 9'd188;
parameter [8:0] LEGUP_F_main_BB__6_189 = 9'd189;
parameter [8:0] LEGUP_F_main_BB__6_190 = 9'd190;
parameter [8:0] LEGUP_F_main_BB__6_191 = 9'd191;
parameter [8:0] LEGUP_F_main_BB__6_192 = 9'd192;
parameter [8:0] LEGUP_F_main_BB__6_193 = 9'd193;
parameter [8:0] LEGUP_F_main_BB__6_194 = 9'd194;
parameter [8:0] LEGUP_F_main_BB__6_195 = 9'd195;
parameter [8:0] LEGUP_F_main_BB__6_196 = 9'd196;
parameter [8:0] LEGUP_F_main_BB__6_197 = 9'd197;
parameter [8:0] LEGUP_F_main_BB__6_198 = 9'd198;
parameter [8:0] LEGUP_F_main_BB__6_199 = 9'd199;
parameter [8:0] LEGUP_F_main_BB__6_200 = 9'd200;
parameter [8:0] LEGUP_F_main_BB__6_201 = 9'd201;
parameter [8:0] LEGUP_F_main_BB__6_202 = 9'd202;
parameter [8:0] LEGUP_F_main_BB__6_203 = 9'd203;
parameter [8:0] LEGUP_F_main_BB__6_204 = 9'd204;
parameter [8:0] LEGUP_F_main_BB__6_205 = 9'd205;
parameter [8:0] LEGUP_F_main_BB__6_206 = 9'd206;
parameter [8:0] LEGUP_F_main_BB__6_207 = 9'd207;
parameter [8:0] LEGUP_F_main_BB__6_208 = 9'd208;
parameter [8:0] LEGUP_F_main_BB__6_209 = 9'd209;
parameter [8:0] LEGUP_F_main_BB__6_210 = 9'd210;
parameter [8:0] LEGUP_F_main_BB__6_211 = 9'd211;
parameter [8:0] LEGUP_F_main_BB__6_212 = 9'd212;
parameter [8:0] LEGUP_F_main_BB__6_213 = 9'd213;
parameter [8:0] LEGUP_F_main_BB__6_214 = 9'd214;
parameter [8:0] LEGUP_F_main_BB__6_215 = 9'd215;
parameter [8:0] LEGUP_F_main_BB__6_216 = 9'd216;
parameter [8:0] LEGUP_F_main_BB__6_217 = 9'd217;
parameter [8:0] LEGUP_F_main_BB__6_218 = 9'd218;
parameter [8:0] LEGUP_F_main_BB__6_219 = 9'd219;
parameter [8:0] LEGUP_F_main_BB__6_220 = 9'd220;
parameter [8:0] LEGUP_F_main_BB__6_221 = 9'd221;
parameter [8:0] LEGUP_F_main_BB__6_222 = 9'd222;
parameter [8:0] LEGUP_F_main_BB__6_223 = 9'd223;
parameter [8:0] LEGUP_F_main_BB__6_224 = 9'd224;
parameter [8:0] LEGUP_F_main_BB__6_225 = 9'd225;
parameter [8:0] LEGUP_F_main_BB__6_226 = 9'd226;
parameter [8:0] LEGUP_F_main_BB__6_227 = 9'd227;
parameter [8:0] LEGUP_F_main_BB__6_228 = 9'd228;
parameter [8:0] LEGUP_F_main_BB__6_229 = 9'd229;
parameter [8:0] LEGUP_F_main_BB__6_230 = 9'd230;
parameter [8:0] LEGUP_F_main_BB__6_231 = 9'd231;
parameter [8:0] LEGUP_F_main_BB__6_232 = 9'd232;
parameter [8:0] LEGUP_F_main_BB__6_233 = 9'd233;
parameter [8:0] LEGUP_F_main_BB__6_234 = 9'd234;
parameter [8:0] LEGUP_F_main_BB__6_235 = 9'd235;
parameter [8:0] LEGUP_F_main_BB__6_236 = 9'd236;
parameter [8:0] LEGUP_F_main_BB__6_237 = 9'd237;
parameter [8:0] LEGUP_F_main_BB__6_238 = 9'd238;
parameter [8:0] LEGUP_F_main_BB__6_239 = 9'd239;
parameter [8:0] LEGUP_F_main_BB__6_240 = 9'd240;
parameter [8:0] LEGUP_F_main_BB__6_241 = 9'd241;
parameter [8:0] LEGUP_F_main_BB__6_242 = 9'd242;
parameter [8:0] LEGUP_F_main_BB__6_243 = 9'd243;
parameter [8:0] LEGUP_F_main_BB__6_244 = 9'd244;
parameter [8:0] LEGUP_F_main_BB__6_245 = 9'd245;
parameter [8:0] LEGUP_F_main_BB__6_246 = 9'd246;
parameter [8:0] LEGUP_F_main_BB__6_247 = 9'd247;
parameter [8:0] LEGUP_F_main_BB__6_248 = 9'd248;
parameter [8:0] LEGUP_F_main_BB__6_249 = 9'd249;
parameter [8:0] LEGUP_F_main_BB__6_250 = 9'd250;
parameter [8:0] LEGUP_F_main_BB__6_251 = 9'd251;
parameter [8:0] LEGUP_F_main_BB__6_252 = 9'd252;
parameter [8:0] LEGUP_F_main_BB__6_253 = 9'd253;
parameter [8:0] LEGUP_F_main_BB__6_254 = 9'd254;
parameter [8:0] LEGUP_F_main_BB__6_255 = 9'd255;
parameter [8:0] LEGUP_F_main_BB__6_256 = 9'd256;
parameter [8:0] LEGUP_F_main_BB__6_257 = 9'd257;
parameter [8:0] LEGUP_F_main_BB__6_258 = 9'd258;
parameter [8:0] LEGUP_F_main_BB__6_259 = 9'd259;
parameter [8:0] LEGUP_F_main_BB__6_260 = 9'd260;
parameter [8:0] LEGUP_F_main_BB__6_261 = 9'd261;
parameter [8:0] LEGUP_F_main_BB__6_262 = 9'd262;
parameter [8:0] LEGUP_F_main_BB__6_263 = 9'd263;
parameter [8:0] LEGUP_F_main_BB__6_264 = 9'd264;
parameter [8:0] LEGUP_F_main_BB__6_265 = 9'd265;
parameter [8:0] LEGUP_F_main_BB__6_266 = 9'd266;
parameter [8:0] LEGUP_F_main_BB__6_267 = 9'd267;
parameter [8:0] LEGUP_F_main_BB__6_268 = 9'd268;
parameter [8:0] LEGUP_F_main_BB__6_269 = 9'd269;
parameter [8:0] LEGUP_F_main_BB__6_270 = 9'd270;
parameter [8:0] LEGUP_F_main_BB__6_271 = 9'd271;
parameter [8:0] LEGUP_F_main_BB__6_272 = 9'd272;
parameter [8:0] LEGUP_F_main_BB__6_273 = 9'd273;
parameter [8:0] LEGUP_F_main_BB__6_274 = 9'd274;
parameter [8:0] LEGUP_F_main_BB__6_275 = 9'd275;
parameter [8:0] LEGUP_F_main_BB__6_276 = 9'd276;
parameter [8:0] LEGUP_F_main_BB__6_277 = 9'd277;
parameter [8:0] LEGUP_F_main_BB__6_278 = 9'd278;
parameter [8:0] LEGUP_F_main_BB__6_279 = 9'd279;
parameter [8:0] LEGUP_F_main_BB__6_280 = 9'd280;
parameter [8:0] LEGUP_F_main_BB__6_281 = 9'd281;
parameter [8:0] LEGUP_F_main_BB__6_282 = 9'd282;
parameter [8:0] LEGUP_F_main_BB__6_283 = 9'd283;
parameter [8:0] LEGUP_F_main_BB__6_284 = 9'd284;
parameter [8:0] LEGUP_F_main_BB__6_285 = 9'd285;
parameter [8:0] LEGUP_F_main_BB__6_286 = 9'd286;
parameter [8:0] LEGUP_F_main_BB__6_287 = 9'd287;
parameter [8:0] LEGUP_F_main_BB__6_288 = 9'd288;
parameter [8:0] LEGUP_F_main_BB__6_289 = 9'd289;
parameter [8:0] LEGUP_F_main_BB__6_290 = 9'd290;
parameter [8:0] LEGUP_F_main_BB__6_291 = 9'd291;
parameter [8:0] LEGUP_F_main_BB__6_292 = 9'd292;
parameter [8:0] LEGUP_F_main_BB__6_293 = 9'd293;
parameter [8:0] LEGUP_F_main_BB__6_294 = 9'd294;
parameter [8:0] LEGUP_F_main_BB__6_295 = 9'd295;
parameter [8:0] LEGUP_F_main_BB__6_296 = 9'd296;
parameter [8:0] LEGUP_F_main_BB__6_297 = 9'd297;
parameter [8:0] LEGUP_F_main_BB__6_298 = 9'd298;
parameter [8:0] LEGUP_F_main_BB__6_299 = 9'd299;
parameter [8:0] LEGUP_F_main_BB__6_300 = 9'd300;
parameter [8:0] LEGUP_F_main_BB__6_301 = 9'd301;
parameter [8:0] LEGUP_F_main_BB__6_302 = 9'd302;
parameter [8:0] LEGUP_F_main_BB__6_303 = 9'd303;
parameter [8:0] LEGUP_F_main_BB__6_304 = 9'd304;
parameter [8:0] LEGUP_F_main_BB__6_305 = 9'd305;
parameter [8:0] LEGUP_F_main_BB__6_306 = 9'd306;
parameter [8:0] LEGUP_F_main_BB__6_307 = 9'd307;
parameter [8:0] LEGUP_F_main_BB__6_308 = 9'd308;
parameter [8:0] LEGUP_F_main_BB__6_309 = 9'd309;
parameter [8:0] LEGUP_F_main_BB__6_310 = 9'd310;
parameter [8:0] LEGUP_F_main_BB__6_311 = 9'd311;
parameter [8:0] LEGUP_F_main_BB__6_312 = 9'd312;
parameter [8:0] LEGUP_F_main_BB__6_313 = 9'd313;
parameter [8:0] LEGUP_F_main_BB__6_314 = 9'd314;
parameter [8:0] LEGUP_F_main_BB__6_315 = 9'd315;
parameter [8:0] LEGUP_F_main_BB__6_316 = 9'd316;
parameter [8:0] LEGUP_F_main_BB__6_317 = 9'd317;
parameter [8:0] LEGUP_F_main_BB__6_318 = 9'd318;
parameter [8:0] LEGUP_F_main_BB__6_319 = 9'd319;
parameter [8:0] LEGUP_F_main_BB__6_320 = 9'd320;
parameter [8:0] LEGUP_F_main_BB__6_321 = 9'd321;
parameter [8:0] LEGUP_F_main_BB__6_322 = 9'd322;
parameter [8:0] LEGUP_F_main_BB__6_323 = 9'd323;
parameter [8:0] LEGUP_F_main_BB__6_324 = 9'd324;
parameter [8:0] LEGUP_F_main_BB__6_325 = 9'd325;
parameter [8:0] LEGUP_F_main_BB__6_326 = 9'd326;
parameter [8:0] LEGUP_F_main_BB__6_327 = 9'd327;
parameter [8:0] LEGUP_F_main_BB__6_328 = 9'd328;
parameter [8:0] LEGUP_F_main_BB__6_329 = 9'd329;
parameter [8:0] LEGUP_F_main_BB__6_330 = 9'd330;
parameter [8:0] LEGUP_F_main_BB__6_331 = 9'd331;
parameter [8:0] LEGUP_F_main_BB__6_332 = 9'd332;
parameter [8:0] LEGUP_F_main_BB__6_333 = 9'd333;
parameter [8:0] LEGUP_F_main_BB__6_334 = 9'd334;
parameter [8:0] LEGUP_F_main_BB__6_335 = 9'd335;
parameter [8:0] LEGUP_F_main_BB__6_336 = 9'd336;
parameter [8:0] LEGUP_F_main_BB__6_337 = 9'd337;
parameter [8:0] LEGUP_F_main_BB__6_338 = 9'd338;
parameter [8:0] LEGUP_F_main_BB__6_339 = 9'd339;
parameter [8:0] LEGUP_F_main_BB__6_340 = 9'd340;
parameter [8:0] LEGUP_F_main_BB__6_341 = 9'd341;
parameter [8:0] LEGUP_F_main_BB__6_342 = 9'd342;
parameter [8:0] LEGUP_F_main_BB__6_343 = 9'd343;
parameter [8:0] LEGUP_F_main_BB__6_344 = 9'd344;
parameter [8:0] LEGUP_F_main_BB__6_345 = 9'd345;
parameter [8:0] LEGUP_F_main_BB__6_346 = 9'd346;
parameter [8:0] LEGUP_F_main_BB__6_347 = 9'd347;
parameter [8:0] LEGUP_F_main_BB__6_348 = 9'd348;
parameter [8:0] LEGUP_F_main_BB__6_349 = 9'd349;
parameter [8:0] LEGUP_F_main_BB__6_350 = 9'd350;
parameter [8:0] LEGUP_F_main_BB__6_351 = 9'd351;
parameter [8:0] LEGUP_F_main_BB__6_352 = 9'd352;
parameter [8:0] LEGUP_F_main_BB__6_353 = 9'd353;
parameter [8:0] LEGUP_F_main_BB__6_354 = 9'd354;
parameter [8:0] LEGUP_F_main_BB__6_355 = 9'd355;
parameter [8:0] LEGUP_F_main_BB__6_356 = 9'd356;
parameter [8:0] LEGUP_F_main_BB__6_357 = 9'd357;
parameter [8:0] LEGUP_F_main_BB__6_358 = 9'd358;
parameter [8:0] LEGUP_F_main_BB__6_359 = 9'd359;
parameter [8:0] LEGUP_F_main_BB__6_360 = 9'd360;
parameter [8:0] LEGUP_F_main_BB__6_361 = 9'd361;
parameter [8:0] LEGUP_F_main_BB__6_362 = 9'd362;
parameter [8:0] LEGUP_F_main_BB__6_363 = 9'd363;
parameter [8:0] LEGUP_F_main_BB__6_364 = 9'd364;
parameter [8:0] LEGUP_F_main_BB__6_365 = 9'd365;
parameter [8:0] LEGUP_F_main_BB__6_366 = 9'd366;
parameter [8:0] LEGUP_F_main_BB__6_367 = 9'd367;
parameter [8:0] LEGUP_F_main_BB__6_368 = 9'd368;
parameter [8:0] LEGUP_F_main_BB__6_369 = 9'd369;
parameter [8:0] LEGUP_F_main_BB__6_370 = 9'd370;
parameter [8:0] LEGUP_F_main_BB__6_371 = 9'd371;
parameter [8:0] LEGUP_F_main_BB__6_372 = 9'd372;
parameter [8:0] LEGUP_F_main_BB__6_373 = 9'd373;
parameter [8:0] LEGUP_F_main_BB__6_374 = 9'd374;
parameter [8:0] LEGUP_F_main_BB__6_375 = 9'd375;
parameter [8:0] LEGUP_F_main_BB__6_376 = 9'd376;
parameter [8:0] LEGUP_F_main_BB__6_377 = 9'd377;
parameter [8:0] LEGUP_F_main_BB__6_378 = 9'd378;
parameter [8:0] LEGUP_F_main_BB__6_379 = 9'd379;
parameter [8:0] LEGUP_F_main_BB__6_380 = 9'd380;
parameter [8:0] LEGUP_F_main_BB__6_381 = 9'd381;
parameter [8:0] LEGUP_F_main_BB__6_382 = 9'd382;
parameter [8:0] LEGUP_F_main_BB__6_383 = 9'd383;
parameter [8:0] LEGUP_F_main_BB__6_384 = 9'd384;
parameter [8:0] LEGUP_F_main_BB__6_385 = 9'd385;
parameter [8:0] LEGUP_F_main_BB__6_386 = 9'd386;
parameter [8:0] LEGUP_F_main_BB__6_387 = 9'd387;
parameter [8:0] LEGUP_F_main_BB__6_388 = 9'd388;
parameter [8:0] LEGUP_F_main_BB__6_389 = 9'd389;
parameter [8:0] LEGUP_F_main_BB__6_390 = 9'd390;
parameter [8:0] LEGUP_F_main_BB__6_391 = 9'd391;
parameter [8:0] LEGUP_F_main_BB__6_392 = 9'd392;
parameter [8:0] LEGUP_F_main_BB__6_393 = 9'd393;
parameter [8:0] LEGUP_F_main_BB__6_394 = 9'd394;
parameter [8:0] LEGUP_F_main_BB__6_395 = 9'd395;
parameter [8:0] LEGUP_F_main_BB_preheaderi_396 = 9'd396;
parameter [8:0] LEGUP_F_main_BB_lrph5i_397 = 9'd397;
parameter [8:0] LEGUP_F_main_BB__393_398 = 9'd398;
parameter [8:0] LEGUP_F_main_BB_lrphi_399 = 9'd399;
parameter [8:0] LEGUP_F_main_BB_lrphi_400 = 9'd400;
parameter [8:0] LEGUP_F_main_BB_lrphi_401 = 9'd401;
parameter [8:0] LEGUP_F_main_BB_lrphi_402 = 9'd402;
parameter [8:0] LEGUP_F_main_BB_lrphi_403 = 9'd403;
parameter [8:0] LEGUP_F_main_BB__404_404 = 9'd404;
parameter [8:0] LEGUP_F_main_BB__404_405 = 9'd405;
parameter [8:0] LEGUP_F_main_BB__404_406 = 9'd406;
parameter [8:0] LEGUP_F_main_BB__404_407 = 9'd407;
parameter [8:0] LEGUP_F_main_BB__404_408 = 9'd408;
parameter [8:0] LEGUP_F_main_BB__404_409 = 9'd409;
parameter [8:0] LEGUP_F_main_BB__404_410 = 9'd410;
parameter [8:0] LEGUP_F_main_BB__404_411 = 9'd411;
parameter [8:0] LEGUP_F_main_BB__404_412 = 9'd412;
parameter [8:0] LEGUP_F_main_BB__404_413 = 9'd413;
parameter [8:0] LEGUP_F_main_BB__crit_edgei_414 = 9'd414;
parameter [8:0] LEGUP_F_main_BB__crit_edge6i_415 = 9'd415;
parameter [8:0] LEGUP_F_main_BB_fftexit_416 = 9'd416;
parameter [8:0] LEGUP_F_main_BB_fftexit_417 = 9'd417;
parameter [8:0] LEGUP_F_main_BB_fftexit_418 = 9'd418;
parameter [8:0] LEGUP_F_main_BB_fftexit_419 = 9'd419;
parameter [8:0] LEGUP_F_main_BB__469_420 = 9'd420;
parameter [8:0] LEGUP_F_main_BB__472_421 = 9'd421;
parameter [8:0] LEGUP_F_main_BB__474_422 = 9'd422;
parameter [8:0] LEGUP_F_main_BB__476_423 = 9'd423;
parameter [8:0] tag_offset = 9'd0;
parameter [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tag_addr_offset = {tag_offset, 23'd0};

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
input  memory_controller_waitrequest;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
output reg [31:0] return_val;
reg [8:0] cur_state;
reg [8:0] next_state;
reg [31:0] main_1_indvarsiv4;
reg [31:0] main_1_indvarsiv4_reg;
reg [15:0] main_1_input_temp0input_temp0;
reg [31:0] main_1_gep_int;
reg [31:0] main_1_gep_int_reg;
reg [31:0] main_1_gep_array;
reg [31:0] main_1_gep_array_reg;
reg [31:0] main_1_gep;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_2;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_2_reg;
reg [31:0] main_1_3;
reg [15:0] main_1_4;
reg [15:0] main_1_4_reg;
reg [15:0] main_1_input_temp0input_temp01;
reg [31:0] main_1_gep_int1;
reg [31:0] main_1_gep_int1_reg;
reg [31:0] main_1_gep_array2;
reg [31:0] main_1_gep_array2_reg;
reg [31:0] main_1_gep3;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_5;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_5_reg;
reg [31:0] main_1_indvarsivnext5;
reg [31:0] main_1_indvarsivnext5_reg;
reg  main_1_exitcond6;
reg  main_1_exitcond6_reg;
reg [31:0] main_6_gep_int4;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_7;
reg [31:0] main_6_gep_int5;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_8;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_8_reg;
reg [31:0] main_6_gep_int6;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_9;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_9_reg;
reg [31:0] main_6_gep_int7;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_10;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_10_reg;
reg [15:0] main_6_11;
reg [15:0] main_6_12;
reg [31:0] main_6_gep_int8;
reg [31:0] main_6_gep9;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_13;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_13_reg;
reg [15:0] main_6_14;
reg [31:0] main_6_gep_int10;
reg [31:0] main_6_gep11;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_15;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_15_reg;
reg [31:0] main_6_gep_int12;
reg [31:0] main_6_gep13;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_16;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_16_reg;
reg [15:0] main_6_17;
reg [31:0] main_6_gep_int14;
reg [31:0] main_6_gep15;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_18;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_18_reg;
reg [31:0] main_6_gep_int16;
reg [31:0] main_6_gep17;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_19;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_19_reg;
reg [15:0] main_6_20;
reg [31:0] main_6_gep_int18;
reg [31:0] main_6_gep19;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_21;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_21_reg;
reg [31:0] main_6_gep_int20;
reg [31:0] main_6_gep21;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_22;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_22_reg;
reg [15:0] main_6_23;
reg [31:0] main_6_gep_int22;
reg [31:0] main_6_gep23;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_24;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_24_reg;
reg [31:0] main_6_gep_int24;
reg [31:0] main_6_gep25;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_25;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_25_reg;
reg [15:0] main_6_26;
reg [31:0] main_6_gep_int26;
reg [31:0] main_6_gep27;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_27;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_27_reg;
reg [31:0] main_6_gep_int28;
reg [31:0] main_6_gep29;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_28;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_28_reg;
reg [15:0] main_6_29;
reg [31:0] main_6_gep_int30;
reg [31:0] main_6_gep31;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_30;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_30_reg;
reg [31:0] main_6_gep_int32;
reg [31:0] main_6_gep33;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_31;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_31_reg;
reg [15:0] main_6_32;
reg [31:0] main_6_gep_int34;
reg [31:0] main_6_gep35;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_33;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_33_reg;
reg [31:0] main_6_gep_int36;
reg [31:0] main_6_gep37;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_34;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_34_reg;
reg [15:0] main_6_35;
reg [31:0] main_6_gep_int38;
reg [31:0] main_6_gep39;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_36;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_36_reg;
reg [31:0] main_6_gep_int40;
reg [31:0] main_6_gep41;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_37;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_37_reg;
reg [15:0] main_6_38;
reg [31:0] main_6_gep_int42;
reg [31:0] main_6_gep43;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_39;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_39_reg;
reg [31:0] main_6_gep_int44;
reg [31:0] main_6_gep45;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_40;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_40_reg;
reg [15:0] main_6_41;
reg [31:0] main_6_gep_int46;
reg [31:0] main_6_gep47;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_42;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_42_reg;
reg [31:0] main_6_gep_int48;
reg [31:0] main_6_gep49;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_43;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_43_reg;
reg [15:0] main_6_44;
reg [31:0] main_6_gep_int50;
reg [31:0] main_6_gep51;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_45;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_45_reg;
reg [31:0] main_6_gep_int52;
reg [31:0] main_6_gep53;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_46;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_46_reg;
reg [15:0] main_6_47;
reg [31:0] main_6_gep_int54;
reg [31:0] main_6_gep55;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_48;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_48_reg;
reg [31:0] main_6_gep_int56;
reg [31:0] main_6_gep57;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_49;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_49_reg;
reg [15:0] main_6_50;
reg [31:0] main_6_gep_int58;
reg [31:0] main_6_gep59;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_51;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_51_reg;
reg [31:0] main_6_gep_int60;
reg [31:0] main_6_gep61;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_52;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_52_reg;
reg [15:0] main_6_53;
reg [31:0] main_6_gep_int62;
reg [31:0] main_6_gep63;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_54;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_54_reg;
reg [31:0] main_6_gep_int64;
reg [31:0] main_6_gep65;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_55;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_55_reg;
reg [15:0] main_6_56;
reg [31:0] main_6_gep_int66;
reg [31:0] main_6_gep67;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_57;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_57_reg;
reg [31:0] main_6_gep_int68;
reg [31:0] main_6_gep69;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_58;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_58_reg;
reg [15:0] main_6_59;
reg [31:0] main_6_gep_int70;
reg [31:0] main_6_gep71;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_60;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_60_reg;
reg [31:0] main_6_gep_int72;
reg [31:0] main_6_gep73;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_61;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_61_reg;
reg [15:0] main_6_62;
reg [31:0] main_6_gep_int74;
reg [31:0] main_6_gep75;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_63;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_63_reg;
reg [31:0] main_6_gep_int76;
reg [31:0] main_6_gep77;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_64;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_64_reg;
reg [15:0] main_6_65;
reg [31:0] main_6_gep_int78;
reg [31:0] main_6_gep79;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_66;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_66_reg;
reg [31:0] main_6_gep_int80;
reg [31:0] main_6_gep81;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_67;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_67_reg;
reg [15:0] main_6_68;
reg [31:0] main_6_gep_int82;
reg [31:0] main_6_gep83;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_69;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_69_reg;
reg [31:0] main_6_gep_int84;
reg [31:0] main_6_gep85;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_70;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_70_reg;
reg [15:0] main_6_71;
reg [31:0] main_6_gep_int86;
reg [31:0] main_6_gep87;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_72;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_72_reg;
reg [31:0] main_6_gep_int88;
reg [31:0] main_6_gep89;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_73;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_73_reg;
reg [15:0] main_6_74;
reg [31:0] main_6_gep_int90;
reg [31:0] main_6_gep91;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_75;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_75_reg;
reg [31:0] main_6_gep_int92;
reg [31:0] main_6_gep93;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_76;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_76_reg;
reg [15:0] main_6_77;
reg [31:0] main_6_gep_int94;
reg [31:0] main_6_gep95;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_78;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_78_reg;
reg [31:0] main_6_gep_int96;
reg [31:0] main_6_gep97;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_79;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_79_reg;
reg [15:0] main_6_80;
reg [31:0] main_6_gep_int98;
reg [31:0] main_6_gep99;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_81;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_81_reg;
reg [31:0] main_6_gep_int100;
reg [31:0] main_6_gep101;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_82;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_82_reg;
reg [15:0] main_6_83;
reg [31:0] main_6_gep_int102;
reg [31:0] main_6_gep103;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_84;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_84_reg;
reg [31:0] main_6_gep_int104;
reg [31:0] main_6_gep105;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_85;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_85_reg;
reg [15:0] main_6_86;
reg [31:0] main_6_gep_int106;
reg [31:0] main_6_gep107;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_87;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_87_reg;
reg [31:0] main_6_gep_int108;
reg [31:0] main_6_gep109;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_88;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_88_reg;
reg [15:0] main_6_89;
reg [31:0] main_6_gep_int110;
reg [31:0] main_6_gep111;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_90;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_90_reg;
reg [31:0] main_6_gep_int112;
reg [31:0] main_6_gep113;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_91;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_91_reg;
reg [15:0] main_6_92;
reg [31:0] main_6_gep_int114;
reg [31:0] main_6_gep115;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_93;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_93_reg;
reg [31:0] main_6_gep_int116;
reg [31:0] main_6_gep117;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_94;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_94_reg;
reg [15:0] main_6_95;
reg [31:0] main_6_gep_int118;
reg [31:0] main_6_gep119;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_96;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_96_reg;
reg [31:0] main_6_gep_int120;
reg [31:0] main_6_gep121;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_97;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_97_reg;
reg [15:0] main_6_98;
reg [31:0] main_6_gep_int122;
reg [31:0] main_6_gep123;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_99;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_99_reg;
reg [31:0] main_6_gep_int124;
reg [31:0] main_6_gep125;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_100;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_100_reg;
reg [15:0] main_6_101;
reg [31:0] main_6_gep_int126;
reg [31:0] main_6_gep127;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_102;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_102_reg;
reg [31:0] main_6_gep_int128;
reg [31:0] main_6_gep129;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_103;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_103_reg;
reg [15:0] main_6_104;
reg [31:0] main_6_gep_int130;
reg [31:0] main_6_gep131;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_105;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_105_reg;
reg [31:0] main_6_gep_int132;
reg [31:0] main_6_gep133;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_106;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_106_reg;
reg [15:0] main_6_107;
reg [31:0] main_6_gep_int134;
reg [31:0] main_6_gep135;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_108;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_108_reg;
reg [31:0] main_6_gep_int136;
reg [31:0] main_6_gep137;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_109;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_109_reg;
reg [15:0] main_6_110;
reg [31:0] main_6_gep_int138;
reg [31:0] main_6_gep139;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_111;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_111_reg;
reg [31:0] main_6_gep_int140;
reg [31:0] main_6_gep141;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_112;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_112_reg;
reg [15:0] main_6_113;
reg [31:0] main_6_gep_int142;
reg [31:0] main_6_gep143;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_114;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_114_reg;
reg [31:0] main_6_gep_int144;
reg [31:0] main_6_gep145;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_115;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_115_reg;
reg [15:0] main_6_116;
reg [31:0] main_6_gep_int146;
reg [31:0] main_6_gep147;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_117;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_117_reg;
reg [31:0] main_6_gep_int148;
reg [31:0] main_6_gep149;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_118;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_118_reg;
reg [15:0] main_6_119;
reg [31:0] main_6_gep_int150;
reg [31:0] main_6_gep151;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_120;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_120_reg;
reg [31:0] main_6_gep_int152;
reg [31:0] main_6_gep153;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_121;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_121_reg;
reg [15:0] main_6_122;
reg [31:0] main_6_gep_int154;
reg [31:0] main_6_gep155;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_123;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_123_reg;
reg [31:0] main_6_gep_int156;
reg [31:0] main_6_gep157;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_124;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_124_reg;
reg [15:0] main_6_125;
reg [31:0] main_6_gep_int158;
reg [31:0] main_6_gep159;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_126;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_126_reg;
reg [31:0] main_6_gep_int160;
reg [31:0] main_6_gep161;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_127;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_127_reg;
reg [15:0] main_6_128;
reg [31:0] main_6_gep_int162;
reg [31:0] main_6_gep163;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_129;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_129_reg;
reg [31:0] main_6_gep_int164;
reg [31:0] main_6_gep165;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_130;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_130_reg;
reg [15:0] main_6_131;
reg [31:0] main_6_gep_int166;
reg [31:0] main_6_gep167;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_132;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_132_reg;
reg [31:0] main_6_gep_int168;
reg [31:0] main_6_gep169;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_133;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_133_reg;
reg [15:0] main_6_134;
reg [31:0] main_6_gep_int170;
reg [31:0] main_6_gep171;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_135;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_135_reg;
reg [31:0] main_6_gep_int172;
reg [31:0] main_6_gep173;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_136;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_136_reg;
reg [15:0] main_6_137;
reg [31:0] main_6_gep_int174;
reg [31:0] main_6_gep175;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_138;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_138_reg;
reg [31:0] main_6_gep_int176;
reg [31:0] main_6_gep177;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_139;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_139_reg;
reg [15:0] main_6_140;
reg [31:0] main_6_gep_int178;
reg [31:0] main_6_gep179;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_141;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_141_reg;
reg [31:0] main_6_gep_int180;
reg [31:0] main_6_gep181;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_142;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_142_reg;
reg [15:0] main_6_143;
reg [31:0] main_6_gep_int182;
reg [31:0] main_6_gep183;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_144;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_144_reg;
reg [31:0] main_6_gep_int184;
reg [31:0] main_6_gep185;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_145;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_145_reg;
reg [15:0] main_6_146;
reg [31:0] main_6_gep_int186;
reg [31:0] main_6_gep187;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_147;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_147_reg;
reg [31:0] main_6_gep_int188;
reg [31:0] main_6_gep189;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_148;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_148_reg;
reg [15:0] main_6_149;
reg [31:0] main_6_gep_int190;
reg [31:0] main_6_gep191;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_150;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_150_reg;
reg [31:0] main_6_gep_int192;
reg [31:0] main_6_gep193;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_151;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_151_reg;
reg [15:0] main_6_152;
reg [31:0] main_6_gep_int194;
reg [31:0] main_6_gep195;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_153;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_153_reg;
reg [31:0] main_6_gep_int196;
reg [31:0] main_6_gep197;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_154;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_154_reg;
reg [15:0] main_6_155;
reg [31:0] main_6_gep_int198;
reg [31:0] main_6_gep199;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_156;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_156_reg;
reg [31:0] main_6_gep_int200;
reg [31:0] main_6_gep201;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_157;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_157_reg;
reg [15:0] main_6_158;
reg [31:0] main_6_gep_int202;
reg [31:0] main_6_gep203;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_159;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_159_reg;
reg [31:0] main_6_gep_int204;
reg [31:0] main_6_gep205;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_160;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_160_reg;
reg [15:0] main_6_161;
reg [31:0] main_6_gep_int206;
reg [31:0] main_6_gep207;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_162;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_162_reg;
reg [31:0] main_6_gep_int208;
reg [31:0] main_6_gep209;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_163;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_163_reg;
reg [15:0] main_6_164;
reg [31:0] main_6_gep_int210;
reg [31:0] main_6_gep211;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_165;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_165_reg;
reg [31:0] main_6_gep_int212;
reg [31:0] main_6_gep213;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_166;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_166_reg;
reg [15:0] main_6_167;
reg [31:0] main_6_gep_int214;
reg [31:0] main_6_gep215;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_168;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_168_reg;
reg [31:0] main_6_gep_int216;
reg [31:0] main_6_gep217;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_169;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_169_reg;
reg [15:0] main_6_170;
reg [31:0] main_6_gep_int218;
reg [31:0] main_6_gep219;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_171;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_171_reg;
reg [31:0] main_6_gep_int220;
reg [31:0] main_6_gep221;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_172;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_172_reg;
reg [15:0] main_6_173;
reg [31:0] main_6_gep_int222;
reg [31:0] main_6_gep223;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_174;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_174_reg;
reg [31:0] main_6_gep_int224;
reg [31:0] main_6_gep225;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_175;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_175_reg;
reg [15:0] main_6_176;
reg [31:0] main_6_gep_int226;
reg [31:0] main_6_gep227;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_177;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_177_reg;
reg [31:0] main_6_gep_int228;
reg [31:0] main_6_gep229;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_178;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_178_reg;
reg [15:0] main_6_179;
reg [31:0] main_6_gep_int230;
reg [31:0] main_6_gep231;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_180;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_180_reg;
reg [31:0] main_6_gep_int232;
reg [31:0] main_6_gep233;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_181;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_181_reg;
reg [15:0] main_6_182;
reg [31:0] main_6_gep_int234;
reg [31:0] main_6_gep235;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_183;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_183_reg;
reg [31:0] main_6_gep_int236;
reg [31:0] main_6_gep237;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_184;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_184_reg;
reg [15:0] main_6_185;
reg [31:0] main_6_gep_int238;
reg [31:0] main_6_gep239;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_186;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_186_reg;
reg [31:0] main_6_gep_int240;
reg [31:0] main_6_gep241;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_187;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_187_reg;
reg [15:0] main_6_188;
reg [31:0] main_6_gep_int242;
reg [31:0] main_6_gep243;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_189;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_189_reg;
reg [31:0] main_6_gep_int244;
reg [31:0] main_6_gep245;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_190;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_190_reg;
reg [15:0] main_6_191;
reg [31:0] main_6_gep_int246;
reg [31:0] main_6_gep247;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_192;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_192_reg;
reg [31:0] main_6_gep_int248;
reg [31:0] main_6_gep249;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_193;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_193_reg;
reg [15:0] main_6_194;
reg [31:0] main_6_gep_int250;
reg [31:0] main_6_gep251;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_195;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_195_reg;
reg [31:0] main_6_gep_int252;
reg [31:0] main_6_gep253;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_196;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_196_reg;
reg [15:0] main_6_197;
reg [31:0] main_6_gep_int254;
reg [31:0] main_6_gep255;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_198;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_198_reg;
reg [31:0] main_6_gep_int256;
reg [31:0] main_6_gep257;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_199;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_199_reg;
reg [15:0] main_6_200;
reg [31:0] main_6_gep_int258;
reg [31:0] main_6_gep259;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_201;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_201_reg;
reg [31:0] main_6_gep_int260;
reg [31:0] main_6_gep261;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_202;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_202_reg;
reg [15:0] main_6_203;
reg [31:0] main_6_gep_int262;
reg [31:0] main_6_gep263;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_204;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_204_reg;
reg [31:0] main_6_gep_int264;
reg [31:0] main_6_gep265;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_205;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_205_reg;
reg [15:0] main_6_206;
reg [31:0] main_6_gep_int266;
reg [31:0] main_6_gep267;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_207;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_207_reg;
reg [31:0] main_6_gep_int268;
reg [31:0] main_6_gep269;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_208;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_208_reg;
reg [15:0] main_6_209;
reg [31:0] main_6_gep_int270;
reg [31:0] main_6_gep271;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_210;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_210_reg;
reg [31:0] main_6_gep_int272;
reg [31:0] main_6_gep273;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_211;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_211_reg;
reg [15:0] main_6_212;
reg [31:0] main_6_gep_int274;
reg [31:0] main_6_gep275;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_213;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_213_reg;
reg [31:0] main_6_gep_int276;
reg [31:0] main_6_gep277;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_214;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_214_reg;
reg [15:0] main_6_215;
reg [31:0] main_6_gep_int278;
reg [31:0] main_6_gep279;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_216;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_216_reg;
reg [31:0] main_6_gep_int280;
reg [31:0] main_6_gep281;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_217;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_217_reg;
reg [15:0] main_6_218;
reg [31:0] main_6_gep_int282;
reg [31:0] main_6_gep283;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_219;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_219_reg;
reg [31:0] main_6_gep_int284;
reg [31:0] main_6_gep285;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_220;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_220_reg;
reg [15:0] main_6_221;
reg [31:0] main_6_gep_int286;
reg [31:0] main_6_gep287;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_222;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_222_reg;
reg [31:0] main_6_gep_int288;
reg [31:0] main_6_gep289;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_223;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_223_reg;
reg [15:0] main_6_224;
reg [31:0] main_6_gep_int290;
reg [31:0] main_6_gep291;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_225;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_225_reg;
reg [31:0] main_6_gep_int292;
reg [31:0] main_6_gep293;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_226;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_226_reg;
reg [15:0] main_6_227;
reg [31:0] main_6_gep_int294;
reg [31:0] main_6_gep295;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_228;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_228_reg;
reg [31:0] main_6_gep_int296;
reg [31:0] main_6_gep297;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_229;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_229_reg;
reg [15:0] main_6_230;
reg [31:0] main_6_gep_int298;
reg [31:0] main_6_gep299;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_231;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_231_reg;
reg [31:0] main_6_gep_int300;
reg [31:0] main_6_gep301;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_232;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_232_reg;
reg [15:0] main_6_233;
reg [31:0] main_6_gep_int302;
reg [31:0] main_6_gep303;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_234;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_234_reg;
reg [31:0] main_6_gep_int304;
reg [31:0] main_6_gep305;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_235;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_235_reg;
reg [15:0] main_6_236;
reg [31:0] main_6_gep_int306;
reg [31:0] main_6_gep307;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_237;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_237_reg;
reg [31:0] main_6_gep_int308;
reg [31:0] main_6_gep309;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_238;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_238_reg;
reg [15:0] main_6_239;
reg [31:0] main_6_gep_int310;
reg [31:0] main_6_gep311;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_240;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_240_reg;
reg [31:0] main_6_gep_int312;
reg [31:0] main_6_gep313;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_241;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_241_reg;
reg [15:0] main_6_242;
reg [31:0] main_6_gep_int314;
reg [31:0] main_6_gep315;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_243;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_243_reg;
reg [31:0] main_6_gep_int316;
reg [31:0] main_6_gep317;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_244;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_244_reg;
reg [15:0] main_6_245;
reg [31:0] main_6_gep_int318;
reg [31:0] main_6_gep319;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_246;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_246_reg;
reg [31:0] main_6_gep_int320;
reg [31:0] main_6_gep321;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_247;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_247_reg;
reg [15:0] main_6_248;
reg [31:0] main_6_gep_int322;
reg [31:0] main_6_gep323;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_249;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_249_reg;
reg [31:0] main_6_gep_int324;
reg [31:0] main_6_gep325;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_250;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_250_reg;
reg [15:0] main_6_251;
reg [31:0] main_6_gep_int326;
reg [31:0] main_6_gep327;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_252;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_252_reg;
reg [31:0] main_6_gep_int328;
reg [31:0] main_6_gep329;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_253;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_253_reg;
reg [15:0] main_6_254;
reg [31:0] main_6_gep_int330;
reg [31:0] main_6_gep331;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_255;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_255_reg;
reg [31:0] main_6_gep_int332;
reg [31:0] main_6_gep333;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_256;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_256_reg;
reg [15:0] main_6_257;
reg [31:0] main_6_gep_int334;
reg [31:0] main_6_gep335;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_258;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_258_reg;
reg [31:0] main_6_gep_int336;
reg [31:0] main_6_gep337;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_259;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_259_reg;
reg [15:0] main_6_260;
reg [31:0] main_6_gep_int338;
reg [31:0] main_6_gep339;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_261;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_261_reg;
reg [31:0] main_6_gep_int340;
reg [31:0] main_6_gep341;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_262;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_262_reg;
reg [15:0] main_6_263;
reg [31:0] main_6_gep_int342;
reg [31:0] main_6_gep343;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_264;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_264_reg;
reg [31:0] main_6_gep_int344;
reg [31:0] main_6_gep345;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_265;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_265_reg;
reg [15:0] main_6_266;
reg [31:0] main_6_gep_int346;
reg [31:0] main_6_gep347;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_267;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_267_reg;
reg [31:0] main_6_gep_int348;
reg [31:0] main_6_gep349;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_268;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_268_reg;
reg [15:0] main_6_269;
reg [31:0] main_6_gep_int350;
reg [31:0] main_6_gep351;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_270;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_270_reg;
reg [31:0] main_6_gep_int352;
reg [31:0] main_6_gep353;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_271;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_271_reg;
reg [15:0] main_6_272;
reg [31:0] main_6_gep_int354;
reg [31:0] main_6_gep355;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_273;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_273_reg;
reg [31:0] main_6_gep_int356;
reg [31:0] main_6_gep357;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_274;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_274_reg;
reg [15:0] main_6_275;
reg [31:0] main_6_gep_int358;
reg [31:0] main_6_gep359;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_276;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_276_reg;
reg [31:0] main_6_gep_int360;
reg [31:0] main_6_gep361;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_277;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_277_reg;
reg [15:0] main_6_278;
reg [31:0] main_6_gep_int362;
reg [31:0] main_6_gep363;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_279;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_279_reg;
reg [31:0] main_6_gep_int364;
reg [31:0] main_6_gep365;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_280;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_280_reg;
reg [15:0] main_6_281;
reg [31:0] main_6_gep_int366;
reg [31:0] main_6_gep367;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_282;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_282_reg;
reg [31:0] main_6_gep_int368;
reg [31:0] main_6_gep369;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_283;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_283_reg;
reg [15:0] main_6_284;
reg [31:0] main_6_gep_int370;
reg [31:0] main_6_gep371;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_285;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_285_reg;
reg [31:0] main_6_gep_int372;
reg [31:0] main_6_gep373;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_286;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_286_reg;
reg [15:0] main_6_287;
reg [31:0] main_6_gep_int374;
reg [31:0] main_6_gep375;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_288;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_288_reg;
reg [31:0] main_6_gep_int376;
reg [31:0] main_6_gep377;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_289;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_289_reg;
reg [15:0] main_6_290;
reg [31:0] main_6_gep_int378;
reg [31:0] main_6_gep379;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_291;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_291_reg;
reg [31:0] main_6_gep_int380;
reg [31:0] main_6_gep381;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_292;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_292_reg;
reg [15:0] main_6_293;
reg [31:0] main_6_gep_int382;
reg [31:0] main_6_gep383;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_294;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_294_reg;
reg [31:0] main_6_gep_int384;
reg [31:0] main_6_gep385;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_295;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_295_reg;
reg [15:0] main_6_296;
reg [31:0] main_6_gep_int386;
reg [31:0] main_6_gep387;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_297;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_297_reg;
reg [31:0] main_6_gep_int388;
reg [31:0] main_6_gep389;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_298;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_298_reg;
reg [15:0] main_6_299;
reg [31:0] main_6_gep_int390;
reg [31:0] main_6_gep391;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_300;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_300_reg;
reg [31:0] main_6_gep_int392;
reg [31:0] main_6_gep393;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_301;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_301_reg;
reg [15:0] main_6_302;
reg [31:0] main_6_gep_int394;
reg [31:0] main_6_gep395;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_303;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_303_reg;
reg [31:0] main_6_gep_int396;
reg [31:0] main_6_gep397;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_304;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_304_reg;
reg [15:0] main_6_305;
reg [31:0] main_6_gep_int398;
reg [31:0] main_6_gep399;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_306;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_306_reg;
reg [31:0] main_6_gep_int400;
reg [31:0] main_6_gep401;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_307;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_307_reg;
reg [15:0] main_6_308;
reg [31:0] main_6_gep_int402;
reg [31:0] main_6_gep403;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_309;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_309_reg;
reg [31:0] main_6_gep_int404;
reg [31:0] main_6_gep405;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_310;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_310_reg;
reg [15:0] main_6_311;
reg [31:0] main_6_gep_int406;
reg [31:0] main_6_gep407;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_312;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_312_reg;
reg [31:0] main_6_gep_int408;
reg [31:0] main_6_gep409;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_313;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_313_reg;
reg [15:0] main_6_314;
reg [31:0] main_6_gep_int410;
reg [31:0] main_6_gep411;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_315;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_315_reg;
reg [31:0] main_6_gep_int412;
reg [31:0] main_6_gep413;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_316;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_316_reg;
reg [15:0] main_6_317;
reg [31:0] main_6_gep_int414;
reg [31:0] main_6_gep415;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_318;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_318_reg;
reg [31:0] main_6_gep_int416;
reg [31:0] main_6_gep417;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_319;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_319_reg;
reg [15:0] main_6_320;
reg [31:0] main_6_gep_int418;
reg [31:0] main_6_gep419;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_321;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_321_reg;
reg [31:0] main_6_gep_int420;
reg [31:0] main_6_gep421;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_322;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_322_reg;
reg [15:0] main_6_323;
reg [31:0] main_6_gep_int422;
reg [31:0] main_6_gep423;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_324;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_324_reg;
reg [31:0] main_6_gep_int424;
reg [31:0] main_6_gep425;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_325;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_325_reg;
reg [15:0] main_6_326;
reg [31:0] main_6_gep_int426;
reg [31:0] main_6_gep427;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_327;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_327_reg;
reg [31:0] main_6_gep_int428;
reg [31:0] main_6_gep429;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_328;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_328_reg;
reg [15:0] main_6_329;
reg [31:0] main_6_gep_int430;
reg [31:0] main_6_gep431;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_330;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_330_reg;
reg [31:0] main_6_gep_int432;
reg [31:0] main_6_gep433;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_331;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_331_reg;
reg [15:0] main_6_332;
reg [31:0] main_6_gep_int434;
reg [31:0] main_6_gep435;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_333;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_333_reg;
reg [31:0] main_6_gep_int436;
reg [31:0] main_6_gep437;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_334;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_334_reg;
reg [15:0] main_6_335;
reg [31:0] main_6_gep_int438;
reg [31:0] main_6_gep439;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_336;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_336_reg;
reg [31:0] main_6_gep_int440;
reg [31:0] main_6_gep441;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_337;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_337_reg;
reg [15:0] main_6_338;
reg [31:0] main_6_gep_int442;
reg [31:0] main_6_gep443;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_339;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_339_reg;
reg [31:0] main_6_gep_int444;
reg [31:0] main_6_gep445;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_340;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_340_reg;
reg [15:0] main_6_341;
reg [31:0] main_6_gep_int446;
reg [31:0] main_6_gep447;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_342;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_342_reg;
reg [31:0] main_6_gep_int448;
reg [31:0] main_6_gep449;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_343;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_343_reg;
reg [15:0] main_6_344;
reg [31:0] main_6_gep_int450;
reg [31:0] main_6_gep451;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_345;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_345_reg;
reg [31:0] main_6_gep_int452;
reg [31:0] main_6_gep453;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_346;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_346_reg;
reg [15:0] main_6_347;
reg [31:0] main_6_gep_int454;
reg [31:0] main_6_gep455;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_348;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_348_reg;
reg [31:0] main_6_gep_int456;
reg [31:0] main_6_gep457;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_349;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_349_reg;
reg [15:0] main_6_350;
reg [31:0] main_6_gep_int458;
reg [31:0] main_6_gep459;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_351;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_351_reg;
reg [31:0] main_6_gep_int460;
reg [31:0] main_6_gep461;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_352;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_352_reg;
reg [15:0] main_6_353;
reg [31:0] main_6_gep_int462;
reg [31:0] main_6_gep463;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_354;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_354_reg;
reg [31:0] main_6_gep_int464;
reg [31:0] main_6_gep465;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_355;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_355_reg;
reg [15:0] main_6_356;
reg [31:0] main_6_gep_int466;
reg [31:0] main_6_gep467;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_357;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_357_reg;
reg [31:0] main_6_gep_int468;
reg [31:0] main_6_gep469;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_358;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_358_reg;
reg [15:0] main_6_359;
reg [31:0] main_6_gep_int470;
reg [31:0] main_6_gep471;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_360;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_360_reg;
reg [31:0] main_6_gep_int472;
reg [31:0] main_6_gep473;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_361;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_361_reg;
reg [15:0] main_6_362;
reg [31:0] main_6_gep_int474;
reg [31:0] main_6_gep475;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_363;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_363_reg;
reg [31:0] main_6_gep_int476;
reg [31:0] main_6_gep477;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_364;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_364_reg;
reg [15:0] main_6_365;
reg [31:0] main_6_gep_int478;
reg [31:0] main_6_gep479;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_366;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_366_reg;
reg [31:0] main_6_gep_int480;
reg [31:0] main_6_gep481;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_367;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_367_reg;
reg [15:0] main_6_368;
reg [31:0] main_6_gep_int482;
reg [31:0] main_6_gep483;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_369;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_369_reg;
reg [31:0] main_6_gep_int484;
reg [31:0] main_6_gep485;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_370;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_370_reg;
reg [15:0] main_6_371;
reg [31:0] main_6_gep_int486;
reg [31:0] main_6_gep487;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_372;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_372_reg;
reg [31:0] main_6_gep_int488;
reg [31:0] main_6_gep489;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_373;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_373_reg;
reg [15:0] main_6_374;
reg [31:0] main_6_gep_int490;
reg [31:0] main_6_gep491;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_375;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_375_reg;
reg [31:0] main_6_gep_int492;
reg [31:0] main_6_gep493;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_376;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_376_reg;
reg [15:0] main_6_377;
reg [31:0] main_6_gep_int494;
reg [31:0] main_6_gep495;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_378;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_378_reg;
reg [31:0] main_6_gep_int496;
reg [31:0] main_6_gep497;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_379;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_379_reg;
reg [15:0] main_6_380;
reg [31:0] main_6_gep_int498;
reg [31:0] main_6_gep499;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_381;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_381_reg;
reg [31:0] main_6_gep_int500;
reg [31:0] main_6_gep501;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_382;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_382_reg;
reg [15:0] main_6_383;
reg [31:0] main_6_gep_int502;
reg [31:0] main_6_gep503;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_384;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_384_reg;
reg [31:0] main_6_gep_int504;
reg [31:0] main_6_gep505;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_385;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_385_reg;
reg [15:0] main_6_386;
reg [31:0] main_6_gep_int506;
reg [31:0] main_6_gep507;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_387;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_387_reg;
reg [31:0] main_6_gep_int508;
reg [31:0] main_6_gep509;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_388;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_388_reg;
reg [15:0] main_6_389;
reg [31:0] main_6_gep_int510;
reg [31:0] main_6_gep511;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_390;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_390_reg;
reg [31:0] main_preheaderi_l08i;
reg [31:0] main_preheaderi_l08i_reg;
reg [15:0] main_preheaderi_sin_index07i;
reg [15:0] main_preheaderi_sin_index07i_reg;
reg  main_preheaderi_391;
reg [31:0] main_lrph5i_392;
reg [31:0] main_lrph5i_392_reg;
reg [15:0] main_393_m04i;
reg [15:0] main_393_m04i_reg;
reg [15:0] main_393_sin_index13i;
reg [15:0] main_393_sin_index13i_reg;
reg [31:0] main_393_394;
reg [31:0] main_393_394_reg;
reg [15:0] main_393_395;
reg [15:0] main_393_395_reg;
reg  main_393_396;
reg [31:0] main_lrphi_397;
reg [31:0] main_lrphi_397_reg;
reg [31:0] main_lrphi_gep_int512;
reg [31:0] main_lrphi_gep_int512_reg;
reg [31:0] main_lrphi_gep_array513;
reg [31:0] main_lrphi_gep_array513_reg;
reg [31:0] main_lrphi_gep514;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrphi_398;
reg [15:0] main_lrphi_399;
reg [31:0] main_lrphi_gep_int515;
reg [31:0] main_lrphi_gep_int515_reg;
reg [31:0] main_lrphi_gep_array516;
reg [31:0] main_lrphi_gep_array516_reg;
reg [31:0] main_lrphi_gep517;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrphi_400;
reg [15:0] main_lrphi_401;
reg [31:0] main_lrphi_402;
reg [31:0] main_lrphi_402_reg;
reg [31:0] main_lrphi_403;
reg [31:0] main_lrphi_403_reg;
reg [15:0] main_404_ini;
reg [15:0] main_404_ini_reg;
reg [31:0] main_404_405;
reg [31:0] main_404_406;
reg [31:0] main_404_sext1i;
reg [31:0] main_404_407;
reg [31:0] main_404_407_reg;
reg [31:0] main_404_gep_int518;
reg [31:0] main_404_gep_int518_reg;
reg [31:0] main_404_gep_array519;
reg [31:0] main_404_gep_array519_reg;
reg [31:0] main_404_gep520;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_404_408;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_404_408_reg;
reg [15:0] main_404_409;
reg [31:0] main_404_410;
reg [31:0] main_404_411;
reg [31:0] main_404_412;
reg [31:0] main_404_413;
reg [31:0] main_404_414;
reg [31:0] main_404_415;
reg [15:0] main_404_416;
reg [31:0] main_404_gep_int521;
reg [31:0] main_404_gep_int521_reg;
reg [31:0] main_404_gep_array522;
reg [31:0] main_404_gep_array522_reg;
reg [31:0] main_404_gep523;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_404_417;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_404_417_reg;
reg [15:0] main_404_418;
reg [31:0] main_404_419;
reg [31:0] main_404_420;
reg [31:0] main_404_421;
reg [31:0] main_404_422;
reg [31:0] main_404_423;
reg [31:0] main_404_424;
reg [15:0] main_404_425;
reg [31:0] main_404_426;
reg [31:0] main_404_427;
reg [31:0] main_404_428;
reg [31:0] main_404_429;
reg [31:0] main_404_430;
reg [15:0] main_404_431;
reg [31:0] main_404_432;
reg [31:0] main_404_433;
reg [31:0] main_404_434;
reg [31:0] main_404_435;
reg [31:0] main_404_436;
reg [15:0] main_404_437;
reg [31:0] main_404_gep_int524;
reg [31:0] main_404_gep_int524_reg;
reg [31:0] main_404_gep_array525;
reg [31:0] main_404_gep_array525_reg;
reg [31:0] main_404_gep526;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_404_438;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_404_438_reg;
reg [31:0] main_404_gep_int527;
reg [31:0] main_404_gep_int527_reg;
reg [31:0] main_404_gep_array528;
reg [31:0] main_404_gep_array528_reg;
reg [31:0] main_404_gep529;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_404_439;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_404_439_reg;
reg [15:0] main_404_440;
reg [15:0] main_404_441;
reg [15:0] main_404_442;
reg [15:0] main_404_443;
reg [15:0] main_404_444;
reg [15:0] main_404_445;
reg [15:0] main_404_445_reg;
reg [15:0] main_404_446;
reg [15:0] main_404_446_reg;
reg [15:0] main_404_447;
reg [15:0] main_404_447_reg;
reg [31:0] main_404_448;
reg [15:0] main_404_449;
reg [15:0] main_404_449_reg;
reg  main_404_450;
reg  main_404_450_reg;
reg [15:0] main__crit_edgei_451;
reg [31:0] main__crit_edgei_452;
reg  main__crit_edgei_453;
reg [15:0] main__crit_edge6i_sin_index1lcssai;
reg [15:0] main__crit_edge6i_sin_index1lcssai_reg;
reg [31:0] main__crit_edge6i_sexti;
reg [31:0] main__crit_edge6i_phitmpi;
reg  main__crit_edge6i_454;
reg [31:0] main_fftexit_indvarsiv;
reg [31:0] main_fftexit_indvarsiv_reg;
reg [31:0] main_fftexit_sum02;
reg [31:0] main_fftexit_sum02_reg;
reg [31:0] main_fftexit_gep_int530;
reg [31:0] main_fftexit_gep_int530_reg;
reg [31:0] main_fftexit_gep_array531;
reg [31:0] main_fftexit_gep_array531_reg;
reg [31:0] main_fftexit_gep532;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_fftexit_455;
reg [15:0] main_fftexit_456;
reg [31:0] main_fftexit_457;
reg  main_fftexit_458;
reg [31:0] main_fftexit_459;
reg [31:0] main_fftexit_460;
reg [31:0] main_fftexit_461;
reg [31:0] main_fftexit_gep_int533;
reg [31:0] main_fftexit_gep_int533_reg;
reg [31:0] main_fftexit_gep_array534;
reg [31:0] main_fftexit_gep_array534_reg;
reg [31:0] main_fftexit_gep535;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_fftexit_462;
reg [15:0] main_fftexit_463;
reg [31:0] main_fftexit_464;
reg  main_fftexit_465;
reg [31:0] main_fftexit_466;
reg [31:0] main_fftexit_467;
reg [31:0] main_fftexit_468;
reg [31:0] main_fftexit_indvarsivnext;
reg [31:0] main_fftexit_indvarsivnext_reg;
reg  main_fftexit_exitcond;
reg  main_fftexit_exitcond_reg;
reg [31:0] main_469_lcssa;
reg [31:0] main_469_lcssa_reg;
reg  main_469_471;
reg [31:0] main_signed_add_32_251_op0;
reg [31:0] main_signed_add_32_251_op1;
reg [31:0] main_signed_add_32_251;
reg [31:0] main_signed_add_32_0_op0;
reg [31:0] main_signed_add_32_0_op1;
reg [31:0] main_signed_add_32_0;
reg [31:0] main_signed_multiply_32_0_op0;
reg [31:0] main_signed_multiply_32_0_op1;
reg  lpm_mult_main_1_3_en;
reg [31:0] main_1_3_stage0_reg;
reg [31:0] main_signed_multiply_32_0;
reg [31:0] main_signed_add_32_3_op0;
reg [31:0] main_signed_add_32_3_op1;
reg [31:0] main_signed_add_32_3;
reg [31:0] main_signed_add_32_4_op0;
reg [31:0] main_signed_add_32_4_op1;
reg [31:0] main_signed_add_32_4;
reg [31:0] main_signed_add_32_5_op0;
reg [31:0] main_signed_add_32_5_op1;
reg [31:0] main_signed_add_32_5;
reg [31:0] main_signed_add_32_6_op0;
reg [31:0] main_signed_add_32_6_op1;
reg [31:0] main_signed_add_32_6;
reg [31:0] main_signed_add_32_23_op0;
reg [31:0] main_signed_add_32_23_op1;
reg [31:0] main_signed_add_32_23;
reg [31:0] main_signed_add_32_24_op0;
reg [31:0] main_signed_add_32_24_op1;
reg [31:0] main_signed_add_32_24;
reg [31:0] main_signed_add_32_19_op0;
reg [31:0] main_signed_add_32_19_op1;
reg [31:0] main_signed_add_32_19;
reg [31:0] main_signed_add_32_20_op0;
reg [31:0] main_signed_add_32_20_op1;
reg [31:0] main_signed_add_32_20;
reg [31:0] main_signed_add_32_21_op0;
reg [31:0] main_signed_add_32_21_op1;
reg [31:0] main_signed_add_32_21;
reg [31:0] main_signed_add_32_22_op0;
reg [31:0] main_signed_add_32_22_op1;
reg [31:0] main_signed_add_32_22;
reg [31:0] main_signed_add_32_56_op0;
reg [31:0] main_signed_add_32_56_op1;
reg [31:0] main_signed_add_32_56;
reg [31:0] main_signed_add_32_57_op0;
reg [31:0] main_signed_add_32_57_op1;
reg [31:0] main_signed_add_32_57;
reg [31:0] main_signed_add_32_58_op0;
reg [31:0] main_signed_add_32_58_op1;
reg [31:0] main_signed_add_32_58;
reg [31:0] main_signed_add_32_59_op0;
reg [31:0] main_signed_add_32_59_op1;
reg [31:0] main_signed_add_32_59;
reg [31:0] main_signed_add_32_1_op0;
reg [31:0] main_signed_add_32_1_op1;
reg [31:0] main_signed_add_32_1;
reg [31:0] main_signed_add_32_2_op0;
reg [31:0] main_signed_add_32_2_op1;
reg [31:0] main_signed_add_32_2;
reg [31:0] main_signed_add_32_40_op0;
reg [31:0] main_signed_add_32_40_op1;
reg [31:0] main_signed_add_32_40;
reg [31:0] main_signed_add_32_41_op0;
reg [31:0] main_signed_add_32_41_op1;
reg [31:0] main_signed_add_32_41;
reg [31:0] main_signed_add_32_42_op0;
reg [31:0] main_signed_add_32_42_op1;
reg [31:0] main_signed_add_32_42;
reg [31:0] main_signed_add_32_43_op0;
reg [31:0] main_signed_add_32_43_op1;
reg [31:0] main_signed_add_32_43;
reg [31:0] main_signed_add_32_44_op0;
reg [31:0] main_signed_add_32_44_op1;
reg [31:0] main_signed_add_32_44;
reg [31:0] main_signed_add_32_45_op0;
reg [31:0] main_signed_add_32_45_op1;
reg [31:0] main_signed_add_32_45;
reg [31:0] main_signed_add_32_46_op0;
reg [31:0] main_signed_add_32_46_op1;
reg [31:0] main_signed_add_32_46;
reg [31:0] main_signed_add_32_47_op0;
reg [31:0] main_signed_add_32_47_op1;
reg [31:0] main_signed_add_32_47;
reg [31:0] main_signed_add_32_48_op0;
reg [31:0] main_signed_add_32_48_op1;
reg [31:0] main_signed_add_32_48;
reg [31:0] main_signed_add_32_49_op0;
reg [31:0] main_signed_add_32_49_op1;
reg [31:0] main_signed_add_32_49;
reg [31:0] main_signed_add_32_50_op0;
reg [31:0] main_signed_add_32_50_op1;
reg [31:0] main_signed_add_32_50;
reg [31:0] main_signed_add_32_51_op0;
reg [31:0] main_signed_add_32_51_op1;
reg [31:0] main_signed_add_32_51;
reg [31:0] main_signed_add_32_7_op0;
reg [31:0] main_signed_add_32_7_op1;
reg [31:0] main_signed_add_32_7;
reg [31:0] main_signed_add_32_8_op0;
reg [31:0] main_signed_add_32_8_op1;
reg [31:0] main_signed_add_32_8;
reg [31:0] main_signed_add_32_9_op0;
reg [31:0] main_signed_add_32_9_op1;
reg [31:0] main_signed_add_32_9;
reg [31:0] main_signed_add_32_10_op0;
reg [31:0] main_signed_add_32_10_op1;
reg [31:0] main_signed_add_32_10;
reg [31:0] main_signed_add_32_11_op0;
reg [31:0] main_signed_add_32_11_op1;
reg [31:0] main_signed_add_32_11;
reg [31:0] main_signed_add_32_12_op0;
reg [31:0] main_signed_add_32_12_op1;
reg [31:0] main_signed_add_32_12;
reg [31:0] main_signed_add_32_13_op0;
reg [31:0] main_signed_add_32_13_op1;
reg [31:0] main_signed_add_32_13;
reg [31:0] main_signed_add_32_14_op0;
reg [31:0] main_signed_add_32_14_op1;
reg [31:0] main_signed_add_32_14;
reg [31:0] main_signed_add_32_15_op0;
reg [31:0] main_signed_add_32_15_op1;
reg [31:0] main_signed_add_32_15;
reg [31:0] main_signed_add_32_16_op0;
reg [31:0] main_signed_add_32_16_op1;
reg [31:0] main_signed_add_32_16;
reg [31:0] main_signed_add_32_17_op0;
reg [31:0] main_signed_add_32_17_op1;
reg [31:0] main_signed_add_32_17;
reg [31:0] main_signed_add_32_18_op0;
reg [31:0] main_signed_add_32_18_op1;
reg [31:0] main_signed_add_32_18;
reg [31:0] main_signed_add_32_74_op0;
reg [31:0] main_signed_add_32_74_op1;
reg [31:0] main_signed_add_32_74;
reg [31:0] main_signed_add_32_75_op0;
reg [31:0] main_signed_add_32_75_op1;
reg [31:0] main_signed_add_32_75;
reg [31:0] main_signed_add_32_76_op0;
reg [31:0] main_signed_add_32_76_op1;
reg [31:0] main_signed_add_32_76;
reg [31:0] main_signed_add_32_77_op0;
reg [31:0] main_signed_add_32_77_op1;
reg [31:0] main_signed_add_32_77;
reg [31:0] main_signed_add_32_78_op0;
reg [31:0] main_signed_add_32_78_op1;
reg [31:0] main_signed_add_32_78;
reg [31:0] main_signed_add_32_79_op0;
reg [31:0] main_signed_add_32_79_op1;
reg [31:0] main_signed_add_32_79;
reg [31:0] main_signed_add_32_80_op0;
reg [31:0] main_signed_add_32_80_op1;
reg [31:0] main_signed_add_32_80;
reg [31:0] main_signed_add_32_81_op0;
reg [31:0] main_signed_add_32_81_op1;
reg [31:0] main_signed_add_32_81;
reg [31:0] main_signed_add_32_82_op0;
reg [31:0] main_signed_add_32_82_op1;
reg [31:0] main_signed_add_32_82;
reg [31:0] main_signed_add_32_83_op0;
reg [31:0] main_signed_add_32_83_op1;
reg [31:0] main_signed_add_32_83;
reg [31:0] main_signed_add_32_84_op0;
reg [31:0] main_signed_add_32_84_op1;
reg [31:0] main_signed_add_32_84;
reg [31:0] main_signed_add_32_85_op0;
reg [31:0] main_signed_add_32_85_op1;
reg [31:0] main_signed_add_32_85;
reg [31:0] main_signed_add_32_86_op0;
reg [31:0] main_signed_add_32_86_op1;
reg [31:0] main_signed_add_32_86;
reg [31:0] main_signed_add_32_87_op0;
reg [31:0] main_signed_add_32_87_op1;
reg [31:0] main_signed_add_32_87;
reg [31:0] main_signed_add_32_88_op0;
reg [31:0] main_signed_add_32_88_op1;
reg [31:0] main_signed_add_32_88;
reg [31:0] main_signed_add_32_89_op0;
reg [31:0] main_signed_add_32_89_op1;
reg [31:0] main_signed_add_32_89;
reg [31:0] main_signed_add_32_25_op0;
reg [31:0] main_signed_add_32_25_op1;
reg [31:0] main_signed_add_32_25;
reg [31:0] main_signed_add_32_26_op0;
reg [31:0] main_signed_add_32_26_op1;
reg [31:0] main_signed_add_32_26;
reg [31:0] main_signed_add_32_27_op0;
reg [31:0] main_signed_add_32_27_op1;
reg [31:0] main_signed_add_32_27;
reg [31:0] main_signed_add_32_28_op0;
reg [31:0] main_signed_add_32_28_op1;
reg [31:0] main_signed_add_32_28;
reg [31:0] main_signed_add_32_29_op0;
reg [31:0] main_signed_add_32_29_op1;
reg [31:0] main_signed_add_32_29;
reg [31:0] main_signed_add_32_30_op0;
reg [31:0] main_signed_add_32_30_op1;
reg [31:0] main_signed_add_32_30;
reg [31:0] main_signed_add_32_31_op0;
reg [31:0] main_signed_add_32_31_op1;
reg [31:0] main_signed_add_32_31;
reg [31:0] main_signed_add_32_32_op0;
reg [31:0] main_signed_add_32_32_op1;
reg [31:0] main_signed_add_32_32;
reg [31:0] main_signed_add_32_33_op0;
reg [31:0] main_signed_add_32_33_op1;
reg [31:0] main_signed_add_32_33;
reg [31:0] main_signed_add_32_34_op0;
reg [31:0] main_signed_add_32_34_op1;
reg [31:0] main_signed_add_32_34;
reg [31:0] main_signed_add_32_35_op0;
reg [31:0] main_signed_add_32_35_op1;
reg [31:0] main_signed_add_32_35;
reg [31:0] main_signed_add_32_36_op0;
reg [31:0] main_signed_add_32_36_op1;
reg [31:0] main_signed_add_32_36;
reg [31:0] main_signed_add_32_37_op0;
reg [31:0] main_signed_add_32_37_op1;
reg [31:0] main_signed_add_32_37;
reg [31:0] main_signed_add_32_38_op0;
reg [31:0] main_signed_add_32_38_op1;
reg [31:0] main_signed_add_32_38;
reg [31:0] main_signed_add_32_39_op0;
reg [31:0] main_signed_add_32_39_op1;
reg [31:0] main_signed_add_32_39;
reg [31:0] main_signed_add_32_113_op0;
reg [31:0] main_signed_add_32_113_op1;
reg [31:0] main_signed_add_32_113;
reg [31:0] main_signed_add_32_114_op0;
reg [31:0] main_signed_add_32_114_op1;
reg [31:0] main_signed_add_32_114;
reg [31:0] main_signed_add_32_115_op0;
reg [31:0] main_signed_add_32_115_op1;
reg [31:0] main_signed_add_32_115;
reg [31:0] main_signed_add_32_116_op0;
reg [31:0] main_signed_add_32_116_op1;
reg [31:0] main_signed_add_32_116;
reg [31:0] main_signed_add_32_117_op0;
reg [31:0] main_signed_add_32_117_op1;
reg [31:0] main_signed_add_32_117;
reg [31:0] main_signed_add_32_118_op0;
reg [31:0] main_signed_add_32_118_op1;
reg [31:0] main_signed_add_32_118;
reg [31:0] main_signed_add_32_119_op0;
reg [31:0] main_signed_add_32_119_op1;
reg [31:0] main_signed_add_32_119;
reg [31:0] main_signed_add_32_120_op0;
reg [31:0] main_signed_add_32_120_op1;
reg [31:0] main_signed_add_32_120;
reg [15:0] main_signed_add_16_0_op0;
reg [15:0] main_signed_add_16_0_op1;
reg [15:0] main_signed_add_16_0;
reg [31:0] main_signed_multiply_32_1_op0;
reg [31:0] main_signed_multiply_32_1_op1;
reg  lpm_mult_main_404_420_en;
reg [31:0] main_404_420_stage0_reg;
reg [31:0] main_signed_multiply_32_1;
reg [31:0] main_signed_add_32_52_op0;
reg [31:0] main_signed_add_32_52_op1;
reg [31:0] main_signed_add_32_52;
reg [31:0] main_signed_add_32_53_op0;
reg [31:0] main_signed_add_32_53_op1;
reg [31:0] main_signed_add_32_53;
reg [31:0] main_signed_add_32_54_op0;
reg [31:0] main_signed_add_32_54_op1;
reg [31:0] main_signed_add_32_54;
reg [31:0] main_signed_add_32_55_op0;
reg [31:0] main_signed_add_32_55_op1;
reg [31:0] main_signed_add_32_55;
reg [31:0] main_signed_add_32_121_op0;
reg [31:0] main_signed_add_32_121_op1;
reg [31:0] main_signed_add_32_121;
reg [31:0] main_signed_add_32_122_op0;
reg [31:0] main_signed_add_32_122_op1;
reg [31:0] main_signed_add_32_122;
reg [31:0] main_signed_add_32_123_op0;
reg [31:0] main_signed_add_32_123_op1;
reg [31:0] main_signed_add_32_123;
reg [31:0] main_signed_add_32_124_op0;
reg [31:0] main_signed_add_32_124_op1;
reg [31:0] main_signed_add_32_124;
reg [31:0] main_signed_add_32_125_op0;
reg [31:0] main_signed_add_32_125_op1;
reg [31:0] main_signed_add_32_125;
reg [31:0] main_signed_add_32_126_op0;
reg [31:0] main_signed_add_32_126_op1;
reg [31:0] main_signed_add_32_126;
reg [31:0] main_signed_add_32_127_op0;
reg [31:0] main_signed_add_32_127_op1;
reg [31:0] main_signed_add_32_127;
reg [31:0] main_signed_add_32_128_op0;
reg [31:0] main_signed_add_32_128_op1;
reg [31:0] main_signed_add_32_128;
reg [31:0] main_signed_add_32_60_op0;
reg [31:0] main_signed_add_32_60_op1;
reg [31:0] main_signed_add_32_60;
reg [31:0] main_signed_add_32_61_op0;
reg [31:0] main_signed_add_32_61_op1;
reg [31:0] main_signed_add_32_61;
reg [31:0] main_signed_add_32_62_op0;
reg [31:0] main_signed_add_32_62_op1;
reg [31:0] main_signed_add_32_62;
reg [31:0] main_signed_add_32_63_op0;
reg [31:0] main_signed_add_32_63_op1;
reg [31:0] main_signed_add_32_63;
reg [31:0] main_signed_add_32_64_op0;
reg [31:0] main_signed_add_32_64_op1;
reg [31:0] main_signed_add_32_64;
reg [31:0] main_signed_add_32_65_op0;
reg [31:0] main_signed_add_32_65_op1;
reg [31:0] main_signed_add_32_65;
reg [31:0] main_signed_add_32_66_op0;
reg [31:0] main_signed_add_32_66_op1;
reg [31:0] main_signed_add_32_66;
reg [31:0] main_signed_add_32_67_op0;
reg [31:0] main_signed_add_32_67_op1;
reg [31:0] main_signed_add_32_67;
reg [31:0] main_signed_add_32_68_op0;
reg [31:0] main_signed_add_32_68_op1;
reg [31:0] main_signed_add_32_68;
reg [31:0] main_signed_add_32_69_op0;
reg [31:0] main_signed_add_32_69_op1;
reg [31:0] main_signed_add_32_69;
reg [31:0] main_signed_add_32_70_op0;
reg [31:0] main_signed_add_32_70_op1;
reg [31:0] main_signed_add_32_70;
reg [31:0] main_signed_add_32_71_op0;
reg [31:0] main_signed_add_32_71_op1;
reg [31:0] main_signed_add_32_71;
reg [31:0] main_signed_add_32_72_op0;
reg [31:0] main_signed_add_32_72_op1;
reg [31:0] main_signed_add_32_72;
reg [31:0] main_signed_add_32_73_op0;
reg [31:0] main_signed_add_32_73_op1;
reg [31:0] main_signed_add_32_73;
reg [31:0] main_signed_add_32_183_op0;
reg [31:0] main_signed_add_32_183_op1;
reg [31:0] main_signed_add_32_183;
reg [31:0] main_signed_add_32_184_op0;
reg [31:0] main_signed_add_32_184_op1;
reg [31:0] main_signed_add_32_184;
reg [31:0] main_signed_add_32_185_op0;
reg [31:0] main_signed_add_32_185_op1;
reg [31:0] main_signed_add_32_185;
reg [31:0] main_signed_add_32_186_op0;
reg [31:0] main_signed_add_32_186_op1;
reg [31:0] main_signed_add_32_186;
reg [31:0] main_signed_add_32_187_op0;
reg [31:0] main_signed_add_32_187_op1;
reg [31:0] main_signed_add_32_187;
reg [31:0] main_signed_add_32_188_op0;
reg [31:0] main_signed_add_32_188_op1;
reg [31:0] main_signed_add_32_188;
reg [31:0] main_signed_add_32_189_op0;
reg [31:0] main_signed_add_32_189_op1;
reg [31:0] main_signed_add_32_189;
reg [31:0] main_signed_add_32_190_op0;
reg [31:0] main_signed_add_32_190_op1;
reg [31:0] main_signed_add_32_190;
reg [31:0] main_signed_add_32_191_op0;
reg [31:0] main_signed_add_32_191_op1;
reg [31:0] main_signed_add_32_191;
reg [31:0] main_signed_add_32_192_op0;
reg [31:0] main_signed_add_32_192_op1;
reg [31:0] main_signed_add_32_192;
reg [31:0] main_signed_add_32_193_op0;
reg [31:0] main_signed_add_32_193_op1;
reg [31:0] main_signed_add_32_193;
reg [31:0] main_signed_add_32_194_op0;
reg [31:0] main_signed_add_32_194_op1;
reg [31:0] main_signed_add_32_194;
reg [31:0] main_signed_add_32_195_op0;
reg [31:0] main_signed_add_32_195_op1;
reg [31:0] main_signed_add_32_195;
reg [31:0] main_signed_add_32_196_op0;
reg [31:0] main_signed_add_32_196_op1;
reg [31:0] main_signed_add_32_196;
reg [31:0] main_signed_add_32_197_op0;
reg [31:0] main_signed_add_32_197_op1;
reg [31:0] main_signed_add_32_197;
reg [31:0] main_signed_add_32_198_op0;
reg [31:0] main_signed_add_32_198_op1;
reg [31:0] main_signed_add_32_198;
reg [31:0] main_signed_add_32_199_op0;
reg [31:0] main_signed_add_32_199_op1;
reg [31:0] main_signed_add_32_199;
reg [31:0] main_signed_add_32_200_op0;
reg [31:0] main_signed_add_32_200_op1;
reg [31:0] main_signed_add_32_200;
reg [31:0] main_signed_add_32_201_op0;
reg [31:0] main_signed_add_32_201_op1;
reg [31:0] main_signed_add_32_201;
reg [31:0] main_signed_add_32_202_op0;
reg [31:0] main_signed_add_32_202_op1;
reg [31:0] main_signed_add_32_202;
reg [31:0] main_signed_add_32_203_op0;
reg [31:0] main_signed_add_32_203_op1;
reg [31:0] main_signed_add_32_203;
reg [31:0] main_signed_add_32_204_op0;
reg [31:0] main_signed_add_32_204_op1;
reg [31:0] main_signed_add_32_204;
reg [31:0] main_signed_add_32_205_op0;
reg [31:0] main_signed_add_32_205_op1;
reg [31:0] main_signed_add_32_205;
reg [31:0] main_signed_add_32_206_op0;
reg [31:0] main_signed_add_32_206_op1;
reg [31:0] main_signed_add_32_206;
reg [31:0] main_signed_add_32_207_op0;
reg [31:0] main_signed_add_32_207_op1;
reg [31:0] main_signed_add_32_207;
reg [31:0] main_signed_add_32_208_op0;
reg [31:0] main_signed_add_32_208_op1;
reg [31:0] main_signed_add_32_208;
reg [31:0] main_signed_add_32_209_op0;
reg [31:0] main_signed_add_32_209_op1;
reg [31:0] main_signed_add_32_209;
reg [31:0] main_signed_add_32_210_op0;
reg [31:0] main_signed_add_32_210_op1;
reg [31:0] main_signed_add_32_210;
reg [31:0] main_signed_add_32_211_op0;
reg [31:0] main_signed_add_32_211_op1;
reg [31:0] main_signed_add_32_211;
reg [31:0] main_signed_add_32_212_op0;
reg [31:0] main_signed_add_32_212_op1;
reg [31:0] main_signed_add_32_212;
reg [31:0] main_signed_add_32_213_op0;
reg [31:0] main_signed_add_32_213_op1;
reg [31:0] main_signed_add_32_213;
reg [31:0] main_signed_add_32_214_op0;
reg [31:0] main_signed_add_32_214_op1;
reg [31:0] main_signed_add_32_214;
reg [31:0] main_signed_add_32_215_op0;
reg [31:0] main_signed_add_32_215_op1;
reg [31:0] main_signed_add_32_215;
reg [31:0] main_signed_add_32_90_op0;
reg [31:0] main_signed_add_32_90_op1;
reg [31:0] main_signed_add_32_90;
reg [31:0] main_signed_add_32_91_op0;
reg [31:0] main_signed_add_32_91_op1;
reg [31:0] main_signed_add_32_91;
reg [31:0] main_signed_add_32_92_op0;
reg [31:0] main_signed_add_32_92_op1;
reg [31:0] main_signed_add_32_92;
reg [31:0] main_signed_add_32_93_op0;
reg [31:0] main_signed_add_32_93_op1;
reg [31:0] main_signed_add_32_93;
reg [31:0] main_signed_add_32_94_op0;
reg [31:0] main_signed_add_32_94_op1;
reg [31:0] main_signed_add_32_94;
reg [31:0] main_signed_add_32_95_op0;
reg [31:0] main_signed_add_32_95_op1;
reg [31:0] main_signed_add_32_95;
reg [31:0] main_signed_add_32_96_op0;
reg [31:0] main_signed_add_32_96_op1;
reg [31:0] main_signed_add_32_96;
reg [31:0] main_signed_add_32_97_op0;
reg [31:0] main_signed_add_32_97_op1;
reg [31:0] main_signed_add_32_97;
reg [31:0] main_signed_add_32_98_op0;
reg [31:0] main_signed_add_32_98_op1;
reg [31:0] main_signed_add_32_98;
reg [31:0] main_signed_add_32_99_op0;
reg [31:0] main_signed_add_32_99_op1;
reg [31:0] main_signed_add_32_99;
reg [31:0] main_signed_add_32_100_op0;
reg [31:0] main_signed_add_32_100_op1;
reg [31:0] main_signed_add_32_100;
reg [31:0] main_signed_add_32_101_op0;
reg [31:0] main_signed_add_32_101_op1;
reg [31:0] main_signed_add_32_101;
reg [31:0] main_signed_add_32_102_op0;
reg [31:0] main_signed_add_32_102_op1;
reg [31:0] main_signed_add_32_102;
reg [31:0] main_signed_add_32_103_op0;
reg [31:0] main_signed_add_32_103_op1;
reg [31:0] main_signed_add_32_103;
reg [31:0] main_signed_add_32_104_op0;
reg [31:0] main_signed_add_32_104_op1;
reg [31:0] main_signed_add_32_104;
reg [31:0] main_signed_add_32_105_op0;
reg [31:0] main_signed_add_32_105_op1;
reg [31:0] main_signed_add_32_105;
reg [31:0] main_signed_add_32_106_op0;
reg [31:0] main_signed_add_32_106_op1;
reg [31:0] main_signed_add_32_106;
reg [31:0] main_signed_add_32_107_op0;
reg [31:0] main_signed_add_32_107_op1;
reg [31:0] main_signed_add_32_107;
reg [31:0] main_signed_add_32_108_op0;
reg [31:0] main_signed_add_32_108_op1;
reg [31:0] main_signed_add_32_108;
reg [31:0] main_signed_add_32_109_op0;
reg [31:0] main_signed_add_32_109_op1;
reg [31:0] main_signed_add_32_109;
reg [31:0] main_signed_add_32_110_op0;
reg [31:0] main_signed_add_32_110_op1;
reg [31:0] main_signed_add_32_110;
reg [31:0] main_signed_add_32_111_op0;
reg [31:0] main_signed_add_32_111_op1;
reg [31:0] main_signed_add_32_111;
reg [31:0] main_signed_add_32_112_op0;
reg [31:0] main_signed_add_32_112_op1;
reg [31:0] main_signed_add_32_112;
reg [31:0] main_signed_multiply_32_2_op0;
reg [31:0] main_signed_multiply_32_2_op1;
reg  lpm_mult_main_404_426_en;
reg [31:0] main_404_426_stage0_reg;
reg [31:0] main_signed_multiply_32_2;
reg [31:0] main_signed_add_32_249_op0;
reg [31:0] main_signed_add_32_249_op1;
reg [31:0] main_signed_add_32_249;
reg [31:0] main_signed_multiply_32_3_op0;
reg [31:0] main_signed_multiply_32_3_op1;
reg  lpm_mult_main_404_432_en;
reg [31:0] main_404_432_stage0_reg;
reg [31:0] main_signed_multiply_32_3;
reg [31:0] main_signed_add_32_250_op0;
reg [31:0] main_signed_add_32_250_op1;
reg [31:0] main_signed_add_32_250;
reg [15:0] main_signed_subtract_16_0_op0;
reg [15:0] main_signed_subtract_16_0_op1;
reg [15:0] main_signed_subtract_16_0;
reg [15:0] main_signed_subtract_16_1_op0;
reg [15:0] main_signed_subtract_16_1_op1;
reg [15:0] main_signed_subtract_16_1;
reg [15:0] main_signed_subtract_16_2_op0;
reg [15:0] main_signed_subtract_16_2_op1;
reg [15:0] main_signed_subtract_16_2;
reg [15:0] main_signed_add_16_1_op0;
reg [15:0] main_signed_add_16_1_op1;
reg [15:0] main_signed_add_16_1;
reg [15:0] main_signed_add_16_2_op0;
reg [15:0] main_signed_add_16_2_op1;
reg [15:0] main_signed_add_16_2;
reg [31:0] main_signed_subtract_32_0_op0;
reg [31:0] main_signed_subtract_32_0_op1;
reg [31:0] main_signed_subtract_32_0;
reg [31:0] main_signed_subtract_32_1_op0;
reg [31:0] main_signed_subtract_32_1_op1;
reg [31:0] main_signed_subtract_32_1;
reg [31:0] main_signed_add_32_129_op0;
reg [31:0] main_signed_add_32_129_op1;
reg [31:0] main_signed_add_32_129;
reg [31:0] main_signed_add_32_130_op0;
reg [31:0] main_signed_add_32_130_op1;
reg [31:0] main_signed_add_32_130;
reg [31:0] main_signed_add_32_131_op0;
reg [31:0] main_signed_add_32_131_op1;
reg [31:0] main_signed_add_32_131;
reg [31:0] main_signed_add_32_132_op0;
reg [31:0] main_signed_add_32_132_op1;
reg [31:0] main_signed_add_32_132;
reg [31:0] main_signed_add_32_133_op0;
reg [31:0] main_signed_add_32_133_op1;
reg [31:0] main_signed_add_32_133;
reg [31:0] main_signed_add_32_134_op0;
reg [31:0] main_signed_add_32_134_op1;
reg [31:0] main_signed_add_32_134;
reg [31:0] main_signed_add_32_135_op0;
reg [31:0] main_signed_add_32_135_op1;
reg [31:0] main_signed_add_32_135;
reg [31:0] main_signed_add_32_136_op0;
reg [31:0] main_signed_add_32_136_op1;
reg [31:0] main_signed_add_32_136;
reg [31:0] main_signed_add_32_137_op0;
reg [31:0] main_signed_add_32_137_op1;
reg [31:0] main_signed_add_32_137;
reg [31:0] main_signed_add_32_138_op0;
reg [31:0] main_signed_add_32_138_op1;
reg [31:0] main_signed_add_32_138;
reg [31:0] main_signed_add_32_139_op0;
reg [31:0] main_signed_add_32_139_op1;
reg [31:0] main_signed_add_32_139;
reg [31:0] main_signed_add_32_140_op0;
reg [31:0] main_signed_add_32_140_op1;
reg [31:0] main_signed_add_32_140;
reg [31:0] main_signed_add_32_141_op0;
reg [31:0] main_signed_add_32_141_op1;
reg [31:0] main_signed_add_32_141;
reg [31:0] main_signed_add_32_142_op0;
reg [31:0] main_signed_add_32_142_op1;
reg [31:0] main_signed_add_32_142;
reg [31:0] main_signed_add_32_143_op0;
reg [31:0] main_signed_add_32_143_op1;
reg [31:0] main_signed_add_32_143;
reg [31:0] main_signed_add_32_144_op0;
reg [31:0] main_signed_add_32_144_op1;
reg [31:0] main_signed_add_32_144;
reg [31:0] main_signed_add_32_145_op0;
reg [31:0] main_signed_add_32_145_op1;
reg [31:0] main_signed_add_32_145;
reg [31:0] main_signed_add_32_146_op0;
reg [31:0] main_signed_add_32_146_op1;
reg [31:0] main_signed_add_32_146;
reg [31:0] main_signed_add_32_147_op0;
reg [31:0] main_signed_add_32_147_op1;
reg [31:0] main_signed_add_32_147;
reg [31:0] main_signed_add_32_148_op0;
reg [31:0] main_signed_add_32_148_op1;
reg [31:0] main_signed_add_32_148;
reg [31:0] main_signed_add_32_149_op0;
reg [31:0] main_signed_add_32_149_op1;
reg [31:0] main_signed_add_32_149;
reg [31:0] main_signed_add_32_150_op0;
reg [31:0] main_signed_add_32_150_op1;
reg [31:0] main_signed_add_32_150;
reg [31:0] main_signed_add_32_151_op0;
reg [31:0] main_signed_add_32_151_op1;
reg [31:0] main_signed_add_32_151;
reg [31:0] main_signed_add_32_152_op0;
reg [31:0] main_signed_add_32_152_op1;
reg [31:0] main_signed_add_32_152;
reg [31:0] main_signed_add_32_153_op0;
reg [31:0] main_signed_add_32_153_op1;
reg [31:0] main_signed_add_32_153;
reg [31:0] main_signed_add_32_154_op0;
reg [31:0] main_signed_add_32_154_op1;
reg [31:0] main_signed_add_32_154;
reg [31:0] main_signed_add_32_155_op0;
reg [31:0] main_signed_add_32_155_op1;
reg [31:0] main_signed_add_32_155;
reg [31:0] main_signed_add_32_156_op0;
reg [31:0] main_signed_add_32_156_op1;
reg [31:0] main_signed_add_32_156;
reg [31:0] main_signed_add_32_157_op0;
reg [31:0] main_signed_add_32_157_op1;
reg [31:0] main_signed_add_32_157;
reg [31:0] main_signed_add_32_158_op0;
reg [31:0] main_signed_add_32_158_op1;
reg [31:0] main_signed_add_32_158;
reg [31:0] main_signed_add_32_159_op0;
reg [31:0] main_signed_add_32_159_op1;
reg [31:0] main_signed_add_32_159;
reg [31:0] main_signed_add_32_160_op0;
reg [31:0] main_signed_add_32_160_op1;
reg [31:0] main_signed_add_32_160;
reg [31:0] main_signed_add_32_161_op0;
reg [31:0] main_signed_add_32_161_op1;
reg [31:0] main_signed_add_32_161;
reg [31:0] main_signed_add_32_162_op0;
reg [31:0] main_signed_add_32_162_op1;
reg [31:0] main_signed_add_32_162;
reg [31:0] main_signed_add_32_163_op0;
reg [31:0] main_signed_add_32_163_op1;
reg [31:0] main_signed_add_32_163;
reg [31:0] main_signed_add_32_164_op0;
reg [31:0] main_signed_add_32_164_op1;
reg [31:0] main_signed_add_32_164;
reg [31:0] main_signed_add_32_165_op0;
reg [31:0] main_signed_add_32_165_op1;
reg [31:0] main_signed_add_32_165;
reg [31:0] main_signed_add_32_166_op0;
reg [31:0] main_signed_add_32_166_op1;
reg [31:0] main_signed_add_32_166;
reg [31:0] main_signed_add_32_167_op0;
reg [31:0] main_signed_add_32_167_op1;
reg [31:0] main_signed_add_32_167;
reg [31:0] main_signed_add_32_168_op0;
reg [31:0] main_signed_add_32_168_op1;
reg [31:0] main_signed_add_32_168;
reg [31:0] main_signed_add_32_169_op0;
reg [31:0] main_signed_add_32_169_op1;
reg [31:0] main_signed_add_32_169;
reg [31:0] main_signed_add_32_170_op0;
reg [31:0] main_signed_add_32_170_op1;
reg [31:0] main_signed_add_32_170;
reg [31:0] main_signed_add_32_171_op0;
reg [31:0] main_signed_add_32_171_op1;
reg [31:0] main_signed_add_32_171;
reg [31:0] main_signed_add_32_172_op0;
reg [31:0] main_signed_add_32_172_op1;
reg [31:0] main_signed_add_32_172;
reg [31:0] main_signed_add_32_173_op0;
reg [31:0] main_signed_add_32_173_op1;
reg [31:0] main_signed_add_32_173;
reg [31:0] main_signed_add_32_174_op0;
reg [31:0] main_signed_add_32_174_op1;
reg [31:0] main_signed_add_32_174;
reg [31:0] main_signed_add_32_175_op0;
reg [31:0] main_signed_add_32_175_op1;
reg [31:0] main_signed_add_32_175;
reg [31:0] main_signed_add_32_176_op0;
reg [31:0] main_signed_add_32_176_op1;
reg [31:0] main_signed_add_32_176;
reg [31:0] main_signed_add_32_177_op0;
reg [31:0] main_signed_add_32_177_op1;
reg [31:0] main_signed_add_32_177;
reg [31:0] main_signed_add_32_178_op0;
reg [31:0] main_signed_add_32_178_op1;
reg [31:0] main_signed_add_32_178;
reg [31:0] main_signed_add_32_179_op0;
reg [31:0] main_signed_add_32_179_op1;
reg [31:0] main_signed_add_32_179;
reg [31:0] main_signed_add_32_180_op0;
reg [31:0] main_signed_add_32_180_op1;
reg [31:0] main_signed_add_32_180;
reg [31:0] main_signed_add_32_181_op0;
reg [31:0] main_signed_add_32_181_op1;
reg [31:0] main_signed_add_32_181;
reg [31:0] main_signed_add_32_182_op0;
reg [31:0] main_signed_add_32_182_op1;
reg [31:0] main_signed_add_32_182;
reg [31:0] main_signed_add_32_216_op0;
reg [31:0] main_signed_add_32_216_op1;
reg [31:0] main_signed_add_32_216;
reg [31:0] main_signed_add_32_217_op0;
reg [31:0] main_signed_add_32_217_op1;
reg [31:0] main_signed_add_32_217;
reg [31:0] main_signed_add_32_218_op0;
reg [31:0] main_signed_add_32_218_op1;
reg [31:0] main_signed_add_32_218;
reg [31:0] main_signed_add_32_219_op0;
reg [31:0] main_signed_add_32_219_op1;
reg [31:0] main_signed_add_32_219;
reg [31:0] main_signed_add_32_220_op0;
reg [31:0] main_signed_add_32_220_op1;
reg [31:0] main_signed_add_32_220;
reg [31:0] main_signed_add_32_221_op0;
reg [31:0] main_signed_add_32_221_op1;
reg [31:0] main_signed_add_32_221;
reg [31:0] main_signed_add_32_222_op0;
reg [31:0] main_signed_add_32_222_op1;
reg [31:0] main_signed_add_32_222;
reg [31:0] main_signed_add_32_223_op0;
reg [31:0] main_signed_add_32_223_op1;
reg [31:0] main_signed_add_32_223;
reg [31:0] main_signed_add_32_224_op0;
reg [31:0] main_signed_add_32_224_op1;
reg [31:0] main_signed_add_32_224;
reg [31:0] main_signed_add_32_225_op0;
reg [31:0] main_signed_add_32_225_op1;
reg [31:0] main_signed_add_32_225;
reg [31:0] main_signed_add_32_226_op0;
reg [31:0] main_signed_add_32_226_op1;
reg [31:0] main_signed_add_32_226;
reg [31:0] main_signed_add_32_227_op0;
reg [31:0] main_signed_add_32_227_op1;
reg [31:0] main_signed_add_32_227;
reg [31:0] main_signed_add_32_228_op0;
reg [31:0] main_signed_add_32_228_op1;
reg [31:0] main_signed_add_32_228;
reg [31:0] main_signed_add_32_229_op0;
reg [31:0] main_signed_add_32_229_op1;
reg [31:0] main_signed_add_32_229;
reg [31:0] main_signed_add_32_230_op0;
reg [31:0] main_signed_add_32_230_op1;
reg [31:0] main_signed_add_32_230;
reg [31:0] main_signed_add_32_231_op0;
reg [31:0] main_signed_add_32_231_op1;
reg [31:0] main_signed_add_32_231;
reg [31:0] main_signed_add_32_232_op0;
reg [31:0] main_signed_add_32_232_op1;
reg [31:0] main_signed_add_32_232;
reg [31:0] main_signed_add_32_233_op0;
reg [31:0] main_signed_add_32_233_op1;
reg [31:0] main_signed_add_32_233;
reg [31:0] main_signed_add_32_234_op0;
reg [31:0] main_signed_add_32_234_op1;
reg [31:0] main_signed_add_32_234;
reg [31:0] main_signed_add_32_235_op0;
reg [31:0] main_signed_add_32_235_op1;
reg [31:0] main_signed_add_32_235;
reg [31:0] main_signed_add_32_236_op0;
reg [31:0] main_signed_add_32_236_op1;
reg [31:0] main_signed_add_32_236;
reg [31:0] main_signed_add_32_237_op0;
reg [31:0] main_signed_add_32_237_op1;
reg [31:0] main_signed_add_32_237;
reg [31:0] main_signed_add_32_238_op0;
reg [31:0] main_signed_add_32_238_op1;
reg [31:0] main_signed_add_32_238;
reg [31:0] main_signed_add_32_239_op0;
reg [31:0] main_signed_add_32_239_op1;
reg [31:0] main_signed_add_32_239;
reg [31:0] main_signed_add_32_240_op0;
reg [31:0] main_signed_add_32_240_op1;
reg [31:0] main_signed_add_32_240;
reg [31:0] main_signed_add_32_241_op0;
reg [31:0] main_signed_add_32_241_op1;
reg [31:0] main_signed_add_32_241;
reg [31:0] main_signed_add_32_242_op0;
reg [31:0] main_signed_add_32_242_op1;
reg [31:0] main_signed_add_32_242;
reg [31:0] main_signed_add_32_243_op0;
reg [31:0] main_signed_add_32_243_op1;
reg [31:0] main_signed_add_32_243;
reg [31:0] main_signed_add_32_244_op0;
reg [31:0] main_signed_add_32_244_op1;
reg [31:0] main_signed_add_32_244;
reg [31:0] main_signed_add_32_245_op0;
reg [31:0] main_signed_add_32_245_op1;
reg [31:0] main_signed_add_32_245;
reg [31:0] main_signed_add_32_246_op0;
reg [31:0] main_signed_add_32_246_op1;
reg [31:0] main_signed_add_32_246;
reg [31:0] main_signed_add_32_247_op0;
reg [31:0] main_signed_add_32_247_op1;
reg [31:0] main_signed_add_32_247;
reg [31:0] main_signed_add_32_248_op0;
reg [31:0] main_signed_add_32_248_op1;
reg [31:0] main_signed_add_32_248;


/* Unsynthesizable Statements */
always @(posedge clk)
	if (!memory_controller_waitrequest) begin
	/* main: %469*/
	/*   %470 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([12 x i8]* @.str, i32 0, i32 0), i32 %.lcssa) #1*/
	if ((cur_state == LEGUP_F_main_BB__469_420)) begin
		$write("Result: %d\n", $signed(main_469_lcssa_reg));
		// to fix quartus warning
		if (reset == 1'b0 && ^(main_469_lcssa_reg) === 1'bX) finish <= 0;
	end
	/* main: %472*/
	/*   %473 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([14 x i8]* @.str1, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_F_main_BB__472_421)) begin
		$write("RESULT: PASS\n");
	end
	/* main: %474*/
	/*   %475 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([14 x i8]* @.str2, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_F_main_BB__474_422)) begin
		$write("RESULT: FAIL\n");
	end
end
always @(posedge clk) begin
if (reset == 1'b1)
	cur_state <= LEGUP_0;
else if (memory_controller_waitrequest == 1'd1)
	cur_state <= cur_state;
else
	cur_state <= next_state;
end

always @(*)
begin
next_state = cur_state;
case(cur_state)  // synthesis parallel_case  
LEGUP_0:
	if ((start == 1'd1))
		next_state = LEGUP_F_main_BB__0_1;
LEGUP_F_main_BB__0_1:
		next_state = LEGUP_F_main_BB__1_2;
LEGUP_F_main_BB__1_10:
	if ((main_1_exitcond6_reg == 1'd1))
		next_state = LEGUP_F_main_BB__6_11;
	else if ((main_1_exitcond6_reg == 1'd0))
		next_state = LEGUP_F_main_BB__1_2;
LEGUP_F_main_BB__1_2:
		next_state = LEGUP_F_main_BB__1_3;
LEGUP_F_main_BB__1_3:
		next_state = LEGUP_F_main_BB__1_4;
LEGUP_F_main_BB__1_4:
		next_state = LEGUP_F_main_BB__1_5;
LEGUP_F_main_BB__1_5:
		next_state = LEGUP_F_main_BB__1_6;
LEGUP_F_main_BB__1_6:
		next_state = LEGUP_F_main_BB__1_7;
LEGUP_F_main_BB__1_7:
		next_state = LEGUP_F_main_BB__1_8;
LEGUP_F_main_BB__1_8:
		next_state = LEGUP_F_main_BB__1_9;
LEGUP_F_main_BB__1_9:
		next_state = LEGUP_F_main_BB__1_10;
LEGUP_F_main_BB__393_398:
	if ((main_393_396 == 1'd1))
		next_state = LEGUP_F_main_BB_lrphi_399;
	else if ((main_393_396 == 1'd0))
		next_state = LEGUP_F_main_BB__crit_edgei_414;
LEGUP_F_main_BB__404_404:
		next_state = LEGUP_F_main_BB__404_405;
LEGUP_F_main_BB__404_405:
		next_state = LEGUP_F_main_BB__404_406;
LEGUP_F_main_BB__404_406:
		next_state = LEGUP_F_main_BB__404_407;
LEGUP_F_main_BB__404_407:
		next_state = LEGUP_F_main_BB__404_408;
LEGUP_F_main_BB__404_408:
		next_state = LEGUP_F_main_BB__404_409;
LEGUP_F_main_BB__404_409:
		next_state = LEGUP_F_main_BB__404_410;
LEGUP_F_main_BB__404_410:
		next_state = LEGUP_F_main_BB__404_411;
LEGUP_F_main_BB__404_411:
		next_state = LEGUP_F_main_BB__404_412;
LEGUP_F_main_BB__404_412:
		next_state = LEGUP_F_main_BB__404_413;
LEGUP_F_main_BB__404_413:
	if ((main_404_450_reg == 1'd1))
		next_state = LEGUP_F_main_BB__404_404;
	else if ((main_404_450_reg == 1'd0))
		next_state = LEGUP_F_main_BB__crit_edgei_414;
LEGUP_F_main_BB__469_420:
	if ((main_469_471 == 1'd1))
		next_state = LEGUP_F_main_BB__472_421;
	else if ((main_469_471 == 1'd0))
		next_state = LEGUP_F_main_BB__474_422;
LEGUP_F_main_BB__472_421:
		next_state = LEGUP_F_main_BB__476_423;
LEGUP_F_main_BB__474_422:
		next_state = LEGUP_F_main_BB__476_423;
LEGUP_F_main_BB__476_423:
		next_state = LEGUP_0;
LEGUP_F_main_BB__6_100:
		next_state = LEGUP_F_main_BB__6_101;
LEGUP_F_main_BB__6_101:
		next_state = LEGUP_F_main_BB__6_102;
LEGUP_F_main_BB__6_102:
		next_state = LEGUP_F_main_BB__6_103;
LEGUP_F_main_BB__6_103:
		next_state = LEGUP_F_main_BB__6_104;
LEGUP_F_main_BB__6_104:
		next_state = LEGUP_F_main_BB__6_105;
LEGUP_F_main_BB__6_105:
		next_state = LEGUP_F_main_BB__6_106;
LEGUP_F_main_BB__6_106:
		next_state = LEGUP_F_main_BB__6_107;
LEGUP_F_main_BB__6_107:
		next_state = LEGUP_F_main_BB__6_108;
LEGUP_F_main_BB__6_108:
		next_state = LEGUP_F_main_BB__6_109;
LEGUP_F_main_BB__6_109:
		next_state = LEGUP_F_main_BB__6_110;
LEGUP_F_main_BB__6_11:
		next_state = LEGUP_F_main_BB__6_12;
LEGUP_F_main_BB__6_110:
		next_state = LEGUP_F_main_BB__6_111;
LEGUP_F_main_BB__6_111:
		next_state = LEGUP_F_main_BB__6_112;
LEGUP_F_main_BB__6_112:
		next_state = LEGUP_F_main_BB__6_113;
LEGUP_F_main_BB__6_113:
		next_state = LEGUP_F_main_BB__6_114;
LEGUP_F_main_BB__6_114:
		next_state = LEGUP_F_main_BB__6_115;
LEGUP_F_main_BB__6_115:
		next_state = LEGUP_F_main_BB__6_116;
LEGUP_F_main_BB__6_116:
		next_state = LEGUP_F_main_BB__6_117;
LEGUP_F_main_BB__6_117:
		next_state = LEGUP_F_main_BB__6_118;
LEGUP_F_main_BB__6_118:
		next_state = LEGUP_F_main_BB__6_119;
LEGUP_F_main_BB__6_119:
		next_state = LEGUP_F_main_BB__6_120;
LEGUP_F_main_BB__6_12:
		next_state = LEGUP_F_main_BB__6_13;
LEGUP_F_main_BB__6_120:
		next_state = LEGUP_F_main_BB__6_121;
LEGUP_F_main_BB__6_121:
		next_state = LEGUP_F_main_BB__6_122;
LEGUP_F_main_BB__6_122:
		next_state = LEGUP_F_main_BB__6_123;
LEGUP_F_main_BB__6_123:
		next_state = LEGUP_F_main_BB__6_124;
LEGUP_F_main_BB__6_124:
		next_state = LEGUP_F_main_BB__6_125;
LEGUP_F_main_BB__6_125:
		next_state = LEGUP_F_main_BB__6_126;
LEGUP_F_main_BB__6_126:
		next_state = LEGUP_F_main_BB__6_127;
LEGUP_F_main_BB__6_127:
		next_state = LEGUP_F_main_BB__6_128;
LEGUP_F_main_BB__6_128:
		next_state = LEGUP_F_main_BB__6_129;
LEGUP_F_main_BB__6_129:
		next_state = LEGUP_F_main_BB__6_130;
LEGUP_F_main_BB__6_13:
		next_state = LEGUP_F_main_BB__6_14;
LEGUP_F_main_BB__6_130:
		next_state = LEGUP_F_main_BB__6_131;
LEGUP_F_main_BB__6_131:
		next_state = LEGUP_F_main_BB__6_132;
LEGUP_F_main_BB__6_132:
		next_state = LEGUP_F_main_BB__6_133;
LEGUP_F_main_BB__6_133:
		next_state = LEGUP_F_main_BB__6_134;
LEGUP_F_main_BB__6_134:
		next_state = LEGUP_F_main_BB__6_135;
LEGUP_F_main_BB__6_135:
		next_state = LEGUP_F_main_BB__6_136;
LEGUP_F_main_BB__6_136:
		next_state = LEGUP_F_main_BB__6_137;
LEGUP_F_main_BB__6_137:
		next_state = LEGUP_F_main_BB__6_138;
LEGUP_F_main_BB__6_138:
		next_state = LEGUP_F_main_BB__6_139;
LEGUP_F_main_BB__6_139:
		next_state = LEGUP_F_main_BB__6_140;
LEGUP_F_main_BB__6_14:
		next_state = LEGUP_F_main_BB__6_15;
LEGUP_F_main_BB__6_140:
		next_state = LEGUP_F_main_BB__6_141;
LEGUP_F_main_BB__6_141:
		next_state = LEGUP_F_main_BB__6_142;
LEGUP_F_main_BB__6_142:
		next_state = LEGUP_F_main_BB__6_143;
LEGUP_F_main_BB__6_143:
		next_state = LEGUP_F_main_BB__6_144;
LEGUP_F_main_BB__6_144:
		next_state = LEGUP_F_main_BB__6_145;
LEGUP_F_main_BB__6_145:
		next_state = LEGUP_F_main_BB__6_146;
LEGUP_F_main_BB__6_146:
		next_state = LEGUP_F_main_BB__6_147;
LEGUP_F_main_BB__6_147:
		next_state = LEGUP_F_main_BB__6_148;
LEGUP_F_main_BB__6_148:
		next_state = LEGUP_F_main_BB__6_149;
LEGUP_F_main_BB__6_149:
		next_state = LEGUP_F_main_BB__6_150;
LEGUP_F_main_BB__6_15:
		next_state = LEGUP_F_main_BB__6_16;
LEGUP_F_main_BB__6_150:
		next_state = LEGUP_F_main_BB__6_151;
LEGUP_F_main_BB__6_151:
		next_state = LEGUP_F_main_BB__6_152;
LEGUP_F_main_BB__6_152:
		next_state = LEGUP_F_main_BB__6_153;
LEGUP_F_main_BB__6_153:
		next_state = LEGUP_F_main_BB__6_154;
LEGUP_F_main_BB__6_154:
		next_state = LEGUP_F_main_BB__6_155;
LEGUP_F_main_BB__6_155:
		next_state = LEGUP_F_main_BB__6_156;
LEGUP_F_main_BB__6_156:
		next_state = LEGUP_F_main_BB__6_157;
LEGUP_F_main_BB__6_157:
		next_state = LEGUP_F_main_BB__6_158;
LEGUP_F_main_BB__6_158:
		next_state = LEGUP_F_main_BB__6_159;
LEGUP_F_main_BB__6_159:
		next_state = LEGUP_F_main_BB__6_160;
LEGUP_F_main_BB__6_16:
		next_state = LEGUP_F_main_BB__6_17;
LEGUP_F_main_BB__6_160:
		next_state = LEGUP_F_main_BB__6_161;
LEGUP_F_main_BB__6_161:
		next_state = LEGUP_F_main_BB__6_162;
LEGUP_F_main_BB__6_162:
		next_state = LEGUP_F_main_BB__6_163;
LEGUP_F_main_BB__6_163:
		next_state = LEGUP_F_main_BB__6_164;
LEGUP_F_main_BB__6_164:
		next_state = LEGUP_F_main_BB__6_165;
LEGUP_F_main_BB__6_165:
		next_state = LEGUP_F_main_BB__6_166;
LEGUP_F_main_BB__6_166:
		next_state = LEGUP_F_main_BB__6_167;
LEGUP_F_main_BB__6_167:
		next_state = LEGUP_F_main_BB__6_168;
LEGUP_F_main_BB__6_168:
		next_state = LEGUP_F_main_BB__6_169;
LEGUP_F_main_BB__6_169:
		next_state = LEGUP_F_main_BB__6_170;
LEGUP_F_main_BB__6_17:
		next_state = LEGUP_F_main_BB__6_18;
LEGUP_F_main_BB__6_170:
		next_state = LEGUP_F_main_BB__6_171;
LEGUP_F_main_BB__6_171:
		next_state = LEGUP_F_main_BB__6_172;
LEGUP_F_main_BB__6_172:
		next_state = LEGUP_F_main_BB__6_173;
LEGUP_F_main_BB__6_173:
		next_state = LEGUP_F_main_BB__6_174;
LEGUP_F_main_BB__6_174:
		next_state = LEGUP_F_main_BB__6_175;
LEGUP_F_main_BB__6_175:
		next_state = LEGUP_F_main_BB__6_176;
LEGUP_F_main_BB__6_176:
		next_state = LEGUP_F_main_BB__6_177;
LEGUP_F_main_BB__6_177:
		next_state = LEGUP_F_main_BB__6_178;
LEGUP_F_main_BB__6_178:
		next_state = LEGUP_F_main_BB__6_179;
LEGUP_F_main_BB__6_179:
		next_state = LEGUP_F_main_BB__6_180;
LEGUP_F_main_BB__6_18:
		next_state = LEGUP_F_main_BB__6_19;
LEGUP_F_main_BB__6_180:
		next_state = LEGUP_F_main_BB__6_181;
LEGUP_F_main_BB__6_181:
		next_state = LEGUP_F_main_BB__6_182;
LEGUP_F_main_BB__6_182:
		next_state = LEGUP_F_main_BB__6_183;
LEGUP_F_main_BB__6_183:
		next_state = LEGUP_F_main_BB__6_184;
LEGUP_F_main_BB__6_184:
		next_state = LEGUP_F_main_BB__6_185;
LEGUP_F_main_BB__6_185:
		next_state = LEGUP_F_main_BB__6_186;
LEGUP_F_main_BB__6_186:
		next_state = LEGUP_F_main_BB__6_187;
LEGUP_F_main_BB__6_187:
		next_state = LEGUP_F_main_BB__6_188;
LEGUP_F_main_BB__6_188:
		next_state = LEGUP_F_main_BB__6_189;
LEGUP_F_main_BB__6_189:
		next_state = LEGUP_F_main_BB__6_190;
LEGUP_F_main_BB__6_19:
		next_state = LEGUP_F_main_BB__6_20;
LEGUP_F_main_BB__6_190:
		next_state = LEGUP_F_main_BB__6_191;
LEGUP_F_main_BB__6_191:
		next_state = LEGUP_F_main_BB__6_192;
LEGUP_F_main_BB__6_192:
		next_state = LEGUP_F_main_BB__6_193;
LEGUP_F_main_BB__6_193:
		next_state = LEGUP_F_main_BB__6_194;
LEGUP_F_main_BB__6_194:
		next_state = LEGUP_F_main_BB__6_195;
LEGUP_F_main_BB__6_195:
		next_state = LEGUP_F_main_BB__6_196;
LEGUP_F_main_BB__6_196:
		next_state = LEGUP_F_main_BB__6_197;
LEGUP_F_main_BB__6_197:
		next_state = LEGUP_F_main_BB__6_198;
LEGUP_F_main_BB__6_198:
		next_state = LEGUP_F_main_BB__6_199;
LEGUP_F_main_BB__6_199:
		next_state = LEGUP_F_main_BB__6_200;
LEGUP_F_main_BB__6_20:
		next_state = LEGUP_F_main_BB__6_21;
LEGUP_F_main_BB__6_200:
		next_state = LEGUP_F_main_BB__6_201;
LEGUP_F_main_BB__6_201:
		next_state = LEGUP_F_main_BB__6_202;
LEGUP_F_main_BB__6_202:
		next_state = LEGUP_F_main_BB__6_203;
LEGUP_F_main_BB__6_203:
		next_state = LEGUP_F_main_BB__6_204;
LEGUP_F_main_BB__6_204:
		next_state = LEGUP_F_main_BB__6_205;
LEGUP_F_main_BB__6_205:
		next_state = LEGUP_F_main_BB__6_206;
LEGUP_F_main_BB__6_206:
		next_state = LEGUP_F_main_BB__6_207;
LEGUP_F_main_BB__6_207:
		next_state = LEGUP_F_main_BB__6_208;
LEGUP_F_main_BB__6_208:
		next_state = LEGUP_F_main_BB__6_209;
LEGUP_F_main_BB__6_209:
		next_state = LEGUP_F_main_BB__6_210;
LEGUP_F_main_BB__6_21:
		next_state = LEGUP_F_main_BB__6_22;
LEGUP_F_main_BB__6_210:
		next_state = LEGUP_F_main_BB__6_211;
LEGUP_F_main_BB__6_211:
		next_state = LEGUP_F_main_BB__6_212;
LEGUP_F_main_BB__6_212:
		next_state = LEGUP_F_main_BB__6_213;
LEGUP_F_main_BB__6_213:
		next_state = LEGUP_F_main_BB__6_214;
LEGUP_F_main_BB__6_214:
		next_state = LEGUP_F_main_BB__6_215;
LEGUP_F_main_BB__6_215:
		next_state = LEGUP_F_main_BB__6_216;
LEGUP_F_main_BB__6_216:
		next_state = LEGUP_F_main_BB__6_217;
LEGUP_F_main_BB__6_217:
		next_state = LEGUP_F_main_BB__6_218;
LEGUP_F_main_BB__6_218:
		next_state = LEGUP_F_main_BB__6_219;
LEGUP_F_main_BB__6_219:
		next_state = LEGUP_F_main_BB__6_220;
LEGUP_F_main_BB__6_22:
		next_state = LEGUP_F_main_BB__6_23;
LEGUP_F_main_BB__6_220:
		next_state = LEGUP_F_main_BB__6_221;
LEGUP_F_main_BB__6_221:
		next_state = LEGUP_F_main_BB__6_222;
LEGUP_F_main_BB__6_222:
		next_state = LEGUP_F_main_BB__6_223;
LEGUP_F_main_BB__6_223:
		next_state = LEGUP_F_main_BB__6_224;
LEGUP_F_main_BB__6_224:
		next_state = LEGUP_F_main_BB__6_225;
LEGUP_F_main_BB__6_225:
		next_state = LEGUP_F_main_BB__6_226;
LEGUP_F_main_BB__6_226:
		next_state = LEGUP_F_main_BB__6_227;
LEGUP_F_main_BB__6_227:
		next_state = LEGUP_F_main_BB__6_228;
LEGUP_F_main_BB__6_228:
		next_state = LEGUP_F_main_BB__6_229;
LEGUP_F_main_BB__6_229:
		next_state = LEGUP_F_main_BB__6_230;
LEGUP_F_main_BB__6_23:
		next_state = LEGUP_F_main_BB__6_24;
LEGUP_F_main_BB__6_230:
		next_state = LEGUP_F_main_BB__6_231;
LEGUP_F_main_BB__6_231:
		next_state = LEGUP_F_main_BB__6_232;
LEGUP_F_main_BB__6_232:
		next_state = LEGUP_F_main_BB__6_233;
LEGUP_F_main_BB__6_233:
		next_state = LEGUP_F_main_BB__6_234;
LEGUP_F_main_BB__6_234:
		next_state = LEGUP_F_main_BB__6_235;
LEGUP_F_main_BB__6_235:
		next_state = LEGUP_F_main_BB__6_236;
LEGUP_F_main_BB__6_236:
		next_state = LEGUP_F_main_BB__6_237;
LEGUP_F_main_BB__6_237:
		next_state = LEGUP_F_main_BB__6_238;
LEGUP_F_main_BB__6_238:
		next_state = LEGUP_F_main_BB__6_239;
LEGUP_F_main_BB__6_239:
		next_state = LEGUP_F_main_BB__6_240;
LEGUP_F_main_BB__6_24:
		next_state = LEGUP_F_main_BB__6_25;
LEGUP_F_main_BB__6_240:
		next_state = LEGUP_F_main_BB__6_241;
LEGUP_F_main_BB__6_241:
		next_state = LEGUP_F_main_BB__6_242;
LEGUP_F_main_BB__6_242:
		next_state = LEGUP_F_main_BB__6_243;
LEGUP_F_main_BB__6_243:
		next_state = LEGUP_F_main_BB__6_244;
LEGUP_F_main_BB__6_244:
		next_state = LEGUP_F_main_BB__6_245;
LEGUP_F_main_BB__6_245:
		next_state = LEGUP_F_main_BB__6_246;
LEGUP_F_main_BB__6_246:
		next_state = LEGUP_F_main_BB__6_247;
LEGUP_F_main_BB__6_247:
		next_state = LEGUP_F_main_BB__6_248;
LEGUP_F_main_BB__6_248:
		next_state = LEGUP_F_main_BB__6_249;
LEGUP_F_main_BB__6_249:
		next_state = LEGUP_F_main_BB__6_250;
LEGUP_F_main_BB__6_25:
		next_state = LEGUP_F_main_BB__6_26;
LEGUP_F_main_BB__6_250:
		next_state = LEGUP_F_main_BB__6_251;
LEGUP_F_main_BB__6_251:
		next_state = LEGUP_F_main_BB__6_252;
LEGUP_F_main_BB__6_252:
		next_state = LEGUP_F_main_BB__6_253;
LEGUP_F_main_BB__6_253:
		next_state = LEGUP_F_main_BB__6_254;
LEGUP_F_main_BB__6_254:
		next_state = LEGUP_F_main_BB__6_255;
LEGUP_F_main_BB__6_255:
		next_state = LEGUP_F_main_BB__6_256;
LEGUP_F_main_BB__6_256:
		next_state = LEGUP_F_main_BB__6_257;
LEGUP_F_main_BB__6_257:
		next_state = LEGUP_F_main_BB__6_258;
LEGUP_F_main_BB__6_258:
		next_state = LEGUP_F_main_BB__6_259;
LEGUP_F_main_BB__6_259:
		next_state = LEGUP_F_main_BB__6_260;
LEGUP_F_main_BB__6_26:
		next_state = LEGUP_F_main_BB__6_27;
LEGUP_F_main_BB__6_260:
		next_state = LEGUP_F_main_BB__6_261;
LEGUP_F_main_BB__6_261:
		next_state = LEGUP_F_main_BB__6_262;
LEGUP_F_main_BB__6_262:
		next_state = LEGUP_F_main_BB__6_263;
LEGUP_F_main_BB__6_263:
		next_state = LEGUP_F_main_BB__6_264;
LEGUP_F_main_BB__6_264:
		next_state = LEGUP_F_main_BB__6_265;
LEGUP_F_main_BB__6_265:
		next_state = LEGUP_F_main_BB__6_266;
LEGUP_F_main_BB__6_266:
		next_state = LEGUP_F_main_BB__6_267;
LEGUP_F_main_BB__6_267:
		next_state = LEGUP_F_main_BB__6_268;
LEGUP_F_main_BB__6_268:
		next_state = LEGUP_F_main_BB__6_269;
LEGUP_F_main_BB__6_269:
		next_state = LEGUP_F_main_BB__6_270;
LEGUP_F_main_BB__6_27:
		next_state = LEGUP_F_main_BB__6_28;
LEGUP_F_main_BB__6_270:
		next_state = LEGUP_F_main_BB__6_271;
LEGUP_F_main_BB__6_271:
		next_state = LEGUP_F_main_BB__6_272;
LEGUP_F_main_BB__6_272:
		next_state = LEGUP_F_main_BB__6_273;
LEGUP_F_main_BB__6_273:
		next_state = LEGUP_F_main_BB__6_274;
LEGUP_F_main_BB__6_274:
		next_state = LEGUP_F_main_BB__6_275;
LEGUP_F_main_BB__6_275:
		next_state = LEGUP_F_main_BB__6_276;
LEGUP_F_main_BB__6_276:
		next_state = LEGUP_F_main_BB__6_277;
LEGUP_F_main_BB__6_277:
		next_state = LEGUP_F_main_BB__6_278;
LEGUP_F_main_BB__6_278:
		next_state = LEGUP_F_main_BB__6_279;
LEGUP_F_main_BB__6_279:
		next_state = LEGUP_F_main_BB__6_280;
LEGUP_F_main_BB__6_28:
		next_state = LEGUP_F_main_BB__6_29;
LEGUP_F_main_BB__6_280:
		next_state = LEGUP_F_main_BB__6_281;
LEGUP_F_main_BB__6_281:
		next_state = LEGUP_F_main_BB__6_282;
LEGUP_F_main_BB__6_282:
		next_state = LEGUP_F_main_BB__6_283;
LEGUP_F_main_BB__6_283:
		next_state = LEGUP_F_main_BB__6_284;
LEGUP_F_main_BB__6_284:
		next_state = LEGUP_F_main_BB__6_285;
LEGUP_F_main_BB__6_285:
		next_state = LEGUP_F_main_BB__6_286;
LEGUP_F_main_BB__6_286:
		next_state = LEGUP_F_main_BB__6_287;
LEGUP_F_main_BB__6_287:
		next_state = LEGUP_F_main_BB__6_288;
LEGUP_F_main_BB__6_288:
		next_state = LEGUP_F_main_BB__6_289;
LEGUP_F_main_BB__6_289:
		next_state = LEGUP_F_main_BB__6_290;
LEGUP_F_main_BB__6_29:
		next_state = LEGUP_F_main_BB__6_30;
LEGUP_F_main_BB__6_290:
		next_state = LEGUP_F_main_BB__6_291;
LEGUP_F_main_BB__6_291:
		next_state = LEGUP_F_main_BB__6_292;
LEGUP_F_main_BB__6_292:
		next_state = LEGUP_F_main_BB__6_293;
LEGUP_F_main_BB__6_293:
		next_state = LEGUP_F_main_BB__6_294;
LEGUP_F_main_BB__6_294:
		next_state = LEGUP_F_main_BB__6_295;
LEGUP_F_main_BB__6_295:
		next_state = LEGUP_F_main_BB__6_296;
LEGUP_F_main_BB__6_296:
		next_state = LEGUP_F_main_BB__6_297;
LEGUP_F_main_BB__6_297:
		next_state = LEGUP_F_main_BB__6_298;
LEGUP_F_main_BB__6_298:
		next_state = LEGUP_F_main_BB__6_299;
LEGUP_F_main_BB__6_299:
		next_state = LEGUP_F_main_BB__6_300;
LEGUP_F_main_BB__6_30:
		next_state = LEGUP_F_main_BB__6_31;
LEGUP_F_main_BB__6_300:
		next_state = LEGUP_F_main_BB__6_301;
LEGUP_F_main_BB__6_301:
		next_state = LEGUP_F_main_BB__6_302;
LEGUP_F_main_BB__6_302:
		next_state = LEGUP_F_main_BB__6_303;
LEGUP_F_main_BB__6_303:
		next_state = LEGUP_F_main_BB__6_304;
LEGUP_F_main_BB__6_304:
		next_state = LEGUP_F_main_BB__6_305;
LEGUP_F_main_BB__6_305:
		next_state = LEGUP_F_main_BB__6_306;
LEGUP_F_main_BB__6_306:
		next_state = LEGUP_F_main_BB__6_307;
LEGUP_F_main_BB__6_307:
		next_state = LEGUP_F_main_BB__6_308;
LEGUP_F_main_BB__6_308:
		next_state = LEGUP_F_main_BB__6_309;
LEGUP_F_main_BB__6_309:
		next_state = LEGUP_F_main_BB__6_310;
LEGUP_F_main_BB__6_31:
		next_state = LEGUP_F_main_BB__6_32;
LEGUP_F_main_BB__6_310:
		next_state = LEGUP_F_main_BB__6_311;
LEGUP_F_main_BB__6_311:
		next_state = LEGUP_F_main_BB__6_312;
LEGUP_F_main_BB__6_312:
		next_state = LEGUP_F_main_BB__6_313;
LEGUP_F_main_BB__6_313:
		next_state = LEGUP_F_main_BB__6_314;
LEGUP_F_main_BB__6_314:
		next_state = LEGUP_F_main_BB__6_315;
LEGUP_F_main_BB__6_315:
		next_state = LEGUP_F_main_BB__6_316;
LEGUP_F_main_BB__6_316:
		next_state = LEGUP_F_main_BB__6_317;
LEGUP_F_main_BB__6_317:
		next_state = LEGUP_F_main_BB__6_318;
LEGUP_F_main_BB__6_318:
		next_state = LEGUP_F_main_BB__6_319;
LEGUP_F_main_BB__6_319:
		next_state = LEGUP_F_main_BB__6_320;
LEGUP_F_main_BB__6_32:
		next_state = LEGUP_F_main_BB__6_33;
LEGUP_F_main_BB__6_320:
		next_state = LEGUP_F_main_BB__6_321;
LEGUP_F_main_BB__6_321:
		next_state = LEGUP_F_main_BB__6_322;
LEGUP_F_main_BB__6_322:
		next_state = LEGUP_F_main_BB__6_323;
LEGUP_F_main_BB__6_323:
		next_state = LEGUP_F_main_BB__6_324;
LEGUP_F_main_BB__6_324:
		next_state = LEGUP_F_main_BB__6_325;
LEGUP_F_main_BB__6_325:
		next_state = LEGUP_F_main_BB__6_326;
LEGUP_F_main_BB__6_326:
		next_state = LEGUP_F_main_BB__6_327;
LEGUP_F_main_BB__6_327:
		next_state = LEGUP_F_main_BB__6_328;
LEGUP_F_main_BB__6_328:
		next_state = LEGUP_F_main_BB__6_329;
LEGUP_F_main_BB__6_329:
		next_state = LEGUP_F_main_BB__6_330;
LEGUP_F_main_BB__6_33:
		next_state = LEGUP_F_main_BB__6_34;
LEGUP_F_main_BB__6_330:
		next_state = LEGUP_F_main_BB__6_331;
LEGUP_F_main_BB__6_331:
		next_state = LEGUP_F_main_BB__6_332;
LEGUP_F_main_BB__6_332:
		next_state = LEGUP_F_main_BB__6_333;
LEGUP_F_main_BB__6_333:
		next_state = LEGUP_F_main_BB__6_334;
LEGUP_F_main_BB__6_334:
		next_state = LEGUP_F_main_BB__6_335;
LEGUP_F_main_BB__6_335:
		next_state = LEGUP_F_main_BB__6_336;
LEGUP_F_main_BB__6_336:
		next_state = LEGUP_F_main_BB__6_337;
LEGUP_F_main_BB__6_337:
		next_state = LEGUP_F_main_BB__6_338;
LEGUP_F_main_BB__6_338:
		next_state = LEGUP_F_main_BB__6_339;
LEGUP_F_main_BB__6_339:
		next_state = LEGUP_F_main_BB__6_340;
LEGUP_F_main_BB__6_34:
		next_state = LEGUP_F_main_BB__6_35;
LEGUP_F_main_BB__6_340:
		next_state = LEGUP_F_main_BB__6_341;
LEGUP_F_main_BB__6_341:
		next_state = LEGUP_F_main_BB__6_342;
LEGUP_F_main_BB__6_342:
		next_state = LEGUP_F_main_BB__6_343;
LEGUP_F_main_BB__6_343:
		next_state = LEGUP_F_main_BB__6_344;
LEGUP_F_main_BB__6_344:
		next_state = LEGUP_F_main_BB__6_345;
LEGUP_F_main_BB__6_345:
		next_state = LEGUP_F_main_BB__6_346;
LEGUP_F_main_BB__6_346:
		next_state = LEGUP_F_main_BB__6_347;
LEGUP_F_main_BB__6_347:
		next_state = LEGUP_F_main_BB__6_348;
LEGUP_F_main_BB__6_348:
		next_state = LEGUP_F_main_BB__6_349;
LEGUP_F_main_BB__6_349:
		next_state = LEGUP_F_main_BB__6_350;
LEGUP_F_main_BB__6_35:
		next_state = LEGUP_F_main_BB__6_36;
LEGUP_F_main_BB__6_350:
		next_state = LEGUP_F_main_BB__6_351;
LEGUP_F_main_BB__6_351:
		next_state = LEGUP_F_main_BB__6_352;
LEGUP_F_main_BB__6_352:
		next_state = LEGUP_F_main_BB__6_353;
LEGUP_F_main_BB__6_353:
		next_state = LEGUP_F_main_BB__6_354;
LEGUP_F_main_BB__6_354:
		next_state = LEGUP_F_main_BB__6_355;
LEGUP_F_main_BB__6_355:
		next_state = LEGUP_F_main_BB__6_356;
LEGUP_F_main_BB__6_356:
		next_state = LEGUP_F_main_BB__6_357;
LEGUP_F_main_BB__6_357:
		next_state = LEGUP_F_main_BB__6_358;
LEGUP_F_main_BB__6_358:
		next_state = LEGUP_F_main_BB__6_359;
LEGUP_F_main_BB__6_359:
		next_state = LEGUP_F_main_BB__6_360;
LEGUP_F_main_BB__6_36:
		next_state = LEGUP_F_main_BB__6_37;
LEGUP_F_main_BB__6_360:
		next_state = LEGUP_F_main_BB__6_361;
LEGUP_F_main_BB__6_361:
		next_state = LEGUP_F_main_BB__6_362;
LEGUP_F_main_BB__6_362:
		next_state = LEGUP_F_main_BB__6_363;
LEGUP_F_main_BB__6_363:
		next_state = LEGUP_F_main_BB__6_364;
LEGUP_F_main_BB__6_364:
		next_state = LEGUP_F_main_BB__6_365;
LEGUP_F_main_BB__6_365:
		next_state = LEGUP_F_main_BB__6_366;
LEGUP_F_main_BB__6_366:
		next_state = LEGUP_F_main_BB__6_367;
LEGUP_F_main_BB__6_367:
		next_state = LEGUP_F_main_BB__6_368;
LEGUP_F_main_BB__6_368:
		next_state = LEGUP_F_main_BB__6_369;
LEGUP_F_main_BB__6_369:
		next_state = LEGUP_F_main_BB__6_370;
LEGUP_F_main_BB__6_37:
		next_state = LEGUP_F_main_BB__6_38;
LEGUP_F_main_BB__6_370:
		next_state = LEGUP_F_main_BB__6_371;
LEGUP_F_main_BB__6_371:
		next_state = LEGUP_F_main_BB__6_372;
LEGUP_F_main_BB__6_372:
		next_state = LEGUP_F_main_BB__6_373;
LEGUP_F_main_BB__6_373:
		next_state = LEGUP_F_main_BB__6_374;
LEGUP_F_main_BB__6_374:
		next_state = LEGUP_F_main_BB__6_375;
LEGUP_F_main_BB__6_375:
		next_state = LEGUP_F_main_BB__6_376;
LEGUP_F_main_BB__6_376:
		next_state = LEGUP_F_main_BB__6_377;
LEGUP_F_main_BB__6_377:
		next_state = LEGUP_F_main_BB__6_378;
LEGUP_F_main_BB__6_378:
		next_state = LEGUP_F_main_BB__6_379;
LEGUP_F_main_BB__6_379:
		next_state = LEGUP_F_main_BB__6_380;
LEGUP_F_main_BB__6_38:
		next_state = LEGUP_F_main_BB__6_39;
LEGUP_F_main_BB__6_380:
		next_state = LEGUP_F_main_BB__6_381;
LEGUP_F_main_BB__6_381:
		next_state = LEGUP_F_main_BB__6_382;
LEGUP_F_main_BB__6_382:
		next_state = LEGUP_F_main_BB__6_383;
LEGUP_F_main_BB__6_383:
		next_state = LEGUP_F_main_BB__6_384;
LEGUP_F_main_BB__6_384:
		next_state = LEGUP_F_main_BB__6_385;
LEGUP_F_main_BB__6_385:
		next_state = LEGUP_F_main_BB__6_386;
LEGUP_F_main_BB__6_386:
		next_state = LEGUP_F_main_BB__6_387;
LEGUP_F_main_BB__6_387:
		next_state = LEGUP_F_main_BB__6_388;
LEGUP_F_main_BB__6_388:
		next_state = LEGUP_F_main_BB__6_389;
LEGUP_F_main_BB__6_389:
		next_state = LEGUP_F_main_BB__6_390;
LEGUP_F_main_BB__6_39:
		next_state = LEGUP_F_main_BB__6_40;
LEGUP_F_main_BB__6_390:
		next_state = LEGUP_F_main_BB__6_391;
LEGUP_F_main_BB__6_391:
		next_state = LEGUP_F_main_BB__6_392;
LEGUP_F_main_BB__6_392:
		next_state = LEGUP_F_main_BB__6_393;
LEGUP_F_main_BB__6_393:
		next_state = LEGUP_F_main_BB__6_394;
LEGUP_F_main_BB__6_394:
		next_state = LEGUP_F_main_BB__6_395;
LEGUP_F_main_BB__6_395:
		next_state = LEGUP_F_main_BB_preheaderi_396;
LEGUP_F_main_BB__6_40:
		next_state = LEGUP_F_main_BB__6_41;
LEGUP_F_main_BB__6_41:
		next_state = LEGUP_F_main_BB__6_42;
LEGUP_F_main_BB__6_42:
		next_state = LEGUP_F_main_BB__6_43;
LEGUP_F_main_BB__6_43:
		next_state = LEGUP_F_main_BB__6_44;
LEGUP_F_main_BB__6_44:
		next_state = LEGUP_F_main_BB__6_45;
LEGUP_F_main_BB__6_45:
		next_state = LEGUP_F_main_BB__6_46;
LEGUP_F_main_BB__6_46:
		next_state = LEGUP_F_main_BB__6_47;
LEGUP_F_main_BB__6_47:
		next_state = LEGUP_F_main_BB__6_48;
LEGUP_F_main_BB__6_48:
		next_state = LEGUP_F_main_BB__6_49;
LEGUP_F_main_BB__6_49:
		next_state = LEGUP_F_main_BB__6_50;
LEGUP_F_main_BB__6_50:
		next_state = LEGUP_F_main_BB__6_51;
LEGUP_F_main_BB__6_51:
		next_state = LEGUP_F_main_BB__6_52;
LEGUP_F_main_BB__6_52:
		next_state = LEGUP_F_main_BB__6_53;
LEGUP_F_main_BB__6_53:
		next_state = LEGUP_F_main_BB__6_54;
LEGUP_F_main_BB__6_54:
		next_state = LEGUP_F_main_BB__6_55;
LEGUP_F_main_BB__6_55:
		next_state = LEGUP_F_main_BB__6_56;
LEGUP_F_main_BB__6_56:
		next_state = LEGUP_F_main_BB__6_57;
LEGUP_F_main_BB__6_57:
		next_state = LEGUP_F_main_BB__6_58;
LEGUP_F_main_BB__6_58:
		next_state = LEGUP_F_main_BB__6_59;
LEGUP_F_main_BB__6_59:
		next_state = LEGUP_F_main_BB__6_60;
LEGUP_F_main_BB__6_60:
		next_state = LEGUP_F_main_BB__6_61;
LEGUP_F_main_BB__6_61:
		next_state = LEGUP_F_main_BB__6_62;
LEGUP_F_main_BB__6_62:
		next_state = LEGUP_F_main_BB__6_63;
LEGUP_F_main_BB__6_63:
		next_state = LEGUP_F_main_BB__6_64;
LEGUP_F_main_BB__6_64:
		next_state = LEGUP_F_main_BB__6_65;
LEGUP_F_main_BB__6_65:
		next_state = LEGUP_F_main_BB__6_66;
LEGUP_F_main_BB__6_66:
		next_state = LEGUP_F_main_BB__6_67;
LEGUP_F_main_BB__6_67:
		next_state = LEGUP_F_main_BB__6_68;
LEGUP_F_main_BB__6_68:
		next_state = LEGUP_F_main_BB__6_69;
LEGUP_F_main_BB__6_69:
		next_state = LEGUP_F_main_BB__6_70;
LEGUP_F_main_BB__6_70:
		next_state = LEGUP_F_main_BB__6_71;
LEGUP_F_main_BB__6_71:
		next_state = LEGUP_F_main_BB__6_72;
LEGUP_F_main_BB__6_72:
		next_state = LEGUP_F_main_BB__6_73;
LEGUP_F_main_BB__6_73:
		next_state = LEGUP_F_main_BB__6_74;
LEGUP_F_main_BB__6_74:
		next_state = LEGUP_F_main_BB__6_75;
LEGUP_F_main_BB__6_75:
		next_state = LEGUP_F_main_BB__6_76;
LEGUP_F_main_BB__6_76:
		next_state = LEGUP_F_main_BB__6_77;
LEGUP_F_main_BB__6_77:
		next_state = LEGUP_F_main_BB__6_78;
LEGUP_F_main_BB__6_78:
		next_state = LEGUP_F_main_BB__6_79;
LEGUP_F_main_BB__6_79:
		next_state = LEGUP_F_main_BB__6_80;
LEGUP_F_main_BB__6_80:
		next_state = LEGUP_F_main_BB__6_81;
LEGUP_F_main_BB__6_81:
		next_state = LEGUP_F_main_BB__6_82;
LEGUP_F_main_BB__6_82:
		next_state = LEGUP_F_main_BB__6_83;
LEGUP_F_main_BB__6_83:
		next_state = LEGUP_F_main_BB__6_84;
LEGUP_F_main_BB__6_84:
		next_state = LEGUP_F_main_BB__6_85;
LEGUP_F_main_BB__6_85:
		next_state = LEGUP_F_main_BB__6_86;
LEGUP_F_main_BB__6_86:
		next_state = LEGUP_F_main_BB__6_87;
LEGUP_F_main_BB__6_87:
		next_state = LEGUP_F_main_BB__6_88;
LEGUP_F_main_BB__6_88:
		next_state = LEGUP_F_main_BB__6_89;
LEGUP_F_main_BB__6_89:
		next_state = LEGUP_F_main_BB__6_90;
LEGUP_F_main_BB__6_90:
		next_state = LEGUP_F_main_BB__6_91;
LEGUP_F_main_BB__6_91:
		next_state = LEGUP_F_main_BB__6_92;
LEGUP_F_main_BB__6_92:
		next_state = LEGUP_F_main_BB__6_93;
LEGUP_F_main_BB__6_93:
		next_state = LEGUP_F_main_BB__6_94;
LEGUP_F_main_BB__6_94:
		next_state = LEGUP_F_main_BB__6_95;
LEGUP_F_main_BB__6_95:
		next_state = LEGUP_F_main_BB__6_96;
LEGUP_F_main_BB__6_96:
		next_state = LEGUP_F_main_BB__6_97;
LEGUP_F_main_BB__6_97:
		next_state = LEGUP_F_main_BB__6_98;
LEGUP_F_main_BB__6_98:
		next_state = LEGUP_F_main_BB__6_99;
LEGUP_F_main_BB__6_99:
		next_state = LEGUP_F_main_BB__6_100;
LEGUP_F_main_BB__crit_edge6i_415:
	if ((main__crit_edge6i_454 == 1'd1))
		next_state = LEGUP_F_main_BB_preheaderi_396;
	else if ((main__crit_edge6i_454 == 1'd0))
		next_state = LEGUP_F_main_BB_fftexit_416;
LEGUP_F_main_BB__crit_edgei_414:
	if ((main__crit_edgei_453 == 1'd1))
		next_state = LEGUP_F_main_BB__393_398;
	else if ((main__crit_edgei_453 == 1'd0))
		next_state = LEGUP_F_main_BB__crit_edge6i_415;
LEGUP_F_main_BB_fftexit_416:
		next_state = LEGUP_F_main_BB_fftexit_417;
LEGUP_F_main_BB_fftexit_417:
		next_state = LEGUP_F_main_BB_fftexit_418;
LEGUP_F_main_BB_fftexit_418:
		next_state = LEGUP_F_main_BB_fftexit_419;
LEGUP_F_main_BB_fftexit_419:
	if ((main_fftexit_exitcond_reg == 1'd1))
		next_state = LEGUP_F_main_BB__469_420;
	else if ((main_fftexit_exitcond_reg == 1'd0))
		next_state = LEGUP_F_main_BB_fftexit_416;
LEGUP_F_main_BB_lrph5i_397:
		next_state = LEGUP_F_main_BB__393_398;
LEGUP_F_main_BB_lrphi_399:
		next_state = LEGUP_F_main_BB_lrphi_400;
LEGUP_F_main_BB_lrphi_400:
		next_state = LEGUP_F_main_BB_lrphi_401;
LEGUP_F_main_BB_lrphi_401:
		next_state = LEGUP_F_main_BB_lrphi_402;
LEGUP_F_main_BB_lrphi_402:
		next_state = LEGUP_F_main_BB_lrphi_403;
LEGUP_F_main_BB_lrphi_403:
		next_state = LEGUP_F_main_BB__404_404;
LEGUP_F_main_BB_preheaderi_396:
	if ((main_preheaderi_391 == 1'd1))
		next_state = LEGUP_F_main_BB_lrph5i_397;
	else if ((main_preheaderi_391 == 1'd0))
		next_state = LEGUP_F_main_BB__crit_edge6i_415;
default:
	next_state = cur_state;
endcase

end
always @(*) begin
	/* main: %1*/
	/*   %indvars.iv4 = phi i32 [ 0, %0 ], [ %indvars.iv.next5, %1 ]*/
	if (((cur_state == LEGUP_F_main_BB__0_1) & (memory_controller_waitrequest == 1'd0))) begin
		main_1_indvarsiv4 = 32'd0;
	end
	/* main: %1*/
	/*   %indvars.iv4 = phi i32 [ 0, %0 ], [ %indvars.iv.next5, %1 ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__1_10) & (memory_controller_waitrequest == 1'd0)) & (main_1_exitcond6_reg == 1'd0))) */ begin
		main_1_indvarsiv4 = main_1_indvarsivnext5_reg;
	end
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %indvars.iv4 = phi i32 [ 0, %0 ], [ %indvars.iv.next5, %1 ]*/
	if (((cur_state == LEGUP_F_main_BB__0_1) & (memory_controller_waitrequest == 1'd0))) begin
		main_1_indvarsiv4_reg <= main_1_indvarsiv4;
		if (start == 1'b0 && ^(main_1_indvarsiv4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_indvarsiv4_reg"); $finish; end
	end
	/* main: %1*/
	/*   %indvars.iv4 = phi i32 [ 0, %0 ], [ %indvars.iv.next5, %1 ]*/
	if ((((cur_state == LEGUP_F_main_BB__1_10) & (memory_controller_waitrequest == 1'd0)) & (main_1_exitcond6_reg == 1'd0))) begin
		main_1_indvarsiv4_reg <= main_1_indvarsiv4;
		if (start == 1'b0 && ^(main_1_indvarsiv4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_indvarsiv4_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %input_temp.0.input_temp.0. = load volatile i16* %input_temp, align 2*/
		main_1_input_temp0input_temp0 = memory_controller_out_b[15:0];
end
always @(*) begin
	/* main: %1*/
	/*   %gep_int = ptrtoint [64 x i16]* %Imag to i32*/
if (reset) begin main_1_gep_int = 0; end
		main_1_gep_int = `TAG_main_0_Imag_a;
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %gep_int = ptrtoint [64 x i16]* %Imag to i32*/
	if ((cur_state == LEGUP_F_main_BB__1_2)) begin
		main_1_gep_int_reg <= main_1_gep_int;
		if (start == 1'b0 && ^(main_1_gep_int) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_gep_int_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %gep_array = mul i32 %indvars.iv4, 2*/
		main_1_gep_array = (main_1_indvarsiv4_reg * 32'd2);
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %gep_array = mul i32 %indvars.iv4, 2*/
	if ((cur_state == LEGUP_F_main_BB__1_2)) begin
		main_1_gep_array_reg <= main_1_gep_array;
		if (start == 1'b0 && ^(main_1_gep_array) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_gep_array_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %gep = add i32 %gep_int, %gep_array*/
		main_1_gep = main_signed_add_32_0;
end
always @(*) begin
	/* main: %1*/
	/*   %2 = inttoptr i32 %gep to i16**/
		main_1_2 = main_1_gep;
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %2 = inttoptr i32 %gep to i16**/
	if ((cur_state == LEGUP_F_main_BB__1_3)) begin
		main_1_2_reg <= main_1_2;
		if (start == 1'b0 && ^(main_1_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_2_reg"); $finish; end
	end
end
always @(*) begin
	main_1_3 = main_signed_multiply_32_0;
end
always @(*) begin
	/* main: %1*/
	/*   %4 = trunc i32 %3 to i16*/
		main_1_4 = main_1_3[15:0];
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %4 = trunc i32 %3 to i16*/
	if ((cur_state == LEGUP_F_main_BB__1_3)) begin
		main_1_4_reg <= main_1_4;
		if (start == 1'b0 && ^(main_1_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_4_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %input_temp.0.input_temp.0.1 = load volatile i16* %input_temp, align 2*/
		main_1_input_temp0input_temp01 = memory_controller_out_b[15:0];
end
always @(*) begin
	/* main: %1*/
	/*   %gep_int1 = ptrtoint [64 x i16]* %Real to i32*/
if (reset) begin main_1_gep_int1 = 0; end
		main_1_gep_int1 = `TAG_main_0_Real_a;
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %gep_int1 = ptrtoint [64 x i16]* %Real to i32*/
	if ((cur_state == LEGUP_F_main_BB__1_2)) begin
		main_1_gep_int1_reg <= main_1_gep_int1;
		if (start == 1'b0 && ^(main_1_gep_int1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_gep_int1_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %gep_array2 = mul i32 %indvars.iv4, 2*/
		main_1_gep_array2 = (main_1_indvarsiv4_reg * 32'd2);
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %gep_array2 = mul i32 %indvars.iv4, 2*/
	if ((cur_state == LEGUP_F_main_BB__1_2)) begin
		main_1_gep_array2_reg <= main_1_gep_array2;
		if (start == 1'b0 && ^(main_1_gep_array2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_gep_array2_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %gep3 = add i32 %gep_int1, %gep_array2*/
		main_1_gep3 = main_signed_add_32_251;
end
always @(*) begin
	/* main: %1*/
	/*   %5 = inttoptr i32 %gep3 to i16**/
		main_1_5 = main_1_gep3;
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %5 = inttoptr i32 %gep3 to i16**/
	if ((cur_state == LEGUP_F_main_BB__1_3)) begin
		main_1_5_reg <= main_1_5;
		if (start == 1'b0 && ^(main_1_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_5_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %indvars.iv.next5 = add nuw nsw i32 %indvars.iv4, 1*/
		main_1_indvarsivnext5 = main_signed_add_32_0;
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %indvars.iv.next5 = add nuw nsw i32 %indvars.iv4, 1*/
	if ((cur_state == LEGUP_F_main_BB__1_2)) begin
		main_1_indvarsivnext5_reg <= main_1_indvarsivnext5;
		if (start == 1'b0 && ^(main_1_indvarsivnext5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_indvarsivnext5_reg"); $finish; end
	end
	/* main: %6*/
	/*   %gep9 = add i32 %gep_int8, 64*/
	if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		main_1_indvarsivnext5_reg <= main_6_gep9;
		if (start == 1'b0 && ^(main_6_gep9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_indvarsivnext5_reg"); $finish; end
	end
	/* main: %.lr.ph.i*/
	/*   %397 = add nsw i32 %394, 1*/
	if ((cur_state == LEGUP_F_main_BB_lrphi_399)) begin
		main_1_indvarsivnext5_reg <= main_lrphi_397;
		if (start == 1'b0 && ^(main_lrphi_397) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_indvarsivnext5_reg"); $finish; end
	end
	/* main: %.lr.ph.i*/
	/*   %gep514 = add i32 %gep_int512, %gep_array513*/
	if ((cur_state == LEGUP_F_main_BB_lrphi_401)) begin
		main_1_indvarsivnext5_reg <= main_lrphi_gep514;
		if (start == 1'b0 && ^(main_lrphi_gep514) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_indvarsivnext5_reg"); $finish; end
	end
	/* main: %404*/
	/*   %406 = add nsw i32 %405, %l.08.i*/
	if ((cur_state == LEGUP_F_main_BB__404_404)) begin
		main_1_indvarsivnext5_reg <= main_404_406;
		if (start == 1'b0 && ^(main_404_406) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_indvarsivnext5_reg"); $finish; end
	end
	/* main: %404*/
	/*   %gep520 = add i32 %gep_int518, %gep_array519*/
	if ((cur_state == LEGUP_F_main_BB__404_406)) begin
		main_1_indvarsivnext5_reg <= main_404_gep520;
		if (start == 1'b0 && ^(main_404_gep520) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_indvarsivnext5_reg"); $finish; end
	end
	/* main: %404*/
	/*   %415 = add nuw nsw i32 %414, %412*/
	if ((cur_state == LEGUP_F_main_BB__404_409)) begin
		main_1_indvarsivnext5_reg <= main_404_415;
		if (start == 1'b0 && ^(main_404_415) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_indvarsivnext5_reg"); $finish; end
	end
	/* main: %404*/
	/*   %gep526 = add i32 %gep_int524, %gep_array525*/
	if ((cur_state == LEGUP_F_main_BB__404_405)) begin
		main_1_indvarsivnext5_reg <= main_404_gep526;
		if (start == 1'b0 && ^(main_404_gep526) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_indvarsivnext5_reg"); $finish; end
	end
	/* main: %fft.exit*/
	/*   %gep532 = add i32 %gep_int530, %gep_array531*/
	if ((cur_state == LEGUP_F_main_BB_fftexit_417)) begin
		main_1_indvarsivnext5_reg <= main_fftexit_gep532;
		if (start == 1'b0 && ^(main_fftexit_gep532) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_indvarsivnext5_reg"); $finish; end
	end
	/* main: %fft.exit*/
	/*   %461 = add nsw i32 %460, %sum.02*/
	if ((cur_state == LEGUP_F_main_BB_fftexit_419)) begin
		main_1_indvarsivnext5_reg <= main_fftexit_461;
		if (start == 1'b0 && ^(main_fftexit_461) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_indvarsivnext5_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %exitcond6 = icmp eq i32 %indvars.iv.next5, 64*/
		main_1_exitcond6 = (main_1_indvarsivnext5 == 32'd64);
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %exitcond6 = icmp eq i32 %indvars.iv.next5, 64*/
	if ((cur_state == LEGUP_F_main_BB__1_2)) begin
		main_1_exitcond6_reg <= main_1_exitcond6;
		if (start == 1'b0 && ^(main_1_exitcond6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_exitcond6_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %gep_int4 = ptrtoint [64 x i16]* %Real to i32*/
if (reset) begin main_6_gep_int4 = 0; end
		main_6_gep_int4 = `TAG_main_0_Real_a;
end
always @(*) begin
	/* main: %6*/
	/*   %7 = inttoptr i32 %gep_int4 to i16**/
		main_6_7 = main_6_gep_int4;
end
always @(*) begin
	/* main: %6*/
	/*   %gep_int5 = ptrtoint [64 x i16]* %Imag to i32*/
if (reset) begin main_6_gep_int5 = 0; end
		main_6_gep_int5 = `TAG_main_0_Imag_a;
end
always @(*) begin
	/* main: %6*/
	/*   %8 = inttoptr i32 %gep_int5 to i16**/
		main_6_8 = main_6_gep_int5;
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %8 = inttoptr i32 %gep_int5 to i16**/
	if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		main_6_8_reg <= main_6_8;
		if (start == 1'b0 && ^(main_6_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_8_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %gep_int6 = ptrtoint [64 x i16]* %New_Real to i32*/
if (reset) begin main_6_gep_int6 = 0; end
		main_6_gep_int6 = `TAG_main_0_New_Real_a;
end
always @(*) begin
	/* main: %6*/
	/*   %9 = inttoptr i32 %gep_int6 to i16**/
		main_6_9 = main_6_gep_int6;
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %9 = inttoptr i32 %gep_int6 to i16**/
	if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		main_6_9_reg <= main_6_9;
		if (start == 1'b0 && ^(main_6_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_9_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %gep_int7 = ptrtoint [64 x i16]* %New_Imag to i32*/
if (reset) begin main_6_gep_int7 = 0; end
		main_6_gep_int7 = `TAG_main_0_New_Imag_a;
end
always @(*) begin
	/* main: %6*/
	/*   %10 = inttoptr i32 %gep_int7 to i16**/
		main_6_10 = main_6_gep_int7;
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %10 = inttoptr i32 %gep_int7 to i16**/
	if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		main_6_10_reg <= main_6_10;
		if (start == 1'b0 && ^(main_6_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_10_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %11 = load i16* %7, align 2, !tbaa !1*/
		main_6_11 = memory_controller_out_b[15:0];
end
always @(*) begin
	/* main: %6*/
	/*   %12 = load i16* %8, align 2, !tbaa !1*/
		main_6_12 = memory_controller_out_b[15:0];
end
always @(*) begin
	/* main: %6*/
	/*   %gep_int8 = ptrtoint i16* %7 to i32*/
		main_6_gep_int8 = main_6_7;
end
always @(*) begin
	/* main: %6*/
	/*   %gep9 = add i32 %gep_int8, 64*/
		main_6_gep9 = main_signed_add_32_0;
end
always @(*) begin
	/* main: %6*/
	/*   %13 = inttoptr i32 %gep9 to i16**/
		main_6_13 = main_6_gep9;
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %13 = inttoptr i32 %gep9 to i16**/
	if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		main_6_13_reg <= main_6_13;
		if (start == 1'b0 && ^(main_6_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_13_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %14 = load i16* %13, align 2, !tbaa !1*/
		main_6_14 = memory_controller_out_b[15:0];
end
always @(*) begin
	/* main: %6*/
	/*   %gep_int10 = ptrtoint i16* %9 to i32*/
		main_6_gep_int10 = main_6_9;
end
always @(*) begin
	/* main: %6*/
	/*   %gep11 = add i32 %gep_int10, 2*/
		main_6_gep11 = main_signed_add_32_1;
end
always @(*) begin
	/* main: %6*/
	/*   %15 = inttoptr i32 %gep11 to i16**/
		main_6_15 = main_6_gep11;
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %15 = inttoptr i32 %gep11 to i16**/
	if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		main_6_15_reg <= main_6_15;
		if (start == 1'b0 && ^(main_6_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_15_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %gep_int12 = ptrtoint i16* %8 to i32*/
		main_6_gep_int12 = main_6_8;
end
always @(*) begin
	/* main: %6*/
	/*   %gep13 = add i32 %gep_int12, 64*/
		main_6_gep13 = main_signed_add_32_2;
end
always @(*) begin
	/* main: %6*/
	/*   %16 = inttoptr i32 %gep13 to i16**/
		main_6_16 = main_6_gep13;
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %16 = inttoptr i32 %gep13 to i16**/
	if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		main_6_16_reg <= main_6_16;
		if (start == 1'b0 && ^(main_6_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_16_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %17 = load i16* %16, align 2, !tbaa !1*/
		main_6_17 = memory_controller_out_b[15:0];
end
always @(*) begin
	/* main: %6*/
	/*   %gep_int14 = ptrtoint i16* %10 to i32*/
		main_6_gep_int14 = main_6_10;
end
always @(*) begin
	/* main: %6*/
	/*   %gep15 = add i32 %gep_int14, 2*/
		main_6_gep15 = main_signed_add_32_3;
end
always @(*) begin
	/* main: %6*/
	/*   %18 = inttoptr i32 %gep15 to i16**/
		main_6_18 = main_6_gep15;
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %18 = inttoptr i32 %gep15 to i16**/
	if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		main_6_18_reg <= main_6_18;
		if (start == 1'b0 && ^(main_6_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_18_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %gep_int16 = ptrtoint i16* %7 to i32*/
		main_6_gep_int16 = main_6_7;
end
always @(*) begin
	/* main: %6*/
	/*   %gep17 = add i32 %gep_int16, 32*/
		main_6_gep17 = main_signed_add_32_4;
end
always @(*) begin
	/* main: %6*/
	/*   %19 = inttoptr i32 %gep17 to i16**/
		main_6_19 = main_6_gep17;
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %19 = inttoptr i32 %gep17 to i16**/
	if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		main_6_19_reg <= main_6_19;
		if (start == 1'b0 && ^(main_6_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_19_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %20 = load i16* %19, align 2, !tbaa !1*/
		main_6_20 = memory_controller_out_b[15:0];
end
always @(*) begin
	/* main: %6*/
	/*   %gep_int18 = ptrtoint i16* %9 to i32*/
		main_6_gep_int18 = main_6_9;
end
always @(*) begin
	/* main: %6*/
	/*   %gep19 = add i32 %gep_int18, 4*/
		main_6_gep19 = main_signed_add_32_5;
end
always @(*) begin
	/* main: %6*/
	/*   %21 = inttoptr i32 %gep19 to i16**/
		main_6_21 = main_6_gep19;
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %21 = inttoptr i32 %gep19 to i16**/
	if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		main_6_21_reg <= main_6_21;
		if (start == 1'b0 && ^(main_6_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_21_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %gep_int20 = ptrtoint i16* %8 to i32*/
		main_6_gep_int20 = main_6_8;
end
always @(*) begin
	/* main: %6*/
	/*   %gep21 = add i32 %gep_int20, 32*/
		main_6_gep21 = main_signed_add_32_6;
end
always @(*) begin
	/* main: %6*/
	/*   %22 = inttoptr i32 %gep21 to i16**/
		main_6_22 = main_6_gep21;
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %22 = inttoptr i32 %gep21 to i16**/
	if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		main_6_22_reg <= main_6_22;
		if (start == 1'b0 && ^(main_6_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_22_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %23 = load i16* %22, align 2, !tbaa !1*/
		main_6_23 = memory_controller_out_b[15:0];
end
always @(*) begin
	/* main: %6*/
	/*   %gep_int22 = ptrtoint i16* %10 to i32*/
		main_6_gep_int22 = main_6_10;
end
always @(*) begin
	/* main: %6*/
	/*   %gep23 = add i32 %gep_int22, 4*/
		main_6_gep23 = main_signed_add_32_7;
end
always @(*) begin
	/* main: %6*/
	/*   %24 = inttoptr i32 %gep23 to i16**/
		main_6_24 = main_6_gep23;
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %24 = inttoptr i32 %gep23 to i16**/
	if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		main_6_24_reg <= main_6_24;
		if (start == 1'b0 && ^(main_6_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_24_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %gep_int24 = ptrtoint i16* %7 to i32*/
		main_6_gep_int24 = main_6_7;
end
always @(*) begin
	/* main: %6*/
	/*   %gep25 = add i32 %gep_int24, 96*/
		main_6_gep25 = main_signed_add_32_8;
end
always @(*) begin
	/* main: %6*/
	/*   %25 = inttoptr i32 %gep25 to i16**/
		main_6_25 = main_6_gep25;
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %25 = inttoptr i32 %gep25 to i16**/
	if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		main_6_25_reg <= main_6_25;
		if (start == 1'b0 && ^(main_6_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_25_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %26 = load i16* %25, align 2, !tbaa !1*/
		main_6_26 = memory_controller_out_b[15:0];
end
always @(*) begin
	/* main: %6*/
	/*   %gep_int26 = ptrtoint i16* %9 to i32*/
		main_6_gep_int26 = main_6_9;
end
always @(*) begin
	/* main: %6*/
	/*   %gep27 = add i32 %gep_int26, 6*/
		main_6_gep27 = main_signed_add_32_9;
end
always @(*) begin
	/* main: %6*/
	/*   %27 = inttoptr i32 %gep27 to i16**/
		main_6_27 = main_6_gep27;
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %27 = inttoptr i32 %gep27 to i16**/
	if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		main_6_27_reg <= main_6_27;
		if (start == 1'b0 && ^(main_6_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_27_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %gep_int28 = ptrtoint i16* %8 to i32*/
		main_6_gep_int28 = main_6_8;
end
always @(*) begin
	/* main: %6*/
	/*   %gep29 = add i32 %gep_int28, 96*/
		main_6_gep29 = main_signed_add_32_10;
end
always @(*) begin
	/* main: %6*/
	/*   %28 = inttoptr i32 %gep29 to i16**/
		main_6_28 = main_6_gep29;
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %28 = inttoptr i32 %gep29 to i16**/
	if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		main_6_28_reg <= main_6_28;
		if (start == 1'b0 && ^(main_6_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_28_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %29 = load i16* %28, align 2, !tbaa !1*/
		main_6_29 = memory_controller_out_b[15:0];
end
always @(*) begin
	/* main: %6*/
	/*   %gep_int30 = ptrtoint i16* %10 to i32*/
		main_6_gep_int30 = main_6_10;
end
always @(*) begin
	/* main: %6*/
	/*   %gep31 = add i32 %gep_int30, 6*/
		main_6_gep31 = main_signed_add_32_11;
end
always @(*) begin
	/* main: %6*/
	/*   %30 = inttoptr i32 %gep31 to i16**/
		main_6_30 = main_6_gep31;
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %30 = inttoptr i32 %gep31 to i16**/
	if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		main_6_30_reg <= main_6_30;
		if (start == 1'b0 && ^(main_6_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_30_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %gep_int32 = ptrtoint i16* %7 to i32*/
		main_6_gep_int32 = main_6_7;
end
always @(*) begin
	/* main: %6*/
	/*   %gep33 = add i32 %gep_int32, 16*/
		main_6_gep33 = main_signed_add_32_12;
end
always @(*) begin
	/* main: %6*/
	/*   %31 = inttoptr i32 %gep33 to i16**/
		main_6_31 = main_6_gep33;
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %31 = inttoptr i32 %gep33 to i16**/
	if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		main_6_31_reg <= main_6_31;
		if (start == 1'b0 && ^(main_6_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_31_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %32 = load i16* %31, align 2, !tbaa !1*/
		main_6_32 = memory_controller_out_b[15:0];
end
always @(*) begin
	/* main: %6*/
	/*   %gep_int34 = ptrtoint i16* %9 to i32*/
		main_6_gep_int34 = main_6_9;
end
always @(*) begin
	/* main: %6*/
	/*   %gep35 = add i32 %gep_int34, 8*/
		main_6_gep35 = main_signed_add_32_13;
end
always @(*) begin
	/* main: %6*/
	/*   %33 = inttoptr i32 %gep35 to i16**/
		main_6_33 = main_6_gep35;
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %33 = inttoptr i32 %gep35 to i16**/
	if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		main_6_33_reg <= main_6_33;
		if (start == 1'b0 && ^(main_6_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_33_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %gep_int36 = ptrtoint i16* %8 to i32*/
		main_6_gep_int36 = main_6_8;
end
always @(*) begin
	/* main: %6*/
	/*   %gep37 = add i32 %gep_int36, 16*/
		main_6_gep37 = main_signed_add_32_14;
end
always @(*) begin
	/* main: %6*/
	/*   %34 = inttoptr i32 %gep37 to i16**/
		main_6_34 = main_6_gep37;
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %34 = inttoptr i32 %gep37 to i16**/
	if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		main_6_34_reg <= main_6_34;
		if (start == 1'b0 && ^(main_6_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_34_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %35 = load i16* %34, align 2, !tbaa !1*/
		main_6_35 = memory_controller_out_b[15:0];
end
always @(*) begin
	/* main: %6*/
	/*   %gep_int38 = ptrtoint i16* %10 to i32*/
		main_6_gep_int38 = main_6_10;
end
always @(*) begin
	/* main: %6*/
	/*   %gep39 = add i32 %gep_int38, 8*/
		main_6_gep39 = main_signed_add_32_15;
end
always @(*) begin
	/* main: %6*/
	/*   %36 = inttoptr i32 %gep39 to i16**/
		main_6_36 = main_6_gep39;
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %36 = inttoptr i32 %gep39 to i16**/
	if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		main_6_36_reg <= main_6_36;
		if (start == 1'b0 && ^(main_6_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_36_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %gep_int40 = ptrtoint i16* %7 to i32*/
		main_6_gep_int40 = main_6_7;
end
always @(*) begin
	/* main: %6*/
	/*   %gep41 = add i32 %gep_int40, 80*/
		main_6_gep41 = main_signed_add_32_16;
end
always @(*) begin
	/* main: %6*/
	/*   %37 = inttoptr i32 %gep41 to i16**/
		main_6_37 = main_6_gep41;
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %37 = inttoptr i32 %gep41 to i16**/
	if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		main_6_37_reg <= main_6_37;
		if (start == 1'b0 && ^(main_6_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_37_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %38 = load i16* %37, align 2, !tbaa !1*/
		main_6_38 = memory_controller_out_b[15:0];
end
always @(*) begin
	/* main: %6*/
	/*   %gep_int42 = ptrtoint i16* %9 to i32*/
		main_6_gep_int42 = main_6_9;
end
always @(*) begin
	/* main: %6*/
	/*   %gep43 = add i32 %gep_int42, 10*/
		main_6_gep43 = main_signed_add_32_17;
end
always @(*) begin
	/* main: %6*/
	/*   %39 = inttoptr i32 %gep43 to i16**/
		main_6_39 = main_6_gep43;
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %39 = inttoptr i32 %gep43 to i16**/
	if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		main_6_39_reg <= main_6_39;
		if (start == 1'b0 && ^(main_6_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_39_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %gep_int44 = ptrtoint i16* %8 to i32*/
		main_6_gep_int44 = main_6_8;
end
always @(*) begin
	/* main: %6*/
	/*   %gep45 = add i32 %gep_int44, 80*/
		main_6_gep45 = main_signed_add_32_18;
end
always @(*) begin
	/* main: %6*/
	/*   %40 = inttoptr i32 %gep45 to i16**/
		main_6_40 = main_6_gep45;
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %40 = inttoptr i32 %gep45 to i16**/
	if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		main_6_40_reg <= main_6_40;
		if (start == 1'b0 && ^(main_6_40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_40_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %41 = load i16* %40, align 2, !tbaa !1*/
		main_6_41 = memory_controller_out_b[15:0];
end
always @(*) begin
	/* main: %6*/
	/*   %gep_int46 = ptrtoint i16* %10 to i32*/
		main_6_gep_int46 = main_6_10;
end
always @(*) begin
	/* main: %6*/
	/*   %gep47 = add i32 %gep_int46, 10*/
		main_6_gep47 = main_signed_add_32_19;
end
always @(*) begin
	/* main: %6*/
	/*   %42 = inttoptr i32 %gep47 to i16**/
		main_6_42 = main_6_gep47;
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %42 = inttoptr i32 %gep47 to i16**/
	if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		main_6_42_reg <= main_6_42;
		if (start == 1'b0 && ^(main_6_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_42_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %gep_int48 = ptrtoint i16* %7 to i32*/
		main_6_gep_int48 = main_6_7;
end
always @(*) begin
	/* main: %6*/
	/*   %gep49 = add i32 %gep_int48, 48*/
		main_6_gep49 = main_signed_add_32_20;
end
always @(*) begin
	/* main: %6*/
	/*   %43 = inttoptr i32 %gep49 to i16**/
		main_6_43 = main_6_gep49;
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %43 = inttoptr i32 %gep49 to i16**/
	if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		main_6_43_reg <= main_6_43;
		if (start == 1'b0 && ^(main_6_43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_43_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %44 = load i16* %43, align 2, !tbaa !1*/
		main_6_44 = memory_controller_out_b[15:0];
end
always @(*) begin
	/* main: %6*/
	/*   %gep_int50 = ptrtoint i16* %9 to i32*/
		main_6_gep_int50 = main_6_9;
end
always @(*) begin
	/* main: %6*/
	/*   %gep51 = add i32 %gep_int50, 12*/
		main_6_gep51 = main_signed_add_32_21;
end
always @(*) begin
	/* main: %6*/
	/*   %45 = inttoptr i32 %gep51 to i16**/
		main_6_45 = main_6_gep51;
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %45 = inttoptr i32 %gep51 to i16**/
	if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		main_6_45_reg <= main_6_45;
		if (start == 1'b0 && ^(main_6_45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_45_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %gep_int52 = ptrtoint i16* %8 to i32*/
		main_6_gep_int52 = main_6_8;
end
always @(*) begin
	/* main: %6*/
	/*   %gep53 = add i32 %gep_int52, 48*/
		main_6_gep53 = main_signed_add_32_22;
end
always @(*) begin
	/* main: %6*/
	/*   %46 = inttoptr i32 %gep53 to i16**/
		main_6_46 = main_6_gep53;
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %46 = inttoptr i32 %gep53 to i16**/
	if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		main_6_46_reg <= main_6_46;
		if (start == 1'b0 && ^(main_6_46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_46_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %47 = load i16* %46, align 2, !tbaa !1*/
		main_6_47 = memory_controller_out_b[15:0];
end
always @(*) begin
	/* main: %6*/
	/*   %gep_int54 = ptrtoint i16* %10 to i32*/
		main_6_gep_int54 = main_6_10;
end
always @(*) begin
	/* main: %6*/
	/*   %gep55 = add i32 %gep_int54, 12*/
		main_6_gep55 = main_signed_add_32_23;
end
always @(*) begin
	/* main: %6*/
	/*   %48 = inttoptr i32 %gep55 to i16**/
		main_6_48 = main_6_gep55;
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %48 = inttoptr i32 %gep55 to i16**/
	if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		main_6_48_reg <= main_6_48;
		if (start == 1'b0 && ^(main_6_48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_48_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %gep_int56 = ptrtoint i16* %7 to i32*/
		main_6_gep_int56 = main_6_7;
end
always @(*) begin
	/* main: %6*/
	/*   %gep57 = add i32 %gep_int56, 112*/
		main_6_gep57 = main_signed_add_32_24;
end
always @(*) begin
	/* main: %6*/
	/*   %49 = inttoptr i32 %gep57 to i16**/
		main_6_49 = main_6_gep57;
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %49 = inttoptr i32 %gep57 to i16**/
	if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		main_6_49_reg <= main_6_49;
		if (start == 1'b0 && ^(main_6_49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_49_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %50 = load i16* %49, align 2, !tbaa !1*/
		main_6_50 = memory_controller_out_b[15:0];
end
always @(*) begin
	/* main: %6*/
	/*   %gep_int58 = ptrtoint i16* %9 to i32*/
		main_6_gep_int58 = main_6_9;
end
always @(*) begin
	/* main: %6*/
	/*   %gep59 = add i32 %gep_int58, 14*/
		main_6_gep59 = main_signed_add_32_25;
end
always @(*) begin
	/* main: %6*/
	/*   %51 = inttoptr i32 %gep59 to i16**/
		main_6_51 = main_6_gep59;
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %51 = inttoptr i32 %gep59 to i16**/
	if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		main_6_51_reg <= main_6_51;
		if (start == 1'b0 && ^(main_6_51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_51_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %gep_int60 = ptrtoint i16* %8 to i32*/
		main_6_gep_int60 = main_6_8;
end
always @(*) begin
	/* main: %6*/
	/*   %gep61 = add i32 %gep_int60, 112*/
		main_6_gep61 = main_signed_add_32_26;
end
always @(*) begin
	/* main: %6*/
	/*   %52 = inttoptr i32 %gep61 to i16**/
		main_6_52 = main_6_gep61;
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %52 = inttoptr i32 %gep61 to i16**/
	if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		main_6_52_reg <= main_6_52;
		if (start == 1'b0 && ^(main_6_52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_52_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %53 = load i16* %52, align 2, !tbaa !1*/
		main_6_53 = memory_controller_out_b[15:0];
end
always @(*) begin
	/* main: %6*/
	/*   %gep_int62 = ptrtoint i16* %10 to i32*/
		main_6_gep_int62 = main_6_10;
end
always @(*) begin
	/* main: %6*/
	/*   %gep63 = add i32 %gep_int62, 14*/
		main_6_gep63 = main_signed_add_32_27;
end
always @(*) begin
	/* main: %6*/
	/*   %54 = inttoptr i32 %gep63 to i16**/
		main_6_54 = main_6_gep63;
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %54 = inttoptr i32 %gep63 to i16**/
	if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		main_6_54_reg <= main_6_54;
		if (start == 1'b0 && ^(main_6_54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_54_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %gep_int64 = ptrtoint i16* %7 to i32*/
		main_6_gep_int64 = main_6_7;
end
always @(*) begin
	/* main: %6*/
	/*   %gep65 = add i32 %gep_int64, 8*/
		main_6_gep65 = main_signed_add_32_28;
end
always @(*) begin
	/* main: %6*/
	/*   %55 = inttoptr i32 %gep65 to i16**/
		main_6_55 = main_6_gep65;
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %55 = inttoptr i32 %gep65 to i16**/
	if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		main_6_55_reg <= main_6_55;
		if (start == 1'b0 && ^(main_6_55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_55_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %56 = load i16* %55, align 2, !tbaa !1*/
		main_6_56 = memory_controller_out_b[15:0];
end
always @(*) begin
	/* main: %6*/
	/*   %gep_int66 = ptrtoint i16* %9 to i32*/
		main_6_gep_int66 = main_6_9;
end
always @(*) begin
	/* main: %6*/
	/*   %gep67 = add i32 %gep_int66, 16*/
		main_6_gep67 = main_signed_add_32_29;
end
always @(*) begin
	/* main: %6*/
	/*   %57 = inttoptr i32 %gep67 to i16**/
		main_6_57 = main_6_gep67;
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %57 = inttoptr i32 %gep67 to i16**/
	if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		main_6_57_reg <= main_6_57;
		if (start == 1'b0 && ^(main_6_57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_57_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %gep_int68 = ptrtoint i16* %8 to i32*/
		main_6_gep_int68 = main_6_8;
end
always @(*) begin
	/* main: %6*/
	/*   %gep69 = add i32 %gep_int68, 8*/
		main_6_gep69 = main_signed_add_32_30;
end
always @(*) begin
	/* main: %6*/
	/*   %58 = inttoptr i32 %gep69 to i16**/
		main_6_58 = main_6_gep69;
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %58 = inttoptr i32 %gep69 to i16**/
	if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		main_6_58_reg <= main_6_58;
		if (start == 1'b0 && ^(main_6_58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_58_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %59 = load i16* %58, align 2, !tbaa !1*/
		main_6_59 = memory_controller_out_b[15:0];
end
always @(*) begin
	/* main: %6*/
	/*   %gep_int70 = ptrtoint i16* %10 to i32*/
		main_6_gep_int70 = main_6_10;
end
always @(*) begin
	/* main: %6*/
	/*   %gep71 = add i32 %gep_int70, 16*/
		main_6_gep71 = main_signed_add_32_31;
end
always @(*) begin
	/* main: %6*/
	/*   %60 = inttoptr i32 %gep71 to i16**/
		main_6_60 = main_6_gep71;
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %60 = inttoptr i32 %gep71 to i16**/
	if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		main_6_60_reg <= main_6_60;
		if (start == 1'b0 && ^(main_6_60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_60_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %gep_int72 = ptrtoint i16* %7 to i32*/
		main_6_gep_int72 = main_6_7;
end
always @(*) begin
	/* main: %6*/
	/*   %gep73 = add i32 %gep_int72, 72*/
		main_6_gep73 = main_signed_add_32_32;
end
always @(*) begin
	/* main: %6*/
	/*   %61 = inttoptr i32 %gep73 to i16**/
		main_6_61 = main_6_gep73;
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %61 = inttoptr i32 %gep73 to i16**/
	if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		main_6_61_reg <= main_6_61;
		if (start == 1'b0 && ^(main_6_61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_61_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %62 = load i16* %61, align 2, !tbaa !1*/
		main_6_62 = memory_controller_out_b[15:0];
end
always @(*) begin
	/* main: %6*/
	/*   %gep_int74 = ptrtoint i16* %9 to i32*/
		main_6_gep_int74 = main_6_9;
end
always @(*) begin
	/* main: %6*/
	/*   %gep75 = add i32 %gep_int74, 18*/
		main_6_gep75 = main_signed_add_32_33;
end
always @(*) begin
	/* main: %6*/
	/*   %63 = inttoptr i32 %gep75 to i16**/
		main_6_63 = main_6_gep75;
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %63 = inttoptr i32 %gep75 to i16**/
	if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		main_6_63_reg <= main_6_63;
		if (start == 1'b0 && ^(main_6_63) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_63_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %gep_int76 = ptrtoint i16* %8 to i32*/
		main_6_gep_int76 = main_6_8;
end
always @(*) begin
	/* main: %6*/
	/*   %gep77 = add i32 %gep_int76, 72*/
		main_6_gep77 = main_signed_add_32_34;
end
always @(*) begin
	/* main: %6*/
	/*   %64 = inttoptr i32 %gep77 to i16**/
		main_6_64 = main_6_gep77;
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %64 = inttoptr i32 %gep77 to i16**/
	if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		main_6_64_reg <= main_6_64;
		if (start == 1'b0 && ^(main_6_64) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_64_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %65 = load i16* %64, align 2, !tbaa !1*/
		main_6_65 = memory_controller_out_b[15:0];
end
always @(*) begin
	/* main: %6*/
	/*   %gep_int78 = ptrtoint i16* %10 to i32*/
		main_6_gep_int78 = main_6_10;
end
always @(*) begin
	/* main: %6*/
	/*   %gep79 = add i32 %gep_int78, 18*/
		main_6_gep79 = main_signed_add_32_35;
end
always @(*) begin
	/* main: %6*/
	/*   %66 = inttoptr i32 %gep79 to i16**/
		main_6_66 = main_6_gep79;
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %66 = inttoptr i32 %gep79 to i16**/
	if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		main_6_66_reg <= main_6_66;
		if (start == 1'b0 && ^(main_6_66) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_66_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %gep_int80 = ptrtoint i16* %7 to i32*/
		main_6_gep_int80 = main_6_7;
end
always @(*) begin
	/* main: %6*/
	/*   %gep81 = add i32 %gep_int80, 40*/
		main_6_gep81 = main_signed_add_32_36;
end
always @(*) begin
	/* main: %6*/
	/*   %67 = inttoptr i32 %gep81 to i16**/
		main_6_67 = main_6_gep81;
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %67 = inttoptr i32 %gep81 to i16**/
	if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		main_6_67_reg <= main_6_67;
		if (start == 1'b0 && ^(main_6_67) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_67_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %68 = load i16* %67, align 2, !tbaa !1*/
		main_6_68 = memory_controller_out_b[15:0];
end
always @(*) begin
	/* main: %6*/
	/*   %gep_int82 = ptrtoint i16* %9 to i32*/
		main_6_gep_int82 = main_6_9;
end
always @(*) begin
	/* main: %6*/
	/*   %gep83 = add i32 %gep_int82, 20*/
		main_6_gep83 = main_signed_add_32_37;
end
always @(*) begin
	/* main: %6*/
	/*   %69 = inttoptr i32 %gep83 to i16**/
		main_6_69 = main_6_gep83;
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %69 = inttoptr i32 %gep83 to i16**/
	if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		main_6_69_reg <= main_6_69;
		if (start == 1'b0 && ^(main_6_69) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_69_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %gep_int84 = ptrtoint i16* %8 to i32*/
		main_6_gep_int84 = main_6_8;
end
always @(*) begin
	/* main: %6*/
	/*   %gep85 = add i32 %gep_int84, 40*/
		main_6_gep85 = main_signed_add_32_38;
end
always @(*) begin
	/* main: %6*/
	/*   %70 = inttoptr i32 %gep85 to i16**/
		main_6_70 = main_6_gep85;
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %70 = inttoptr i32 %gep85 to i16**/
	if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		main_6_70_reg <= main_6_70;
		if (start == 1'b0 && ^(main_6_70) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_70_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %71 = load i16* %70, align 2, !tbaa !1*/
		main_6_71 = memory_controller_out_b[15:0];
end
always @(*) begin
	/* main: %6*/
	/*   %gep_int86 = ptrtoint i16* %10 to i32*/
		main_6_gep_int86 = main_6_10;
end
always @(*) begin
	/* main: %6*/
	/*   %gep87 = add i32 %gep_int86, 20*/
		main_6_gep87 = main_signed_add_32_39;
end
always @(*) begin
	/* main: %6*/
	/*   %72 = inttoptr i32 %gep87 to i16**/
		main_6_72 = main_6_gep87;
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %72 = inttoptr i32 %gep87 to i16**/
	if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		main_6_72_reg <= main_6_72;
		if (start == 1'b0 && ^(main_6_72) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_72_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %gep_int88 = ptrtoint i16* %7 to i32*/
		main_6_gep_int88 = main_6_7;
end
always @(*) begin
	/* main: %6*/
	/*   %gep89 = add i32 %gep_int88, 104*/
		main_6_gep89 = main_signed_add_32_40;
end
always @(*) begin
	/* main: %6*/
	/*   %73 = inttoptr i32 %gep89 to i16**/
		main_6_73 = main_6_gep89;
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %73 = inttoptr i32 %gep89 to i16**/
	if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		main_6_73_reg <= main_6_73;
		if (start == 1'b0 && ^(main_6_73) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_73_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %74 = load i16* %73, align 2, !tbaa !1*/
		main_6_74 = memory_controller_out_b[15:0];
end
always @(*) begin
	/* main: %6*/
	/*   %gep_int90 = ptrtoint i16* %9 to i32*/
		main_6_gep_int90 = main_6_9;
end
always @(*) begin
	/* main: %6*/
	/*   %gep91 = add i32 %gep_int90, 22*/
		main_6_gep91 = main_signed_add_32_41;
end
always @(*) begin
	/* main: %6*/
	/*   %75 = inttoptr i32 %gep91 to i16**/
		main_6_75 = main_6_gep91;
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %75 = inttoptr i32 %gep91 to i16**/
	if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		main_6_75_reg <= main_6_75;
		if (start == 1'b0 && ^(main_6_75) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_75_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %gep_int92 = ptrtoint i16* %8 to i32*/
		main_6_gep_int92 = main_6_8;
end
always @(*) begin
	/* main: %6*/
	/*   %gep93 = add i32 %gep_int92, 104*/
		main_6_gep93 = main_signed_add_32_42;
end
always @(*) begin
	/* main: %6*/
	/*   %76 = inttoptr i32 %gep93 to i16**/
		main_6_76 = main_6_gep93;
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %76 = inttoptr i32 %gep93 to i16**/
	if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		main_6_76_reg <= main_6_76;
		if (start == 1'b0 && ^(main_6_76) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_76_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %77 = load i16* %76, align 2, !tbaa !1*/
		main_6_77 = memory_controller_out_b[15:0];
end
always @(*) begin
	/* main: %6*/
	/*   %gep_int94 = ptrtoint i16* %10 to i32*/
		main_6_gep_int94 = main_6_10;
end
always @(*) begin
	/* main: %6*/
	/*   %gep95 = add i32 %gep_int94, 22*/
		main_6_gep95 = main_signed_add_32_43;
end
always @(*) begin
	/* main: %6*/
	/*   %78 = inttoptr i32 %gep95 to i16**/
		main_6_78 = main_6_gep95;
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %78 = inttoptr i32 %gep95 to i16**/
	if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		main_6_78_reg <= main_6_78;
		if (start == 1'b0 && ^(main_6_78) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_78_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %gep_int96 = ptrtoint i16* %7 to i32*/
		main_6_gep_int96 = main_6_7;
end
always @(*) begin
	/* main: %6*/
	/*   %gep97 = add i32 %gep_int96, 24*/
		main_6_gep97 = main_signed_add_32_44;
end
always @(*) begin
	/* main: %6*/
	/*   %79 = inttoptr i32 %gep97 to i16**/
		main_6_79 = main_6_gep97;
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %79 = inttoptr i32 %gep97 to i16**/
	if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		main_6_79_reg <= main_6_79;
		if (start == 1'b0 && ^(main_6_79) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_79_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %80 = load i16* %79, align 2, !tbaa !1*/
		main_6_80 = memory_controller_out_b[15:0];
end
always @(*) begin
	/* main: %6*/
	/*   %gep_int98 = ptrtoint i16* %9 to i32*/
		main_6_gep_int98 = main_6_9;
end
always @(*) begin
	/* main: %6*/
	/*   %gep99 = add i32 %gep_int98, 24*/
		main_6_gep99 = main_signed_add_32_45;
end
always @(*) begin
	/* main: %6*/
	/*   %81 = inttoptr i32 %gep99 to i16**/
		main_6_81 = main_6_gep99;
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %81 = inttoptr i32 %gep99 to i16**/
	if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		main_6_81_reg <= main_6_81;
		if (start == 1'b0 && ^(main_6_81) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_81_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %gep_int100 = ptrtoint i16* %8 to i32*/
		main_6_gep_int100 = main_6_8;
end
always @(*) begin
	/* main: %6*/
	/*   %gep101 = add i32 %gep_int100, 24*/
		main_6_gep101 = main_signed_add_32_46;
end
always @(*) begin
	/* main: %6*/
	/*   %82 = inttoptr i32 %gep101 to i16**/
		main_6_82 = main_6_gep101;
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %82 = inttoptr i32 %gep101 to i16**/
	if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		main_6_82_reg <= main_6_82;
		if (start == 1'b0 && ^(main_6_82) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_82_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %83 = load i16* %82, align 2, !tbaa !1*/
		main_6_83 = memory_controller_out_b[15:0];
end
always @(*) begin
	/* main: %6*/
	/*   %gep_int102 = ptrtoint i16* %10 to i32*/
		main_6_gep_int102 = main_6_10;
end
always @(*) begin
	/* main: %6*/
	/*   %gep103 = add i32 %gep_int102, 24*/
		main_6_gep103 = main_signed_add_32_47;
end
always @(*) begin
	/* main: %6*/
	/*   %84 = inttoptr i32 %gep103 to i16**/
		main_6_84 = main_6_gep103;
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %84 = inttoptr i32 %gep103 to i16**/
	if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		main_6_84_reg <= main_6_84;
		if (start == 1'b0 && ^(main_6_84) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_84_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %gep_int104 = ptrtoint i16* %7 to i32*/
		main_6_gep_int104 = main_6_7;
end
always @(*) begin
	/* main: %6*/
	/*   %gep105 = add i32 %gep_int104, 88*/
		main_6_gep105 = main_signed_add_32_48;
end
always @(*) begin
	/* main: %6*/
	/*   %85 = inttoptr i32 %gep105 to i16**/
		main_6_85 = main_6_gep105;
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %85 = inttoptr i32 %gep105 to i16**/
	if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		main_6_85_reg <= main_6_85;
		if (start == 1'b0 && ^(main_6_85) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_85_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %86 = load i16* %85, align 2, !tbaa !1*/
		main_6_86 = memory_controller_out_b[15:0];
end
always @(*) begin
	/* main: %6*/
	/*   %gep_int106 = ptrtoint i16* %9 to i32*/
		main_6_gep_int106 = main_6_9;
end
always @(*) begin
	/* main: %6*/
	/*   %gep107 = add i32 %gep_int106, 26*/
		main_6_gep107 = main_signed_add_32_49;
end
always @(*) begin
	/* main: %6*/
	/*   %87 = inttoptr i32 %gep107 to i16**/
		main_6_87 = main_6_gep107;
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %87 = inttoptr i32 %gep107 to i16**/
	if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		main_6_87_reg <= main_6_87;
		if (start == 1'b0 && ^(main_6_87) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_87_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %gep_int108 = ptrtoint i16* %8 to i32*/
		main_6_gep_int108 = main_6_8;
end
always @(*) begin
	/* main: %6*/
	/*   %gep109 = add i32 %gep_int108, 88*/
		main_6_gep109 = main_signed_add_32_50;
end
always @(*) begin
	/* main: %6*/
	/*   %88 = inttoptr i32 %gep109 to i16**/
		main_6_88 = main_6_gep109;
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %88 = inttoptr i32 %gep109 to i16**/
	if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		main_6_88_reg <= main_6_88;
		if (start == 1'b0 && ^(main_6_88) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_88_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %89 = load i16* %88, align 2, !tbaa !1*/
		main_6_89 = memory_controller_out_b[15:0];
end
always @(*) begin
	/* main: %6*/
	/*   %gep_int110 = ptrtoint i16* %10 to i32*/
		main_6_gep_int110 = main_6_10;
end
always @(*) begin
	/* main: %6*/
	/*   %gep111 = add i32 %gep_int110, 26*/
		main_6_gep111 = main_signed_add_32_51;
end
always @(*) begin
	/* main: %6*/
	/*   %90 = inttoptr i32 %gep111 to i16**/
		main_6_90 = main_6_gep111;
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %90 = inttoptr i32 %gep111 to i16**/
	if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		main_6_90_reg <= main_6_90;
		if (start == 1'b0 && ^(main_6_90) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_90_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %gep_int112 = ptrtoint i16* %7 to i32*/
		main_6_gep_int112 = main_6_7;
end
always @(*) begin
	/* main: %6*/
	/*   %gep113 = add i32 %gep_int112, 56*/
		main_6_gep113 = main_signed_add_32_52;
end
always @(*) begin
	/* main: %6*/
	/*   %91 = inttoptr i32 %gep113 to i16**/
		main_6_91 = main_6_gep113;
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %91 = inttoptr i32 %gep113 to i16**/
	if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		main_6_91_reg <= main_6_91;
		if (start == 1'b0 && ^(main_6_91) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_91_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %92 = load i16* %91, align 2, !tbaa !1*/
		main_6_92 = memory_controller_out_b[15:0];
end
always @(*) begin
	/* main: %6*/
	/*   %gep_int114 = ptrtoint i16* %9 to i32*/
		main_6_gep_int114 = main_6_9;
end
always @(*) begin
	/* main: %6*/
	/*   %gep115 = add i32 %gep_int114, 28*/
		main_6_gep115 = main_signed_add_32_53;
end
always @(*) begin
	/* main: %6*/
	/*   %93 = inttoptr i32 %gep115 to i16**/
		main_6_93 = main_6_gep115;
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %93 = inttoptr i32 %gep115 to i16**/
	if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		main_6_93_reg <= main_6_93;
		if (start == 1'b0 && ^(main_6_93) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_93_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %gep_int116 = ptrtoint i16* %8 to i32*/
		main_6_gep_int116 = main_6_8;
end
always @(*) begin
	/* main: %6*/
	/*   %gep117 = add i32 %gep_int116, 56*/
		main_6_gep117 = main_signed_add_32_54;
end
always @(*) begin
	/* main: %6*/
	/*   %94 = inttoptr i32 %gep117 to i16**/
		main_6_94 = main_6_gep117;
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %94 = inttoptr i32 %gep117 to i16**/
	if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		main_6_94_reg <= main_6_94;
		if (start == 1'b0 && ^(main_6_94) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_94_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %95 = load i16* %94, align 2, !tbaa !1*/
		main_6_95 = memory_controller_out_b[15:0];
end
always @(*) begin
	/* main: %6*/
	/*   %gep_int118 = ptrtoint i16* %10 to i32*/
		main_6_gep_int118 = main_6_10;
end
always @(*) begin
	/* main: %6*/
	/*   %gep119 = add i32 %gep_int118, 28*/
		main_6_gep119 = main_signed_add_32_55;
end
always @(*) begin
	/* main: %6*/
	/*   %96 = inttoptr i32 %gep119 to i16**/
		main_6_96 = main_6_gep119;
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %96 = inttoptr i32 %gep119 to i16**/
	if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		main_6_96_reg <= main_6_96;
		if (start == 1'b0 && ^(main_6_96) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_96_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %gep_int120 = ptrtoint i16* %7 to i32*/
		main_6_gep_int120 = main_6_7;
end
always @(*) begin
	/* main: %6*/
	/*   %gep121 = add i32 %gep_int120, 120*/
		main_6_gep121 = main_signed_add_32_56;
end
always @(*) begin
	/* main: %6*/
	/*   %97 = inttoptr i32 %gep121 to i16**/
		main_6_97 = main_6_gep121;
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %97 = inttoptr i32 %gep121 to i16**/
	if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		main_6_97_reg <= main_6_97;
		if (start == 1'b0 && ^(main_6_97) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_97_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %98 = load i16* %97, align 2, !tbaa !1*/
		main_6_98 = memory_controller_out_b[15:0];
end
always @(*) begin
	/* main: %6*/
	/*   %gep_int122 = ptrtoint i16* %9 to i32*/
		main_6_gep_int122 = main_6_9;
end
always @(*) begin
	/* main: %6*/
	/*   %gep123 = add i32 %gep_int122, 30*/
		main_6_gep123 = main_signed_add_32_57;
end
always @(*) begin
	/* main: %6*/
	/*   %99 = inttoptr i32 %gep123 to i16**/
		main_6_99 = main_6_gep123;
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %99 = inttoptr i32 %gep123 to i16**/
	if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		main_6_99_reg <= main_6_99;
		if (start == 1'b0 && ^(main_6_99) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_99_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %gep_int124 = ptrtoint i16* %8 to i32*/
		main_6_gep_int124 = main_6_8;
end
always @(*) begin
	/* main: %6*/
	/*   %gep125 = add i32 %gep_int124, 120*/
		main_6_gep125 = main_signed_add_32_58;
end
always @(*) begin
	/* main: %6*/
	/*   %100 = inttoptr i32 %gep125 to i16**/
		main_6_100 = main_6_gep125;
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %100 = inttoptr i32 %gep125 to i16**/
	if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		main_6_100_reg <= main_6_100;
		if (start == 1'b0 && ^(main_6_100) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_100_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %101 = load i16* %100, align 2, !tbaa !1*/
		main_6_101 = memory_controller_out_b[15:0];
end
always @(*) begin
	/* main: %6*/
	/*   %gep_int126 = ptrtoint i16* %10 to i32*/
		main_6_gep_int126 = main_6_10;
end
always @(*) begin
	/* main: %6*/
	/*   %gep127 = add i32 %gep_int126, 30*/
		main_6_gep127 = main_signed_add_32_59;
end
always @(*) begin
	/* main: %6*/
	/*   %102 = inttoptr i32 %gep127 to i16**/
		main_6_102 = main_6_gep127;
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %102 = inttoptr i32 %gep127 to i16**/
	if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		main_6_102_reg <= main_6_102;
		if (start == 1'b0 && ^(main_6_102) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_102_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %gep_int128 = ptrtoint i16* %7 to i32*/
		main_6_gep_int128 = main_6_7;
end
always @(*) begin
	/* main: %6*/
	/*   %gep129 = add i32 %gep_int128, 4*/
		main_6_gep129 = main_signed_add_32_60;
end
always @(*) begin
	/* main: %6*/
	/*   %103 = inttoptr i32 %gep129 to i16**/
		main_6_103 = main_6_gep129;
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %103 = inttoptr i32 %gep129 to i16**/
	if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		main_6_103_reg <= main_6_103;
		if (start == 1'b0 && ^(main_6_103) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_103_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %104 = load i16* %103, align 2, !tbaa !1*/
		main_6_104 = memory_controller_out_b[15:0];
end
always @(*) begin
	/* main: %6*/
	/*   %gep_int130 = ptrtoint i16* %9 to i32*/
		main_6_gep_int130 = main_6_9;
end
always @(*) begin
	/* main: %6*/
	/*   %gep131 = add i32 %gep_int130, 32*/
		main_6_gep131 = main_signed_add_32_61;
end
always @(*) begin
	/* main: %6*/
	/*   %105 = inttoptr i32 %gep131 to i16**/
		main_6_105 = main_6_gep131;
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %105 = inttoptr i32 %gep131 to i16**/
	if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		main_6_105_reg <= main_6_105;
		if (start == 1'b0 && ^(main_6_105) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_105_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %gep_int132 = ptrtoint i16* %8 to i32*/
		main_6_gep_int132 = main_6_8;
end
always @(*) begin
	/* main: %6*/
	/*   %gep133 = add i32 %gep_int132, 4*/
		main_6_gep133 = main_signed_add_32_62;
end
always @(*) begin
	/* main: %6*/
	/*   %106 = inttoptr i32 %gep133 to i16**/
		main_6_106 = main_6_gep133;
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %106 = inttoptr i32 %gep133 to i16**/
	if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		main_6_106_reg <= main_6_106;
		if (start == 1'b0 && ^(main_6_106) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_106_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %107 = load i16* %106, align 2, !tbaa !1*/
		main_6_107 = memory_controller_out_b[15:0];
end
always @(*) begin
	/* main: %6*/
	/*   %gep_int134 = ptrtoint i16* %10 to i32*/
		main_6_gep_int134 = main_6_10;
end
always @(*) begin
	/* main: %6*/
	/*   %gep135 = add i32 %gep_int134, 32*/
		main_6_gep135 = main_signed_add_32_63;
end
always @(*) begin
	/* main: %6*/
	/*   %108 = inttoptr i32 %gep135 to i16**/
		main_6_108 = main_6_gep135;
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %108 = inttoptr i32 %gep135 to i16**/
	if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		main_6_108_reg <= main_6_108;
		if (start == 1'b0 && ^(main_6_108) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_108_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %gep_int136 = ptrtoint i16* %7 to i32*/
		main_6_gep_int136 = main_6_7;
end
always @(*) begin
	/* main: %6*/
	/*   %gep137 = add i32 %gep_int136, 68*/
		main_6_gep137 = main_signed_add_32_64;
end
always @(*) begin
	/* main: %6*/
	/*   %109 = inttoptr i32 %gep137 to i16**/
		main_6_109 = main_6_gep137;
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %109 = inttoptr i32 %gep137 to i16**/
	if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		main_6_109_reg <= main_6_109;
		if (start == 1'b0 && ^(main_6_109) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_109_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %110 = load i16* %109, align 2, !tbaa !1*/
		main_6_110 = memory_controller_out_b[15:0];
end
always @(*) begin
	/* main: %6*/
	/*   %gep_int138 = ptrtoint i16* %9 to i32*/
		main_6_gep_int138 = main_6_9;
end
always @(*) begin
	/* main: %6*/
	/*   %gep139 = add i32 %gep_int138, 34*/
		main_6_gep139 = main_signed_add_32_65;
end
always @(*) begin
	/* main: %6*/
	/*   %111 = inttoptr i32 %gep139 to i16**/
		main_6_111 = main_6_gep139;
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %111 = inttoptr i32 %gep139 to i16**/
	if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		main_6_111_reg <= main_6_111;
		if (start == 1'b0 && ^(main_6_111) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_111_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %gep_int140 = ptrtoint i16* %8 to i32*/
		main_6_gep_int140 = main_6_8;
end
always @(*) begin
	/* main: %6*/
	/*   %gep141 = add i32 %gep_int140, 68*/
		main_6_gep141 = main_signed_add_32_66;
end
always @(*) begin
	/* main: %6*/
	/*   %112 = inttoptr i32 %gep141 to i16**/
		main_6_112 = main_6_gep141;
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %112 = inttoptr i32 %gep141 to i16**/
	if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		main_6_112_reg <= main_6_112;
		if (start == 1'b0 && ^(main_6_112) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_112_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %113 = load i16* %112, align 2, !tbaa !1*/
		main_6_113 = memory_controller_out_b[15:0];
end
always @(*) begin
	/* main: %6*/
	/*   %gep_int142 = ptrtoint i16* %10 to i32*/
		main_6_gep_int142 = main_6_10;
end
always @(*) begin
	/* main: %6*/
	/*   %gep143 = add i32 %gep_int142, 34*/
		main_6_gep143 = main_signed_add_32_67;
end
always @(*) begin
	/* main: %6*/
	/*   %114 = inttoptr i32 %gep143 to i16**/
		main_6_114 = main_6_gep143;
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %114 = inttoptr i32 %gep143 to i16**/
	if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		main_6_114_reg <= main_6_114;
		if (start == 1'b0 && ^(main_6_114) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_114_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %gep_int144 = ptrtoint i16* %7 to i32*/
		main_6_gep_int144 = main_6_7;
end
always @(*) begin
	/* main: %6*/
	/*   %gep145 = add i32 %gep_int144, 36*/
		main_6_gep145 = main_signed_add_32_68;
end
always @(*) begin
	/* main: %6*/
	/*   %115 = inttoptr i32 %gep145 to i16**/
		main_6_115 = main_6_gep145;
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %115 = inttoptr i32 %gep145 to i16**/
	if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		main_6_115_reg <= main_6_115;
		if (start == 1'b0 && ^(main_6_115) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_115_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %116 = load i16* %115, align 2, !tbaa !1*/
		main_6_116 = memory_controller_out_b[15:0];
end
always @(*) begin
	/* main: %6*/
	/*   %gep_int146 = ptrtoint i16* %9 to i32*/
		main_6_gep_int146 = main_6_9;
end
always @(*) begin
	/* main: %6*/
	/*   %gep147 = add i32 %gep_int146, 36*/
		main_6_gep147 = main_signed_add_32_69;
end
always @(*) begin
	/* main: %6*/
	/*   %117 = inttoptr i32 %gep147 to i16**/
		main_6_117 = main_6_gep147;
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %117 = inttoptr i32 %gep147 to i16**/
	if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		main_6_117_reg <= main_6_117;
		if (start == 1'b0 && ^(main_6_117) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_117_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %gep_int148 = ptrtoint i16* %8 to i32*/
		main_6_gep_int148 = main_6_8;
end
always @(*) begin
	/* main: %6*/
	/*   %gep149 = add i32 %gep_int148, 36*/
		main_6_gep149 = main_signed_add_32_70;
end
always @(*) begin
	/* main: %6*/
	/*   %118 = inttoptr i32 %gep149 to i16**/
		main_6_118 = main_6_gep149;
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %118 = inttoptr i32 %gep149 to i16**/
	if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		main_6_118_reg <= main_6_118;
		if (start == 1'b0 && ^(main_6_118) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_118_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %119 = load i16* %118, align 2, !tbaa !1*/
		main_6_119 = memory_controller_out_b[15:0];
end
always @(*) begin
	/* main: %6*/
	/*   %gep_int150 = ptrtoint i16* %10 to i32*/
		main_6_gep_int150 = main_6_10;
end
always @(*) begin
	/* main: %6*/
	/*   %gep151 = add i32 %gep_int150, 36*/
		main_6_gep151 = main_signed_add_32_71;
end
always @(*) begin
	/* main: %6*/
	/*   %120 = inttoptr i32 %gep151 to i16**/
		main_6_120 = main_6_gep151;
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %120 = inttoptr i32 %gep151 to i16**/
	if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		main_6_120_reg <= main_6_120;
		if (start == 1'b0 && ^(main_6_120) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_120_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %gep_int152 = ptrtoint i16* %7 to i32*/
		main_6_gep_int152 = main_6_7;
end
always @(*) begin
	/* main: %6*/
	/*   %gep153 = add i32 %gep_int152, 100*/
		main_6_gep153 = main_signed_add_32_72;
end
always @(*) begin
	/* main: %6*/
	/*   %121 = inttoptr i32 %gep153 to i16**/
		main_6_121 = main_6_gep153;
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %121 = inttoptr i32 %gep153 to i16**/
	if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		main_6_121_reg <= main_6_121;
		if (start == 1'b0 && ^(main_6_121) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_121_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %122 = load i16* %121, align 2, !tbaa !1*/
		main_6_122 = memory_controller_out_b[15:0];
end
always @(*) begin
	/* main: %6*/
	/*   %gep_int154 = ptrtoint i16* %9 to i32*/
		main_6_gep_int154 = main_6_9;
end
always @(*) begin
	/* main: %6*/
	/*   %gep155 = add i32 %gep_int154, 38*/
		main_6_gep155 = main_signed_add_32_73;
end
always @(*) begin
	/* main: %6*/
	/*   %123 = inttoptr i32 %gep155 to i16**/
		main_6_123 = main_6_gep155;
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %123 = inttoptr i32 %gep155 to i16**/
	if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		main_6_123_reg <= main_6_123;
		if (start == 1'b0 && ^(main_6_123) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_123_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %gep_int156 = ptrtoint i16* %8 to i32*/
		main_6_gep_int156 = main_6_8;
end
always @(*) begin
	/* main: %6*/
	/*   %gep157 = add i32 %gep_int156, 100*/
		main_6_gep157 = main_signed_add_32_74;
end
always @(*) begin
	/* main: %6*/
	/*   %124 = inttoptr i32 %gep157 to i16**/
		main_6_124 = main_6_gep157;
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %124 = inttoptr i32 %gep157 to i16**/
	if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		main_6_124_reg <= main_6_124;
		if (start == 1'b0 && ^(main_6_124) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_124_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %125 = load i16* %124, align 2, !tbaa !1*/
		main_6_125 = memory_controller_out_b[15:0];
end
always @(*) begin
	/* main: %6*/
	/*   %gep_int158 = ptrtoint i16* %10 to i32*/
		main_6_gep_int158 = main_6_10;
end
always @(*) begin
	/* main: %6*/
	/*   %gep159 = add i32 %gep_int158, 38*/
		main_6_gep159 = main_signed_add_32_75;
end
always @(*) begin
	/* main: %6*/
	/*   %126 = inttoptr i32 %gep159 to i16**/
		main_6_126 = main_6_gep159;
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %126 = inttoptr i32 %gep159 to i16**/
	if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		main_6_126_reg <= main_6_126;
		if (start == 1'b0 && ^(main_6_126) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_126_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %gep_int160 = ptrtoint i16* %7 to i32*/
		main_6_gep_int160 = main_6_7;
end
always @(*) begin
	/* main: %6*/
	/*   %gep161 = add i32 %gep_int160, 20*/
		main_6_gep161 = main_signed_add_32_76;
end
always @(*) begin
	/* main: %6*/
	/*   %127 = inttoptr i32 %gep161 to i16**/
		main_6_127 = main_6_gep161;
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %127 = inttoptr i32 %gep161 to i16**/
	if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		main_6_127_reg <= main_6_127;
		if (start == 1'b0 && ^(main_6_127) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_127_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %128 = load i16* %127, align 2, !tbaa !1*/
		main_6_128 = memory_controller_out_b[15:0];
end
always @(*) begin
	/* main: %6*/
	/*   %gep_int162 = ptrtoint i16* %9 to i32*/
		main_6_gep_int162 = main_6_9;
end
always @(*) begin
	/* main: %6*/
	/*   %gep163 = add i32 %gep_int162, 40*/
		main_6_gep163 = main_signed_add_32_77;
end
always @(*) begin
	/* main: %6*/
	/*   %129 = inttoptr i32 %gep163 to i16**/
		main_6_129 = main_6_gep163;
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %129 = inttoptr i32 %gep163 to i16**/
	if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		main_6_129_reg <= main_6_129;
		if (start == 1'b0 && ^(main_6_129) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_129_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %gep_int164 = ptrtoint i16* %8 to i32*/
		main_6_gep_int164 = main_6_8;
end
always @(*) begin
	/* main: %6*/
	/*   %gep165 = add i32 %gep_int164, 20*/
		main_6_gep165 = main_signed_add_32_78;
end
always @(*) begin
	/* main: %6*/
	/*   %130 = inttoptr i32 %gep165 to i16**/
		main_6_130 = main_6_gep165;
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %130 = inttoptr i32 %gep165 to i16**/
	if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		main_6_130_reg <= main_6_130;
		if (start == 1'b0 && ^(main_6_130) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_130_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %131 = load i16* %130, align 2, !tbaa !1*/
		main_6_131 = memory_controller_out_b[15:0];
end
always @(*) begin
	/* main: %6*/
	/*   %gep_int166 = ptrtoint i16* %10 to i32*/
		main_6_gep_int166 = main_6_10;
end
always @(*) begin
	/* main: %6*/
	/*   %gep167 = add i32 %gep_int166, 40*/
		main_6_gep167 = main_signed_add_32_79;
end
always @(*) begin
	/* main: %6*/
	/*   %132 = inttoptr i32 %gep167 to i16**/
		main_6_132 = main_6_gep167;
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %132 = inttoptr i32 %gep167 to i16**/
	if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		main_6_132_reg <= main_6_132;
		if (start == 1'b0 && ^(main_6_132) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_132_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %gep_int168 = ptrtoint i16* %7 to i32*/
		main_6_gep_int168 = main_6_7;
end
always @(*) begin
	/* main: %6*/
	/*   %gep169 = add i32 %gep_int168, 84*/
		main_6_gep169 = main_signed_add_32_80;
end
always @(*) begin
	/* main: %6*/
	/*   %133 = inttoptr i32 %gep169 to i16**/
		main_6_133 = main_6_gep169;
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %133 = inttoptr i32 %gep169 to i16**/
	if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		main_6_133_reg <= main_6_133;
		if (start == 1'b0 && ^(main_6_133) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_133_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %134 = load i16* %133, align 2, !tbaa !1*/
		main_6_134 = memory_controller_out_b[15:0];
end
always @(*) begin
	/* main: %6*/
	/*   %gep_int170 = ptrtoint i16* %9 to i32*/
		main_6_gep_int170 = main_6_9;
end
always @(*) begin
	/* main: %6*/
	/*   %gep171 = add i32 %gep_int170, 42*/
		main_6_gep171 = main_signed_add_32_81;
end
always @(*) begin
	/* main: %6*/
	/*   %135 = inttoptr i32 %gep171 to i16**/
		main_6_135 = main_6_gep171;
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %135 = inttoptr i32 %gep171 to i16**/
	if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		main_6_135_reg <= main_6_135;
		if (start == 1'b0 && ^(main_6_135) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_135_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %gep_int172 = ptrtoint i16* %8 to i32*/
		main_6_gep_int172 = main_6_8;
end
always @(*) begin
	/* main: %6*/
	/*   %gep173 = add i32 %gep_int172, 84*/
		main_6_gep173 = main_signed_add_32_82;
end
always @(*) begin
	/* main: %6*/
	/*   %136 = inttoptr i32 %gep173 to i16**/
		main_6_136 = main_6_gep173;
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %136 = inttoptr i32 %gep173 to i16**/
	if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		main_6_136_reg <= main_6_136;
		if (start == 1'b0 && ^(main_6_136) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_136_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %137 = load i16* %136, align 2, !tbaa !1*/
		main_6_137 = memory_controller_out_b[15:0];
end
always @(*) begin
	/* main: %6*/
	/*   %gep_int174 = ptrtoint i16* %10 to i32*/
		main_6_gep_int174 = main_6_10;
end
always @(*) begin
	/* main: %6*/
	/*   %gep175 = add i32 %gep_int174, 42*/
		main_6_gep175 = main_signed_add_32_83;
end
always @(*) begin
	/* main: %6*/
	/*   %138 = inttoptr i32 %gep175 to i16**/
		main_6_138 = main_6_gep175;
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %138 = inttoptr i32 %gep175 to i16**/
	if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		main_6_138_reg <= main_6_138;
		if (start == 1'b0 && ^(main_6_138) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_138_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %gep_int176 = ptrtoint i16* %7 to i32*/
		main_6_gep_int176 = main_6_7;
end
always @(*) begin
	/* main: %6*/
	/*   %gep177 = add i32 %gep_int176, 52*/
		main_6_gep177 = main_signed_add_32_84;
end
always @(*) begin
	/* main: %6*/
	/*   %139 = inttoptr i32 %gep177 to i16**/
		main_6_139 = main_6_gep177;
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %139 = inttoptr i32 %gep177 to i16**/
	if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		main_6_139_reg <= main_6_139;
		if (start == 1'b0 && ^(main_6_139) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_139_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %140 = load i16* %139, align 2, !tbaa !1*/
		main_6_140 = memory_controller_out_b[15:0];
end
always @(*) begin
	/* main: %6*/
	/*   %gep_int178 = ptrtoint i16* %9 to i32*/
		main_6_gep_int178 = main_6_9;
end
always @(*) begin
	/* main: %6*/
	/*   %gep179 = add i32 %gep_int178, 44*/
		main_6_gep179 = main_signed_add_32_85;
end
always @(*) begin
	/* main: %6*/
	/*   %141 = inttoptr i32 %gep179 to i16**/
		main_6_141 = main_6_gep179;
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %141 = inttoptr i32 %gep179 to i16**/
	if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		main_6_141_reg <= main_6_141;
		if (start == 1'b0 && ^(main_6_141) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_141_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %gep_int180 = ptrtoint i16* %8 to i32*/
		main_6_gep_int180 = main_6_8;
end
always @(*) begin
	/* main: %6*/
	/*   %gep181 = add i32 %gep_int180, 52*/
		main_6_gep181 = main_signed_add_32_86;
end
always @(*) begin
	/* main: %6*/
	/*   %142 = inttoptr i32 %gep181 to i16**/
		main_6_142 = main_6_gep181;
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %142 = inttoptr i32 %gep181 to i16**/
	if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		main_6_142_reg <= main_6_142;
		if (start == 1'b0 && ^(main_6_142) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_142_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %143 = load i16* %142, align 2, !tbaa !1*/
		main_6_143 = memory_controller_out_b[15:0];
end
always @(*) begin
	/* main: %6*/
	/*   %gep_int182 = ptrtoint i16* %10 to i32*/
		main_6_gep_int182 = main_6_10;
end
always @(*) begin
	/* main: %6*/
	/*   %gep183 = add i32 %gep_int182, 44*/
		main_6_gep183 = main_signed_add_32_87;
end
always @(*) begin
	/* main: %6*/
	/*   %144 = inttoptr i32 %gep183 to i16**/
		main_6_144 = main_6_gep183;
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %144 = inttoptr i32 %gep183 to i16**/
	if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		main_6_144_reg <= main_6_144;
		if (start == 1'b0 && ^(main_6_144) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_144_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %gep_int184 = ptrtoint i16* %7 to i32*/
		main_6_gep_int184 = main_6_7;
end
always @(*) begin
	/* main: %6*/
	/*   %gep185 = add i32 %gep_int184, 116*/
		main_6_gep185 = main_signed_add_32_88;
end
always @(*) begin
	/* main: %6*/
	/*   %145 = inttoptr i32 %gep185 to i16**/
		main_6_145 = main_6_gep185;
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %145 = inttoptr i32 %gep185 to i16**/
	if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		main_6_145_reg <= main_6_145;
		if (start == 1'b0 && ^(main_6_145) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_145_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %146 = load i16* %145, align 2, !tbaa !1*/
		main_6_146 = memory_controller_out_b[15:0];
end
always @(*) begin
	/* main: %6*/
	/*   %gep_int186 = ptrtoint i16* %9 to i32*/
		main_6_gep_int186 = main_6_9;
end
always @(*) begin
	/* main: %6*/
	/*   %gep187 = add i32 %gep_int186, 46*/
		main_6_gep187 = main_signed_add_32_89;
end
always @(*) begin
	/* main: %6*/
	/*   %147 = inttoptr i32 %gep187 to i16**/
		main_6_147 = main_6_gep187;
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %147 = inttoptr i32 %gep187 to i16**/
	if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		main_6_147_reg <= main_6_147;
		if (start == 1'b0 && ^(main_6_147) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_147_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %gep_int188 = ptrtoint i16* %8 to i32*/
		main_6_gep_int188 = main_6_8;
end
always @(*) begin
	/* main: %6*/
	/*   %gep189 = add i32 %gep_int188, 116*/
		main_6_gep189 = main_signed_add_32_90;
end
always @(*) begin
	/* main: %6*/
	/*   %148 = inttoptr i32 %gep189 to i16**/
		main_6_148 = main_6_gep189;
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %148 = inttoptr i32 %gep189 to i16**/
	if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		main_6_148_reg <= main_6_148;
		if (start == 1'b0 && ^(main_6_148) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_148_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %149 = load i16* %148, align 2, !tbaa !1*/
		main_6_149 = memory_controller_out_b[15:0];
end
always @(*) begin
	/* main: %6*/
	/*   %gep_int190 = ptrtoint i16* %10 to i32*/
		main_6_gep_int190 = main_6_10;
end
always @(*) begin
	/* main: %6*/
	/*   %gep191 = add i32 %gep_int190, 46*/
		main_6_gep191 = main_signed_add_32_91;
end
always @(*) begin
	/* main: %6*/
	/*   %150 = inttoptr i32 %gep191 to i16**/
		main_6_150 = main_6_gep191;
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %150 = inttoptr i32 %gep191 to i16**/
	if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		main_6_150_reg <= main_6_150;
		if (start == 1'b0 && ^(main_6_150) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_150_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %gep_int192 = ptrtoint i16* %7 to i32*/
		main_6_gep_int192 = main_6_7;
end
always @(*) begin
	/* main: %6*/
	/*   %gep193 = add i32 %gep_int192, 12*/
		main_6_gep193 = main_signed_add_32_92;
end
always @(*) begin
	/* main: %6*/
	/*   %151 = inttoptr i32 %gep193 to i16**/
		main_6_151 = main_6_gep193;
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %151 = inttoptr i32 %gep193 to i16**/
	if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		main_6_151_reg <= main_6_151;
		if (start == 1'b0 && ^(main_6_151) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_151_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %152 = load i16* %151, align 2, !tbaa !1*/
		main_6_152 = memory_controller_out_b[15:0];
end
always @(*) begin
	/* main: %6*/
	/*   %gep_int194 = ptrtoint i16* %9 to i32*/
		main_6_gep_int194 = main_6_9;
end
always @(*) begin
	/* main: %6*/
	/*   %gep195 = add i32 %gep_int194, 48*/
		main_6_gep195 = main_signed_add_32_93;
end
always @(*) begin
	/* main: %6*/
	/*   %153 = inttoptr i32 %gep195 to i16**/
		main_6_153 = main_6_gep195;
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %153 = inttoptr i32 %gep195 to i16**/
	if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		main_6_153_reg <= main_6_153;
		if (start == 1'b0 && ^(main_6_153) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_153_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %gep_int196 = ptrtoint i16* %8 to i32*/
		main_6_gep_int196 = main_6_8;
end
always @(*) begin
	/* main: %6*/
	/*   %gep197 = add i32 %gep_int196, 12*/
		main_6_gep197 = main_signed_add_32_94;
end
always @(*) begin
	/* main: %6*/
	/*   %154 = inttoptr i32 %gep197 to i16**/
		main_6_154 = main_6_gep197;
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %154 = inttoptr i32 %gep197 to i16**/
	if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		main_6_154_reg <= main_6_154;
		if (start == 1'b0 && ^(main_6_154) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_154_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %155 = load i16* %154, align 2, !tbaa !1*/
		main_6_155 = memory_controller_out_b[15:0];
end
always @(*) begin
	/* main: %6*/
	/*   %gep_int198 = ptrtoint i16* %10 to i32*/
		main_6_gep_int198 = main_6_10;
end
always @(*) begin
	/* main: %6*/
	/*   %gep199 = add i32 %gep_int198, 48*/
		main_6_gep199 = main_signed_add_32_95;
end
always @(*) begin
	/* main: %6*/
	/*   %156 = inttoptr i32 %gep199 to i16**/
		main_6_156 = main_6_gep199;
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %156 = inttoptr i32 %gep199 to i16**/
	if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		main_6_156_reg <= main_6_156;
		if (start == 1'b0 && ^(main_6_156) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_156_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %gep_int200 = ptrtoint i16* %7 to i32*/
		main_6_gep_int200 = main_6_7;
end
always @(*) begin
	/* main: %6*/
	/*   %gep201 = add i32 %gep_int200, 76*/
		main_6_gep201 = main_signed_add_32_96;
end
always @(*) begin
	/* main: %6*/
	/*   %157 = inttoptr i32 %gep201 to i16**/
		main_6_157 = main_6_gep201;
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %157 = inttoptr i32 %gep201 to i16**/
	if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		main_6_157_reg <= main_6_157;
		if (start == 1'b0 && ^(main_6_157) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_157_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %158 = load i16* %157, align 2, !tbaa !1*/
		main_6_158 = memory_controller_out_b[15:0];
end
always @(*) begin
	/* main: %6*/
	/*   %gep_int202 = ptrtoint i16* %9 to i32*/
		main_6_gep_int202 = main_6_9;
end
always @(*) begin
	/* main: %6*/
	/*   %gep203 = add i32 %gep_int202, 50*/
		main_6_gep203 = main_signed_add_32_97;
end
always @(*) begin
	/* main: %6*/
	/*   %159 = inttoptr i32 %gep203 to i16**/
		main_6_159 = main_6_gep203;
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %159 = inttoptr i32 %gep203 to i16**/
	if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		main_6_159_reg <= main_6_159;
		if (start == 1'b0 && ^(main_6_159) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_159_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %gep_int204 = ptrtoint i16* %8 to i32*/
		main_6_gep_int204 = main_6_8;
end
always @(*) begin
	/* main: %6*/
	/*   %gep205 = add i32 %gep_int204, 76*/
		main_6_gep205 = main_signed_add_32_98;
end
always @(*) begin
	/* main: %6*/
	/*   %160 = inttoptr i32 %gep205 to i16**/
		main_6_160 = main_6_gep205;
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %160 = inttoptr i32 %gep205 to i16**/
	if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		main_6_160_reg <= main_6_160;
		if (start == 1'b0 && ^(main_6_160) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_160_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %161 = load i16* %160, align 2, !tbaa !1*/
		main_6_161 = memory_controller_out_b[15:0];
end
always @(*) begin
	/* main: %6*/
	/*   %gep_int206 = ptrtoint i16* %10 to i32*/
		main_6_gep_int206 = main_6_10;
end
always @(*) begin
	/* main: %6*/
	/*   %gep207 = add i32 %gep_int206, 50*/
		main_6_gep207 = main_signed_add_32_99;
end
always @(*) begin
	/* main: %6*/
	/*   %162 = inttoptr i32 %gep207 to i16**/
		main_6_162 = main_6_gep207;
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %162 = inttoptr i32 %gep207 to i16**/
	if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		main_6_162_reg <= main_6_162;
		if (start == 1'b0 && ^(main_6_162) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_162_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %gep_int208 = ptrtoint i16* %7 to i32*/
		main_6_gep_int208 = main_6_7;
end
always @(*) begin
	/* main: %6*/
	/*   %gep209 = add i32 %gep_int208, 44*/
		main_6_gep209 = main_signed_add_32_100;
end
always @(*) begin
	/* main: %6*/
	/*   %163 = inttoptr i32 %gep209 to i16**/
		main_6_163 = main_6_gep209;
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %163 = inttoptr i32 %gep209 to i16**/
	if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		main_6_163_reg <= main_6_163;
		if (start == 1'b0 && ^(main_6_163) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_163_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %164 = load i16* %163, align 2, !tbaa !1*/
		main_6_164 = memory_controller_out_b[15:0];
end
always @(*) begin
	/* main: %6*/
	/*   %gep_int210 = ptrtoint i16* %9 to i32*/
		main_6_gep_int210 = main_6_9;
end
always @(*) begin
	/* main: %6*/
	/*   %gep211 = add i32 %gep_int210, 52*/
		main_6_gep211 = main_signed_add_32_101;
end
always @(*) begin
	/* main: %6*/
	/*   %165 = inttoptr i32 %gep211 to i16**/
		main_6_165 = main_6_gep211;
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %165 = inttoptr i32 %gep211 to i16**/
	if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		main_6_165_reg <= main_6_165;
		if (start == 1'b0 && ^(main_6_165) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_165_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %gep_int212 = ptrtoint i16* %8 to i32*/
		main_6_gep_int212 = main_6_8;
end
always @(*) begin
	/* main: %6*/
	/*   %gep213 = add i32 %gep_int212, 44*/
		main_6_gep213 = main_signed_add_32_102;
end
always @(*) begin
	/* main: %6*/
	/*   %166 = inttoptr i32 %gep213 to i16**/
		main_6_166 = main_6_gep213;
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %166 = inttoptr i32 %gep213 to i16**/
	if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		main_6_166_reg <= main_6_166;
		if (start == 1'b0 && ^(main_6_166) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_166_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %167 = load i16* %166, align 2, !tbaa !1*/
		main_6_167 = memory_controller_out_b[15:0];
end
always @(*) begin
	/* main: %6*/
	/*   %gep_int214 = ptrtoint i16* %10 to i32*/
		main_6_gep_int214 = main_6_10;
end
always @(*) begin
	/* main: %6*/
	/*   %gep215 = add i32 %gep_int214, 52*/
		main_6_gep215 = main_signed_add_32_103;
end
always @(*) begin
	/* main: %6*/
	/*   %168 = inttoptr i32 %gep215 to i16**/
		main_6_168 = main_6_gep215;
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %168 = inttoptr i32 %gep215 to i16**/
	if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		main_6_168_reg <= main_6_168;
		if (start == 1'b0 && ^(main_6_168) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_168_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %gep_int216 = ptrtoint i16* %7 to i32*/
		main_6_gep_int216 = main_6_7;
end
always @(*) begin
	/* main: %6*/
	/*   %gep217 = add i32 %gep_int216, 108*/
		main_6_gep217 = main_signed_add_32_104;
end
always @(*) begin
	/* main: %6*/
	/*   %169 = inttoptr i32 %gep217 to i16**/
		main_6_169 = main_6_gep217;
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %169 = inttoptr i32 %gep217 to i16**/
	if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		main_6_169_reg <= main_6_169;
		if (start == 1'b0 && ^(main_6_169) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_169_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %170 = load i16* %169, align 2, !tbaa !1*/
		main_6_170 = memory_controller_out_b[15:0];
end
always @(*) begin
	/* main: %6*/
	/*   %gep_int218 = ptrtoint i16* %9 to i32*/
		main_6_gep_int218 = main_6_9;
end
always @(*) begin
	/* main: %6*/
	/*   %gep219 = add i32 %gep_int218, 54*/
		main_6_gep219 = main_signed_add_32_105;
end
always @(*) begin
	/* main: %6*/
	/*   %171 = inttoptr i32 %gep219 to i16**/
		main_6_171 = main_6_gep219;
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %171 = inttoptr i32 %gep219 to i16**/
	if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		main_6_171_reg <= main_6_171;
		if (start == 1'b0 && ^(main_6_171) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_171_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %gep_int220 = ptrtoint i16* %8 to i32*/
		main_6_gep_int220 = main_6_8;
end
always @(*) begin
	/* main: %6*/
	/*   %gep221 = add i32 %gep_int220, 108*/
		main_6_gep221 = main_signed_add_32_106;
end
always @(*) begin
	/* main: %6*/
	/*   %172 = inttoptr i32 %gep221 to i16**/
		main_6_172 = main_6_gep221;
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %172 = inttoptr i32 %gep221 to i16**/
	if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		main_6_172_reg <= main_6_172;
		if (start == 1'b0 && ^(main_6_172) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_172_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %173 = load i16* %172, align 2, !tbaa !1*/
		main_6_173 = memory_controller_out_b[15:0];
end
always @(*) begin
	/* main: %6*/
	/*   %gep_int222 = ptrtoint i16* %10 to i32*/
		main_6_gep_int222 = main_6_10;
end
always @(*) begin
	/* main: %6*/
	/*   %gep223 = add i32 %gep_int222, 54*/
		main_6_gep223 = main_signed_add_32_107;
end
always @(*) begin
	/* main: %6*/
	/*   %174 = inttoptr i32 %gep223 to i16**/
		main_6_174 = main_6_gep223;
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %174 = inttoptr i32 %gep223 to i16**/
	if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		main_6_174_reg <= main_6_174;
		if (start == 1'b0 && ^(main_6_174) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_174_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %gep_int224 = ptrtoint i16* %7 to i32*/
		main_6_gep_int224 = main_6_7;
end
always @(*) begin
	/* main: %6*/
	/*   %gep225 = add i32 %gep_int224, 28*/
		main_6_gep225 = main_signed_add_32_108;
end
always @(*) begin
	/* main: %6*/
	/*   %175 = inttoptr i32 %gep225 to i16**/
		main_6_175 = main_6_gep225;
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %175 = inttoptr i32 %gep225 to i16**/
	if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		main_6_175_reg <= main_6_175;
		if (start == 1'b0 && ^(main_6_175) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_175_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %176 = load i16* %175, align 2, !tbaa !1*/
		main_6_176 = memory_controller_out_b[15:0];
end
always @(*) begin
	/* main: %6*/
	/*   %gep_int226 = ptrtoint i16* %9 to i32*/
		main_6_gep_int226 = main_6_9;
end
always @(*) begin
	/* main: %6*/
	/*   %gep227 = add i32 %gep_int226, 56*/
		main_6_gep227 = main_signed_add_32_109;
end
always @(*) begin
	/* main: %6*/
	/*   %177 = inttoptr i32 %gep227 to i16**/
		main_6_177 = main_6_gep227;
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %177 = inttoptr i32 %gep227 to i16**/
	if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		main_6_177_reg <= main_6_177;
		if (start == 1'b0 && ^(main_6_177) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_177_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %gep_int228 = ptrtoint i16* %8 to i32*/
		main_6_gep_int228 = main_6_8;
end
always @(*) begin
	/* main: %6*/
	/*   %gep229 = add i32 %gep_int228, 28*/
		main_6_gep229 = main_signed_add_32_110;
end
always @(*) begin
	/* main: %6*/
	/*   %178 = inttoptr i32 %gep229 to i16**/
		main_6_178 = main_6_gep229;
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %178 = inttoptr i32 %gep229 to i16**/
	if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		main_6_178_reg <= main_6_178;
		if (start == 1'b0 && ^(main_6_178) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_178_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %179 = load i16* %178, align 2, !tbaa !1*/
		main_6_179 = memory_controller_out_b[15:0];
end
always @(*) begin
	/* main: %6*/
	/*   %gep_int230 = ptrtoint i16* %10 to i32*/
		main_6_gep_int230 = main_6_10;
end
always @(*) begin
	/* main: %6*/
	/*   %gep231 = add i32 %gep_int230, 56*/
		main_6_gep231 = main_signed_add_32_111;
end
always @(*) begin
	/* main: %6*/
	/*   %180 = inttoptr i32 %gep231 to i16**/
		main_6_180 = main_6_gep231;
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %180 = inttoptr i32 %gep231 to i16**/
	if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		main_6_180_reg <= main_6_180;
		if (start == 1'b0 && ^(main_6_180) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_180_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %gep_int232 = ptrtoint i16* %7 to i32*/
		main_6_gep_int232 = main_6_7;
end
always @(*) begin
	/* main: %6*/
	/*   %gep233 = add i32 %gep_int232, 92*/
		main_6_gep233 = main_signed_add_32_112;
end
always @(*) begin
	/* main: %6*/
	/*   %181 = inttoptr i32 %gep233 to i16**/
		main_6_181 = main_6_gep233;
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %181 = inttoptr i32 %gep233 to i16**/
	if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		main_6_181_reg <= main_6_181;
		if (start == 1'b0 && ^(main_6_181) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_181_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %182 = load i16* %181, align 2, !tbaa !1*/
		main_6_182 = memory_controller_out_b[15:0];
end
always @(*) begin
	/* main: %6*/
	/*   %gep_int234 = ptrtoint i16* %9 to i32*/
		main_6_gep_int234 = main_6_9;
end
always @(*) begin
	/* main: %6*/
	/*   %gep235 = add i32 %gep_int234, 58*/
		main_6_gep235 = main_signed_add_32_113;
end
always @(*) begin
	/* main: %6*/
	/*   %183 = inttoptr i32 %gep235 to i16**/
		main_6_183 = main_6_gep235;
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %183 = inttoptr i32 %gep235 to i16**/
	if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		main_6_183_reg <= main_6_183;
		if (start == 1'b0 && ^(main_6_183) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_183_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %gep_int236 = ptrtoint i16* %8 to i32*/
		main_6_gep_int236 = main_6_8;
end
always @(*) begin
	/* main: %6*/
	/*   %gep237 = add i32 %gep_int236, 92*/
		main_6_gep237 = main_signed_add_32_114;
end
always @(*) begin
	/* main: %6*/
	/*   %184 = inttoptr i32 %gep237 to i16**/
		main_6_184 = main_6_gep237;
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %184 = inttoptr i32 %gep237 to i16**/
	if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		main_6_184_reg <= main_6_184;
		if (start == 1'b0 && ^(main_6_184) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_184_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %185 = load i16* %184, align 2, !tbaa !1*/
		main_6_185 = memory_controller_out_b[15:0];
end
always @(*) begin
	/* main: %6*/
	/*   %gep_int238 = ptrtoint i16* %10 to i32*/
		main_6_gep_int238 = main_6_10;
end
always @(*) begin
	/* main: %6*/
	/*   %gep239 = add i32 %gep_int238, 58*/
		main_6_gep239 = main_signed_add_32_115;
end
always @(*) begin
	/* main: %6*/
	/*   %186 = inttoptr i32 %gep239 to i16**/
		main_6_186 = main_6_gep239;
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %186 = inttoptr i32 %gep239 to i16**/
	if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		main_6_186_reg <= main_6_186;
		if (start == 1'b0 && ^(main_6_186) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_186_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %gep_int240 = ptrtoint i16* %7 to i32*/
		main_6_gep_int240 = main_6_7;
end
always @(*) begin
	/* main: %6*/
	/*   %gep241 = add i32 %gep_int240, 60*/
		main_6_gep241 = main_signed_add_32_116;
end
always @(*) begin
	/* main: %6*/
	/*   %187 = inttoptr i32 %gep241 to i16**/
		main_6_187 = main_6_gep241;
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %187 = inttoptr i32 %gep241 to i16**/
	if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		main_6_187_reg <= main_6_187;
		if (start == 1'b0 && ^(main_6_187) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_187_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %188 = load i16* %187, align 2, !tbaa !1*/
		main_6_188 = memory_controller_out_b[15:0];
end
always @(*) begin
	/* main: %6*/
	/*   %gep_int242 = ptrtoint i16* %9 to i32*/
		main_6_gep_int242 = main_6_9;
end
always @(*) begin
	/* main: %6*/
	/*   %gep243 = add i32 %gep_int242, 60*/
		main_6_gep243 = main_signed_add_32_117;
end
always @(*) begin
	/* main: %6*/
	/*   %189 = inttoptr i32 %gep243 to i16**/
		main_6_189 = main_6_gep243;
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %189 = inttoptr i32 %gep243 to i16**/
	if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		main_6_189_reg <= main_6_189;
		if (start == 1'b0 && ^(main_6_189) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_189_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %gep_int244 = ptrtoint i16* %8 to i32*/
		main_6_gep_int244 = main_6_8;
end
always @(*) begin
	/* main: %6*/
	/*   %gep245 = add i32 %gep_int244, 60*/
		main_6_gep245 = main_signed_add_32_118;
end
always @(*) begin
	/* main: %6*/
	/*   %190 = inttoptr i32 %gep245 to i16**/
		main_6_190 = main_6_gep245;
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %190 = inttoptr i32 %gep245 to i16**/
	if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		main_6_190_reg <= main_6_190;
		if (start == 1'b0 && ^(main_6_190) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_190_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %191 = load i16* %190, align 2, !tbaa !1*/
		main_6_191 = memory_controller_out_b[15:0];
end
always @(*) begin
	/* main: %6*/
	/*   %gep_int246 = ptrtoint i16* %10 to i32*/
		main_6_gep_int246 = main_6_10;
end
always @(*) begin
	/* main: %6*/
	/*   %gep247 = add i32 %gep_int246, 60*/
		main_6_gep247 = main_signed_add_32_119;
end
always @(*) begin
	/* main: %6*/
	/*   %192 = inttoptr i32 %gep247 to i16**/
		main_6_192 = main_6_gep247;
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %192 = inttoptr i32 %gep247 to i16**/
	if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		main_6_192_reg <= main_6_192;
		if (start == 1'b0 && ^(main_6_192) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_192_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %gep_int248 = ptrtoint i16* %7 to i32*/
		main_6_gep_int248 = main_6_7;
end
always @(*) begin
	/* main: %6*/
	/*   %gep249 = add i32 %gep_int248, 124*/
		main_6_gep249 = main_signed_add_32_120;
end
always @(*) begin
	/* main: %6*/
	/*   %193 = inttoptr i32 %gep249 to i16**/
		main_6_193 = main_6_gep249;
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %193 = inttoptr i32 %gep249 to i16**/
	if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		main_6_193_reg <= main_6_193;
		if (start == 1'b0 && ^(main_6_193) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_193_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %194 = load i16* %193, align 2, !tbaa !1*/
		main_6_194 = memory_controller_out_b[15:0];
end
always @(*) begin
	/* main: %6*/
	/*   %gep_int250 = ptrtoint i16* %9 to i32*/
		main_6_gep_int250 = main_6_9;
end
always @(*) begin
	/* main: %6*/
	/*   %gep251 = add i32 %gep_int250, 62*/
		main_6_gep251 = main_signed_add_32_121;
end
always @(*) begin
	/* main: %6*/
	/*   %195 = inttoptr i32 %gep251 to i16**/
		main_6_195 = main_6_gep251;
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %195 = inttoptr i32 %gep251 to i16**/
	if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		main_6_195_reg <= main_6_195;
		if (start == 1'b0 && ^(main_6_195) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_195_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %gep_int252 = ptrtoint i16* %8 to i32*/
		main_6_gep_int252 = main_6_8;
end
always @(*) begin
	/* main: %6*/
	/*   %gep253 = add i32 %gep_int252, 124*/
		main_6_gep253 = main_signed_add_32_122;
end
always @(*) begin
	/* main: %6*/
	/*   %196 = inttoptr i32 %gep253 to i16**/
		main_6_196 = main_6_gep253;
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %196 = inttoptr i32 %gep253 to i16**/
	if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		main_6_196_reg <= main_6_196;
		if (start == 1'b0 && ^(main_6_196) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_196_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %197 = load i16* %196, align 2, !tbaa !1*/
		main_6_197 = memory_controller_out_b[15:0];
end
always @(*) begin
	/* main: %6*/
	/*   %gep_int254 = ptrtoint i16* %10 to i32*/
		main_6_gep_int254 = main_6_10;
end
always @(*) begin
	/* main: %6*/
	/*   %gep255 = add i32 %gep_int254, 62*/
		main_6_gep255 = main_signed_add_32_123;
end
always @(*) begin
	/* main: %6*/
	/*   %198 = inttoptr i32 %gep255 to i16**/
		main_6_198 = main_6_gep255;
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %198 = inttoptr i32 %gep255 to i16**/
	if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		main_6_198_reg <= main_6_198;
		if (start == 1'b0 && ^(main_6_198) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_198_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %gep_int256 = ptrtoint i16* %7 to i32*/
		main_6_gep_int256 = main_6_7;
end
always @(*) begin
	/* main: %6*/
	/*   %gep257 = add i32 %gep_int256, 2*/
		main_6_gep257 = main_signed_add_32_124;
end
always @(*) begin
	/* main: %6*/
	/*   %199 = inttoptr i32 %gep257 to i16**/
		main_6_199 = main_6_gep257;
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %199 = inttoptr i32 %gep257 to i16**/
	if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		main_6_199_reg <= main_6_199;
		if (start == 1'b0 && ^(main_6_199) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_199_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %200 = load i16* %199, align 2, !tbaa !1*/
		main_6_200 = memory_controller_out_b[15:0];
end
always @(*) begin
	/* main: %6*/
	/*   %gep_int258 = ptrtoint i16* %9 to i32*/
		main_6_gep_int258 = main_6_9;
end
always @(*) begin
	/* main: %6*/
	/*   %gep259 = add i32 %gep_int258, 64*/
		main_6_gep259 = main_signed_add_32_125;
end
always @(*) begin
	/* main: %6*/
	/*   %201 = inttoptr i32 %gep259 to i16**/
		main_6_201 = main_6_gep259;
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %201 = inttoptr i32 %gep259 to i16**/
	if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		main_6_201_reg <= main_6_201;
		if (start == 1'b0 && ^(main_6_201) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_201_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %gep_int260 = ptrtoint i16* %8 to i32*/
		main_6_gep_int260 = main_6_8;
end
always @(*) begin
	/* main: %6*/
	/*   %gep261 = add i32 %gep_int260, 2*/
		main_6_gep261 = main_signed_add_32_126;
end
always @(*) begin
	/* main: %6*/
	/*   %202 = inttoptr i32 %gep261 to i16**/
		main_6_202 = main_6_gep261;
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %202 = inttoptr i32 %gep261 to i16**/
	if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		main_6_202_reg <= main_6_202;
		if (start == 1'b0 && ^(main_6_202) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_202_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %203 = load i16* %202, align 2, !tbaa !1*/
		main_6_203 = memory_controller_out_b[15:0];
end
always @(*) begin
	/* main: %6*/
	/*   %gep_int262 = ptrtoint i16* %10 to i32*/
		main_6_gep_int262 = main_6_10;
end
always @(*) begin
	/* main: %6*/
	/*   %gep263 = add i32 %gep_int262, 64*/
		main_6_gep263 = main_signed_add_32_127;
end
always @(*) begin
	/* main: %6*/
	/*   %204 = inttoptr i32 %gep263 to i16**/
		main_6_204 = main_6_gep263;
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %204 = inttoptr i32 %gep263 to i16**/
	if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		main_6_204_reg <= main_6_204;
		if (start == 1'b0 && ^(main_6_204) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_204_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %gep_int264 = ptrtoint i16* %7 to i32*/
		main_6_gep_int264 = main_6_7;
end
always @(*) begin
	/* main: %6*/
	/*   %gep265 = add i32 %gep_int264, 66*/
		main_6_gep265 = main_signed_add_32_128;
end
always @(*) begin
	/* main: %6*/
	/*   %205 = inttoptr i32 %gep265 to i16**/
		main_6_205 = main_6_gep265;
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %205 = inttoptr i32 %gep265 to i16**/
	if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		main_6_205_reg <= main_6_205;
		if (start == 1'b0 && ^(main_6_205) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_205_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %206 = load i16* %205, align 2, !tbaa !1*/
		main_6_206 = memory_controller_out_b[15:0];
end
always @(*) begin
	/* main: %6*/
	/*   %gep_int266 = ptrtoint i16* %9 to i32*/
		main_6_gep_int266 = main_6_9;
end
always @(*) begin
	/* main: %6*/
	/*   %gep267 = add i32 %gep_int266, 66*/
		main_6_gep267 = main_signed_add_32_129;
end
always @(*) begin
	/* main: %6*/
	/*   %207 = inttoptr i32 %gep267 to i16**/
		main_6_207 = main_6_gep267;
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %207 = inttoptr i32 %gep267 to i16**/
	if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		main_6_207_reg <= main_6_207;
		if (start == 1'b0 && ^(main_6_207) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_207_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %gep_int268 = ptrtoint i16* %8 to i32*/
		main_6_gep_int268 = main_6_8;
end
always @(*) begin
	/* main: %6*/
	/*   %gep269 = add i32 %gep_int268, 66*/
		main_6_gep269 = main_signed_add_32_130;
end
always @(*) begin
	/* main: %6*/
	/*   %208 = inttoptr i32 %gep269 to i16**/
		main_6_208 = main_6_gep269;
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %208 = inttoptr i32 %gep269 to i16**/
	if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		main_6_208_reg <= main_6_208;
		if (start == 1'b0 && ^(main_6_208) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_208_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %209 = load i16* %208, align 2, !tbaa !1*/
		main_6_209 = memory_controller_out_b[15:0];
end
always @(*) begin
	/* main: %6*/
	/*   %gep_int270 = ptrtoint i16* %10 to i32*/
		main_6_gep_int270 = main_6_10;
end
always @(*) begin
	/* main: %6*/
	/*   %gep271 = add i32 %gep_int270, 66*/
		main_6_gep271 = main_signed_add_32_131;
end
always @(*) begin
	/* main: %6*/
	/*   %210 = inttoptr i32 %gep271 to i16**/
		main_6_210 = main_6_gep271;
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %210 = inttoptr i32 %gep271 to i16**/
	if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		main_6_210_reg <= main_6_210;
		if (start == 1'b0 && ^(main_6_210) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_210_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %gep_int272 = ptrtoint i16* %7 to i32*/
		main_6_gep_int272 = main_6_7;
end
always @(*) begin
	/* main: %6*/
	/*   %gep273 = add i32 %gep_int272, 34*/
		main_6_gep273 = main_signed_add_32_132;
end
always @(*) begin
	/* main: %6*/
	/*   %211 = inttoptr i32 %gep273 to i16**/
		main_6_211 = main_6_gep273;
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %211 = inttoptr i32 %gep273 to i16**/
	if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		main_6_211_reg <= main_6_211;
		if (start == 1'b0 && ^(main_6_211) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_211_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %212 = load i16* %211, align 2, !tbaa !1*/
		main_6_212 = memory_controller_out_b[15:0];
end
always @(*) begin
	/* main: %6*/
	/*   %gep_int274 = ptrtoint i16* %9 to i32*/
		main_6_gep_int274 = main_6_9;
end
always @(*) begin
	/* main: %6*/
	/*   %gep275 = add i32 %gep_int274, 68*/
		main_6_gep275 = main_signed_add_32_133;
end
always @(*) begin
	/* main: %6*/
	/*   %213 = inttoptr i32 %gep275 to i16**/
		main_6_213 = main_6_gep275;
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %213 = inttoptr i32 %gep275 to i16**/
	if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		main_6_213_reg <= main_6_213;
		if (start == 1'b0 && ^(main_6_213) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_213_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %gep_int276 = ptrtoint i16* %8 to i32*/
		main_6_gep_int276 = main_6_8;
end
always @(*) begin
	/* main: %6*/
	/*   %gep277 = add i32 %gep_int276, 34*/
		main_6_gep277 = main_signed_add_32_134;
end
always @(*) begin
	/* main: %6*/
	/*   %214 = inttoptr i32 %gep277 to i16**/
		main_6_214 = main_6_gep277;
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %214 = inttoptr i32 %gep277 to i16**/
	if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		main_6_214_reg <= main_6_214;
		if (start == 1'b0 && ^(main_6_214) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_214_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %215 = load i16* %214, align 2, !tbaa !1*/
		main_6_215 = memory_controller_out_b[15:0];
end
always @(*) begin
	/* main: %6*/
	/*   %gep_int278 = ptrtoint i16* %10 to i32*/
		main_6_gep_int278 = main_6_10;
end
always @(*) begin
	/* main: %6*/
	/*   %gep279 = add i32 %gep_int278, 68*/
		main_6_gep279 = main_signed_add_32_135;
end
always @(*) begin
	/* main: %6*/
	/*   %216 = inttoptr i32 %gep279 to i16**/
		main_6_216 = main_6_gep279;
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %216 = inttoptr i32 %gep279 to i16**/
	if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		main_6_216_reg <= main_6_216;
		if (start == 1'b0 && ^(main_6_216) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_216_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %gep_int280 = ptrtoint i16* %7 to i32*/
		main_6_gep_int280 = main_6_7;
end
always @(*) begin
	/* main: %6*/
	/*   %gep281 = add i32 %gep_int280, 98*/
		main_6_gep281 = main_signed_add_32_136;
end
always @(*) begin
	/* main: %6*/
	/*   %217 = inttoptr i32 %gep281 to i16**/
		main_6_217 = main_6_gep281;
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %217 = inttoptr i32 %gep281 to i16**/
	if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		main_6_217_reg <= main_6_217;
		if (start == 1'b0 && ^(main_6_217) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_217_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %218 = load i16* %217, align 2, !tbaa !1*/
		main_6_218 = memory_controller_out_b[15:0];
end
always @(*) begin
	/* main: %6*/
	/*   %gep_int282 = ptrtoint i16* %9 to i32*/
		main_6_gep_int282 = main_6_9;
end
always @(*) begin
	/* main: %6*/
	/*   %gep283 = add i32 %gep_int282, 70*/
		main_6_gep283 = main_signed_add_32_137;
end
always @(*) begin
	/* main: %6*/
	/*   %219 = inttoptr i32 %gep283 to i16**/
		main_6_219 = main_6_gep283;
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %219 = inttoptr i32 %gep283 to i16**/
	if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		main_6_219_reg <= main_6_219;
		if (start == 1'b0 && ^(main_6_219) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_219_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %gep_int284 = ptrtoint i16* %8 to i32*/
		main_6_gep_int284 = main_6_8;
end
always @(*) begin
	/* main: %6*/
	/*   %gep285 = add i32 %gep_int284, 98*/
		main_6_gep285 = main_signed_add_32_138;
end
always @(*) begin
	/* main: %6*/
	/*   %220 = inttoptr i32 %gep285 to i16**/
		main_6_220 = main_6_gep285;
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %220 = inttoptr i32 %gep285 to i16**/
	if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		main_6_220_reg <= main_6_220;
		if (start == 1'b0 && ^(main_6_220) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_220_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %221 = load i16* %220, align 2, !tbaa !1*/
		main_6_221 = memory_controller_out_b[15:0];
end
always @(*) begin
	/* main: %6*/
	/*   %gep_int286 = ptrtoint i16* %10 to i32*/
		main_6_gep_int286 = main_6_10;
end
always @(*) begin
	/* main: %6*/
	/*   %gep287 = add i32 %gep_int286, 70*/
		main_6_gep287 = main_signed_add_32_139;
end
always @(*) begin
	/* main: %6*/
	/*   %222 = inttoptr i32 %gep287 to i16**/
		main_6_222 = main_6_gep287;
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %222 = inttoptr i32 %gep287 to i16**/
	if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		main_6_222_reg <= main_6_222;
		if (start == 1'b0 && ^(main_6_222) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_222_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %gep_int288 = ptrtoint i16* %7 to i32*/
		main_6_gep_int288 = main_6_7;
end
always @(*) begin
	/* main: %6*/
	/*   %gep289 = add i32 %gep_int288, 18*/
		main_6_gep289 = main_signed_add_32_140;
end
always @(*) begin
	/* main: %6*/
	/*   %223 = inttoptr i32 %gep289 to i16**/
		main_6_223 = main_6_gep289;
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %223 = inttoptr i32 %gep289 to i16**/
	if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		main_6_223_reg <= main_6_223;
		if (start == 1'b0 && ^(main_6_223) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_223_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %224 = load i16* %223, align 2, !tbaa !1*/
		main_6_224 = memory_controller_out_b[15:0];
end
always @(*) begin
	/* main: %6*/
	/*   %gep_int290 = ptrtoint i16* %9 to i32*/
		main_6_gep_int290 = main_6_9;
end
always @(*) begin
	/* main: %6*/
	/*   %gep291 = add i32 %gep_int290, 72*/
		main_6_gep291 = main_signed_add_32_141;
end
always @(*) begin
	/* main: %6*/
	/*   %225 = inttoptr i32 %gep291 to i16**/
		main_6_225 = main_6_gep291;
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %225 = inttoptr i32 %gep291 to i16**/
	if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		main_6_225_reg <= main_6_225;
		if (start == 1'b0 && ^(main_6_225) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_225_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %gep_int292 = ptrtoint i16* %8 to i32*/
		main_6_gep_int292 = main_6_8;
end
always @(*) begin
	/* main: %6*/
	/*   %gep293 = add i32 %gep_int292, 18*/
		main_6_gep293 = main_signed_add_32_142;
end
always @(*) begin
	/* main: %6*/
	/*   %226 = inttoptr i32 %gep293 to i16**/
		main_6_226 = main_6_gep293;
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %226 = inttoptr i32 %gep293 to i16**/
	if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		main_6_226_reg <= main_6_226;
		if (start == 1'b0 && ^(main_6_226) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_226_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %227 = load i16* %226, align 2, !tbaa !1*/
		main_6_227 = memory_controller_out_b[15:0];
end
always @(*) begin
	/* main: %6*/
	/*   %gep_int294 = ptrtoint i16* %10 to i32*/
		main_6_gep_int294 = main_6_10;
end
always @(*) begin
	/* main: %6*/
	/*   %gep295 = add i32 %gep_int294, 72*/
		main_6_gep295 = main_signed_add_32_143;
end
always @(*) begin
	/* main: %6*/
	/*   %228 = inttoptr i32 %gep295 to i16**/
		main_6_228 = main_6_gep295;
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %228 = inttoptr i32 %gep295 to i16**/
	if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		main_6_228_reg <= main_6_228;
		if (start == 1'b0 && ^(main_6_228) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_228_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %gep_int296 = ptrtoint i16* %7 to i32*/
		main_6_gep_int296 = main_6_7;
end
always @(*) begin
	/* main: %6*/
	/*   %gep297 = add i32 %gep_int296, 82*/
		main_6_gep297 = main_signed_add_32_144;
end
always @(*) begin
	/* main: %6*/
	/*   %229 = inttoptr i32 %gep297 to i16**/
		main_6_229 = main_6_gep297;
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %229 = inttoptr i32 %gep297 to i16**/
	if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		main_6_229_reg <= main_6_229;
		if (start == 1'b0 && ^(main_6_229) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_229_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %230 = load i16* %229, align 2, !tbaa !1*/
		main_6_230 = memory_controller_out_b[15:0];
end
always @(*) begin
	/* main: %6*/
	/*   %gep_int298 = ptrtoint i16* %9 to i32*/
		main_6_gep_int298 = main_6_9;
end
always @(*) begin
	/* main: %6*/
	/*   %gep299 = add i32 %gep_int298, 74*/
		main_6_gep299 = main_signed_add_32_145;
end
always @(*) begin
	/* main: %6*/
	/*   %231 = inttoptr i32 %gep299 to i16**/
		main_6_231 = main_6_gep299;
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %231 = inttoptr i32 %gep299 to i16**/
	if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		main_6_231_reg <= main_6_231;
		if (start == 1'b0 && ^(main_6_231) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_231_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %gep_int300 = ptrtoint i16* %8 to i32*/
		main_6_gep_int300 = main_6_8;
end
always @(*) begin
	/* main: %6*/
	/*   %gep301 = add i32 %gep_int300, 82*/
		main_6_gep301 = main_signed_add_32_146;
end
always @(*) begin
	/* main: %6*/
	/*   %232 = inttoptr i32 %gep301 to i16**/
		main_6_232 = main_6_gep301;
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %232 = inttoptr i32 %gep301 to i16**/
	if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		main_6_232_reg <= main_6_232;
		if (start == 1'b0 && ^(main_6_232) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_232_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %233 = load i16* %232, align 2, !tbaa !1*/
		main_6_233 = memory_controller_out_b[15:0];
end
always @(*) begin
	/* main: %6*/
	/*   %gep_int302 = ptrtoint i16* %10 to i32*/
		main_6_gep_int302 = main_6_10;
end
always @(*) begin
	/* main: %6*/
	/*   %gep303 = add i32 %gep_int302, 74*/
		main_6_gep303 = main_signed_add_32_147;
end
always @(*) begin
	/* main: %6*/
	/*   %234 = inttoptr i32 %gep303 to i16**/
		main_6_234 = main_6_gep303;
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %234 = inttoptr i32 %gep303 to i16**/
	if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		main_6_234_reg <= main_6_234;
		if (start == 1'b0 && ^(main_6_234) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_234_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %gep_int304 = ptrtoint i16* %7 to i32*/
		main_6_gep_int304 = main_6_7;
end
always @(*) begin
	/* main: %6*/
	/*   %gep305 = add i32 %gep_int304, 50*/
		main_6_gep305 = main_signed_add_32_148;
end
always @(*) begin
	/* main: %6*/
	/*   %235 = inttoptr i32 %gep305 to i16**/
		main_6_235 = main_6_gep305;
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %235 = inttoptr i32 %gep305 to i16**/
	if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		main_6_235_reg <= main_6_235;
		if (start == 1'b0 && ^(main_6_235) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_235_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %236 = load i16* %235, align 2, !tbaa !1*/
		main_6_236 = memory_controller_out_b[15:0];
end
always @(*) begin
	/* main: %6*/
	/*   %gep_int306 = ptrtoint i16* %9 to i32*/
		main_6_gep_int306 = main_6_9;
end
always @(*) begin
	/* main: %6*/
	/*   %gep307 = add i32 %gep_int306, 76*/
		main_6_gep307 = main_signed_add_32_149;
end
always @(*) begin
	/* main: %6*/
	/*   %237 = inttoptr i32 %gep307 to i16**/
		main_6_237 = main_6_gep307;
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %237 = inttoptr i32 %gep307 to i16**/
	if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		main_6_237_reg <= main_6_237;
		if (start == 1'b0 && ^(main_6_237) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_237_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %gep_int308 = ptrtoint i16* %8 to i32*/
		main_6_gep_int308 = main_6_8;
end
always @(*) begin
	/* main: %6*/
	/*   %gep309 = add i32 %gep_int308, 50*/
		main_6_gep309 = main_signed_add_32_150;
end
always @(*) begin
	/* main: %6*/
	/*   %238 = inttoptr i32 %gep309 to i16**/
		main_6_238 = main_6_gep309;
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %238 = inttoptr i32 %gep309 to i16**/
	if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		main_6_238_reg <= main_6_238;
		if (start == 1'b0 && ^(main_6_238) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_238_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %239 = load i16* %238, align 2, !tbaa !1*/
		main_6_239 = memory_controller_out_b[15:0];
end
always @(*) begin
	/* main: %6*/
	/*   %gep_int310 = ptrtoint i16* %10 to i32*/
		main_6_gep_int310 = main_6_10;
end
always @(*) begin
	/* main: %6*/
	/*   %gep311 = add i32 %gep_int310, 76*/
		main_6_gep311 = main_signed_add_32_151;
end
always @(*) begin
	/* main: %6*/
	/*   %240 = inttoptr i32 %gep311 to i16**/
		main_6_240 = main_6_gep311;
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %240 = inttoptr i32 %gep311 to i16**/
	if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		main_6_240_reg <= main_6_240;
		if (start == 1'b0 && ^(main_6_240) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_240_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %gep_int312 = ptrtoint i16* %7 to i32*/
		main_6_gep_int312 = main_6_7;
end
always @(*) begin
	/* main: %6*/
	/*   %gep313 = add i32 %gep_int312, 114*/
		main_6_gep313 = main_signed_add_32_152;
end
always @(*) begin
	/* main: %6*/
	/*   %241 = inttoptr i32 %gep313 to i16**/
		main_6_241 = main_6_gep313;
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %241 = inttoptr i32 %gep313 to i16**/
	if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		main_6_241_reg <= main_6_241;
		if (start == 1'b0 && ^(main_6_241) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_241_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %242 = load i16* %241, align 2, !tbaa !1*/
		main_6_242 = memory_controller_out_b[15:0];
end
always @(*) begin
	/* main: %6*/
	/*   %gep_int314 = ptrtoint i16* %9 to i32*/
		main_6_gep_int314 = main_6_9;
end
always @(*) begin
	/* main: %6*/
	/*   %gep315 = add i32 %gep_int314, 78*/
		main_6_gep315 = main_signed_add_32_153;
end
always @(*) begin
	/* main: %6*/
	/*   %243 = inttoptr i32 %gep315 to i16**/
		main_6_243 = main_6_gep315;
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %243 = inttoptr i32 %gep315 to i16**/
	if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		main_6_243_reg <= main_6_243;
		if (start == 1'b0 && ^(main_6_243) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_243_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %gep_int316 = ptrtoint i16* %8 to i32*/
		main_6_gep_int316 = main_6_8;
end
always @(*) begin
	/* main: %6*/
	/*   %gep317 = add i32 %gep_int316, 114*/
		main_6_gep317 = main_signed_add_32_154;
end
always @(*) begin
	/* main: %6*/
	/*   %244 = inttoptr i32 %gep317 to i16**/
		main_6_244 = main_6_gep317;
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %244 = inttoptr i32 %gep317 to i16**/
	if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		main_6_244_reg <= main_6_244;
		if (start == 1'b0 && ^(main_6_244) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_244_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %245 = load i16* %244, align 2, !tbaa !1*/
		main_6_245 = memory_controller_out_b[15:0];
end
always @(*) begin
	/* main: %6*/
	/*   %gep_int318 = ptrtoint i16* %10 to i32*/
		main_6_gep_int318 = main_6_10;
end
always @(*) begin
	/* main: %6*/
	/*   %gep319 = add i32 %gep_int318, 78*/
		main_6_gep319 = main_signed_add_32_155;
end
always @(*) begin
	/* main: %6*/
	/*   %246 = inttoptr i32 %gep319 to i16**/
		main_6_246 = main_6_gep319;
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %246 = inttoptr i32 %gep319 to i16**/
	if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		main_6_246_reg <= main_6_246;
		if (start == 1'b0 && ^(main_6_246) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_246_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %gep_int320 = ptrtoint i16* %7 to i32*/
		main_6_gep_int320 = main_6_7;
end
always @(*) begin
	/* main: %6*/
	/*   %gep321 = add i32 %gep_int320, 10*/
		main_6_gep321 = main_signed_add_32_156;
end
always @(*) begin
	/* main: %6*/
	/*   %247 = inttoptr i32 %gep321 to i16**/
		main_6_247 = main_6_gep321;
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %247 = inttoptr i32 %gep321 to i16**/
	if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		main_6_247_reg <= main_6_247;
		if (start == 1'b0 && ^(main_6_247) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_247_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %248 = load i16* %247, align 2, !tbaa !1*/
		main_6_248 = memory_controller_out_b[15:0];
end
always @(*) begin
	/* main: %6*/
	/*   %gep_int322 = ptrtoint i16* %9 to i32*/
		main_6_gep_int322 = main_6_9;
end
always @(*) begin
	/* main: %6*/
	/*   %gep323 = add i32 %gep_int322, 80*/
		main_6_gep323 = main_signed_add_32_157;
end
always @(*) begin
	/* main: %6*/
	/*   %249 = inttoptr i32 %gep323 to i16**/
		main_6_249 = main_6_gep323;
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %249 = inttoptr i32 %gep323 to i16**/
	if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		main_6_249_reg <= main_6_249;
		if (start == 1'b0 && ^(main_6_249) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_249_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %gep_int324 = ptrtoint i16* %8 to i32*/
		main_6_gep_int324 = main_6_8;
end
always @(*) begin
	/* main: %6*/
	/*   %gep325 = add i32 %gep_int324, 10*/
		main_6_gep325 = main_signed_add_32_158;
end
always @(*) begin
	/* main: %6*/
	/*   %250 = inttoptr i32 %gep325 to i16**/
		main_6_250 = main_6_gep325;
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %250 = inttoptr i32 %gep325 to i16**/
	if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		main_6_250_reg <= main_6_250;
		if (start == 1'b0 && ^(main_6_250) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_250_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %251 = load i16* %250, align 2, !tbaa !1*/
		main_6_251 = memory_controller_out_b[15:0];
end
always @(*) begin
	/* main: %6*/
	/*   %gep_int326 = ptrtoint i16* %10 to i32*/
		main_6_gep_int326 = main_6_10;
end
always @(*) begin
	/* main: %6*/
	/*   %gep327 = add i32 %gep_int326, 80*/
		main_6_gep327 = main_signed_add_32_159;
end
always @(*) begin
	/* main: %6*/
	/*   %252 = inttoptr i32 %gep327 to i16**/
		main_6_252 = main_6_gep327;
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %252 = inttoptr i32 %gep327 to i16**/
	if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		main_6_252_reg <= main_6_252;
		if (start == 1'b0 && ^(main_6_252) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_252_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %gep_int328 = ptrtoint i16* %7 to i32*/
		main_6_gep_int328 = main_6_7;
end
always @(*) begin
	/* main: %6*/
	/*   %gep329 = add i32 %gep_int328, 74*/
		main_6_gep329 = main_signed_add_32_160;
end
always @(*) begin
	/* main: %6*/
	/*   %253 = inttoptr i32 %gep329 to i16**/
		main_6_253 = main_6_gep329;
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %253 = inttoptr i32 %gep329 to i16**/
	if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		main_6_253_reg <= main_6_253;
		if (start == 1'b0 && ^(main_6_253) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_253_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %254 = load i16* %253, align 2, !tbaa !1*/
		main_6_254 = memory_controller_out_b[15:0];
end
always @(*) begin
	/* main: %6*/
	/*   %gep_int330 = ptrtoint i16* %9 to i32*/
		main_6_gep_int330 = main_6_9;
end
always @(*) begin
	/* main: %6*/
	/*   %gep331 = add i32 %gep_int330, 82*/
		main_6_gep331 = main_signed_add_32_161;
end
always @(*) begin
	/* main: %6*/
	/*   %255 = inttoptr i32 %gep331 to i16**/
		main_6_255 = main_6_gep331;
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %255 = inttoptr i32 %gep331 to i16**/
	if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		main_6_255_reg <= main_6_255;
		if (start == 1'b0 && ^(main_6_255) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_255_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %gep_int332 = ptrtoint i16* %8 to i32*/
		main_6_gep_int332 = main_6_8;
end
always @(*) begin
	/* main: %6*/
	/*   %gep333 = add i32 %gep_int332, 74*/
		main_6_gep333 = main_signed_add_32_162;
end
always @(*) begin
	/* main: %6*/
	/*   %256 = inttoptr i32 %gep333 to i16**/
		main_6_256 = main_6_gep333;
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %256 = inttoptr i32 %gep333 to i16**/
	if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		main_6_256_reg <= main_6_256;
		if (start == 1'b0 && ^(main_6_256) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_256_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %257 = load i16* %256, align 2, !tbaa !1*/
		main_6_257 = memory_controller_out_b[15:0];
end
always @(*) begin
	/* main: %6*/
	/*   %gep_int334 = ptrtoint i16* %10 to i32*/
		main_6_gep_int334 = main_6_10;
end
always @(*) begin
	/* main: %6*/
	/*   %gep335 = add i32 %gep_int334, 82*/
		main_6_gep335 = main_signed_add_32_163;
end
always @(*) begin
	/* main: %6*/
	/*   %258 = inttoptr i32 %gep335 to i16**/
		main_6_258 = main_6_gep335;
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %258 = inttoptr i32 %gep335 to i16**/
	if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		main_6_258_reg <= main_6_258;
		if (start == 1'b0 && ^(main_6_258) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_258_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %gep_int336 = ptrtoint i16* %7 to i32*/
		main_6_gep_int336 = main_6_7;
end
always @(*) begin
	/* main: %6*/
	/*   %gep337 = add i32 %gep_int336, 42*/
		main_6_gep337 = main_signed_add_32_164;
end
always @(*) begin
	/* main: %6*/
	/*   %259 = inttoptr i32 %gep337 to i16**/
		main_6_259 = main_6_gep337;
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %259 = inttoptr i32 %gep337 to i16**/
	if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		main_6_259_reg <= main_6_259;
		if (start == 1'b0 && ^(main_6_259) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_259_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %260 = load i16* %259, align 2, !tbaa !1*/
		main_6_260 = memory_controller_out_b[15:0];
end
always @(*) begin
	/* main: %6*/
	/*   %gep_int338 = ptrtoint i16* %9 to i32*/
		main_6_gep_int338 = main_6_9;
end
always @(*) begin
	/* main: %6*/
	/*   %gep339 = add i32 %gep_int338, 84*/
		main_6_gep339 = main_signed_add_32_165;
end
always @(*) begin
	/* main: %6*/
	/*   %261 = inttoptr i32 %gep339 to i16**/
		main_6_261 = main_6_gep339;
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %261 = inttoptr i32 %gep339 to i16**/
	if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		main_6_261_reg <= main_6_261;
		if (start == 1'b0 && ^(main_6_261) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_261_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %gep_int340 = ptrtoint i16* %8 to i32*/
		main_6_gep_int340 = main_6_8;
end
always @(*) begin
	/* main: %6*/
	/*   %gep341 = add i32 %gep_int340, 42*/
		main_6_gep341 = main_signed_add_32_166;
end
always @(*) begin
	/* main: %6*/
	/*   %262 = inttoptr i32 %gep341 to i16**/
		main_6_262 = main_6_gep341;
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %262 = inttoptr i32 %gep341 to i16**/
	if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		main_6_262_reg <= main_6_262;
		if (start == 1'b0 && ^(main_6_262) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_262_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %263 = load i16* %262, align 2, !tbaa !1*/
		main_6_263 = memory_controller_out_b[15:0];
end
always @(*) begin
	/* main: %6*/
	/*   %gep_int342 = ptrtoint i16* %10 to i32*/
		main_6_gep_int342 = main_6_10;
end
always @(*) begin
	/* main: %6*/
	/*   %gep343 = add i32 %gep_int342, 84*/
		main_6_gep343 = main_signed_add_32_167;
end
always @(*) begin
	/* main: %6*/
	/*   %264 = inttoptr i32 %gep343 to i16**/
		main_6_264 = main_6_gep343;
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %264 = inttoptr i32 %gep343 to i16**/
	if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		main_6_264_reg <= main_6_264;
		if (start == 1'b0 && ^(main_6_264) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_264_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %gep_int344 = ptrtoint i16* %7 to i32*/
		main_6_gep_int344 = main_6_7;
end
always @(*) begin
	/* main: %6*/
	/*   %gep345 = add i32 %gep_int344, 106*/
		main_6_gep345 = main_signed_add_32_168;
end
always @(*) begin
	/* main: %6*/
	/*   %265 = inttoptr i32 %gep345 to i16**/
		main_6_265 = main_6_gep345;
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %265 = inttoptr i32 %gep345 to i16**/
	if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		main_6_265_reg <= main_6_265;
		if (start == 1'b0 && ^(main_6_265) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_265_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %266 = load i16* %265, align 2, !tbaa !1*/
		main_6_266 = memory_controller_out_b[15:0];
end
always @(*) begin
	/* main: %6*/
	/*   %gep_int346 = ptrtoint i16* %9 to i32*/
		main_6_gep_int346 = main_6_9;
end
always @(*) begin
	/* main: %6*/
	/*   %gep347 = add i32 %gep_int346, 86*/
		main_6_gep347 = main_signed_add_32_169;
end
always @(*) begin
	/* main: %6*/
	/*   %267 = inttoptr i32 %gep347 to i16**/
		main_6_267 = main_6_gep347;
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %267 = inttoptr i32 %gep347 to i16**/
	if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		main_6_267_reg <= main_6_267;
		if (start == 1'b0 && ^(main_6_267) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_267_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %gep_int348 = ptrtoint i16* %8 to i32*/
		main_6_gep_int348 = main_6_8;
end
always @(*) begin
	/* main: %6*/
	/*   %gep349 = add i32 %gep_int348, 106*/
		main_6_gep349 = main_signed_add_32_170;
end
always @(*) begin
	/* main: %6*/
	/*   %268 = inttoptr i32 %gep349 to i16**/
		main_6_268 = main_6_gep349;
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %268 = inttoptr i32 %gep349 to i16**/
	if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		main_6_268_reg <= main_6_268;
		if (start == 1'b0 && ^(main_6_268) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_268_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %269 = load i16* %268, align 2, !tbaa !1*/
		main_6_269 = memory_controller_out_b[15:0];
end
always @(*) begin
	/* main: %6*/
	/*   %gep_int350 = ptrtoint i16* %10 to i32*/
		main_6_gep_int350 = main_6_10;
end
always @(*) begin
	/* main: %6*/
	/*   %gep351 = add i32 %gep_int350, 86*/
		main_6_gep351 = main_signed_add_32_171;
end
always @(*) begin
	/* main: %6*/
	/*   %270 = inttoptr i32 %gep351 to i16**/
		main_6_270 = main_6_gep351;
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %270 = inttoptr i32 %gep351 to i16**/
	if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		main_6_270_reg <= main_6_270;
		if (start == 1'b0 && ^(main_6_270) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_270_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %gep_int352 = ptrtoint i16* %7 to i32*/
		main_6_gep_int352 = main_6_7;
end
always @(*) begin
	/* main: %6*/
	/*   %gep353 = add i32 %gep_int352, 26*/
		main_6_gep353 = main_signed_add_32_172;
end
always @(*) begin
	/* main: %6*/
	/*   %271 = inttoptr i32 %gep353 to i16**/
		main_6_271 = main_6_gep353;
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %271 = inttoptr i32 %gep353 to i16**/
	if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		main_6_271_reg <= main_6_271;
		if (start == 1'b0 && ^(main_6_271) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_271_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %272 = load i16* %271, align 2, !tbaa !1*/
		main_6_272 = memory_controller_out_b[15:0];
end
always @(*) begin
	/* main: %6*/
	/*   %gep_int354 = ptrtoint i16* %9 to i32*/
		main_6_gep_int354 = main_6_9;
end
always @(*) begin
	/* main: %6*/
	/*   %gep355 = add i32 %gep_int354, 88*/
		main_6_gep355 = main_signed_add_32_173;
end
always @(*) begin
	/* main: %6*/
	/*   %273 = inttoptr i32 %gep355 to i16**/
		main_6_273 = main_6_gep355;
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %273 = inttoptr i32 %gep355 to i16**/
	if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		main_6_273_reg <= main_6_273;
		if (start == 1'b0 && ^(main_6_273) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_273_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %gep_int356 = ptrtoint i16* %8 to i32*/
		main_6_gep_int356 = main_6_8;
end
always @(*) begin
	/* main: %6*/
	/*   %gep357 = add i32 %gep_int356, 26*/
		main_6_gep357 = main_signed_add_32_174;
end
always @(*) begin
	/* main: %6*/
	/*   %274 = inttoptr i32 %gep357 to i16**/
		main_6_274 = main_6_gep357;
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %274 = inttoptr i32 %gep357 to i16**/
	if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		main_6_274_reg <= main_6_274;
		if (start == 1'b0 && ^(main_6_274) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_274_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %275 = load i16* %274, align 2, !tbaa !1*/
		main_6_275 = memory_controller_out_b[15:0];
end
always @(*) begin
	/* main: %6*/
	/*   %gep_int358 = ptrtoint i16* %10 to i32*/
		main_6_gep_int358 = main_6_10;
end
always @(*) begin
	/* main: %6*/
	/*   %gep359 = add i32 %gep_int358, 88*/
		main_6_gep359 = main_signed_add_32_175;
end
always @(*) begin
	/* main: %6*/
	/*   %276 = inttoptr i32 %gep359 to i16**/
		main_6_276 = main_6_gep359;
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %276 = inttoptr i32 %gep359 to i16**/
	if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		main_6_276_reg <= main_6_276;
		if (start == 1'b0 && ^(main_6_276) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_276_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %gep_int360 = ptrtoint i16* %7 to i32*/
		main_6_gep_int360 = main_6_7;
end
always @(*) begin
	/* main: %6*/
	/*   %gep361 = add i32 %gep_int360, 90*/
		main_6_gep361 = main_signed_add_32_176;
end
always @(*) begin
	/* main: %6*/
	/*   %277 = inttoptr i32 %gep361 to i16**/
		main_6_277 = main_6_gep361;
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %277 = inttoptr i32 %gep361 to i16**/
	if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		main_6_277_reg <= main_6_277;
		if (start == 1'b0 && ^(main_6_277) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_277_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %278 = load i16* %277, align 2, !tbaa !1*/
		main_6_278 = memory_controller_out_b[15:0];
end
always @(*) begin
	/* main: %6*/
	/*   %gep_int362 = ptrtoint i16* %9 to i32*/
		main_6_gep_int362 = main_6_9;
end
always @(*) begin
	/* main: %6*/
	/*   %gep363 = add i32 %gep_int362, 90*/
		main_6_gep363 = main_signed_add_32_177;
end
always @(*) begin
	/* main: %6*/
	/*   %279 = inttoptr i32 %gep363 to i16**/
		main_6_279 = main_6_gep363;
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %279 = inttoptr i32 %gep363 to i16**/
	if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		main_6_279_reg <= main_6_279;
		if (start == 1'b0 && ^(main_6_279) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_279_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %gep_int364 = ptrtoint i16* %8 to i32*/
		main_6_gep_int364 = main_6_8;
end
always @(*) begin
	/* main: %6*/
	/*   %gep365 = add i32 %gep_int364, 90*/
		main_6_gep365 = main_signed_add_32_178;
end
always @(*) begin
	/* main: %6*/
	/*   %280 = inttoptr i32 %gep365 to i16**/
		main_6_280 = main_6_gep365;
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %280 = inttoptr i32 %gep365 to i16**/
	if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		main_6_280_reg <= main_6_280;
		if (start == 1'b0 && ^(main_6_280) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_280_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %281 = load i16* %280, align 2, !tbaa !1*/
		main_6_281 = memory_controller_out_b[15:0];
end
always @(*) begin
	/* main: %6*/
	/*   %gep_int366 = ptrtoint i16* %10 to i32*/
		main_6_gep_int366 = main_6_10;
end
always @(*) begin
	/* main: %6*/
	/*   %gep367 = add i32 %gep_int366, 90*/
		main_6_gep367 = main_signed_add_32_179;
end
always @(*) begin
	/* main: %6*/
	/*   %282 = inttoptr i32 %gep367 to i16**/
		main_6_282 = main_6_gep367;
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %282 = inttoptr i32 %gep367 to i16**/
	if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		main_6_282_reg <= main_6_282;
		if (start == 1'b0 && ^(main_6_282) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_282_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %gep_int368 = ptrtoint i16* %7 to i32*/
		main_6_gep_int368 = main_6_7;
end
always @(*) begin
	/* main: %6*/
	/*   %gep369 = add i32 %gep_int368, 58*/
		main_6_gep369 = main_signed_add_32_180;
end
always @(*) begin
	/* main: %6*/
	/*   %283 = inttoptr i32 %gep369 to i16**/
		main_6_283 = main_6_gep369;
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %283 = inttoptr i32 %gep369 to i16**/
	if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		main_6_283_reg <= main_6_283;
		if (start == 1'b0 && ^(main_6_283) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_283_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %284 = load i16* %283, align 2, !tbaa !1*/
		main_6_284 = memory_controller_out_b[15:0];
end
always @(*) begin
	/* main: %6*/
	/*   %gep_int370 = ptrtoint i16* %9 to i32*/
		main_6_gep_int370 = main_6_9;
end
always @(*) begin
	/* main: %6*/
	/*   %gep371 = add i32 %gep_int370, 92*/
		main_6_gep371 = main_signed_add_32_181;
end
always @(*) begin
	/* main: %6*/
	/*   %285 = inttoptr i32 %gep371 to i16**/
		main_6_285 = main_6_gep371;
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %285 = inttoptr i32 %gep371 to i16**/
	if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		main_6_285_reg <= main_6_285;
		if (start == 1'b0 && ^(main_6_285) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_285_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %gep_int372 = ptrtoint i16* %8 to i32*/
		main_6_gep_int372 = main_6_8;
end
always @(*) begin
	/* main: %6*/
	/*   %gep373 = add i32 %gep_int372, 58*/
		main_6_gep373 = main_signed_add_32_182;
end
always @(*) begin
	/* main: %6*/
	/*   %286 = inttoptr i32 %gep373 to i16**/
		main_6_286 = main_6_gep373;
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %286 = inttoptr i32 %gep373 to i16**/
	if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		main_6_286_reg <= main_6_286;
		if (start == 1'b0 && ^(main_6_286) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_286_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %287 = load i16* %286, align 2, !tbaa !1*/
		main_6_287 = memory_controller_out_b[15:0];
end
always @(*) begin
	/* main: %6*/
	/*   %gep_int374 = ptrtoint i16* %10 to i32*/
		main_6_gep_int374 = main_6_10;
end
always @(*) begin
	/* main: %6*/
	/*   %gep375 = add i32 %gep_int374, 92*/
		main_6_gep375 = main_signed_add_32_183;
end
always @(*) begin
	/* main: %6*/
	/*   %288 = inttoptr i32 %gep375 to i16**/
		main_6_288 = main_6_gep375;
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %288 = inttoptr i32 %gep375 to i16**/
	if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		main_6_288_reg <= main_6_288;
		if (start == 1'b0 && ^(main_6_288) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_288_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %gep_int376 = ptrtoint i16* %7 to i32*/
		main_6_gep_int376 = main_6_7;
end
always @(*) begin
	/* main: %6*/
	/*   %gep377 = add i32 %gep_int376, 122*/
		main_6_gep377 = main_signed_add_32_184;
end
always @(*) begin
	/* main: %6*/
	/*   %289 = inttoptr i32 %gep377 to i16**/
		main_6_289 = main_6_gep377;
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %289 = inttoptr i32 %gep377 to i16**/
	if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		main_6_289_reg <= main_6_289;
		if (start == 1'b0 && ^(main_6_289) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_289_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %290 = load i16* %289, align 2, !tbaa !1*/
		main_6_290 = memory_controller_out_b[15:0];
end
always @(*) begin
	/* main: %6*/
	/*   %gep_int378 = ptrtoint i16* %9 to i32*/
		main_6_gep_int378 = main_6_9;
end
always @(*) begin
	/* main: %6*/
	/*   %gep379 = add i32 %gep_int378, 94*/
		main_6_gep379 = main_signed_add_32_185;
end
always @(*) begin
	/* main: %6*/
	/*   %291 = inttoptr i32 %gep379 to i16**/
		main_6_291 = main_6_gep379;
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %291 = inttoptr i32 %gep379 to i16**/
	if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		main_6_291_reg <= main_6_291;
		if (start == 1'b0 && ^(main_6_291) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_291_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %gep_int380 = ptrtoint i16* %8 to i32*/
		main_6_gep_int380 = main_6_8;
end
always @(*) begin
	/* main: %6*/
	/*   %gep381 = add i32 %gep_int380, 122*/
		main_6_gep381 = main_signed_add_32_186;
end
always @(*) begin
	/* main: %6*/
	/*   %292 = inttoptr i32 %gep381 to i16**/
		main_6_292 = main_6_gep381;
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %292 = inttoptr i32 %gep381 to i16**/
	if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		main_6_292_reg <= main_6_292;
		if (start == 1'b0 && ^(main_6_292) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_292_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %293 = load i16* %292, align 2, !tbaa !1*/
		main_6_293 = memory_controller_out_b[15:0];
end
always @(*) begin
	/* main: %6*/
	/*   %gep_int382 = ptrtoint i16* %10 to i32*/
		main_6_gep_int382 = main_6_10;
end
always @(*) begin
	/* main: %6*/
	/*   %gep383 = add i32 %gep_int382, 94*/
		main_6_gep383 = main_signed_add_32_187;
end
always @(*) begin
	/* main: %6*/
	/*   %294 = inttoptr i32 %gep383 to i16**/
		main_6_294 = main_6_gep383;
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %294 = inttoptr i32 %gep383 to i16**/
	if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		main_6_294_reg <= main_6_294;
		if (start == 1'b0 && ^(main_6_294) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_294_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %gep_int384 = ptrtoint i16* %7 to i32*/
		main_6_gep_int384 = main_6_7;
end
always @(*) begin
	/* main: %6*/
	/*   %gep385 = add i32 %gep_int384, 6*/
		main_6_gep385 = main_signed_add_32_188;
end
always @(*) begin
	/* main: %6*/
	/*   %295 = inttoptr i32 %gep385 to i16**/
		main_6_295 = main_6_gep385;
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %295 = inttoptr i32 %gep385 to i16**/
	if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		main_6_295_reg <= main_6_295;
		if (start == 1'b0 && ^(main_6_295) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_295_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %296 = load i16* %295, align 2, !tbaa !1*/
		main_6_296 = memory_controller_out_b[15:0];
end
always @(*) begin
	/* main: %6*/
	/*   %gep_int386 = ptrtoint i16* %9 to i32*/
		main_6_gep_int386 = main_6_9;
end
always @(*) begin
	/* main: %6*/
	/*   %gep387 = add i32 %gep_int386, 96*/
		main_6_gep387 = main_signed_add_32_189;
end
always @(*) begin
	/* main: %6*/
	/*   %297 = inttoptr i32 %gep387 to i16**/
		main_6_297 = main_6_gep387;
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %297 = inttoptr i32 %gep387 to i16**/
	if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		main_6_297_reg <= main_6_297;
		if (start == 1'b0 && ^(main_6_297) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_297_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %gep_int388 = ptrtoint i16* %8 to i32*/
		main_6_gep_int388 = main_6_8;
end
always @(*) begin
	/* main: %6*/
	/*   %gep389 = add i32 %gep_int388, 6*/
		main_6_gep389 = main_signed_add_32_190;
end
always @(*) begin
	/* main: %6*/
	/*   %298 = inttoptr i32 %gep389 to i16**/
		main_6_298 = main_6_gep389;
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %298 = inttoptr i32 %gep389 to i16**/
	if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		main_6_298_reg <= main_6_298;
		if (start == 1'b0 && ^(main_6_298) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_298_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %299 = load i16* %298, align 2, !tbaa !1*/
		main_6_299 = memory_controller_out_b[15:0];
end
always @(*) begin
	/* main: %6*/
	/*   %gep_int390 = ptrtoint i16* %10 to i32*/
		main_6_gep_int390 = main_6_10;
end
always @(*) begin
	/* main: %6*/
	/*   %gep391 = add i32 %gep_int390, 96*/
		main_6_gep391 = main_signed_add_32_191;
end
always @(*) begin
	/* main: %6*/
	/*   %300 = inttoptr i32 %gep391 to i16**/
		main_6_300 = main_6_gep391;
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %300 = inttoptr i32 %gep391 to i16**/
	if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		main_6_300_reg <= main_6_300;
		if (start == 1'b0 && ^(main_6_300) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_300_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %gep_int392 = ptrtoint i16* %7 to i32*/
		main_6_gep_int392 = main_6_7;
end
always @(*) begin
	/* main: %6*/
	/*   %gep393 = add i32 %gep_int392, 70*/
		main_6_gep393 = main_signed_add_32_192;
end
always @(*) begin
	/* main: %6*/
	/*   %301 = inttoptr i32 %gep393 to i16**/
		main_6_301 = main_6_gep393;
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %301 = inttoptr i32 %gep393 to i16**/
	if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		main_6_301_reg <= main_6_301;
		if (start == 1'b0 && ^(main_6_301) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_301_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %302 = load i16* %301, align 2, !tbaa !1*/
		main_6_302 = memory_controller_out_b[15:0];
end
always @(*) begin
	/* main: %6*/
	/*   %gep_int394 = ptrtoint i16* %9 to i32*/
		main_6_gep_int394 = main_6_9;
end
always @(*) begin
	/* main: %6*/
	/*   %gep395 = add i32 %gep_int394, 98*/
		main_6_gep395 = main_signed_add_32_193;
end
always @(*) begin
	/* main: %6*/
	/*   %303 = inttoptr i32 %gep395 to i16**/
		main_6_303 = main_6_gep395;
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %303 = inttoptr i32 %gep395 to i16**/
	if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		main_6_303_reg <= main_6_303;
		if (start == 1'b0 && ^(main_6_303) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_303_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %gep_int396 = ptrtoint i16* %8 to i32*/
		main_6_gep_int396 = main_6_8;
end
always @(*) begin
	/* main: %6*/
	/*   %gep397 = add i32 %gep_int396, 70*/
		main_6_gep397 = main_signed_add_32_194;
end
always @(*) begin
	/* main: %6*/
	/*   %304 = inttoptr i32 %gep397 to i16**/
		main_6_304 = main_6_gep397;
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %304 = inttoptr i32 %gep397 to i16**/
	if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		main_6_304_reg <= main_6_304;
		if (start == 1'b0 && ^(main_6_304) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_304_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %305 = load i16* %304, align 2, !tbaa !1*/
		main_6_305 = memory_controller_out_b[15:0];
end
always @(*) begin
	/* main: %6*/
	/*   %gep_int398 = ptrtoint i16* %10 to i32*/
		main_6_gep_int398 = main_6_10;
end
always @(*) begin
	/* main: %6*/
	/*   %gep399 = add i32 %gep_int398, 98*/
		main_6_gep399 = main_signed_add_32_195;
end
always @(*) begin
	/* main: %6*/
	/*   %306 = inttoptr i32 %gep399 to i16**/
		main_6_306 = main_6_gep399;
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %306 = inttoptr i32 %gep399 to i16**/
	if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		main_6_306_reg <= main_6_306;
		if (start == 1'b0 && ^(main_6_306) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_306_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %gep_int400 = ptrtoint i16* %7 to i32*/
		main_6_gep_int400 = main_6_7;
end
always @(*) begin
	/* main: %6*/
	/*   %gep401 = add i32 %gep_int400, 38*/
		main_6_gep401 = main_signed_add_32_196;
end
always @(*) begin
	/* main: %6*/
	/*   %307 = inttoptr i32 %gep401 to i16**/
		main_6_307 = main_6_gep401;
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %307 = inttoptr i32 %gep401 to i16**/
	if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		main_6_307_reg <= main_6_307;
		if (start == 1'b0 && ^(main_6_307) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_307_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %308 = load i16* %307, align 2, !tbaa !1*/
		main_6_308 = memory_controller_out_b[15:0];
end
always @(*) begin
	/* main: %6*/
	/*   %gep_int402 = ptrtoint i16* %9 to i32*/
		main_6_gep_int402 = main_6_9;
end
always @(*) begin
	/* main: %6*/
	/*   %gep403 = add i32 %gep_int402, 100*/
		main_6_gep403 = main_signed_add_32_197;
end
always @(*) begin
	/* main: %6*/
	/*   %309 = inttoptr i32 %gep403 to i16**/
		main_6_309 = main_6_gep403;
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %309 = inttoptr i32 %gep403 to i16**/
	if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		main_6_309_reg <= main_6_309;
		if (start == 1'b0 && ^(main_6_309) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_309_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %gep_int404 = ptrtoint i16* %8 to i32*/
		main_6_gep_int404 = main_6_8;
end
always @(*) begin
	/* main: %6*/
	/*   %gep405 = add i32 %gep_int404, 38*/
		main_6_gep405 = main_signed_add_32_198;
end
always @(*) begin
	/* main: %6*/
	/*   %310 = inttoptr i32 %gep405 to i16**/
		main_6_310 = main_6_gep405;
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %310 = inttoptr i32 %gep405 to i16**/
	if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		main_6_310_reg <= main_6_310;
		if (start == 1'b0 && ^(main_6_310) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_310_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %311 = load i16* %310, align 2, !tbaa !1*/
		main_6_311 = memory_controller_out_b[15:0];
end
always @(*) begin
	/* main: %6*/
	/*   %gep_int406 = ptrtoint i16* %10 to i32*/
		main_6_gep_int406 = main_6_10;
end
always @(*) begin
	/* main: %6*/
	/*   %gep407 = add i32 %gep_int406, 100*/
		main_6_gep407 = main_signed_add_32_199;
end
always @(*) begin
	/* main: %6*/
	/*   %312 = inttoptr i32 %gep407 to i16**/
		main_6_312 = main_6_gep407;
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %312 = inttoptr i32 %gep407 to i16**/
	if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		main_6_312_reg <= main_6_312;
		if (start == 1'b0 && ^(main_6_312) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_312_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %gep_int408 = ptrtoint i16* %7 to i32*/
		main_6_gep_int408 = main_6_7;
end
always @(*) begin
	/* main: %6*/
	/*   %gep409 = add i32 %gep_int408, 102*/
		main_6_gep409 = main_signed_add_32_200;
end
always @(*) begin
	/* main: %6*/
	/*   %313 = inttoptr i32 %gep409 to i16**/
		main_6_313 = main_6_gep409;
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %313 = inttoptr i32 %gep409 to i16**/
	if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		main_6_313_reg <= main_6_313;
		if (start == 1'b0 && ^(main_6_313) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_313_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %314 = load i16* %313, align 2, !tbaa !1*/
		main_6_314 = memory_controller_out_b[15:0];
end
always @(*) begin
	/* main: %6*/
	/*   %gep_int410 = ptrtoint i16* %9 to i32*/
		main_6_gep_int410 = main_6_9;
end
always @(*) begin
	/* main: %6*/
	/*   %gep411 = add i32 %gep_int410, 102*/
		main_6_gep411 = main_signed_add_32_201;
end
always @(*) begin
	/* main: %6*/
	/*   %315 = inttoptr i32 %gep411 to i16**/
		main_6_315 = main_6_gep411;
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %315 = inttoptr i32 %gep411 to i16**/
	if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		main_6_315_reg <= main_6_315;
		if (start == 1'b0 && ^(main_6_315) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_315_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %gep_int412 = ptrtoint i16* %8 to i32*/
		main_6_gep_int412 = main_6_8;
end
always @(*) begin
	/* main: %6*/
	/*   %gep413 = add i32 %gep_int412, 102*/
		main_6_gep413 = main_signed_add_32_202;
end
always @(*) begin
	/* main: %6*/
	/*   %316 = inttoptr i32 %gep413 to i16**/
		main_6_316 = main_6_gep413;
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %316 = inttoptr i32 %gep413 to i16**/
	if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		main_6_316_reg <= main_6_316;
		if (start == 1'b0 && ^(main_6_316) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_316_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %317 = load i16* %316, align 2, !tbaa !1*/
		main_6_317 = memory_controller_out_b[15:0];
end
always @(*) begin
	/* main: %6*/
	/*   %gep_int414 = ptrtoint i16* %10 to i32*/
		main_6_gep_int414 = main_6_10;
end
always @(*) begin
	/* main: %6*/
	/*   %gep415 = add i32 %gep_int414, 102*/
		main_6_gep415 = main_signed_add_32_203;
end
always @(*) begin
	/* main: %6*/
	/*   %318 = inttoptr i32 %gep415 to i16**/
		main_6_318 = main_6_gep415;
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %318 = inttoptr i32 %gep415 to i16**/
	if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		main_6_318_reg <= main_6_318;
		if (start == 1'b0 && ^(main_6_318) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_318_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %gep_int416 = ptrtoint i16* %7 to i32*/
		main_6_gep_int416 = main_6_7;
end
always @(*) begin
	/* main: %6*/
	/*   %gep417 = add i32 %gep_int416, 22*/
		main_6_gep417 = main_signed_add_32_204;
end
always @(*) begin
	/* main: %6*/
	/*   %319 = inttoptr i32 %gep417 to i16**/
		main_6_319 = main_6_gep417;
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %319 = inttoptr i32 %gep417 to i16**/
	if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		main_6_319_reg <= main_6_319;
		if (start == 1'b0 && ^(main_6_319) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_319_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %320 = load i16* %319, align 2, !tbaa !1*/
		main_6_320 = memory_controller_out_b[15:0];
end
always @(*) begin
	/* main: %6*/
	/*   %gep_int418 = ptrtoint i16* %9 to i32*/
		main_6_gep_int418 = main_6_9;
end
always @(*) begin
	/* main: %6*/
	/*   %gep419 = add i32 %gep_int418, 104*/
		main_6_gep419 = main_signed_add_32_205;
end
always @(*) begin
	/* main: %6*/
	/*   %321 = inttoptr i32 %gep419 to i16**/
		main_6_321 = main_6_gep419;
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %321 = inttoptr i32 %gep419 to i16**/
	if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		main_6_321_reg <= main_6_321;
		if (start == 1'b0 && ^(main_6_321) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_321_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %gep_int420 = ptrtoint i16* %8 to i32*/
		main_6_gep_int420 = main_6_8;
end
always @(*) begin
	/* main: %6*/
	/*   %gep421 = add i32 %gep_int420, 22*/
		main_6_gep421 = main_signed_add_32_206;
end
always @(*) begin
	/* main: %6*/
	/*   %322 = inttoptr i32 %gep421 to i16**/
		main_6_322 = main_6_gep421;
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %322 = inttoptr i32 %gep421 to i16**/
	if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		main_6_322_reg <= main_6_322;
		if (start == 1'b0 && ^(main_6_322) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_322_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %323 = load i16* %322, align 2, !tbaa !1*/
		main_6_323 = memory_controller_out_b[15:0];
end
always @(*) begin
	/* main: %6*/
	/*   %gep_int422 = ptrtoint i16* %10 to i32*/
		main_6_gep_int422 = main_6_10;
end
always @(*) begin
	/* main: %6*/
	/*   %gep423 = add i32 %gep_int422, 104*/
		main_6_gep423 = main_signed_add_32_207;
end
always @(*) begin
	/* main: %6*/
	/*   %324 = inttoptr i32 %gep423 to i16**/
		main_6_324 = main_6_gep423;
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %324 = inttoptr i32 %gep423 to i16**/
	if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		main_6_324_reg <= main_6_324;
		if (start == 1'b0 && ^(main_6_324) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_324_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %gep_int424 = ptrtoint i16* %7 to i32*/
		main_6_gep_int424 = main_6_7;
end
always @(*) begin
	/* main: %6*/
	/*   %gep425 = add i32 %gep_int424, 86*/
		main_6_gep425 = main_signed_add_32_208;
end
always @(*) begin
	/* main: %6*/
	/*   %325 = inttoptr i32 %gep425 to i16**/
		main_6_325 = main_6_gep425;
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %325 = inttoptr i32 %gep425 to i16**/
	if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		main_6_325_reg <= main_6_325;
		if (start == 1'b0 && ^(main_6_325) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_325_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %326 = load i16* %325, align 2, !tbaa !1*/
		main_6_326 = memory_controller_out_b[15:0];
end
always @(*) begin
	/* main: %6*/
	/*   %gep_int426 = ptrtoint i16* %9 to i32*/
		main_6_gep_int426 = main_6_9;
end
always @(*) begin
	/* main: %6*/
	/*   %gep427 = add i32 %gep_int426, 106*/
		main_6_gep427 = main_signed_add_32_209;
end
always @(*) begin
	/* main: %6*/
	/*   %327 = inttoptr i32 %gep427 to i16**/
		main_6_327 = main_6_gep427;
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %327 = inttoptr i32 %gep427 to i16**/
	if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		main_6_327_reg <= main_6_327;
		if (start == 1'b0 && ^(main_6_327) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_327_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %gep_int428 = ptrtoint i16* %8 to i32*/
		main_6_gep_int428 = main_6_8;
end
always @(*) begin
	/* main: %6*/
	/*   %gep429 = add i32 %gep_int428, 86*/
		main_6_gep429 = main_signed_add_32_210;
end
always @(*) begin
	/* main: %6*/
	/*   %328 = inttoptr i32 %gep429 to i16**/
		main_6_328 = main_6_gep429;
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %328 = inttoptr i32 %gep429 to i16**/
	if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		main_6_328_reg <= main_6_328;
		if (start == 1'b0 && ^(main_6_328) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_328_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %329 = load i16* %328, align 2, !tbaa !1*/
		main_6_329 = memory_controller_out_b[15:0];
end
always @(*) begin
	/* main: %6*/
	/*   %gep_int430 = ptrtoint i16* %10 to i32*/
		main_6_gep_int430 = main_6_10;
end
always @(*) begin
	/* main: %6*/
	/*   %gep431 = add i32 %gep_int430, 106*/
		main_6_gep431 = main_signed_add_32_211;
end
always @(*) begin
	/* main: %6*/
	/*   %330 = inttoptr i32 %gep431 to i16**/
		main_6_330 = main_6_gep431;
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %330 = inttoptr i32 %gep431 to i16**/
	if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		main_6_330_reg <= main_6_330;
		if (start == 1'b0 && ^(main_6_330) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_330_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %gep_int432 = ptrtoint i16* %7 to i32*/
		main_6_gep_int432 = main_6_7;
end
always @(*) begin
	/* main: %6*/
	/*   %gep433 = add i32 %gep_int432, 54*/
		main_6_gep433 = main_signed_add_32_212;
end
always @(*) begin
	/* main: %6*/
	/*   %331 = inttoptr i32 %gep433 to i16**/
		main_6_331 = main_6_gep433;
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %331 = inttoptr i32 %gep433 to i16**/
	if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		main_6_331_reg <= main_6_331;
		if (start == 1'b0 && ^(main_6_331) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_331_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %332 = load i16* %331, align 2, !tbaa !1*/
		main_6_332 = memory_controller_out_b[15:0];
end
always @(*) begin
	/* main: %6*/
	/*   %gep_int434 = ptrtoint i16* %9 to i32*/
		main_6_gep_int434 = main_6_9;
end
always @(*) begin
	/* main: %6*/
	/*   %gep435 = add i32 %gep_int434, 108*/
		main_6_gep435 = main_signed_add_32_213;
end
always @(*) begin
	/* main: %6*/
	/*   %333 = inttoptr i32 %gep435 to i16**/
		main_6_333 = main_6_gep435;
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %333 = inttoptr i32 %gep435 to i16**/
	if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		main_6_333_reg <= main_6_333;
		if (start == 1'b0 && ^(main_6_333) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_333_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %gep_int436 = ptrtoint i16* %8 to i32*/
		main_6_gep_int436 = main_6_8;
end
always @(*) begin
	/* main: %6*/
	/*   %gep437 = add i32 %gep_int436, 54*/
		main_6_gep437 = main_signed_add_32_214;
end
always @(*) begin
	/* main: %6*/
	/*   %334 = inttoptr i32 %gep437 to i16**/
		main_6_334 = main_6_gep437;
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %334 = inttoptr i32 %gep437 to i16**/
	if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		main_6_334_reg <= main_6_334;
		if (start == 1'b0 && ^(main_6_334) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_334_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %335 = load i16* %334, align 2, !tbaa !1*/
		main_6_335 = memory_controller_out_b[15:0];
end
always @(*) begin
	/* main: %6*/
	/*   %gep_int438 = ptrtoint i16* %10 to i32*/
		main_6_gep_int438 = main_6_10;
end
always @(*) begin
	/* main: %6*/
	/*   %gep439 = add i32 %gep_int438, 108*/
		main_6_gep439 = main_signed_add_32_215;
end
always @(*) begin
	/* main: %6*/
	/*   %336 = inttoptr i32 %gep439 to i16**/
		main_6_336 = main_6_gep439;
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %336 = inttoptr i32 %gep439 to i16**/
	if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		main_6_336_reg <= main_6_336;
		if (start == 1'b0 && ^(main_6_336) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_336_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %gep_int440 = ptrtoint i16* %7 to i32*/
		main_6_gep_int440 = main_6_7;
end
always @(*) begin
	/* main: %6*/
	/*   %gep441 = add i32 %gep_int440, 118*/
		main_6_gep441 = main_signed_add_32_216;
end
always @(*) begin
	/* main: %6*/
	/*   %337 = inttoptr i32 %gep441 to i16**/
		main_6_337 = main_6_gep441;
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %337 = inttoptr i32 %gep441 to i16**/
	if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		main_6_337_reg <= main_6_337;
		if (start == 1'b0 && ^(main_6_337) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_337_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %338 = load i16* %337, align 2, !tbaa !1*/
		main_6_338 = memory_controller_out_b[15:0];
end
always @(*) begin
	/* main: %6*/
	/*   %gep_int442 = ptrtoint i16* %9 to i32*/
		main_6_gep_int442 = main_6_9;
end
always @(*) begin
	/* main: %6*/
	/*   %gep443 = add i32 %gep_int442, 110*/
		main_6_gep443 = main_signed_add_32_217;
end
always @(*) begin
	/* main: %6*/
	/*   %339 = inttoptr i32 %gep443 to i16**/
		main_6_339 = main_6_gep443;
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %339 = inttoptr i32 %gep443 to i16**/
	if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		main_6_339_reg <= main_6_339;
		if (start == 1'b0 && ^(main_6_339) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_339_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %gep_int444 = ptrtoint i16* %8 to i32*/
		main_6_gep_int444 = main_6_8;
end
always @(*) begin
	/* main: %6*/
	/*   %gep445 = add i32 %gep_int444, 118*/
		main_6_gep445 = main_signed_add_32_218;
end
always @(*) begin
	/* main: %6*/
	/*   %340 = inttoptr i32 %gep445 to i16**/
		main_6_340 = main_6_gep445;
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %340 = inttoptr i32 %gep445 to i16**/
	if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		main_6_340_reg <= main_6_340;
		if (start == 1'b0 && ^(main_6_340) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_340_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %341 = load i16* %340, align 2, !tbaa !1*/
		main_6_341 = memory_controller_out_b[15:0];
end
always @(*) begin
	/* main: %6*/
	/*   %gep_int446 = ptrtoint i16* %10 to i32*/
		main_6_gep_int446 = main_6_10;
end
always @(*) begin
	/* main: %6*/
	/*   %gep447 = add i32 %gep_int446, 110*/
		main_6_gep447 = main_signed_add_32_219;
end
always @(*) begin
	/* main: %6*/
	/*   %342 = inttoptr i32 %gep447 to i16**/
		main_6_342 = main_6_gep447;
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %342 = inttoptr i32 %gep447 to i16**/
	if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		main_6_342_reg <= main_6_342;
		if (start == 1'b0 && ^(main_6_342) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_342_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %gep_int448 = ptrtoint i16* %7 to i32*/
		main_6_gep_int448 = main_6_7;
end
always @(*) begin
	/* main: %6*/
	/*   %gep449 = add i32 %gep_int448, 14*/
		main_6_gep449 = main_signed_add_32_220;
end
always @(*) begin
	/* main: %6*/
	/*   %343 = inttoptr i32 %gep449 to i16**/
		main_6_343 = main_6_gep449;
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %343 = inttoptr i32 %gep449 to i16**/
	if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		main_6_343_reg <= main_6_343;
		if (start == 1'b0 && ^(main_6_343) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_343_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %344 = load i16* %343, align 2, !tbaa !1*/
		main_6_344 = memory_controller_out_b[15:0];
end
always @(*) begin
	/* main: %6*/
	/*   %gep_int450 = ptrtoint i16* %9 to i32*/
		main_6_gep_int450 = main_6_9;
end
always @(*) begin
	/* main: %6*/
	/*   %gep451 = add i32 %gep_int450, 112*/
		main_6_gep451 = main_signed_add_32_221;
end
always @(*) begin
	/* main: %6*/
	/*   %345 = inttoptr i32 %gep451 to i16**/
		main_6_345 = main_6_gep451;
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %345 = inttoptr i32 %gep451 to i16**/
	if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		main_6_345_reg <= main_6_345;
		if (start == 1'b0 && ^(main_6_345) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_345_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %gep_int452 = ptrtoint i16* %8 to i32*/
		main_6_gep_int452 = main_6_8;
end
always @(*) begin
	/* main: %6*/
	/*   %gep453 = add i32 %gep_int452, 14*/
		main_6_gep453 = main_signed_add_32_222;
end
always @(*) begin
	/* main: %6*/
	/*   %346 = inttoptr i32 %gep453 to i16**/
		main_6_346 = main_6_gep453;
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %346 = inttoptr i32 %gep453 to i16**/
	if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		main_6_346_reg <= main_6_346;
		if (start == 1'b0 && ^(main_6_346) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_346_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %347 = load i16* %346, align 2, !tbaa !1*/
		main_6_347 = memory_controller_out_b[15:0];
end
always @(*) begin
	/* main: %6*/
	/*   %gep_int454 = ptrtoint i16* %10 to i32*/
		main_6_gep_int454 = main_6_10;
end
always @(*) begin
	/* main: %6*/
	/*   %gep455 = add i32 %gep_int454, 112*/
		main_6_gep455 = main_signed_add_32_223;
end
always @(*) begin
	/* main: %6*/
	/*   %348 = inttoptr i32 %gep455 to i16**/
		main_6_348 = main_6_gep455;
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %348 = inttoptr i32 %gep455 to i16**/
	if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		main_6_348_reg <= main_6_348;
		if (start == 1'b0 && ^(main_6_348) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_348_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %gep_int456 = ptrtoint i16* %7 to i32*/
		main_6_gep_int456 = main_6_7;
end
always @(*) begin
	/* main: %6*/
	/*   %gep457 = add i32 %gep_int456, 78*/
		main_6_gep457 = main_signed_add_32_224;
end
always @(*) begin
	/* main: %6*/
	/*   %349 = inttoptr i32 %gep457 to i16**/
		main_6_349 = main_6_gep457;
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %349 = inttoptr i32 %gep457 to i16**/
	if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		main_6_349_reg <= main_6_349;
		if (start == 1'b0 && ^(main_6_349) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_349_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %350 = load i16* %349, align 2, !tbaa !1*/
		main_6_350 = memory_controller_out_b[15:0];
end
always @(*) begin
	/* main: %6*/
	/*   %gep_int458 = ptrtoint i16* %9 to i32*/
		main_6_gep_int458 = main_6_9;
end
always @(*) begin
	/* main: %6*/
	/*   %gep459 = add i32 %gep_int458, 114*/
		main_6_gep459 = main_signed_add_32_225;
end
always @(*) begin
	/* main: %6*/
	/*   %351 = inttoptr i32 %gep459 to i16**/
		main_6_351 = main_6_gep459;
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %351 = inttoptr i32 %gep459 to i16**/
	if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		main_6_351_reg <= main_6_351;
		if (start == 1'b0 && ^(main_6_351) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_351_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %gep_int460 = ptrtoint i16* %8 to i32*/
		main_6_gep_int460 = main_6_8;
end
always @(*) begin
	/* main: %6*/
	/*   %gep461 = add i32 %gep_int460, 78*/
		main_6_gep461 = main_signed_add_32_226;
end
always @(*) begin
	/* main: %6*/
	/*   %352 = inttoptr i32 %gep461 to i16**/
		main_6_352 = main_6_gep461;
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %352 = inttoptr i32 %gep461 to i16**/
	if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		main_6_352_reg <= main_6_352;
		if (start == 1'b0 && ^(main_6_352) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_352_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %353 = load i16* %352, align 2, !tbaa !1*/
		main_6_353 = memory_controller_out_b[15:0];
end
always @(*) begin
	/* main: %6*/
	/*   %gep_int462 = ptrtoint i16* %10 to i32*/
		main_6_gep_int462 = main_6_10;
end
always @(*) begin
	/* main: %6*/
	/*   %gep463 = add i32 %gep_int462, 114*/
		main_6_gep463 = main_signed_add_32_227;
end
always @(*) begin
	/* main: %6*/
	/*   %354 = inttoptr i32 %gep463 to i16**/
		main_6_354 = main_6_gep463;
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %354 = inttoptr i32 %gep463 to i16**/
	if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		main_6_354_reg <= main_6_354;
		if (start == 1'b0 && ^(main_6_354) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_354_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %gep_int464 = ptrtoint i16* %7 to i32*/
		main_6_gep_int464 = main_6_7;
end
always @(*) begin
	/* main: %6*/
	/*   %gep465 = add i32 %gep_int464, 46*/
		main_6_gep465 = main_signed_add_32_228;
end
always @(*) begin
	/* main: %6*/
	/*   %355 = inttoptr i32 %gep465 to i16**/
		main_6_355 = main_6_gep465;
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %355 = inttoptr i32 %gep465 to i16**/
	if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		main_6_355_reg <= main_6_355;
		if (start == 1'b0 && ^(main_6_355) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_355_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %356 = load i16* %355, align 2, !tbaa !1*/
		main_6_356 = memory_controller_out_b[15:0];
end
always @(*) begin
	/* main: %6*/
	/*   %gep_int466 = ptrtoint i16* %9 to i32*/
		main_6_gep_int466 = main_6_9;
end
always @(*) begin
	/* main: %6*/
	/*   %gep467 = add i32 %gep_int466, 116*/
		main_6_gep467 = main_signed_add_32_229;
end
always @(*) begin
	/* main: %6*/
	/*   %357 = inttoptr i32 %gep467 to i16**/
		main_6_357 = main_6_gep467;
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %357 = inttoptr i32 %gep467 to i16**/
	if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		main_6_357_reg <= main_6_357;
		if (start == 1'b0 && ^(main_6_357) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_357_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %gep_int468 = ptrtoint i16* %8 to i32*/
		main_6_gep_int468 = main_6_8;
end
always @(*) begin
	/* main: %6*/
	/*   %gep469 = add i32 %gep_int468, 46*/
		main_6_gep469 = main_signed_add_32_230;
end
always @(*) begin
	/* main: %6*/
	/*   %358 = inttoptr i32 %gep469 to i16**/
		main_6_358 = main_6_gep469;
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %358 = inttoptr i32 %gep469 to i16**/
	if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		main_6_358_reg <= main_6_358;
		if (start == 1'b0 && ^(main_6_358) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_358_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %359 = load i16* %358, align 2, !tbaa !1*/
		main_6_359 = memory_controller_out_b[15:0];
end
always @(*) begin
	/* main: %6*/
	/*   %gep_int470 = ptrtoint i16* %10 to i32*/
		main_6_gep_int470 = main_6_10;
end
always @(*) begin
	/* main: %6*/
	/*   %gep471 = add i32 %gep_int470, 116*/
		main_6_gep471 = main_signed_add_32_231;
end
always @(*) begin
	/* main: %6*/
	/*   %360 = inttoptr i32 %gep471 to i16**/
		main_6_360 = main_6_gep471;
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %360 = inttoptr i32 %gep471 to i16**/
	if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		main_6_360_reg <= main_6_360;
		if (start == 1'b0 && ^(main_6_360) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_360_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %gep_int472 = ptrtoint i16* %7 to i32*/
		main_6_gep_int472 = main_6_7;
end
always @(*) begin
	/* main: %6*/
	/*   %gep473 = add i32 %gep_int472, 110*/
		main_6_gep473 = main_signed_add_32_232;
end
always @(*) begin
	/* main: %6*/
	/*   %361 = inttoptr i32 %gep473 to i16**/
		main_6_361 = main_6_gep473;
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %361 = inttoptr i32 %gep473 to i16**/
	if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		main_6_361_reg <= main_6_361;
		if (start == 1'b0 && ^(main_6_361) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_361_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %362 = load i16* %361, align 2, !tbaa !1*/
		main_6_362 = memory_controller_out_b[15:0];
end
always @(*) begin
	/* main: %6*/
	/*   %gep_int474 = ptrtoint i16* %9 to i32*/
		main_6_gep_int474 = main_6_9;
end
always @(*) begin
	/* main: %6*/
	/*   %gep475 = add i32 %gep_int474, 118*/
		main_6_gep475 = main_signed_add_32_233;
end
always @(*) begin
	/* main: %6*/
	/*   %363 = inttoptr i32 %gep475 to i16**/
		main_6_363 = main_6_gep475;
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %363 = inttoptr i32 %gep475 to i16**/
	if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		main_6_363_reg <= main_6_363;
		if (start == 1'b0 && ^(main_6_363) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_363_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %gep_int476 = ptrtoint i16* %8 to i32*/
		main_6_gep_int476 = main_6_8;
end
always @(*) begin
	/* main: %6*/
	/*   %gep477 = add i32 %gep_int476, 110*/
		main_6_gep477 = main_signed_add_32_234;
end
always @(*) begin
	/* main: %6*/
	/*   %364 = inttoptr i32 %gep477 to i16**/
		main_6_364 = main_6_gep477;
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %364 = inttoptr i32 %gep477 to i16**/
	if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		main_6_364_reg <= main_6_364;
		if (start == 1'b0 && ^(main_6_364) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_364_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %365 = load i16* %364, align 2, !tbaa !1*/
		main_6_365 = memory_controller_out_b[15:0];
end
always @(*) begin
	/* main: %6*/
	/*   %gep_int478 = ptrtoint i16* %10 to i32*/
		main_6_gep_int478 = main_6_10;
end
always @(*) begin
	/* main: %6*/
	/*   %gep479 = add i32 %gep_int478, 118*/
		main_6_gep479 = main_signed_add_32_235;
end
always @(*) begin
	/* main: %6*/
	/*   %366 = inttoptr i32 %gep479 to i16**/
		main_6_366 = main_6_gep479;
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %366 = inttoptr i32 %gep479 to i16**/
	if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		main_6_366_reg <= main_6_366;
		if (start == 1'b0 && ^(main_6_366) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_366_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %gep_int480 = ptrtoint i16* %7 to i32*/
		main_6_gep_int480 = main_6_7;
end
always @(*) begin
	/* main: %6*/
	/*   %gep481 = add i32 %gep_int480, 30*/
		main_6_gep481 = main_signed_add_32_236;
end
always @(*) begin
	/* main: %6*/
	/*   %367 = inttoptr i32 %gep481 to i16**/
		main_6_367 = main_6_gep481;
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %367 = inttoptr i32 %gep481 to i16**/
	if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		main_6_367_reg <= main_6_367;
		if (start == 1'b0 && ^(main_6_367) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_367_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %368 = load i16* %367, align 2, !tbaa !1*/
		main_6_368 = memory_controller_out_b[15:0];
end
always @(*) begin
	/* main: %6*/
	/*   %gep_int482 = ptrtoint i16* %9 to i32*/
		main_6_gep_int482 = main_6_9;
end
always @(*) begin
	/* main: %6*/
	/*   %gep483 = add i32 %gep_int482, 120*/
		main_6_gep483 = main_signed_add_32_237;
end
always @(*) begin
	/* main: %6*/
	/*   %369 = inttoptr i32 %gep483 to i16**/
		main_6_369 = main_6_gep483;
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %369 = inttoptr i32 %gep483 to i16**/
	if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		main_6_369_reg <= main_6_369;
		if (start == 1'b0 && ^(main_6_369) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_369_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %gep_int484 = ptrtoint i16* %8 to i32*/
		main_6_gep_int484 = main_6_8;
end
always @(*) begin
	/* main: %6*/
	/*   %gep485 = add i32 %gep_int484, 30*/
		main_6_gep485 = main_signed_add_32_238;
end
always @(*) begin
	/* main: %6*/
	/*   %370 = inttoptr i32 %gep485 to i16**/
		main_6_370 = main_6_gep485;
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %370 = inttoptr i32 %gep485 to i16**/
	if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		main_6_370_reg <= main_6_370;
		if (start == 1'b0 && ^(main_6_370) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_370_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %371 = load i16* %370, align 2, !tbaa !1*/
		main_6_371 = memory_controller_out_b[15:0];
end
always @(*) begin
	/* main: %6*/
	/*   %gep_int486 = ptrtoint i16* %10 to i32*/
		main_6_gep_int486 = main_6_10;
end
always @(*) begin
	/* main: %6*/
	/*   %gep487 = add i32 %gep_int486, 120*/
		main_6_gep487 = main_signed_add_32_239;
end
always @(*) begin
	/* main: %6*/
	/*   %372 = inttoptr i32 %gep487 to i16**/
		main_6_372 = main_6_gep487;
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %372 = inttoptr i32 %gep487 to i16**/
	if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		main_6_372_reg <= main_6_372;
		if (start == 1'b0 && ^(main_6_372) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_372_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %gep_int488 = ptrtoint i16* %7 to i32*/
		main_6_gep_int488 = main_6_7;
end
always @(*) begin
	/* main: %6*/
	/*   %gep489 = add i32 %gep_int488, 94*/
		main_6_gep489 = main_signed_add_32_240;
end
always @(*) begin
	/* main: %6*/
	/*   %373 = inttoptr i32 %gep489 to i16**/
		main_6_373 = main_6_gep489;
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %373 = inttoptr i32 %gep489 to i16**/
	if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		main_6_373_reg <= main_6_373;
		if (start == 1'b0 && ^(main_6_373) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_373_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %374 = load i16* %373, align 2, !tbaa !1*/
		main_6_374 = memory_controller_out_b[15:0];
end
always @(*) begin
	/* main: %6*/
	/*   %gep_int490 = ptrtoint i16* %9 to i32*/
		main_6_gep_int490 = main_6_9;
end
always @(*) begin
	/* main: %6*/
	/*   %gep491 = add i32 %gep_int490, 122*/
		main_6_gep491 = main_signed_add_32_241;
end
always @(*) begin
	/* main: %6*/
	/*   %375 = inttoptr i32 %gep491 to i16**/
		main_6_375 = main_6_gep491;
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %375 = inttoptr i32 %gep491 to i16**/
	if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		main_6_375_reg <= main_6_375;
		if (start == 1'b0 && ^(main_6_375) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_375_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %gep_int492 = ptrtoint i16* %8 to i32*/
		main_6_gep_int492 = main_6_8;
end
always @(*) begin
	/* main: %6*/
	/*   %gep493 = add i32 %gep_int492, 94*/
		main_6_gep493 = main_signed_add_32_242;
end
always @(*) begin
	/* main: %6*/
	/*   %376 = inttoptr i32 %gep493 to i16**/
		main_6_376 = main_6_gep493;
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %376 = inttoptr i32 %gep493 to i16**/
	if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		main_6_376_reg <= main_6_376;
		if (start == 1'b0 && ^(main_6_376) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_376_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %377 = load i16* %376, align 2, !tbaa !1*/
		main_6_377 = memory_controller_out_b[15:0];
end
always @(*) begin
	/* main: %6*/
	/*   %gep_int494 = ptrtoint i16* %10 to i32*/
		main_6_gep_int494 = main_6_10;
end
always @(*) begin
	/* main: %6*/
	/*   %gep495 = add i32 %gep_int494, 122*/
		main_6_gep495 = main_signed_add_32_243;
end
always @(*) begin
	/* main: %6*/
	/*   %378 = inttoptr i32 %gep495 to i16**/
		main_6_378 = main_6_gep495;
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %378 = inttoptr i32 %gep495 to i16**/
	if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		main_6_378_reg <= main_6_378;
		if (start == 1'b0 && ^(main_6_378) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_378_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %gep_int496 = ptrtoint i16* %7 to i32*/
		main_6_gep_int496 = main_6_7;
end
always @(*) begin
	/* main: %6*/
	/*   %gep497 = add i32 %gep_int496, 62*/
		main_6_gep497 = main_signed_add_32_244;
end
always @(*) begin
	/* main: %6*/
	/*   %379 = inttoptr i32 %gep497 to i16**/
		main_6_379 = main_6_gep497;
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %379 = inttoptr i32 %gep497 to i16**/
	if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		main_6_379_reg <= main_6_379;
		if (start == 1'b0 && ^(main_6_379) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_379_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %380 = load i16* %379, align 2, !tbaa !1*/
		main_6_380 = memory_controller_out_b[15:0];
end
always @(*) begin
	/* main: %6*/
	/*   %gep_int498 = ptrtoint i16* %9 to i32*/
		main_6_gep_int498 = main_6_9;
end
always @(*) begin
	/* main: %6*/
	/*   %gep499 = add i32 %gep_int498, 124*/
		main_6_gep499 = main_signed_add_32_245;
end
always @(*) begin
	/* main: %6*/
	/*   %381 = inttoptr i32 %gep499 to i16**/
		main_6_381 = main_6_gep499;
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %381 = inttoptr i32 %gep499 to i16**/
	if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		main_6_381_reg <= main_6_381;
		if (start == 1'b0 && ^(main_6_381) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_381_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %gep_int500 = ptrtoint i16* %8 to i32*/
		main_6_gep_int500 = main_6_8;
end
always @(*) begin
	/* main: %6*/
	/*   %gep501 = add i32 %gep_int500, 62*/
		main_6_gep501 = main_signed_add_32_246;
end
always @(*) begin
	/* main: %6*/
	/*   %382 = inttoptr i32 %gep501 to i16**/
		main_6_382 = main_6_gep501;
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %382 = inttoptr i32 %gep501 to i16**/
	if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		main_6_382_reg <= main_6_382;
		if (start == 1'b0 && ^(main_6_382) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_382_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %383 = load i16* %382, align 2, !tbaa !1*/
		main_6_383 = memory_controller_out_b[15:0];
end
always @(*) begin
	/* main: %6*/
	/*   %gep_int502 = ptrtoint i16* %10 to i32*/
		main_6_gep_int502 = main_6_10;
end
always @(*) begin
	/* main: %6*/
	/*   %gep503 = add i32 %gep_int502, 124*/
		main_6_gep503 = main_signed_add_32_247;
end
always @(*) begin
	/* main: %6*/
	/*   %384 = inttoptr i32 %gep503 to i16**/
		main_6_384 = main_6_gep503;
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %384 = inttoptr i32 %gep503 to i16**/
	if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		main_6_384_reg <= main_6_384;
		if (start == 1'b0 && ^(main_6_384) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_384_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %gep_int504 = ptrtoint i16* %7 to i32*/
		main_6_gep_int504 = main_6_7;
end
always @(*) begin
	/* main: %6*/
	/*   %gep505 = add i32 %gep_int504, 126*/
		main_6_gep505 = main_signed_add_32_248;
end
always @(*) begin
	/* main: %6*/
	/*   %385 = inttoptr i32 %gep505 to i16**/
		main_6_385 = main_6_gep505;
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %385 = inttoptr i32 %gep505 to i16**/
	if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		main_6_385_reg <= main_6_385;
		if (start == 1'b0 && ^(main_6_385) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_385_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %386 = load i16* %385, align 2, !tbaa !1*/
		main_6_386 = memory_controller_out_b[15:0];
end
always @(*) begin
	/* main: %6*/
	/*   %gep_int506 = ptrtoint i16* %9 to i32*/
		main_6_gep_int506 = main_6_9;
end
always @(*) begin
	/* main: %6*/
	/*   %gep507 = add i32 %gep_int506, 126*/
		main_6_gep507 = main_signed_add_32_249;
end
always @(*) begin
	/* main: %6*/
	/*   %387 = inttoptr i32 %gep507 to i16**/
		main_6_387 = main_6_gep507;
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %387 = inttoptr i32 %gep507 to i16**/
	if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		main_6_387_reg <= main_6_387;
		if (start == 1'b0 && ^(main_6_387) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_387_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %gep_int508 = ptrtoint i16* %8 to i32*/
		main_6_gep_int508 = main_6_8;
end
always @(*) begin
	/* main: %6*/
	/*   %gep509 = add i32 %gep_int508, 126*/
		main_6_gep509 = main_signed_add_32_250;
end
always @(*) begin
	/* main: %6*/
	/*   %388 = inttoptr i32 %gep509 to i16**/
		main_6_388 = main_6_gep509;
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %388 = inttoptr i32 %gep509 to i16**/
	if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		main_6_388_reg <= main_6_388;
		if (start == 1'b0 && ^(main_6_388) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_388_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %389 = load i16* %388, align 2, !tbaa !1*/
		main_6_389 = memory_controller_out_b[15:0];
end
always @(*) begin
	/* main: %6*/
	/*   %gep_int510 = ptrtoint i16* %10 to i32*/
		main_6_gep_int510 = main_6_10;
end
always @(*) begin
	/* main: %6*/
	/*   %gep511 = add i32 %gep_int510, 126*/
		main_6_gep511 = main_signed_add_32_251;
end
always @(*) begin
	/* main: %6*/
	/*   %390 = inttoptr i32 %gep511 to i16**/
		main_6_390 = main_6_gep511;
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %390 = inttoptr i32 %gep511 to i16**/
	if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		main_6_390_reg <= main_6_390;
		if (start == 1'b0 && ^(main_6_390) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_390_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %l.08.i = phi i32 [ 1, %6 ], [ %phitmp.i, %._crit_edge6.i ]*/
	if (((cur_state == LEGUP_F_main_BB__6_395) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_l08i = 32'd1;
	end
	/* main: %.preheader.i*/
	/*   %l.08.i = phi i32 [ 1, %6 ], [ %phitmp.i, %._crit_edge6.i ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__crit_edge6i_415) & (memory_controller_waitrequest == 1'd0)) & (main__crit_edge6i_454 == 1'd1))) */ begin
		main_preheaderi_l08i = main__crit_edge6i_phitmpi;
	end
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %l.08.i = phi i32 [ 1, %6 ], [ %phitmp.i, %._crit_edge6.i ]*/
	if (((cur_state == LEGUP_F_main_BB__6_395) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_l08i_reg <= main_preheaderi_l08i;
		if (start == 1'b0 && ^(main_preheaderi_l08i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_l08i_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %l.08.i = phi i32 [ 1, %6 ], [ %phitmp.i, %._crit_edge6.i ]*/
	if ((((cur_state == LEGUP_F_main_BB__crit_edge6i_415) & (memory_controller_waitrequest == 1'd0)) & (main__crit_edge6i_454 == 1'd1))) begin
		main_preheaderi_l08i_reg <= main_preheaderi_l08i;
		if (start == 1'b0 && ^(main_preheaderi_l08i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_l08i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %sin_index.07.i = phi i16 [ 0, %6 ], [ %sin_index.1.lcssa.i, %._crit_edge6.i ]*/
	if (((cur_state == LEGUP_F_main_BB__6_395) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_sin_index07i = 16'd0;
	end
	/* main: %.preheader.i*/
	/*   %sin_index.07.i = phi i16 [ 0, %6 ], [ %sin_index.1.lcssa.i, %._crit_edge6.i ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__crit_edge6i_415) & (memory_controller_waitrequest == 1'd0)) & (main__crit_edge6i_454 == 1'd1))) */ begin
		main_preheaderi_sin_index07i = main__crit_edge6i_sin_index1lcssai_reg;
	end
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %sin_index.07.i = phi i16 [ 0, %6 ], [ %sin_index.1.lcssa.i, %._crit_edge6.i ]*/
	if (((cur_state == LEGUP_F_main_BB__6_395) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_sin_index07i_reg <= main_preheaderi_sin_index07i;
		if (start == 1'b0 && ^(main_preheaderi_sin_index07i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_sin_index07i_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %sin_index.07.i = phi i16 [ 0, %6 ], [ %sin_index.1.lcssa.i, %._crit_edge6.i ]*/
	if ((((cur_state == LEGUP_F_main_BB__crit_edge6i_415) & (memory_controller_waitrequest == 1'd0)) & (main__crit_edge6i_454 == 1'd1))) begin
		main_preheaderi_sin_index07i_reg <= main_preheaderi_sin_index07i;
		if (start == 1'b0 && ^(main_preheaderi_sin_index07i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_sin_index07i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %391 = icmp sgt i32 %l.08.i, 0*/
		main_preheaderi_391 = ($signed(main_preheaderi_l08i_reg) > $signed(32'd0));
end
always @(*) begin
	/* main: %.lr.ph5.i*/
	/*   %392 = shl nsw i32 %l.08.i, 1*/
		main_lrph5i_392 = (main_preheaderi_l08i_reg <<< (32'd1 % 32));
end
always @(posedge clk) begin
	/* main: %.lr.ph5.i*/
	/*   %392 = shl nsw i32 %l.08.i, 1*/
	if ((cur_state == LEGUP_F_main_BB_lrph5i_397)) begin
		main_lrph5i_392_reg <= main_lrph5i_392;
		if (start == 1'b0 && ^(main_lrph5i_392) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph5i_392_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %393*/
	/*   %m.04.i = phi i16 [ 0, %.lr.ph5.i ], [ %451, %._crit_edge.i ]*/
	if (((cur_state == LEGUP_F_main_BB_lrph5i_397) & (memory_controller_waitrequest == 1'd0))) begin
		main_393_m04i = 16'd0;
	end
	/* main: %393*/
	/*   %m.04.i = phi i16 [ 0, %.lr.ph5.i ], [ %451, %._crit_edge.i ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__crit_edgei_414) & (memory_controller_waitrequest == 1'd0)) & (main__crit_edgei_453 == 1'd1))) */ begin
		main_393_m04i = main__crit_edgei_451;
	end
end
always @(posedge clk) begin
	/* main: %393*/
	/*   %m.04.i = phi i16 [ 0, %.lr.ph5.i ], [ %451, %._crit_edge.i ]*/
	if (((cur_state == LEGUP_F_main_BB_lrph5i_397) & (memory_controller_waitrequest == 1'd0))) begin
		main_393_m04i_reg <= main_393_m04i;
		if (start == 1'b0 && ^(main_393_m04i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_393_m04i_reg"); $finish; end
	end
	/* main: %393*/
	/*   %m.04.i = phi i16 [ 0, %.lr.ph5.i ], [ %451, %._crit_edge.i ]*/
	if ((((cur_state == LEGUP_F_main_BB__crit_edgei_414) & (memory_controller_waitrequest == 1'd0)) & (main__crit_edgei_453 == 1'd1))) begin
		main_393_m04i_reg <= main_393_m04i;
		if (start == 1'b0 && ^(main_393_m04i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_393_m04i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %393*/
	/*   %sin_index.13.i = phi i16 [ %sin_index.07.i, %.lr.ph5.i ], [ %395, %._crit_edge.i ]*/
	if (((cur_state == LEGUP_F_main_BB_lrph5i_397) & (memory_controller_waitrequest == 1'd0))) begin
		main_393_sin_index13i = main_preheaderi_sin_index07i_reg;
	end
	/* main: %393*/
	/*   %sin_index.13.i = phi i16 [ %sin_index.07.i, %.lr.ph5.i ], [ %395, %._crit_edge.i ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__crit_edgei_414) & (memory_controller_waitrequest == 1'd0)) & (main__crit_edgei_453 == 1'd1))) */ begin
		main_393_sin_index13i = main_393_395_reg;
	end
end
always @(posedge clk) begin
	/* main: %393*/
	/*   %sin_index.13.i = phi i16 [ %sin_index.07.i, %.lr.ph5.i ], [ %395, %._crit_edge.i ]*/
	if (((cur_state == LEGUP_F_main_BB_lrph5i_397) & (memory_controller_waitrequest == 1'd0))) begin
		main_393_sin_index13i_reg <= main_393_sin_index13i;
		if (start == 1'b0 && ^(main_393_sin_index13i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_393_sin_index13i_reg"); $finish; end
	end
	/* main: %393*/
	/*   %sin_index.13.i = phi i16 [ %sin_index.07.i, %.lr.ph5.i ], [ %395, %._crit_edge.i ]*/
	if ((((cur_state == LEGUP_F_main_BB__crit_edgei_414) & (memory_controller_waitrequest == 1'd0)) & (main__crit_edgei_453 == 1'd1))) begin
		main_393_sin_index13i_reg <= main_393_sin_index13i;
		if (start == 1'b0 && ^(main_393_sin_index13i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_393_sin_index13i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %393*/
	/*   %394 = sext i16 %sin_index.13.i to i32*/
		main_393_394 = $signed(main_393_sin_index13i_reg);
end
always @(posedge clk) begin
	/* main: %393*/
	/*   %394 = sext i16 %sin_index.13.i to i32*/
	if ((cur_state == LEGUP_F_main_BB__393_398)) begin
		main_393_394_reg <= main_393_394;
		if (start == 1'b0 && ^(main_393_394) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_393_394_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %393*/
	/*   %395 = add i16 %sin_index.13.i, 2*/
		main_393_395 = main_signed_add_16_0;
end
always @(posedge clk) begin
	/* main: %393*/
	/*   %395 = add i16 %sin_index.13.i, 2*/
	if ((cur_state == LEGUP_F_main_BB__393_398)) begin
		main_393_395_reg <= main_393_395;
		if (start == 1'b0 && ^(main_393_395) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_393_395_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %393*/
	/*   %396 = icmp slt i16 %m.04.i, 64*/
		main_393_396 = ($signed(main_393_m04i_reg) < $signed(16'd64));
end
always @(*) begin
	/* main: %.lr.ph.i*/
	/*   %397 = add nsw i32 %394, 1*/
		main_lrphi_397 = main_signed_add_32_0;
end
always @(*) begin
/* main: %.lr.ph.i*/
/*   %397 = add nsw i32 %394, 1*/
	main_lrphi_397_reg = main_1_indvarsivnext5_reg;
end
always @(*) begin
	/* main: %.lr.ph.i*/
	/*   %gep_int512 = ptrtoint [126 x i16]* @sin_lookup to i32*/
if (reset) begin main_lrphi_gep_int512 = 0; end
		main_lrphi_gep_int512 = `TAG_g_sin_lookup_a;
end
always @(posedge clk) begin
	/* main: %.lr.ph.i*/
	/*   %gep_int512 = ptrtoint [126 x i16]* @sin_lookup to i32*/
	if ((cur_state == LEGUP_F_main_BB_lrphi_399)) begin
		main_lrphi_gep_int512_reg <= main_lrphi_gep_int512;
		if (start == 1'b0 && ^(main_lrphi_gep_int512) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphi_gep_int512_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i*/
	/*   %gep_array513 = mul i32 %397, 2*/
		main_lrphi_gep_array513 = (main_lrphi_397_reg * 32'd2);
end
always @(posedge clk) begin
	/* main: %.lr.ph.i*/
	/*   %gep_array513 = mul i32 %397, 2*/
	if ((cur_state == LEGUP_F_main_BB_lrphi_400)) begin
		main_lrphi_gep_array513_reg <= main_lrphi_gep_array513;
		if (start == 1'b0 && ^(main_lrphi_gep_array513) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphi_gep_array513_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i*/
	/*   %gep514 = add i32 %gep_int512, %gep_array513*/
		main_lrphi_gep514 = main_signed_add_32_0;
end
always @(*) begin
	/* main: %.lr.ph.i*/
	/*   %398 = inttoptr i32 %gep514 to i16**/
		main_lrphi_398 = main_lrphi_gep514;
end
always @(*) begin
	/* main: %.lr.ph.i*/
	/*   %399 = load i16* %398, align 2, !tbaa !1*/
		main_lrphi_399 = memory_controller_out_b[15:0];
end
always @(*) begin
	/* main: %.lr.ph.i*/
	/*   %gep_int515 = ptrtoint [126 x i16]* @sin_lookup to i32*/
if (reset) begin main_lrphi_gep_int515 = 0; end
		main_lrphi_gep_int515 = `TAG_g_sin_lookup_a;
end
always @(posedge clk) begin
	/* main: %.lr.ph.i*/
	/*   %gep_int515 = ptrtoint [126 x i16]* @sin_lookup to i32*/
	if ((cur_state == LEGUP_F_main_BB_lrphi_399)) begin
		main_lrphi_gep_int515_reg <= main_lrphi_gep_int515;
		if (start == 1'b0 && ^(main_lrphi_gep_int515) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphi_gep_int515_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i*/
	/*   %gep_array516 = mul i32 %394, 2*/
		main_lrphi_gep_array516 = (main_393_394_reg * 32'd2);
end
always @(posedge clk) begin
	/* main: %.lr.ph.i*/
	/*   %gep_array516 = mul i32 %394, 2*/
	if ((cur_state == LEGUP_F_main_BB_lrphi_399)) begin
		main_lrphi_gep_array516_reg <= main_lrphi_gep_array516;
		if (start == 1'b0 && ^(main_lrphi_gep_array516) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphi_gep_array516_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i*/
	/*   %gep517 = add i32 %gep_int515, %gep_array516*/
		main_lrphi_gep517 = main_signed_add_32_0;
end
always @(*) begin
	/* main: %.lr.ph.i*/
	/*   %400 = inttoptr i32 %gep517 to i16**/
		main_lrphi_400 = main_lrphi_gep517;
end
always @(*) begin
	/* main: %.lr.ph.i*/
	/*   %401 = load i16* %400, align 2, !tbaa !1*/
		main_lrphi_401 = memory_controller_out_b[15:0];
end
always @(*) begin
	/* main: %.lr.ph.i*/
	/*   %402 = sext i16 %401 to i32*/
		main_lrphi_402 = $signed(main_lrphi_401);
end
always @(posedge clk) begin
	/* main: %.lr.ph.i*/
	/*   %402 = sext i16 %401 to i32*/
	if ((cur_state == LEGUP_F_main_BB_lrphi_402)) begin
		main_lrphi_402_reg <= main_lrphi_402;
		if (start == 1'b0 && ^(main_lrphi_402) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphi_402_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i*/
	/*   %403 = sext i16 %399 to i32*/
		main_lrphi_403 = $signed(main_lrphi_399);
end
always @(posedge clk) begin
	/* main: %.lr.ph.i*/
	/*   %403 = sext i16 %399 to i32*/
	if ((cur_state == LEGUP_F_main_BB_lrphi_403)) begin
		main_lrphi_403_reg <= main_lrphi_403;
		if (start == 1'b0 && ^(main_lrphi_403) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphi_403_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %404*/
	/*   %.in.i = phi i16 [ %m.04.i, %.lr.ph.i ], [ %449, %404 ]*/
	if (((cur_state == LEGUP_F_main_BB_lrphi_403) & (memory_controller_waitrequest == 1'd0))) begin
		main_404_ini = main_393_m04i_reg;
	end
	/* main: %404*/
	/*   %.in.i = phi i16 [ %m.04.i, %.lr.ph.i ], [ %449, %404 ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__404_413) & (memory_controller_waitrequest == 1'd0)) & (main_404_450_reg == 1'd1))) */ begin
		main_404_ini = main_404_449_reg;
	end
end
always @(posedge clk) begin
	/* main: %404*/
	/*   %.in.i = phi i16 [ %m.04.i, %.lr.ph.i ], [ %449, %404 ]*/
	if (((cur_state == LEGUP_F_main_BB_lrphi_403) & (memory_controller_waitrequest == 1'd0))) begin
		main_404_ini_reg <= main_404_ini;
		if (start == 1'b0 && ^(main_404_ini) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_404_ini_reg"); $finish; end
	end
	/* main: %404*/
	/*   %.in.i = phi i16 [ %m.04.i, %.lr.ph.i ], [ %449, %404 ]*/
	if ((((cur_state == LEGUP_F_main_BB__404_413) & (memory_controller_waitrequest == 1'd0)) & (main_404_450_reg == 1'd1))) begin
		main_404_ini_reg <= main_404_ini;
		if (start == 1'b0 && ^(main_404_ini) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_404_ini_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %404*/
	/*   %405 = sext i16 %.in.i to i32*/
		main_404_405 = $signed(main_404_ini_reg);
end
always @(*) begin
	/* main: %404*/
	/*   %406 = add nsw i32 %405, %l.08.i*/
		main_404_406 = main_signed_add_32_0;
end
always @(*) begin
	/* main: %404*/
	/*   %sext1.i = shl i32 %406, 16*/
		main_404_sext1i = (main_404_406 <<< (32'd16 % 32));
end
always @(*) begin
	/* main: %404*/
	/*   %407 = ashr exact i32 %sext1.i, 16*/
		main_404_407 = ($signed(main_404_sext1i) >>> 32'd16);
end
always @(posedge clk) begin
	/* main: %404*/
	/*   %407 = ashr exact i32 %sext1.i, 16*/
	if ((cur_state == LEGUP_F_main_BB__404_404)) begin
		main_404_407_reg <= main_404_407;
		if (start == 1'b0 && ^(main_404_407) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_404_407_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %404*/
	/*   %gep_int518 = ptrtoint i16* %10 to i32*/
		main_404_gep_int518 = main_6_10_reg;
end
always @(posedge clk) begin
	/* main: %404*/
	/*   %gep_int518 = ptrtoint i16* %10 to i32*/
	if ((cur_state == LEGUP_F_main_BB__404_404)) begin
		main_404_gep_int518_reg <= main_404_gep_int518;
		if (start == 1'b0 && ^(main_404_gep_int518) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_404_gep_int518_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %404*/
	/*   %gep_array519 = mul i32 %407, 2*/
		main_404_gep_array519 = (main_404_407_reg * 32'd2);
end
always @(posedge clk) begin
	/* main: %404*/
	/*   %gep_array519 = mul i32 %407, 2*/
	if ((cur_state == LEGUP_F_main_BB__404_405)) begin
		main_404_gep_array519_reg <= main_404_gep_array519;
		if (start == 1'b0 && ^(main_404_gep_array519) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_404_gep_array519_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %404*/
	/*   %gep520 = add i32 %gep_int518, %gep_array519*/
		main_404_gep520 = main_signed_add_32_0;
end
always @(*) begin
	/* main: %404*/
	/*   %408 = inttoptr i32 %gep520 to i16**/
		main_404_408 = main_404_gep520;
end
always @(posedge clk) begin
	/* main: %404*/
	/*   %408 = inttoptr i32 %gep520 to i16**/
	if ((cur_state == LEGUP_F_main_BB__404_406)) begin
		main_404_408_reg <= main_404_408;
		if (start == 1'b0 && ^(main_404_408) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_404_408_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %404*/
	/*   %409 = load i16* %408, align 2, !tbaa !1*/
		main_404_409 = memory_controller_out_a[15:0];
end
always @(*) begin
	/* main: %404*/
	/*   %410 = sext i16 %409 to i32*/
		main_404_410 = $signed(main_404_409);
end
always @(*) begin
	main_404_411 = main_signed_multiply_32_0;
end
always @(*) begin
	/* main: %404*/
	/*   %412 = lshr i32 %411, 15*/
		main_404_412 = (main_404_411 >>> (32'd15 % 32));
end
always @(*) begin
	/* main: %404*/
	/*   %413 = lshr i32 %411, 14*/
		main_404_413 = (main_404_411 >>> (32'd14 % 32));
end
always @(*) begin
	/* main: %404*/
	/*   %414 = and i32 %413, 1*/
		main_404_414 = (main_404_413 & 32'd1);
end
always @(*) begin
	/* main: %404*/
	/*   %415 = add nuw nsw i32 %414, %412*/
		main_404_415 = main_signed_add_32_0;
end
always @(*) begin
	/* main: %404*/
	/*   %416 = trunc i32 %415 to i16*/
		main_404_416 = main_404_415[15:0];
end
always @(*) begin
	/* main: %404*/
	/*   %gep_int521 = ptrtoint i16* %9 to i32*/
		main_404_gep_int521 = main_6_9_reg;
end
always @(posedge clk) begin
	/* main: %404*/
	/*   %gep_int521 = ptrtoint i16* %9 to i32*/
	if ((cur_state == LEGUP_F_main_BB__404_404)) begin
		main_404_gep_int521_reg <= main_404_gep_int521;
		if (start == 1'b0 && ^(main_404_gep_int521) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_404_gep_int521_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %404*/
	/*   %gep_array522 = mul i32 %407, 2*/
		main_404_gep_array522 = (main_404_407_reg * 32'd2);
end
always @(posedge clk) begin
	/* main: %404*/
	/*   %gep_array522 = mul i32 %407, 2*/
	if ((cur_state == LEGUP_F_main_BB__404_405)) begin
		main_404_gep_array522_reg <= main_404_gep_array522;
		if (start == 1'b0 && ^(main_404_gep_array522) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_404_gep_array522_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %404*/
	/*   %gep523 = add i32 %gep_int521, %gep_array522*/
		main_404_gep523 = main_signed_add_32_251;
end
always @(*) begin
	/* main: %404*/
	/*   %417 = inttoptr i32 %gep523 to i16**/
		main_404_417 = main_404_gep523;
end
always @(posedge clk) begin
	/* main: %404*/
	/*   %417 = inttoptr i32 %gep523 to i16**/
	if ((cur_state == LEGUP_F_main_BB__404_406)) begin
		main_404_417_reg <= main_404_417;
		if (start == 1'b0 && ^(main_404_417) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_404_417_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %404*/
	/*   %418 = load i16* %417, align 2, !tbaa !1*/
		main_404_418 = memory_controller_out_b[15:0];
end
always @(*) begin
	/* main: %404*/
	/*   %419 = sext i16 %418 to i32*/
		main_404_419 = $signed(main_404_418);
end
always @(*) begin
	main_404_420 = main_signed_multiply_32_1;
end
always @(*) begin
	/* main: %404*/
	/*   %421 = lshr i32 %420, 15*/
		main_404_421 = (main_404_420 >>> (32'd15 % 32));
end
always @(*) begin
	/* main: %404*/
	/*   %422 = lshr i32 %420, 14*/
		main_404_422 = (main_404_420 >>> (32'd14 % 32));
end
always @(*) begin
	/* main: %404*/
	/*   %423 = and i32 %422, 1*/
		main_404_423 = (main_404_422 & 32'd1);
end
always @(*) begin
	/* main: %404*/
	/*   %424 = add nuw nsw i32 %423, %421*/
		main_404_424 = main_signed_add_32_251;
end
always @(*) begin
	/* main: %404*/
	/*   %425 = trunc i32 %424 to i16*/
		main_404_425 = main_404_424[15:0];
end
always @(*) begin
	main_404_426 = main_signed_multiply_32_2;
end
always @(*) begin
	/* main: %404*/
	/*   %427 = lshr i32 %426, 15*/
		main_404_427 = (main_404_426 >>> (32'd15 % 32));
end
always @(*) begin
	/* main: %404*/
	/*   %428 = lshr i32 %426, 14*/
		main_404_428 = (main_404_426 >>> (32'd14 % 32));
end
always @(*) begin
	/* main: %404*/
	/*   %429 = and i32 %428, 1*/
		main_404_429 = (main_404_428 & 32'd1);
end
always @(*) begin
	/* main: %404*/
	/*   %430 = add nuw nsw i32 %429, %427*/
		main_404_430 = main_signed_add_32_249;
end
always @(*) begin
	/* main: %404*/
	/*   %431 = trunc i32 %430 to i16*/
		main_404_431 = main_404_430[15:0];
end
always @(*) begin
	main_404_432 = main_signed_multiply_32_3;
end
always @(*) begin
	/* main: %404*/
	/*   %433 = lshr i32 %432, 15*/
		main_404_433 = (main_404_432 >>> (32'd15 % 32));
end
always @(*) begin
	/* main: %404*/
	/*   %434 = lshr i32 %432, 14*/
		main_404_434 = (main_404_432 >>> (32'd14 % 32));
end
always @(*) begin
	/* main: %404*/
	/*   %435 = and i32 %434, 1*/
		main_404_435 = (main_404_434 & 32'd1);
end
always @(*) begin
	/* main: %404*/
	/*   %436 = add nuw nsw i32 %435, %433*/
		main_404_436 = main_signed_add_32_250;
end
always @(*) begin
	/* main: %404*/
	/*   %437 = trunc i32 %436 to i16*/
		main_404_437 = main_404_436[15:0];
end
always @(*) begin
	/* main: %404*/
	/*   %gep_int524 = ptrtoint i16* %10 to i32*/
		main_404_gep_int524 = main_6_10_reg;
end
always @(posedge clk) begin
	/* main: %404*/
	/*   %gep_int524 = ptrtoint i16* %10 to i32*/
	if ((cur_state == LEGUP_F_main_BB__404_404)) begin
		main_404_gep_int524_reg <= main_404_gep_int524;
		if (start == 1'b0 && ^(main_404_gep_int524) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_404_gep_int524_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %404*/
	/*   %gep_array525 = mul i32 %405, 2*/
		main_404_gep_array525 = (main_404_405 * 32'd2);
end
always @(posedge clk) begin
	/* main: %404*/
	/*   %gep_array525 = mul i32 %405, 2*/
	if ((cur_state == LEGUP_F_main_BB__404_404)) begin
		main_404_gep_array525_reg <= main_404_gep_array525;
		if (start == 1'b0 && ^(main_404_gep_array525) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_404_gep_array525_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %404*/
	/*   %gep526 = add i32 %gep_int524, %gep_array525*/
		main_404_gep526 = main_signed_add_32_0;
end
always @(*) begin
	/* main: %404*/
	/*   %438 = inttoptr i32 %gep526 to i16**/
		main_404_438 = main_404_gep526;
end
always @(posedge clk) begin
	/* main: %404*/
	/*   %438 = inttoptr i32 %gep526 to i16**/
	if ((cur_state == LEGUP_F_main_BB__404_405)) begin
		main_404_438_reg <= main_404_438;
		if (start == 1'b0 && ^(main_404_438) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_404_438_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %404*/
	/*   %gep_int527 = ptrtoint i16* %9 to i32*/
		main_404_gep_int527 = main_6_9_reg;
end
always @(posedge clk) begin
	/* main: %404*/
	/*   %gep_int527 = ptrtoint i16* %9 to i32*/
	if ((cur_state == LEGUP_F_main_BB__404_404)) begin
		main_404_gep_int527_reg <= main_404_gep_int527;
		if (start == 1'b0 && ^(main_404_gep_int527) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_404_gep_int527_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %404*/
	/*   %gep_array528 = mul i32 %405, 2*/
		main_404_gep_array528 = (main_404_405 * 32'd2);
end
always @(posedge clk) begin
	/* main: %404*/
	/*   %gep_array528 = mul i32 %405, 2*/
	if ((cur_state == LEGUP_F_main_BB__404_404)) begin
		main_404_gep_array528_reg <= main_404_gep_array528;
		if (start == 1'b0 && ^(main_404_gep_array528) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_404_gep_array528_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %404*/
	/*   %gep529 = add i32 %gep_int527, %gep_array528*/
		main_404_gep529 = main_signed_add_32_251;
end
always @(*) begin
	/* main: %404*/
	/*   %439 = inttoptr i32 %gep529 to i16**/
		main_404_439 = main_404_gep529;
end
always @(posedge clk) begin
	/* main: %404*/
	/*   %439 = inttoptr i32 %gep529 to i16**/
	if ((cur_state == LEGUP_F_main_BB__404_405)) begin
		main_404_439_reg <= main_404_439;
		if (start == 1'b0 && ^(main_404_439) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_404_439_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %404*/
	/*   %440 = load i16* %439, align 2, !tbaa !1*/
		main_404_440 = memory_controller_out_a[15:0];
end
always @(*) begin
	/* main: %404*/
	/*   %441 = load i16* %438, align 2, !tbaa !1*/
		main_404_441 = memory_controller_out_b[15:0];
end
always @(*) begin
	/* main: %404*/
	/*   %442 = add i16 %431, %437*/
		main_404_442 = main_signed_add_16_0;
end
always @(*) begin
	/* main: %404*/
	/*   %443 = sub i16 %416, %425*/
		main_404_443 = main_signed_subtract_16_0;
end
always @(*) begin
	/* main: %404*/
	/*   %444 = sub i16 %441, %443*/
		main_404_444 = main_signed_subtract_16_1;
end
always @(*) begin
	/* main: %404*/
	/*   %445 = sub i16 %440, %442*/
		main_404_445 = main_signed_subtract_16_2;
end
always @(posedge clk) begin
	/* main: %404*/
	/*   %445 = sub i16 %440, %442*/
	if ((cur_state == LEGUP_F_main_BB__404_409)) begin
		main_404_445_reg <= main_404_445;
		if (start == 1'b0 && ^(main_404_445) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_404_445_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %404*/
	/*   %446 = add i16 %443, %441*/
		main_404_446 = main_signed_add_16_1;
end
always @(posedge clk) begin
	/* main: %404*/
	/*   %446 = add i16 %443, %441*/
	if ((cur_state == LEGUP_F_main_BB__404_409)) begin
		main_404_446_reg <= main_404_446;
		if (start == 1'b0 && ^(main_404_446) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_404_446_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %404*/
	/*   %447 = add i16 %442, %440*/
		main_404_447 = main_signed_add_16_2;
end
always @(posedge clk) begin
	/* main: %404*/
	/*   %447 = add i16 %442, %440*/
	if ((cur_state == LEGUP_F_main_BB__404_409)) begin
		main_404_447_reg <= main_404_447;
		if (start == 1'b0 && ^(main_404_447) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_404_447_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %404*/
	/*   %448 = add nsw i32 %405, %392*/
		main_404_448 = main_signed_add_32_251;
end
always @(*) begin
	/* main: %404*/
	/*   %449 = trunc i32 %448 to i16*/
		main_404_449 = main_404_448[15:0];
end
always @(posedge clk) begin
	/* main: %404*/
	/*   %449 = trunc i32 %448 to i16*/
	if ((cur_state == LEGUP_F_main_BB__404_404)) begin
		main_404_449_reg <= main_404_449;
		if (start == 1'b0 && ^(main_404_449) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_404_449_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %404*/
	/*   %450 = icmp slt i16 %449, 64*/
		main_404_450 = ($signed(main_404_449) < $signed(16'd64));
end
always @(posedge clk) begin
	/* main: %404*/
	/*   %450 = icmp slt i16 %449, 64*/
	if ((cur_state == LEGUP_F_main_BB__404_404)) begin
		main_404_450_reg <= main_404_450;
		if (start == 1'b0 && ^(main_404_450) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_404_450_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %._crit_edge.i*/
	/*   %451 = add i16 %m.04.i, 1*/
		main__crit_edgei_451 = main_signed_add_16_0;
end
always @(*) begin
	/* main: %._crit_edge.i*/
	/*   %452 = sext i16 %451 to i32*/
		main__crit_edgei_452 = $signed(main__crit_edgei_451);
end
always @(*) begin
	/* main: %._crit_edge.i*/
	/*   %453 = icmp slt i32 %452, %l.08.i*/
		main__crit_edgei_453 = ($signed(main__crit_edgei_452) < $signed(main_preheaderi_l08i_reg));
end
always @(*) begin
	/* main: %._crit_edge6.i*/
	/*   %sin_index.1.lcssa.i = phi i16 [ %sin_index.07.i, %.preheader.i ], [ %395, %._crit_edge.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_preheaderi_396) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_391 == 1'd0))) begin
		main__crit_edge6i_sin_index1lcssai = main_preheaderi_sin_index07i_reg;
	end
	/* main: %._crit_edge6.i*/
	/*   %sin_index.1.lcssa.i = phi i16 [ %sin_index.07.i, %.preheader.i ], [ %395, %._crit_edge.i ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__crit_edgei_414) & (memory_controller_waitrequest == 1'd0)) & (main__crit_edgei_453 == 1'd0))) */ begin
		main__crit_edge6i_sin_index1lcssai = main_393_395_reg;
	end
end
always @(posedge clk) begin
	/* main: %._crit_edge6.i*/
	/*   %sin_index.1.lcssa.i = phi i16 [ %sin_index.07.i, %.preheader.i ], [ %395, %._crit_edge.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_preheaderi_396) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_391 == 1'd0))) begin
		main__crit_edge6i_sin_index1lcssai_reg <= main__crit_edge6i_sin_index1lcssai;
		if (start == 1'b0 && ^(main__crit_edge6i_sin_index1lcssai) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edge6i_sin_index1lcssai_reg"); $finish; end
	end
	/* main: %._crit_edge6.i*/
	/*   %sin_index.1.lcssa.i = phi i16 [ %sin_index.07.i, %.preheader.i ], [ %395, %._crit_edge.i ]*/
	if ((((cur_state == LEGUP_F_main_BB__crit_edgei_414) & (memory_controller_waitrequest == 1'd0)) & (main__crit_edgei_453 == 1'd0))) begin
		main__crit_edge6i_sin_index1lcssai_reg <= main__crit_edge6i_sin_index1lcssai;
		if (start == 1'b0 && ^(main__crit_edge6i_sin_index1lcssai) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edge6i_sin_index1lcssai_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %._crit_edge6.i*/
	/*   %sext.i = shl i32 %l.08.i, 17*/
		main__crit_edge6i_sexti = (main_preheaderi_l08i_reg <<< (32'd17 % 32));
end
always @(*) begin
	/* main: %._crit_edge6.i*/
	/*   %phitmp.i = ashr exact i32 %sext.i, 16*/
		main__crit_edge6i_phitmpi = ($signed(main__crit_edge6i_sexti) >>> 32'd16);
end
always @(*) begin
	/* main: %._crit_edge6.i*/
	/*   %454 = icmp slt i32 %sext.i, 4194304*/
		main__crit_edge6i_454 = ($signed(main__crit_edge6i_sexti) < $signed(32'd4194304));
end
always @(*) begin
	/* main: %fft.exit*/
	/*   %indvars.iv = phi i32 [ %indvars.iv.next, %fft.exit ], [ 0, %._crit_edge6.i ]*/
	if ((((cur_state == LEGUP_F_main_BB__crit_edge6i_415) & (memory_controller_waitrequest == 1'd0)) & (main__crit_edge6i_454 == 1'd0))) begin
		main_fftexit_indvarsiv = 32'd0;
	end
	/* main: %fft.exit*/
	/*   %indvars.iv = phi i32 [ %indvars.iv.next, %fft.exit ], [ 0, %._crit_edge6.i ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_fftexit_419) & (memory_controller_waitrequest == 1'd0)) & (main_fftexit_exitcond_reg == 1'd0))) */ begin
		main_fftexit_indvarsiv = main_fftexit_indvarsivnext_reg;
	end
end
always @(posedge clk) begin
	/* main: %fft.exit*/
	/*   %indvars.iv = phi i32 [ %indvars.iv.next, %fft.exit ], [ 0, %._crit_edge6.i ]*/
	if ((((cur_state == LEGUP_F_main_BB__crit_edge6i_415) & (memory_controller_waitrequest == 1'd0)) & (main__crit_edge6i_454 == 1'd0))) begin
		main_fftexit_indvarsiv_reg <= main_fftexit_indvarsiv;
		if (start == 1'b0 && ^(main_fftexit_indvarsiv) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_fftexit_indvarsiv_reg"); $finish; end
	end
	/* main: %fft.exit*/
	/*   %indvars.iv = phi i32 [ %indvars.iv.next, %fft.exit ], [ 0, %._crit_edge6.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_fftexit_419) & (memory_controller_waitrequest == 1'd0)) & (main_fftexit_exitcond_reg == 1'd0))) begin
		main_fftexit_indvarsiv_reg <= main_fftexit_indvarsiv;
		if (start == 1'b0 && ^(main_fftexit_indvarsiv) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_fftexit_indvarsiv_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %fft.exit*/
	/*   %sum.02 = phi i32 [ %468, %fft.exit ], [ 0, %._crit_edge6.i ]*/
	if ((((cur_state == LEGUP_F_main_BB__crit_edge6i_415) & (memory_controller_waitrequest == 1'd0)) & (main__crit_edge6i_454 == 1'd0))) begin
		main_fftexit_sum02 = 32'd0;
	end
	/* main: %fft.exit*/
	/*   %sum.02 = phi i32 [ %468, %fft.exit ], [ 0, %._crit_edge6.i ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_fftexit_419) & (memory_controller_waitrequest == 1'd0)) & (main_fftexit_exitcond_reg == 1'd0))) */ begin
		main_fftexit_sum02 = main_fftexit_468;
	end
end
always @(posedge clk) begin
	/* main: %fft.exit*/
	/*   %sum.02 = phi i32 [ %468, %fft.exit ], [ 0, %._crit_edge6.i ]*/
	if ((((cur_state == LEGUP_F_main_BB__crit_edge6i_415) & (memory_controller_waitrequest == 1'd0)) & (main__crit_edge6i_454 == 1'd0))) begin
		main_fftexit_sum02_reg <= main_fftexit_sum02;
		if (start == 1'b0 && ^(main_fftexit_sum02) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_fftexit_sum02_reg"); $finish; end
	end
	/* main: %fft.exit*/
	/*   %sum.02 = phi i32 [ %468, %fft.exit ], [ 0, %._crit_edge6.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_fftexit_419) & (memory_controller_waitrequest == 1'd0)) & (main_fftexit_exitcond_reg == 1'd0))) begin
		main_fftexit_sum02_reg <= main_fftexit_sum02;
		if (start == 1'b0 && ^(main_fftexit_sum02) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_fftexit_sum02_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %fft.exit*/
	/*   %gep_int530 = ptrtoint [64 x i16]* %New_Real to i32*/
if (reset) begin main_fftexit_gep_int530 = 0; end
		main_fftexit_gep_int530 = `TAG_main_0_New_Real_a;
end
always @(posedge clk) begin
	/* main: %fft.exit*/
	/*   %gep_int530 = ptrtoint [64 x i16]* %New_Real to i32*/
	if ((cur_state == LEGUP_F_main_BB_fftexit_416)) begin
		main_fftexit_gep_int530_reg <= main_fftexit_gep_int530;
		if (start == 1'b0 && ^(main_fftexit_gep_int530) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_fftexit_gep_int530_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %fft.exit*/
	/*   %gep_array531 = mul i32 %indvars.iv, 2*/
		main_fftexit_gep_array531 = (main_fftexit_indvarsiv_reg * 32'd2);
end
always @(posedge clk) begin
	/* main: %fft.exit*/
	/*   %gep_array531 = mul i32 %indvars.iv, 2*/
	if ((cur_state == LEGUP_F_main_BB_fftexit_416)) begin
		main_fftexit_gep_array531_reg <= main_fftexit_gep_array531;
		if (start == 1'b0 && ^(main_fftexit_gep_array531) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_fftexit_gep_array531_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %fft.exit*/
	/*   %gep532 = add i32 %gep_int530, %gep_array531*/
		main_fftexit_gep532 = main_signed_add_32_0;
end
always @(*) begin
	/* main: %fft.exit*/
	/*   %455 = inttoptr i32 %gep532 to i16**/
		main_fftexit_455 = main_fftexit_gep532;
end
always @(*) begin
	/* main: %fft.exit*/
	/*   %456 = load i16* %455, align 2, !tbaa !1*/
		main_fftexit_456 = memory_controller_out_a[15:0];
end
always @(*) begin
	/* main: %fft.exit*/
	/*   %457 = sext i16 %456 to i32*/
		main_fftexit_457 = $signed(main_fftexit_456);
end
always @(*) begin
	/* main: %fft.exit*/
	/*   %458 = icmp slt i16 %456, 0*/
		main_fftexit_458 = ($signed(main_fftexit_456) < $signed(16'd0));
end
always @(*) begin
	/* main: %fft.exit*/
	/*   %459 = sub nsw i32 0, %457*/
		main_fftexit_459 = main_signed_subtract_32_0;
end
always @(*) begin
	/* main: %fft.exit*/
	/*   %460 = select i1 %458, i32 %459, i32 %457*/
		main_fftexit_460 = (main_fftexit_458 ? main_fftexit_459 : main_fftexit_457);
end
always @(*) begin
	/* main: %fft.exit*/
	/*   %461 = add nsw i32 %460, %sum.02*/
		main_fftexit_461 = main_signed_add_32_0;
end
always @(*) begin
	/* main: %fft.exit*/
	/*   %gep_int533 = ptrtoint [64 x i16]* %New_Imag to i32*/
if (reset) begin main_fftexit_gep_int533 = 0; end
		main_fftexit_gep_int533 = `TAG_main_0_New_Imag_a;
end
always @(posedge clk) begin
	/* main: %fft.exit*/
	/*   %gep_int533 = ptrtoint [64 x i16]* %New_Imag to i32*/
	if ((cur_state == LEGUP_F_main_BB_fftexit_416)) begin
		main_fftexit_gep_int533_reg <= main_fftexit_gep_int533;
		if (start == 1'b0 && ^(main_fftexit_gep_int533) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_fftexit_gep_int533_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %fft.exit*/
	/*   %gep_array534 = mul i32 %indvars.iv, 2*/
		main_fftexit_gep_array534 = (main_fftexit_indvarsiv_reg * 32'd2);
end
always @(posedge clk) begin
	/* main: %fft.exit*/
	/*   %gep_array534 = mul i32 %indvars.iv, 2*/
	if ((cur_state == LEGUP_F_main_BB_fftexit_416)) begin
		main_fftexit_gep_array534_reg <= main_fftexit_gep_array534;
		if (start == 1'b0 && ^(main_fftexit_gep_array534) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_fftexit_gep_array534_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %fft.exit*/
	/*   %gep535 = add i32 %gep_int533, %gep_array534*/
		main_fftexit_gep535 = main_signed_add_32_251;
end
always @(*) begin
	/* main: %fft.exit*/
	/*   %462 = inttoptr i32 %gep535 to i16**/
		main_fftexit_462 = main_fftexit_gep535;
end
always @(*) begin
	/* main: %fft.exit*/
	/*   %463 = load i16* %462, align 2, !tbaa !1*/
		main_fftexit_463 = memory_controller_out_b[15:0];
end
always @(*) begin
	/* main: %fft.exit*/
	/*   %464 = sext i16 %463 to i32*/
		main_fftexit_464 = $signed(main_fftexit_463);
end
always @(*) begin
	/* main: %fft.exit*/
	/*   %465 = icmp slt i16 %463, 0*/
		main_fftexit_465 = ($signed(main_fftexit_463) < $signed(16'd0));
end
always @(*) begin
	/* main: %fft.exit*/
	/*   %466 = sub nsw i32 0, %464*/
		main_fftexit_466 = main_signed_subtract_32_1;
end
always @(*) begin
	/* main: %fft.exit*/
	/*   %467 = select i1 %465, i32 %466, i32 %464*/
		main_fftexit_467 = (main_fftexit_465 ? main_fftexit_466 : main_fftexit_464);
end
always @(*) begin
	/* main: %fft.exit*/
	/*   %468 = add nsw i32 %461, %467*/
		main_fftexit_468 = main_signed_add_32_251;
end
always @(*) begin
	/* main: %fft.exit*/
	/*   %indvars.iv.next = add nuw nsw i32 %indvars.iv, 1*/
		main_fftexit_indvarsivnext = main_signed_add_32_0;
end
always @(posedge clk) begin
	/* main: %fft.exit*/
	/*   %indvars.iv.next = add nuw nsw i32 %indvars.iv, 1*/
	if ((cur_state == LEGUP_F_main_BB_fftexit_416)) begin
		main_fftexit_indvarsivnext_reg <= main_fftexit_indvarsivnext;
		if (start == 1'b0 && ^(main_fftexit_indvarsivnext) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_fftexit_indvarsivnext_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %fft.exit*/
	/*   %exitcond = icmp eq i32 %indvars.iv.next, 64*/
		main_fftexit_exitcond = (main_fftexit_indvarsivnext == 32'd64);
end
always @(posedge clk) begin
	/* main: %fft.exit*/
	/*   %exitcond = icmp eq i32 %indvars.iv.next, 64*/
	if ((cur_state == LEGUP_F_main_BB_fftexit_416)) begin
		main_fftexit_exitcond_reg <= main_fftexit_exitcond;
		if (start == 1'b0 && ^(main_fftexit_exitcond) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_fftexit_exitcond_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %469*/
	/*   %.lcssa = phi i32 [ %468, %fft.exit ]*/
		main_469_lcssa = main_fftexit_468;
end
always @(posedge clk) begin
	/* main: %469*/
	/*   %.lcssa = phi i32 [ %468, %fft.exit ]*/
	if ((((cur_state == LEGUP_F_main_BB_fftexit_419) & (memory_controller_waitrequest == 1'd0)) & (main_fftexit_exitcond_reg == 1'd1))) begin
		main_469_lcssa_reg <= main_469_lcssa;
		if (start == 1'b0 && ^(main_469_lcssa) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_469_lcssa_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %469*/
	/*   %471 = icmp eq i32 %.lcssa, 87100*/
		main_469_471 = (main_469_lcssa_reg == 32'd87100);
end
always @(*) begin
	/* main: %1*/
	/*   %gep3 = add i32 %gep_int1, %gep_array2*/
	if ((cur_state == LEGUP_F_main_BB__1_3)) begin
		main_signed_add_32_251_op0 = main_1_gep_int1_reg;
	end
	/* main: %6*/
	/*   %gep511 = add i32 %gep_int510, 126*/
	else if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		main_signed_add_32_251_op0 = main_6_gep_int510;
	end
	/* main: %404*/
	/*   %448 = add nsw i32 %405, %392*/
	else if ((cur_state == LEGUP_F_main_BB__404_404)) begin
		main_signed_add_32_251_op0 = main_404_405;
	end
	/* main: %404*/
	/*   %gep529 = add i32 %gep_int527, %gep_array528*/
	else if ((cur_state == LEGUP_F_main_BB__404_405)) begin
		main_signed_add_32_251_op0 = main_404_gep_int527_reg;
	end
	/* main: %404*/
	/*   %gep523 = add i32 %gep_int521, %gep_array522*/
	else if ((cur_state == LEGUP_F_main_BB__404_406)) begin
		main_signed_add_32_251_op0 = main_404_gep_int521_reg;
	end
	/* main: %404*/
	/*   %424 = add nuw nsw i32 %423, %421*/
	else if ((cur_state == LEGUP_F_main_BB__404_409)) begin
		main_signed_add_32_251_op0 = main_404_423;
	end
	/* main: %fft.exit*/
	/*   %gep535 = add i32 %gep_int533, %gep_array534*/
	else if ((cur_state == LEGUP_F_main_BB_fftexit_417)) begin
		main_signed_add_32_251_op0 = main_fftexit_gep_int533_reg;
	end
	/* main: %fft.exit*/
	/*   %468 = add nsw i32 %461, %467*/
	else /* if ((cur_state == LEGUP_F_main_BB_fftexit_419)) */ begin
		main_signed_add_32_251_op0 = main_fftexit_461;
	end
end
always @(*) begin
	/* main: %1*/
	/*   %gep3 = add i32 %gep_int1, %gep_array2*/
	if ((cur_state == LEGUP_F_main_BB__1_3)) begin
		main_signed_add_32_251_op1 = main_1_gep_array2_reg;
	end
	/* main: %6*/
	/*   %gep511 = add i32 %gep_int510, 126*/
	else if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		main_signed_add_32_251_op1 = 32'd126;
	end
	/* main: %404*/
	/*   %448 = add nsw i32 %405, %392*/
	else if ((cur_state == LEGUP_F_main_BB__404_404)) begin
		main_signed_add_32_251_op1 = main_lrph5i_392_reg;
	end
	/* main: %404*/
	/*   %gep529 = add i32 %gep_int527, %gep_array528*/
	else if ((cur_state == LEGUP_F_main_BB__404_405)) begin
		main_signed_add_32_251_op1 = main_404_gep_array528_reg;
	end
	/* main: %404*/
	/*   %gep523 = add i32 %gep_int521, %gep_array522*/
	else if ((cur_state == LEGUP_F_main_BB__404_406)) begin
		main_signed_add_32_251_op1 = main_404_gep_array522_reg;
	end
	/* main: %404*/
	/*   %424 = add nuw nsw i32 %423, %421*/
	else if ((cur_state == LEGUP_F_main_BB__404_409)) begin
		main_signed_add_32_251_op1 = main_404_421;
	end
	/* main: %fft.exit*/
	/*   %gep535 = add i32 %gep_int533, %gep_array534*/
	else if ((cur_state == LEGUP_F_main_BB_fftexit_417)) begin
		main_signed_add_32_251_op1 = main_fftexit_gep_array534_reg;
	end
	/* main: %fft.exit*/
	/*   %468 = add nsw i32 %461, %467*/
	else /* if ((cur_state == LEGUP_F_main_BB_fftexit_419)) */ begin
		main_signed_add_32_251_op1 = main_fftexit_467;
	end
end
always @(*) begin
	main_signed_add_32_251 = (main_signed_add_32_251_op0 + main_signed_add_32_251_op1);
end
always @(*) begin
	/* main: %1*/
	/*   %indvars.iv.next5 = add nuw nsw i32 %indvars.iv4, 1*/
	if ((cur_state == LEGUP_F_main_BB__1_2)) begin
		main_signed_add_32_0_op0 = main_1_indvarsiv4_reg;
	end
	/* main: %1*/
	/*   %gep = add i32 %gep_int, %gep_array*/
	else if ((cur_state == LEGUP_F_main_BB__1_3)) begin
		main_signed_add_32_0_op0 = main_1_gep_int_reg;
	end
	/* main: %6*/
	/*   %gep9 = add i32 %gep_int8, 64*/
	else if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		main_signed_add_32_0_op0 = main_6_gep_int8;
	end
	/* main: %.lr.ph.i*/
	/*   %397 = add nsw i32 %394, 1*/
	else if ((cur_state == LEGUP_F_main_BB_lrphi_399)) begin
		main_signed_add_32_0_op0 = main_393_394_reg;
	end
	/* main: %.lr.ph.i*/
	/*   %gep517 = add i32 %gep_int515, %gep_array516*/
	else if ((cur_state == LEGUP_F_main_BB_lrphi_400)) begin
		main_signed_add_32_0_op0 = main_lrphi_gep_int515_reg;
	end
	/* main: %.lr.ph.i*/
	/*   %gep514 = add i32 %gep_int512, %gep_array513*/
	else if ((cur_state == LEGUP_F_main_BB_lrphi_401)) begin
		main_signed_add_32_0_op0 = main_lrphi_gep_int512_reg;
	end
	/* main: %404*/
	/*   %406 = add nsw i32 %405, %l.08.i*/
	else if ((cur_state == LEGUP_F_main_BB__404_404)) begin
		main_signed_add_32_0_op0 = main_404_405;
	end
	/* main: %404*/
	/*   %gep526 = add i32 %gep_int524, %gep_array525*/
	else if ((cur_state == LEGUP_F_main_BB__404_405)) begin
		main_signed_add_32_0_op0 = main_404_gep_int524_reg;
	end
	/* main: %404*/
	/*   %gep520 = add i32 %gep_int518, %gep_array519*/
	else if ((cur_state == LEGUP_F_main_BB__404_406)) begin
		main_signed_add_32_0_op0 = main_404_gep_int518_reg;
	end
	/* main: %404*/
	/*   %415 = add nuw nsw i32 %414, %412*/
	else if ((cur_state == LEGUP_F_main_BB__404_409)) begin
		main_signed_add_32_0_op0 = main_404_414;
	end
	/* main: %fft.exit*/
	/*   %indvars.iv.next = add nuw nsw i32 %indvars.iv, 1*/
	else if ((cur_state == LEGUP_F_main_BB_fftexit_416)) begin
		main_signed_add_32_0_op0 = main_fftexit_indvarsiv_reg;
	end
	/* main: %fft.exit*/
	/*   %gep532 = add i32 %gep_int530, %gep_array531*/
	else if ((cur_state == LEGUP_F_main_BB_fftexit_417)) begin
		main_signed_add_32_0_op0 = main_fftexit_gep_int530_reg;
	end
	/* main: %fft.exit*/
	/*   %461 = add nsw i32 %460, %sum.02*/
	else /* if ((cur_state == LEGUP_F_main_BB_fftexit_419)) */ begin
		main_signed_add_32_0_op0 = main_fftexit_460;
	end
end
always @(*) begin
	/* main: %1*/
	/*   %indvars.iv.next5 = add nuw nsw i32 %indvars.iv4, 1*/
	if ((cur_state == LEGUP_F_main_BB__1_2)) begin
		main_signed_add_32_0_op1 = 32'd1;
	end
	/* main: %1*/
	/*   %gep = add i32 %gep_int, %gep_array*/
	else if ((cur_state == LEGUP_F_main_BB__1_3)) begin
		main_signed_add_32_0_op1 = main_1_gep_array_reg;
	end
	/* main: %6*/
	/*   %gep9 = add i32 %gep_int8, 64*/
	else if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		main_signed_add_32_0_op1 = 32'd64;
	end
	/* main: %.lr.ph.i*/
	/*   %397 = add nsw i32 %394, 1*/
	else if ((cur_state == LEGUP_F_main_BB_lrphi_399)) begin
		main_signed_add_32_0_op1 = 32'd1;
	end
	/* main: %.lr.ph.i*/
	/*   %gep517 = add i32 %gep_int515, %gep_array516*/
	else if ((cur_state == LEGUP_F_main_BB_lrphi_400)) begin
		main_signed_add_32_0_op1 = main_lrphi_gep_array516_reg;
	end
	/* main: %.lr.ph.i*/
	/*   %gep514 = add i32 %gep_int512, %gep_array513*/
	else if ((cur_state == LEGUP_F_main_BB_lrphi_401)) begin
		main_signed_add_32_0_op1 = main_lrphi_gep_array513_reg;
	end
	/* main: %404*/
	/*   %406 = add nsw i32 %405, %l.08.i*/
	else if ((cur_state == LEGUP_F_main_BB__404_404)) begin
		main_signed_add_32_0_op1 = main_preheaderi_l08i_reg;
	end
	/* main: %404*/
	/*   %gep526 = add i32 %gep_int524, %gep_array525*/
	else if ((cur_state == LEGUP_F_main_BB__404_405)) begin
		main_signed_add_32_0_op1 = main_404_gep_array525_reg;
	end
	/* main: %404*/
	/*   %gep520 = add i32 %gep_int518, %gep_array519*/
	else if ((cur_state == LEGUP_F_main_BB__404_406)) begin
		main_signed_add_32_0_op1 = main_404_gep_array519_reg;
	end
	/* main: %404*/
	/*   %415 = add nuw nsw i32 %414, %412*/
	else if ((cur_state == LEGUP_F_main_BB__404_409)) begin
		main_signed_add_32_0_op1 = main_404_412;
	end
	/* main: %fft.exit*/
	/*   %indvars.iv.next = add nuw nsw i32 %indvars.iv, 1*/
	else if ((cur_state == LEGUP_F_main_BB_fftexit_416)) begin
		main_signed_add_32_0_op1 = 32'd1;
	end
	/* main: %fft.exit*/
	/*   %gep532 = add i32 %gep_int530, %gep_array531*/
	else if ((cur_state == LEGUP_F_main_BB_fftexit_417)) begin
		main_signed_add_32_0_op1 = main_fftexit_gep_array531_reg;
	end
	/* main: %fft.exit*/
	/*   %461 = add nsw i32 %460, %sum.02*/
	else /* if ((cur_state == LEGUP_F_main_BB_fftexit_419)) */ begin
		main_signed_add_32_0_op1 = main_fftexit_sum02_reg;
	end
end
always @(*) begin
	main_signed_add_32_0 = (main_signed_add_32_0_op0 + main_signed_add_32_0_op1);
end
always @(*) begin
	/* main: %1*/
	/*   %3 = mul i32 %indvars.iv4, 10*/
	if ((cur_state == LEGUP_F_main_BB__1_2)) begin
		main_signed_multiply_32_0_op0 = main_1_indvarsiv4_reg;
	end
	/* main: %404*/
	/*   %411 = mul nsw i32 %410, %402*/
	else /* if ((cur_state == LEGUP_F_main_BB__404_408)) */ begin
		main_signed_multiply_32_0_op0 = main_404_410;
	end
end
always @(*) begin
	/* main: %1*/
	/*   %3 = mul i32 %indvars.iv4, 10*/
	if ((cur_state == LEGUP_F_main_BB__1_2)) begin
		main_signed_multiply_32_0_op1 = 32'd10;
	end
	/* main: %404*/
	/*   %411 = mul nsw i32 %410, %402*/
	else /* if ((cur_state == LEGUP_F_main_BB__404_408)) */ begin
		main_signed_multiply_32_0_op1 = main_lrphi_402_reg;
	end
end
always @(*) begin
	lpm_mult_main_1_3_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %3 = mul i32 %indvars.iv4, 10*/
	if ((lpm_mult_main_1_3_en == 1'd1)) begin
		main_1_3_stage0_reg <= (main_signed_multiply_32_0_op0 * main_signed_multiply_32_0_op1);
	end
end
always @(*) begin
	main_signed_multiply_32_0 = main_1_3_stage0_reg;
end
always @(*) begin
	/* main: %6*/
	/*   %gep15 = add i32 %gep_int14, 2*/
		main_signed_add_32_3_op0 = main_6_gep_int14;
end
always @(*) begin
	/* main: %6*/
	/*   %gep15 = add i32 %gep_int14, 2*/
if (reset) begin main_signed_add_32_3_op1 = 0; end
		main_signed_add_32_3_op1 = 32'd2;
end
always @(*) begin
	main_signed_add_32_3 = (main_signed_add_32_3_op0 + main_signed_add_32_3_op1);
end
always @(*) begin
	/* main: %6*/
	/*   %gep17 = add i32 %gep_int16, 32*/
		main_signed_add_32_4_op0 = main_6_gep_int16;
end
always @(*) begin
	/* main: %6*/
	/*   %gep17 = add i32 %gep_int16, 32*/
if (reset) begin main_signed_add_32_4_op1 = 0; end
		main_signed_add_32_4_op1 = 32'd32;
end
always @(*) begin
	main_signed_add_32_4 = (main_signed_add_32_4_op0 + main_signed_add_32_4_op1);
end
always @(*) begin
	/* main: %6*/
	/*   %gep19 = add i32 %gep_int18, 4*/
		main_signed_add_32_5_op0 = main_6_gep_int18;
end
always @(*) begin
	/* main: %6*/
	/*   %gep19 = add i32 %gep_int18, 4*/
if (reset) begin main_signed_add_32_5_op1 = 0; end
		main_signed_add_32_5_op1 = 32'd4;
end
always @(*) begin
	main_signed_add_32_5 = (main_signed_add_32_5_op0 + main_signed_add_32_5_op1);
end
always @(*) begin
	/* main: %6*/
	/*   %gep21 = add i32 %gep_int20, 32*/
		main_signed_add_32_6_op0 = main_6_gep_int20;
end
always @(*) begin
	/* main: %6*/
	/*   %gep21 = add i32 %gep_int20, 32*/
if (reset) begin main_signed_add_32_6_op1 = 0; end
		main_signed_add_32_6_op1 = 32'd32;
end
always @(*) begin
	main_signed_add_32_6 = (main_signed_add_32_6_op0 + main_signed_add_32_6_op1);
end
always @(*) begin
	/* main: %6*/
	/*   %gep55 = add i32 %gep_int54, 12*/
		main_signed_add_32_23_op0 = main_6_gep_int54;
end
always @(*) begin
	/* main: %6*/
	/*   %gep55 = add i32 %gep_int54, 12*/
if (reset) begin main_signed_add_32_23_op1 = 0; end
		main_signed_add_32_23_op1 = 32'd12;
end
always @(*) begin
	main_signed_add_32_23 = (main_signed_add_32_23_op0 + main_signed_add_32_23_op1);
end
always @(*) begin
	/* main: %6*/
	/*   %gep57 = add i32 %gep_int56, 112*/
		main_signed_add_32_24_op0 = main_6_gep_int56;
end
always @(*) begin
	/* main: %6*/
	/*   %gep57 = add i32 %gep_int56, 112*/
if (reset) begin main_signed_add_32_24_op1 = 0; end
		main_signed_add_32_24_op1 = 32'd112;
end
always @(*) begin
	main_signed_add_32_24 = (main_signed_add_32_24_op0 + main_signed_add_32_24_op1);
end
always @(*) begin
	/* main: %6*/
	/*   %gep47 = add i32 %gep_int46, 10*/
		main_signed_add_32_19_op0 = main_6_gep_int46;
end
always @(*) begin
	/* main: %6*/
	/*   %gep47 = add i32 %gep_int46, 10*/
if (reset) begin main_signed_add_32_19_op1 = 0; end
		main_signed_add_32_19_op1 = 32'd10;
end
always @(*) begin
	main_signed_add_32_19 = (main_signed_add_32_19_op0 + main_signed_add_32_19_op1);
end
always @(*) begin
	/* main: %6*/
	/*   %gep49 = add i32 %gep_int48, 48*/
		main_signed_add_32_20_op0 = main_6_gep_int48;
end
always @(*) begin
	/* main: %6*/
	/*   %gep49 = add i32 %gep_int48, 48*/
if (reset) begin main_signed_add_32_20_op1 = 0; end
		main_signed_add_32_20_op1 = 32'd48;
end
always @(*) begin
	main_signed_add_32_20 = (main_signed_add_32_20_op0 + main_signed_add_32_20_op1);
end
always @(*) begin
	/* main: %6*/
	/*   %gep51 = add i32 %gep_int50, 12*/
		main_signed_add_32_21_op0 = main_6_gep_int50;
end
always @(*) begin
	/* main: %6*/
	/*   %gep51 = add i32 %gep_int50, 12*/
if (reset) begin main_signed_add_32_21_op1 = 0; end
		main_signed_add_32_21_op1 = 32'd12;
end
always @(*) begin
	main_signed_add_32_21 = (main_signed_add_32_21_op0 + main_signed_add_32_21_op1);
end
always @(*) begin
	/* main: %6*/
	/*   %gep53 = add i32 %gep_int52, 48*/
		main_signed_add_32_22_op0 = main_6_gep_int52;
end
always @(*) begin
	/* main: %6*/
	/*   %gep53 = add i32 %gep_int52, 48*/
if (reset) begin main_signed_add_32_22_op1 = 0; end
		main_signed_add_32_22_op1 = 32'd48;
end
always @(*) begin
	main_signed_add_32_22 = (main_signed_add_32_22_op0 + main_signed_add_32_22_op1);
end
always @(*) begin
	/* main: %6*/
	/*   %gep121 = add i32 %gep_int120, 120*/
		main_signed_add_32_56_op0 = main_6_gep_int120;
end
always @(*) begin
	/* main: %6*/
	/*   %gep121 = add i32 %gep_int120, 120*/
if (reset) begin main_signed_add_32_56_op1 = 0; end
		main_signed_add_32_56_op1 = 32'd120;
end
always @(*) begin
	main_signed_add_32_56 = (main_signed_add_32_56_op0 + main_signed_add_32_56_op1);
end
always @(*) begin
	/* main: %6*/
	/*   %gep123 = add i32 %gep_int122, 30*/
		main_signed_add_32_57_op0 = main_6_gep_int122;
end
always @(*) begin
	/* main: %6*/
	/*   %gep123 = add i32 %gep_int122, 30*/
if (reset) begin main_signed_add_32_57_op1 = 0; end
		main_signed_add_32_57_op1 = 32'd30;
end
always @(*) begin
	main_signed_add_32_57 = (main_signed_add_32_57_op0 + main_signed_add_32_57_op1);
end
always @(*) begin
	/* main: %6*/
	/*   %gep125 = add i32 %gep_int124, 120*/
		main_signed_add_32_58_op0 = main_6_gep_int124;
end
always @(*) begin
	/* main: %6*/
	/*   %gep125 = add i32 %gep_int124, 120*/
if (reset) begin main_signed_add_32_58_op1 = 0; end
		main_signed_add_32_58_op1 = 32'd120;
end
always @(*) begin
	main_signed_add_32_58 = (main_signed_add_32_58_op0 + main_signed_add_32_58_op1);
end
always @(*) begin
	/* main: %6*/
	/*   %gep127 = add i32 %gep_int126, 30*/
		main_signed_add_32_59_op0 = main_6_gep_int126;
end
always @(*) begin
	/* main: %6*/
	/*   %gep127 = add i32 %gep_int126, 30*/
if (reset) begin main_signed_add_32_59_op1 = 0; end
		main_signed_add_32_59_op1 = 32'd30;
end
always @(*) begin
	main_signed_add_32_59 = (main_signed_add_32_59_op0 + main_signed_add_32_59_op1);
end
always @(*) begin
	/* main: %6*/
	/*   %gep11 = add i32 %gep_int10, 2*/
		main_signed_add_32_1_op0 = main_6_gep_int10;
end
always @(*) begin
	/* main: %6*/
	/*   %gep11 = add i32 %gep_int10, 2*/
if (reset) begin main_signed_add_32_1_op1 = 0; end
		main_signed_add_32_1_op1 = 32'd2;
end
always @(*) begin
	main_signed_add_32_1 = (main_signed_add_32_1_op0 + main_signed_add_32_1_op1);
end
always @(*) begin
	/* main: %6*/
	/*   %gep13 = add i32 %gep_int12, 64*/
		main_signed_add_32_2_op0 = main_6_gep_int12;
end
always @(*) begin
	/* main: %6*/
	/*   %gep13 = add i32 %gep_int12, 64*/
if (reset) begin main_signed_add_32_2_op1 = 0; end
		main_signed_add_32_2_op1 = 32'd64;
end
always @(*) begin
	main_signed_add_32_2 = (main_signed_add_32_2_op0 + main_signed_add_32_2_op1);
end
always @(*) begin
	/* main: %6*/
	/*   %gep89 = add i32 %gep_int88, 104*/
		main_signed_add_32_40_op0 = main_6_gep_int88;
end
always @(*) begin
	/* main: %6*/
	/*   %gep89 = add i32 %gep_int88, 104*/
if (reset) begin main_signed_add_32_40_op1 = 0; end
		main_signed_add_32_40_op1 = 32'd104;
end
always @(*) begin
	main_signed_add_32_40 = (main_signed_add_32_40_op0 + main_signed_add_32_40_op1);
end
always @(*) begin
	/* main: %6*/
	/*   %gep91 = add i32 %gep_int90, 22*/
		main_signed_add_32_41_op0 = main_6_gep_int90;
end
always @(*) begin
	/* main: %6*/
	/*   %gep91 = add i32 %gep_int90, 22*/
if (reset) begin main_signed_add_32_41_op1 = 0; end
		main_signed_add_32_41_op1 = 32'd22;
end
always @(*) begin
	main_signed_add_32_41 = (main_signed_add_32_41_op0 + main_signed_add_32_41_op1);
end
always @(*) begin
	/* main: %6*/
	/*   %gep93 = add i32 %gep_int92, 104*/
		main_signed_add_32_42_op0 = main_6_gep_int92;
end
always @(*) begin
	/* main: %6*/
	/*   %gep93 = add i32 %gep_int92, 104*/
if (reset) begin main_signed_add_32_42_op1 = 0; end
		main_signed_add_32_42_op1 = 32'd104;
end
always @(*) begin
	main_signed_add_32_42 = (main_signed_add_32_42_op0 + main_signed_add_32_42_op1);
end
always @(*) begin
	/* main: %6*/
	/*   %gep95 = add i32 %gep_int94, 22*/
		main_signed_add_32_43_op0 = main_6_gep_int94;
end
always @(*) begin
	/* main: %6*/
	/*   %gep95 = add i32 %gep_int94, 22*/
if (reset) begin main_signed_add_32_43_op1 = 0; end
		main_signed_add_32_43_op1 = 32'd22;
end
always @(*) begin
	main_signed_add_32_43 = (main_signed_add_32_43_op0 + main_signed_add_32_43_op1);
end
always @(*) begin
	/* main: %6*/
	/*   %gep97 = add i32 %gep_int96, 24*/
		main_signed_add_32_44_op0 = main_6_gep_int96;
end
always @(*) begin
	/* main: %6*/
	/*   %gep97 = add i32 %gep_int96, 24*/
if (reset) begin main_signed_add_32_44_op1 = 0; end
		main_signed_add_32_44_op1 = 32'd24;
end
always @(*) begin
	main_signed_add_32_44 = (main_signed_add_32_44_op0 + main_signed_add_32_44_op1);
end
always @(*) begin
	/* main: %6*/
	/*   %gep99 = add i32 %gep_int98, 24*/
		main_signed_add_32_45_op0 = main_6_gep_int98;
end
always @(*) begin
	/* main: %6*/
	/*   %gep99 = add i32 %gep_int98, 24*/
if (reset) begin main_signed_add_32_45_op1 = 0; end
		main_signed_add_32_45_op1 = 32'd24;
end
always @(*) begin
	main_signed_add_32_45 = (main_signed_add_32_45_op0 + main_signed_add_32_45_op1);
end
always @(*) begin
	/* main: %6*/
	/*   %gep101 = add i32 %gep_int100, 24*/
		main_signed_add_32_46_op0 = main_6_gep_int100;
end
always @(*) begin
	/* main: %6*/
	/*   %gep101 = add i32 %gep_int100, 24*/
if (reset) begin main_signed_add_32_46_op1 = 0; end
		main_signed_add_32_46_op1 = 32'd24;
end
always @(*) begin
	main_signed_add_32_46 = (main_signed_add_32_46_op0 + main_signed_add_32_46_op1);
end
always @(*) begin
	/* main: %6*/
	/*   %gep103 = add i32 %gep_int102, 24*/
		main_signed_add_32_47_op0 = main_6_gep_int102;
end
always @(*) begin
	/* main: %6*/
	/*   %gep103 = add i32 %gep_int102, 24*/
if (reset) begin main_signed_add_32_47_op1 = 0; end
		main_signed_add_32_47_op1 = 32'd24;
end
always @(*) begin
	main_signed_add_32_47 = (main_signed_add_32_47_op0 + main_signed_add_32_47_op1);
end
always @(*) begin
	/* main: %6*/
	/*   %gep105 = add i32 %gep_int104, 88*/
		main_signed_add_32_48_op0 = main_6_gep_int104;
end
always @(*) begin
	/* main: %6*/
	/*   %gep105 = add i32 %gep_int104, 88*/
if (reset) begin main_signed_add_32_48_op1 = 0; end
		main_signed_add_32_48_op1 = 32'd88;
end
always @(*) begin
	main_signed_add_32_48 = (main_signed_add_32_48_op0 + main_signed_add_32_48_op1);
end
always @(*) begin
	/* main: %6*/
	/*   %gep107 = add i32 %gep_int106, 26*/
		main_signed_add_32_49_op0 = main_6_gep_int106;
end
always @(*) begin
	/* main: %6*/
	/*   %gep107 = add i32 %gep_int106, 26*/
if (reset) begin main_signed_add_32_49_op1 = 0; end
		main_signed_add_32_49_op1 = 32'd26;
end
always @(*) begin
	main_signed_add_32_49 = (main_signed_add_32_49_op0 + main_signed_add_32_49_op1);
end
always @(*) begin
	/* main: %6*/
	/*   %gep109 = add i32 %gep_int108, 88*/
		main_signed_add_32_50_op0 = main_6_gep_int108;
end
always @(*) begin
	/* main: %6*/
	/*   %gep109 = add i32 %gep_int108, 88*/
if (reset) begin main_signed_add_32_50_op1 = 0; end
		main_signed_add_32_50_op1 = 32'd88;
end
always @(*) begin
	main_signed_add_32_50 = (main_signed_add_32_50_op0 + main_signed_add_32_50_op1);
end
always @(*) begin
	/* main: %6*/
	/*   %gep111 = add i32 %gep_int110, 26*/
		main_signed_add_32_51_op0 = main_6_gep_int110;
end
always @(*) begin
	/* main: %6*/
	/*   %gep111 = add i32 %gep_int110, 26*/
if (reset) begin main_signed_add_32_51_op1 = 0; end
		main_signed_add_32_51_op1 = 32'd26;
end
always @(*) begin
	main_signed_add_32_51 = (main_signed_add_32_51_op0 + main_signed_add_32_51_op1);
end
always @(*) begin
	/* main: %6*/
	/*   %gep23 = add i32 %gep_int22, 4*/
		main_signed_add_32_7_op0 = main_6_gep_int22;
end
always @(*) begin
	/* main: %6*/
	/*   %gep23 = add i32 %gep_int22, 4*/
if (reset) begin main_signed_add_32_7_op1 = 0; end
		main_signed_add_32_7_op1 = 32'd4;
end
always @(*) begin
	main_signed_add_32_7 = (main_signed_add_32_7_op0 + main_signed_add_32_7_op1);
end
always @(*) begin
	/* main: %6*/
	/*   %gep25 = add i32 %gep_int24, 96*/
		main_signed_add_32_8_op0 = main_6_gep_int24;
end
always @(*) begin
	/* main: %6*/
	/*   %gep25 = add i32 %gep_int24, 96*/
if (reset) begin main_signed_add_32_8_op1 = 0; end
		main_signed_add_32_8_op1 = 32'd96;
end
always @(*) begin
	main_signed_add_32_8 = (main_signed_add_32_8_op0 + main_signed_add_32_8_op1);
end
always @(*) begin
	/* main: %6*/
	/*   %gep27 = add i32 %gep_int26, 6*/
		main_signed_add_32_9_op0 = main_6_gep_int26;
end
always @(*) begin
	/* main: %6*/
	/*   %gep27 = add i32 %gep_int26, 6*/
if (reset) begin main_signed_add_32_9_op1 = 0; end
		main_signed_add_32_9_op1 = 32'd6;
end
always @(*) begin
	main_signed_add_32_9 = (main_signed_add_32_9_op0 + main_signed_add_32_9_op1);
end
always @(*) begin
	/* main: %6*/
	/*   %gep29 = add i32 %gep_int28, 96*/
		main_signed_add_32_10_op0 = main_6_gep_int28;
end
always @(*) begin
	/* main: %6*/
	/*   %gep29 = add i32 %gep_int28, 96*/
if (reset) begin main_signed_add_32_10_op1 = 0; end
		main_signed_add_32_10_op1 = 32'd96;
end
always @(*) begin
	main_signed_add_32_10 = (main_signed_add_32_10_op0 + main_signed_add_32_10_op1);
end
always @(*) begin
	/* main: %6*/
	/*   %gep31 = add i32 %gep_int30, 6*/
		main_signed_add_32_11_op0 = main_6_gep_int30;
end
always @(*) begin
	/* main: %6*/
	/*   %gep31 = add i32 %gep_int30, 6*/
if (reset) begin main_signed_add_32_11_op1 = 0; end
		main_signed_add_32_11_op1 = 32'd6;
end
always @(*) begin
	main_signed_add_32_11 = (main_signed_add_32_11_op0 + main_signed_add_32_11_op1);
end
always @(*) begin
	/* main: %6*/
	/*   %gep33 = add i32 %gep_int32, 16*/
		main_signed_add_32_12_op0 = main_6_gep_int32;
end
always @(*) begin
	/* main: %6*/
	/*   %gep33 = add i32 %gep_int32, 16*/
if (reset) begin main_signed_add_32_12_op1 = 0; end
		main_signed_add_32_12_op1 = 32'd16;
end
always @(*) begin
	main_signed_add_32_12 = (main_signed_add_32_12_op0 + main_signed_add_32_12_op1);
end
always @(*) begin
	/* main: %6*/
	/*   %gep35 = add i32 %gep_int34, 8*/
		main_signed_add_32_13_op0 = main_6_gep_int34;
end
always @(*) begin
	/* main: %6*/
	/*   %gep35 = add i32 %gep_int34, 8*/
if (reset) begin main_signed_add_32_13_op1 = 0; end
		main_signed_add_32_13_op1 = 32'd8;
end
always @(*) begin
	main_signed_add_32_13 = (main_signed_add_32_13_op0 + main_signed_add_32_13_op1);
end
always @(*) begin
	/* main: %6*/
	/*   %gep37 = add i32 %gep_int36, 16*/
		main_signed_add_32_14_op0 = main_6_gep_int36;
end
always @(*) begin
	/* main: %6*/
	/*   %gep37 = add i32 %gep_int36, 16*/
if (reset) begin main_signed_add_32_14_op1 = 0; end
		main_signed_add_32_14_op1 = 32'd16;
end
always @(*) begin
	main_signed_add_32_14 = (main_signed_add_32_14_op0 + main_signed_add_32_14_op1);
end
always @(*) begin
	/* main: %6*/
	/*   %gep39 = add i32 %gep_int38, 8*/
		main_signed_add_32_15_op0 = main_6_gep_int38;
end
always @(*) begin
	/* main: %6*/
	/*   %gep39 = add i32 %gep_int38, 8*/
if (reset) begin main_signed_add_32_15_op1 = 0; end
		main_signed_add_32_15_op1 = 32'd8;
end
always @(*) begin
	main_signed_add_32_15 = (main_signed_add_32_15_op0 + main_signed_add_32_15_op1);
end
always @(*) begin
	/* main: %6*/
	/*   %gep41 = add i32 %gep_int40, 80*/
		main_signed_add_32_16_op0 = main_6_gep_int40;
end
always @(*) begin
	/* main: %6*/
	/*   %gep41 = add i32 %gep_int40, 80*/
if (reset) begin main_signed_add_32_16_op1 = 0; end
		main_signed_add_32_16_op1 = 32'd80;
end
always @(*) begin
	main_signed_add_32_16 = (main_signed_add_32_16_op0 + main_signed_add_32_16_op1);
end
always @(*) begin
	/* main: %6*/
	/*   %gep43 = add i32 %gep_int42, 10*/
		main_signed_add_32_17_op0 = main_6_gep_int42;
end
always @(*) begin
	/* main: %6*/
	/*   %gep43 = add i32 %gep_int42, 10*/
if (reset) begin main_signed_add_32_17_op1 = 0; end
		main_signed_add_32_17_op1 = 32'd10;
end
always @(*) begin
	main_signed_add_32_17 = (main_signed_add_32_17_op0 + main_signed_add_32_17_op1);
end
always @(*) begin
	/* main: %6*/
	/*   %gep45 = add i32 %gep_int44, 80*/
		main_signed_add_32_18_op0 = main_6_gep_int44;
end
always @(*) begin
	/* main: %6*/
	/*   %gep45 = add i32 %gep_int44, 80*/
if (reset) begin main_signed_add_32_18_op1 = 0; end
		main_signed_add_32_18_op1 = 32'd80;
end
always @(*) begin
	main_signed_add_32_18 = (main_signed_add_32_18_op0 + main_signed_add_32_18_op1);
end
always @(*) begin
	/* main: %6*/
	/*   %gep157 = add i32 %gep_int156, 100*/
		main_signed_add_32_74_op0 = main_6_gep_int156;
end
always @(*) begin
	/* main: %6*/
	/*   %gep157 = add i32 %gep_int156, 100*/
if (reset) begin main_signed_add_32_74_op1 = 0; end
		main_signed_add_32_74_op1 = 32'd100;
end
always @(*) begin
	main_signed_add_32_74 = (main_signed_add_32_74_op0 + main_signed_add_32_74_op1);
end
always @(*) begin
	/* main: %6*/
	/*   %gep159 = add i32 %gep_int158, 38*/
		main_signed_add_32_75_op0 = main_6_gep_int158;
end
always @(*) begin
	/* main: %6*/
	/*   %gep159 = add i32 %gep_int158, 38*/
if (reset) begin main_signed_add_32_75_op1 = 0; end
		main_signed_add_32_75_op1 = 32'd38;
end
always @(*) begin
	main_signed_add_32_75 = (main_signed_add_32_75_op0 + main_signed_add_32_75_op1);
end
always @(*) begin
	/* main: %6*/
	/*   %gep161 = add i32 %gep_int160, 20*/
		main_signed_add_32_76_op0 = main_6_gep_int160;
end
always @(*) begin
	/* main: %6*/
	/*   %gep161 = add i32 %gep_int160, 20*/
if (reset) begin main_signed_add_32_76_op1 = 0; end
		main_signed_add_32_76_op1 = 32'd20;
end
always @(*) begin
	main_signed_add_32_76 = (main_signed_add_32_76_op0 + main_signed_add_32_76_op1);
end
always @(*) begin
	/* main: %6*/
	/*   %gep163 = add i32 %gep_int162, 40*/
		main_signed_add_32_77_op0 = main_6_gep_int162;
end
always @(*) begin
	/* main: %6*/
	/*   %gep163 = add i32 %gep_int162, 40*/
if (reset) begin main_signed_add_32_77_op1 = 0; end
		main_signed_add_32_77_op1 = 32'd40;
end
always @(*) begin
	main_signed_add_32_77 = (main_signed_add_32_77_op0 + main_signed_add_32_77_op1);
end
always @(*) begin
	/* main: %6*/
	/*   %gep165 = add i32 %gep_int164, 20*/
		main_signed_add_32_78_op0 = main_6_gep_int164;
end
always @(*) begin
	/* main: %6*/
	/*   %gep165 = add i32 %gep_int164, 20*/
if (reset) begin main_signed_add_32_78_op1 = 0; end
		main_signed_add_32_78_op1 = 32'd20;
end
always @(*) begin
	main_signed_add_32_78 = (main_signed_add_32_78_op0 + main_signed_add_32_78_op1);
end
always @(*) begin
	/* main: %6*/
	/*   %gep167 = add i32 %gep_int166, 40*/
		main_signed_add_32_79_op0 = main_6_gep_int166;
end
always @(*) begin
	/* main: %6*/
	/*   %gep167 = add i32 %gep_int166, 40*/
if (reset) begin main_signed_add_32_79_op1 = 0; end
		main_signed_add_32_79_op1 = 32'd40;
end
always @(*) begin
	main_signed_add_32_79 = (main_signed_add_32_79_op0 + main_signed_add_32_79_op1);
end
always @(*) begin
	/* main: %6*/
	/*   %gep169 = add i32 %gep_int168, 84*/
		main_signed_add_32_80_op0 = main_6_gep_int168;
end
always @(*) begin
	/* main: %6*/
	/*   %gep169 = add i32 %gep_int168, 84*/
if (reset) begin main_signed_add_32_80_op1 = 0; end
		main_signed_add_32_80_op1 = 32'd84;
end
always @(*) begin
	main_signed_add_32_80 = (main_signed_add_32_80_op0 + main_signed_add_32_80_op1);
end
always @(*) begin
	/* main: %6*/
	/*   %gep171 = add i32 %gep_int170, 42*/
		main_signed_add_32_81_op0 = main_6_gep_int170;
end
always @(*) begin
	/* main: %6*/
	/*   %gep171 = add i32 %gep_int170, 42*/
if (reset) begin main_signed_add_32_81_op1 = 0; end
		main_signed_add_32_81_op1 = 32'd42;
end
always @(*) begin
	main_signed_add_32_81 = (main_signed_add_32_81_op0 + main_signed_add_32_81_op1);
end
always @(*) begin
	/* main: %6*/
	/*   %gep173 = add i32 %gep_int172, 84*/
		main_signed_add_32_82_op0 = main_6_gep_int172;
end
always @(*) begin
	/* main: %6*/
	/*   %gep173 = add i32 %gep_int172, 84*/
if (reset) begin main_signed_add_32_82_op1 = 0; end
		main_signed_add_32_82_op1 = 32'd84;
end
always @(*) begin
	main_signed_add_32_82 = (main_signed_add_32_82_op0 + main_signed_add_32_82_op1);
end
always @(*) begin
	/* main: %6*/
	/*   %gep175 = add i32 %gep_int174, 42*/
		main_signed_add_32_83_op0 = main_6_gep_int174;
end
always @(*) begin
	/* main: %6*/
	/*   %gep175 = add i32 %gep_int174, 42*/
if (reset) begin main_signed_add_32_83_op1 = 0; end
		main_signed_add_32_83_op1 = 32'd42;
end
always @(*) begin
	main_signed_add_32_83 = (main_signed_add_32_83_op0 + main_signed_add_32_83_op1);
end
always @(*) begin
	/* main: %6*/
	/*   %gep177 = add i32 %gep_int176, 52*/
		main_signed_add_32_84_op0 = main_6_gep_int176;
end
always @(*) begin
	/* main: %6*/
	/*   %gep177 = add i32 %gep_int176, 52*/
if (reset) begin main_signed_add_32_84_op1 = 0; end
		main_signed_add_32_84_op1 = 32'd52;
end
always @(*) begin
	main_signed_add_32_84 = (main_signed_add_32_84_op0 + main_signed_add_32_84_op1);
end
always @(*) begin
	/* main: %6*/
	/*   %gep179 = add i32 %gep_int178, 44*/
		main_signed_add_32_85_op0 = main_6_gep_int178;
end
always @(*) begin
	/* main: %6*/
	/*   %gep179 = add i32 %gep_int178, 44*/
if (reset) begin main_signed_add_32_85_op1 = 0; end
		main_signed_add_32_85_op1 = 32'd44;
end
always @(*) begin
	main_signed_add_32_85 = (main_signed_add_32_85_op0 + main_signed_add_32_85_op1);
end
always @(*) begin
	/* main: %6*/
	/*   %gep181 = add i32 %gep_int180, 52*/
		main_signed_add_32_86_op0 = main_6_gep_int180;
end
always @(*) begin
	/* main: %6*/
	/*   %gep181 = add i32 %gep_int180, 52*/
if (reset) begin main_signed_add_32_86_op1 = 0; end
		main_signed_add_32_86_op1 = 32'd52;
end
always @(*) begin
	main_signed_add_32_86 = (main_signed_add_32_86_op0 + main_signed_add_32_86_op1);
end
always @(*) begin
	/* main: %6*/
	/*   %gep183 = add i32 %gep_int182, 44*/
		main_signed_add_32_87_op0 = main_6_gep_int182;
end
always @(*) begin
	/* main: %6*/
	/*   %gep183 = add i32 %gep_int182, 44*/
if (reset) begin main_signed_add_32_87_op1 = 0; end
		main_signed_add_32_87_op1 = 32'd44;
end
always @(*) begin
	main_signed_add_32_87 = (main_signed_add_32_87_op0 + main_signed_add_32_87_op1);
end
always @(*) begin
	/* main: %6*/
	/*   %gep185 = add i32 %gep_int184, 116*/
		main_signed_add_32_88_op0 = main_6_gep_int184;
end
always @(*) begin
	/* main: %6*/
	/*   %gep185 = add i32 %gep_int184, 116*/
if (reset) begin main_signed_add_32_88_op1 = 0; end
		main_signed_add_32_88_op1 = 32'd116;
end
always @(*) begin
	main_signed_add_32_88 = (main_signed_add_32_88_op0 + main_signed_add_32_88_op1);
end
always @(*) begin
	/* main: %6*/
	/*   %gep187 = add i32 %gep_int186, 46*/
		main_signed_add_32_89_op0 = main_6_gep_int186;
end
always @(*) begin
	/* main: %6*/
	/*   %gep187 = add i32 %gep_int186, 46*/
if (reset) begin main_signed_add_32_89_op1 = 0; end
		main_signed_add_32_89_op1 = 32'd46;
end
always @(*) begin
	main_signed_add_32_89 = (main_signed_add_32_89_op0 + main_signed_add_32_89_op1);
end
always @(*) begin
	/* main: %6*/
	/*   %gep59 = add i32 %gep_int58, 14*/
		main_signed_add_32_25_op0 = main_6_gep_int58;
end
always @(*) begin
	/* main: %6*/
	/*   %gep59 = add i32 %gep_int58, 14*/
if (reset) begin main_signed_add_32_25_op1 = 0; end
		main_signed_add_32_25_op1 = 32'd14;
end
always @(*) begin
	main_signed_add_32_25 = (main_signed_add_32_25_op0 + main_signed_add_32_25_op1);
end
always @(*) begin
	/* main: %6*/
	/*   %gep61 = add i32 %gep_int60, 112*/
		main_signed_add_32_26_op0 = main_6_gep_int60;
end
always @(*) begin
	/* main: %6*/
	/*   %gep61 = add i32 %gep_int60, 112*/
if (reset) begin main_signed_add_32_26_op1 = 0; end
		main_signed_add_32_26_op1 = 32'd112;
end
always @(*) begin
	main_signed_add_32_26 = (main_signed_add_32_26_op0 + main_signed_add_32_26_op1);
end
always @(*) begin
	/* main: %6*/
	/*   %gep63 = add i32 %gep_int62, 14*/
		main_signed_add_32_27_op0 = main_6_gep_int62;
end
always @(*) begin
	/* main: %6*/
	/*   %gep63 = add i32 %gep_int62, 14*/
if (reset) begin main_signed_add_32_27_op1 = 0; end
		main_signed_add_32_27_op1 = 32'd14;
end
always @(*) begin
	main_signed_add_32_27 = (main_signed_add_32_27_op0 + main_signed_add_32_27_op1);
end
always @(*) begin
	/* main: %6*/
	/*   %gep65 = add i32 %gep_int64, 8*/
		main_signed_add_32_28_op0 = main_6_gep_int64;
end
always @(*) begin
	/* main: %6*/
	/*   %gep65 = add i32 %gep_int64, 8*/
if (reset) begin main_signed_add_32_28_op1 = 0; end
		main_signed_add_32_28_op1 = 32'd8;
end
always @(*) begin
	main_signed_add_32_28 = (main_signed_add_32_28_op0 + main_signed_add_32_28_op1);
end
always @(*) begin
	/* main: %6*/
	/*   %gep67 = add i32 %gep_int66, 16*/
		main_signed_add_32_29_op0 = main_6_gep_int66;
end
always @(*) begin
	/* main: %6*/
	/*   %gep67 = add i32 %gep_int66, 16*/
if (reset) begin main_signed_add_32_29_op1 = 0; end
		main_signed_add_32_29_op1 = 32'd16;
end
always @(*) begin
	main_signed_add_32_29 = (main_signed_add_32_29_op0 + main_signed_add_32_29_op1);
end
always @(*) begin
	/* main: %6*/
	/*   %gep69 = add i32 %gep_int68, 8*/
		main_signed_add_32_30_op0 = main_6_gep_int68;
end
always @(*) begin
	/* main: %6*/
	/*   %gep69 = add i32 %gep_int68, 8*/
if (reset) begin main_signed_add_32_30_op1 = 0; end
		main_signed_add_32_30_op1 = 32'd8;
end
always @(*) begin
	main_signed_add_32_30 = (main_signed_add_32_30_op0 + main_signed_add_32_30_op1);
end
always @(*) begin
	/* main: %6*/
	/*   %gep71 = add i32 %gep_int70, 16*/
		main_signed_add_32_31_op0 = main_6_gep_int70;
end
always @(*) begin
	/* main: %6*/
	/*   %gep71 = add i32 %gep_int70, 16*/
if (reset) begin main_signed_add_32_31_op1 = 0; end
		main_signed_add_32_31_op1 = 32'd16;
end
always @(*) begin
	main_signed_add_32_31 = (main_signed_add_32_31_op0 + main_signed_add_32_31_op1);
end
always @(*) begin
	/* main: %6*/
	/*   %gep73 = add i32 %gep_int72, 72*/
		main_signed_add_32_32_op0 = main_6_gep_int72;
end
always @(*) begin
	/* main: %6*/
	/*   %gep73 = add i32 %gep_int72, 72*/
if (reset) begin main_signed_add_32_32_op1 = 0; end
		main_signed_add_32_32_op1 = 32'd72;
end
always @(*) begin
	main_signed_add_32_32 = (main_signed_add_32_32_op0 + main_signed_add_32_32_op1);
end
always @(*) begin
	/* main: %6*/
	/*   %gep75 = add i32 %gep_int74, 18*/
		main_signed_add_32_33_op0 = main_6_gep_int74;
end
always @(*) begin
	/* main: %6*/
	/*   %gep75 = add i32 %gep_int74, 18*/
if (reset) begin main_signed_add_32_33_op1 = 0; end
		main_signed_add_32_33_op1 = 32'd18;
end
always @(*) begin
	main_signed_add_32_33 = (main_signed_add_32_33_op0 + main_signed_add_32_33_op1);
end
always @(*) begin
	/* main: %6*/
	/*   %gep77 = add i32 %gep_int76, 72*/
		main_signed_add_32_34_op0 = main_6_gep_int76;
end
always @(*) begin
	/* main: %6*/
	/*   %gep77 = add i32 %gep_int76, 72*/
if (reset) begin main_signed_add_32_34_op1 = 0; end
		main_signed_add_32_34_op1 = 32'd72;
end
always @(*) begin
	main_signed_add_32_34 = (main_signed_add_32_34_op0 + main_signed_add_32_34_op1);
end
always @(*) begin
	/* main: %6*/
	/*   %gep79 = add i32 %gep_int78, 18*/
		main_signed_add_32_35_op0 = main_6_gep_int78;
end
always @(*) begin
	/* main: %6*/
	/*   %gep79 = add i32 %gep_int78, 18*/
if (reset) begin main_signed_add_32_35_op1 = 0; end
		main_signed_add_32_35_op1 = 32'd18;
end
always @(*) begin
	main_signed_add_32_35 = (main_signed_add_32_35_op0 + main_signed_add_32_35_op1);
end
always @(*) begin
	/* main: %6*/
	/*   %gep81 = add i32 %gep_int80, 40*/
		main_signed_add_32_36_op0 = main_6_gep_int80;
end
always @(*) begin
	/* main: %6*/
	/*   %gep81 = add i32 %gep_int80, 40*/
if (reset) begin main_signed_add_32_36_op1 = 0; end
		main_signed_add_32_36_op1 = 32'd40;
end
always @(*) begin
	main_signed_add_32_36 = (main_signed_add_32_36_op0 + main_signed_add_32_36_op1);
end
always @(*) begin
	/* main: %6*/
	/*   %gep83 = add i32 %gep_int82, 20*/
		main_signed_add_32_37_op0 = main_6_gep_int82;
end
always @(*) begin
	/* main: %6*/
	/*   %gep83 = add i32 %gep_int82, 20*/
if (reset) begin main_signed_add_32_37_op1 = 0; end
		main_signed_add_32_37_op1 = 32'd20;
end
always @(*) begin
	main_signed_add_32_37 = (main_signed_add_32_37_op0 + main_signed_add_32_37_op1);
end
always @(*) begin
	/* main: %6*/
	/*   %gep85 = add i32 %gep_int84, 40*/
		main_signed_add_32_38_op0 = main_6_gep_int84;
end
always @(*) begin
	/* main: %6*/
	/*   %gep85 = add i32 %gep_int84, 40*/
if (reset) begin main_signed_add_32_38_op1 = 0; end
		main_signed_add_32_38_op1 = 32'd40;
end
always @(*) begin
	main_signed_add_32_38 = (main_signed_add_32_38_op0 + main_signed_add_32_38_op1);
end
always @(*) begin
	/* main: %6*/
	/*   %gep87 = add i32 %gep_int86, 20*/
		main_signed_add_32_39_op0 = main_6_gep_int86;
end
always @(*) begin
	/* main: %6*/
	/*   %gep87 = add i32 %gep_int86, 20*/
if (reset) begin main_signed_add_32_39_op1 = 0; end
		main_signed_add_32_39_op1 = 32'd20;
end
always @(*) begin
	main_signed_add_32_39 = (main_signed_add_32_39_op0 + main_signed_add_32_39_op1);
end
always @(*) begin
	/* main: %6*/
	/*   %gep235 = add i32 %gep_int234, 58*/
		main_signed_add_32_113_op0 = main_6_gep_int234;
end
always @(*) begin
	/* main: %6*/
	/*   %gep235 = add i32 %gep_int234, 58*/
if (reset) begin main_signed_add_32_113_op1 = 0; end
		main_signed_add_32_113_op1 = 32'd58;
end
always @(*) begin
	main_signed_add_32_113 = (main_signed_add_32_113_op0 + main_signed_add_32_113_op1);
end
always @(*) begin
	/* main: %6*/
	/*   %gep237 = add i32 %gep_int236, 92*/
		main_signed_add_32_114_op0 = main_6_gep_int236;
end
always @(*) begin
	/* main: %6*/
	/*   %gep237 = add i32 %gep_int236, 92*/
if (reset) begin main_signed_add_32_114_op1 = 0; end
		main_signed_add_32_114_op1 = 32'd92;
end
always @(*) begin
	main_signed_add_32_114 = (main_signed_add_32_114_op0 + main_signed_add_32_114_op1);
end
always @(*) begin
	/* main: %6*/
	/*   %gep239 = add i32 %gep_int238, 58*/
		main_signed_add_32_115_op0 = main_6_gep_int238;
end
always @(*) begin
	/* main: %6*/
	/*   %gep239 = add i32 %gep_int238, 58*/
if (reset) begin main_signed_add_32_115_op1 = 0; end
		main_signed_add_32_115_op1 = 32'd58;
end
always @(*) begin
	main_signed_add_32_115 = (main_signed_add_32_115_op0 + main_signed_add_32_115_op1);
end
always @(*) begin
	/* main: %6*/
	/*   %gep241 = add i32 %gep_int240, 60*/
		main_signed_add_32_116_op0 = main_6_gep_int240;
end
always @(*) begin
	/* main: %6*/
	/*   %gep241 = add i32 %gep_int240, 60*/
if (reset) begin main_signed_add_32_116_op1 = 0; end
		main_signed_add_32_116_op1 = 32'd60;
end
always @(*) begin
	main_signed_add_32_116 = (main_signed_add_32_116_op0 + main_signed_add_32_116_op1);
end
always @(*) begin
	/* main: %6*/
	/*   %gep243 = add i32 %gep_int242, 60*/
		main_signed_add_32_117_op0 = main_6_gep_int242;
end
always @(*) begin
	/* main: %6*/
	/*   %gep243 = add i32 %gep_int242, 60*/
if (reset) begin main_signed_add_32_117_op1 = 0; end
		main_signed_add_32_117_op1 = 32'd60;
end
always @(*) begin
	main_signed_add_32_117 = (main_signed_add_32_117_op0 + main_signed_add_32_117_op1);
end
always @(*) begin
	/* main: %6*/
	/*   %gep245 = add i32 %gep_int244, 60*/
		main_signed_add_32_118_op0 = main_6_gep_int244;
end
always @(*) begin
	/* main: %6*/
	/*   %gep245 = add i32 %gep_int244, 60*/
if (reset) begin main_signed_add_32_118_op1 = 0; end
		main_signed_add_32_118_op1 = 32'd60;
end
always @(*) begin
	main_signed_add_32_118 = (main_signed_add_32_118_op0 + main_signed_add_32_118_op1);
end
always @(*) begin
	/* main: %6*/
	/*   %gep247 = add i32 %gep_int246, 60*/
		main_signed_add_32_119_op0 = main_6_gep_int246;
end
always @(*) begin
	/* main: %6*/
	/*   %gep247 = add i32 %gep_int246, 60*/
if (reset) begin main_signed_add_32_119_op1 = 0; end
		main_signed_add_32_119_op1 = 32'd60;
end
always @(*) begin
	main_signed_add_32_119 = (main_signed_add_32_119_op0 + main_signed_add_32_119_op1);
end
always @(*) begin
	/* main: %6*/
	/*   %gep249 = add i32 %gep_int248, 124*/
		main_signed_add_32_120_op0 = main_6_gep_int248;
end
always @(*) begin
	/* main: %6*/
	/*   %gep249 = add i32 %gep_int248, 124*/
if (reset) begin main_signed_add_32_120_op1 = 0; end
		main_signed_add_32_120_op1 = 32'd124;
end
always @(*) begin
	main_signed_add_32_120 = (main_signed_add_32_120_op0 + main_signed_add_32_120_op1);
end
always @(*) begin
	/* main: %393*/
	/*   %395 = add i16 %sin_index.13.i, 2*/
	if ((cur_state == LEGUP_F_main_BB__393_398)) begin
		main_signed_add_16_0_op0 = main_393_sin_index13i_reg;
	end
	/* main: %404*/
	/*   %442 = add i16 %431, %437*/
	else if ((cur_state == LEGUP_F_main_BB__404_409)) begin
		main_signed_add_16_0_op0 = main_404_431;
	end
	/* main: %._crit_edge.i*/
	/*   %451 = add i16 %m.04.i, 1*/
	else /* if ((cur_state == LEGUP_F_main_BB__crit_edgei_414)) */ begin
		main_signed_add_16_0_op0 = main_393_m04i_reg;
	end
end
always @(*) begin
	/* main: %393*/
	/*   %395 = add i16 %sin_index.13.i, 2*/
	if ((cur_state == LEGUP_F_main_BB__393_398)) begin
		main_signed_add_16_0_op1 = 16'd2;
	end
	/* main: %404*/
	/*   %442 = add i16 %431, %437*/
	else if ((cur_state == LEGUP_F_main_BB__404_409)) begin
		main_signed_add_16_0_op1 = main_404_437;
	end
	/* main: %._crit_edge.i*/
	/*   %451 = add i16 %m.04.i, 1*/
	else /* if ((cur_state == LEGUP_F_main_BB__crit_edgei_414)) */ begin
		main_signed_add_16_0_op1 = 16'd1;
	end
end
always @(*) begin
	main_signed_add_16_0 = (main_signed_add_16_0_op0 + main_signed_add_16_0_op1);
end
always @(*) begin
	/* main: %404*/
	/*   %420 = mul nsw i32 %419, %403*/
		main_signed_multiply_32_1_op0 = main_404_419;
end
always @(*) begin
	/* main: %404*/
	/*   %420 = mul nsw i32 %419, %403*/
		main_signed_multiply_32_1_op1 = main_lrphi_403_reg;
end
always @(*) begin
	lpm_mult_main_404_420_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* main: %404*/
	/*   %420 = mul nsw i32 %419, %403*/
	if ((lpm_mult_main_404_420_en == 1'd1)) begin
		main_404_420_stage0_reg <= (main_signed_multiply_32_1_op0 * main_signed_multiply_32_1_op1);
	end
end
always @(*) begin
	main_signed_multiply_32_1 = main_404_420_stage0_reg;
end
always @(*) begin
	/* main: %6*/
	/*   %gep113 = add i32 %gep_int112, 56*/
		main_signed_add_32_52_op0 = main_6_gep_int112;
end
always @(*) begin
	/* main: %6*/
	/*   %gep113 = add i32 %gep_int112, 56*/
if (reset) begin main_signed_add_32_52_op1 = 0; end
		main_signed_add_32_52_op1 = 32'd56;
end
always @(*) begin
	main_signed_add_32_52 = (main_signed_add_32_52_op0 + main_signed_add_32_52_op1);
end
always @(*) begin
	/* main: %6*/
	/*   %gep115 = add i32 %gep_int114, 28*/
		main_signed_add_32_53_op0 = main_6_gep_int114;
end
always @(*) begin
	/* main: %6*/
	/*   %gep115 = add i32 %gep_int114, 28*/
if (reset) begin main_signed_add_32_53_op1 = 0; end
		main_signed_add_32_53_op1 = 32'd28;
end
always @(*) begin
	main_signed_add_32_53 = (main_signed_add_32_53_op0 + main_signed_add_32_53_op1);
end
always @(*) begin
	/* main: %6*/
	/*   %gep117 = add i32 %gep_int116, 56*/
		main_signed_add_32_54_op0 = main_6_gep_int116;
end
always @(*) begin
	/* main: %6*/
	/*   %gep117 = add i32 %gep_int116, 56*/
if (reset) begin main_signed_add_32_54_op1 = 0; end
		main_signed_add_32_54_op1 = 32'd56;
end
always @(*) begin
	main_signed_add_32_54 = (main_signed_add_32_54_op0 + main_signed_add_32_54_op1);
end
always @(*) begin
	/* main: %6*/
	/*   %gep119 = add i32 %gep_int118, 28*/
		main_signed_add_32_55_op0 = main_6_gep_int118;
end
always @(*) begin
	/* main: %6*/
	/*   %gep119 = add i32 %gep_int118, 28*/
if (reset) begin main_signed_add_32_55_op1 = 0; end
		main_signed_add_32_55_op1 = 32'd28;
end
always @(*) begin
	main_signed_add_32_55 = (main_signed_add_32_55_op0 + main_signed_add_32_55_op1);
end
always @(*) begin
	/* main: %6*/
	/*   %gep251 = add i32 %gep_int250, 62*/
		main_signed_add_32_121_op0 = main_6_gep_int250;
end
always @(*) begin
	/* main: %6*/
	/*   %gep251 = add i32 %gep_int250, 62*/
if (reset) begin main_signed_add_32_121_op1 = 0; end
		main_signed_add_32_121_op1 = 32'd62;
end
always @(*) begin
	main_signed_add_32_121 = (main_signed_add_32_121_op0 + main_signed_add_32_121_op1);
end
always @(*) begin
	/* main: %6*/
	/*   %gep253 = add i32 %gep_int252, 124*/
		main_signed_add_32_122_op0 = main_6_gep_int252;
end
always @(*) begin
	/* main: %6*/
	/*   %gep253 = add i32 %gep_int252, 124*/
if (reset) begin main_signed_add_32_122_op1 = 0; end
		main_signed_add_32_122_op1 = 32'd124;
end
always @(*) begin
	main_signed_add_32_122 = (main_signed_add_32_122_op0 + main_signed_add_32_122_op1);
end
always @(*) begin
	/* main: %6*/
	/*   %gep255 = add i32 %gep_int254, 62*/
		main_signed_add_32_123_op0 = main_6_gep_int254;
end
always @(*) begin
	/* main: %6*/
	/*   %gep255 = add i32 %gep_int254, 62*/
if (reset) begin main_signed_add_32_123_op1 = 0; end
		main_signed_add_32_123_op1 = 32'd62;
end
always @(*) begin
	main_signed_add_32_123 = (main_signed_add_32_123_op0 + main_signed_add_32_123_op1);
end
always @(*) begin
	/* main: %6*/
	/*   %gep257 = add i32 %gep_int256, 2*/
		main_signed_add_32_124_op0 = main_6_gep_int256;
end
always @(*) begin
	/* main: %6*/
	/*   %gep257 = add i32 %gep_int256, 2*/
if (reset) begin main_signed_add_32_124_op1 = 0; end
		main_signed_add_32_124_op1 = 32'd2;
end
always @(*) begin
	main_signed_add_32_124 = (main_signed_add_32_124_op0 + main_signed_add_32_124_op1);
end
always @(*) begin
	/* main: %6*/
	/*   %gep259 = add i32 %gep_int258, 64*/
		main_signed_add_32_125_op0 = main_6_gep_int258;
end
always @(*) begin
	/* main: %6*/
	/*   %gep259 = add i32 %gep_int258, 64*/
if (reset) begin main_signed_add_32_125_op1 = 0; end
		main_signed_add_32_125_op1 = 32'd64;
end
always @(*) begin
	main_signed_add_32_125 = (main_signed_add_32_125_op0 + main_signed_add_32_125_op1);
end
always @(*) begin
	/* main: %6*/
	/*   %gep261 = add i32 %gep_int260, 2*/
		main_signed_add_32_126_op0 = main_6_gep_int260;
end
always @(*) begin
	/* main: %6*/
	/*   %gep261 = add i32 %gep_int260, 2*/
if (reset) begin main_signed_add_32_126_op1 = 0; end
		main_signed_add_32_126_op1 = 32'd2;
end
always @(*) begin
	main_signed_add_32_126 = (main_signed_add_32_126_op0 + main_signed_add_32_126_op1);
end
always @(*) begin
	/* main: %6*/
	/*   %gep263 = add i32 %gep_int262, 64*/
		main_signed_add_32_127_op0 = main_6_gep_int262;
end
always @(*) begin
	/* main: %6*/
	/*   %gep263 = add i32 %gep_int262, 64*/
if (reset) begin main_signed_add_32_127_op1 = 0; end
		main_signed_add_32_127_op1 = 32'd64;
end
always @(*) begin
	main_signed_add_32_127 = (main_signed_add_32_127_op0 + main_signed_add_32_127_op1);
end
always @(*) begin
	/* main: %6*/
	/*   %gep265 = add i32 %gep_int264, 66*/
		main_signed_add_32_128_op0 = main_6_gep_int264;
end
always @(*) begin
	/* main: %6*/
	/*   %gep265 = add i32 %gep_int264, 66*/
if (reset) begin main_signed_add_32_128_op1 = 0; end
		main_signed_add_32_128_op1 = 32'd66;
end
always @(*) begin
	main_signed_add_32_128 = (main_signed_add_32_128_op0 + main_signed_add_32_128_op1);
end
always @(*) begin
	/* main: %6*/
	/*   %gep129 = add i32 %gep_int128, 4*/
		main_signed_add_32_60_op0 = main_6_gep_int128;
end
always @(*) begin
	/* main: %6*/
	/*   %gep129 = add i32 %gep_int128, 4*/
if (reset) begin main_signed_add_32_60_op1 = 0; end
		main_signed_add_32_60_op1 = 32'd4;
end
always @(*) begin
	main_signed_add_32_60 = (main_signed_add_32_60_op0 + main_signed_add_32_60_op1);
end
always @(*) begin
	/* main: %6*/
	/*   %gep131 = add i32 %gep_int130, 32*/
		main_signed_add_32_61_op0 = main_6_gep_int130;
end
always @(*) begin
	/* main: %6*/
	/*   %gep131 = add i32 %gep_int130, 32*/
if (reset) begin main_signed_add_32_61_op1 = 0; end
		main_signed_add_32_61_op1 = 32'd32;
end
always @(*) begin
	main_signed_add_32_61 = (main_signed_add_32_61_op0 + main_signed_add_32_61_op1);
end
always @(*) begin
	/* main: %6*/
	/*   %gep133 = add i32 %gep_int132, 4*/
		main_signed_add_32_62_op0 = main_6_gep_int132;
end
always @(*) begin
	/* main: %6*/
	/*   %gep133 = add i32 %gep_int132, 4*/
if (reset) begin main_signed_add_32_62_op1 = 0; end
		main_signed_add_32_62_op1 = 32'd4;
end
always @(*) begin
	main_signed_add_32_62 = (main_signed_add_32_62_op0 + main_signed_add_32_62_op1);
end
always @(*) begin
	/* main: %6*/
	/*   %gep135 = add i32 %gep_int134, 32*/
		main_signed_add_32_63_op0 = main_6_gep_int134;
end
always @(*) begin
	/* main: %6*/
	/*   %gep135 = add i32 %gep_int134, 32*/
if (reset) begin main_signed_add_32_63_op1 = 0; end
		main_signed_add_32_63_op1 = 32'd32;
end
always @(*) begin
	main_signed_add_32_63 = (main_signed_add_32_63_op0 + main_signed_add_32_63_op1);
end
always @(*) begin
	/* main: %6*/
	/*   %gep137 = add i32 %gep_int136, 68*/
		main_signed_add_32_64_op0 = main_6_gep_int136;
end
always @(*) begin
	/* main: %6*/
	/*   %gep137 = add i32 %gep_int136, 68*/
if (reset) begin main_signed_add_32_64_op1 = 0; end
		main_signed_add_32_64_op1 = 32'd68;
end
always @(*) begin
	main_signed_add_32_64 = (main_signed_add_32_64_op0 + main_signed_add_32_64_op1);
end
always @(*) begin
	/* main: %6*/
	/*   %gep139 = add i32 %gep_int138, 34*/
		main_signed_add_32_65_op0 = main_6_gep_int138;
end
always @(*) begin
	/* main: %6*/
	/*   %gep139 = add i32 %gep_int138, 34*/
if (reset) begin main_signed_add_32_65_op1 = 0; end
		main_signed_add_32_65_op1 = 32'd34;
end
always @(*) begin
	main_signed_add_32_65 = (main_signed_add_32_65_op0 + main_signed_add_32_65_op1);
end
always @(*) begin
	/* main: %6*/
	/*   %gep141 = add i32 %gep_int140, 68*/
		main_signed_add_32_66_op0 = main_6_gep_int140;
end
always @(*) begin
	/* main: %6*/
	/*   %gep141 = add i32 %gep_int140, 68*/
if (reset) begin main_signed_add_32_66_op1 = 0; end
		main_signed_add_32_66_op1 = 32'd68;
end
always @(*) begin
	main_signed_add_32_66 = (main_signed_add_32_66_op0 + main_signed_add_32_66_op1);
end
always @(*) begin
	/* main: %6*/
	/*   %gep143 = add i32 %gep_int142, 34*/
		main_signed_add_32_67_op0 = main_6_gep_int142;
end
always @(*) begin
	/* main: %6*/
	/*   %gep143 = add i32 %gep_int142, 34*/
if (reset) begin main_signed_add_32_67_op1 = 0; end
		main_signed_add_32_67_op1 = 32'd34;
end
always @(*) begin
	main_signed_add_32_67 = (main_signed_add_32_67_op0 + main_signed_add_32_67_op1);
end
always @(*) begin
	/* main: %6*/
	/*   %gep145 = add i32 %gep_int144, 36*/
		main_signed_add_32_68_op0 = main_6_gep_int144;
end
always @(*) begin
	/* main: %6*/
	/*   %gep145 = add i32 %gep_int144, 36*/
if (reset) begin main_signed_add_32_68_op1 = 0; end
		main_signed_add_32_68_op1 = 32'd36;
end
always @(*) begin
	main_signed_add_32_68 = (main_signed_add_32_68_op0 + main_signed_add_32_68_op1);
end
always @(*) begin
	/* main: %6*/
	/*   %gep147 = add i32 %gep_int146, 36*/
		main_signed_add_32_69_op0 = main_6_gep_int146;
end
always @(*) begin
	/* main: %6*/
	/*   %gep147 = add i32 %gep_int146, 36*/
if (reset) begin main_signed_add_32_69_op1 = 0; end
		main_signed_add_32_69_op1 = 32'd36;
end
always @(*) begin
	main_signed_add_32_69 = (main_signed_add_32_69_op0 + main_signed_add_32_69_op1);
end
always @(*) begin
	/* main: %6*/
	/*   %gep149 = add i32 %gep_int148, 36*/
		main_signed_add_32_70_op0 = main_6_gep_int148;
end
always @(*) begin
	/* main: %6*/
	/*   %gep149 = add i32 %gep_int148, 36*/
if (reset) begin main_signed_add_32_70_op1 = 0; end
		main_signed_add_32_70_op1 = 32'd36;
end
always @(*) begin
	main_signed_add_32_70 = (main_signed_add_32_70_op0 + main_signed_add_32_70_op1);
end
always @(*) begin
	/* main: %6*/
	/*   %gep151 = add i32 %gep_int150, 36*/
		main_signed_add_32_71_op0 = main_6_gep_int150;
end
always @(*) begin
	/* main: %6*/
	/*   %gep151 = add i32 %gep_int150, 36*/
if (reset) begin main_signed_add_32_71_op1 = 0; end
		main_signed_add_32_71_op1 = 32'd36;
end
always @(*) begin
	main_signed_add_32_71 = (main_signed_add_32_71_op0 + main_signed_add_32_71_op1);
end
always @(*) begin
	/* main: %6*/
	/*   %gep153 = add i32 %gep_int152, 100*/
		main_signed_add_32_72_op0 = main_6_gep_int152;
end
always @(*) begin
	/* main: %6*/
	/*   %gep153 = add i32 %gep_int152, 100*/
if (reset) begin main_signed_add_32_72_op1 = 0; end
		main_signed_add_32_72_op1 = 32'd100;
end
always @(*) begin
	main_signed_add_32_72 = (main_signed_add_32_72_op0 + main_signed_add_32_72_op1);
end
always @(*) begin
	/* main: %6*/
	/*   %gep155 = add i32 %gep_int154, 38*/
		main_signed_add_32_73_op0 = main_6_gep_int154;
end
always @(*) begin
	/* main: %6*/
	/*   %gep155 = add i32 %gep_int154, 38*/
if (reset) begin main_signed_add_32_73_op1 = 0; end
		main_signed_add_32_73_op1 = 32'd38;
end
always @(*) begin
	main_signed_add_32_73 = (main_signed_add_32_73_op0 + main_signed_add_32_73_op1);
end
always @(*) begin
	/* main: %6*/
	/*   %gep375 = add i32 %gep_int374, 92*/
		main_signed_add_32_183_op0 = main_6_gep_int374;
end
always @(*) begin
	/* main: %6*/
	/*   %gep375 = add i32 %gep_int374, 92*/
if (reset) begin main_signed_add_32_183_op1 = 0; end
		main_signed_add_32_183_op1 = 32'd92;
end
always @(*) begin
	main_signed_add_32_183 = (main_signed_add_32_183_op0 + main_signed_add_32_183_op1);
end
always @(*) begin
	/* main: %6*/
	/*   %gep377 = add i32 %gep_int376, 122*/
		main_signed_add_32_184_op0 = main_6_gep_int376;
end
always @(*) begin
	/* main: %6*/
	/*   %gep377 = add i32 %gep_int376, 122*/
if (reset) begin main_signed_add_32_184_op1 = 0; end
		main_signed_add_32_184_op1 = 32'd122;
end
always @(*) begin
	main_signed_add_32_184 = (main_signed_add_32_184_op0 + main_signed_add_32_184_op1);
end
always @(*) begin
	/* main: %6*/
	/*   %gep379 = add i32 %gep_int378, 94*/
		main_signed_add_32_185_op0 = main_6_gep_int378;
end
always @(*) begin
	/* main: %6*/
	/*   %gep379 = add i32 %gep_int378, 94*/
if (reset) begin main_signed_add_32_185_op1 = 0; end
		main_signed_add_32_185_op1 = 32'd94;
end
always @(*) begin
	main_signed_add_32_185 = (main_signed_add_32_185_op0 + main_signed_add_32_185_op1);
end
always @(*) begin
	/* main: %6*/
	/*   %gep381 = add i32 %gep_int380, 122*/
		main_signed_add_32_186_op0 = main_6_gep_int380;
end
always @(*) begin
	/* main: %6*/
	/*   %gep381 = add i32 %gep_int380, 122*/
if (reset) begin main_signed_add_32_186_op1 = 0; end
		main_signed_add_32_186_op1 = 32'd122;
end
always @(*) begin
	main_signed_add_32_186 = (main_signed_add_32_186_op0 + main_signed_add_32_186_op1);
end
always @(*) begin
	/* main: %6*/
	/*   %gep383 = add i32 %gep_int382, 94*/
		main_signed_add_32_187_op0 = main_6_gep_int382;
end
always @(*) begin
	/* main: %6*/
	/*   %gep383 = add i32 %gep_int382, 94*/
if (reset) begin main_signed_add_32_187_op1 = 0; end
		main_signed_add_32_187_op1 = 32'd94;
end
always @(*) begin
	main_signed_add_32_187 = (main_signed_add_32_187_op0 + main_signed_add_32_187_op1);
end
always @(*) begin
	/* main: %6*/
	/*   %gep385 = add i32 %gep_int384, 6*/
		main_signed_add_32_188_op0 = main_6_gep_int384;
end
always @(*) begin
	/* main: %6*/
	/*   %gep385 = add i32 %gep_int384, 6*/
if (reset) begin main_signed_add_32_188_op1 = 0; end
		main_signed_add_32_188_op1 = 32'd6;
end
always @(*) begin
	main_signed_add_32_188 = (main_signed_add_32_188_op0 + main_signed_add_32_188_op1);
end
always @(*) begin
	/* main: %6*/
	/*   %gep387 = add i32 %gep_int386, 96*/
		main_signed_add_32_189_op0 = main_6_gep_int386;
end
always @(*) begin
	/* main: %6*/
	/*   %gep387 = add i32 %gep_int386, 96*/
if (reset) begin main_signed_add_32_189_op1 = 0; end
		main_signed_add_32_189_op1 = 32'd96;
end
always @(*) begin
	main_signed_add_32_189 = (main_signed_add_32_189_op0 + main_signed_add_32_189_op1);
end
always @(*) begin
	/* main: %6*/
	/*   %gep389 = add i32 %gep_int388, 6*/
		main_signed_add_32_190_op0 = main_6_gep_int388;
end
always @(*) begin
	/* main: %6*/
	/*   %gep389 = add i32 %gep_int388, 6*/
if (reset) begin main_signed_add_32_190_op1 = 0; end
		main_signed_add_32_190_op1 = 32'd6;
end
always @(*) begin
	main_signed_add_32_190 = (main_signed_add_32_190_op0 + main_signed_add_32_190_op1);
end
always @(*) begin
	/* main: %6*/
	/*   %gep391 = add i32 %gep_int390, 96*/
		main_signed_add_32_191_op0 = main_6_gep_int390;
end
always @(*) begin
	/* main: %6*/
	/*   %gep391 = add i32 %gep_int390, 96*/
if (reset) begin main_signed_add_32_191_op1 = 0; end
		main_signed_add_32_191_op1 = 32'd96;
end
always @(*) begin
	main_signed_add_32_191 = (main_signed_add_32_191_op0 + main_signed_add_32_191_op1);
end
always @(*) begin
	/* main: %6*/
	/*   %gep393 = add i32 %gep_int392, 70*/
		main_signed_add_32_192_op0 = main_6_gep_int392;
end
always @(*) begin
	/* main: %6*/
	/*   %gep393 = add i32 %gep_int392, 70*/
if (reset) begin main_signed_add_32_192_op1 = 0; end
		main_signed_add_32_192_op1 = 32'd70;
end
always @(*) begin
	main_signed_add_32_192 = (main_signed_add_32_192_op0 + main_signed_add_32_192_op1);
end
always @(*) begin
	/* main: %6*/
	/*   %gep395 = add i32 %gep_int394, 98*/
		main_signed_add_32_193_op0 = main_6_gep_int394;
end
always @(*) begin
	/* main: %6*/
	/*   %gep395 = add i32 %gep_int394, 98*/
if (reset) begin main_signed_add_32_193_op1 = 0; end
		main_signed_add_32_193_op1 = 32'd98;
end
always @(*) begin
	main_signed_add_32_193 = (main_signed_add_32_193_op0 + main_signed_add_32_193_op1);
end
always @(*) begin
	/* main: %6*/
	/*   %gep397 = add i32 %gep_int396, 70*/
		main_signed_add_32_194_op0 = main_6_gep_int396;
end
always @(*) begin
	/* main: %6*/
	/*   %gep397 = add i32 %gep_int396, 70*/
if (reset) begin main_signed_add_32_194_op1 = 0; end
		main_signed_add_32_194_op1 = 32'd70;
end
always @(*) begin
	main_signed_add_32_194 = (main_signed_add_32_194_op0 + main_signed_add_32_194_op1);
end
always @(*) begin
	/* main: %6*/
	/*   %gep399 = add i32 %gep_int398, 98*/
		main_signed_add_32_195_op0 = main_6_gep_int398;
end
always @(*) begin
	/* main: %6*/
	/*   %gep399 = add i32 %gep_int398, 98*/
if (reset) begin main_signed_add_32_195_op1 = 0; end
		main_signed_add_32_195_op1 = 32'd98;
end
always @(*) begin
	main_signed_add_32_195 = (main_signed_add_32_195_op0 + main_signed_add_32_195_op1);
end
always @(*) begin
	/* main: %6*/
	/*   %gep401 = add i32 %gep_int400, 38*/
		main_signed_add_32_196_op0 = main_6_gep_int400;
end
always @(*) begin
	/* main: %6*/
	/*   %gep401 = add i32 %gep_int400, 38*/
if (reset) begin main_signed_add_32_196_op1 = 0; end
		main_signed_add_32_196_op1 = 32'd38;
end
always @(*) begin
	main_signed_add_32_196 = (main_signed_add_32_196_op0 + main_signed_add_32_196_op1);
end
always @(*) begin
	/* main: %6*/
	/*   %gep403 = add i32 %gep_int402, 100*/
		main_signed_add_32_197_op0 = main_6_gep_int402;
end
always @(*) begin
	/* main: %6*/
	/*   %gep403 = add i32 %gep_int402, 100*/
if (reset) begin main_signed_add_32_197_op1 = 0; end
		main_signed_add_32_197_op1 = 32'd100;
end
always @(*) begin
	main_signed_add_32_197 = (main_signed_add_32_197_op0 + main_signed_add_32_197_op1);
end
always @(*) begin
	/* main: %6*/
	/*   %gep405 = add i32 %gep_int404, 38*/
		main_signed_add_32_198_op0 = main_6_gep_int404;
end
always @(*) begin
	/* main: %6*/
	/*   %gep405 = add i32 %gep_int404, 38*/
if (reset) begin main_signed_add_32_198_op1 = 0; end
		main_signed_add_32_198_op1 = 32'd38;
end
always @(*) begin
	main_signed_add_32_198 = (main_signed_add_32_198_op0 + main_signed_add_32_198_op1);
end
always @(*) begin
	/* main: %6*/
	/*   %gep407 = add i32 %gep_int406, 100*/
		main_signed_add_32_199_op0 = main_6_gep_int406;
end
always @(*) begin
	/* main: %6*/
	/*   %gep407 = add i32 %gep_int406, 100*/
if (reset) begin main_signed_add_32_199_op1 = 0; end
		main_signed_add_32_199_op1 = 32'd100;
end
always @(*) begin
	main_signed_add_32_199 = (main_signed_add_32_199_op0 + main_signed_add_32_199_op1);
end
always @(*) begin
	/* main: %6*/
	/*   %gep409 = add i32 %gep_int408, 102*/
		main_signed_add_32_200_op0 = main_6_gep_int408;
end
always @(*) begin
	/* main: %6*/
	/*   %gep409 = add i32 %gep_int408, 102*/
if (reset) begin main_signed_add_32_200_op1 = 0; end
		main_signed_add_32_200_op1 = 32'd102;
end
always @(*) begin
	main_signed_add_32_200 = (main_signed_add_32_200_op0 + main_signed_add_32_200_op1);
end
always @(*) begin
	/* main: %6*/
	/*   %gep411 = add i32 %gep_int410, 102*/
		main_signed_add_32_201_op0 = main_6_gep_int410;
end
always @(*) begin
	/* main: %6*/
	/*   %gep411 = add i32 %gep_int410, 102*/
if (reset) begin main_signed_add_32_201_op1 = 0; end
		main_signed_add_32_201_op1 = 32'd102;
end
always @(*) begin
	main_signed_add_32_201 = (main_signed_add_32_201_op0 + main_signed_add_32_201_op1);
end
always @(*) begin
	/* main: %6*/
	/*   %gep413 = add i32 %gep_int412, 102*/
		main_signed_add_32_202_op0 = main_6_gep_int412;
end
always @(*) begin
	/* main: %6*/
	/*   %gep413 = add i32 %gep_int412, 102*/
if (reset) begin main_signed_add_32_202_op1 = 0; end
		main_signed_add_32_202_op1 = 32'd102;
end
always @(*) begin
	main_signed_add_32_202 = (main_signed_add_32_202_op0 + main_signed_add_32_202_op1);
end
always @(*) begin
	/* main: %6*/
	/*   %gep415 = add i32 %gep_int414, 102*/
		main_signed_add_32_203_op0 = main_6_gep_int414;
end
always @(*) begin
	/* main: %6*/
	/*   %gep415 = add i32 %gep_int414, 102*/
if (reset) begin main_signed_add_32_203_op1 = 0; end
		main_signed_add_32_203_op1 = 32'd102;
end
always @(*) begin
	main_signed_add_32_203 = (main_signed_add_32_203_op0 + main_signed_add_32_203_op1);
end
always @(*) begin
	/* main: %6*/
	/*   %gep417 = add i32 %gep_int416, 22*/
		main_signed_add_32_204_op0 = main_6_gep_int416;
end
always @(*) begin
	/* main: %6*/
	/*   %gep417 = add i32 %gep_int416, 22*/
if (reset) begin main_signed_add_32_204_op1 = 0; end
		main_signed_add_32_204_op1 = 32'd22;
end
always @(*) begin
	main_signed_add_32_204 = (main_signed_add_32_204_op0 + main_signed_add_32_204_op1);
end
always @(*) begin
	/* main: %6*/
	/*   %gep419 = add i32 %gep_int418, 104*/
		main_signed_add_32_205_op0 = main_6_gep_int418;
end
always @(*) begin
	/* main: %6*/
	/*   %gep419 = add i32 %gep_int418, 104*/
if (reset) begin main_signed_add_32_205_op1 = 0; end
		main_signed_add_32_205_op1 = 32'd104;
end
always @(*) begin
	main_signed_add_32_205 = (main_signed_add_32_205_op0 + main_signed_add_32_205_op1);
end
always @(*) begin
	/* main: %6*/
	/*   %gep421 = add i32 %gep_int420, 22*/
		main_signed_add_32_206_op0 = main_6_gep_int420;
end
always @(*) begin
	/* main: %6*/
	/*   %gep421 = add i32 %gep_int420, 22*/
if (reset) begin main_signed_add_32_206_op1 = 0; end
		main_signed_add_32_206_op1 = 32'd22;
end
always @(*) begin
	main_signed_add_32_206 = (main_signed_add_32_206_op0 + main_signed_add_32_206_op1);
end
always @(*) begin
	/* main: %6*/
	/*   %gep423 = add i32 %gep_int422, 104*/
		main_signed_add_32_207_op0 = main_6_gep_int422;
end
always @(*) begin
	/* main: %6*/
	/*   %gep423 = add i32 %gep_int422, 104*/
if (reset) begin main_signed_add_32_207_op1 = 0; end
		main_signed_add_32_207_op1 = 32'd104;
end
always @(*) begin
	main_signed_add_32_207 = (main_signed_add_32_207_op0 + main_signed_add_32_207_op1);
end
always @(*) begin
	/* main: %6*/
	/*   %gep425 = add i32 %gep_int424, 86*/
		main_signed_add_32_208_op0 = main_6_gep_int424;
end
always @(*) begin
	/* main: %6*/
	/*   %gep425 = add i32 %gep_int424, 86*/
if (reset) begin main_signed_add_32_208_op1 = 0; end
		main_signed_add_32_208_op1 = 32'd86;
end
always @(*) begin
	main_signed_add_32_208 = (main_signed_add_32_208_op0 + main_signed_add_32_208_op1);
end
always @(*) begin
	/* main: %6*/
	/*   %gep427 = add i32 %gep_int426, 106*/
		main_signed_add_32_209_op0 = main_6_gep_int426;
end
always @(*) begin
	/* main: %6*/
	/*   %gep427 = add i32 %gep_int426, 106*/
if (reset) begin main_signed_add_32_209_op1 = 0; end
		main_signed_add_32_209_op1 = 32'd106;
end
always @(*) begin
	main_signed_add_32_209 = (main_signed_add_32_209_op0 + main_signed_add_32_209_op1);
end
always @(*) begin
	/* main: %6*/
	/*   %gep429 = add i32 %gep_int428, 86*/
		main_signed_add_32_210_op0 = main_6_gep_int428;
end
always @(*) begin
	/* main: %6*/
	/*   %gep429 = add i32 %gep_int428, 86*/
if (reset) begin main_signed_add_32_210_op1 = 0; end
		main_signed_add_32_210_op1 = 32'd86;
end
always @(*) begin
	main_signed_add_32_210 = (main_signed_add_32_210_op0 + main_signed_add_32_210_op1);
end
always @(*) begin
	/* main: %6*/
	/*   %gep431 = add i32 %gep_int430, 106*/
		main_signed_add_32_211_op0 = main_6_gep_int430;
end
always @(*) begin
	/* main: %6*/
	/*   %gep431 = add i32 %gep_int430, 106*/
if (reset) begin main_signed_add_32_211_op1 = 0; end
		main_signed_add_32_211_op1 = 32'd106;
end
always @(*) begin
	main_signed_add_32_211 = (main_signed_add_32_211_op0 + main_signed_add_32_211_op1);
end
always @(*) begin
	/* main: %6*/
	/*   %gep433 = add i32 %gep_int432, 54*/
		main_signed_add_32_212_op0 = main_6_gep_int432;
end
always @(*) begin
	/* main: %6*/
	/*   %gep433 = add i32 %gep_int432, 54*/
if (reset) begin main_signed_add_32_212_op1 = 0; end
		main_signed_add_32_212_op1 = 32'd54;
end
always @(*) begin
	main_signed_add_32_212 = (main_signed_add_32_212_op0 + main_signed_add_32_212_op1);
end
always @(*) begin
	/* main: %6*/
	/*   %gep435 = add i32 %gep_int434, 108*/
		main_signed_add_32_213_op0 = main_6_gep_int434;
end
always @(*) begin
	/* main: %6*/
	/*   %gep435 = add i32 %gep_int434, 108*/
if (reset) begin main_signed_add_32_213_op1 = 0; end
		main_signed_add_32_213_op1 = 32'd108;
end
always @(*) begin
	main_signed_add_32_213 = (main_signed_add_32_213_op0 + main_signed_add_32_213_op1);
end
always @(*) begin
	/* main: %6*/
	/*   %gep437 = add i32 %gep_int436, 54*/
		main_signed_add_32_214_op0 = main_6_gep_int436;
end
always @(*) begin
	/* main: %6*/
	/*   %gep437 = add i32 %gep_int436, 54*/
if (reset) begin main_signed_add_32_214_op1 = 0; end
		main_signed_add_32_214_op1 = 32'd54;
end
always @(*) begin
	main_signed_add_32_214 = (main_signed_add_32_214_op0 + main_signed_add_32_214_op1);
end
always @(*) begin
	/* main: %6*/
	/*   %gep439 = add i32 %gep_int438, 108*/
		main_signed_add_32_215_op0 = main_6_gep_int438;
end
always @(*) begin
	/* main: %6*/
	/*   %gep439 = add i32 %gep_int438, 108*/
if (reset) begin main_signed_add_32_215_op1 = 0; end
		main_signed_add_32_215_op1 = 32'd108;
end
always @(*) begin
	main_signed_add_32_215 = (main_signed_add_32_215_op0 + main_signed_add_32_215_op1);
end
always @(*) begin
	/* main: %6*/
	/*   %gep189 = add i32 %gep_int188, 116*/
		main_signed_add_32_90_op0 = main_6_gep_int188;
end
always @(*) begin
	/* main: %6*/
	/*   %gep189 = add i32 %gep_int188, 116*/
if (reset) begin main_signed_add_32_90_op1 = 0; end
		main_signed_add_32_90_op1 = 32'd116;
end
always @(*) begin
	main_signed_add_32_90 = (main_signed_add_32_90_op0 + main_signed_add_32_90_op1);
end
always @(*) begin
	/* main: %6*/
	/*   %gep191 = add i32 %gep_int190, 46*/
		main_signed_add_32_91_op0 = main_6_gep_int190;
end
always @(*) begin
	/* main: %6*/
	/*   %gep191 = add i32 %gep_int190, 46*/
if (reset) begin main_signed_add_32_91_op1 = 0; end
		main_signed_add_32_91_op1 = 32'd46;
end
always @(*) begin
	main_signed_add_32_91 = (main_signed_add_32_91_op0 + main_signed_add_32_91_op1);
end
always @(*) begin
	/* main: %6*/
	/*   %gep193 = add i32 %gep_int192, 12*/
		main_signed_add_32_92_op0 = main_6_gep_int192;
end
always @(*) begin
	/* main: %6*/
	/*   %gep193 = add i32 %gep_int192, 12*/
if (reset) begin main_signed_add_32_92_op1 = 0; end
		main_signed_add_32_92_op1 = 32'd12;
end
always @(*) begin
	main_signed_add_32_92 = (main_signed_add_32_92_op0 + main_signed_add_32_92_op1);
end
always @(*) begin
	/* main: %6*/
	/*   %gep195 = add i32 %gep_int194, 48*/
		main_signed_add_32_93_op0 = main_6_gep_int194;
end
always @(*) begin
	/* main: %6*/
	/*   %gep195 = add i32 %gep_int194, 48*/
if (reset) begin main_signed_add_32_93_op1 = 0; end
		main_signed_add_32_93_op1 = 32'd48;
end
always @(*) begin
	main_signed_add_32_93 = (main_signed_add_32_93_op0 + main_signed_add_32_93_op1);
end
always @(*) begin
	/* main: %6*/
	/*   %gep197 = add i32 %gep_int196, 12*/
		main_signed_add_32_94_op0 = main_6_gep_int196;
end
always @(*) begin
	/* main: %6*/
	/*   %gep197 = add i32 %gep_int196, 12*/
if (reset) begin main_signed_add_32_94_op1 = 0; end
		main_signed_add_32_94_op1 = 32'd12;
end
always @(*) begin
	main_signed_add_32_94 = (main_signed_add_32_94_op0 + main_signed_add_32_94_op1);
end
always @(*) begin
	/* main: %6*/
	/*   %gep199 = add i32 %gep_int198, 48*/
		main_signed_add_32_95_op0 = main_6_gep_int198;
end
always @(*) begin
	/* main: %6*/
	/*   %gep199 = add i32 %gep_int198, 48*/
if (reset) begin main_signed_add_32_95_op1 = 0; end
		main_signed_add_32_95_op1 = 32'd48;
end
always @(*) begin
	main_signed_add_32_95 = (main_signed_add_32_95_op0 + main_signed_add_32_95_op1);
end
always @(*) begin
	/* main: %6*/
	/*   %gep201 = add i32 %gep_int200, 76*/
		main_signed_add_32_96_op0 = main_6_gep_int200;
end
always @(*) begin
	/* main: %6*/
	/*   %gep201 = add i32 %gep_int200, 76*/
if (reset) begin main_signed_add_32_96_op1 = 0; end
		main_signed_add_32_96_op1 = 32'd76;
end
always @(*) begin
	main_signed_add_32_96 = (main_signed_add_32_96_op0 + main_signed_add_32_96_op1);
end
always @(*) begin
	/* main: %6*/
	/*   %gep203 = add i32 %gep_int202, 50*/
		main_signed_add_32_97_op0 = main_6_gep_int202;
end
always @(*) begin
	/* main: %6*/
	/*   %gep203 = add i32 %gep_int202, 50*/
if (reset) begin main_signed_add_32_97_op1 = 0; end
		main_signed_add_32_97_op1 = 32'd50;
end
always @(*) begin
	main_signed_add_32_97 = (main_signed_add_32_97_op0 + main_signed_add_32_97_op1);
end
always @(*) begin
	/* main: %6*/
	/*   %gep205 = add i32 %gep_int204, 76*/
		main_signed_add_32_98_op0 = main_6_gep_int204;
end
always @(*) begin
	/* main: %6*/
	/*   %gep205 = add i32 %gep_int204, 76*/
if (reset) begin main_signed_add_32_98_op1 = 0; end
		main_signed_add_32_98_op1 = 32'd76;
end
always @(*) begin
	main_signed_add_32_98 = (main_signed_add_32_98_op0 + main_signed_add_32_98_op1);
end
always @(*) begin
	/* main: %6*/
	/*   %gep207 = add i32 %gep_int206, 50*/
		main_signed_add_32_99_op0 = main_6_gep_int206;
end
always @(*) begin
	/* main: %6*/
	/*   %gep207 = add i32 %gep_int206, 50*/
if (reset) begin main_signed_add_32_99_op1 = 0; end
		main_signed_add_32_99_op1 = 32'd50;
end
always @(*) begin
	main_signed_add_32_99 = (main_signed_add_32_99_op0 + main_signed_add_32_99_op1);
end
always @(*) begin
	/* main: %6*/
	/*   %gep209 = add i32 %gep_int208, 44*/
		main_signed_add_32_100_op0 = main_6_gep_int208;
end
always @(*) begin
	/* main: %6*/
	/*   %gep209 = add i32 %gep_int208, 44*/
if (reset) begin main_signed_add_32_100_op1 = 0; end
		main_signed_add_32_100_op1 = 32'd44;
end
always @(*) begin
	main_signed_add_32_100 = (main_signed_add_32_100_op0 + main_signed_add_32_100_op1);
end
always @(*) begin
	/* main: %6*/
	/*   %gep211 = add i32 %gep_int210, 52*/
		main_signed_add_32_101_op0 = main_6_gep_int210;
end
always @(*) begin
	/* main: %6*/
	/*   %gep211 = add i32 %gep_int210, 52*/
if (reset) begin main_signed_add_32_101_op1 = 0; end
		main_signed_add_32_101_op1 = 32'd52;
end
always @(*) begin
	main_signed_add_32_101 = (main_signed_add_32_101_op0 + main_signed_add_32_101_op1);
end
always @(*) begin
	/* main: %6*/
	/*   %gep213 = add i32 %gep_int212, 44*/
		main_signed_add_32_102_op0 = main_6_gep_int212;
end
always @(*) begin
	/* main: %6*/
	/*   %gep213 = add i32 %gep_int212, 44*/
if (reset) begin main_signed_add_32_102_op1 = 0; end
		main_signed_add_32_102_op1 = 32'd44;
end
always @(*) begin
	main_signed_add_32_102 = (main_signed_add_32_102_op0 + main_signed_add_32_102_op1);
end
always @(*) begin
	/* main: %6*/
	/*   %gep215 = add i32 %gep_int214, 52*/
		main_signed_add_32_103_op0 = main_6_gep_int214;
end
always @(*) begin
	/* main: %6*/
	/*   %gep215 = add i32 %gep_int214, 52*/
if (reset) begin main_signed_add_32_103_op1 = 0; end
		main_signed_add_32_103_op1 = 32'd52;
end
always @(*) begin
	main_signed_add_32_103 = (main_signed_add_32_103_op0 + main_signed_add_32_103_op1);
end
always @(*) begin
	/* main: %6*/
	/*   %gep217 = add i32 %gep_int216, 108*/
		main_signed_add_32_104_op0 = main_6_gep_int216;
end
always @(*) begin
	/* main: %6*/
	/*   %gep217 = add i32 %gep_int216, 108*/
if (reset) begin main_signed_add_32_104_op1 = 0; end
		main_signed_add_32_104_op1 = 32'd108;
end
always @(*) begin
	main_signed_add_32_104 = (main_signed_add_32_104_op0 + main_signed_add_32_104_op1);
end
always @(*) begin
	/* main: %6*/
	/*   %gep219 = add i32 %gep_int218, 54*/
		main_signed_add_32_105_op0 = main_6_gep_int218;
end
always @(*) begin
	/* main: %6*/
	/*   %gep219 = add i32 %gep_int218, 54*/
if (reset) begin main_signed_add_32_105_op1 = 0; end
		main_signed_add_32_105_op1 = 32'd54;
end
always @(*) begin
	main_signed_add_32_105 = (main_signed_add_32_105_op0 + main_signed_add_32_105_op1);
end
always @(*) begin
	/* main: %6*/
	/*   %gep221 = add i32 %gep_int220, 108*/
		main_signed_add_32_106_op0 = main_6_gep_int220;
end
always @(*) begin
	/* main: %6*/
	/*   %gep221 = add i32 %gep_int220, 108*/
if (reset) begin main_signed_add_32_106_op1 = 0; end
		main_signed_add_32_106_op1 = 32'd108;
end
always @(*) begin
	main_signed_add_32_106 = (main_signed_add_32_106_op0 + main_signed_add_32_106_op1);
end
always @(*) begin
	/* main: %6*/
	/*   %gep223 = add i32 %gep_int222, 54*/
		main_signed_add_32_107_op0 = main_6_gep_int222;
end
always @(*) begin
	/* main: %6*/
	/*   %gep223 = add i32 %gep_int222, 54*/
if (reset) begin main_signed_add_32_107_op1 = 0; end
		main_signed_add_32_107_op1 = 32'd54;
end
always @(*) begin
	main_signed_add_32_107 = (main_signed_add_32_107_op0 + main_signed_add_32_107_op1);
end
always @(*) begin
	/* main: %6*/
	/*   %gep225 = add i32 %gep_int224, 28*/
		main_signed_add_32_108_op0 = main_6_gep_int224;
end
always @(*) begin
	/* main: %6*/
	/*   %gep225 = add i32 %gep_int224, 28*/
if (reset) begin main_signed_add_32_108_op1 = 0; end
		main_signed_add_32_108_op1 = 32'd28;
end
always @(*) begin
	main_signed_add_32_108 = (main_signed_add_32_108_op0 + main_signed_add_32_108_op1);
end
always @(*) begin
	/* main: %6*/
	/*   %gep227 = add i32 %gep_int226, 56*/
		main_signed_add_32_109_op0 = main_6_gep_int226;
end
always @(*) begin
	/* main: %6*/
	/*   %gep227 = add i32 %gep_int226, 56*/
if (reset) begin main_signed_add_32_109_op1 = 0; end
		main_signed_add_32_109_op1 = 32'd56;
end
always @(*) begin
	main_signed_add_32_109 = (main_signed_add_32_109_op0 + main_signed_add_32_109_op1);
end
always @(*) begin
	/* main: %6*/
	/*   %gep229 = add i32 %gep_int228, 28*/
		main_signed_add_32_110_op0 = main_6_gep_int228;
end
always @(*) begin
	/* main: %6*/
	/*   %gep229 = add i32 %gep_int228, 28*/
if (reset) begin main_signed_add_32_110_op1 = 0; end
		main_signed_add_32_110_op1 = 32'd28;
end
always @(*) begin
	main_signed_add_32_110 = (main_signed_add_32_110_op0 + main_signed_add_32_110_op1);
end
always @(*) begin
	/* main: %6*/
	/*   %gep231 = add i32 %gep_int230, 56*/
		main_signed_add_32_111_op0 = main_6_gep_int230;
end
always @(*) begin
	/* main: %6*/
	/*   %gep231 = add i32 %gep_int230, 56*/
if (reset) begin main_signed_add_32_111_op1 = 0; end
		main_signed_add_32_111_op1 = 32'd56;
end
always @(*) begin
	main_signed_add_32_111 = (main_signed_add_32_111_op0 + main_signed_add_32_111_op1);
end
always @(*) begin
	/* main: %6*/
	/*   %gep233 = add i32 %gep_int232, 92*/
		main_signed_add_32_112_op0 = main_6_gep_int232;
end
always @(*) begin
	/* main: %6*/
	/*   %gep233 = add i32 %gep_int232, 92*/
if (reset) begin main_signed_add_32_112_op1 = 0; end
		main_signed_add_32_112_op1 = 32'd92;
end
always @(*) begin
	main_signed_add_32_112 = (main_signed_add_32_112_op0 + main_signed_add_32_112_op1);
end
always @(*) begin
	/* main: %404*/
	/*   %426 = mul nsw i32 %419, %402*/
		main_signed_multiply_32_2_op0 = main_404_419;
end
always @(*) begin
	/* main: %404*/
	/*   %426 = mul nsw i32 %419, %402*/
		main_signed_multiply_32_2_op1 = main_lrphi_402_reg;
end
always @(*) begin
	lpm_mult_main_404_426_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* main: %404*/
	/*   %426 = mul nsw i32 %419, %402*/
	if ((lpm_mult_main_404_426_en == 1'd1)) begin
		main_404_426_stage0_reg <= (main_signed_multiply_32_2_op0 * main_signed_multiply_32_2_op1);
	end
end
always @(*) begin
	main_signed_multiply_32_2 = main_404_426_stage0_reg;
end
always @(*) begin
	/* main: %6*/
	/*   %gep507 = add i32 %gep_int506, 126*/
	if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		main_signed_add_32_249_op0 = main_6_gep_int506;
	end
	/* main: %404*/
	/*   %430 = add nuw nsw i32 %429, %427*/
	else /* if ((cur_state == LEGUP_F_main_BB__404_409)) */ begin
		main_signed_add_32_249_op0 = main_404_429;
	end
end
always @(*) begin
	/* main: %6*/
	/*   %gep507 = add i32 %gep_int506, 126*/
	if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		main_signed_add_32_249_op1 = 32'd126;
	end
	/* main: %404*/
	/*   %430 = add nuw nsw i32 %429, %427*/
	else /* if ((cur_state == LEGUP_F_main_BB__404_409)) */ begin
		main_signed_add_32_249_op1 = main_404_427;
	end
end
always @(*) begin
	main_signed_add_32_249 = (main_signed_add_32_249_op0 + main_signed_add_32_249_op1);
end
always @(*) begin
	/* main: %404*/
	/*   %432 = mul nsw i32 %410, %403*/
		main_signed_multiply_32_3_op0 = main_404_410;
end
always @(*) begin
	/* main: %404*/
	/*   %432 = mul nsw i32 %410, %403*/
		main_signed_multiply_32_3_op1 = main_lrphi_403_reg;
end
always @(*) begin
	lpm_mult_main_404_432_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* main: %404*/
	/*   %432 = mul nsw i32 %410, %403*/
	if ((lpm_mult_main_404_432_en == 1'd1)) begin
		main_404_432_stage0_reg <= (main_signed_multiply_32_3_op0 * main_signed_multiply_32_3_op1);
	end
end
always @(*) begin
	main_signed_multiply_32_3 = main_404_432_stage0_reg;
end
always @(*) begin
	/* main: %6*/
	/*   %gep509 = add i32 %gep_int508, 126*/
	if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		main_signed_add_32_250_op0 = main_6_gep_int508;
	end
	/* main: %404*/
	/*   %436 = add nuw nsw i32 %435, %433*/
	else /* if ((cur_state == LEGUP_F_main_BB__404_409)) */ begin
		main_signed_add_32_250_op0 = main_404_435;
	end
end
always @(*) begin
	/* main: %6*/
	/*   %gep509 = add i32 %gep_int508, 126*/
	if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		main_signed_add_32_250_op1 = 32'd126;
	end
	/* main: %404*/
	/*   %436 = add nuw nsw i32 %435, %433*/
	else /* if ((cur_state == LEGUP_F_main_BB__404_409)) */ begin
		main_signed_add_32_250_op1 = main_404_433;
	end
end
always @(*) begin
	main_signed_add_32_250 = (main_signed_add_32_250_op0 + main_signed_add_32_250_op1);
end
always @(*) begin
	/* main: %404*/
	/*   %443 = sub i16 %416, %425*/
		main_signed_subtract_16_0_op0 = main_404_416;
end
always @(*) begin
	/* main: %404*/
	/*   %443 = sub i16 %416, %425*/
		main_signed_subtract_16_0_op1 = main_404_425;
end
always @(*) begin
	main_signed_subtract_16_0 = (main_signed_subtract_16_0_op0 - main_signed_subtract_16_0_op1);
end
always @(*) begin
	/* main: %404*/
	/*   %444 = sub i16 %441, %443*/
		main_signed_subtract_16_1_op0 = main_404_441;
end
always @(*) begin
	/* main: %404*/
	/*   %444 = sub i16 %441, %443*/
		main_signed_subtract_16_1_op1 = main_404_443;
end
always @(*) begin
	main_signed_subtract_16_1 = (main_signed_subtract_16_1_op0 - main_signed_subtract_16_1_op1);
end
always @(*) begin
	/* main: %404*/
	/*   %445 = sub i16 %440, %442*/
		main_signed_subtract_16_2_op0 = main_404_440;
end
always @(*) begin
	/* main: %404*/
	/*   %445 = sub i16 %440, %442*/
		main_signed_subtract_16_2_op1 = main_404_442;
end
always @(*) begin
	main_signed_subtract_16_2 = (main_signed_subtract_16_2_op0 - main_signed_subtract_16_2_op1);
end
always @(*) begin
	/* main: %404*/
	/*   %446 = add i16 %443, %441*/
		main_signed_add_16_1_op0 = main_404_443;
end
always @(*) begin
	/* main: %404*/
	/*   %446 = add i16 %443, %441*/
		main_signed_add_16_1_op1 = main_404_441;
end
always @(*) begin
	main_signed_add_16_1 = (main_signed_add_16_1_op0 + main_signed_add_16_1_op1);
end
always @(*) begin
	/* main: %404*/
	/*   %447 = add i16 %442, %440*/
		main_signed_add_16_2_op0 = main_404_442;
end
always @(*) begin
	/* main: %404*/
	/*   %447 = add i16 %442, %440*/
		main_signed_add_16_2_op1 = main_404_440;
end
always @(*) begin
	main_signed_add_16_2 = (main_signed_add_16_2_op0 + main_signed_add_16_2_op1);
end
always @(*) begin
	/* main: %fft.exit*/
	/*   %459 = sub nsw i32 0, %457*/
if (reset) begin main_signed_subtract_32_0_op0 = 0; end
		main_signed_subtract_32_0_op0 = 32'd0;
end
always @(*) begin
	/* main: %fft.exit*/
	/*   %459 = sub nsw i32 0, %457*/
		main_signed_subtract_32_0_op1 = main_fftexit_457;
end
always @(*) begin
	main_signed_subtract_32_0 = (main_signed_subtract_32_0_op0 - main_signed_subtract_32_0_op1);
end
always @(*) begin
	/* main: %fft.exit*/
	/*   %466 = sub nsw i32 0, %464*/
if (reset) begin main_signed_subtract_32_1_op0 = 0; end
		main_signed_subtract_32_1_op0 = 32'd0;
end
always @(*) begin
	/* main: %fft.exit*/
	/*   %466 = sub nsw i32 0, %464*/
		main_signed_subtract_32_1_op1 = main_fftexit_464;
end
always @(*) begin
	main_signed_subtract_32_1 = (main_signed_subtract_32_1_op0 - main_signed_subtract_32_1_op1);
end
always @(*) begin
	/* main: %6*/
	/*   %gep267 = add i32 %gep_int266, 66*/
		main_signed_add_32_129_op0 = main_6_gep_int266;
end
always @(*) begin
	/* main: %6*/
	/*   %gep267 = add i32 %gep_int266, 66*/
if (reset) begin main_signed_add_32_129_op1 = 0; end
		main_signed_add_32_129_op1 = 32'd66;
end
always @(*) begin
	main_signed_add_32_129 = (main_signed_add_32_129_op0 + main_signed_add_32_129_op1);
end
always @(*) begin
	/* main: %6*/
	/*   %gep269 = add i32 %gep_int268, 66*/
		main_signed_add_32_130_op0 = main_6_gep_int268;
end
always @(*) begin
	/* main: %6*/
	/*   %gep269 = add i32 %gep_int268, 66*/
if (reset) begin main_signed_add_32_130_op1 = 0; end
		main_signed_add_32_130_op1 = 32'd66;
end
always @(*) begin
	main_signed_add_32_130 = (main_signed_add_32_130_op0 + main_signed_add_32_130_op1);
end
always @(*) begin
	/* main: %6*/
	/*   %gep271 = add i32 %gep_int270, 66*/
		main_signed_add_32_131_op0 = main_6_gep_int270;
end
always @(*) begin
	/* main: %6*/
	/*   %gep271 = add i32 %gep_int270, 66*/
if (reset) begin main_signed_add_32_131_op1 = 0; end
		main_signed_add_32_131_op1 = 32'd66;
end
always @(*) begin
	main_signed_add_32_131 = (main_signed_add_32_131_op0 + main_signed_add_32_131_op1);
end
always @(*) begin
	/* main: %6*/
	/*   %gep273 = add i32 %gep_int272, 34*/
		main_signed_add_32_132_op0 = main_6_gep_int272;
end
always @(*) begin
	/* main: %6*/
	/*   %gep273 = add i32 %gep_int272, 34*/
if (reset) begin main_signed_add_32_132_op1 = 0; end
		main_signed_add_32_132_op1 = 32'd34;
end
always @(*) begin
	main_signed_add_32_132 = (main_signed_add_32_132_op0 + main_signed_add_32_132_op1);
end
always @(*) begin
	/* main: %6*/
	/*   %gep275 = add i32 %gep_int274, 68*/
		main_signed_add_32_133_op0 = main_6_gep_int274;
end
always @(*) begin
	/* main: %6*/
	/*   %gep275 = add i32 %gep_int274, 68*/
if (reset) begin main_signed_add_32_133_op1 = 0; end
		main_signed_add_32_133_op1 = 32'd68;
end
always @(*) begin
	main_signed_add_32_133 = (main_signed_add_32_133_op0 + main_signed_add_32_133_op1);
end
always @(*) begin
	/* main: %6*/
	/*   %gep277 = add i32 %gep_int276, 34*/
		main_signed_add_32_134_op0 = main_6_gep_int276;
end
always @(*) begin
	/* main: %6*/
	/*   %gep277 = add i32 %gep_int276, 34*/
if (reset) begin main_signed_add_32_134_op1 = 0; end
		main_signed_add_32_134_op1 = 32'd34;
end
always @(*) begin
	main_signed_add_32_134 = (main_signed_add_32_134_op0 + main_signed_add_32_134_op1);
end
always @(*) begin
	/* main: %6*/
	/*   %gep279 = add i32 %gep_int278, 68*/
		main_signed_add_32_135_op0 = main_6_gep_int278;
end
always @(*) begin
	/* main: %6*/
	/*   %gep279 = add i32 %gep_int278, 68*/
if (reset) begin main_signed_add_32_135_op1 = 0; end
		main_signed_add_32_135_op1 = 32'd68;
end
always @(*) begin
	main_signed_add_32_135 = (main_signed_add_32_135_op0 + main_signed_add_32_135_op1);
end
always @(*) begin
	/* main: %6*/
	/*   %gep281 = add i32 %gep_int280, 98*/
		main_signed_add_32_136_op0 = main_6_gep_int280;
end
always @(*) begin
	/* main: %6*/
	/*   %gep281 = add i32 %gep_int280, 98*/
if (reset) begin main_signed_add_32_136_op1 = 0; end
		main_signed_add_32_136_op1 = 32'd98;
end
always @(*) begin
	main_signed_add_32_136 = (main_signed_add_32_136_op0 + main_signed_add_32_136_op1);
end
always @(*) begin
	/* main: %6*/
	/*   %gep283 = add i32 %gep_int282, 70*/
		main_signed_add_32_137_op0 = main_6_gep_int282;
end
always @(*) begin
	/* main: %6*/
	/*   %gep283 = add i32 %gep_int282, 70*/
if (reset) begin main_signed_add_32_137_op1 = 0; end
		main_signed_add_32_137_op1 = 32'd70;
end
always @(*) begin
	main_signed_add_32_137 = (main_signed_add_32_137_op0 + main_signed_add_32_137_op1);
end
always @(*) begin
	/* main: %6*/
	/*   %gep285 = add i32 %gep_int284, 98*/
		main_signed_add_32_138_op0 = main_6_gep_int284;
end
always @(*) begin
	/* main: %6*/
	/*   %gep285 = add i32 %gep_int284, 98*/
if (reset) begin main_signed_add_32_138_op1 = 0; end
		main_signed_add_32_138_op1 = 32'd98;
end
always @(*) begin
	main_signed_add_32_138 = (main_signed_add_32_138_op0 + main_signed_add_32_138_op1);
end
always @(*) begin
	/* main: %6*/
	/*   %gep287 = add i32 %gep_int286, 70*/
		main_signed_add_32_139_op0 = main_6_gep_int286;
end
always @(*) begin
	/* main: %6*/
	/*   %gep287 = add i32 %gep_int286, 70*/
if (reset) begin main_signed_add_32_139_op1 = 0; end
		main_signed_add_32_139_op1 = 32'd70;
end
always @(*) begin
	main_signed_add_32_139 = (main_signed_add_32_139_op0 + main_signed_add_32_139_op1);
end
always @(*) begin
	/* main: %6*/
	/*   %gep289 = add i32 %gep_int288, 18*/
		main_signed_add_32_140_op0 = main_6_gep_int288;
end
always @(*) begin
	/* main: %6*/
	/*   %gep289 = add i32 %gep_int288, 18*/
if (reset) begin main_signed_add_32_140_op1 = 0; end
		main_signed_add_32_140_op1 = 32'd18;
end
always @(*) begin
	main_signed_add_32_140 = (main_signed_add_32_140_op0 + main_signed_add_32_140_op1);
end
always @(*) begin
	/* main: %6*/
	/*   %gep291 = add i32 %gep_int290, 72*/
		main_signed_add_32_141_op0 = main_6_gep_int290;
end
always @(*) begin
	/* main: %6*/
	/*   %gep291 = add i32 %gep_int290, 72*/
if (reset) begin main_signed_add_32_141_op1 = 0; end
		main_signed_add_32_141_op1 = 32'd72;
end
always @(*) begin
	main_signed_add_32_141 = (main_signed_add_32_141_op0 + main_signed_add_32_141_op1);
end
always @(*) begin
	/* main: %6*/
	/*   %gep293 = add i32 %gep_int292, 18*/
		main_signed_add_32_142_op0 = main_6_gep_int292;
end
always @(*) begin
	/* main: %6*/
	/*   %gep293 = add i32 %gep_int292, 18*/
if (reset) begin main_signed_add_32_142_op1 = 0; end
		main_signed_add_32_142_op1 = 32'd18;
end
always @(*) begin
	main_signed_add_32_142 = (main_signed_add_32_142_op0 + main_signed_add_32_142_op1);
end
always @(*) begin
	/* main: %6*/
	/*   %gep295 = add i32 %gep_int294, 72*/
		main_signed_add_32_143_op0 = main_6_gep_int294;
end
always @(*) begin
	/* main: %6*/
	/*   %gep295 = add i32 %gep_int294, 72*/
if (reset) begin main_signed_add_32_143_op1 = 0; end
		main_signed_add_32_143_op1 = 32'd72;
end
always @(*) begin
	main_signed_add_32_143 = (main_signed_add_32_143_op0 + main_signed_add_32_143_op1);
end
always @(*) begin
	/* main: %6*/
	/*   %gep297 = add i32 %gep_int296, 82*/
		main_signed_add_32_144_op0 = main_6_gep_int296;
end
always @(*) begin
	/* main: %6*/
	/*   %gep297 = add i32 %gep_int296, 82*/
if (reset) begin main_signed_add_32_144_op1 = 0; end
		main_signed_add_32_144_op1 = 32'd82;
end
always @(*) begin
	main_signed_add_32_144 = (main_signed_add_32_144_op0 + main_signed_add_32_144_op1);
end
always @(*) begin
	/* main: %6*/
	/*   %gep299 = add i32 %gep_int298, 74*/
		main_signed_add_32_145_op0 = main_6_gep_int298;
end
always @(*) begin
	/* main: %6*/
	/*   %gep299 = add i32 %gep_int298, 74*/
if (reset) begin main_signed_add_32_145_op1 = 0; end
		main_signed_add_32_145_op1 = 32'd74;
end
always @(*) begin
	main_signed_add_32_145 = (main_signed_add_32_145_op0 + main_signed_add_32_145_op1);
end
always @(*) begin
	/* main: %6*/
	/*   %gep301 = add i32 %gep_int300, 82*/
		main_signed_add_32_146_op0 = main_6_gep_int300;
end
always @(*) begin
	/* main: %6*/
	/*   %gep301 = add i32 %gep_int300, 82*/
if (reset) begin main_signed_add_32_146_op1 = 0; end
		main_signed_add_32_146_op1 = 32'd82;
end
always @(*) begin
	main_signed_add_32_146 = (main_signed_add_32_146_op0 + main_signed_add_32_146_op1);
end
always @(*) begin
	/* main: %6*/
	/*   %gep303 = add i32 %gep_int302, 74*/
		main_signed_add_32_147_op0 = main_6_gep_int302;
end
always @(*) begin
	/* main: %6*/
	/*   %gep303 = add i32 %gep_int302, 74*/
if (reset) begin main_signed_add_32_147_op1 = 0; end
		main_signed_add_32_147_op1 = 32'd74;
end
always @(*) begin
	main_signed_add_32_147 = (main_signed_add_32_147_op0 + main_signed_add_32_147_op1);
end
always @(*) begin
	/* main: %6*/
	/*   %gep305 = add i32 %gep_int304, 50*/
		main_signed_add_32_148_op0 = main_6_gep_int304;
end
always @(*) begin
	/* main: %6*/
	/*   %gep305 = add i32 %gep_int304, 50*/
if (reset) begin main_signed_add_32_148_op1 = 0; end
		main_signed_add_32_148_op1 = 32'd50;
end
always @(*) begin
	main_signed_add_32_148 = (main_signed_add_32_148_op0 + main_signed_add_32_148_op1);
end
always @(*) begin
	/* main: %6*/
	/*   %gep307 = add i32 %gep_int306, 76*/
		main_signed_add_32_149_op0 = main_6_gep_int306;
end
always @(*) begin
	/* main: %6*/
	/*   %gep307 = add i32 %gep_int306, 76*/
if (reset) begin main_signed_add_32_149_op1 = 0; end
		main_signed_add_32_149_op1 = 32'd76;
end
always @(*) begin
	main_signed_add_32_149 = (main_signed_add_32_149_op0 + main_signed_add_32_149_op1);
end
always @(*) begin
	/* main: %6*/
	/*   %gep309 = add i32 %gep_int308, 50*/
		main_signed_add_32_150_op0 = main_6_gep_int308;
end
always @(*) begin
	/* main: %6*/
	/*   %gep309 = add i32 %gep_int308, 50*/
if (reset) begin main_signed_add_32_150_op1 = 0; end
		main_signed_add_32_150_op1 = 32'd50;
end
always @(*) begin
	main_signed_add_32_150 = (main_signed_add_32_150_op0 + main_signed_add_32_150_op1);
end
always @(*) begin
	/* main: %6*/
	/*   %gep311 = add i32 %gep_int310, 76*/
		main_signed_add_32_151_op0 = main_6_gep_int310;
end
always @(*) begin
	/* main: %6*/
	/*   %gep311 = add i32 %gep_int310, 76*/
if (reset) begin main_signed_add_32_151_op1 = 0; end
		main_signed_add_32_151_op1 = 32'd76;
end
always @(*) begin
	main_signed_add_32_151 = (main_signed_add_32_151_op0 + main_signed_add_32_151_op1);
end
always @(*) begin
	/* main: %6*/
	/*   %gep313 = add i32 %gep_int312, 114*/
		main_signed_add_32_152_op0 = main_6_gep_int312;
end
always @(*) begin
	/* main: %6*/
	/*   %gep313 = add i32 %gep_int312, 114*/
if (reset) begin main_signed_add_32_152_op1 = 0; end
		main_signed_add_32_152_op1 = 32'd114;
end
always @(*) begin
	main_signed_add_32_152 = (main_signed_add_32_152_op0 + main_signed_add_32_152_op1);
end
always @(*) begin
	/* main: %6*/
	/*   %gep315 = add i32 %gep_int314, 78*/
		main_signed_add_32_153_op0 = main_6_gep_int314;
end
always @(*) begin
	/* main: %6*/
	/*   %gep315 = add i32 %gep_int314, 78*/
if (reset) begin main_signed_add_32_153_op1 = 0; end
		main_signed_add_32_153_op1 = 32'd78;
end
always @(*) begin
	main_signed_add_32_153 = (main_signed_add_32_153_op0 + main_signed_add_32_153_op1);
end
always @(*) begin
	/* main: %6*/
	/*   %gep317 = add i32 %gep_int316, 114*/
		main_signed_add_32_154_op0 = main_6_gep_int316;
end
always @(*) begin
	/* main: %6*/
	/*   %gep317 = add i32 %gep_int316, 114*/
if (reset) begin main_signed_add_32_154_op1 = 0; end
		main_signed_add_32_154_op1 = 32'd114;
end
always @(*) begin
	main_signed_add_32_154 = (main_signed_add_32_154_op0 + main_signed_add_32_154_op1);
end
always @(*) begin
	/* main: %6*/
	/*   %gep319 = add i32 %gep_int318, 78*/
		main_signed_add_32_155_op0 = main_6_gep_int318;
end
always @(*) begin
	/* main: %6*/
	/*   %gep319 = add i32 %gep_int318, 78*/
if (reset) begin main_signed_add_32_155_op1 = 0; end
		main_signed_add_32_155_op1 = 32'd78;
end
always @(*) begin
	main_signed_add_32_155 = (main_signed_add_32_155_op0 + main_signed_add_32_155_op1);
end
always @(*) begin
	/* main: %6*/
	/*   %gep321 = add i32 %gep_int320, 10*/
		main_signed_add_32_156_op0 = main_6_gep_int320;
end
always @(*) begin
	/* main: %6*/
	/*   %gep321 = add i32 %gep_int320, 10*/
if (reset) begin main_signed_add_32_156_op1 = 0; end
		main_signed_add_32_156_op1 = 32'd10;
end
always @(*) begin
	main_signed_add_32_156 = (main_signed_add_32_156_op0 + main_signed_add_32_156_op1);
end
always @(*) begin
	/* main: %6*/
	/*   %gep323 = add i32 %gep_int322, 80*/
		main_signed_add_32_157_op0 = main_6_gep_int322;
end
always @(*) begin
	/* main: %6*/
	/*   %gep323 = add i32 %gep_int322, 80*/
if (reset) begin main_signed_add_32_157_op1 = 0; end
		main_signed_add_32_157_op1 = 32'd80;
end
always @(*) begin
	main_signed_add_32_157 = (main_signed_add_32_157_op0 + main_signed_add_32_157_op1);
end
always @(*) begin
	/* main: %6*/
	/*   %gep325 = add i32 %gep_int324, 10*/
		main_signed_add_32_158_op0 = main_6_gep_int324;
end
always @(*) begin
	/* main: %6*/
	/*   %gep325 = add i32 %gep_int324, 10*/
if (reset) begin main_signed_add_32_158_op1 = 0; end
		main_signed_add_32_158_op1 = 32'd10;
end
always @(*) begin
	main_signed_add_32_158 = (main_signed_add_32_158_op0 + main_signed_add_32_158_op1);
end
always @(*) begin
	/* main: %6*/
	/*   %gep327 = add i32 %gep_int326, 80*/
		main_signed_add_32_159_op0 = main_6_gep_int326;
end
always @(*) begin
	/* main: %6*/
	/*   %gep327 = add i32 %gep_int326, 80*/
if (reset) begin main_signed_add_32_159_op1 = 0; end
		main_signed_add_32_159_op1 = 32'd80;
end
always @(*) begin
	main_signed_add_32_159 = (main_signed_add_32_159_op0 + main_signed_add_32_159_op1);
end
always @(*) begin
	/* main: %6*/
	/*   %gep329 = add i32 %gep_int328, 74*/
		main_signed_add_32_160_op0 = main_6_gep_int328;
end
always @(*) begin
	/* main: %6*/
	/*   %gep329 = add i32 %gep_int328, 74*/
if (reset) begin main_signed_add_32_160_op1 = 0; end
		main_signed_add_32_160_op1 = 32'd74;
end
always @(*) begin
	main_signed_add_32_160 = (main_signed_add_32_160_op0 + main_signed_add_32_160_op1);
end
always @(*) begin
	/* main: %6*/
	/*   %gep331 = add i32 %gep_int330, 82*/
		main_signed_add_32_161_op0 = main_6_gep_int330;
end
always @(*) begin
	/* main: %6*/
	/*   %gep331 = add i32 %gep_int330, 82*/
if (reset) begin main_signed_add_32_161_op1 = 0; end
		main_signed_add_32_161_op1 = 32'd82;
end
always @(*) begin
	main_signed_add_32_161 = (main_signed_add_32_161_op0 + main_signed_add_32_161_op1);
end
always @(*) begin
	/* main: %6*/
	/*   %gep333 = add i32 %gep_int332, 74*/
		main_signed_add_32_162_op0 = main_6_gep_int332;
end
always @(*) begin
	/* main: %6*/
	/*   %gep333 = add i32 %gep_int332, 74*/
if (reset) begin main_signed_add_32_162_op1 = 0; end
		main_signed_add_32_162_op1 = 32'd74;
end
always @(*) begin
	main_signed_add_32_162 = (main_signed_add_32_162_op0 + main_signed_add_32_162_op1);
end
always @(*) begin
	/* main: %6*/
	/*   %gep335 = add i32 %gep_int334, 82*/
		main_signed_add_32_163_op0 = main_6_gep_int334;
end
always @(*) begin
	/* main: %6*/
	/*   %gep335 = add i32 %gep_int334, 82*/
if (reset) begin main_signed_add_32_163_op1 = 0; end
		main_signed_add_32_163_op1 = 32'd82;
end
always @(*) begin
	main_signed_add_32_163 = (main_signed_add_32_163_op0 + main_signed_add_32_163_op1);
end
always @(*) begin
	/* main: %6*/
	/*   %gep337 = add i32 %gep_int336, 42*/
		main_signed_add_32_164_op0 = main_6_gep_int336;
end
always @(*) begin
	/* main: %6*/
	/*   %gep337 = add i32 %gep_int336, 42*/
if (reset) begin main_signed_add_32_164_op1 = 0; end
		main_signed_add_32_164_op1 = 32'd42;
end
always @(*) begin
	main_signed_add_32_164 = (main_signed_add_32_164_op0 + main_signed_add_32_164_op1);
end
always @(*) begin
	/* main: %6*/
	/*   %gep339 = add i32 %gep_int338, 84*/
		main_signed_add_32_165_op0 = main_6_gep_int338;
end
always @(*) begin
	/* main: %6*/
	/*   %gep339 = add i32 %gep_int338, 84*/
if (reset) begin main_signed_add_32_165_op1 = 0; end
		main_signed_add_32_165_op1 = 32'd84;
end
always @(*) begin
	main_signed_add_32_165 = (main_signed_add_32_165_op0 + main_signed_add_32_165_op1);
end
always @(*) begin
	/* main: %6*/
	/*   %gep341 = add i32 %gep_int340, 42*/
		main_signed_add_32_166_op0 = main_6_gep_int340;
end
always @(*) begin
	/* main: %6*/
	/*   %gep341 = add i32 %gep_int340, 42*/
if (reset) begin main_signed_add_32_166_op1 = 0; end
		main_signed_add_32_166_op1 = 32'd42;
end
always @(*) begin
	main_signed_add_32_166 = (main_signed_add_32_166_op0 + main_signed_add_32_166_op1);
end
always @(*) begin
	/* main: %6*/
	/*   %gep343 = add i32 %gep_int342, 84*/
		main_signed_add_32_167_op0 = main_6_gep_int342;
end
always @(*) begin
	/* main: %6*/
	/*   %gep343 = add i32 %gep_int342, 84*/
if (reset) begin main_signed_add_32_167_op1 = 0; end
		main_signed_add_32_167_op1 = 32'd84;
end
always @(*) begin
	main_signed_add_32_167 = (main_signed_add_32_167_op0 + main_signed_add_32_167_op1);
end
always @(*) begin
	/* main: %6*/
	/*   %gep345 = add i32 %gep_int344, 106*/
		main_signed_add_32_168_op0 = main_6_gep_int344;
end
always @(*) begin
	/* main: %6*/
	/*   %gep345 = add i32 %gep_int344, 106*/
if (reset) begin main_signed_add_32_168_op1 = 0; end
		main_signed_add_32_168_op1 = 32'd106;
end
always @(*) begin
	main_signed_add_32_168 = (main_signed_add_32_168_op0 + main_signed_add_32_168_op1);
end
always @(*) begin
	/* main: %6*/
	/*   %gep347 = add i32 %gep_int346, 86*/
		main_signed_add_32_169_op0 = main_6_gep_int346;
end
always @(*) begin
	/* main: %6*/
	/*   %gep347 = add i32 %gep_int346, 86*/
if (reset) begin main_signed_add_32_169_op1 = 0; end
		main_signed_add_32_169_op1 = 32'd86;
end
always @(*) begin
	main_signed_add_32_169 = (main_signed_add_32_169_op0 + main_signed_add_32_169_op1);
end
always @(*) begin
	/* main: %6*/
	/*   %gep349 = add i32 %gep_int348, 106*/
		main_signed_add_32_170_op0 = main_6_gep_int348;
end
always @(*) begin
	/* main: %6*/
	/*   %gep349 = add i32 %gep_int348, 106*/
if (reset) begin main_signed_add_32_170_op1 = 0; end
		main_signed_add_32_170_op1 = 32'd106;
end
always @(*) begin
	main_signed_add_32_170 = (main_signed_add_32_170_op0 + main_signed_add_32_170_op1);
end
always @(*) begin
	/* main: %6*/
	/*   %gep351 = add i32 %gep_int350, 86*/
		main_signed_add_32_171_op0 = main_6_gep_int350;
end
always @(*) begin
	/* main: %6*/
	/*   %gep351 = add i32 %gep_int350, 86*/
if (reset) begin main_signed_add_32_171_op1 = 0; end
		main_signed_add_32_171_op1 = 32'd86;
end
always @(*) begin
	main_signed_add_32_171 = (main_signed_add_32_171_op0 + main_signed_add_32_171_op1);
end
always @(*) begin
	/* main: %6*/
	/*   %gep353 = add i32 %gep_int352, 26*/
		main_signed_add_32_172_op0 = main_6_gep_int352;
end
always @(*) begin
	/* main: %6*/
	/*   %gep353 = add i32 %gep_int352, 26*/
if (reset) begin main_signed_add_32_172_op1 = 0; end
		main_signed_add_32_172_op1 = 32'd26;
end
always @(*) begin
	main_signed_add_32_172 = (main_signed_add_32_172_op0 + main_signed_add_32_172_op1);
end
always @(*) begin
	/* main: %6*/
	/*   %gep355 = add i32 %gep_int354, 88*/
		main_signed_add_32_173_op0 = main_6_gep_int354;
end
always @(*) begin
	/* main: %6*/
	/*   %gep355 = add i32 %gep_int354, 88*/
if (reset) begin main_signed_add_32_173_op1 = 0; end
		main_signed_add_32_173_op1 = 32'd88;
end
always @(*) begin
	main_signed_add_32_173 = (main_signed_add_32_173_op0 + main_signed_add_32_173_op1);
end
always @(*) begin
	/* main: %6*/
	/*   %gep357 = add i32 %gep_int356, 26*/
		main_signed_add_32_174_op0 = main_6_gep_int356;
end
always @(*) begin
	/* main: %6*/
	/*   %gep357 = add i32 %gep_int356, 26*/
if (reset) begin main_signed_add_32_174_op1 = 0; end
		main_signed_add_32_174_op1 = 32'd26;
end
always @(*) begin
	main_signed_add_32_174 = (main_signed_add_32_174_op0 + main_signed_add_32_174_op1);
end
always @(*) begin
	/* main: %6*/
	/*   %gep359 = add i32 %gep_int358, 88*/
		main_signed_add_32_175_op0 = main_6_gep_int358;
end
always @(*) begin
	/* main: %6*/
	/*   %gep359 = add i32 %gep_int358, 88*/
if (reset) begin main_signed_add_32_175_op1 = 0; end
		main_signed_add_32_175_op1 = 32'd88;
end
always @(*) begin
	main_signed_add_32_175 = (main_signed_add_32_175_op0 + main_signed_add_32_175_op1);
end
always @(*) begin
	/* main: %6*/
	/*   %gep361 = add i32 %gep_int360, 90*/
		main_signed_add_32_176_op0 = main_6_gep_int360;
end
always @(*) begin
	/* main: %6*/
	/*   %gep361 = add i32 %gep_int360, 90*/
if (reset) begin main_signed_add_32_176_op1 = 0; end
		main_signed_add_32_176_op1 = 32'd90;
end
always @(*) begin
	main_signed_add_32_176 = (main_signed_add_32_176_op0 + main_signed_add_32_176_op1);
end
always @(*) begin
	/* main: %6*/
	/*   %gep363 = add i32 %gep_int362, 90*/
		main_signed_add_32_177_op0 = main_6_gep_int362;
end
always @(*) begin
	/* main: %6*/
	/*   %gep363 = add i32 %gep_int362, 90*/
if (reset) begin main_signed_add_32_177_op1 = 0; end
		main_signed_add_32_177_op1 = 32'd90;
end
always @(*) begin
	main_signed_add_32_177 = (main_signed_add_32_177_op0 + main_signed_add_32_177_op1);
end
always @(*) begin
	/* main: %6*/
	/*   %gep365 = add i32 %gep_int364, 90*/
		main_signed_add_32_178_op0 = main_6_gep_int364;
end
always @(*) begin
	/* main: %6*/
	/*   %gep365 = add i32 %gep_int364, 90*/
if (reset) begin main_signed_add_32_178_op1 = 0; end
		main_signed_add_32_178_op1 = 32'd90;
end
always @(*) begin
	main_signed_add_32_178 = (main_signed_add_32_178_op0 + main_signed_add_32_178_op1);
end
always @(*) begin
	/* main: %6*/
	/*   %gep367 = add i32 %gep_int366, 90*/
		main_signed_add_32_179_op0 = main_6_gep_int366;
end
always @(*) begin
	/* main: %6*/
	/*   %gep367 = add i32 %gep_int366, 90*/
if (reset) begin main_signed_add_32_179_op1 = 0; end
		main_signed_add_32_179_op1 = 32'd90;
end
always @(*) begin
	main_signed_add_32_179 = (main_signed_add_32_179_op0 + main_signed_add_32_179_op1);
end
always @(*) begin
	/* main: %6*/
	/*   %gep369 = add i32 %gep_int368, 58*/
		main_signed_add_32_180_op0 = main_6_gep_int368;
end
always @(*) begin
	/* main: %6*/
	/*   %gep369 = add i32 %gep_int368, 58*/
if (reset) begin main_signed_add_32_180_op1 = 0; end
		main_signed_add_32_180_op1 = 32'd58;
end
always @(*) begin
	main_signed_add_32_180 = (main_signed_add_32_180_op0 + main_signed_add_32_180_op1);
end
always @(*) begin
	/* main: %6*/
	/*   %gep371 = add i32 %gep_int370, 92*/
		main_signed_add_32_181_op0 = main_6_gep_int370;
end
always @(*) begin
	/* main: %6*/
	/*   %gep371 = add i32 %gep_int370, 92*/
if (reset) begin main_signed_add_32_181_op1 = 0; end
		main_signed_add_32_181_op1 = 32'd92;
end
always @(*) begin
	main_signed_add_32_181 = (main_signed_add_32_181_op0 + main_signed_add_32_181_op1);
end
always @(*) begin
	/* main: %6*/
	/*   %gep373 = add i32 %gep_int372, 58*/
		main_signed_add_32_182_op0 = main_6_gep_int372;
end
always @(*) begin
	/* main: %6*/
	/*   %gep373 = add i32 %gep_int372, 58*/
if (reset) begin main_signed_add_32_182_op1 = 0; end
		main_signed_add_32_182_op1 = 32'd58;
end
always @(*) begin
	main_signed_add_32_182 = (main_signed_add_32_182_op0 + main_signed_add_32_182_op1);
end
always @(*) begin
	/* main: %6*/
	/*   %gep441 = add i32 %gep_int440, 118*/
		main_signed_add_32_216_op0 = main_6_gep_int440;
end
always @(*) begin
	/* main: %6*/
	/*   %gep441 = add i32 %gep_int440, 118*/
if (reset) begin main_signed_add_32_216_op1 = 0; end
		main_signed_add_32_216_op1 = 32'd118;
end
always @(*) begin
	main_signed_add_32_216 = (main_signed_add_32_216_op0 + main_signed_add_32_216_op1);
end
always @(*) begin
	/* main: %6*/
	/*   %gep443 = add i32 %gep_int442, 110*/
		main_signed_add_32_217_op0 = main_6_gep_int442;
end
always @(*) begin
	/* main: %6*/
	/*   %gep443 = add i32 %gep_int442, 110*/
if (reset) begin main_signed_add_32_217_op1 = 0; end
		main_signed_add_32_217_op1 = 32'd110;
end
always @(*) begin
	main_signed_add_32_217 = (main_signed_add_32_217_op0 + main_signed_add_32_217_op1);
end
always @(*) begin
	/* main: %6*/
	/*   %gep445 = add i32 %gep_int444, 118*/
		main_signed_add_32_218_op0 = main_6_gep_int444;
end
always @(*) begin
	/* main: %6*/
	/*   %gep445 = add i32 %gep_int444, 118*/
if (reset) begin main_signed_add_32_218_op1 = 0; end
		main_signed_add_32_218_op1 = 32'd118;
end
always @(*) begin
	main_signed_add_32_218 = (main_signed_add_32_218_op0 + main_signed_add_32_218_op1);
end
always @(*) begin
	/* main: %6*/
	/*   %gep447 = add i32 %gep_int446, 110*/
		main_signed_add_32_219_op0 = main_6_gep_int446;
end
always @(*) begin
	/* main: %6*/
	/*   %gep447 = add i32 %gep_int446, 110*/
if (reset) begin main_signed_add_32_219_op1 = 0; end
		main_signed_add_32_219_op1 = 32'd110;
end
always @(*) begin
	main_signed_add_32_219 = (main_signed_add_32_219_op0 + main_signed_add_32_219_op1);
end
always @(*) begin
	/* main: %6*/
	/*   %gep449 = add i32 %gep_int448, 14*/
		main_signed_add_32_220_op0 = main_6_gep_int448;
end
always @(*) begin
	/* main: %6*/
	/*   %gep449 = add i32 %gep_int448, 14*/
if (reset) begin main_signed_add_32_220_op1 = 0; end
		main_signed_add_32_220_op1 = 32'd14;
end
always @(*) begin
	main_signed_add_32_220 = (main_signed_add_32_220_op0 + main_signed_add_32_220_op1);
end
always @(*) begin
	/* main: %6*/
	/*   %gep451 = add i32 %gep_int450, 112*/
		main_signed_add_32_221_op0 = main_6_gep_int450;
end
always @(*) begin
	/* main: %6*/
	/*   %gep451 = add i32 %gep_int450, 112*/
if (reset) begin main_signed_add_32_221_op1 = 0; end
		main_signed_add_32_221_op1 = 32'd112;
end
always @(*) begin
	main_signed_add_32_221 = (main_signed_add_32_221_op0 + main_signed_add_32_221_op1);
end
always @(*) begin
	/* main: %6*/
	/*   %gep453 = add i32 %gep_int452, 14*/
		main_signed_add_32_222_op0 = main_6_gep_int452;
end
always @(*) begin
	/* main: %6*/
	/*   %gep453 = add i32 %gep_int452, 14*/
if (reset) begin main_signed_add_32_222_op1 = 0; end
		main_signed_add_32_222_op1 = 32'd14;
end
always @(*) begin
	main_signed_add_32_222 = (main_signed_add_32_222_op0 + main_signed_add_32_222_op1);
end
always @(*) begin
	/* main: %6*/
	/*   %gep455 = add i32 %gep_int454, 112*/
		main_signed_add_32_223_op0 = main_6_gep_int454;
end
always @(*) begin
	/* main: %6*/
	/*   %gep455 = add i32 %gep_int454, 112*/
if (reset) begin main_signed_add_32_223_op1 = 0; end
		main_signed_add_32_223_op1 = 32'd112;
end
always @(*) begin
	main_signed_add_32_223 = (main_signed_add_32_223_op0 + main_signed_add_32_223_op1);
end
always @(*) begin
	/* main: %6*/
	/*   %gep457 = add i32 %gep_int456, 78*/
		main_signed_add_32_224_op0 = main_6_gep_int456;
end
always @(*) begin
	/* main: %6*/
	/*   %gep457 = add i32 %gep_int456, 78*/
if (reset) begin main_signed_add_32_224_op1 = 0; end
		main_signed_add_32_224_op1 = 32'd78;
end
always @(*) begin
	main_signed_add_32_224 = (main_signed_add_32_224_op0 + main_signed_add_32_224_op1);
end
always @(*) begin
	/* main: %6*/
	/*   %gep459 = add i32 %gep_int458, 114*/
		main_signed_add_32_225_op0 = main_6_gep_int458;
end
always @(*) begin
	/* main: %6*/
	/*   %gep459 = add i32 %gep_int458, 114*/
if (reset) begin main_signed_add_32_225_op1 = 0; end
		main_signed_add_32_225_op1 = 32'd114;
end
always @(*) begin
	main_signed_add_32_225 = (main_signed_add_32_225_op0 + main_signed_add_32_225_op1);
end
always @(*) begin
	/* main: %6*/
	/*   %gep461 = add i32 %gep_int460, 78*/
		main_signed_add_32_226_op0 = main_6_gep_int460;
end
always @(*) begin
	/* main: %6*/
	/*   %gep461 = add i32 %gep_int460, 78*/
if (reset) begin main_signed_add_32_226_op1 = 0; end
		main_signed_add_32_226_op1 = 32'd78;
end
always @(*) begin
	main_signed_add_32_226 = (main_signed_add_32_226_op0 + main_signed_add_32_226_op1);
end
always @(*) begin
	/* main: %6*/
	/*   %gep463 = add i32 %gep_int462, 114*/
		main_signed_add_32_227_op0 = main_6_gep_int462;
end
always @(*) begin
	/* main: %6*/
	/*   %gep463 = add i32 %gep_int462, 114*/
if (reset) begin main_signed_add_32_227_op1 = 0; end
		main_signed_add_32_227_op1 = 32'd114;
end
always @(*) begin
	main_signed_add_32_227 = (main_signed_add_32_227_op0 + main_signed_add_32_227_op1);
end
always @(*) begin
	/* main: %6*/
	/*   %gep465 = add i32 %gep_int464, 46*/
		main_signed_add_32_228_op0 = main_6_gep_int464;
end
always @(*) begin
	/* main: %6*/
	/*   %gep465 = add i32 %gep_int464, 46*/
if (reset) begin main_signed_add_32_228_op1 = 0; end
		main_signed_add_32_228_op1 = 32'd46;
end
always @(*) begin
	main_signed_add_32_228 = (main_signed_add_32_228_op0 + main_signed_add_32_228_op1);
end
always @(*) begin
	/* main: %6*/
	/*   %gep467 = add i32 %gep_int466, 116*/
		main_signed_add_32_229_op0 = main_6_gep_int466;
end
always @(*) begin
	/* main: %6*/
	/*   %gep467 = add i32 %gep_int466, 116*/
if (reset) begin main_signed_add_32_229_op1 = 0; end
		main_signed_add_32_229_op1 = 32'd116;
end
always @(*) begin
	main_signed_add_32_229 = (main_signed_add_32_229_op0 + main_signed_add_32_229_op1);
end
always @(*) begin
	/* main: %6*/
	/*   %gep469 = add i32 %gep_int468, 46*/
		main_signed_add_32_230_op0 = main_6_gep_int468;
end
always @(*) begin
	/* main: %6*/
	/*   %gep469 = add i32 %gep_int468, 46*/
if (reset) begin main_signed_add_32_230_op1 = 0; end
		main_signed_add_32_230_op1 = 32'd46;
end
always @(*) begin
	main_signed_add_32_230 = (main_signed_add_32_230_op0 + main_signed_add_32_230_op1);
end
always @(*) begin
	/* main: %6*/
	/*   %gep471 = add i32 %gep_int470, 116*/
		main_signed_add_32_231_op0 = main_6_gep_int470;
end
always @(*) begin
	/* main: %6*/
	/*   %gep471 = add i32 %gep_int470, 116*/
if (reset) begin main_signed_add_32_231_op1 = 0; end
		main_signed_add_32_231_op1 = 32'd116;
end
always @(*) begin
	main_signed_add_32_231 = (main_signed_add_32_231_op0 + main_signed_add_32_231_op1);
end
always @(*) begin
	/* main: %6*/
	/*   %gep473 = add i32 %gep_int472, 110*/
		main_signed_add_32_232_op0 = main_6_gep_int472;
end
always @(*) begin
	/* main: %6*/
	/*   %gep473 = add i32 %gep_int472, 110*/
if (reset) begin main_signed_add_32_232_op1 = 0; end
		main_signed_add_32_232_op1 = 32'd110;
end
always @(*) begin
	main_signed_add_32_232 = (main_signed_add_32_232_op0 + main_signed_add_32_232_op1);
end
always @(*) begin
	/* main: %6*/
	/*   %gep475 = add i32 %gep_int474, 118*/
		main_signed_add_32_233_op0 = main_6_gep_int474;
end
always @(*) begin
	/* main: %6*/
	/*   %gep475 = add i32 %gep_int474, 118*/
if (reset) begin main_signed_add_32_233_op1 = 0; end
		main_signed_add_32_233_op1 = 32'd118;
end
always @(*) begin
	main_signed_add_32_233 = (main_signed_add_32_233_op0 + main_signed_add_32_233_op1);
end
always @(*) begin
	/* main: %6*/
	/*   %gep477 = add i32 %gep_int476, 110*/
		main_signed_add_32_234_op0 = main_6_gep_int476;
end
always @(*) begin
	/* main: %6*/
	/*   %gep477 = add i32 %gep_int476, 110*/
if (reset) begin main_signed_add_32_234_op1 = 0; end
		main_signed_add_32_234_op1 = 32'd110;
end
always @(*) begin
	main_signed_add_32_234 = (main_signed_add_32_234_op0 + main_signed_add_32_234_op1);
end
always @(*) begin
	/* main: %6*/
	/*   %gep479 = add i32 %gep_int478, 118*/
		main_signed_add_32_235_op0 = main_6_gep_int478;
end
always @(*) begin
	/* main: %6*/
	/*   %gep479 = add i32 %gep_int478, 118*/
if (reset) begin main_signed_add_32_235_op1 = 0; end
		main_signed_add_32_235_op1 = 32'd118;
end
always @(*) begin
	main_signed_add_32_235 = (main_signed_add_32_235_op0 + main_signed_add_32_235_op1);
end
always @(*) begin
	/* main: %6*/
	/*   %gep481 = add i32 %gep_int480, 30*/
		main_signed_add_32_236_op0 = main_6_gep_int480;
end
always @(*) begin
	/* main: %6*/
	/*   %gep481 = add i32 %gep_int480, 30*/
if (reset) begin main_signed_add_32_236_op1 = 0; end
		main_signed_add_32_236_op1 = 32'd30;
end
always @(*) begin
	main_signed_add_32_236 = (main_signed_add_32_236_op0 + main_signed_add_32_236_op1);
end
always @(*) begin
	/* main: %6*/
	/*   %gep483 = add i32 %gep_int482, 120*/
		main_signed_add_32_237_op0 = main_6_gep_int482;
end
always @(*) begin
	/* main: %6*/
	/*   %gep483 = add i32 %gep_int482, 120*/
if (reset) begin main_signed_add_32_237_op1 = 0; end
		main_signed_add_32_237_op1 = 32'd120;
end
always @(*) begin
	main_signed_add_32_237 = (main_signed_add_32_237_op0 + main_signed_add_32_237_op1);
end
always @(*) begin
	/* main: %6*/
	/*   %gep485 = add i32 %gep_int484, 30*/
		main_signed_add_32_238_op0 = main_6_gep_int484;
end
always @(*) begin
	/* main: %6*/
	/*   %gep485 = add i32 %gep_int484, 30*/
if (reset) begin main_signed_add_32_238_op1 = 0; end
		main_signed_add_32_238_op1 = 32'd30;
end
always @(*) begin
	main_signed_add_32_238 = (main_signed_add_32_238_op0 + main_signed_add_32_238_op1);
end
always @(*) begin
	/* main: %6*/
	/*   %gep487 = add i32 %gep_int486, 120*/
		main_signed_add_32_239_op0 = main_6_gep_int486;
end
always @(*) begin
	/* main: %6*/
	/*   %gep487 = add i32 %gep_int486, 120*/
if (reset) begin main_signed_add_32_239_op1 = 0; end
		main_signed_add_32_239_op1 = 32'd120;
end
always @(*) begin
	main_signed_add_32_239 = (main_signed_add_32_239_op0 + main_signed_add_32_239_op1);
end
always @(*) begin
	/* main: %6*/
	/*   %gep489 = add i32 %gep_int488, 94*/
		main_signed_add_32_240_op0 = main_6_gep_int488;
end
always @(*) begin
	/* main: %6*/
	/*   %gep489 = add i32 %gep_int488, 94*/
if (reset) begin main_signed_add_32_240_op1 = 0; end
		main_signed_add_32_240_op1 = 32'd94;
end
always @(*) begin
	main_signed_add_32_240 = (main_signed_add_32_240_op0 + main_signed_add_32_240_op1);
end
always @(*) begin
	/* main: %6*/
	/*   %gep491 = add i32 %gep_int490, 122*/
		main_signed_add_32_241_op0 = main_6_gep_int490;
end
always @(*) begin
	/* main: %6*/
	/*   %gep491 = add i32 %gep_int490, 122*/
if (reset) begin main_signed_add_32_241_op1 = 0; end
		main_signed_add_32_241_op1 = 32'd122;
end
always @(*) begin
	main_signed_add_32_241 = (main_signed_add_32_241_op0 + main_signed_add_32_241_op1);
end
always @(*) begin
	/* main: %6*/
	/*   %gep493 = add i32 %gep_int492, 94*/
		main_signed_add_32_242_op0 = main_6_gep_int492;
end
always @(*) begin
	/* main: %6*/
	/*   %gep493 = add i32 %gep_int492, 94*/
if (reset) begin main_signed_add_32_242_op1 = 0; end
		main_signed_add_32_242_op1 = 32'd94;
end
always @(*) begin
	main_signed_add_32_242 = (main_signed_add_32_242_op0 + main_signed_add_32_242_op1);
end
always @(*) begin
	/* main: %6*/
	/*   %gep495 = add i32 %gep_int494, 122*/
		main_signed_add_32_243_op0 = main_6_gep_int494;
end
always @(*) begin
	/* main: %6*/
	/*   %gep495 = add i32 %gep_int494, 122*/
if (reset) begin main_signed_add_32_243_op1 = 0; end
		main_signed_add_32_243_op1 = 32'd122;
end
always @(*) begin
	main_signed_add_32_243 = (main_signed_add_32_243_op0 + main_signed_add_32_243_op1);
end
always @(*) begin
	/* main: %6*/
	/*   %gep497 = add i32 %gep_int496, 62*/
		main_signed_add_32_244_op0 = main_6_gep_int496;
end
always @(*) begin
	/* main: %6*/
	/*   %gep497 = add i32 %gep_int496, 62*/
if (reset) begin main_signed_add_32_244_op1 = 0; end
		main_signed_add_32_244_op1 = 32'd62;
end
always @(*) begin
	main_signed_add_32_244 = (main_signed_add_32_244_op0 + main_signed_add_32_244_op1);
end
always @(*) begin
	/* main: %6*/
	/*   %gep499 = add i32 %gep_int498, 124*/
		main_signed_add_32_245_op0 = main_6_gep_int498;
end
always @(*) begin
	/* main: %6*/
	/*   %gep499 = add i32 %gep_int498, 124*/
if (reset) begin main_signed_add_32_245_op1 = 0; end
		main_signed_add_32_245_op1 = 32'd124;
end
always @(*) begin
	main_signed_add_32_245 = (main_signed_add_32_245_op0 + main_signed_add_32_245_op1);
end
always @(*) begin
	/* main: %6*/
	/*   %gep501 = add i32 %gep_int500, 62*/
		main_signed_add_32_246_op0 = main_6_gep_int500;
end
always @(*) begin
	/* main: %6*/
	/*   %gep501 = add i32 %gep_int500, 62*/
if (reset) begin main_signed_add_32_246_op1 = 0; end
		main_signed_add_32_246_op1 = 32'd62;
end
always @(*) begin
	main_signed_add_32_246 = (main_signed_add_32_246_op0 + main_signed_add_32_246_op1);
end
always @(*) begin
	/* main: %6*/
	/*   %gep503 = add i32 %gep_int502, 124*/
		main_signed_add_32_247_op0 = main_6_gep_int502;
end
always @(*) begin
	/* main: %6*/
	/*   %gep503 = add i32 %gep_int502, 124*/
if (reset) begin main_signed_add_32_247_op1 = 0; end
		main_signed_add_32_247_op1 = 32'd124;
end
always @(*) begin
	main_signed_add_32_247 = (main_signed_add_32_247_op0 + main_signed_add_32_247_op1);
end
always @(*) begin
	/* main: %6*/
	/*   %gep505 = add i32 %gep_int504, 126*/
		main_signed_add_32_248_op0 = main_6_gep_int504;
end
always @(*) begin
	/* main: %6*/
	/*   %gep505 = add i32 %gep_int504, 126*/
if (reset) begin main_signed_add_32_248_op1 = 0; end
		main_signed_add_32_248_op1 = 32'd126;
end
always @(*) begin
	main_signed_add_32_248 = (main_signed_add_32_248_op0 + main_signed_add_32_248_op1);
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		finish <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
	/* main: %476*/
	/*   ret i32 %.lcssa*/
	if ((cur_state == LEGUP_F_main_BB__476_423)) begin
		finish <= (memory_controller_waitrequest == 1'd0);
		if (start == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
end
always @(*) begin
	memory_controller_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_a = 1'd0;
	end
	/* main: %1*/
	/*   store volatile i16 0, i16* %input_temp, align 2*/
	if ((cur_state == LEGUP_F_main_BB__1_2)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %404*/
	/*   %409 = load i16* %408, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__404_406)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %404*/
	/*   %440 = load i16* %439, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__404_407)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %fft.exit*/
	/*   %456 = load i16* %455, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_fftexit_417)) begin
		memory_controller_enable_a = 1'd1;
	end
end
always @(*) begin
	memory_controller_address_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_a = 1'd0;
	end
	/* main: %1*/
	/*   store volatile i16 0, i16* %input_temp, align 2*/
	if ((cur_state == LEGUP_F_main_BB__1_2)) begin
		memory_controller_address_a = `TAG_main_0_input_temp_a;
	end
	/* main: %404*/
	/*   %409 = load i16* %408, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__404_406)) begin
		memory_controller_address_a = main_404_408;
	end
	/* main: %404*/
	/*   %440 = load i16* %439, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__404_407)) begin
		memory_controller_address_a = main_404_439_reg;
	end
	/* main: %fft.exit*/
	/*   %456 = load i16* %455, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_fftexit_417)) begin
		memory_controller_address_a = main_fftexit_455;
	end
end
always @(*) begin
	memory_controller_write_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %1*/
	/*   store volatile i16 0, i16* %input_temp, align 2*/
	if ((cur_state == LEGUP_F_main_BB__1_2)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %404*/
	/*   %409 = load i16* %408, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__404_406)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %404*/
	/*   %440 = load i16* %439, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__404_407)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %fft.exit*/
	/*   %456 = load i16* %455, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_fftexit_417)) begin
		memory_controller_write_enable_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_a = 1'd0;
	end
	/* main: %1*/
	/*   store volatile i16 0, i16* %input_temp, align 2*/
	if ((cur_state == LEGUP_F_main_BB__1_2)) begin
		memory_controller_in_a = 16'd0;
	end
end
always @(*) begin
	memory_controller_size_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_a = 1'd0;
	end
	/* main: %1*/
	/*   store volatile i16 0, i16* %input_temp, align 2*/
	if ((cur_state == LEGUP_F_main_BB__1_2)) begin
		memory_controller_size_a = 2'd1;
	end
	/* main: %404*/
	/*   %409 = load i16* %408, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__404_406)) begin
		memory_controller_size_a = 2'd1;
	end
	/* main: %404*/
	/*   %440 = load i16* %439, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__404_407)) begin
		memory_controller_size_a = 2'd1;
	end
	/* main: %fft.exit*/
	/*   %456 = load i16* %455, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_fftexit_417)) begin
		memory_controller_size_a = 2'd1;
	end
end
always @(*) begin
	memory_controller_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_b = 1'd0;
	end
	/* main: %1*/
	/*   %input_temp.0.input_temp.0. = load volatile i16* %input_temp, align 2*/
	if ((cur_state == LEGUP_F_main_BB__1_3)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %1*/
	/*   store i16 %input_temp.0.input_temp.0., i16* %2, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_5)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %1*/
	/*   store volatile i16 %4, i16* %input_temp, align 2*/
	if ((cur_state == LEGUP_F_main_BB__1_6)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %1*/
	/*   %input_temp.0.input_temp.0.1 = load volatile i16* %input_temp, align 2*/
	if ((cur_state == LEGUP_F_main_BB__1_7)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %1*/
	/*   store i16 %input_temp.0.input_temp.0.1, i16* %5, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_9)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   %11 = load i16* %7, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   store i16 %11, i16* %9, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_13)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   %12 = load i16* %8, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_14)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   store i16 %12, i16* %10, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_16)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   %14 = load i16* %13, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_17)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   store i16 %14, i16* %15, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_19)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   %17 = load i16* %16, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_20)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   store i16 %17, i16* %18, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_22)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   %20 = load i16* %19, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_23)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   store i16 %20, i16* %21, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_25)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   %23 = load i16* %22, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_26)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   store i16 %23, i16* %24, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_28)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   %26 = load i16* %25, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_29)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   store i16 %26, i16* %27, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_31)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   %29 = load i16* %28, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_32)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   store i16 %29, i16* %30, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_34)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   %32 = load i16* %31, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_35)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   store i16 %32, i16* %33, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_37)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   %35 = load i16* %34, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_38)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   store i16 %35, i16* %36, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_40)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   %38 = load i16* %37, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_41)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   store i16 %38, i16* %39, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_43)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   %41 = load i16* %40, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_44)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   store i16 %41, i16* %42, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_46)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   %44 = load i16* %43, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_47)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   store i16 %44, i16* %45, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_49)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   %47 = load i16* %46, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_50)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   store i16 %47, i16* %48, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_52)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   %50 = load i16* %49, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_53)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   store i16 %50, i16* %51, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_55)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   %53 = load i16* %52, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_56)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   store i16 %53, i16* %54, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_58)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   %56 = load i16* %55, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_59)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   store i16 %56, i16* %57, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_61)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   %59 = load i16* %58, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_62)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   store i16 %59, i16* %60, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_64)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   %62 = load i16* %61, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_65)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   store i16 %62, i16* %63, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_67)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   %65 = load i16* %64, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_68)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   store i16 %65, i16* %66, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_70)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   %68 = load i16* %67, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_71)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   store i16 %68, i16* %69, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_73)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   %71 = load i16* %70, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_74)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   store i16 %71, i16* %72, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_76)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   %74 = load i16* %73, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_77)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   store i16 %74, i16* %75, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_79)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   %77 = load i16* %76, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_80)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   store i16 %77, i16* %78, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_82)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   %80 = load i16* %79, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_83)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   store i16 %80, i16* %81, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_85)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   %83 = load i16* %82, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_86)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   store i16 %83, i16* %84, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_88)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   %86 = load i16* %85, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_89)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   store i16 %86, i16* %87, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_91)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   %89 = load i16* %88, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_92)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   store i16 %89, i16* %90, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_94)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   %92 = load i16* %91, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_95)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   store i16 %92, i16* %93, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_97)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   %95 = load i16* %94, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_98)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   store i16 %95, i16* %96, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_100)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   %98 = load i16* %97, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_101)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   store i16 %98, i16* %99, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_103)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   %101 = load i16* %100, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_104)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   store i16 %101, i16* %102, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_106)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   %104 = load i16* %103, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_107)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   store i16 %104, i16* %105, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_109)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   %107 = load i16* %106, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_110)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   store i16 %107, i16* %108, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_112)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   %110 = load i16* %109, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_113)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   store i16 %110, i16* %111, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_115)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   %113 = load i16* %112, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_116)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   store i16 %113, i16* %114, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_118)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   %116 = load i16* %115, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_119)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   store i16 %116, i16* %117, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_121)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   %119 = load i16* %118, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_122)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   store i16 %119, i16* %120, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_124)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   %122 = load i16* %121, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_125)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   store i16 %122, i16* %123, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_127)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   %125 = load i16* %124, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_128)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   store i16 %125, i16* %126, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_130)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   %128 = load i16* %127, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_131)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   store i16 %128, i16* %129, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_133)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   %131 = load i16* %130, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_134)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   store i16 %131, i16* %132, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_136)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   %134 = load i16* %133, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_137)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   store i16 %134, i16* %135, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_139)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   %137 = load i16* %136, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_140)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   store i16 %137, i16* %138, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_142)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   %140 = load i16* %139, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_143)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   store i16 %140, i16* %141, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_145)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   %143 = load i16* %142, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_146)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   store i16 %143, i16* %144, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_148)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   %146 = load i16* %145, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_149)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   store i16 %146, i16* %147, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_151)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   %149 = load i16* %148, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_152)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   store i16 %149, i16* %150, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_154)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   %152 = load i16* %151, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_155)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   store i16 %152, i16* %153, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_157)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   %155 = load i16* %154, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_158)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   store i16 %155, i16* %156, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_160)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   %158 = load i16* %157, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_161)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   store i16 %158, i16* %159, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_163)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   %161 = load i16* %160, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_164)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   store i16 %161, i16* %162, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_166)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   %164 = load i16* %163, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_167)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   store i16 %164, i16* %165, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_169)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   %167 = load i16* %166, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_170)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   store i16 %167, i16* %168, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_172)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   %170 = load i16* %169, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_173)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   store i16 %170, i16* %171, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_175)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   %173 = load i16* %172, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_176)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   store i16 %173, i16* %174, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_178)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   %176 = load i16* %175, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_179)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   store i16 %176, i16* %177, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_181)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   %179 = load i16* %178, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_182)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   store i16 %179, i16* %180, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_184)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   %182 = load i16* %181, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_185)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   store i16 %182, i16* %183, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_187)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   %185 = load i16* %184, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_188)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   store i16 %185, i16* %186, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_190)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   %188 = load i16* %187, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_191)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   store i16 %188, i16* %189, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_193)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   %191 = load i16* %190, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_194)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   store i16 %191, i16* %192, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_196)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   %194 = load i16* %193, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_197)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   store i16 %194, i16* %195, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_199)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   %197 = load i16* %196, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_200)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   store i16 %197, i16* %198, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_202)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   %200 = load i16* %199, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_203)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   store i16 %200, i16* %201, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_205)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   %203 = load i16* %202, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_206)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   store i16 %203, i16* %204, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_208)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   %206 = load i16* %205, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_209)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   store i16 %206, i16* %207, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_211)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   %209 = load i16* %208, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_212)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   store i16 %209, i16* %210, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_214)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   %212 = load i16* %211, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_215)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   store i16 %212, i16* %213, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_217)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   %215 = load i16* %214, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_218)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   store i16 %215, i16* %216, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_220)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   %218 = load i16* %217, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_221)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   store i16 %218, i16* %219, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_223)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   %221 = load i16* %220, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_224)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   store i16 %221, i16* %222, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_226)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   %224 = load i16* %223, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_227)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   store i16 %224, i16* %225, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_229)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   %227 = load i16* %226, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_230)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   store i16 %227, i16* %228, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_232)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   %230 = load i16* %229, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_233)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   store i16 %230, i16* %231, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_235)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   %233 = load i16* %232, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_236)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   store i16 %233, i16* %234, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_238)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   %236 = load i16* %235, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_239)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   store i16 %236, i16* %237, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_241)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   %239 = load i16* %238, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_242)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   store i16 %239, i16* %240, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_244)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   %242 = load i16* %241, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_245)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   store i16 %242, i16* %243, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_247)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   %245 = load i16* %244, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_248)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   store i16 %245, i16* %246, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_250)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   %248 = load i16* %247, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_251)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   store i16 %248, i16* %249, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_253)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   %251 = load i16* %250, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_254)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   store i16 %251, i16* %252, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_256)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   %254 = load i16* %253, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_257)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   store i16 %254, i16* %255, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_259)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   %257 = load i16* %256, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_260)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   store i16 %257, i16* %258, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_262)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   %260 = load i16* %259, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_263)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   store i16 %260, i16* %261, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_265)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   %263 = load i16* %262, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_266)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   store i16 %263, i16* %264, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_268)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   %266 = load i16* %265, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_269)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   store i16 %266, i16* %267, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_271)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   %269 = load i16* %268, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_272)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   store i16 %269, i16* %270, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_274)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   %272 = load i16* %271, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_275)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   store i16 %272, i16* %273, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_277)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   %275 = load i16* %274, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_278)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   store i16 %275, i16* %276, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_280)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   %278 = load i16* %277, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_281)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   store i16 %278, i16* %279, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_283)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   %281 = load i16* %280, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_284)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   store i16 %281, i16* %282, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_286)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   %284 = load i16* %283, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_287)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   store i16 %284, i16* %285, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_289)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   %287 = load i16* %286, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_290)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   store i16 %287, i16* %288, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_292)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   %290 = load i16* %289, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_293)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   store i16 %290, i16* %291, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_295)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   %293 = load i16* %292, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_296)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   store i16 %293, i16* %294, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_298)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   %296 = load i16* %295, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_299)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   store i16 %296, i16* %297, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_301)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   %299 = load i16* %298, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_302)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   store i16 %299, i16* %300, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_304)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   %302 = load i16* %301, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_305)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   store i16 %302, i16* %303, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_307)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   %305 = load i16* %304, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_308)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   store i16 %305, i16* %306, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_310)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   %308 = load i16* %307, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_311)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   store i16 %308, i16* %309, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_313)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   %311 = load i16* %310, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_314)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   store i16 %311, i16* %312, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_316)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   %314 = load i16* %313, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_317)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   store i16 %314, i16* %315, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_319)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   %317 = load i16* %316, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_320)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   store i16 %317, i16* %318, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_322)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   %320 = load i16* %319, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_323)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   store i16 %320, i16* %321, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_325)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   %323 = load i16* %322, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_326)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   store i16 %323, i16* %324, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_328)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   %326 = load i16* %325, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_329)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   store i16 %326, i16* %327, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_331)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   %329 = load i16* %328, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_332)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   store i16 %329, i16* %330, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_334)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   %332 = load i16* %331, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_335)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   store i16 %332, i16* %333, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_337)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   %335 = load i16* %334, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_338)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   store i16 %335, i16* %336, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_340)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   %338 = load i16* %337, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_341)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   store i16 %338, i16* %339, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_343)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   %341 = load i16* %340, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_344)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   store i16 %341, i16* %342, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_346)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   %344 = load i16* %343, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_347)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   store i16 %344, i16* %345, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_349)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   %347 = load i16* %346, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_350)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   store i16 %347, i16* %348, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_352)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   %350 = load i16* %349, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_353)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   store i16 %350, i16* %351, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_355)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   %353 = load i16* %352, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_356)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   store i16 %353, i16* %354, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_358)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   %356 = load i16* %355, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_359)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   store i16 %356, i16* %357, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_361)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   %359 = load i16* %358, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_362)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   store i16 %359, i16* %360, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_364)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   %362 = load i16* %361, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_365)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   store i16 %362, i16* %363, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_367)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   %365 = load i16* %364, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_368)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   store i16 %365, i16* %366, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_370)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   %368 = load i16* %367, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_371)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   store i16 %368, i16* %369, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_373)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   %371 = load i16* %370, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_374)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   store i16 %371, i16* %372, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_376)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   %374 = load i16* %373, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_377)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   store i16 %374, i16* %375, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_379)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   %377 = load i16* %376, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_380)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   store i16 %377, i16* %378, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_382)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   %380 = load i16* %379, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_383)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   store i16 %380, i16* %381, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_385)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   %383 = load i16* %382, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_386)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   store i16 %383, i16* %384, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_388)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   %386 = load i16* %385, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_389)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   store i16 %386, i16* %387, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_391)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   %389 = load i16* %388, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_392)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   store i16 %389, i16* %390, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_394)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.lr.ph.i*/
	/*   %401 = load i16* %400, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrphi_400)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.lr.ph.i*/
	/*   %399 = load i16* %398, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrphi_401)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %404*/
	/*   %418 = load i16* %417, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__404_406)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %404*/
	/*   %441 = load i16* %438, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__404_407)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %404*/
	/*   store i16 %444, i16* %408, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__404_409)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %404*/
	/*   store i16 %445, i16* %417, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__404_410)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %404*/
	/*   store i16 %446, i16* %438, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__404_411)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %404*/
	/*   store i16 %447, i16* %439, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__404_412)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %fft.exit*/
	/*   %463 = load i16* %462, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_fftexit_417)) begin
		memory_controller_enable_b = 1'd1;
	end
end
always @(*) begin
	memory_controller_address_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_b = 1'd0;
	end
	/* main: %1*/
	/*   %input_temp.0.input_temp.0. = load volatile i16* %input_temp, align 2*/
	if ((cur_state == LEGUP_F_main_BB__1_3)) begin
		memory_controller_address_b = `TAG_main_0_input_temp_a;
	end
	/* main: %1*/
	/*   store i16 %input_temp.0.input_temp.0., i16* %2, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_5)) begin
		memory_controller_address_b = main_1_2_reg;
	end
	/* main: %1*/
	/*   store volatile i16 %4, i16* %input_temp, align 2*/
	if ((cur_state == LEGUP_F_main_BB__1_6)) begin
		memory_controller_address_b = `TAG_main_0_input_temp_a;
	end
	/* main: %1*/
	/*   %input_temp.0.input_temp.0.1 = load volatile i16* %input_temp, align 2*/
	if ((cur_state == LEGUP_F_main_BB__1_7)) begin
		memory_controller_address_b = `TAG_main_0_input_temp_a;
	end
	/* main: %1*/
	/*   store i16 %input_temp.0.input_temp.0.1, i16* %5, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_9)) begin
		memory_controller_address_b = main_1_5_reg;
	end
	/* main: %6*/
	/*   %11 = load i16* %7, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		memory_controller_address_b = main_6_7;
	end
	/* main: %6*/
	/*   store i16 %11, i16* %9, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_13)) begin
		memory_controller_address_b = main_6_9_reg;
	end
	/* main: %6*/
	/*   %12 = load i16* %8, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_14)) begin
		memory_controller_address_b = main_6_8_reg;
	end
	/* main: %6*/
	/*   store i16 %12, i16* %10, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_16)) begin
		memory_controller_address_b = main_6_10_reg;
	end
	/* main: %6*/
	/*   %14 = load i16* %13, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_17)) begin
		memory_controller_address_b = main_6_13_reg;
	end
	/* main: %6*/
	/*   store i16 %14, i16* %15, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_19)) begin
		memory_controller_address_b = main_6_15_reg;
	end
	/* main: %6*/
	/*   %17 = load i16* %16, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_20)) begin
		memory_controller_address_b = main_6_16_reg;
	end
	/* main: %6*/
	/*   store i16 %17, i16* %18, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_22)) begin
		memory_controller_address_b = main_6_18_reg;
	end
	/* main: %6*/
	/*   %20 = load i16* %19, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_23)) begin
		memory_controller_address_b = main_6_19_reg;
	end
	/* main: %6*/
	/*   store i16 %20, i16* %21, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_25)) begin
		memory_controller_address_b = main_6_21_reg;
	end
	/* main: %6*/
	/*   %23 = load i16* %22, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_26)) begin
		memory_controller_address_b = main_6_22_reg;
	end
	/* main: %6*/
	/*   store i16 %23, i16* %24, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_28)) begin
		memory_controller_address_b = main_6_24_reg;
	end
	/* main: %6*/
	/*   %26 = load i16* %25, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_29)) begin
		memory_controller_address_b = main_6_25_reg;
	end
	/* main: %6*/
	/*   store i16 %26, i16* %27, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_31)) begin
		memory_controller_address_b = main_6_27_reg;
	end
	/* main: %6*/
	/*   %29 = load i16* %28, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_32)) begin
		memory_controller_address_b = main_6_28_reg;
	end
	/* main: %6*/
	/*   store i16 %29, i16* %30, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_34)) begin
		memory_controller_address_b = main_6_30_reg;
	end
	/* main: %6*/
	/*   %32 = load i16* %31, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_35)) begin
		memory_controller_address_b = main_6_31_reg;
	end
	/* main: %6*/
	/*   store i16 %32, i16* %33, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_37)) begin
		memory_controller_address_b = main_6_33_reg;
	end
	/* main: %6*/
	/*   %35 = load i16* %34, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_38)) begin
		memory_controller_address_b = main_6_34_reg;
	end
	/* main: %6*/
	/*   store i16 %35, i16* %36, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_40)) begin
		memory_controller_address_b = main_6_36_reg;
	end
	/* main: %6*/
	/*   %38 = load i16* %37, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_41)) begin
		memory_controller_address_b = main_6_37_reg;
	end
	/* main: %6*/
	/*   store i16 %38, i16* %39, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_43)) begin
		memory_controller_address_b = main_6_39_reg;
	end
	/* main: %6*/
	/*   %41 = load i16* %40, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_44)) begin
		memory_controller_address_b = main_6_40_reg;
	end
	/* main: %6*/
	/*   store i16 %41, i16* %42, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_46)) begin
		memory_controller_address_b = main_6_42_reg;
	end
	/* main: %6*/
	/*   %44 = load i16* %43, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_47)) begin
		memory_controller_address_b = main_6_43_reg;
	end
	/* main: %6*/
	/*   store i16 %44, i16* %45, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_49)) begin
		memory_controller_address_b = main_6_45_reg;
	end
	/* main: %6*/
	/*   %47 = load i16* %46, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_50)) begin
		memory_controller_address_b = main_6_46_reg;
	end
	/* main: %6*/
	/*   store i16 %47, i16* %48, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_52)) begin
		memory_controller_address_b = main_6_48_reg;
	end
	/* main: %6*/
	/*   %50 = load i16* %49, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_53)) begin
		memory_controller_address_b = main_6_49_reg;
	end
	/* main: %6*/
	/*   store i16 %50, i16* %51, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_55)) begin
		memory_controller_address_b = main_6_51_reg;
	end
	/* main: %6*/
	/*   %53 = load i16* %52, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_56)) begin
		memory_controller_address_b = main_6_52_reg;
	end
	/* main: %6*/
	/*   store i16 %53, i16* %54, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_58)) begin
		memory_controller_address_b = main_6_54_reg;
	end
	/* main: %6*/
	/*   %56 = load i16* %55, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_59)) begin
		memory_controller_address_b = main_6_55_reg;
	end
	/* main: %6*/
	/*   store i16 %56, i16* %57, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_61)) begin
		memory_controller_address_b = main_6_57_reg;
	end
	/* main: %6*/
	/*   %59 = load i16* %58, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_62)) begin
		memory_controller_address_b = main_6_58_reg;
	end
	/* main: %6*/
	/*   store i16 %59, i16* %60, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_64)) begin
		memory_controller_address_b = main_6_60_reg;
	end
	/* main: %6*/
	/*   %62 = load i16* %61, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_65)) begin
		memory_controller_address_b = main_6_61_reg;
	end
	/* main: %6*/
	/*   store i16 %62, i16* %63, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_67)) begin
		memory_controller_address_b = main_6_63_reg;
	end
	/* main: %6*/
	/*   %65 = load i16* %64, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_68)) begin
		memory_controller_address_b = main_6_64_reg;
	end
	/* main: %6*/
	/*   store i16 %65, i16* %66, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_70)) begin
		memory_controller_address_b = main_6_66_reg;
	end
	/* main: %6*/
	/*   %68 = load i16* %67, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_71)) begin
		memory_controller_address_b = main_6_67_reg;
	end
	/* main: %6*/
	/*   store i16 %68, i16* %69, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_73)) begin
		memory_controller_address_b = main_6_69_reg;
	end
	/* main: %6*/
	/*   %71 = load i16* %70, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_74)) begin
		memory_controller_address_b = main_6_70_reg;
	end
	/* main: %6*/
	/*   store i16 %71, i16* %72, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_76)) begin
		memory_controller_address_b = main_6_72_reg;
	end
	/* main: %6*/
	/*   %74 = load i16* %73, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_77)) begin
		memory_controller_address_b = main_6_73_reg;
	end
	/* main: %6*/
	/*   store i16 %74, i16* %75, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_79)) begin
		memory_controller_address_b = main_6_75_reg;
	end
	/* main: %6*/
	/*   %77 = load i16* %76, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_80)) begin
		memory_controller_address_b = main_6_76_reg;
	end
	/* main: %6*/
	/*   store i16 %77, i16* %78, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_82)) begin
		memory_controller_address_b = main_6_78_reg;
	end
	/* main: %6*/
	/*   %80 = load i16* %79, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_83)) begin
		memory_controller_address_b = main_6_79_reg;
	end
	/* main: %6*/
	/*   store i16 %80, i16* %81, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_85)) begin
		memory_controller_address_b = main_6_81_reg;
	end
	/* main: %6*/
	/*   %83 = load i16* %82, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_86)) begin
		memory_controller_address_b = main_6_82_reg;
	end
	/* main: %6*/
	/*   store i16 %83, i16* %84, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_88)) begin
		memory_controller_address_b = main_6_84_reg;
	end
	/* main: %6*/
	/*   %86 = load i16* %85, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_89)) begin
		memory_controller_address_b = main_6_85_reg;
	end
	/* main: %6*/
	/*   store i16 %86, i16* %87, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_91)) begin
		memory_controller_address_b = main_6_87_reg;
	end
	/* main: %6*/
	/*   %89 = load i16* %88, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_92)) begin
		memory_controller_address_b = main_6_88_reg;
	end
	/* main: %6*/
	/*   store i16 %89, i16* %90, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_94)) begin
		memory_controller_address_b = main_6_90_reg;
	end
	/* main: %6*/
	/*   %92 = load i16* %91, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_95)) begin
		memory_controller_address_b = main_6_91_reg;
	end
	/* main: %6*/
	/*   store i16 %92, i16* %93, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_97)) begin
		memory_controller_address_b = main_6_93_reg;
	end
	/* main: %6*/
	/*   %95 = load i16* %94, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_98)) begin
		memory_controller_address_b = main_6_94_reg;
	end
	/* main: %6*/
	/*   store i16 %95, i16* %96, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_100)) begin
		memory_controller_address_b = main_6_96_reg;
	end
	/* main: %6*/
	/*   %98 = load i16* %97, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_101)) begin
		memory_controller_address_b = main_6_97_reg;
	end
	/* main: %6*/
	/*   store i16 %98, i16* %99, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_103)) begin
		memory_controller_address_b = main_6_99_reg;
	end
	/* main: %6*/
	/*   %101 = load i16* %100, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_104)) begin
		memory_controller_address_b = main_6_100_reg;
	end
	/* main: %6*/
	/*   store i16 %101, i16* %102, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_106)) begin
		memory_controller_address_b = main_6_102_reg;
	end
	/* main: %6*/
	/*   %104 = load i16* %103, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_107)) begin
		memory_controller_address_b = main_6_103_reg;
	end
	/* main: %6*/
	/*   store i16 %104, i16* %105, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_109)) begin
		memory_controller_address_b = main_6_105_reg;
	end
	/* main: %6*/
	/*   %107 = load i16* %106, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_110)) begin
		memory_controller_address_b = main_6_106_reg;
	end
	/* main: %6*/
	/*   store i16 %107, i16* %108, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_112)) begin
		memory_controller_address_b = main_6_108_reg;
	end
	/* main: %6*/
	/*   %110 = load i16* %109, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_113)) begin
		memory_controller_address_b = main_6_109_reg;
	end
	/* main: %6*/
	/*   store i16 %110, i16* %111, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_115)) begin
		memory_controller_address_b = main_6_111_reg;
	end
	/* main: %6*/
	/*   %113 = load i16* %112, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_116)) begin
		memory_controller_address_b = main_6_112_reg;
	end
	/* main: %6*/
	/*   store i16 %113, i16* %114, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_118)) begin
		memory_controller_address_b = main_6_114_reg;
	end
	/* main: %6*/
	/*   %116 = load i16* %115, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_119)) begin
		memory_controller_address_b = main_6_115_reg;
	end
	/* main: %6*/
	/*   store i16 %116, i16* %117, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_121)) begin
		memory_controller_address_b = main_6_117_reg;
	end
	/* main: %6*/
	/*   %119 = load i16* %118, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_122)) begin
		memory_controller_address_b = main_6_118_reg;
	end
	/* main: %6*/
	/*   store i16 %119, i16* %120, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_124)) begin
		memory_controller_address_b = main_6_120_reg;
	end
	/* main: %6*/
	/*   %122 = load i16* %121, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_125)) begin
		memory_controller_address_b = main_6_121_reg;
	end
	/* main: %6*/
	/*   store i16 %122, i16* %123, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_127)) begin
		memory_controller_address_b = main_6_123_reg;
	end
	/* main: %6*/
	/*   %125 = load i16* %124, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_128)) begin
		memory_controller_address_b = main_6_124_reg;
	end
	/* main: %6*/
	/*   store i16 %125, i16* %126, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_130)) begin
		memory_controller_address_b = main_6_126_reg;
	end
	/* main: %6*/
	/*   %128 = load i16* %127, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_131)) begin
		memory_controller_address_b = main_6_127_reg;
	end
	/* main: %6*/
	/*   store i16 %128, i16* %129, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_133)) begin
		memory_controller_address_b = main_6_129_reg;
	end
	/* main: %6*/
	/*   %131 = load i16* %130, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_134)) begin
		memory_controller_address_b = main_6_130_reg;
	end
	/* main: %6*/
	/*   store i16 %131, i16* %132, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_136)) begin
		memory_controller_address_b = main_6_132_reg;
	end
	/* main: %6*/
	/*   %134 = load i16* %133, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_137)) begin
		memory_controller_address_b = main_6_133_reg;
	end
	/* main: %6*/
	/*   store i16 %134, i16* %135, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_139)) begin
		memory_controller_address_b = main_6_135_reg;
	end
	/* main: %6*/
	/*   %137 = load i16* %136, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_140)) begin
		memory_controller_address_b = main_6_136_reg;
	end
	/* main: %6*/
	/*   store i16 %137, i16* %138, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_142)) begin
		memory_controller_address_b = main_6_138_reg;
	end
	/* main: %6*/
	/*   %140 = load i16* %139, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_143)) begin
		memory_controller_address_b = main_6_139_reg;
	end
	/* main: %6*/
	/*   store i16 %140, i16* %141, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_145)) begin
		memory_controller_address_b = main_6_141_reg;
	end
	/* main: %6*/
	/*   %143 = load i16* %142, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_146)) begin
		memory_controller_address_b = main_6_142_reg;
	end
	/* main: %6*/
	/*   store i16 %143, i16* %144, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_148)) begin
		memory_controller_address_b = main_6_144_reg;
	end
	/* main: %6*/
	/*   %146 = load i16* %145, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_149)) begin
		memory_controller_address_b = main_6_145_reg;
	end
	/* main: %6*/
	/*   store i16 %146, i16* %147, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_151)) begin
		memory_controller_address_b = main_6_147_reg;
	end
	/* main: %6*/
	/*   %149 = load i16* %148, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_152)) begin
		memory_controller_address_b = main_6_148_reg;
	end
	/* main: %6*/
	/*   store i16 %149, i16* %150, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_154)) begin
		memory_controller_address_b = main_6_150_reg;
	end
	/* main: %6*/
	/*   %152 = load i16* %151, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_155)) begin
		memory_controller_address_b = main_6_151_reg;
	end
	/* main: %6*/
	/*   store i16 %152, i16* %153, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_157)) begin
		memory_controller_address_b = main_6_153_reg;
	end
	/* main: %6*/
	/*   %155 = load i16* %154, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_158)) begin
		memory_controller_address_b = main_6_154_reg;
	end
	/* main: %6*/
	/*   store i16 %155, i16* %156, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_160)) begin
		memory_controller_address_b = main_6_156_reg;
	end
	/* main: %6*/
	/*   %158 = load i16* %157, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_161)) begin
		memory_controller_address_b = main_6_157_reg;
	end
	/* main: %6*/
	/*   store i16 %158, i16* %159, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_163)) begin
		memory_controller_address_b = main_6_159_reg;
	end
	/* main: %6*/
	/*   %161 = load i16* %160, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_164)) begin
		memory_controller_address_b = main_6_160_reg;
	end
	/* main: %6*/
	/*   store i16 %161, i16* %162, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_166)) begin
		memory_controller_address_b = main_6_162_reg;
	end
	/* main: %6*/
	/*   %164 = load i16* %163, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_167)) begin
		memory_controller_address_b = main_6_163_reg;
	end
	/* main: %6*/
	/*   store i16 %164, i16* %165, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_169)) begin
		memory_controller_address_b = main_6_165_reg;
	end
	/* main: %6*/
	/*   %167 = load i16* %166, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_170)) begin
		memory_controller_address_b = main_6_166_reg;
	end
	/* main: %6*/
	/*   store i16 %167, i16* %168, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_172)) begin
		memory_controller_address_b = main_6_168_reg;
	end
	/* main: %6*/
	/*   %170 = load i16* %169, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_173)) begin
		memory_controller_address_b = main_6_169_reg;
	end
	/* main: %6*/
	/*   store i16 %170, i16* %171, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_175)) begin
		memory_controller_address_b = main_6_171_reg;
	end
	/* main: %6*/
	/*   %173 = load i16* %172, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_176)) begin
		memory_controller_address_b = main_6_172_reg;
	end
	/* main: %6*/
	/*   store i16 %173, i16* %174, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_178)) begin
		memory_controller_address_b = main_6_174_reg;
	end
	/* main: %6*/
	/*   %176 = load i16* %175, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_179)) begin
		memory_controller_address_b = main_6_175_reg;
	end
	/* main: %6*/
	/*   store i16 %176, i16* %177, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_181)) begin
		memory_controller_address_b = main_6_177_reg;
	end
	/* main: %6*/
	/*   %179 = load i16* %178, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_182)) begin
		memory_controller_address_b = main_6_178_reg;
	end
	/* main: %6*/
	/*   store i16 %179, i16* %180, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_184)) begin
		memory_controller_address_b = main_6_180_reg;
	end
	/* main: %6*/
	/*   %182 = load i16* %181, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_185)) begin
		memory_controller_address_b = main_6_181_reg;
	end
	/* main: %6*/
	/*   store i16 %182, i16* %183, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_187)) begin
		memory_controller_address_b = main_6_183_reg;
	end
	/* main: %6*/
	/*   %185 = load i16* %184, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_188)) begin
		memory_controller_address_b = main_6_184_reg;
	end
	/* main: %6*/
	/*   store i16 %185, i16* %186, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_190)) begin
		memory_controller_address_b = main_6_186_reg;
	end
	/* main: %6*/
	/*   %188 = load i16* %187, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_191)) begin
		memory_controller_address_b = main_6_187_reg;
	end
	/* main: %6*/
	/*   store i16 %188, i16* %189, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_193)) begin
		memory_controller_address_b = main_6_189_reg;
	end
	/* main: %6*/
	/*   %191 = load i16* %190, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_194)) begin
		memory_controller_address_b = main_6_190_reg;
	end
	/* main: %6*/
	/*   store i16 %191, i16* %192, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_196)) begin
		memory_controller_address_b = main_6_192_reg;
	end
	/* main: %6*/
	/*   %194 = load i16* %193, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_197)) begin
		memory_controller_address_b = main_6_193_reg;
	end
	/* main: %6*/
	/*   store i16 %194, i16* %195, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_199)) begin
		memory_controller_address_b = main_6_195_reg;
	end
	/* main: %6*/
	/*   %197 = load i16* %196, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_200)) begin
		memory_controller_address_b = main_6_196_reg;
	end
	/* main: %6*/
	/*   store i16 %197, i16* %198, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_202)) begin
		memory_controller_address_b = main_6_198_reg;
	end
	/* main: %6*/
	/*   %200 = load i16* %199, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_203)) begin
		memory_controller_address_b = main_6_199_reg;
	end
	/* main: %6*/
	/*   store i16 %200, i16* %201, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_205)) begin
		memory_controller_address_b = main_6_201_reg;
	end
	/* main: %6*/
	/*   %203 = load i16* %202, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_206)) begin
		memory_controller_address_b = main_6_202_reg;
	end
	/* main: %6*/
	/*   store i16 %203, i16* %204, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_208)) begin
		memory_controller_address_b = main_6_204_reg;
	end
	/* main: %6*/
	/*   %206 = load i16* %205, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_209)) begin
		memory_controller_address_b = main_6_205_reg;
	end
	/* main: %6*/
	/*   store i16 %206, i16* %207, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_211)) begin
		memory_controller_address_b = main_6_207_reg;
	end
	/* main: %6*/
	/*   %209 = load i16* %208, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_212)) begin
		memory_controller_address_b = main_6_208_reg;
	end
	/* main: %6*/
	/*   store i16 %209, i16* %210, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_214)) begin
		memory_controller_address_b = main_6_210_reg;
	end
	/* main: %6*/
	/*   %212 = load i16* %211, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_215)) begin
		memory_controller_address_b = main_6_211_reg;
	end
	/* main: %6*/
	/*   store i16 %212, i16* %213, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_217)) begin
		memory_controller_address_b = main_6_213_reg;
	end
	/* main: %6*/
	/*   %215 = load i16* %214, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_218)) begin
		memory_controller_address_b = main_6_214_reg;
	end
	/* main: %6*/
	/*   store i16 %215, i16* %216, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_220)) begin
		memory_controller_address_b = main_6_216_reg;
	end
	/* main: %6*/
	/*   %218 = load i16* %217, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_221)) begin
		memory_controller_address_b = main_6_217_reg;
	end
	/* main: %6*/
	/*   store i16 %218, i16* %219, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_223)) begin
		memory_controller_address_b = main_6_219_reg;
	end
	/* main: %6*/
	/*   %221 = load i16* %220, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_224)) begin
		memory_controller_address_b = main_6_220_reg;
	end
	/* main: %6*/
	/*   store i16 %221, i16* %222, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_226)) begin
		memory_controller_address_b = main_6_222_reg;
	end
	/* main: %6*/
	/*   %224 = load i16* %223, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_227)) begin
		memory_controller_address_b = main_6_223_reg;
	end
	/* main: %6*/
	/*   store i16 %224, i16* %225, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_229)) begin
		memory_controller_address_b = main_6_225_reg;
	end
	/* main: %6*/
	/*   %227 = load i16* %226, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_230)) begin
		memory_controller_address_b = main_6_226_reg;
	end
	/* main: %6*/
	/*   store i16 %227, i16* %228, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_232)) begin
		memory_controller_address_b = main_6_228_reg;
	end
	/* main: %6*/
	/*   %230 = load i16* %229, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_233)) begin
		memory_controller_address_b = main_6_229_reg;
	end
	/* main: %6*/
	/*   store i16 %230, i16* %231, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_235)) begin
		memory_controller_address_b = main_6_231_reg;
	end
	/* main: %6*/
	/*   %233 = load i16* %232, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_236)) begin
		memory_controller_address_b = main_6_232_reg;
	end
	/* main: %6*/
	/*   store i16 %233, i16* %234, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_238)) begin
		memory_controller_address_b = main_6_234_reg;
	end
	/* main: %6*/
	/*   %236 = load i16* %235, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_239)) begin
		memory_controller_address_b = main_6_235_reg;
	end
	/* main: %6*/
	/*   store i16 %236, i16* %237, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_241)) begin
		memory_controller_address_b = main_6_237_reg;
	end
	/* main: %6*/
	/*   %239 = load i16* %238, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_242)) begin
		memory_controller_address_b = main_6_238_reg;
	end
	/* main: %6*/
	/*   store i16 %239, i16* %240, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_244)) begin
		memory_controller_address_b = main_6_240_reg;
	end
	/* main: %6*/
	/*   %242 = load i16* %241, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_245)) begin
		memory_controller_address_b = main_6_241_reg;
	end
	/* main: %6*/
	/*   store i16 %242, i16* %243, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_247)) begin
		memory_controller_address_b = main_6_243_reg;
	end
	/* main: %6*/
	/*   %245 = load i16* %244, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_248)) begin
		memory_controller_address_b = main_6_244_reg;
	end
	/* main: %6*/
	/*   store i16 %245, i16* %246, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_250)) begin
		memory_controller_address_b = main_6_246_reg;
	end
	/* main: %6*/
	/*   %248 = load i16* %247, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_251)) begin
		memory_controller_address_b = main_6_247_reg;
	end
	/* main: %6*/
	/*   store i16 %248, i16* %249, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_253)) begin
		memory_controller_address_b = main_6_249_reg;
	end
	/* main: %6*/
	/*   %251 = load i16* %250, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_254)) begin
		memory_controller_address_b = main_6_250_reg;
	end
	/* main: %6*/
	/*   store i16 %251, i16* %252, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_256)) begin
		memory_controller_address_b = main_6_252_reg;
	end
	/* main: %6*/
	/*   %254 = load i16* %253, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_257)) begin
		memory_controller_address_b = main_6_253_reg;
	end
	/* main: %6*/
	/*   store i16 %254, i16* %255, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_259)) begin
		memory_controller_address_b = main_6_255_reg;
	end
	/* main: %6*/
	/*   %257 = load i16* %256, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_260)) begin
		memory_controller_address_b = main_6_256_reg;
	end
	/* main: %6*/
	/*   store i16 %257, i16* %258, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_262)) begin
		memory_controller_address_b = main_6_258_reg;
	end
	/* main: %6*/
	/*   %260 = load i16* %259, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_263)) begin
		memory_controller_address_b = main_6_259_reg;
	end
	/* main: %6*/
	/*   store i16 %260, i16* %261, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_265)) begin
		memory_controller_address_b = main_6_261_reg;
	end
	/* main: %6*/
	/*   %263 = load i16* %262, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_266)) begin
		memory_controller_address_b = main_6_262_reg;
	end
	/* main: %6*/
	/*   store i16 %263, i16* %264, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_268)) begin
		memory_controller_address_b = main_6_264_reg;
	end
	/* main: %6*/
	/*   %266 = load i16* %265, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_269)) begin
		memory_controller_address_b = main_6_265_reg;
	end
	/* main: %6*/
	/*   store i16 %266, i16* %267, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_271)) begin
		memory_controller_address_b = main_6_267_reg;
	end
	/* main: %6*/
	/*   %269 = load i16* %268, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_272)) begin
		memory_controller_address_b = main_6_268_reg;
	end
	/* main: %6*/
	/*   store i16 %269, i16* %270, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_274)) begin
		memory_controller_address_b = main_6_270_reg;
	end
	/* main: %6*/
	/*   %272 = load i16* %271, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_275)) begin
		memory_controller_address_b = main_6_271_reg;
	end
	/* main: %6*/
	/*   store i16 %272, i16* %273, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_277)) begin
		memory_controller_address_b = main_6_273_reg;
	end
	/* main: %6*/
	/*   %275 = load i16* %274, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_278)) begin
		memory_controller_address_b = main_6_274_reg;
	end
	/* main: %6*/
	/*   store i16 %275, i16* %276, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_280)) begin
		memory_controller_address_b = main_6_276_reg;
	end
	/* main: %6*/
	/*   %278 = load i16* %277, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_281)) begin
		memory_controller_address_b = main_6_277_reg;
	end
	/* main: %6*/
	/*   store i16 %278, i16* %279, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_283)) begin
		memory_controller_address_b = main_6_279_reg;
	end
	/* main: %6*/
	/*   %281 = load i16* %280, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_284)) begin
		memory_controller_address_b = main_6_280_reg;
	end
	/* main: %6*/
	/*   store i16 %281, i16* %282, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_286)) begin
		memory_controller_address_b = main_6_282_reg;
	end
	/* main: %6*/
	/*   %284 = load i16* %283, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_287)) begin
		memory_controller_address_b = main_6_283_reg;
	end
	/* main: %6*/
	/*   store i16 %284, i16* %285, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_289)) begin
		memory_controller_address_b = main_6_285_reg;
	end
	/* main: %6*/
	/*   %287 = load i16* %286, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_290)) begin
		memory_controller_address_b = main_6_286_reg;
	end
	/* main: %6*/
	/*   store i16 %287, i16* %288, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_292)) begin
		memory_controller_address_b = main_6_288_reg;
	end
	/* main: %6*/
	/*   %290 = load i16* %289, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_293)) begin
		memory_controller_address_b = main_6_289_reg;
	end
	/* main: %6*/
	/*   store i16 %290, i16* %291, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_295)) begin
		memory_controller_address_b = main_6_291_reg;
	end
	/* main: %6*/
	/*   %293 = load i16* %292, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_296)) begin
		memory_controller_address_b = main_6_292_reg;
	end
	/* main: %6*/
	/*   store i16 %293, i16* %294, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_298)) begin
		memory_controller_address_b = main_6_294_reg;
	end
	/* main: %6*/
	/*   %296 = load i16* %295, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_299)) begin
		memory_controller_address_b = main_6_295_reg;
	end
	/* main: %6*/
	/*   store i16 %296, i16* %297, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_301)) begin
		memory_controller_address_b = main_6_297_reg;
	end
	/* main: %6*/
	/*   %299 = load i16* %298, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_302)) begin
		memory_controller_address_b = main_6_298_reg;
	end
	/* main: %6*/
	/*   store i16 %299, i16* %300, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_304)) begin
		memory_controller_address_b = main_6_300_reg;
	end
	/* main: %6*/
	/*   %302 = load i16* %301, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_305)) begin
		memory_controller_address_b = main_6_301_reg;
	end
	/* main: %6*/
	/*   store i16 %302, i16* %303, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_307)) begin
		memory_controller_address_b = main_6_303_reg;
	end
	/* main: %6*/
	/*   %305 = load i16* %304, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_308)) begin
		memory_controller_address_b = main_6_304_reg;
	end
	/* main: %6*/
	/*   store i16 %305, i16* %306, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_310)) begin
		memory_controller_address_b = main_6_306_reg;
	end
	/* main: %6*/
	/*   %308 = load i16* %307, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_311)) begin
		memory_controller_address_b = main_6_307_reg;
	end
	/* main: %6*/
	/*   store i16 %308, i16* %309, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_313)) begin
		memory_controller_address_b = main_6_309_reg;
	end
	/* main: %6*/
	/*   %311 = load i16* %310, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_314)) begin
		memory_controller_address_b = main_6_310_reg;
	end
	/* main: %6*/
	/*   store i16 %311, i16* %312, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_316)) begin
		memory_controller_address_b = main_6_312_reg;
	end
	/* main: %6*/
	/*   %314 = load i16* %313, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_317)) begin
		memory_controller_address_b = main_6_313_reg;
	end
	/* main: %6*/
	/*   store i16 %314, i16* %315, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_319)) begin
		memory_controller_address_b = main_6_315_reg;
	end
	/* main: %6*/
	/*   %317 = load i16* %316, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_320)) begin
		memory_controller_address_b = main_6_316_reg;
	end
	/* main: %6*/
	/*   store i16 %317, i16* %318, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_322)) begin
		memory_controller_address_b = main_6_318_reg;
	end
	/* main: %6*/
	/*   %320 = load i16* %319, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_323)) begin
		memory_controller_address_b = main_6_319_reg;
	end
	/* main: %6*/
	/*   store i16 %320, i16* %321, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_325)) begin
		memory_controller_address_b = main_6_321_reg;
	end
	/* main: %6*/
	/*   %323 = load i16* %322, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_326)) begin
		memory_controller_address_b = main_6_322_reg;
	end
	/* main: %6*/
	/*   store i16 %323, i16* %324, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_328)) begin
		memory_controller_address_b = main_6_324_reg;
	end
	/* main: %6*/
	/*   %326 = load i16* %325, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_329)) begin
		memory_controller_address_b = main_6_325_reg;
	end
	/* main: %6*/
	/*   store i16 %326, i16* %327, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_331)) begin
		memory_controller_address_b = main_6_327_reg;
	end
	/* main: %6*/
	/*   %329 = load i16* %328, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_332)) begin
		memory_controller_address_b = main_6_328_reg;
	end
	/* main: %6*/
	/*   store i16 %329, i16* %330, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_334)) begin
		memory_controller_address_b = main_6_330_reg;
	end
	/* main: %6*/
	/*   %332 = load i16* %331, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_335)) begin
		memory_controller_address_b = main_6_331_reg;
	end
	/* main: %6*/
	/*   store i16 %332, i16* %333, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_337)) begin
		memory_controller_address_b = main_6_333_reg;
	end
	/* main: %6*/
	/*   %335 = load i16* %334, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_338)) begin
		memory_controller_address_b = main_6_334_reg;
	end
	/* main: %6*/
	/*   store i16 %335, i16* %336, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_340)) begin
		memory_controller_address_b = main_6_336_reg;
	end
	/* main: %6*/
	/*   %338 = load i16* %337, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_341)) begin
		memory_controller_address_b = main_6_337_reg;
	end
	/* main: %6*/
	/*   store i16 %338, i16* %339, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_343)) begin
		memory_controller_address_b = main_6_339_reg;
	end
	/* main: %6*/
	/*   %341 = load i16* %340, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_344)) begin
		memory_controller_address_b = main_6_340_reg;
	end
	/* main: %6*/
	/*   store i16 %341, i16* %342, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_346)) begin
		memory_controller_address_b = main_6_342_reg;
	end
	/* main: %6*/
	/*   %344 = load i16* %343, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_347)) begin
		memory_controller_address_b = main_6_343_reg;
	end
	/* main: %6*/
	/*   store i16 %344, i16* %345, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_349)) begin
		memory_controller_address_b = main_6_345_reg;
	end
	/* main: %6*/
	/*   %347 = load i16* %346, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_350)) begin
		memory_controller_address_b = main_6_346_reg;
	end
	/* main: %6*/
	/*   store i16 %347, i16* %348, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_352)) begin
		memory_controller_address_b = main_6_348_reg;
	end
	/* main: %6*/
	/*   %350 = load i16* %349, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_353)) begin
		memory_controller_address_b = main_6_349_reg;
	end
	/* main: %6*/
	/*   store i16 %350, i16* %351, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_355)) begin
		memory_controller_address_b = main_6_351_reg;
	end
	/* main: %6*/
	/*   %353 = load i16* %352, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_356)) begin
		memory_controller_address_b = main_6_352_reg;
	end
	/* main: %6*/
	/*   store i16 %353, i16* %354, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_358)) begin
		memory_controller_address_b = main_6_354_reg;
	end
	/* main: %6*/
	/*   %356 = load i16* %355, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_359)) begin
		memory_controller_address_b = main_6_355_reg;
	end
	/* main: %6*/
	/*   store i16 %356, i16* %357, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_361)) begin
		memory_controller_address_b = main_6_357_reg;
	end
	/* main: %6*/
	/*   %359 = load i16* %358, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_362)) begin
		memory_controller_address_b = main_6_358_reg;
	end
	/* main: %6*/
	/*   store i16 %359, i16* %360, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_364)) begin
		memory_controller_address_b = main_6_360_reg;
	end
	/* main: %6*/
	/*   %362 = load i16* %361, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_365)) begin
		memory_controller_address_b = main_6_361_reg;
	end
	/* main: %6*/
	/*   store i16 %362, i16* %363, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_367)) begin
		memory_controller_address_b = main_6_363_reg;
	end
	/* main: %6*/
	/*   %365 = load i16* %364, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_368)) begin
		memory_controller_address_b = main_6_364_reg;
	end
	/* main: %6*/
	/*   store i16 %365, i16* %366, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_370)) begin
		memory_controller_address_b = main_6_366_reg;
	end
	/* main: %6*/
	/*   %368 = load i16* %367, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_371)) begin
		memory_controller_address_b = main_6_367_reg;
	end
	/* main: %6*/
	/*   store i16 %368, i16* %369, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_373)) begin
		memory_controller_address_b = main_6_369_reg;
	end
	/* main: %6*/
	/*   %371 = load i16* %370, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_374)) begin
		memory_controller_address_b = main_6_370_reg;
	end
	/* main: %6*/
	/*   store i16 %371, i16* %372, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_376)) begin
		memory_controller_address_b = main_6_372_reg;
	end
	/* main: %6*/
	/*   %374 = load i16* %373, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_377)) begin
		memory_controller_address_b = main_6_373_reg;
	end
	/* main: %6*/
	/*   store i16 %374, i16* %375, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_379)) begin
		memory_controller_address_b = main_6_375_reg;
	end
	/* main: %6*/
	/*   %377 = load i16* %376, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_380)) begin
		memory_controller_address_b = main_6_376_reg;
	end
	/* main: %6*/
	/*   store i16 %377, i16* %378, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_382)) begin
		memory_controller_address_b = main_6_378_reg;
	end
	/* main: %6*/
	/*   %380 = load i16* %379, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_383)) begin
		memory_controller_address_b = main_6_379_reg;
	end
	/* main: %6*/
	/*   store i16 %380, i16* %381, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_385)) begin
		memory_controller_address_b = main_6_381_reg;
	end
	/* main: %6*/
	/*   %383 = load i16* %382, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_386)) begin
		memory_controller_address_b = main_6_382_reg;
	end
	/* main: %6*/
	/*   store i16 %383, i16* %384, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_388)) begin
		memory_controller_address_b = main_6_384_reg;
	end
	/* main: %6*/
	/*   %386 = load i16* %385, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_389)) begin
		memory_controller_address_b = main_6_385_reg;
	end
	/* main: %6*/
	/*   store i16 %386, i16* %387, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_391)) begin
		memory_controller_address_b = main_6_387_reg;
	end
	/* main: %6*/
	/*   %389 = load i16* %388, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_392)) begin
		memory_controller_address_b = main_6_388_reg;
	end
	/* main: %6*/
	/*   store i16 %389, i16* %390, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_394)) begin
		memory_controller_address_b = main_6_390_reg;
	end
	/* main: %.lr.ph.i*/
	/*   %401 = load i16* %400, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrphi_400)) begin
		memory_controller_address_b = main_lrphi_400;
	end
	/* main: %.lr.ph.i*/
	/*   %399 = load i16* %398, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrphi_401)) begin
		memory_controller_address_b = main_lrphi_398;
	end
	/* main: %404*/
	/*   %418 = load i16* %417, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__404_406)) begin
		memory_controller_address_b = main_404_417;
	end
	/* main: %404*/
	/*   %441 = load i16* %438, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__404_407)) begin
		memory_controller_address_b = main_404_438_reg;
	end
	/* main: %404*/
	/*   store i16 %444, i16* %408, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__404_409)) begin
		memory_controller_address_b = main_404_408_reg;
	end
	/* main: %404*/
	/*   store i16 %445, i16* %417, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__404_410)) begin
		memory_controller_address_b = main_404_417_reg;
	end
	/* main: %404*/
	/*   store i16 %446, i16* %438, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__404_411)) begin
		memory_controller_address_b = main_404_438_reg;
	end
	/* main: %404*/
	/*   store i16 %447, i16* %439, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__404_412)) begin
		memory_controller_address_b = main_404_439_reg;
	end
	/* main: %fft.exit*/
	/*   %463 = load i16* %462, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_fftexit_417)) begin
		memory_controller_address_b = main_fftexit_462;
	end
end
always @(*) begin
	memory_controller_write_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %1*/
	/*   %input_temp.0.input_temp.0. = load volatile i16* %input_temp, align 2*/
	if ((cur_state == LEGUP_F_main_BB__1_3)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %1*/
	/*   store i16 %input_temp.0.input_temp.0., i16* %2, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_5)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %1*/
	/*   store volatile i16 %4, i16* %input_temp, align 2*/
	if ((cur_state == LEGUP_F_main_BB__1_6)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %1*/
	/*   %input_temp.0.input_temp.0.1 = load volatile i16* %input_temp, align 2*/
	if ((cur_state == LEGUP_F_main_BB__1_7)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %1*/
	/*   store i16 %input_temp.0.input_temp.0.1, i16* %5, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_9)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   %11 = load i16* %7, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %6*/
	/*   store i16 %11, i16* %9, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_13)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   %12 = load i16* %8, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_14)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %6*/
	/*   store i16 %12, i16* %10, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_16)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   %14 = load i16* %13, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_17)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %6*/
	/*   store i16 %14, i16* %15, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_19)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   %17 = load i16* %16, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_20)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %6*/
	/*   store i16 %17, i16* %18, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_22)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   %20 = load i16* %19, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_23)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %6*/
	/*   store i16 %20, i16* %21, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_25)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   %23 = load i16* %22, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_26)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %6*/
	/*   store i16 %23, i16* %24, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_28)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   %26 = load i16* %25, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_29)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %6*/
	/*   store i16 %26, i16* %27, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_31)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   %29 = load i16* %28, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_32)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %6*/
	/*   store i16 %29, i16* %30, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_34)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   %32 = load i16* %31, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_35)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %6*/
	/*   store i16 %32, i16* %33, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_37)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   %35 = load i16* %34, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_38)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %6*/
	/*   store i16 %35, i16* %36, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_40)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   %38 = load i16* %37, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_41)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %6*/
	/*   store i16 %38, i16* %39, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_43)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   %41 = load i16* %40, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_44)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %6*/
	/*   store i16 %41, i16* %42, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_46)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   %44 = load i16* %43, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_47)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %6*/
	/*   store i16 %44, i16* %45, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_49)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   %47 = load i16* %46, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_50)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %6*/
	/*   store i16 %47, i16* %48, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_52)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   %50 = load i16* %49, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_53)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %6*/
	/*   store i16 %50, i16* %51, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_55)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   %53 = load i16* %52, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_56)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %6*/
	/*   store i16 %53, i16* %54, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_58)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   %56 = load i16* %55, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_59)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %6*/
	/*   store i16 %56, i16* %57, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_61)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   %59 = load i16* %58, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_62)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %6*/
	/*   store i16 %59, i16* %60, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_64)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   %62 = load i16* %61, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_65)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %6*/
	/*   store i16 %62, i16* %63, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_67)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   %65 = load i16* %64, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_68)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %6*/
	/*   store i16 %65, i16* %66, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_70)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   %68 = load i16* %67, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_71)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %6*/
	/*   store i16 %68, i16* %69, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_73)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   %71 = load i16* %70, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_74)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %6*/
	/*   store i16 %71, i16* %72, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_76)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   %74 = load i16* %73, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_77)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %6*/
	/*   store i16 %74, i16* %75, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_79)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   %77 = load i16* %76, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_80)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %6*/
	/*   store i16 %77, i16* %78, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_82)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   %80 = load i16* %79, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_83)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %6*/
	/*   store i16 %80, i16* %81, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_85)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   %83 = load i16* %82, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_86)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %6*/
	/*   store i16 %83, i16* %84, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_88)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   %86 = load i16* %85, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_89)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %6*/
	/*   store i16 %86, i16* %87, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_91)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   %89 = load i16* %88, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_92)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %6*/
	/*   store i16 %89, i16* %90, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_94)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   %92 = load i16* %91, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_95)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %6*/
	/*   store i16 %92, i16* %93, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_97)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   %95 = load i16* %94, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_98)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %6*/
	/*   store i16 %95, i16* %96, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_100)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   %98 = load i16* %97, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_101)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %6*/
	/*   store i16 %98, i16* %99, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_103)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   %101 = load i16* %100, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_104)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %6*/
	/*   store i16 %101, i16* %102, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_106)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   %104 = load i16* %103, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_107)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %6*/
	/*   store i16 %104, i16* %105, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_109)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   %107 = load i16* %106, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_110)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %6*/
	/*   store i16 %107, i16* %108, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_112)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   %110 = load i16* %109, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_113)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %6*/
	/*   store i16 %110, i16* %111, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_115)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   %113 = load i16* %112, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_116)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %6*/
	/*   store i16 %113, i16* %114, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_118)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   %116 = load i16* %115, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_119)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %6*/
	/*   store i16 %116, i16* %117, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_121)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   %119 = load i16* %118, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_122)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %6*/
	/*   store i16 %119, i16* %120, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_124)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   %122 = load i16* %121, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_125)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %6*/
	/*   store i16 %122, i16* %123, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_127)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   %125 = load i16* %124, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_128)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %6*/
	/*   store i16 %125, i16* %126, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_130)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   %128 = load i16* %127, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_131)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %6*/
	/*   store i16 %128, i16* %129, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_133)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   %131 = load i16* %130, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_134)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %6*/
	/*   store i16 %131, i16* %132, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_136)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   %134 = load i16* %133, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_137)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %6*/
	/*   store i16 %134, i16* %135, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_139)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   %137 = load i16* %136, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_140)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %6*/
	/*   store i16 %137, i16* %138, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_142)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   %140 = load i16* %139, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_143)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %6*/
	/*   store i16 %140, i16* %141, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_145)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   %143 = load i16* %142, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_146)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %6*/
	/*   store i16 %143, i16* %144, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_148)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   %146 = load i16* %145, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_149)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %6*/
	/*   store i16 %146, i16* %147, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_151)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   %149 = load i16* %148, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_152)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %6*/
	/*   store i16 %149, i16* %150, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_154)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   %152 = load i16* %151, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_155)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %6*/
	/*   store i16 %152, i16* %153, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_157)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   %155 = load i16* %154, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_158)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %6*/
	/*   store i16 %155, i16* %156, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_160)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   %158 = load i16* %157, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_161)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %6*/
	/*   store i16 %158, i16* %159, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_163)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   %161 = load i16* %160, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_164)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %6*/
	/*   store i16 %161, i16* %162, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_166)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   %164 = load i16* %163, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_167)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %6*/
	/*   store i16 %164, i16* %165, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_169)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   %167 = load i16* %166, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_170)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %6*/
	/*   store i16 %167, i16* %168, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_172)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   %170 = load i16* %169, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_173)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %6*/
	/*   store i16 %170, i16* %171, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_175)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   %173 = load i16* %172, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_176)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %6*/
	/*   store i16 %173, i16* %174, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_178)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   %176 = load i16* %175, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_179)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %6*/
	/*   store i16 %176, i16* %177, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_181)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   %179 = load i16* %178, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_182)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %6*/
	/*   store i16 %179, i16* %180, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_184)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   %182 = load i16* %181, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_185)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %6*/
	/*   store i16 %182, i16* %183, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_187)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   %185 = load i16* %184, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_188)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %6*/
	/*   store i16 %185, i16* %186, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_190)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   %188 = load i16* %187, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_191)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %6*/
	/*   store i16 %188, i16* %189, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_193)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   %191 = load i16* %190, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_194)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %6*/
	/*   store i16 %191, i16* %192, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_196)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   %194 = load i16* %193, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_197)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %6*/
	/*   store i16 %194, i16* %195, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_199)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   %197 = load i16* %196, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_200)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %6*/
	/*   store i16 %197, i16* %198, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_202)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   %200 = load i16* %199, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_203)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %6*/
	/*   store i16 %200, i16* %201, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_205)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   %203 = load i16* %202, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_206)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %6*/
	/*   store i16 %203, i16* %204, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_208)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   %206 = load i16* %205, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_209)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %6*/
	/*   store i16 %206, i16* %207, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_211)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   %209 = load i16* %208, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_212)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %6*/
	/*   store i16 %209, i16* %210, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_214)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   %212 = load i16* %211, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_215)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %6*/
	/*   store i16 %212, i16* %213, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_217)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   %215 = load i16* %214, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_218)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %6*/
	/*   store i16 %215, i16* %216, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_220)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   %218 = load i16* %217, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_221)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %6*/
	/*   store i16 %218, i16* %219, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_223)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   %221 = load i16* %220, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_224)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %6*/
	/*   store i16 %221, i16* %222, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_226)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   %224 = load i16* %223, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_227)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %6*/
	/*   store i16 %224, i16* %225, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_229)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   %227 = load i16* %226, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_230)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %6*/
	/*   store i16 %227, i16* %228, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_232)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   %230 = load i16* %229, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_233)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %6*/
	/*   store i16 %230, i16* %231, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_235)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   %233 = load i16* %232, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_236)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %6*/
	/*   store i16 %233, i16* %234, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_238)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   %236 = load i16* %235, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_239)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %6*/
	/*   store i16 %236, i16* %237, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_241)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   %239 = load i16* %238, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_242)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %6*/
	/*   store i16 %239, i16* %240, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_244)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   %242 = load i16* %241, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_245)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %6*/
	/*   store i16 %242, i16* %243, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_247)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   %245 = load i16* %244, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_248)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %6*/
	/*   store i16 %245, i16* %246, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_250)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   %248 = load i16* %247, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_251)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %6*/
	/*   store i16 %248, i16* %249, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_253)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   %251 = load i16* %250, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_254)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %6*/
	/*   store i16 %251, i16* %252, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_256)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   %254 = load i16* %253, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_257)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %6*/
	/*   store i16 %254, i16* %255, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_259)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   %257 = load i16* %256, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_260)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %6*/
	/*   store i16 %257, i16* %258, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_262)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   %260 = load i16* %259, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_263)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %6*/
	/*   store i16 %260, i16* %261, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_265)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   %263 = load i16* %262, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_266)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %6*/
	/*   store i16 %263, i16* %264, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_268)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   %266 = load i16* %265, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_269)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %6*/
	/*   store i16 %266, i16* %267, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_271)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   %269 = load i16* %268, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_272)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %6*/
	/*   store i16 %269, i16* %270, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_274)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   %272 = load i16* %271, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_275)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %6*/
	/*   store i16 %272, i16* %273, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_277)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   %275 = load i16* %274, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_278)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %6*/
	/*   store i16 %275, i16* %276, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_280)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   %278 = load i16* %277, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_281)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %6*/
	/*   store i16 %278, i16* %279, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_283)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   %281 = load i16* %280, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_284)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %6*/
	/*   store i16 %281, i16* %282, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_286)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   %284 = load i16* %283, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_287)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %6*/
	/*   store i16 %284, i16* %285, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_289)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   %287 = load i16* %286, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_290)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %6*/
	/*   store i16 %287, i16* %288, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_292)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   %290 = load i16* %289, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_293)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %6*/
	/*   store i16 %290, i16* %291, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_295)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   %293 = load i16* %292, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_296)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %6*/
	/*   store i16 %293, i16* %294, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_298)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   %296 = load i16* %295, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_299)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %6*/
	/*   store i16 %296, i16* %297, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_301)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   %299 = load i16* %298, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_302)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %6*/
	/*   store i16 %299, i16* %300, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_304)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   %302 = load i16* %301, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_305)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %6*/
	/*   store i16 %302, i16* %303, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_307)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   %305 = load i16* %304, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_308)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %6*/
	/*   store i16 %305, i16* %306, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_310)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   %308 = load i16* %307, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_311)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %6*/
	/*   store i16 %308, i16* %309, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_313)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   %311 = load i16* %310, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_314)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %6*/
	/*   store i16 %311, i16* %312, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_316)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   %314 = load i16* %313, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_317)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %6*/
	/*   store i16 %314, i16* %315, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_319)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   %317 = load i16* %316, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_320)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %6*/
	/*   store i16 %317, i16* %318, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_322)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   %320 = load i16* %319, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_323)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %6*/
	/*   store i16 %320, i16* %321, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_325)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   %323 = load i16* %322, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_326)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %6*/
	/*   store i16 %323, i16* %324, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_328)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   %326 = load i16* %325, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_329)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %6*/
	/*   store i16 %326, i16* %327, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_331)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   %329 = load i16* %328, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_332)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %6*/
	/*   store i16 %329, i16* %330, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_334)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   %332 = load i16* %331, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_335)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %6*/
	/*   store i16 %332, i16* %333, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_337)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   %335 = load i16* %334, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_338)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %6*/
	/*   store i16 %335, i16* %336, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_340)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   %338 = load i16* %337, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_341)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %6*/
	/*   store i16 %338, i16* %339, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_343)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   %341 = load i16* %340, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_344)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %6*/
	/*   store i16 %341, i16* %342, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_346)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   %344 = load i16* %343, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_347)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %6*/
	/*   store i16 %344, i16* %345, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_349)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   %347 = load i16* %346, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_350)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %6*/
	/*   store i16 %347, i16* %348, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_352)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   %350 = load i16* %349, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_353)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %6*/
	/*   store i16 %350, i16* %351, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_355)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   %353 = load i16* %352, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_356)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %6*/
	/*   store i16 %353, i16* %354, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_358)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   %356 = load i16* %355, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_359)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %6*/
	/*   store i16 %356, i16* %357, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_361)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   %359 = load i16* %358, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_362)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %6*/
	/*   store i16 %359, i16* %360, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_364)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   %362 = load i16* %361, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_365)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %6*/
	/*   store i16 %362, i16* %363, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_367)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   %365 = load i16* %364, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_368)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %6*/
	/*   store i16 %365, i16* %366, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_370)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   %368 = load i16* %367, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_371)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %6*/
	/*   store i16 %368, i16* %369, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_373)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   %371 = load i16* %370, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_374)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %6*/
	/*   store i16 %371, i16* %372, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_376)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   %374 = load i16* %373, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_377)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %6*/
	/*   store i16 %374, i16* %375, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_379)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   %377 = load i16* %376, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_380)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %6*/
	/*   store i16 %377, i16* %378, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_382)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   %380 = load i16* %379, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_383)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %6*/
	/*   store i16 %380, i16* %381, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_385)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   %383 = load i16* %382, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_386)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %6*/
	/*   store i16 %383, i16* %384, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_388)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   %386 = load i16* %385, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_389)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %6*/
	/*   store i16 %386, i16* %387, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_391)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   %389 = load i16* %388, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_392)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %6*/
	/*   store i16 %389, i16* %390, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_394)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %.lr.ph.i*/
	/*   %401 = load i16* %400, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrphi_400)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %.lr.ph.i*/
	/*   %399 = load i16* %398, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrphi_401)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %404*/
	/*   %418 = load i16* %417, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__404_406)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %404*/
	/*   %441 = load i16* %438, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__404_407)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %404*/
	/*   store i16 %444, i16* %408, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__404_409)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %404*/
	/*   store i16 %445, i16* %417, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__404_410)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %404*/
	/*   store i16 %446, i16* %438, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__404_411)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %404*/
	/*   store i16 %447, i16* %439, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__404_412)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %fft.exit*/
	/*   %463 = load i16* %462, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_fftexit_417)) begin
		memory_controller_write_enable_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_b = 1'd0;
	end
	/* main: %1*/
	/*   store i16 %input_temp.0.input_temp.0., i16* %2, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_5)) begin
		memory_controller_in_b = main_1_input_temp0input_temp0;
	end
	/* main: %1*/
	/*   store volatile i16 %4, i16* %input_temp, align 2*/
	if ((cur_state == LEGUP_F_main_BB__1_6)) begin
		memory_controller_in_b = main_1_4_reg;
	end
	/* main: %1*/
	/*   store i16 %input_temp.0.input_temp.0.1, i16* %5, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_9)) begin
		memory_controller_in_b = main_1_input_temp0input_temp01;
	end
	/* main: %6*/
	/*   store i16 %11, i16* %9, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_13)) begin
		memory_controller_in_b = main_6_11;
	end
	/* main: %6*/
	/*   store i16 %12, i16* %10, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_16)) begin
		memory_controller_in_b = main_6_12;
	end
	/* main: %6*/
	/*   store i16 %14, i16* %15, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_19)) begin
		memory_controller_in_b = main_6_14;
	end
	/* main: %6*/
	/*   store i16 %17, i16* %18, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_22)) begin
		memory_controller_in_b = main_6_17;
	end
	/* main: %6*/
	/*   store i16 %20, i16* %21, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_25)) begin
		memory_controller_in_b = main_6_20;
	end
	/* main: %6*/
	/*   store i16 %23, i16* %24, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_28)) begin
		memory_controller_in_b = main_6_23;
	end
	/* main: %6*/
	/*   store i16 %26, i16* %27, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_31)) begin
		memory_controller_in_b = main_6_26;
	end
	/* main: %6*/
	/*   store i16 %29, i16* %30, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_34)) begin
		memory_controller_in_b = main_6_29;
	end
	/* main: %6*/
	/*   store i16 %32, i16* %33, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_37)) begin
		memory_controller_in_b = main_6_32;
	end
	/* main: %6*/
	/*   store i16 %35, i16* %36, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_40)) begin
		memory_controller_in_b = main_6_35;
	end
	/* main: %6*/
	/*   store i16 %38, i16* %39, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_43)) begin
		memory_controller_in_b = main_6_38;
	end
	/* main: %6*/
	/*   store i16 %41, i16* %42, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_46)) begin
		memory_controller_in_b = main_6_41;
	end
	/* main: %6*/
	/*   store i16 %44, i16* %45, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_49)) begin
		memory_controller_in_b = main_6_44;
	end
	/* main: %6*/
	/*   store i16 %47, i16* %48, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_52)) begin
		memory_controller_in_b = main_6_47;
	end
	/* main: %6*/
	/*   store i16 %50, i16* %51, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_55)) begin
		memory_controller_in_b = main_6_50;
	end
	/* main: %6*/
	/*   store i16 %53, i16* %54, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_58)) begin
		memory_controller_in_b = main_6_53;
	end
	/* main: %6*/
	/*   store i16 %56, i16* %57, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_61)) begin
		memory_controller_in_b = main_6_56;
	end
	/* main: %6*/
	/*   store i16 %59, i16* %60, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_64)) begin
		memory_controller_in_b = main_6_59;
	end
	/* main: %6*/
	/*   store i16 %62, i16* %63, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_67)) begin
		memory_controller_in_b = main_6_62;
	end
	/* main: %6*/
	/*   store i16 %65, i16* %66, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_70)) begin
		memory_controller_in_b = main_6_65;
	end
	/* main: %6*/
	/*   store i16 %68, i16* %69, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_73)) begin
		memory_controller_in_b = main_6_68;
	end
	/* main: %6*/
	/*   store i16 %71, i16* %72, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_76)) begin
		memory_controller_in_b = main_6_71;
	end
	/* main: %6*/
	/*   store i16 %74, i16* %75, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_79)) begin
		memory_controller_in_b = main_6_74;
	end
	/* main: %6*/
	/*   store i16 %77, i16* %78, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_82)) begin
		memory_controller_in_b = main_6_77;
	end
	/* main: %6*/
	/*   store i16 %80, i16* %81, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_85)) begin
		memory_controller_in_b = main_6_80;
	end
	/* main: %6*/
	/*   store i16 %83, i16* %84, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_88)) begin
		memory_controller_in_b = main_6_83;
	end
	/* main: %6*/
	/*   store i16 %86, i16* %87, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_91)) begin
		memory_controller_in_b = main_6_86;
	end
	/* main: %6*/
	/*   store i16 %89, i16* %90, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_94)) begin
		memory_controller_in_b = main_6_89;
	end
	/* main: %6*/
	/*   store i16 %92, i16* %93, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_97)) begin
		memory_controller_in_b = main_6_92;
	end
	/* main: %6*/
	/*   store i16 %95, i16* %96, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_100)) begin
		memory_controller_in_b = main_6_95;
	end
	/* main: %6*/
	/*   store i16 %98, i16* %99, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_103)) begin
		memory_controller_in_b = main_6_98;
	end
	/* main: %6*/
	/*   store i16 %101, i16* %102, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_106)) begin
		memory_controller_in_b = main_6_101;
	end
	/* main: %6*/
	/*   store i16 %104, i16* %105, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_109)) begin
		memory_controller_in_b = main_6_104;
	end
	/* main: %6*/
	/*   store i16 %107, i16* %108, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_112)) begin
		memory_controller_in_b = main_6_107;
	end
	/* main: %6*/
	/*   store i16 %110, i16* %111, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_115)) begin
		memory_controller_in_b = main_6_110;
	end
	/* main: %6*/
	/*   store i16 %113, i16* %114, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_118)) begin
		memory_controller_in_b = main_6_113;
	end
	/* main: %6*/
	/*   store i16 %116, i16* %117, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_121)) begin
		memory_controller_in_b = main_6_116;
	end
	/* main: %6*/
	/*   store i16 %119, i16* %120, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_124)) begin
		memory_controller_in_b = main_6_119;
	end
	/* main: %6*/
	/*   store i16 %122, i16* %123, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_127)) begin
		memory_controller_in_b = main_6_122;
	end
	/* main: %6*/
	/*   store i16 %125, i16* %126, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_130)) begin
		memory_controller_in_b = main_6_125;
	end
	/* main: %6*/
	/*   store i16 %128, i16* %129, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_133)) begin
		memory_controller_in_b = main_6_128;
	end
	/* main: %6*/
	/*   store i16 %131, i16* %132, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_136)) begin
		memory_controller_in_b = main_6_131;
	end
	/* main: %6*/
	/*   store i16 %134, i16* %135, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_139)) begin
		memory_controller_in_b = main_6_134;
	end
	/* main: %6*/
	/*   store i16 %137, i16* %138, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_142)) begin
		memory_controller_in_b = main_6_137;
	end
	/* main: %6*/
	/*   store i16 %140, i16* %141, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_145)) begin
		memory_controller_in_b = main_6_140;
	end
	/* main: %6*/
	/*   store i16 %143, i16* %144, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_148)) begin
		memory_controller_in_b = main_6_143;
	end
	/* main: %6*/
	/*   store i16 %146, i16* %147, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_151)) begin
		memory_controller_in_b = main_6_146;
	end
	/* main: %6*/
	/*   store i16 %149, i16* %150, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_154)) begin
		memory_controller_in_b = main_6_149;
	end
	/* main: %6*/
	/*   store i16 %152, i16* %153, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_157)) begin
		memory_controller_in_b = main_6_152;
	end
	/* main: %6*/
	/*   store i16 %155, i16* %156, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_160)) begin
		memory_controller_in_b = main_6_155;
	end
	/* main: %6*/
	/*   store i16 %158, i16* %159, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_163)) begin
		memory_controller_in_b = main_6_158;
	end
	/* main: %6*/
	/*   store i16 %161, i16* %162, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_166)) begin
		memory_controller_in_b = main_6_161;
	end
	/* main: %6*/
	/*   store i16 %164, i16* %165, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_169)) begin
		memory_controller_in_b = main_6_164;
	end
	/* main: %6*/
	/*   store i16 %167, i16* %168, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_172)) begin
		memory_controller_in_b = main_6_167;
	end
	/* main: %6*/
	/*   store i16 %170, i16* %171, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_175)) begin
		memory_controller_in_b = main_6_170;
	end
	/* main: %6*/
	/*   store i16 %173, i16* %174, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_178)) begin
		memory_controller_in_b = main_6_173;
	end
	/* main: %6*/
	/*   store i16 %176, i16* %177, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_181)) begin
		memory_controller_in_b = main_6_176;
	end
	/* main: %6*/
	/*   store i16 %179, i16* %180, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_184)) begin
		memory_controller_in_b = main_6_179;
	end
	/* main: %6*/
	/*   store i16 %182, i16* %183, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_187)) begin
		memory_controller_in_b = main_6_182;
	end
	/* main: %6*/
	/*   store i16 %185, i16* %186, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_190)) begin
		memory_controller_in_b = main_6_185;
	end
	/* main: %6*/
	/*   store i16 %188, i16* %189, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_193)) begin
		memory_controller_in_b = main_6_188;
	end
	/* main: %6*/
	/*   store i16 %191, i16* %192, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_196)) begin
		memory_controller_in_b = main_6_191;
	end
	/* main: %6*/
	/*   store i16 %194, i16* %195, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_199)) begin
		memory_controller_in_b = main_6_194;
	end
	/* main: %6*/
	/*   store i16 %197, i16* %198, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_202)) begin
		memory_controller_in_b = main_6_197;
	end
	/* main: %6*/
	/*   store i16 %200, i16* %201, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_205)) begin
		memory_controller_in_b = main_6_200;
	end
	/* main: %6*/
	/*   store i16 %203, i16* %204, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_208)) begin
		memory_controller_in_b = main_6_203;
	end
	/* main: %6*/
	/*   store i16 %206, i16* %207, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_211)) begin
		memory_controller_in_b = main_6_206;
	end
	/* main: %6*/
	/*   store i16 %209, i16* %210, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_214)) begin
		memory_controller_in_b = main_6_209;
	end
	/* main: %6*/
	/*   store i16 %212, i16* %213, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_217)) begin
		memory_controller_in_b = main_6_212;
	end
	/* main: %6*/
	/*   store i16 %215, i16* %216, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_220)) begin
		memory_controller_in_b = main_6_215;
	end
	/* main: %6*/
	/*   store i16 %218, i16* %219, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_223)) begin
		memory_controller_in_b = main_6_218;
	end
	/* main: %6*/
	/*   store i16 %221, i16* %222, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_226)) begin
		memory_controller_in_b = main_6_221;
	end
	/* main: %6*/
	/*   store i16 %224, i16* %225, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_229)) begin
		memory_controller_in_b = main_6_224;
	end
	/* main: %6*/
	/*   store i16 %227, i16* %228, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_232)) begin
		memory_controller_in_b = main_6_227;
	end
	/* main: %6*/
	/*   store i16 %230, i16* %231, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_235)) begin
		memory_controller_in_b = main_6_230;
	end
	/* main: %6*/
	/*   store i16 %233, i16* %234, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_238)) begin
		memory_controller_in_b = main_6_233;
	end
	/* main: %6*/
	/*   store i16 %236, i16* %237, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_241)) begin
		memory_controller_in_b = main_6_236;
	end
	/* main: %6*/
	/*   store i16 %239, i16* %240, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_244)) begin
		memory_controller_in_b = main_6_239;
	end
	/* main: %6*/
	/*   store i16 %242, i16* %243, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_247)) begin
		memory_controller_in_b = main_6_242;
	end
	/* main: %6*/
	/*   store i16 %245, i16* %246, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_250)) begin
		memory_controller_in_b = main_6_245;
	end
	/* main: %6*/
	/*   store i16 %248, i16* %249, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_253)) begin
		memory_controller_in_b = main_6_248;
	end
	/* main: %6*/
	/*   store i16 %251, i16* %252, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_256)) begin
		memory_controller_in_b = main_6_251;
	end
	/* main: %6*/
	/*   store i16 %254, i16* %255, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_259)) begin
		memory_controller_in_b = main_6_254;
	end
	/* main: %6*/
	/*   store i16 %257, i16* %258, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_262)) begin
		memory_controller_in_b = main_6_257;
	end
	/* main: %6*/
	/*   store i16 %260, i16* %261, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_265)) begin
		memory_controller_in_b = main_6_260;
	end
	/* main: %6*/
	/*   store i16 %263, i16* %264, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_268)) begin
		memory_controller_in_b = main_6_263;
	end
	/* main: %6*/
	/*   store i16 %266, i16* %267, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_271)) begin
		memory_controller_in_b = main_6_266;
	end
	/* main: %6*/
	/*   store i16 %269, i16* %270, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_274)) begin
		memory_controller_in_b = main_6_269;
	end
	/* main: %6*/
	/*   store i16 %272, i16* %273, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_277)) begin
		memory_controller_in_b = main_6_272;
	end
	/* main: %6*/
	/*   store i16 %275, i16* %276, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_280)) begin
		memory_controller_in_b = main_6_275;
	end
	/* main: %6*/
	/*   store i16 %278, i16* %279, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_283)) begin
		memory_controller_in_b = main_6_278;
	end
	/* main: %6*/
	/*   store i16 %281, i16* %282, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_286)) begin
		memory_controller_in_b = main_6_281;
	end
	/* main: %6*/
	/*   store i16 %284, i16* %285, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_289)) begin
		memory_controller_in_b = main_6_284;
	end
	/* main: %6*/
	/*   store i16 %287, i16* %288, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_292)) begin
		memory_controller_in_b = main_6_287;
	end
	/* main: %6*/
	/*   store i16 %290, i16* %291, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_295)) begin
		memory_controller_in_b = main_6_290;
	end
	/* main: %6*/
	/*   store i16 %293, i16* %294, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_298)) begin
		memory_controller_in_b = main_6_293;
	end
	/* main: %6*/
	/*   store i16 %296, i16* %297, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_301)) begin
		memory_controller_in_b = main_6_296;
	end
	/* main: %6*/
	/*   store i16 %299, i16* %300, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_304)) begin
		memory_controller_in_b = main_6_299;
	end
	/* main: %6*/
	/*   store i16 %302, i16* %303, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_307)) begin
		memory_controller_in_b = main_6_302;
	end
	/* main: %6*/
	/*   store i16 %305, i16* %306, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_310)) begin
		memory_controller_in_b = main_6_305;
	end
	/* main: %6*/
	/*   store i16 %308, i16* %309, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_313)) begin
		memory_controller_in_b = main_6_308;
	end
	/* main: %6*/
	/*   store i16 %311, i16* %312, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_316)) begin
		memory_controller_in_b = main_6_311;
	end
	/* main: %6*/
	/*   store i16 %314, i16* %315, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_319)) begin
		memory_controller_in_b = main_6_314;
	end
	/* main: %6*/
	/*   store i16 %317, i16* %318, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_322)) begin
		memory_controller_in_b = main_6_317;
	end
	/* main: %6*/
	/*   store i16 %320, i16* %321, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_325)) begin
		memory_controller_in_b = main_6_320;
	end
	/* main: %6*/
	/*   store i16 %323, i16* %324, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_328)) begin
		memory_controller_in_b = main_6_323;
	end
	/* main: %6*/
	/*   store i16 %326, i16* %327, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_331)) begin
		memory_controller_in_b = main_6_326;
	end
	/* main: %6*/
	/*   store i16 %329, i16* %330, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_334)) begin
		memory_controller_in_b = main_6_329;
	end
	/* main: %6*/
	/*   store i16 %332, i16* %333, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_337)) begin
		memory_controller_in_b = main_6_332;
	end
	/* main: %6*/
	/*   store i16 %335, i16* %336, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_340)) begin
		memory_controller_in_b = main_6_335;
	end
	/* main: %6*/
	/*   store i16 %338, i16* %339, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_343)) begin
		memory_controller_in_b = main_6_338;
	end
	/* main: %6*/
	/*   store i16 %341, i16* %342, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_346)) begin
		memory_controller_in_b = main_6_341;
	end
	/* main: %6*/
	/*   store i16 %344, i16* %345, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_349)) begin
		memory_controller_in_b = main_6_344;
	end
	/* main: %6*/
	/*   store i16 %347, i16* %348, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_352)) begin
		memory_controller_in_b = main_6_347;
	end
	/* main: %6*/
	/*   store i16 %350, i16* %351, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_355)) begin
		memory_controller_in_b = main_6_350;
	end
	/* main: %6*/
	/*   store i16 %353, i16* %354, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_358)) begin
		memory_controller_in_b = main_6_353;
	end
	/* main: %6*/
	/*   store i16 %356, i16* %357, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_361)) begin
		memory_controller_in_b = main_6_356;
	end
	/* main: %6*/
	/*   store i16 %359, i16* %360, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_364)) begin
		memory_controller_in_b = main_6_359;
	end
	/* main: %6*/
	/*   store i16 %362, i16* %363, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_367)) begin
		memory_controller_in_b = main_6_362;
	end
	/* main: %6*/
	/*   store i16 %365, i16* %366, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_370)) begin
		memory_controller_in_b = main_6_365;
	end
	/* main: %6*/
	/*   store i16 %368, i16* %369, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_373)) begin
		memory_controller_in_b = main_6_368;
	end
	/* main: %6*/
	/*   store i16 %371, i16* %372, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_376)) begin
		memory_controller_in_b = main_6_371;
	end
	/* main: %6*/
	/*   store i16 %374, i16* %375, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_379)) begin
		memory_controller_in_b = main_6_374;
	end
	/* main: %6*/
	/*   store i16 %377, i16* %378, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_382)) begin
		memory_controller_in_b = main_6_377;
	end
	/* main: %6*/
	/*   store i16 %380, i16* %381, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_385)) begin
		memory_controller_in_b = main_6_380;
	end
	/* main: %6*/
	/*   store i16 %383, i16* %384, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_388)) begin
		memory_controller_in_b = main_6_383;
	end
	/* main: %6*/
	/*   store i16 %386, i16* %387, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_391)) begin
		memory_controller_in_b = main_6_386;
	end
	/* main: %6*/
	/*   store i16 %389, i16* %390, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_394)) begin
		memory_controller_in_b = main_6_389;
	end
	/* main: %404*/
	/*   store i16 %444, i16* %408, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__404_409)) begin
		memory_controller_in_b = main_404_444;
	end
	/* main: %404*/
	/*   store i16 %445, i16* %417, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__404_410)) begin
		memory_controller_in_b = main_404_445_reg;
	end
	/* main: %404*/
	/*   store i16 %446, i16* %438, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__404_411)) begin
		memory_controller_in_b = main_404_446_reg;
	end
	/* main: %404*/
	/*   store i16 %447, i16* %439, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__404_412)) begin
		memory_controller_in_b = main_404_447_reg;
	end
end
always @(*) begin
	memory_controller_size_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_b = 1'd0;
	end
	/* main: %1*/
	/*   %input_temp.0.input_temp.0. = load volatile i16* %input_temp, align 2*/
	if ((cur_state == LEGUP_F_main_BB__1_3)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %1*/
	/*   store i16 %input_temp.0.input_temp.0., i16* %2, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_5)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %1*/
	/*   store volatile i16 %4, i16* %input_temp, align 2*/
	if ((cur_state == LEGUP_F_main_BB__1_6)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %1*/
	/*   %input_temp.0.input_temp.0.1 = load volatile i16* %input_temp, align 2*/
	if ((cur_state == LEGUP_F_main_BB__1_7)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %1*/
	/*   store i16 %input_temp.0.input_temp.0.1, i16* %5, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_9)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %6*/
	/*   %11 = load i16* %7, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_11)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %6*/
	/*   store i16 %11, i16* %9, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_13)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %6*/
	/*   %12 = load i16* %8, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_14)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %6*/
	/*   store i16 %12, i16* %10, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_16)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %6*/
	/*   %14 = load i16* %13, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_17)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %6*/
	/*   store i16 %14, i16* %15, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_19)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %6*/
	/*   %17 = load i16* %16, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_20)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %6*/
	/*   store i16 %17, i16* %18, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_22)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %6*/
	/*   %20 = load i16* %19, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_23)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %6*/
	/*   store i16 %20, i16* %21, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_25)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %6*/
	/*   %23 = load i16* %22, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_26)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %6*/
	/*   store i16 %23, i16* %24, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_28)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %6*/
	/*   %26 = load i16* %25, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_29)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %6*/
	/*   store i16 %26, i16* %27, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_31)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %6*/
	/*   %29 = load i16* %28, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_32)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %6*/
	/*   store i16 %29, i16* %30, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_34)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %6*/
	/*   %32 = load i16* %31, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_35)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %6*/
	/*   store i16 %32, i16* %33, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_37)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %6*/
	/*   %35 = load i16* %34, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_38)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %6*/
	/*   store i16 %35, i16* %36, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_40)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %6*/
	/*   %38 = load i16* %37, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_41)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %6*/
	/*   store i16 %38, i16* %39, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_43)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %6*/
	/*   %41 = load i16* %40, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_44)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %6*/
	/*   store i16 %41, i16* %42, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_46)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %6*/
	/*   %44 = load i16* %43, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_47)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %6*/
	/*   store i16 %44, i16* %45, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_49)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %6*/
	/*   %47 = load i16* %46, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_50)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %6*/
	/*   store i16 %47, i16* %48, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_52)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %6*/
	/*   %50 = load i16* %49, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_53)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %6*/
	/*   store i16 %50, i16* %51, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_55)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %6*/
	/*   %53 = load i16* %52, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_56)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %6*/
	/*   store i16 %53, i16* %54, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_58)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %6*/
	/*   %56 = load i16* %55, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_59)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %6*/
	/*   store i16 %56, i16* %57, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_61)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %6*/
	/*   %59 = load i16* %58, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_62)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %6*/
	/*   store i16 %59, i16* %60, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_64)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %6*/
	/*   %62 = load i16* %61, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_65)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %6*/
	/*   store i16 %62, i16* %63, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_67)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %6*/
	/*   %65 = load i16* %64, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_68)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %6*/
	/*   store i16 %65, i16* %66, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_70)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %6*/
	/*   %68 = load i16* %67, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_71)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %6*/
	/*   store i16 %68, i16* %69, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_73)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %6*/
	/*   %71 = load i16* %70, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_74)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %6*/
	/*   store i16 %71, i16* %72, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_76)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %6*/
	/*   %74 = load i16* %73, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_77)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %6*/
	/*   store i16 %74, i16* %75, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_79)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %6*/
	/*   %77 = load i16* %76, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_80)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %6*/
	/*   store i16 %77, i16* %78, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_82)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %6*/
	/*   %80 = load i16* %79, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_83)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %6*/
	/*   store i16 %80, i16* %81, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_85)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %6*/
	/*   %83 = load i16* %82, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_86)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %6*/
	/*   store i16 %83, i16* %84, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_88)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %6*/
	/*   %86 = load i16* %85, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_89)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %6*/
	/*   store i16 %86, i16* %87, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_91)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %6*/
	/*   %89 = load i16* %88, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_92)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %6*/
	/*   store i16 %89, i16* %90, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_94)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %6*/
	/*   %92 = load i16* %91, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_95)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %6*/
	/*   store i16 %92, i16* %93, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_97)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %6*/
	/*   %95 = load i16* %94, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_98)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %6*/
	/*   store i16 %95, i16* %96, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_100)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %6*/
	/*   %98 = load i16* %97, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_101)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %6*/
	/*   store i16 %98, i16* %99, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_103)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %6*/
	/*   %101 = load i16* %100, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_104)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %6*/
	/*   store i16 %101, i16* %102, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_106)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %6*/
	/*   %104 = load i16* %103, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_107)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %6*/
	/*   store i16 %104, i16* %105, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_109)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %6*/
	/*   %107 = load i16* %106, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_110)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %6*/
	/*   store i16 %107, i16* %108, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_112)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %6*/
	/*   %110 = load i16* %109, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_113)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %6*/
	/*   store i16 %110, i16* %111, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_115)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %6*/
	/*   %113 = load i16* %112, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_116)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %6*/
	/*   store i16 %113, i16* %114, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_118)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %6*/
	/*   %116 = load i16* %115, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_119)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %6*/
	/*   store i16 %116, i16* %117, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_121)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %6*/
	/*   %119 = load i16* %118, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_122)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %6*/
	/*   store i16 %119, i16* %120, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_124)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %6*/
	/*   %122 = load i16* %121, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_125)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %6*/
	/*   store i16 %122, i16* %123, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_127)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %6*/
	/*   %125 = load i16* %124, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_128)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %6*/
	/*   store i16 %125, i16* %126, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_130)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %6*/
	/*   %128 = load i16* %127, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_131)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %6*/
	/*   store i16 %128, i16* %129, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_133)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %6*/
	/*   %131 = load i16* %130, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_134)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %6*/
	/*   store i16 %131, i16* %132, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_136)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %6*/
	/*   %134 = load i16* %133, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_137)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %6*/
	/*   store i16 %134, i16* %135, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_139)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %6*/
	/*   %137 = load i16* %136, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_140)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %6*/
	/*   store i16 %137, i16* %138, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_142)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %6*/
	/*   %140 = load i16* %139, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_143)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %6*/
	/*   store i16 %140, i16* %141, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_145)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %6*/
	/*   %143 = load i16* %142, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_146)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %6*/
	/*   store i16 %143, i16* %144, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_148)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %6*/
	/*   %146 = load i16* %145, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_149)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %6*/
	/*   store i16 %146, i16* %147, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_151)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %6*/
	/*   %149 = load i16* %148, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_152)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %6*/
	/*   store i16 %149, i16* %150, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_154)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %6*/
	/*   %152 = load i16* %151, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_155)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %6*/
	/*   store i16 %152, i16* %153, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_157)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %6*/
	/*   %155 = load i16* %154, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_158)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %6*/
	/*   store i16 %155, i16* %156, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_160)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %6*/
	/*   %158 = load i16* %157, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_161)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %6*/
	/*   store i16 %158, i16* %159, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_163)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %6*/
	/*   %161 = load i16* %160, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_164)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %6*/
	/*   store i16 %161, i16* %162, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_166)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %6*/
	/*   %164 = load i16* %163, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_167)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %6*/
	/*   store i16 %164, i16* %165, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_169)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %6*/
	/*   %167 = load i16* %166, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_170)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %6*/
	/*   store i16 %167, i16* %168, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_172)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %6*/
	/*   %170 = load i16* %169, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_173)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %6*/
	/*   store i16 %170, i16* %171, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_175)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %6*/
	/*   %173 = load i16* %172, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_176)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %6*/
	/*   store i16 %173, i16* %174, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_178)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %6*/
	/*   %176 = load i16* %175, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_179)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %6*/
	/*   store i16 %176, i16* %177, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_181)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %6*/
	/*   %179 = load i16* %178, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_182)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %6*/
	/*   store i16 %179, i16* %180, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_184)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %6*/
	/*   %182 = load i16* %181, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_185)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %6*/
	/*   store i16 %182, i16* %183, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_187)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %6*/
	/*   %185 = load i16* %184, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_188)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %6*/
	/*   store i16 %185, i16* %186, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_190)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %6*/
	/*   %188 = load i16* %187, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_191)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %6*/
	/*   store i16 %188, i16* %189, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_193)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %6*/
	/*   %191 = load i16* %190, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_194)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %6*/
	/*   store i16 %191, i16* %192, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_196)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %6*/
	/*   %194 = load i16* %193, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_197)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %6*/
	/*   store i16 %194, i16* %195, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_199)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %6*/
	/*   %197 = load i16* %196, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_200)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %6*/
	/*   store i16 %197, i16* %198, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_202)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %6*/
	/*   %200 = load i16* %199, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_203)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %6*/
	/*   store i16 %200, i16* %201, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_205)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %6*/
	/*   %203 = load i16* %202, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_206)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %6*/
	/*   store i16 %203, i16* %204, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_208)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %6*/
	/*   %206 = load i16* %205, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_209)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %6*/
	/*   store i16 %206, i16* %207, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_211)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %6*/
	/*   %209 = load i16* %208, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_212)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %6*/
	/*   store i16 %209, i16* %210, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_214)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %6*/
	/*   %212 = load i16* %211, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_215)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %6*/
	/*   store i16 %212, i16* %213, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_217)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %6*/
	/*   %215 = load i16* %214, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_218)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %6*/
	/*   store i16 %215, i16* %216, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_220)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %6*/
	/*   %218 = load i16* %217, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_221)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %6*/
	/*   store i16 %218, i16* %219, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_223)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %6*/
	/*   %221 = load i16* %220, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_224)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %6*/
	/*   store i16 %221, i16* %222, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_226)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %6*/
	/*   %224 = load i16* %223, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_227)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %6*/
	/*   store i16 %224, i16* %225, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_229)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %6*/
	/*   %227 = load i16* %226, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_230)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %6*/
	/*   store i16 %227, i16* %228, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_232)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %6*/
	/*   %230 = load i16* %229, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_233)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %6*/
	/*   store i16 %230, i16* %231, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_235)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %6*/
	/*   %233 = load i16* %232, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_236)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %6*/
	/*   store i16 %233, i16* %234, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_238)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %6*/
	/*   %236 = load i16* %235, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_239)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %6*/
	/*   store i16 %236, i16* %237, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_241)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %6*/
	/*   %239 = load i16* %238, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_242)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %6*/
	/*   store i16 %239, i16* %240, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_244)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %6*/
	/*   %242 = load i16* %241, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_245)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %6*/
	/*   store i16 %242, i16* %243, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_247)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %6*/
	/*   %245 = load i16* %244, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_248)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %6*/
	/*   store i16 %245, i16* %246, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_250)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %6*/
	/*   %248 = load i16* %247, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_251)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %6*/
	/*   store i16 %248, i16* %249, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_253)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %6*/
	/*   %251 = load i16* %250, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_254)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %6*/
	/*   store i16 %251, i16* %252, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_256)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %6*/
	/*   %254 = load i16* %253, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_257)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %6*/
	/*   store i16 %254, i16* %255, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_259)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %6*/
	/*   %257 = load i16* %256, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_260)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %6*/
	/*   store i16 %257, i16* %258, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_262)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %6*/
	/*   %260 = load i16* %259, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_263)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %6*/
	/*   store i16 %260, i16* %261, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_265)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %6*/
	/*   %263 = load i16* %262, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_266)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %6*/
	/*   store i16 %263, i16* %264, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_268)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %6*/
	/*   %266 = load i16* %265, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_269)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %6*/
	/*   store i16 %266, i16* %267, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_271)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %6*/
	/*   %269 = load i16* %268, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_272)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %6*/
	/*   store i16 %269, i16* %270, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_274)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %6*/
	/*   %272 = load i16* %271, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_275)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %6*/
	/*   store i16 %272, i16* %273, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_277)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %6*/
	/*   %275 = load i16* %274, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_278)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %6*/
	/*   store i16 %275, i16* %276, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_280)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %6*/
	/*   %278 = load i16* %277, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_281)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %6*/
	/*   store i16 %278, i16* %279, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_283)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %6*/
	/*   %281 = load i16* %280, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_284)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %6*/
	/*   store i16 %281, i16* %282, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_286)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %6*/
	/*   %284 = load i16* %283, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_287)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %6*/
	/*   store i16 %284, i16* %285, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_289)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %6*/
	/*   %287 = load i16* %286, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_290)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %6*/
	/*   store i16 %287, i16* %288, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_292)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %6*/
	/*   %290 = load i16* %289, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_293)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %6*/
	/*   store i16 %290, i16* %291, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_295)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %6*/
	/*   %293 = load i16* %292, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_296)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %6*/
	/*   store i16 %293, i16* %294, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_298)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %6*/
	/*   %296 = load i16* %295, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_299)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %6*/
	/*   store i16 %296, i16* %297, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_301)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %6*/
	/*   %299 = load i16* %298, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_302)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %6*/
	/*   store i16 %299, i16* %300, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_304)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %6*/
	/*   %302 = load i16* %301, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_305)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %6*/
	/*   store i16 %302, i16* %303, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_307)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %6*/
	/*   %305 = load i16* %304, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_308)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %6*/
	/*   store i16 %305, i16* %306, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_310)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %6*/
	/*   %308 = load i16* %307, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_311)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %6*/
	/*   store i16 %308, i16* %309, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_313)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %6*/
	/*   %311 = load i16* %310, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_314)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %6*/
	/*   store i16 %311, i16* %312, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_316)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %6*/
	/*   %314 = load i16* %313, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_317)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %6*/
	/*   store i16 %314, i16* %315, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_319)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %6*/
	/*   %317 = load i16* %316, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_320)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %6*/
	/*   store i16 %317, i16* %318, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_322)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %6*/
	/*   %320 = load i16* %319, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_323)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %6*/
	/*   store i16 %320, i16* %321, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_325)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %6*/
	/*   %323 = load i16* %322, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_326)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %6*/
	/*   store i16 %323, i16* %324, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_328)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %6*/
	/*   %326 = load i16* %325, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_329)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %6*/
	/*   store i16 %326, i16* %327, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_331)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %6*/
	/*   %329 = load i16* %328, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_332)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %6*/
	/*   store i16 %329, i16* %330, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_334)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %6*/
	/*   %332 = load i16* %331, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_335)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %6*/
	/*   store i16 %332, i16* %333, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_337)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %6*/
	/*   %335 = load i16* %334, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_338)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %6*/
	/*   store i16 %335, i16* %336, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_340)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %6*/
	/*   %338 = load i16* %337, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_341)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %6*/
	/*   store i16 %338, i16* %339, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_343)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %6*/
	/*   %341 = load i16* %340, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_344)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %6*/
	/*   store i16 %341, i16* %342, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_346)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %6*/
	/*   %344 = load i16* %343, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_347)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %6*/
	/*   store i16 %344, i16* %345, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_349)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %6*/
	/*   %347 = load i16* %346, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_350)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %6*/
	/*   store i16 %347, i16* %348, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_352)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %6*/
	/*   %350 = load i16* %349, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_353)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %6*/
	/*   store i16 %350, i16* %351, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_355)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %6*/
	/*   %353 = load i16* %352, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_356)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %6*/
	/*   store i16 %353, i16* %354, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_358)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %6*/
	/*   %356 = load i16* %355, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_359)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %6*/
	/*   store i16 %356, i16* %357, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_361)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %6*/
	/*   %359 = load i16* %358, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_362)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %6*/
	/*   store i16 %359, i16* %360, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_364)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %6*/
	/*   %362 = load i16* %361, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_365)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %6*/
	/*   store i16 %362, i16* %363, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_367)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %6*/
	/*   %365 = load i16* %364, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_368)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %6*/
	/*   store i16 %365, i16* %366, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_370)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %6*/
	/*   %368 = load i16* %367, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_371)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %6*/
	/*   store i16 %368, i16* %369, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_373)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %6*/
	/*   %371 = load i16* %370, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_374)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %6*/
	/*   store i16 %371, i16* %372, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_376)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %6*/
	/*   %374 = load i16* %373, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_377)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %6*/
	/*   store i16 %374, i16* %375, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_379)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %6*/
	/*   %377 = load i16* %376, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_380)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %6*/
	/*   store i16 %377, i16* %378, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_382)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %6*/
	/*   %380 = load i16* %379, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_383)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %6*/
	/*   store i16 %380, i16* %381, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_385)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %6*/
	/*   %383 = load i16* %382, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_386)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %6*/
	/*   store i16 %383, i16* %384, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_388)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %6*/
	/*   %386 = load i16* %385, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_389)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %6*/
	/*   store i16 %386, i16* %387, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_391)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %6*/
	/*   %389 = load i16* %388, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_392)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %6*/
	/*   store i16 %389, i16* %390, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__6_394)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %.lr.ph.i*/
	/*   %401 = load i16* %400, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrphi_400)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %.lr.ph.i*/
	/*   %399 = load i16* %398, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrphi_401)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %404*/
	/*   %418 = load i16* %417, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__404_406)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %404*/
	/*   %441 = load i16* %438, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__404_407)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %404*/
	/*   store i16 %444, i16* %408, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__404_409)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %404*/
	/*   store i16 %445, i16* %417, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__404_410)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %404*/
	/*   store i16 %446, i16* %438, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__404_411)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %404*/
	/*   store i16 %447, i16* %439, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__404_412)) begin
		memory_controller_size_b = 2'd1;
	end
	/* main: %fft.exit*/
	/*   %463 = load i16* %462, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_fftexit_417)) begin
		memory_controller_size_b = 2'd1;
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		return_val <= 0;
		if (start == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
	/* main: %476*/
	/*   ret i32 %.lcssa*/
	if ((cur_state == LEGUP_F_main_BB__476_423)) begin
		return_val <= main_469_lcssa_reg;
		if (start == 1'b0 && ^(main_469_lcssa_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
end

endmodule 
module ram_dual_port
(
	clk,
	clken,
	address_a,
	address_b,
	wren_a,
	wren_b,
	data_a,
	data_b,
	byteena_a,
	byteena_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED.mif";
parameter  width_be_a = 1'd0;
parameter  width_be_b = 1'd0;
parameter  latency = 1;

input  clk;
input  clken;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output wire [(width_a-1):0] q_a;
output wire [(width_b-1):0] q_b;
reg [(width_a-1):0] q_a_wire;
reg [(width_b-1):0] q_b_wire;
input  wren_a;
input  wren_b;
input [(width_a-1):0] data_a;
input [(width_b-1):0] data_b;
// byte enable is unsupported by inferred RAMs
input [width_be_a-1:0] byteena_a;
input [width_be_b-1:0] byteena_b;

(* ramstyle = "no_rw_check", ram_init_file = init_file *) reg [width_a-1:0] ram[numwords_a-1:0];

/* synthesis translate_off */
integer i;
ALTERA_MF_MEMORY_INITIALIZATION mem ();
reg [8*256:1] ram_ver_file;
initial begin
	if (init_file == "UNUSED.mif")
    begin
		for (i = 0; i < numwords_a; i = i + 1)
			ram[i] = 0;
    end
	else
    begin
        // modelsim can't read .mif files directly. So use Altera function to
        // convert them to .ver files
        mem.convert_to_ver_file(init_file, width_a, ram_ver_file);
        $readmemh(ram_ver_file, ram);
    end
end
/* synthesis translate_on */

always @ (posedge clk)
if (clken)
begin // Port A
if (wren_a)
begin
    ram[address_a] <= data_a;
    q_a_wire <= {width_a{1'bX}};
end
else
    q_a_wire <= ram[address_a];
end
always @ (posedge clk)
if (clken)
begin // Port b
if (wren_b)
begin
    ram[address_b] <= data_b;
    q_b_wire <= {width_b{1'bX}};
end
else
    q_b_wire <= ram[address_b];
end



integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
if (clken)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = (clken) ? q_a_reg[latency] : 0;
assign q_b = (clken) ? q_b_reg[latency] : 0;


endmodule
module rom_dual_port
(
	clk,
	clken,
	address_a,
	address_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED.mif";
parameter  latency = 1;

input  clk;
input  clken;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output wire [(width_a-1):0] q_a;
output wire [(width_b-1):0] q_b;
reg [(width_a-1):0] q_a_wire;
reg [(width_b-1):0] q_b_wire;

(* ramstyle = "no_rw_check", ram_init_file = init_file *) reg [width_a-1:0] ram[numwords_a-1:0];

/* synthesis translate_off */
integer i;
ALTERA_MF_MEMORY_INITIALIZATION mem ();
reg [8*256:1] ram_ver_file;
initial begin
	if (init_file == "UNUSED.mif")
    begin
		for (i = 0; i < numwords_a; i = i + 1)
			ram[i] = 0;
    end
	else
    begin
        // modelsim can't read .mif files directly. So use Altera function to
        // convert them to .ver files
        mem.convert_to_ver_file(init_file, width_a, ram_ver_file);
        $readmemh(ram_ver_file, ram);
    end
end
/* synthesis translate_on */

always @ (posedge clk)
if (clken)
begin
    q_a_wire <= ram[address_a];
    q_b_wire <= ram[address_b];
end



integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
if (clken)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = (clken) ? q_a_reg[latency] : 0;
assign q_b = (clken) ? q_b_reg[latency] : 0;


endmodule
// Adding code from verilog file: ../../boards/Virtex6/ML605/top.v


module ML605 (
       USER_CLOCK,
	    KEY,
	    SW,	    
       LED,
       LEDG,
		UART_RXD,
		UART_TXD

	    );

   input USER_CLOCK;
   input [4:0] KEY;
   input [7:0] SW;
   output [7:0] LED;
   output [7:0] LEDG;
   wire CLOCK_50;

    input UART_RXD;
    output UART_TXD;    
	wire clk = CLOCK_50;
	wire go = ~KEY[1];



   wire 	reset = ~KEY[0];
   wire 	start;
   wire [31:0] 	return_val;
   reg  [31:0] 	return_val_reg;
   wire 	finish;
   wire [3:0]	state;
   
   reg [6:0]   hex0, hex1, hex2, hex3, hex4, hex5, hex6, hex7;

   assign CLOCK_50 = USER_CLOCK;
   assign LED = 0;
   
	always @ (*) begin
		hex7 <= return_val_reg[31:28];
		hex6 <= return_val_reg[27:24];
		hex5 <= return_val_reg[23:20];
		hex4 <= return_val_reg[19:16];
		hex3 <= return_val_reg[15:12];
		hex2 <= return_val_reg[11:8];
		hex1 <= return_val_reg[7:4];
		hex0 <= return_val_reg[3:0];
	end
assign UART_TXD = 1'b0;

    parameter s_WAIT = 3'b001, s_START = 3'b010, s_EXE = 3'b011,
                s_DONE = 3'b100;

    // state registers
    reg [3:0] y_Q, Y_D;

    assign LEDG[3:0] = y_Q;

    // next state
    always @(*)
    begin
        case (y_Q)
            s_WAIT: if (go) Y_D = s_START; else Y_D = y_Q;

            s_START: Y_D = s_EXE;

            s_EXE: if (!finish) Y_D = s_EXE; else Y_D = s_DONE;

            s_DONE: Y_D = s_DONE;

            default: Y_D = 3'bxxx;
        endcase
    end

    // current state
    always @(posedge clk)
    begin
        if (reset) // synchronous clear
            y_Q <= s_WAIT;
        else
            y_Q <= Y_D;
    end

    always @(posedge clk)
        if (y_Q == s_EXE && finish)
            return_val_reg <= return_val;
        else if (y_Q == s_DONE)
            return_val_reg <= return_val_reg;
        else
            return_val_reg <= 0;


    assign start = (y_Q == s_START);

   
   top top_inst (
      .clk (clk),
      .reset (reset),
      .finish (finish),
      .return_val (return_val),
        .start (start)

    );

   

endmodule

// Adding code from verilog file: ../../boards/StratixIV/DE4/top.v


module de4 ( 
    	     OSC_50_BANK2, 
             BUTTON, 
             LED, 
    	     SEG0_D, 
    	     SEG1_D 
	     ); 
   input OSC_50_BANK2; 
   input [1:0] BUTTON; 
   output [6:0] SEG0_D; 
   output [6:0] SEG1_D; 
   output [7:0] LED; 
   
   de2 de2_inst ( 
		  .CLOCK_50 (OSC_50_BANK2), 
		  .LEDG (LED), 
		  .KEY (BUTTON), 
		  .SW (), 
		  .HEX0 (SEG0_D), 
		  .HEX1 (SEG1_D), 
		  .HEX2 (), 
		  .HEX3 (), 
		  .HEX4 (), 
		  .HEX5 (), 
		  .HEX6 (), 
		  .HEX7 () 
		  ); 
   
endmodule
// Adding code from verilog file: ../../boards/CycloneII/DE2/top.v


module de2 (
	    CLOCK_50,
	    KEY,
	    SW,
	    HEX0,
	    HEX1,
	    HEX2,
	    HEX3,
	    HEX4,
	    HEX5,
	    HEX6,
	    HEX7,
	    LEDG,
		UART_RXD,
		UART_TXD

	    );

   input CLOCK_50;
   input [3:0] KEY;
   input [17:0] SW;
   output [6:0] HEX0, HEX1,  HEX2,  HEX3,  HEX4,  HEX5,  HEX6,  HEX7;
   reg [6:0] 	hex0, hex1, hex2, hex3, hex4, hex5, hex6, hex7;
   

   output [7:0] LEDG;
    input UART_RXD;
    output UART_TXD;    
	wire clk = CLOCK_50;
	wire go = ~KEY[1];



   wire 	reset = ~KEY[0];
   wire 	start;
   wire [31:0] 	return_val;
   reg  [31:0] 	return_val_reg;
   wire 	finish;
   wire [3:0]	state;

   hex_digits h7( .x(hex7), .hex_LEDs(HEX7));
   hex_digits h6( .x(hex6), .hex_LEDs(HEX6));
   hex_digits h5( .x(hex5), .hex_LEDs(HEX5));
   hex_digits h4( .x(hex4), .hex_LEDs(HEX4));
   hex_digits h3( .x(hex3), .hex_LEDs(HEX3));
   hex_digits h2( .x(hex2), .hex_LEDs(HEX2));
   hex_digits h1( .x(hex1), .hex_LEDs(HEX1));
   hex_digits h0( .x(hex0), .hex_LEDs(HEX0));
   
	always @ (*) begin
		hex7 <= return_val_reg[31:28];
		hex6 <= return_val_reg[27:24];
		hex5 <= return_val_reg[23:20];
		hex4 <= return_val_reg[19:16];
		hex3 <= return_val_reg[15:12];
		hex2 <= return_val_reg[11:8];
		hex1 <= return_val_reg[7:4];
		hex0 <= return_val_reg[3:0];
	end
assign UART_TXD = 1'b0;

    parameter s_WAIT = 3'b001, s_START = 3'b010, s_EXE = 3'b011,
                s_DONE = 3'b100;

    // state registers
    reg [3:0] y_Q, Y_D;

    assign LEDG[3:0] = y_Q;

    // next state
    always @(*)
    begin
        case (y_Q)
            s_WAIT: if (go) Y_D = s_START; else Y_D = y_Q;

            s_START: Y_D = s_EXE;

            s_EXE: if (!finish) Y_D = s_EXE; else Y_D = s_DONE;

            s_DONE: Y_D = s_DONE;

            default: Y_D = 3'bxxx;
        endcase
    end

    // current state
    always @(posedge clk)
    begin
        if (reset) // synchronous clear
            y_Q <= s_WAIT;
        else
            y_Q <= Y_D;
    end

    always @(posedge clk)
        if (y_Q == s_EXE && finish)
            return_val_reg <= return_val;
        else if (y_Q == s_DONE)
            return_val_reg <= return_val_reg;
        else
            return_val_reg <= 0;


    assign start = (y_Q == s_START);

   
   top top_inst (
      .clk (clk),
      .reset (reset),
      .finish (finish),
      .return_val (return_val),
        .start (start)

    );

endmodule

module circuit_start_control (
    go,
    control_key
);
    input control_key;
    output go;
    assign go = control_key;
endmodule
module hex_digits(x, hex_LEDs);
    input [3:0] x;
    output [6:0] hex_LEDs;
    
    assign hex_LEDs[0] = (~x[3] & ~x[2] & ~x[1] & x[0]) |
                            (~x[3] & x[2] & ~x[1] & ~x[0]) |
                            (x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & ~x[2] & x[1] & x[0]);
    assign hex_LEDs[1] = (~x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & x[1] & x[0]) |
                            (x[3] & x[2] & ~x[0]) |
                            (x[2] & x[1] & ~x[0]);
    assign hex_LEDs[2] = (x[3] & x[2] & ~x[0]) |
                            (x[3] & x[2] & x[1]) |
                            (~x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[3] = (~x[3] & ~x[2] & ~x[1] & x[0]) | 
                            (~x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (x[2] & x[1] & x[0]) | 
                            (x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[4] = (~x[3] & x[0]) |
                            (~x[3] & x[2] & ~x[1]) |
                            (~x[2] & ~x[1] & x[0]);
    assign hex_LEDs[5] = (~x[3] & ~x[2] & x[0]) | 
                            (~x[3] & ~x[2] & x[1]) | 
                            (~x[3] & x[1] & x[0]) | 
                            (x[3] & x[2] & ~x[1] & x[0]);
    assign hex_LEDs[6] = (~x[3] & ~x[2] & ~x[1]) | 
                            (x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (~x[3] & x[2] & x[1] & x[0]);
    
endmodule
`timescale 1 ns / 1 ns
module main_tb
(
);

reg  clk;
reg  reset;
reg  start;
reg  waitrequest;
wire [31:0] return_val;
wire  finish;


top top_inst (
	.clk (clk),
	.reset (reset),
	.start (start),
	.waitrequest (waitrequest),
	.finish (finish),
	.return_val (return_val)
);




initial 
    clk = 0;
always @(clk)
    clk <= #10 ~clk;

initial begin
//$monitor("At t=%t clk=%b %b %b %b %d", $time, clk, reset, start, finish, return_val);
@(negedge clk);
reset <= 1;
@(negedge clk);
reset <= 0;
start <= 1;
@(negedge clk);
start <= 0;
end

always@(finish) begin
    if (finish == 1) begin
        $display("At t=%t clk=%b finish=%b return_val=%d", $time, clk, finish, return_val);
        $display("Cycles: %d", ($time-50)/20);
        $finish;
    end
end

initial begin
waitrequest <= 1;
@(negedge clk);
@(negedge clk);
waitrequest <= 0;
end


endmodule 

//----------------------------------------------------------------------------//
// Generated by LegUp High-Level Synthesis Tool Version 4.0 (http://legup.org)
// Compiled: Tue Jun 18 03:11:52 2019
// University of Toronto
// For research and academic purposes only. Commercial use is prohibited.
// Please send bugs to: legup@eecg.toronto.edu
// Date: Sun Jun 23 14:45:33 2019
//----------------------------------------------------------------------------//

`define MEMORY_CONTROLLER_ADDR_SIZE 32
`define MEMORY_CONTROLLER_DATA_SIZE 64
// Number of RAM elements: 8
`define MEMORY_CONTROLLER_TAG_SIZE 9
// @inRdbfr = internal constant [2048 x i8] c"\00hx0H \A0\C0\C0@8\F8\F8X\88\E0\C8\D0\B0H`(\B8\A0  x\A8@ H\B8\D8\F0\00\D8\C0@p0\A0\98(\B0  \F8\C8h\18\D8\F0\80\B0H\E8\F0\B80x0\C0@\A8\A0\80\A0\A0\E8\D0hx\E8...
`define TAG_g_inRdbfr `MEMORY_CONTROLLER_TAG_SIZE'd2
`define TAG_g_inRdbfr_a {`TAG_g_inRdbfr, 23'd0}
// @ld_Bfr = internal unnamed_addr global i32 0, align 4
`define TAG_g_ld_Bfr `MEMORY_CONTROLLER_TAG_SIZE'd4
`define TAG_g_ld_Bfr_a {`TAG_g_ld_Bfr, 23'd4}
// @ld_Incnt = internal unnamed_addr global i32 0, align 4
`define TAG_g_ld_Incnt `MEMORY_CONTROLLER_TAG_SIZE'd4
`define TAG_g_ld_Incnt_a {`TAG_g_ld_Incnt, 23'd8}
// @ld_Rdbfr = internal global [2048 x i8] zeroinitializer, align 1
`define TAG_g_ld_Rdbfr `MEMORY_CONTROLLER_TAG_SIZE'd3
`define TAG_g_ld_Rdbfr_a {`TAG_g_ld_Rdbfr, 23'd0}
// @ld_Rdptr = internal unnamed_addr global i8* null, align 4
`define TAG_g_ld_Rdptr `MEMORY_CONTROLLER_TAG_SIZE'd4
`define TAG_g_ld_Rdptr_a {`TAG_g_ld_Rdptr, 23'd0}

// Turn off warning 'ignoring unsupported system task'
// altera message_off 10175

`timescale 1 ns / 1 ns
module top
	(
		clk,
		reset,
		start,
		finish,
		waitrequest,
		return_val
	);
input clk;
input reset;
input start;
output wire finish;
input waitrequest;
output wire [31:0] return_val;
wire memory_controller_waitrequest;
wire memory_controller_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
wire memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
wire [1:0] memory_controller_size_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;

wire memory_controller_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
wire memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
wire [1:0] memory_controller_size_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;

/* synthesis translate_off */
assign memory_controller_waitrequest = waitrequest;
/* synthesis translate_on */

memory_controller memory_controller_inst (
	.clk( clk ),
	.memory_controller_enable_a( memory_controller_enable_a ),
	.memory_controller_enable_b( memory_controller_enable_b ),
	.memory_controller_address_a( memory_controller_address_a ),
	.memory_controller_address_b( memory_controller_address_b ),
	.memory_controller_write_enable_a( memory_controller_write_enable_a ),
	.memory_controller_write_enable_b( memory_controller_write_enable_b ),
	.memory_controller_in_a( memory_controller_in_a ),
	.memory_controller_in_b( memory_controller_in_b ),
	.memory_controller_size_a( memory_controller_size_a ),
	.memory_controller_size_b( memory_controller_size_b ),
	.memory_controller_waitrequest( memory_controller_waitrequest ),
	.memory_controller_out_reg_a( memory_controller_out_a ),
	.memory_controller_out_reg_b( memory_controller_out_b )
);

main main_inst(
	.clk( clk ),
	.clk2x( clk2x ),
	.clk1x_follower( clk1x_follower ),
	.reset( reset ),
	.start( start ),
	.finish( finish ),
	.return_val( return_val ),
	.memory_controller_waitrequest(memory_controller_waitrequest),
	.memory_controller_enable_a(memory_controller_enable_a),
	.memory_controller_address_a(memory_controller_address_a),
	.memory_controller_write_enable_a(memory_controller_write_enable_a),
	.memory_controller_in_a(memory_controller_in_a),
	.memory_controller_size_a(memory_controller_size_a),
	.memory_controller_out_a(memory_controller_out_a),
	.memory_controller_enable_b(memory_controller_enable_b),
	.memory_controller_address_b(memory_controller_address_b),
	.memory_controller_write_enable_b(memory_controller_write_enable_b),
	.memory_controller_in_b(memory_controller_in_b),
	.memory_controller_size_b(memory_controller_size_b),
	.memory_controller_out_b(memory_controller_out_b)
);

endmodule

`timescale 1 ns / 1 ns
module memory_controller
(
	clk,
	memory_controller_address_a,
	memory_controller_address_b,
	memory_controller_enable_a,
	memory_controller_enable_b,
	memory_controller_write_enable_a,
	memory_controller_write_enable_b,
	memory_controller_in_a,
	memory_controller_in_b,
	memory_controller_size_a,
	memory_controller_size_b,
	memory_controller_waitrequest,
	memory_controller_out_reg_a,
	memory_controller_out_reg_b
);

parameter latency = 2;

parameter ram_latency = latency-1;

integer j;

input clk;
input memory_controller_waitrequest;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
input memory_controller_enable_a;
input memory_controller_write_enable_a;
input [64-1:0] memory_controller_in_a;
input [1:0] memory_controller_size_a;
output reg [64-1:0] memory_controller_out_reg_a;
reg [64-1:0] memory_controller_out_prev_a;
reg [64-1:0] memory_controller_out_a;

reg memory_controller_enable_reg_a;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
input memory_controller_enable_b;
input memory_controller_write_enable_b;
input [64-1:0] memory_controller_in_b;
input [1:0] memory_controller_size_b;
output reg [64-1:0] memory_controller_out_reg_b;
reg [64-1:0] memory_controller_out_prev_b;
reg [64-1:0] memory_controller_out_b;

reg memory_controller_enable_reg_b;

reg [10:0] rom_8_address_a;
reg [10:0] rom_8_address_b;
reg rom_8_write_enable_a;
reg rom_8_write_enable_b;
reg [7:0] rom_8_in_a;
reg [7:0] rom_8_in_b;
wire [7:0] rom_8_out_a;
wire [7:0] rom_8_out_b;

// @inRdbfr = internal constant [2048 x i8] c"\00hx0H \A0\C0\C0@8\F8\F8X\88\E0\C8\D0\B0H`(\B8\A0  x\A8@ H\B8\D8\F0\00\D8\C0@p0\A0\98(\B0  \F8\C8h\18\D8\F0\80\B0H\E8\F0\B80x0\C0@\A8\A0\80\A0\A0\E8\D0hx\E8...
rom_dual_port rom_8 (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( rom_8_address_a ),
	.address_b( rom_8_address_b ),
	.q_a( rom_8_out_a ),
	.q_b( rom_8_out_b)
);
defparam rom_8.width_a = 8;
defparam rom_8.width_b = 8;
defparam rom_8.widthad_a = 11;
defparam rom_8.widthad_b = 11;
defparam rom_8.numwords_a = 2048;
defparam rom_8.numwords_b = 2048;
defparam rom_8.latency = ram_latency;
defparam rom_8.init_file = "rom_8.mif";

reg [10:0] ram_8_address_a;
reg [10:0] ram_8_address_b;
reg ram_8_write_enable_a;
reg ram_8_write_enable_b;
reg [7:0] ram_8_in_a;
reg [7:0] ram_8_in_b;
wire [7:0] ram_8_out_a;
wire [7:0] ram_8_out_b;

// @ld_Rdbfr = internal global [2048 x i8] zeroinitializer, align 1
ram_dual_port ram_8 (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( ram_8_address_a ),
	.address_b( ram_8_address_b ),
	.wren_a( ram_8_write_enable_a ),
	.wren_b( ram_8_write_enable_b ),
	.data_a( ram_8_in_a ),
	.data_b( ram_8_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( ram_8_out_a ),
	.q_b( ram_8_out_b)
);
defparam ram_8.width_a = 8;
defparam ram_8.width_b = 8;
defparam ram_8.widthad_a = 11;
defparam ram_8.widthad_b = 11;
defparam ram_8.width_be_a = 1;
defparam ram_8.width_be_b = 1;
defparam ram_8.numwords_a = 2048;
defparam ram_8.numwords_b = 2048;
defparam ram_8.latency = ram_latency;
defparam ram_8.init_file = "ram_8.mif";

reg [1:0] ram_32_address_a;
reg [1:0] ram_32_address_b;
reg ram_32_write_enable_a;
reg ram_32_write_enable_b;
reg [31:0] ram_32_in_a;
reg [31:0] ram_32_in_b;
wire [31:0] ram_32_out_a;
wire [31:0] ram_32_out_b;

// @ld_Rdptr = internal unnamed_addr global i8* null, align 4
ram_dual_port ram_32 (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( ram_32_address_a ),
	.address_b( ram_32_address_b ),
	.wren_a( ram_32_write_enable_a ),
	.wren_b( ram_32_write_enable_b ),
	.data_a( ram_32_in_a ),
	.data_b( ram_32_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( ram_32_out_a ),
	.q_b( ram_32_out_b)
);
defparam ram_32.width_a = 32;
defparam ram_32.width_b = 32;
defparam ram_32.widthad_a = 2;
defparam ram_32.widthad_b = 2;
defparam ram_32.width_be_a = 1;
defparam ram_32.width_be_b = 1;
defparam ram_32.numwords_a = 3;
defparam ram_32.numwords_b = 3;
defparam ram_32.latency = ram_latency;
defparam ram_32.init_file = "ram_32.mif";
wire [`MEMORY_CONTROLLER_TAG_SIZE-1:0] tag_a;
assign tag_a = memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:`MEMORY_CONTROLLER_ADDR_SIZE-`MEMORY_CONTROLLER_TAG_SIZE];
always @(*)
if (memory_controller_enable_a & (tag_a == 0))
begin
   $display("Error: Null pointer exception! Are you trying to read from a local ram? Use: 'set_memory_global <ram_name>' To debug this error try: 'set_parameter PRINT_STATES 1'");
   $finish;
end
reg [2:0] prevAddr_a;
reg [1:0] prevSize_a;
reg [2:0] prevSize_a_and;

always @(posedge clk)
if (!memory_controller_waitrequest)
begin
	prevAddr_a <= memory_controller_address_a[2:0];
	prevSize_a <= memory_controller_size_a;
end
wire [`MEMORY_CONTROLLER_TAG_SIZE-1:0] tag_b;
assign tag_b = memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:`MEMORY_CONTROLLER_ADDR_SIZE-`MEMORY_CONTROLLER_TAG_SIZE];
always @(*)
if (memory_controller_enable_b & (tag_b == 0))
begin
   $display("Error: Null pointer exception! Are you trying to read from a local ram? Use: 'set_memory_global <ram_name>' To debug this error try: 'set_parameter PRINT_STATES 1'");
   $finish;
end
reg [2:0] prevAddr_b;
reg [1:0] prevSize_b;
reg [2:0] prevSize_b_and;

always @(posedge clk)
if (!memory_controller_waitrequest)
begin
	prevAddr_b <= memory_controller_address_b[2:0];
	prevSize_b <= memory_controller_size_b;
end

reg [2:0] select_not_struct_a;

wire select_rom_8_a;
assign select_rom_8_a = (tag_a == 2);
reg [ram_latency:0] select_rom_8_reg_a;
wire [7:0] memory_controller_rom_8_out_a;
assign memory_controller_rom_8_out_a = {8{ select_rom_8_reg_a[ram_latency]}} & rom_8_out_a;

wire select_ram_8_a;
assign select_ram_8_a = (tag_a == 3);
reg [ram_latency:0] select_ram_8_reg_a;
wire [7:0] memory_controller_ram_8_out_a;
assign memory_controller_ram_8_out_a = {8{ select_ram_8_reg_a[ram_latency]}} & ram_8_out_a;

wire select_ram_32_a;
assign select_ram_32_a = (tag_a == 4);
reg [ram_latency:0] select_ram_32_reg_a;
wire [31:0] memory_controller_ram_32_out_a;
assign memory_controller_ram_32_out_a = {32{ select_ram_32_reg_a[ram_latency]}} & ram_32_out_a;

always @(*)
begin
	rom_8_address_a = memory_controller_address_a [11-1+0:0] & {11{select_rom_8_a}};
	rom_8_write_enable_a = memory_controller_write_enable_a & select_rom_8_a;
	rom_8_in_a [8-1:0] = memory_controller_in_a[8-1:0];

	ram_8_address_a = memory_controller_address_a [11-1+0:0] & {11{select_ram_8_a}};
	ram_8_write_enable_a = memory_controller_write_enable_a & select_ram_8_a;
	ram_8_in_a [8-1:0] = memory_controller_in_a[8-1:0];

	ram_32_address_a = memory_controller_address_a [2-1+2:2] & {2{select_ram_32_a}};
	ram_32_write_enable_a = memory_controller_write_enable_a & select_ram_32_a;
	ram_32_in_a [32-1:0] = memory_controller_in_a[32-1:0];

end
always @(*)
begin
	select_not_struct_a [2:0] = 3'b0 | {2{select_ram_32_reg_a[ram_latency]}};
	if (prevAddr_a[2:0] & select_not_struct_a[2:0] != 0 && memory_controller_enable_a)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end

	prevSize_a_and[0] = prevSize_a[1] | prevSize_a[0];
	prevSize_a_and[1] = prevSize_a[1];
	prevSize_a_and[2] = prevSize_a[1] & prevSize_a[0];
	if ((prevAddr_a & prevSize_a_and) != 0 && memory_controller_enable_a)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end
	memory_controller_out_prev_a = memory_controller_out_reg_a & { 64{!memory_controller_enable_reg_a}};
	memory_controller_out_a = 1'b0 | memory_controller_out_prev_a | memory_controller_rom_8_out_a | memory_controller_ram_8_out_a | memory_controller_ram_32_out_a;
end

always @(posedge clk)
if (!memory_controller_waitrequest)
begin
memory_controller_out_reg_a <= memory_controller_out_a;
memory_controller_enable_reg_a <= memory_controller_enable_a;
end

always @(posedge clk)
if (!memory_controller_waitrequest)
for (j = 0; j < ram_latency; j=j+1)
begin
select_rom_8_reg_a[j+1] <= select_rom_8_reg_a[j];
select_ram_8_reg_a[j+1] <= select_ram_8_reg_a[j];
select_ram_32_reg_a[j+1] <= select_ram_32_reg_a[j];
select_ram_32_reg_a[j+1] <= select_ram_32_reg_a[j];
select_ram_32_reg_a[j+1] <= select_ram_32_reg_a[j];
end
always @(*)
begin
select_rom_8_reg_a[0] <= select_rom_8_a;
select_ram_8_reg_a[0] <= select_ram_8_a;
select_ram_32_reg_a[0] <= select_ram_32_a;
select_ram_32_reg_a[0] <= select_ram_32_a;
select_ram_32_reg_a[0] <= select_ram_32_a;
end

reg [2:0] select_not_struct_b;

wire select_rom_8_b;
assign select_rom_8_b = (tag_b == 2);
reg [ram_latency:0] select_rom_8_reg_b;
wire [7:0] memory_controller_rom_8_out_b;
assign memory_controller_rom_8_out_b = {8{ select_rom_8_reg_b[ram_latency]}} & rom_8_out_b;

wire select_ram_8_b;
assign select_ram_8_b = (tag_b == 3);
reg [ram_latency:0] select_ram_8_reg_b;
wire [7:0] memory_controller_ram_8_out_b;
assign memory_controller_ram_8_out_b = {8{ select_ram_8_reg_b[ram_latency]}} & ram_8_out_b;

wire select_ram_32_b;
assign select_ram_32_b = (tag_b == 4);
reg [ram_latency:0] select_ram_32_reg_b;
wire [31:0] memory_controller_ram_32_out_b;
assign memory_controller_ram_32_out_b = {32{ select_ram_32_reg_b[ram_latency]}} & ram_32_out_b;

always @(*)
begin
	rom_8_address_b = memory_controller_address_b [11-1+0:0] & {11{select_rom_8_b}};
	rom_8_write_enable_b = memory_controller_write_enable_b & select_rom_8_b;
	rom_8_in_b [8-1:0] = memory_controller_in_b[8-1:0];

	ram_8_address_b = memory_controller_address_b [11-1+0:0] & {11{select_ram_8_b}};
	ram_8_write_enable_b = memory_controller_write_enable_b & select_ram_8_b;
	ram_8_in_b [8-1:0] = memory_controller_in_b[8-1:0];

	ram_32_address_b = memory_controller_address_b [2-1+2:2] & {2{select_ram_32_b}};
	ram_32_write_enable_b = memory_controller_write_enable_b & select_ram_32_b;
	ram_32_in_b [32-1:0] = memory_controller_in_b[32-1:0];

end
always @(*)
begin
	select_not_struct_b [2:0] = 3'b0 | {2{select_ram_32_reg_b[ram_latency]}};
	if (prevAddr_b[2:0] & select_not_struct_b[2:0] != 0 && memory_controller_enable_b)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end

	prevSize_b_and[0] = prevSize_b[1] | prevSize_b[0];
	prevSize_b_and[1] = prevSize_b[1];
	prevSize_b_and[2] = prevSize_b[1] & prevSize_b[0];
	if ((prevAddr_b & prevSize_b_and) != 0 && memory_controller_enable_b)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end
	memory_controller_out_prev_b = memory_controller_out_reg_b & { 64{!memory_controller_enable_reg_b}};
	memory_controller_out_b = 1'b0 | memory_controller_out_prev_b | memory_controller_rom_8_out_b | memory_controller_ram_8_out_b | memory_controller_ram_32_out_b;
end

always @(posedge clk)
if (!memory_controller_waitrequest)
begin
memory_controller_out_reg_b <= memory_controller_out_b;
memory_controller_enable_reg_b <= memory_controller_enable_b;
end

always @(posedge clk)
if (!memory_controller_waitrequest)
for (j = 0; j < ram_latency; j=j+1)
begin
select_rom_8_reg_b[j+1] <= select_rom_8_reg_b[j];
select_ram_8_reg_b[j+1] <= select_ram_8_reg_b[j];
select_ram_32_reg_b[j+1] <= select_ram_32_reg_b[j];
select_ram_32_reg_b[j+1] <= select_ram_32_reg_b[j];
select_ram_32_reg_b[j+1] <= select_ram_32_reg_b[j];
end
always @(*)
begin
select_rom_8_reg_b[0] <= select_rom_8_b;
select_ram_8_reg_b[0] <= select_ram_8_b;
select_ram_32_reg_b[0] <= select_ram_32_b;
select_ram_32_reg_b[0] <= select_ram_32_b;
select_ram_32_reg_b[0] <= select_ram_32_b;
end

endmodule 

`timescale 1 ns / 1 ns
module main
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_waitrequest,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	return_val
);

parameter [6:0] LEGUP_0 = 7'd0;
parameter [6:0] LEGUP_F_main_BB__0_1 = 7'd1;
parameter [6:0] LEGUP_F_main_BB__0_2 = 7'd2;
parameter [6:0] LEGUP_F_main_BB__0_3 = 7'd3;
parameter [6:0] LEGUP_F_main_BB_lrphiiii_4 = 7'd4;
parameter [6:0] LEGUP_F_main_BB_lrphiiii_5 = 7'd5;
parameter [6:0] LEGUP_F_main_BB_lrphiiii_6 = 7'd6;
parameter [6:0] LEGUP_F_main_BB_lrphiiii_7 = 7'd7;
parameter [6:0] LEGUP_F_main_BB_Get_Bitsexiti_8 = 7'd8;
parameter [6:0] LEGUP_F_main_BB_Get_Bitsexiti_9 = 7'd9;
parameter [6:0] LEGUP_F_main_BB_Get_Bitsexiti_10 = 7'd10;
parameter [6:0] LEGUP_F_main_BB_Get_Bitsexiti_11 = 7'd11;
parameter [6:0] LEGUP_F_main_BB_Get_Bitsexiti_12 = 7'd12;
parameter [6:0] LEGUP_F_main_BB_Get_Bitsexiti_14 = 7'd14;
parameter [6:0] LEGUP_F_main_BB__15_15 = 7'd15;
parameter [6:0] LEGUP_F_main_BB__15_16 = 7'd16;
parameter [6:0] LEGUP_F_main_BB__15_17 = 7'd17;
parameter [6:0] LEGUP_F_main_BB__15_18 = 7'd18;
parameter [6:0] LEGUP_F_main_BB__21_19 = 7'd19;
parameter [6:0] LEGUP_F_main_BB__21_20 = 7'd20;
parameter [6:0] LEGUP_F_main_BB__21_21 = 7'd21;
parameter [6:0] LEGUP_F_main_BB_preheader1iiii_22 = 7'd22;
parameter [6:0] LEGUP_F_main_BB_lrphiiiiii_23 = 7'd23;
parameter [6:0] LEGUP_F_main_BB_lrphiiiiii_24 = 7'd24;
parameter [6:0] LEGUP_F_main_BB_lrphiiiiii_25 = 7'd25;
parameter [6:0] LEGUP_F_main_BB_lrphiiiiii_26 = 7'd26;
parameter [6:0] LEGUP_F_main_BB_Fill_Bufferexitiiii_27 = 7'd27;
parameter [6:0] LEGUP_F_main_BB_loopexitiiii_28 = 7'd28;
parameter [6:0] LEGUP_F_main_BB_loopexitiiii_29 = 7'd29;
parameter [6:0] LEGUP_F_main_BB_loopexit2iloopexitiii_30 = 7'd30;
parameter [6:0] LEGUP_F_main_BB_loopexit2iloopexitiii_31 = 7'd31;
parameter [6:0] LEGUP_F_main_BB_loopexit2iiii_32 = 7'd32;
parameter [6:0] LEGUP_F_main_BB_loopexit2iiii_33 = 7'd33;
parameter [6:0] LEGUP_F_main_BB_Get_Bitsexitii_34 = 7'd34;
parameter [6:0] LEGUP_F_main_BB__43_35 = 7'd35;
parameter [6:0] LEGUP_F_main_BB__50_36 = 7'd36;
parameter [6:0] LEGUP_F_main_BB__52_37 = 7'd37;
parameter [6:0] LEGUP_F_main_BB__57_38 = 7'd38;
parameter [6:0] LEGUP_F_main_BB__59_39 = 7'd39;
parameter [6:0] LEGUP_F_main_BB_decode_motion_vectorexitii_40 = 7'd40;
parameter [6:0] LEGUP_F_main_BB_decode_motion_vectorexitii_42 = 7'd42;
parameter [6:0] LEGUP_F_main_BB__63_43 = 7'd43;
parameter [6:0] LEGUP_F_main_BB__63_44 = 7'd44;
parameter [6:0] LEGUP_F_main_BB__63_45 = 7'd45;
parameter [6:0] LEGUP_F_main_BB__63_46 = 7'd46;
parameter [6:0] LEGUP_F_main_BB__69_47 = 7'd47;
parameter [6:0] LEGUP_F_main_BB__69_48 = 7'd48;
parameter [6:0] LEGUP_F_main_BB__69_49 = 7'd49;
parameter [6:0] LEGUP_F_main_BB_preheader1ii13ii_50 = 7'd50;
parameter [6:0] LEGUP_F_main_BB_lrphiiii17ii_51 = 7'd51;
parameter [6:0] LEGUP_F_main_BB_lrphiiii17ii_52 = 7'd52;
parameter [6:0] LEGUP_F_main_BB_lrphiiii17ii_53 = 7'd53;
parameter [6:0] LEGUP_F_main_BB_lrphiiii17ii_54 = 7'd54;
parameter [6:0] LEGUP_F_main_BB_Fill_Bufferexitii19ii_55 = 7'd55;
parameter [6:0] LEGUP_F_main_BB_loopexitii20ii_56 = 7'd56;
parameter [6:0] LEGUP_F_main_BB_loopexitii20ii_57 = 7'd57;
parameter [6:0] LEGUP_F_main_BB_loopexit2iloopexiti21ii_58 = 7'd58;
parameter [6:0] LEGUP_F_main_BB_loopexit2iloopexiti21ii_59 = 7'd59;
parameter [6:0] LEGUP_F_main_BB_loopexit2ii23ii_60 = 7'd60;
parameter [6:0] LEGUP_F_main_BB_loopexit2ii23ii_61 = 7'd61;
parameter [6:0] LEGUP_F_main_BB_Get_Bitsexit24ii_62 = 7'd62;
parameter [6:0] LEGUP_F_main_BB__91_63 = 7'd63;
parameter [6:0] LEGUP_F_main_BB__98_64 = 7'd64;
parameter [6:0] LEGUP_F_main_BB__100_65 = 7'd65;
parameter [6:0] LEGUP_F_main_BB__105_66 = 7'd66;
parameter [6:0] LEGUP_F_main_BB__107_67 = 7'd67;
parameter [6:0] LEGUP_F_main_BB_motion_vectorsexit_68 = 7'd68;
parameter [6:0] LEGUP_F_main_BB_motion_vectorsexit_69 = 7'd69;
parameter [6:0] LEGUP_F_main_BB__128_70 = 7'd70;
parameter [6:0] LEGUP_F_main_BB__130_71 = 7'd71;
parameter [6:0] LEGUP_F_main_BB__132_72 = 7'd72;
parameter [8:0] tag_offset = 9'd0;
parameter [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tag_addr_offset = {tag_offset, 23'd0};
parameter [6:0] LEGUP_function_call_13 = 7'd13;
parameter [6:0] LEGUP_function_call_41 = 7'd41;

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
input  memory_controller_waitrequest;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
output reg [31:0] return_val;
reg [6:0] cur_state;
reg [6:0] next_state;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrphiiii_p202iiii;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrphiiii_p202iiii_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrphiiii_p101iiii;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrphiiii_p101iiii_reg;
reg [7:0] main_lrphiiii_1;
reg [7:0] main_lrphiiii_1_reg;
reg [31:0] main_lrphiiii_gep_int;
reg [31:0] main_lrphiiii_gep_int_reg;
reg [31:0] main_lrphiiii_gep;
reg [31:0] main_lrphiiii_gep_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrphiiii_2;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrphiiii_2_reg;
reg [31:0] main_lrphiiii_gep_int1;
reg [31:0] main_lrphiiii_gep_int1_reg;
reg [31:0] main_lrphiiii_gep2;
reg [31:0] main_lrphiiii_gep2_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrphiiii_3;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrphiiii_3_reg;
reg  main_lrphiiii_exitcondiii;
reg  main_lrphiiii_exitcondiii_reg;
reg [7:0] main_Get_Bitsexiti_4;
reg [7:0] main_Get_Bitsexiti_4_reg;
reg [31:0] main_Get_Bitsexiti_5;
reg [31:0] main_Get_Bitsexiti_5_reg;
reg [31:0] main_Get_Bitsexiti_6;
reg [31:0] main_Get_Bitsexiti_6_reg;
reg [31:0] main_Get_Bitsexiti_7;
reg [31:0] main_Get_Bitsexiti_7_reg;
reg [7:0] main_Get_Bitsexiti_prei;
reg [7:0] main_Get_Bitsexiti_prei_reg;
reg [31:0] main_Get_Bitsexiti_phitmpi;
reg [31:0] main_Get_Bitsexiti_phitmpi_reg;
reg [31:0] main_Get_Bitsexiti_phitmp3i;
reg [31:0] main_Get_Bitsexiti_phitmp3i_reg;
reg [31:0] main_Get_Bitsexiti_8;
reg [31:0] main_Get_Bitsexiti_8_reg;
reg [7:0] main_Get_Bitsexiti_pre1i;
reg [7:0] main_Get_Bitsexiti_pre1i_reg;
reg [31:0] main_Get_Bitsexiti_phitmp4i;
reg [31:0] main_Get_Bitsexiti_phitmp4i_reg;
reg [31:0] main_Get_Bitsexiti_phitmp5i;
reg [31:0] main_Get_Bitsexiti_phitmp5i_reg;
reg [31:0] main_Get_Bitsexiti_9;
reg [31:0] main_Get_Bitsexiti_9_reg;
reg [7:0] main_Get_Bitsexiti_pre2i;
reg [7:0] main_Get_Bitsexiti_pre2i_reg;
reg [31:0] main_Get_Bitsexiti_phitmp6i;
reg [31:0] main_Get_Bitsexiti_phitmp6i_reg;
reg [31:0] main_Get_Bitsexiti_10;
reg [31:0] main_Get_Bitsexiti_10_reg;
reg [31:0] main_Get_Bitsexiti_11;
reg [31:0] main_Get_Bitsexiti_11_reg;
reg [31:0] main_Get_Bitsexiti_12;
reg [31:0] main_Get_Bitsexiti_12_reg;
reg [31:0] main_Get_Bitsexiti_13;
reg [31:0] main_Get_Bitsexiti_13_reg;
reg  main_Get_Bitsexiti_14;
reg  main_Get_Bitsexiti_14_reg;
reg [31:0] main_15_16;
reg [31:0] main_15_16_reg;
reg [31:0] main_15_17;
reg [31:0] main_15_17_reg;
reg [31:0] main_15_18;
reg [31:0] main_15_18_reg;
reg [31:0] main_15_19;
reg [31:0] main_15_19_reg;
reg  main_15_20;
reg  main_15_20_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_21_22;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_21_22_reg;
reg  main_21_23;
reg  main_21_23_reg;
reg [31:0] main_21_24;
reg [31:0] main_21_24_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader1iiii_25;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader1iiii_25_reg;
reg [31:0] main_preheader1iiii_Incnt1iiii;
reg [31:0] main_preheader1iiii_Incnt1iiii_reg;
reg  main_preheader1iiii_26;
reg  main_preheader1iiii_26_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrphiiiiii_p202iiiiii;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrphiiiiii_p202iiiiii_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrphiiiiii_p101iiiiii;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrphiiiiii_p101iiiiii_reg;
reg [7:0] main_lrphiiiiii_27;
reg [7:0] main_lrphiiiiii_27_reg;
reg [31:0] main_lrphiiiiii_gep_int3;
reg [31:0] main_lrphiiiiii_gep_int3_reg;
reg [31:0] main_lrphiiiiii_gep4;
reg [31:0] main_lrphiiiiii_gep4_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrphiiiiii_28;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrphiiiiii_28_reg;
reg [31:0] main_lrphiiiiii_gep_int5;
reg [31:0] main_lrphiiiiii_gep_int5_reg;
reg [31:0] main_lrphiiiiii_gep6;
reg [31:0] main_lrphiiiiii_gep6_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrphiiiiii_29;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrphiiiiii_29_reg;
reg  main_lrphiiiiii_exitcondiiiii;
reg  main_lrphiiiiii_exitcondiiiii_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_Fill_Bufferexitiiii_30;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_Fill_Bufferexitiiii_30_reg;
reg [31:0] main_Fill_Bufferexitiiii_gep_int7;
reg [31:0] main_Fill_Bufferexitiiii_gep_int7_reg;
reg [31:0] main_Fill_Bufferexitiiii_gep8;
reg [31:0] main_Fill_Bufferexitiiii_gep8_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_Fill_Bufferexitiiii_31;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_Fill_Bufferexitiiii_31_reg;
reg [31:0] main_Fill_Bufferexitiiii_32;
reg [31:0] main_Fill_Bufferexitiiii_32_reg;
reg  main_Fill_Bufferexitiiii_33;
reg  main_Fill_Bufferexitiiii_33_reg;
reg [31:0] main_loopexitiiii_34;
reg [31:0] main_loopexitiiii_34_reg;
reg [31:0] main_loopexitiiii_35;
reg [31:0] main_loopexitiiii_35_reg;
reg [31:0] main_loopexitiiii_gep_int9;
reg [31:0] main_loopexitiiii_gep_int9_reg;
reg [31:0] main_loopexitiiii_gep10;
reg [31:0] main_loopexitiiii_gep10_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_loopexitiiii_scevgep30;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_loopexitiiii_scevgep30_reg;
reg [31:0] main_loopexitiiii_36;
reg [31:0] main_loopexitiiii_36_reg;
reg [31:0] main_loopexitiiii_37;
reg [31:0] main_loopexitiiii_37_reg;
reg [31:0] main_loopexitiiii_38;
reg [31:0] main_loopexitiiii_38_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_loopexit2iloopexitiii_lcssa2;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_loopexit2iloopexitiii_lcssa2_reg;
reg [31:0] main_loopexit2iloopexitiii_39;
reg [31:0] main_loopexit2iloopexitiii_39_reg;
reg [31:0] main_loopexit2iloopexitiii_40;
reg [31:0] main_loopexit2iloopexitiii_40_reg;
reg [31:0] main_loopexit2iloopexitiii_41;
reg [31:0] main_loopexit2iloopexitiii_41_reg;
reg [31:0] main_loopexit2iiii_Incnt2iiii;
reg [31:0] main_loopexit2iiii_Incnt2iiii_reg;
reg  main_Get_Bitsexitii_42;
reg  main_Get_Bitsexitii_42_reg;
reg [31:0] main_43_44;
reg [31:0] main_43_44_reg;
reg [31:0] main_43_45;
reg [31:0] main_43_45_reg;
reg [31:0] main_43_46;
reg [31:0] main_43_46_reg;
reg [31:0] main_43_47;
reg [31:0] main_43_47_reg;
reg [31:0] main_43_48;
reg [31:0] main_43_48_reg;
reg  main_43_49;
reg  main_43_49_reg;
reg [31:0] main_43_iii;
reg [31:0] main_43_iii_reg;
reg  main_50_51;
reg  main_50_51_reg;
reg [31:0] main_52_53;
reg [31:0] main_52_53_reg;
reg [31:0] main_52_54;
reg [31:0] main_52_54_reg;
reg [31:0] main_52_neg1iii;
reg [31:0] main_52_neg1iii_reg;
reg [31:0] main_52_neg2iii;
reg [31:0] main_52_neg2iii_reg;
reg [31:0] main_52_55;
reg [31:0] main_52_55_reg;
reg  main_52_56;
reg  main_52_56_reg;
reg [31:0] main_57_58;
reg [31:0] main_57_58_reg;
reg [31:0] main_59_60;
reg [31:0] main_59_60_reg;
reg [31:0] main_decode_motion_vectorexitii_vec0iii;
reg [31:0] main_decode_motion_vectorexitii_vec0iii_reg;
reg [31:0] main_decode_motion_vectorexitii_61;
reg [31:0] main_decode_motion_vectorexitii_61_reg;
reg  main_decode_motion_vectorexitii_62;
reg  main_decode_motion_vectorexitii_62_reg;
reg [31:0] main_63_64;
reg [31:0] main_63_64_reg;
reg [31:0] main_63_65;
reg [31:0] main_63_65_reg;
reg [31:0] main_63_66;
reg [31:0] main_63_66_reg;
reg [31:0] main_63_67;
reg [31:0] main_63_67_reg;
reg  main_63_68;
reg  main_63_68_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_69_70;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_69_70_reg;
reg  main_69_71;
reg  main_69_71_reg;
reg [31:0] main_69_72;
reg [31:0] main_69_72_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader1ii13ii_73;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader1ii13ii_73_reg;
reg [31:0] main_preheader1ii13ii_Incnt1ii12ii;
reg [31:0] main_preheader1ii13ii_Incnt1ii12ii_reg;
reg  main_preheader1ii13ii_74;
reg  main_preheader1ii13ii_74_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrphiiii17ii_p202iiii14ii;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrphiiii17ii_p202iiii14ii_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrphiiii17ii_p101iiii15ii;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrphiiii17ii_p101iiii15ii_reg;
reg [7:0] main_lrphiiii17ii_75;
reg [7:0] main_lrphiiii17ii_75_reg;
reg [31:0] main_lrphiiii17ii_gep_int11;
reg [31:0] main_lrphiiii17ii_gep_int11_reg;
reg [31:0] main_lrphiiii17ii_gep12;
reg [31:0] main_lrphiiii17ii_gep12_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrphiiii17ii_76;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrphiiii17ii_76_reg;
reg [31:0] main_lrphiiii17ii_gep_int13;
reg [31:0] main_lrphiiii17ii_gep_int13_reg;
reg [31:0] main_lrphiiii17ii_gep14;
reg [31:0] main_lrphiiii17ii_gep14_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrphiiii17ii_77;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrphiiii17ii_77_reg;
reg  main_lrphiiii17ii_exitcondiii16ii;
reg  main_lrphiiii17ii_exitcondiii16ii_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_Fill_Bufferexitii19ii_78;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_Fill_Bufferexitii19ii_78_reg;
reg [31:0] main_Fill_Bufferexitii19ii_gep_int15;
reg [31:0] main_Fill_Bufferexitii19ii_gep_int15_reg;
reg [31:0] main_Fill_Bufferexitii19ii_gep16;
reg [31:0] main_Fill_Bufferexitii19ii_gep16_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_Fill_Bufferexitii19ii_79;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_Fill_Bufferexitii19ii_79_reg;
reg [31:0] main_Fill_Bufferexitii19ii_80;
reg [31:0] main_Fill_Bufferexitii19ii_80_reg;
reg  main_Fill_Bufferexitii19ii_81;
reg  main_Fill_Bufferexitii19ii_81_reg;
reg [31:0] main_loopexitii20ii_82;
reg [31:0] main_loopexitii20ii_82_reg;
reg [31:0] main_loopexitii20ii_83;
reg [31:0] main_loopexitii20ii_83_reg;
reg [31:0] main_loopexitii20ii_gep_int17;
reg [31:0] main_loopexitii20ii_gep_int17_reg;
reg [31:0] main_loopexitii20ii_gep18;
reg [31:0] main_loopexitii20ii_gep18_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_loopexitii20ii_scevgep;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_loopexitii20ii_scevgep_reg;
reg [31:0] main_loopexitii20ii_84;
reg [31:0] main_loopexitii20ii_84_reg;
reg [31:0] main_loopexitii20ii_85;
reg [31:0] main_loopexitii20ii_85_reg;
reg [31:0] main_loopexitii20ii_86;
reg [31:0] main_loopexitii20ii_86_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_loopexit2iloopexiti21ii_lcssa;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_loopexit2iloopexiti21ii_lcssa_reg;
reg [31:0] main_loopexit2iloopexiti21ii_87;
reg [31:0] main_loopexit2iloopexiti21ii_87_reg;
reg [31:0] main_loopexit2iloopexiti21ii_88;
reg [31:0] main_loopexit2iloopexiti21ii_88_reg;
reg [31:0] main_loopexit2iloopexiti21ii_89;
reg [31:0] main_loopexit2iloopexiti21ii_89_reg;
reg [31:0] main_loopexit2ii23ii_Incnt2ii22ii;
reg [31:0] main_loopexit2ii23ii_Incnt2ii22ii_reg;
reg  main_Get_Bitsexit24ii_90;
reg  main_Get_Bitsexit24ii_90_reg;
reg [31:0] main_91_92;
reg [31:0] main_91_92_reg;
reg [31:0] main_91_93;
reg [31:0] main_91_93_reg;
reg [31:0] main_91_94;
reg [31:0] main_91_94_reg;
reg [31:0] main_91_95;
reg [31:0] main_91_95_reg;
reg [31:0] main_91_96;
reg [31:0] main_91_96_reg;
reg  main_91_97;
reg  main_91_97_reg;
reg [31:0] main_91_i4ii;
reg [31:0] main_91_i4ii_reg;
reg  main_98_99;
reg  main_98_99_reg;
reg [31:0] main_100_101;
reg [31:0] main_100_101_reg;
reg [31:0] main_100_102;
reg [31:0] main_100_102_reg;
reg [31:0] main_100_neg1i5ii;
reg [31:0] main_100_neg1i5ii_reg;
reg [31:0] main_100_neg2i6ii;
reg [31:0] main_100_neg2i6ii_reg;
reg [31:0] main_100_103;
reg [31:0] main_100_103_reg;
reg  main_100_104;
reg  main_100_104_reg;
reg [31:0] main_105_106;
reg [31:0] main_105_106_reg;
reg [31:0] main_107_108;
reg [31:0] main_107_108_reg;
reg [31:0] main_motion_vectorsexit_vec0i7ii;
reg [31:0] main_motion_vectorsexit_vec0i7ii_reg;
reg [31:0] main_motion_vectorsexit_ii;
reg [31:0] main_motion_vectorsexit_ii_reg;
reg  main_motion_vectorsexit_109;
reg  main_motion_vectorsexit_109_reg;
reg [31:0] main_motion_vectorsexit_110;
reg [31:0] main_motion_vectorsexit_110_reg;
reg  main_motion_vectorsexit_111;
reg  main_motion_vectorsexit_111_reg;
reg [31:0] main_motion_vectorsexit_112;
reg [31:0] main_motion_vectorsexit_112_reg;
reg [31:0] main_motion_vectorsexit_113;
reg [31:0] main_motion_vectorsexit_113_reg;
reg  main_motion_vectorsexit_114;
reg  main_motion_vectorsexit_114_reg;
reg [31:0] main_motion_vectorsexit_115;
reg [31:0] main_motion_vectorsexit_115_reg;
reg [31:0] main_motion_vectorsexit_116;
reg [31:0] main_motion_vectorsexit_116_reg;
reg [31:0] main_motion_vectorsexit_117;
reg [31:0] main_motion_vectorsexit_117_reg;
reg [31:0] main_motion_vectorsexit_118;
reg [31:0] main_motion_vectorsexit_118_reg;
reg [31:0] main_motion_vectorsexit_119;
reg [31:0] main_motion_vectorsexit_119_reg;
reg [31:0] main_motion_vectorsexit_120;
reg [31:0] main_motion_vectorsexit_120_reg;
reg [31:0] main_motion_vectorsexit_121;
reg [31:0] main_motion_vectorsexit_121_reg;
reg [31:0] main_motion_vectorsexit_122;
reg [31:0] main_motion_vectorsexit_122_reg;
reg [31:0] main_motion_vectorsexit_123;
reg [31:0] main_motion_vectorsexit_123_reg;
reg [31:0] main_motion_vectorsexit_124;
reg [31:0] main_motion_vectorsexit_124_reg;
reg [31:0] main_motion_vectorsexit_125;
reg [31:0] main_motion_vectorsexit_125_reg;
reg  main_motion_vectorsexit_127;
reg  main_motion_vectorsexit_127_reg;
wire [10:0] rom_8_address_a;
wire  rom_8_write_enable_a;
wire [7:0] rom_8_in_a;
wire [7:0] rom_8_out_a;
wire [10:0] rom_8_address_b;
wire  rom_8_write_enable_b;
wire [7:0] rom_8_in_b;
wire [7:0] rom_8_out_b;
wire [10:0] ram_8_address_a;
wire  ram_8_write_enable_a;
wire [7:0] ram_8_in_a;
wire [7:0] ram_8_out_a;
wire [10:0] ram_8_address_b;
wire  ram_8_write_enable_b;
wire [7:0] ram_8_in_b;
wire [7:0] ram_8_out_b;
wire  ram_32_address_a;
wire  ram_32_write_enable_a;
wire [31:0] ram_32_in_a;
wire [31:0] ram_32_out_a;
wire  ram_32_address_b;
wire  ram_32_write_enable_b;
wire [31:0] ram_32_in_b;
wire [31:0] ram_32_out_b;
wire [3:0] MVtab0_address_a;
wire  MVtab0_write_enable_a;
wire [7:0] MVtab0_in_a;
wire [7:0] MVtab0_out_a;
wire [3:0] MVtab0_address_b;
wire  MVtab0_write_enable_b;
wire [7:0] MVtab0_in_b;
wire [7:0] MVtab0_out_b;
wire [3:0] MVtab1_address_a;
wire  MVtab1_write_enable_a;
wire [7:0] MVtab1_in_a;
wire [7:0] MVtab1_out_a;
wire [3:0] MVtab1_address_b;
wire  MVtab1_write_enable_b;
wire [7:0] MVtab1_in_b;
wire [7:0] MVtab1_out_b;
wire [4:0] MVtab2_address_a;
wire  MVtab2_write_enable_a;
wire [7:0] MVtab2_in_a;
wire [7:0] MVtab2_out_a;
wire [4:0] MVtab2_address_b;
wire  MVtab2_write_enable_b;
wire [7:0] MVtab2_in_b;
wire [7:0] MVtab2_out_b;
reg  Get_motion_code_start;
reg  Get_motion_code_finish_final;
reg  Get_motion_code_finish_reg;
wire  Get_motion_code_finish;
wire [31:0] Get_motion_code_return_val;
reg [31:0] Get_motion_code_return_val_reg;
reg  legup_function_call;
wire [15:0] legup_pthreadpoll_threadID;
wire [15:0] legup_pthreadpoll_functionID;
reg [31:0] main_signed_add_32_0_op0;
reg [31:0] main_signed_add_32_0_op1;
reg [31:0] main_signed_add_32_0;
reg [31:0] main_signed_add_32_1_op0;
reg [31:0] main_signed_add_32_1_op1;
reg [31:0] main_signed_add_32_1;
reg [31:0] main_signed_subtract_32_0_op0;
reg [31:0] main_signed_subtract_32_0_op1;
reg [31:0] main_signed_subtract_32_0;
reg [31:0] main_signed_add_32_2_op0;
reg [31:0] main_signed_add_32_2_op1;
reg [31:0] main_signed_add_32_2;
reg [31:0] main_signed_add_32_6_op0;
reg [31:0] main_signed_add_32_6_op1;
reg [31:0] main_signed_add_32_6;
reg [31:0] main_signed_add_32_5_op0;
reg [31:0] main_signed_add_32_5_op1;
reg [31:0] main_signed_add_32_5;
reg [31:0] main_signed_add_32_3_op0;
reg [31:0] main_signed_add_32_3_op1;
reg [31:0] main_signed_add_32_3;
reg [31:0] main_signed_add_32_4_op0;
reg [31:0] main_signed_add_32_4_op1;
reg [31:0] main_signed_add_32_4;


Get_motion_code Get_motion_code (
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (Get_motion_code_start),
	.finish (Get_motion_code_finish),
	.return_val (Get_motion_code_return_val)
);

defparam
	Get_motion_code.tag_offset = tag_offset;

// Local Rams


/* Unsynthesizable Statements */
always @(posedge clk)
	if (!memory_controller_waitrequest) begin
	/* main: %motion_vectors.exit*/
	/*   %126 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([12 x i8]* @.str, i32 0, i32 0), i32 %125) #2*/
	if ((cur_state == LEGUP_F_main_BB_motion_vectorsexit_69)) begin
		$write("Result: %d\n", $signed(main_motion_vectorsexit_125));
		// to fix quartus warning
		if (reset == 1'b0 && ^(main_motion_vectorsexit_125) === 1'bX) finish <= 0;
	end
	/* main: %128*/
	/*   %129 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([14 x i8]* @.str1, i32 0, i32 0)) #2*/
	if ((cur_state == LEGUP_F_main_BB__128_70)) begin
		$write("RESULT: PASS\n");
	end
	/* main: %130*/
	/*   %131 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([14 x i8]* @.str2, i32 0, i32 0)) #2*/
	if ((cur_state == LEGUP_F_main_BB__130_71)) begin
		$write("RESULT: FAIL\n");
	end
end
always @(posedge clk) begin
if (reset == 1'b1)
	cur_state <= LEGUP_0;
else if (memory_controller_waitrequest == 1'd1)
	cur_state <= cur_state;
else
	cur_state <= next_state;
end

always @(*)
begin
next_state = cur_state;
case(cur_state)  // synthesis parallel_case  
LEGUP_0:
	if ((start == 1'd1))
		next_state = LEGUP_F_main_BB__0_1;
LEGUP_F_main_BB_Fill_Bufferexitii19ii_55:
	if ((main_Fill_Bufferexitii19ii_81 == 1'd1))
		next_state = LEGUP_F_main_BB_preheader1ii13ii_50;
	else if ((main_Fill_Bufferexitii19ii_81 == 1'd0))
		next_state = LEGUP_F_main_BB_loopexit2iloopexiti21ii_58;
LEGUP_F_main_BB_Fill_Bufferexitiiii_27:
	if ((main_Fill_Bufferexitiiii_33 == 1'd1))
		next_state = LEGUP_F_main_BB_preheader1iiii_22;
	else if ((main_Fill_Bufferexitiiii_33 == 1'd0))
		next_state = LEGUP_F_main_BB_loopexit2iloopexitiii_30;
LEGUP_F_main_BB_Get_Bitsexit24ii_62:
	if ((main_Get_Bitsexit24ii_90 == 1'd1))
		next_state = LEGUP_F_main_BB__91_63;
	else if ((main_Get_Bitsexit24ii_90 == 1'd0))
		next_state = LEGUP_F_main_BB__98_64;
LEGUP_F_main_BB_Get_Bitsexiti_10:
		next_state = LEGUP_F_main_BB_Get_Bitsexiti_11;
LEGUP_F_main_BB_Get_Bitsexiti_11:
		next_state = LEGUP_F_main_BB_Get_Bitsexiti_12;
LEGUP_F_main_BB_Get_Bitsexiti_12:
		next_state = LEGUP_function_call_13;
LEGUP_F_main_BB_Get_Bitsexiti_14:
	if ((main_Get_Bitsexiti_14 == 1'd1))
		next_state = LEGUP_F_main_BB__15_15;
	else if ((main_Get_Bitsexiti_14 == 1'd0))
		next_state = LEGUP_F_main_BB_decode_motion_vectorexitii_40;
LEGUP_F_main_BB_Get_Bitsexiti_8:
		next_state = LEGUP_F_main_BB_Get_Bitsexiti_9;
LEGUP_F_main_BB_Get_Bitsexiti_9:
		next_state = LEGUP_F_main_BB_Get_Bitsexiti_10;
LEGUP_F_main_BB_Get_Bitsexitii_34:
	if ((main_Get_Bitsexitii_42 == 1'd1))
		next_state = LEGUP_F_main_BB__43_35;
	else if ((main_Get_Bitsexitii_42 == 1'd0))
		next_state = LEGUP_F_main_BB__50_36;
LEGUP_F_main_BB__0_1:
		next_state = LEGUP_F_main_BB__0_2;
LEGUP_F_main_BB__0_2:
		next_state = LEGUP_F_main_BB__0_3;
LEGUP_F_main_BB__0_3:
		next_state = LEGUP_F_main_BB_lrphiiii_4;
LEGUP_F_main_BB__100_65:
	if ((main_100_104 == 1'd1))
		next_state = LEGUP_F_main_BB__105_66;
	else if ((main_100_104 == 1'd0))
		next_state = LEGUP_F_main_BB__107_67;
LEGUP_F_main_BB__105_66:
		next_state = LEGUP_F_main_BB_motion_vectorsexit_68;
LEGUP_F_main_BB__107_67:
		next_state = LEGUP_F_main_BB_motion_vectorsexit_68;
LEGUP_F_main_BB__128_70:
		next_state = LEGUP_F_main_BB__132_72;
LEGUP_F_main_BB__130_71:
		next_state = LEGUP_F_main_BB__132_72;
LEGUP_F_main_BB__132_72:
		next_state = LEGUP_0;
LEGUP_F_main_BB__15_15:
		next_state = LEGUP_F_main_BB__15_16;
LEGUP_F_main_BB__15_16:
		next_state = LEGUP_F_main_BB__15_17;
LEGUP_F_main_BB__15_17:
		next_state = LEGUP_F_main_BB__15_18;
LEGUP_F_main_BB__15_18:
	if ((main_15_20_reg == 1'd1))
		next_state = LEGUP_F_main_BB__21_19;
	else if ((main_15_20_reg == 1'd0))
		next_state = LEGUP_F_main_BB_Get_Bitsexitii_34;
LEGUP_F_main_BB__21_19:
		next_state = LEGUP_F_main_BB__21_20;
LEGUP_F_main_BB__21_20:
		next_state = LEGUP_F_main_BB__21_21;
LEGUP_F_main_BB__21_21:
	if ((main_21_23 == 1'd1))
		next_state = LEGUP_F_main_BB_loopexitiiii_28;
	else if ((main_21_23 == 1'd0))
		next_state = LEGUP_F_main_BB_preheader1iiii_22;
LEGUP_F_main_BB__43_35:
		next_state = LEGUP_F_main_BB_decode_motion_vectorexitii_40;
LEGUP_F_main_BB__50_36:
	if ((main_50_51 == 1'd1))
		next_state = LEGUP_F_main_BB__52_37;
	else if ((main_50_51 == 1'd0))
		next_state = LEGUP_F_main_BB_decode_motion_vectorexitii_40;
LEGUP_F_main_BB__52_37:
	if ((main_52_56 == 1'd1))
		next_state = LEGUP_F_main_BB__57_38;
	else if ((main_52_56 == 1'd0))
		next_state = LEGUP_F_main_BB__59_39;
LEGUP_F_main_BB__57_38:
		next_state = LEGUP_F_main_BB_decode_motion_vectorexitii_40;
LEGUP_F_main_BB__59_39:
		next_state = LEGUP_F_main_BB_decode_motion_vectorexitii_40;
LEGUP_F_main_BB__63_43:
		next_state = LEGUP_F_main_BB__63_44;
LEGUP_F_main_BB__63_44:
		next_state = LEGUP_F_main_BB__63_45;
LEGUP_F_main_BB__63_45:
		next_state = LEGUP_F_main_BB__63_46;
LEGUP_F_main_BB__63_46:
	if ((main_63_68_reg == 1'd1))
		next_state = LEGUP_F_main_BB__69_47;
	else if ((main_63_68_reg == 1'd0))
		next_state = LEGUP_F_main_BB_Get_Bitsexit24ii_62;
LEGUP_F_main_BB__69_47:
		next_state = LEGUP_F_main_BB__69_48;
LEGUP_F_main_BB__69_48:
		next_state = LEGUP_F_main_BB__69_49;
LEGUP_F_main_BB__69_49:
	if ((main_69_71 == 1'd1))
		next_state = LEGUP_F_main_BB_loopexitii20ii_56;
	else if ((main_69_71 == 1'd0))
		next_state = LEGUP_F_main_BB_preheader1ii13ii_50;
LEGUP_F_main_BB__91_63:
		next_state = LEGUP_F_main_BB_motion_vectorsexit_68;
LEGUP_F_main_BB__98_64:
	if ((main_98_99 == 1'd1))
		next_state = LEGUP_F_main_BB__100_65;
	else if ((main_98_99 == 1'd0))
		next_state = LEGUP_F_main_BB_motion_vectorsexit_68;
LEGUP_F_main_BB_decode_motion_vectorexitii_40:
		next_state = LEGUP_function_call_41;
LEGUP_F_main_BB_decode_motion_vectorexitii_42:
	if ((main_decode_motion_vectorexitii_62 == 1'd1))
		next_state = LEGUP_F_main_BB__63_43;
	else if ((main_decode_motion_vectorexitii_62 == 1'd0))
		next_state = LEGUP_F_main_BB_motion_vectorsexit_68;
LEGUP_F_main_BB_loopexit2ii23ii_60:
		next_state = LEGUP_F_main_BB_loopexit2ii23ii_61;
LEGUP_F_main_BB_loopexit2ii23ii_61:
		next_state = LEGUP_F_main_BB_Get_Bitsexit24ii_62;
LEGUP_F_main_BB_loopexit2iiii_32:
		next_state = LEGUP_F_main_BB_loopexit2iiii_33;
LEGUP_F_main_BB_loopexit2iiii_33:
		next_state = LEGUP_F_main_BB_Get_Bitsexitii_34;
LEGUP_F_main_BB_loopexit2iloopexiti21ii_58:
		next_state = LEGUP_F_main_BB_loopexit2iloopexiti21ii_59;
LEGUP_F_main_BB_loopexit2iloopexiti21ii_59:
		next_state = LEGUP_F_main_BB_loopexit2ii23ii_60;
LEGUP_F_main_BB_loopexit2iloopexitiii_30:
		next_state = LEGUP_F_main_BB_loopexit2iloopexitiii_31;
LEGUP_F_main_BB_loopexit2iloopexitiii_31:
		next_state = LEGUP_F_main_BB_loopexit2iiii_32;
LEGUP_F_main_BB_loopexitii20ii_56:
		next_state = LEGUP_F_main_BB_loopexitii20ii_57;
LEGUP_F_main_BB_loopexitii20ii_57:
		next_state = LEGUP_F_main_BB_loopexit2ii23ii_60;
LEGUP_F_main_BB_loopexitiiii_28:
		next_state = LEGUP_F_main_BB_loopexitiiii_29;
LEGUP_F_main_BB_loopexitiiii_29:
		next_state = LEGUP_F_main_BB_loopexit2iiii_32;
LEGUP_F_main_BB_lrphiiii17ii_51:
		next_state = LEGUP_F_main_BB_lrphiiii17ii_52;
LEGUP_F_main_BB_lrphiiii17ii_52:
		next_state = LEGUP_F_main_BB_lrphiiii17ii_53;
LEGUP_F_main_BB_lrphiiii17ii_53:
		next_state = LEGUP_F_main_BB_lrphiiii17ii_54;
LEGUP_F_main_BB_lrphiiii17ii_54:
	if ((main_lrphiiii17ii_exitcondiii16ii_reg == 1'd1))
		next_state = LEGUP_F_main_BB_Fill_Bufferexitii19ii_55;
	else if ((main_lrphiiii17ii_exitcondiii16ii_reg == 1'd0))
		next_state = LEGUP_F_main_BB_lrphiiii17ii_51;
LEGUP_F_main_BB_lrphiiii_4:
		next_state = LEGUP_F_main_BB_lrphiiii_5;
LEGUP_F_main_BB_lrphiiii_5:
		next_state = LEGUP_F_main_BB_lrphiiii_6;
LEGUP_F_main_BB_lrphiiii_6:
		next_state = LEGUP_F_main_BB_lrphiiii_7;
LEGUP_F_main_BB_lrphiiii_7:
	if ((main_lrphiiii_exitcondiii_reg == 1'd1))
		next_state = LEGUP_F_main_BB_Get_Bitsexiti_8;
	else if ((main_lrphiiii_exitcondiii_reg == 1'd0))
		next_state = LEGUP_F_main_BB_lrphiiii_4;
LEGUP_F_main_BB_lrphiiiiii_23:
		next_state = LEGUP_F_main_BB_lrphiiiiii_24;
LEGUP_F_main_BB_lrphiiiiii_24:
		next_state = LEGUP_F_main_BB_lrphiiiiii_25;
LEGUP_F_main_BB_lrphiiiiii_25:
		next_state = LEGUP_F_main_BB_lrphiiiiii_26;
LEGUP_F_main_BB_lrphiiiiii_26:
	if ((main_lrphiiiiii_exitcondiiiii_reg == 1'd1))
		next_state = LEGUP_F_main_BB_Fill_Bufferexitiiii_27;
	else if ((main_lrphiiiiii_exitcondiiiii_reg == 1'd0))
		next_state = LEGUP_F_main_BB_lrphiiiiii_23;
LEGUP_F_main_BB_motion_vectorsexit_68:
		next_state = LEGUP_F_main_BB_motion_vectorsexit_69;
LEGUP_F_main_BB_motion_vectorsexit_69:
	if ((main_motion_vectorsexit_127 == 1'd1))
		next_state = LEGUP_F_main_BB__128_70;
	else if ((main_motion_vectorsexit_127 == 1'd0))
		next_state = LEGUP_F_main_BB__130_71;
LEGUP_F_main_BB_preheader1ii13ii_50:
	if ((main_preheader1ii13ii_74 == 1'd1))
		next_state = LEGUP_F_main_BB_Fill_Bufferexitii19ii_55;
	else if ((main_preheader1ii13ii_74 == 1'd0))
		next_state = LEGUP_F_main_BB_lrphiiii17ii_51;
LEGUP_F_main_BB_preheader1iiii_22:
	if ((main_preheader1iiii_26 == 1'd1))
		next_state = LEGUP_F_main_BB_Fill_Bufferexitiiii_27;
	else if ((main_preheader1iiii_26 == 1'd0))
		next_state = LEGUP_F_main_BB_lrphiiiiii_23;
LEGUP_function_call_13:
	if ((Get_motion_code_finish_final == 1'd1))
		next_state = LEGUP_F_main_BB_Get_Bitsexiti_14;
LEGUP_function_call_41:
	if ((Get_motion_code_finish_final == 1'd1))
		next_state = LEGUP_F_main_BB_decode_motion_vectorexitii_42;
default:
	next_state = cur_state;
endcase

end
always @(*) begin
	/* main: %.lr.ph.i.i.i.i*/
	/*   %p2.02.i.i.i.i = phi i8* [ %3, %.lr.ph.i.i.i.i ], [ getelementptr inbounds ([2048 x i8]* @inRdbfr, i32 0, i32 0), %0 ]*/
	if (((cur_state == LEGUP_F_main_BB__0_3) & (memory_controller_waitrequest == 1'd0))) begin
		main_lrphiiii_p202iiii = `TAG_g_inRdbfr_a;
	end
	/* main: %.lr.ph.i.i.i.i*/
	/*   %p2.02.i.i.i.i = phi i8* [ %3, %.lr.ph.i.i.i.i ], [ getelementptr inbounds ([2048 x i8]* @inRdbfr, i32 0, i32 0), %0 ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_lrphiiii_7) & (memory_controller_waitrequest == 1'd0)) & (main_lrphiiii_exitcondiii_reg == 1'd0))) */ begin
		main_lrphiiii_p202iiii = main_lrphiiii_3_reg;
	end
end
always @(posedge clk) begin
	/* main: %.lr.ph.i.i.i.i*/
	/*   %p2.02.i.i.i.i = phi i8* [ %3, %.lr.ph.i.i.i.i ], [ getelementptr inbounds ([2048 x i8]* @inRdbfr, i32 0, i32 0), %0 ]*/
	if (((cur_state == LEGUP_F_main_BB__0_3) & (memory_controller_waitrequest == 1'd0))) begin
		main_lrphiiii_p202iiii_reg <= main_lrphiiii_p202iiii;
		if (start == 1'b0 && ^(main_lrphiiii_p202iiii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphiiii_p202iiii_reg"); $finish; end
	end
	/* main: %.lr.ph.i.i.i.i*/
	/*   %p2.02.i.i.i.i = phi i8* [ %3, %.lr.ph.i.i.i.i ], [ getelementptr inbounds ([2048 x i8]* @inRdbfr, i32 0, i32 0), %0 ]*/
	if ((((cur_state == LEGUP_F_main_BB_lrphiiii_7) & (memory_controller_waitrequest == 1'd0)) & (main_lrphiiii_exitcondiii_reg == 1'd0))) begin
		main_lrphiiii_p202iiii_reg <= main_lrphiiii_p202iiii;
		if (start == 1'b0 && ^(main_lrphiiii_p202iiii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphiiii_p202iiii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i.i.i.i*/
	/*   %p1.01.i.i.i.i = phi i8* [ %2, %.lr.ph.i.i.i.i ], [ getelementptr inbounds ([2048 x i8]* @ld_Rdbfr, i32 0, i32 0), %0 ]*/
	if (((cur_state == LEGUP_F_main_BB__0_3) & (memory_controller_waitrequest == 1'd0))) begin
		main_lrphiiii_p101iiii = `TAG_g_ld_Rdbfr_a;
	end
	/* main: %.lr.ph.i.i.i.i*/
	/*   %p1.01.i.i.i.i = phi i8* [ %2, %.lr.ph.i.i.i.i ], [ getelementptr inbounds ([2048 x i8]* @ld_Rdbfr, i32 0, i32 0), %0 ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_lrphiiii_7) & (memory_controller_waitrequest == 1'd0)) & (main_lrphiiii_exitcondiii_reg == 1'd0))) */ begin
		main_lrphiiii_p101iiii = main_lrphiiii_2_reg;
	end
end
always @(posedge clk) begin
	/* main: %.lr.ph.i.i.i.i*/
	/*   %p1.01.i.i.i.i = phi i8* [ %2, %.lr.ph.i.i.i.i ], [ getelementptr inbounds ([2048 x i8]* @ld_Rdbfr, i32 0, i32 0), %0 ]*/
	if (((cur_state == LEGUP_F_main_BB__0_3) & (memory_controller_waitrequest == 1'd0))) begin
		main_lrphiiii_p101iiii_reg <= main_lrphiiii_p101iiii;
		if (start == 1'b0 && ^(main_lrphiiii_p101iiii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphiiii_p101iiii_reg"); $finish; end
	end
	/* main: %.lr.ph.i.i.i.i*/
	/*   %p1.01.i.i.i.i = phi i8* [ %2, %.lr.ph.i.i.i.i ], [ getelementptr inbounds ([2048 x i8]* @ld_Rdbfr, i32 0, i32 0), %0 ]*/
	if ((((cur_state == LEGUP_F_main_BB_lrphiiii_7) & (memory_controller_waitrequest == 1'd0)) & (main_lrphiiii_exitcondiii_reg == 1'd0))) begin
		main_lrphiiii_p101iiii_reg <= main_lrphiiii_p101iiii;
		if (start == 1'b0 && ^(main_lrphiiii_p101iiii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphiiii_p101iiii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i.i.i.i*/
	/*   %1 = load i8* %p2.02.i.i.i.i, align 1, !tbaa !7*/
		main_lrphiiii_1 = memory_controller_out_a[7:0];
end
always @(posedge clk) begin
	/* main: %.lr.ph.i.i.i.i*/
	/*   %1 = load i8* %p2.02.i.i.i.i, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_main_BB_lrphiiii_6)) begin
		main_lrphiiii_1_reg <= main_lrphiiii_1;
		if (start == 1'b0 && ^(main_lrphiiii_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphiiii_1_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i.i.i.i*/
	/*   %gep_int = ptrtoint i8* %p1.01.i.i.i.i to i32*/
		main_lrphiiii_gep_int = main_lrphiiii_p101iiii_reg;
end
always @(posedge clk) begin
	/* main: %.lr.ph.i.i.i.i*/
	/*   %gep_int = ptrtoint i8* %p1.01.i.i.i.i to i32*/
	if ((cur_state == LEGUP_F_main_BB_lrphiiii_4)) begin
		main_lrphiiii_gep_int_reg <= main_lrphiiii_gep_int;
		if (start == 1'b0 && ^(main_lrphiiii_gep_int) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphiiii_gep_int_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i.i.i.i*/
	/*   %gep = add i32 %gep_int, 1*/
		main_lrphiiii_gep = main_signed_add_32_0;
end
always @(posedge clk) begin
	/* main: %.lr.ph.i.i.i.i*/
	/*   %gep = add i32 %gep_int, 1*/
	if ((cur_state == LEGUP_F_main_BB_lrphiiii_4)) begin
		main_lrphiiii_gep_reg <= main_lrphiiii_gep;
		if (start == 1'b0 && ^(main_lrphiiii_gep) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphiiii_gep_reg"); $finish; end
	end
	/* main: %.lr.ph.i.i.i.i.i.i*/
	/*   %gep4 = add i32 %gep_int3, 1*/
	if ((cur_state == LEGUP_F_main_BB_lrphiiiiii_23)) begin
		main_lrphiiii_gep_reg <= main_lrphiiiiii_gep4;
		if (start == 1'b0 && ^(main_lrphiiiiii_gep4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphiiii_gep_reg"); $finish; end
	end
	/* main: %Fill_Buffer.exit.i.i.i.i*/
	/*   %gep8 = add i32 %gep_int7, 1*/
	if ((cur_state == LEGUP_F_main_BB_Fill_Bufferexitiiii_27)) begin
		main_lrphiiii_gep_reg <= main_Fill_Bufferexitiiii_gep8;
		if (start == 1'b0 && ^(main_Fill_Bufferexitiiii_gep8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphiiii_gep_reg"); $finish; end
	end
	/* main: %.loopexit.i.i.i.i*/
	/*   %35 = add i32 %34, 1*/
	if ((cur_state == LEGUP_F_main_BB_loopexitiiii_28)) begin
		main_lrphiiii_gep_reg <= main_loopexitiiii_35;
		if (start == 1'b0 && ^(main_loopexitiiii_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphiiii_gep_reg"); $finish; end
	end
	/* main: %.loopexit2.i.loopexit.i.i.i*/
	/*   %41 = add i32 %40, %39*/
	if ((cur_state == LEGUP_F_main_BB_loopexit2iloopexitiii_30)) begin
		main_lrphiiii_gep_reg <= main_loopexit2iloopexitiii_41;
		if (start == 1'b0 && ^(main_loopexit2iloopexitiii_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphiiii_gep_reg"); $finish; end
	end
	/* main: %43*/
	/*   %44 = add nsw i32 %13, -1*/
	if ((cur_state == LEGUP_F_main_BB__43_35)) begin
		main_lrphiiii_gep_reg <= main_43_44;
		if (start == 1'b0 && ^(main_43_44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphiiii_gep_reg"); $finish; end
	end
	/* main: %52*/
	/*   %55 = add i32 %.neg2.i.i.i, 45*/
	if ((cur_state == LEGUP_F_main_BB__52_37)) begin
		main_lrphiiii_gep_reg <= main_52_55;
		if (start == 1'b0 && ^(main_52_55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphiiii_gep_reg"); $finish; end
	end
	/* main: %.lr.ph.i.i.i.i17.i.i*/
	/*   %gep12 = add i32 %gep_int11, 1*/
	if ((cur_state == LEGUP_F_main_BB_lrphiiii17ii_51)) begin
		main_lrphiiii_gep_reg <= main_lrphiiii17ii_gep12;
		if (start == 1'b0 && ^(main_lrphiiii17ii_gep12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphiiii_gep_reg"); $finish; end
	end
	/* main: %Fill_Buffer.exit.i.i19.i.i*/
	/*   %gep16 = add i32 %gep_int15, 1*/
	if ((cur_state == LEGUP_F_main_BB_Fill_Bufferexitii19ii_55)) begin
		main_lrphiiii_gep_reg <= main_Fill_Bufferexitii19ii_gep16;
		if (start == 1'b0 && ^(main_Fill_Bufferexitii19ii_gep16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphiiii_gep_reg"); $finish; end
	end
	/* main: %.loopexit.i.i20.i.i*/
	/*   %85 = add i32 -192, %66*/
	if ((cur_state == LEGUP_F_main_BB_loopexitii20ii_56)) begin
		main_lrphiiii_gep_reg <= main_loopexitii20ii_85;
		if (start == 1'b0 && ^(main_loopexitii20ii_85) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphiiii_gep_reg"); $finish; end
	end
	/* main: %.loopexit2.i.loopexit.i21.i.i*/
	/*   %89 = add i32 %88, %87*/
	if ((cur_state == LEGUP_F_main_BB_loopexit2iloopexiti21ii_58)) begin
		main_lrphiiii_gep_reg <= main_loopexit2iloopexiti21ii_89;
		if (start == 1'b0 && ^(main_loopexit2iloopexiti21ii_89) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphiiii_gep_reg"); $finish; end
	end
	/* main: %91*/
	/*   %92 = add nsw i32 %61, -1*/
	if ((cur_state == LEGUP_F_main_BB__91_63)) begin
		main_lrphiiii_gep_reg <= main_91_92;
		if (start == 1'b0 && ^(main_91_92) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphiiii_gep_reg"); $finish; end
	end
	/* main: %100*/
	/*   %103 = add i32 %.neg2.i6.i.i, 103*/
	if ((cur_state == LEGUP_F_main_BB__100_65)) begin
		main_lrphiiii_gep_reg <= main_100_103;
		if (start == 1'b0 && ^(main_100_103) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphiiii_gep_reg"); $finish; end
	end
	/* main: %motion_vectors.exit*/
	/*   %113 = add nuw nsw i32 %112, %110*/
	if ((cur_state == LEGUP_F_main_BB_motion_vectorsexit_68)) begin
		main_lrphiiii_gep_reg <= main_motion_vectorsexit_113;
		if (start == 1'b0 && ^(main_motion_vectorsexit_113) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphiiii_gep_reg"); $finish; end
	end
	/* main: %motion_vectors.exit*/
	/*   %122 = add nsw i32 %115, %121*/
	if ((cur_state == LEGUP_F_main_BB_motion_vectorsexit_69)) begin
		main_lrphiiii_gep_reg <= main_motion_vectorsexit_122;
		if (start == 1'b0 && ^(main_motion_vectorsexit_122) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphiiii_gep_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i.i.i.i*/
	/*   %2 = inttoptr i32 %gep to i8**/
		main_lrphiiii_2 = main_lrphiiii_gep;
end
always @(posedge clk) begin
	/* main: %.lr.ph.i.i.i.i*/
	/*   %2 = inttoptr i32 %gep to i8**/
	if ((cur_state == LEGUP_F_main_BB_lrphiiii_4)) begin
		main_lrphiiii_2_reg <= main_lrphiiii_2;
		if (start == 1'b0 && ^(main_lrphiiii_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphiiii_2_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i.i.i.i*/
	/*   %gep_int1 = ptrtoint i8* %p2.02.i.i.i.i to i32*/
		main_lrphiiii_gep_int1 = main_lrphiiii_p202iiii_reg;
end
always @(posedge clk) begin
	/* main: %.lr.ph.i.i.i.i*/
	/*   %gep_int1 = ptrtoint i8* %p2.02.i.i.i.i to i32*/
	if ((cur_state == LEGUP_F_main_BB_lrphiiii_4)) begin
		main_lrphiiii_gep_int1_reg <= main_lrphiiii_gep_int1;
		if (start == 1'b0 && ^(main_lrphiiii_gep_int1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphiiii_gep_int1_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i.i.i.i*/
	/*   %gep2 = add i32 %gep_int1, 1*/
		main_lrphiiii_gep2 = main_signed_add_32_1;
end
always @(posedge clk) begin
	/* main: %.lr.ph.i.i.i.i*/
	/*   %gep2 = add i32 %gep_int1, 1*/
	if ((cur_state == LEGUP_F_main_BB_lrphiiii_4)) begin
		main_lrphiiii_gep2_reg <= main_lrphiiii_gep2;
		if (start == 1'b0 && ^(main_lrphiiii_gep2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphiiii_gep2_reg"); $finish; end
	end
	/* main: %.lr.ph.i.i.i.i.i.i*/
	/*   %gep6 = add i32 %gep_int5, 1*/
	if ((cur_state == LEGUP_F_main_BB_lrphiiiiii_23)) begin
		main_lrphiiii_gep2_reg <= main_lrphiiiiii_gep6;
		if (start == 1'b0 && ^(main_lrphiiiiii_gep6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphiiii_gep2_reg"); $finish; end
	end
	/* main: %Fill_Buffer.exit.i.i.i.i*/
	/*   %32 = add nsw i32 %Incnt.1.i.i.i.i, 8*/
	if ((cur_state == LEGUP_F_main_BB_Fill_Bufferexitiiii_27)) begin
		main_lrphiiii_gep2_reg <= main_Fill_Bufferexitiiii_32;
		if (start == 1'b0 && ^(main_Fill_Bufferexitiiii_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphiiii_gep2_reg"); $finish; end
	end
	/* main: %.loopexit.i.i.i.i*/
	/*   %gep10 = add i32 %gep_int9, %35*/
	if ((cur_state == LEGUP_F_main_BB_loopexitiiii_28)) begin
		main_lrphiiii_gep2_reg <= main_loopexitiiii_gep10;
		if (start == 1'b0 && ^(main_loopexitiiii_gep10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphiiii_gep2_reg"); $finish; end
	end
	/* main: %.loopexit2.i.loopexit.i.i.i*/
	/*   %40 = add i32 -192, %18*/
	if ((cur_state == LEGUP_F_main_BB_loopexit2iloopexitiii_30)) begin
		main_lrphiiii_gep2_reg <= main_loopexit2iloopexitiii_40;
		if (start == 1'b0 && ^(main_loopexit2iloopexitiii_40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphiiii_gep2_reg"); $finish; end
	end
	/* main: %43*/
	/*   %46 = add i32 %17, 1*/
	if ((cur_state == LEGUP_F_main_BB__43_35)) begin
		main_lrphiiii_gep2_reg <= main_43_46;
		if (start == 1'b0 && ^(main_43_46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphiiii_gep2_reg"); $finish; end
	end
	/* main: %.lr.ph.i.i.i.i17.i.i*/
	/*   %gep14 = add i32 %gep_int13, 1*/
	if ((cur_state == LEGUP_F_main_BB_lrphiiii17ii_51)) begin
		main_lrphiiii_gep2_reg <= main_lrphiiii17ii_gep14;
		if (start == 1'b0 && ^(main_lrphiiii17ii_gep14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphiiii_gep2_reg"); $finish; end
	end
	/* main: %Fill_Buffer.exit.i.i19.i.i*/
	/*   %80 = add nsw i32 %Incnt.1.i.i12.i.i, 8*/
	if ((cur_state == LEGUP_F_main_BB_Fill_Bufferexitii19ii_55)) begin
		main_lrphiiii_gep2_reg <= main_Fill_Bufferexitii19ii_80;
		if (start == 1'b0 && ^(main_Fill_Bufferexitii19ii_80) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphiiii_gep2_reg"); $finish; end
	end
	/* main: %.loopexit.i.i20.i.i*/
	/*   %gep18 = add i32 %gep_int17, %83*/
	if ((cur_state == LEGUP_F_main_BB_loopexitii20ii_56)) begin
		main_lrphiiii_gep2_reg <= main_loopexitii20ii_gep18;
		if (start == 1'b0 && ^(main_loopexitii20ii_gep18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphiiii_gep2_reg"); $finish; end
	end
	/* main: %.loopexit2.i.loopexit.i21.i.i*/
	/*   %88 = add i32 -192, %66*/
	if ((cur_state == LEGUP_F_main_BB_loopexit2iloopexiti21ii_58)) begin
		main_lrphiiii_gep2_reg <= main_loopexit2iloopexiti21ii_88;
		if (start == 1'b0 && ^(main_loopexit2iloopexiti21ii_88) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphiiii_gep2_reg"); $finish; end
	end
	/* main: %91*/
	/*   %94 = add i32 %65, 1*/
	if ((cur_state == LEGUP_F_main_BB__91_63)) begin
		main_lrphiiii_gep2_reg <= main_91_94;
		if (start == 1'b0 && ^(main_91_94) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphiiii_gep2_reg"); $finish; end
	end
	/* main: %motion_vectors.exit*/
	/*   %116 = add nuw nsw i32 %115, %113*/
	if ((cur_state == LEGUP_F_main_BB_motion_vectorsexit_68)) begin
		main_lrphiiii_gep2_reg <= main_motion_vectorsexit_116;
		if (start == 1'b0 && ^(main_motion_vectorsexit_116) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphiiii_gep2_reg"); $finish; end
	end
	/* main: %motion_vectors.exit*/
	/*   %123 = add nsw i32 1, %122*/
	if ((cur_state == LEGUP_F_main_BB_motion_vectorsexit_69)) begin
		main_lrphiiii_gep2_reg <= main_motion_vectorsexit_123;
		if (start == 1'b0 && ^(main_motion_vectorsexit_123) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphiiii_gep2_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i.i.i.i*/
	/*   %3 = inttoptr i32 %gep2 to i8**/
		main_lrphiiii_3 = main_lrphiiii_gep2;
end
always @(posedge clk) begin
	/* main: %.lr.ph.i.i.i.i*/
	/*   %3 = inttoptr i32 %gep2 to i8**/
	if ((cur_state == LEGUP_F_main_BB_lrphiiii_4)) begin
		main_lrphiiii_3_reg <= main_lrphiiii_3;
		if (start == 1'b0 && ^(main_lrphiiii_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphiiii_3_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i.i.i.i*/
	/*   %exitcond.i.i.i = icmp eq i8* %3, getelementptr inbounds ([2048 x i8]* @inRdbfr, i32 1, i32 0)*/
		main_lrphiiii_exitcondiii = (main_lrphiiii_3_reg == (`TAG_g_inRdbfr_a | (2048 * 32'd1)));
end
always @(posedge clk) begin
	/* main: %.lr.ph.i.i.i.i*/
	/*   %exitcond.i.i.i = icmp eq i8* %3, getelementptr inbounds ([2048 x i8]* @inRdbfr, i32 1, i32 0)*/
	if ((cur_state == LEGUP_F_main_BB_lrphiiii_5)) begin
		main_lrphiiii_exitcondiii_reg <= main_lrphiiii_exitcondiii;
		if (start == 1'b0 && ^(main_lrphiiii_exitcondiii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphiiii_exitcondiii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %Get_Bits.exit.i*/
	/*   %4 = load i8* getelementptr inbounds ([2048 x i8]* @ld_Rdbfr, i32 0, i32 0), align 1, !tbaa !7*/
		main_Get_Bitsexiti_4 = memory_controller_out_a[7:0];
end
always @(posedge clk) begin
	/* main: %Get_Bits.exit.i*/
	/*   %4 = load i8* getelementptr inbounds ([2048 x i8]* @ld_Rdbfr, i32 0, i32 0), align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_main_BB_Get_Bitsexiti_10)) begin
		main_Get_Bitsexiti_4_reg <= main_Get_Bitsexiti_4;
		if (start == 1'b0 && ^(main_Get_Bitsexiti_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_Get_Bitsexiti_4_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %Get_Bits.exit.i*/
	/*   %5 = zext i8 %4 to i32*/
		main_Get_Bitsexiti_5 = main_Get_Bitsexiti_4;
end
always @(posedge clk) begin
	/* main: %Get_Bits.exit.i*/
	/*   %5 = zext i8 %4 to i32*/
	if ((cur_state == LEGUP_F_main_BB_Get_Bitsexiti_10)) begin
		main_Get_Bitsexiti_5_reg <= main_Get_Bitsexiti_5;
		if (start == 1'b0 && ^(main_Get_Bitsexiti_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_Get_Bitsexiti_5_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %Get_Bits.exit.i*/
	/*   %6 = shl nuw i32 %5, 24*/
		main_Get_Bitsexiti_6 = (main_Get_Bitsexiti_5 <<< (32'd24 % 32));
end
always @(posedge clk) begin
	/* main: %Get_Bits.exit.i*/
	/*   %6 = shl nuw i32 %5, 24*/
	if ((cur_state == LEGUP_F_main_BB_Get_Bitsexiti_10)) begin
		main_Get_Bitsexiti_6_reg <= main_Get_Bitsexiti_6;
		if (start == 1'b0 && ^(main_Get_Bitsexiti_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_Get_Bitsexiti_6_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %Get_Bits.exit.i*/
	/*   %7 = or i32 %6, 68157440*/
		main_Get_Bitsexiti_7 = (main_Get_Bitsexiti_6 | 32'd68157440);
end
always @(posedge clk) begin
	/* main: %Get_Bits.exit.i*/
	/*   %7 = or i32 %6, 68157440*/
	if ((cur_state == LEGUP_F_main_BB_Get_Bitsexiti_10)) begin
		main_Get_Bitsexiti_7_reg <= main_Get_Bitsexiti_7;
		if (start == 1'b0 && ^(main_Get_Bitsexiti_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_Get_Bitsexiti_7_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %Get_Bits.exit.i*/
	/*   %.pre.i = load i8* getelementptr inbounds ([2048 x i8]* @ld_Rdbfr, i32 0, i32 1), align 1, !tbaa !7*/
		main_Get_Bitsexiti_prei = memory_controller_out_b[7:0];
end
always @(posedge clk) begin
	/* main: %Get_Bits.exit.i*/
	/*   %.pre.i = load i8* getelementptr inbounds ([2048 x i8]* @ld_Rdbfr, i32 0, i32 1), align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_main_BB_Get_Bitsexiti_10)) begin
		main_Get_Bitsexiti_prei_reg <= main_Get_Bitsexiti_prei;
		if (start == 1'b0 && ^(main_Get_Bitsexiti_prei) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_Get_Bitsexiti_prei_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %Get_Bits.exit.i*/
	/*   %phitmp.i = zext i8 %.pre.i to i32*/
		main_Get_Bitsexiti_phitmpi = main_Get_Bitsexiti_prei;
end
always @(posedge clk) begin
	/* main: %Get_Bits.exit.i*/
	/*   %phitmp.i = zext i8 %.pre.i to i32*/
	if ((cur_state == LEGUP_F_main_BB_Get_Bitsexiti_10)) begin
		main_Get_Bitsexiti_phitmpi_reg <= main_Get_Bitsexiti_phitmpi;
		if (start == 1'b0 && ^(main_Get_Bitsexiti_phitmpi) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_Get_Bitsexiti_phitmpi_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %Get_Bits.exit.i*/
	/*   %phitmp3.i = shl nuw nsw i32 %phitmp.i, 16*/
		main_Get_Bitsexiti_phitmp3i = (main_Get_Bitsexiti_phitmpi <<< (32'd16 % 32));
end
always @(posedge clk) begin
	/* main: %Get_Bits.exit.i*/
	/*   %phitmp3.i = shl nuw nsw i32 %phitmp.i, 16*/
	if ((cur_state == LEGUP_F_main_BB_Get_Bitsexiti_10)) begin
		main_Get_Bitsexiti_phitmp3i_reg <= main_Get_Bitsexiti_phitmp3i;
		if (start == 1'b0 && ^(main_Get_Bitsexiti_phitmp3i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_Get_Bitsexiti_phitmp3i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %Get_Bits.exit.i*/
	/*   %8 = or i32 %7, %phitmp3.i*/
		main_Get_Bitsexiti_8 = (main_Get_Bitsexiti_7 | main_Get_Bitsexiti_phitmp3i);
end
always @(posedge clk) begin
	/* main: %Get_Bits.exit.i*/
	/*   %8 = or i32 %7, %phitmp3.i*/
	if ((cur_state == LEGUP_F_main_BB_Get_Bitsexiti_10)) begin
		main_Get_Bitsexiti_8_reg <= main_Get_Bitsexiti_8;
		if (start == 1'b0 && ^(main_Get_Bitsexiti_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_Get_Bitsexiti_8_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %Get_Bits.exit.i*/
	/*   %.pre1.i = load i8* getelementptr inbounds ([2048 x i8]* @ld_Rdbfr, i32 0, i32 2), align 1, !tbaa !7*/
		main_Get_Bitsexiti_pre1i = memory_controller_out_a[7:0];
end
always @(posedge clk) begin
	/* main: %Get_Bits.exit.i*/
	/*   %.pre1.i = load i8* getelementptr inbounds ([2048 x i8]* @ld_Rdbfr, i32 0, i32 2), align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_main_BB_Get_Bitsexiti_11)) begin
		main_Get_Bitsexiti_pre1i_reg <= main_Get_Bitsexiti_pre1i;
		if (start == 1'b0 && ^(main_Get_Bitsexiti_pre1i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_Get_Bitsexiti_pre1i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %Get_Bits.exit.i*/
	/*   %phitmp4.i = zext i8 %.pre1.i to i32*/
		main_Get_Bitsexiti_phitmp4i = main_Get_Bitsexiti_pre1i;
end
always @(posedge clk) begin
	/* main: %Get_Bits.exit.i*/
	/*   %phitmp4.i = zext i8 %.pre1.i to i32*/
	if ((cur_state == LEGUP_F_main_BB_Get_Bitsexiti_11)) begin
		main_Get_Bitsexiti_phitmp4i_reg <= main_Get_Bitsexiti_phitmp4i;
		if (start == 1'b0 && ^(main_Get_Bitsexiti_phitmp4i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_Get_Bitsexiti_phitmp4i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %Get_Bits.exit.i*/
	/*   %phitmp5.i = shl nuw nsw i32 %phitmp4.i, 8*/
		main_Get_Bitsexiti_phitmp5i = (main_Get_Bitsexiti_phitmp4i <<< (32'd8 % 32));
end
always @(posedge clk) begin
	/* main: %Get_Bits.exit.i*/
	/*   %phitmp5.i = shl nuw nsw i32 %phitmp4.i, 8*/
	if ((cur_state == LEGUP_F_main_BB_Get_Bitsexiti_11)) begin
		main_Get_Bitsexiti_phitmp5i_reg <= main_Get_Bitsexiti_phitmp5i;
		if (start == 1'b0 && ^(main_Get_Bitsexiti_phitmp5i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_Get_Bitsexiti_phitmp5i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %Get_Bits.exit.i*/
	/*   %9 = or i32 %8, %phitmp5.i*/
		main_Get_Bitsexiti_9 = (main_Get_Bitsexiti_8_reg | main_Get_Bitsexiti_phitmp5i);
end
always @(posedge clk) begin
	/* main: %Get_Bits.exit.i*/
	/*   %9 = or i32 %8, %phitmp5.i*/
	if ((cur_state == LEGUP_F_main_BB_Get_Bitsexiti_11)) begin
		main_Get_Bitsexiti_9_reg <= main_Get_Bitsexiti_9;
		if (start == 1'b0 && ^(main_Get_Bitsexiti_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_Get_Bitsexiti_9_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %Get_Bits.exit.i*/
	/*   %.pre2.i = load i8* getelementptr inbounds ([2048 x i8]* @ld_Rdbfr, i32 0, i32 3), align 1, !tbaa !7*/
		main_Get_Bitsexiti_pre2i = memory_controller_out_b[7:0];
end
always @(posedge clk) begin
	/* main: %Get_Bits.exit.i*/
	/*   %.pre2.i = load i8* getelementptr inbounds ([2048 x i8]* @ld_Rdbfr, i32 0, i32 3), align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_main_BB_Get_Bitsexiti_11)) begin
		main_Get_Bitsexiti_pre2i_reg <= main_Get_Bitsexiti_pre2i;
		if (start == 1'b0 && ^(main_Get_Bitsexiti_pre2i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_Get_Bitsexiti_pre2i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %Get_Bits.exit.i*/
	/*   %phitmp6.i = zext i8 %.pre2.i to i32*/
		main_Get_Bitsexiti_phitmp6i = main_Get_Bitsexiti_pre2i;
end
always @(posedge clk) begin
	/* main: %Get_Bits.exit.i*/
	/*   %phitmp6.i = zext i8 %.pre2.i to i32*/
	if ((cur_state == LEGUP_F_main_BB_Get_Bitsexiti_11)) begin
		main_Get_Bitsexiti_phitmp6i_reg <= main_Get_Bitsexiti_phitmp6i;
		if (start == 1'b0 && ^(main_Get_Bitsexiti_phitmp6i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_Get_Bitsexiti_phitmp6i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %Get_Bits.exit.i*/
	/*   %10 = or i32 %9, %phitmp6.i*/
		main_Get_Bitsexiti_10 = (main_Get_Bitsexiti_9 | main_Get_Bitsexiti_phitmp6i);
end
always @(posedge clk) begin
	/* main: %Get_Bits.exit.i*/
	/*   %10 = or i32 %9, %phitmp6.i*/
	if ((cur_state == LEGUP_F_main_BB_Get_Bitsexiti_11)) begin
		main_Get_Bitsexiti_10_reg <= main_Get_Bitsexiti_10;
		if (start == 1'b0 && ^(main_Get_Bitsexiti_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_Get_Bitsexiti_10_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %Get_Bits.exit.i*/
	/*   %11 = lshr i32 %10, 31*/
		main_Get_Bitsexiti_11 = (main_Get_Bitsexiti_10 >>> (32'd31 % 32));
end
always @(posedge clk) begin
	/* main: %Get_Bits.exit.i*/
	/*   %11 = lshr i32 %10, 31*/
	if ((cur_state == LEGUP_F_main_BB_Get_Bitsexiti_11)) begin
		main_Get_Bitsexiti_11_reg <= main_Get_Bitsexiti_11;
		if (start == 1'b0 && ^(main_Get_Bitsexiti_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_Get_Bitsexiti_11_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %Get_Bits.exit.i*/
	/*   %12 = shl i32 %10, 1*/
		main_Get_Bitsexiti_12 = (main_Get_Bitsexiti_10 <<< (32'd1 % 32));
end
always @(posedge clk) begin
	/* main: %Get_Bits.exit.i*/
	/*   %12 = shl i32 %10, 1*/
	if ((cur_state == LEGUP_F_main_BB_Get_Bitsexiti_11)) begin
		main_Get_Bitsexiti_12_reg <= main_Get_Bitsexiti_12;
		if (start == 1'b0 && ^(main_Get_Bitsexiti_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_Get_Bitsexiti_12_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %Get_Bits.exit.i*/
	/*   %13 = call i32 @Get_motion_code() #2*/
		main_Get_Bitsexiti_13 = Get_motion_code_return_val_reg;
end
always @(posedge clk) begin
	/* main: %Get_Bits.exit.i*/
	/*   %13 = call i32 @Get_motion_code() #2*/
	if ((cur_state == LEGUP_function_call_13)) begin
		main_Get_Bitsexiti_13_reg <= main_Get_Bitsexiti_13;
		if (start == 1'b0 && ^(main_Get_Bitsexiti_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_Get_Bitsexiti_13_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %Get_Bits.exit.i*/
	/*   %14 = icmp ne i32 %13, 0*/
		main_Get_Bitsexiti_14 = (main_Get_Bitsexiti_13_reg != 32'd0);
end
always @(posedge clk) begin
	/* main: %Get_Bits.exit.i*/
	/*   %14 = icmp ne i32 %13, 0*/
	if ((cur_state == LEGUP_F_main_BB_Get_Bitsexiti_14)) begin
		main_Get_Bitsexiti_14_reg <= main_Get_Bitsexiti_14;
		if (start == 1'b0 && ^(main_Get_Bitsexiti_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_Get_Bitsexiti_14_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %15*/
	/*   %16 = load i32* @ld_Bfr, align 4, !tbaa !5*/
		main_15_16 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %15*/
	/*   %16 = load i32* @ld_Bfr, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__15_17)) begin
		main_15_16_reg <= main_15_16;
		if (start == 1'b0 && ^(main_15_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_15_16_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %15*/
	/*   %17 = lshr i32 %16, 24*/
		main_15_17 = (main_15_16 >>> (32'd24 % 32));
end
always @(posedge clk) begin
	/* main: %15*/
	/*   %17 = lshr i32 %16, 24*/
	if ((cur_state == LEGUP_F_main_BB__15_17)) begin
		main_15_17_reg <= main_15_17;
		if (start == 1'b0 && ^(main_15_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_15_17_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %15*/
	/*   %18 = load i32* @ld_Incnt, align 4, !tbaa !5*/
		main_15_18 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %15*/
	/*   %18 = load i32* @ld_Incnt, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__15_17)) begin
		main_15_18_reg <= main_15_18;
		if (start == 1'b0 && ^(main_15_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_15_18_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %15*/
	/*   %19 = sub nsw i32 %18, 200*/
		main_15_19 = main_signed_subtract_32_0;
end
always @(posedge clk) begin
	/* main: %15*/
	/*   %19 = sub nsw i32 %18, 200*/
	if ((cur_state == LEGUP_F_main_BB__15_17)) begin
		main_15_19_reg <= main_15_19;
		if (start == 1'b0 && ^(main_15_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_15_19_reg"); $finish; end
	end
	/* main: %52*/
	/*   %.neg2.i.i.i = sub i32 %.neg1.i.i.i, %54*/
	if ((cur_state == LEGUP_F_main_BB__52_37)) begin
		main_15_19_reg <= main_52_neg2iii;
		if (start == 1'b0 && ^(main_52_neg2iii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_15_19_reg"); $finish; end
	end
	/* main: %63*/
	/*   %67 = sub nsw i32 %66, 200*/
	if ((cur_state == LEGUP_F_main_BB__63_45)) begin
		main_15_19_reg <= main_63_67;
		if (start == 1'b0 && ^(main_63_67) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_15_19_reg"); $finish; end
	end
	/* main: %100*/
	/*   %.neg2.i6.i.i = sub i32 %.neg1.i5.i.i, %102*/
	if ((cur_state == LEGUP_F_main_BB__100_65)) begin
		main_15_19_reg <= main_100_neg2i6ii;
		if (start == 1'b0 && ^(main_100_neg2i6ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_15_19_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %15*/
	/*   %20 = icmp slt i32 %19, 25*/
		main_15_20 = ($signed(main_15_19) < $signed(32'd25));
end
always @(posedge clk) begin
	/* main: %15*/
	/*   %20 = icmp slt i32 %19, 25*/
	if ((cur_state == LEGUP_F_main_BB__15_17)) begin
		main_15_20_reg <= main_15_20;
		if (start == 1'b0 && ^(main_15_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_15_20_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %21*/
	/*   %22 = load i8** @ld_Rdptr, align 4, !tbaa !1*/
		main_21_22 = memory_controller_out_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
always @(posedge clk) begin
	/* main: %21*/
	/*   %22 = load i8** @ld_Rdptr, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__21_21)) begin
		main_21_22_reg <= main_21_22;
		if (start == 1'b0 && ^(main_21_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_21_22_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %21*/
	/*   %23 = icmp ult i8* %22, getelementptr inbounds ([2048 x i8]* @ld_Rdbfr, i32 0, i32 2044)*/
		main_21_23 = (main_21_22 < (`TAG_g_ld_Rdbfr_a | (1 * 32'd2044)));
end
always @(posedge clk) begin
	/* main: %21*/
	/*   %23 = icmp ult i8* %22, getelementptr inbounds ([2048 x i8]* @ld_Rdbfr, i32 0, i32 2044)*/
	if ((cur_state == LEGUP_F_main_BB__21_21)) begin
		main_21_23_reg <= main_21_23;
		if (start == 1'b0 && ^(main_21_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_21_23_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %21*/
	/*   %24 = sub i32 224, %18*/
		main_21_24 = main_signed_subtract_32_0;
end
always @(posedge clk) begin
	/* main: %21*/
	/*   %24 = sub i32 224, %18*/
	if ((cur_state == LEGUP_F_main_BB__21_19)) begin
		main_21_24_reg <= main_21_24;
		if (start == 1'b0 && ^(main_21_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_21_24_reg"); $finish; end
	end
	/* main: %69*/
	/*   %72 = sub i32 224, %66*/
	if ((cur_state == LEGUP_F_main_BB__69_47)) begin
		main_21_24_reg <= main_69_72;
		if (start == 1'b0 && ^(main_69_72) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_21_24_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader1.i.i.i.i*/
	/*   %25 = phi i8* [ %31, %Fill_Buffer.exit.i.i.i.i ], [ %22, %21 ]*/
	if ((((cur_state == LEGUP_F_main_BB__21_21) & (memory_controller_waitrequest == 1'd0)) & (main_21_23 == 1'd0))) begin
		main_preheader1iiii_25 = main_21_22;
	end
	/* main: %.preheader1.i.i.i.i*/
	/*   %25 = phi i8* [ %31, %Fill_Buffer.exit.i.i.i.i ], [ %22, %21 ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_Fill_Bufferexitiiii_27) & (memory_controller_waitrequest == 1'd0)) & (main_Fill_Bufferexitiiii_33 == 1'd1))) */ begin
		main_preheader1iiii_25 = main_Fill_Bufferexitiiii_31;
	end
end
always @(posedge clk) begin
	/* main: %.preheader1.i.i.i.i*/
	/*   %25 = phi i8* [ %31, %Fill_Buffer.exit.i.i.i.i ], [ %22, %21 ]*/
	if ((((cur_state == LEGUP_F_main_BB__21_21) & (memory_controller_waitrequest == 1'd0)) & (main_21_23 == 1'd0))) begin
		main_preheader1iiii_25_reg <= main_preheader1iiii_25;
		if (start == 1'b0 && ^(main_preheader1iiii_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader1iiii_25_reg"); $finish; end
	end
	/* main: %.preheader1.i.i.i.i*/
	/*   %25 = phi i8* [ %31, %Fill_Buffer.exit.i.i.i.i ], [ %22, %21 ]*/
	if ((((cur_state == LEGUP_F_main_BB_Fill_Bufferexitiiii_27) & (memory_controller_waitrequest == 1'd0)) & (main_Fill_Bufferexitiiii_33 == 1'd1))) begin
		main_preheader1iiii_25_reg <= main_preheader1iiii_25;
		if (start == 1'b0 && ^(main_preheader1iiii_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader1iiii_25_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader1.i.i.i.i*/
	/*   %Incnt.1.i.i.i.i = phi i32 [ %32, %Fill_Buffer.exit.i.i.i.i ], [ %19, %21 ]*/
	if ((((cur_state == LEGUP_F_main_BB__21_21) & (memory_controller_waitrequest == 1'd0)) & (main_21_23 == 1'd0))) begin
		main_preheader1iiii_Incnt1iiii = main_15_19_reg;
	end
	/* main: %.preheader1.i.i.i.i*/
	/*   %Incnt.1.i.i.i.i = phi i32 [ %32, %Fill_Buffer.exit.i.i.i.i ], [ %19, %21 ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_Fill_Bufferexitiiii_27) & (memory_controller_waitrequest == 1'd0)) & (main_Fill_Bufferexitiiii_33 == 1'd1))) */ begin
		main_preheader1iiii_Incnt1iiii = main_Fill_Bufferexitiiii_32;
	end
end
always @(posedge clk) begin
	/* main: %.preheader1.i.i.i.i*/
	/*   %Incnt.1.i.i.i.i = phi i32 [ %32, %Fill_Buffer.exit.i.i.i.i ], [ %19, %21 ]*/
	if ((((cur_state == LEGUP_F_main_BB__21_21) & (memory_controller_waitrequest == 1'd0)) & (main_21_23 == 1'd0))) begin
		main_preheader1iiii_Incnt1iiii_reg <= main_preheader1iiii_Incnt1iiii;
		if (start == 1'b0 && ^(main_preheader1iiii_Incnt1iiii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader1iiii_Incnt1iiii_reg"); $finish; end
	end
	/* main: %.preheader1.i.i.i.i*/
	/*   %Incnt.1.i.i.i.i = phi i32 [ %32, %Fill_Buffer.exit.i.i.i.i ], [ %19, %21 ]*/
	if ((((cur_state == LEGUP_F_main_BB_Fill_Bufferexitiiii_27) & (memory_controller_waitrequest == 1'd0)) & (main_Fill_Bufferexitiiii_33 == 1'd1))) begin
		main_preheader1iiii_Incnt1iiii_reg <= main_preheader1iiii_Incnt1iiii;
		if (start == 1'b0 && ^(main_preheader1iiii_Incnt1iiii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader1iiii_Incnt1iiii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader1.i.i.i.i*/
	/*   %26 = icmp ult i8* %25, getelementptr inbounds ([2048 x i8]* @ld_Rdbfr, i32 1, i32 0)*/
		main_preheader1iiii_26 = (main_preheader1iiii_25_reg < (`TAG_g_ld_Rdbfr_a | (2048 * 32'd1)));
end
always @(posedge clk) begin
	/* main: %.preheader1.i.i.i.i*/
	/*   %26 = icmp ult i8* %25, getelementptr inbounds ([2048 x i8]* @ld_Rdbfr, i32 1, i32 0)*/
	if ((cur_state == LEGUP_F_main_BB_preheader1iiii_22)) begin
		main_preheader1iiii_26_reg <= main_preheader1iiii_26;
		if (start == 1'b0 && ^(main_preheader1iiii_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader1iiii_26_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i.i.i.i.i.i*/
	/*   %p2.02.i.i.i.i.i.i = phi i8* [ %29, %.lr.ph.i.i.i.i.i.i ], [ getelementptr inbounds ([2048 x i8]* @inRdbfr, i32 0, i32 0), %.preheader1.i.i.i.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_preheader1iiii_22) & (memory_controller_waitrequest == 1'd0)) & (main_preheader1iiii_26 == 1'd0))) begin
		main_lrphiiiiii_p202iiiiii = `TAG_g_inRdbfr_a;
	end
	/* main: %.lr.ph.i.i.i.i.i.i*/
	/*   %p2.02.i.i.i.i.i.i = phi i8* [ %29, %.lr.ph.i.i.i.i.i.i ], [ getelementptr inbounds ([2048 x i8]* @inRdbfr, i32 0, i32 0), %.preheader1.i.i.i.i ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_lrphiiiiii_26) & (memory_controller_waitrequest == 1'd0)) & (main_lrphiiiiii_exitcondiiiii_reg == 1'd0))) */ begin
		main_lrphiiiiii_p202iiiiii = main_lrphiiiiii_29_reg;
	end
end
always @(posedge clk) begin
	/* main: %.lr.ph.i.i.i.i.i.i*/
	/*   %p2.02.i.i.i.i.i.i = phi i8* [ %29, %.lr.ph.i.i.i.i.i.i ], [ getelementptr inbounds ([2048 x i8]* @inRdbfr, i32 0, i32 0), %.preheader1.i.i.i.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_preheader1iiii_22) & (memory_controller_waitrequest == 1'd0)) & (main_preheader1iiii_26 == 1'd0))) begin
		main_lrphiiiiii_p202iiiiii_reg <= main_lrphiiiiii_p202iiiiii;
		if (start == 1'b0 && ^(main_lrphiiiiii_p202iiiiii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphiiiiii_p202iiiiii_reg"); $finish; end
	end
	/* main: %.lr.ph.i.i.i.i.i.i*/
	/*   %p2.02.i.i.i.i.i.i = phi i8* [ %29, %.lr.ph.i.i.i.i.i.i ], [ getelementptr inbounds ([2048 x i8]* @inRdbfr, i32 0, i32 0), %.preheader1.i.i.i.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_lrphiiiiii_26) & (memory_controller_waitrequest == 1'd0)) & (main_lrphiiiiii_exitcondiiiii_reg == 1'd0))) begin
		main_lrphiiiiii_p202iiiiii_reg <= main_lrphiiiiii_p202iiiiii;
		if (start == 1'b0 && ^(main_lrphiiiiii_p202iiiiii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphiiiiii_p202iiiiii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i.i.i.i.i.i*/
	/*   %p1.01.i.i.i.i.i.i = phi i8* [ %28, %.lr.ph.i.i.i.i.i.i ], [ getelementptr inbounds ([2048 x i8]* @ld_Rdbfr, i32 0, i32 0), %.preheader1.i.i.i.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_preheader1iiii_22) & (memory_controller_waitrequest == 1'd0)) & (main_preheader1iiii_26 == 1'd0))) begin
		main_lrphiiiiii_p101iiiiii = `TAG_g_ld_Rdbfr_a;
	end
	/* main: %.lr.ph.i.i.i.i.i.i*/
	/*   %p1.01.i.i.i.i.i.i = phi i8* [ %28, %.lr.ph.i.i.i.i.i.i ], [ getelementptr inbounds ([2048 x i8]* @ld_Rdbfr, i32 0, i32 0), %.preheader1.i.i.i.i ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_lrphiiiiii_26) & (memory_controller_waitrequest == 1'd0)) & (main_lrphiiiiii_exitcondiiiii_reg == 1'd0))) */ begin
		main_lrphiiiiii_p101iiiiii = main_lrphiiiiii_28_reg;
	end
end
always @(posedge clk) begin
	/* main: %.lr.ph.i.i.i.i.i.i*/
	/*   %p1.01.i.i.i.i.i.i = phi i8* [ %28, %.lr.ph.i.i.i.i.i.i ], [ getelementptr inbounds ([2048 x i8]* @ld_Rdbfr, i32 0, i32 0), %.preheader1.i.i.i.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_preheader1iiii_22) & (memory_controller_waitrequest == 1'd0)) & (main_preheader1iiii_26 == 1'd0))) begin
		main_lrphiiiiii_p101iiiiii_reg <= main_lrphiiiiii_p101iiiiii;
		if (start == 1'b0 && ^(main_lrphiiiiii_p101iiiiii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphiiiiii_p101iiiiii_reg"); $finish; end
	end
	/* main: %.lr.ph.i.i.i.i.i.i*/
	/*   %p1.01.i.i.i.i.i.i = phi i8* [ %28, %.lr.ph.i.i.i.i.i.i ], [ getelementptr inbounds ([2048 x i8]* @ld_Rdbfr, i32 0, i32 0), %.preheader1.i.i.i.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_lrphiiiiii_26) & (memory_controller_waitrequest == 1'd0)) & (main_lrphiiiiii_exitcondiiiii_reg == 1'd0))) begin
		main_lrphiiiiii_p101iiiiii_reg <= main_lrphiiiiii_p101iiiiii;
		if (start == 1'b0 && ^(main_lrphiiiiii_p101iiiiii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphiiiiii_p101iiiiii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i.i.i.i.i.i*/
	/*   %27 = load i8* %p2.02.i.i.i.i.i.i, align 1, !tbaa !7*/
		main_lrphiiiiii_27 = memory_controller_out_a[7:0];
end
always @(posedge clk) begin
	/* main: %.lr.ph.i.i.i.i.i.i*/
	/*   %27 = load i8* %p2.02.i.i.i.i.i.i, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_main_BB_lrphiiiiii_25)) begin
		main_lrphiiiiii_27_reg <= main_lrphiiiiii_27;
		if (start == 1'b0 && ^(main_lrphiiiiii_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphiiiiii_27_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i.i.i.i.i.i*/
	/*   %gep_int3 = ptrtoint i8* %p1.01.i.i.i.i.i.i to i32*/
		main_lrphiiiiii_gep_int3 = main_lrphiiiiii_p101iiiiii_reg;
end
always @(posedge clk) begin
	/* main: %.lr.ph.i.i.i.i.i.i*/
	/*   %gep_int3 = ptrtoint i8* %p1.01.i.i.i.i.i.i to i32*/
	if ((cur_state == LEGUP_F_main_BB_lrphiiiiii_23)) begin
		main_lrphiiiiii_gep_int3_reg <= main_lrphiiiiii_gep_int3;
		if (start == 1'b0 && ^(main_lrphiiiiii_gep_int3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphiiiiii_gep_int3_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i.i.i.i.i.i*/
	/*   %gep4 = add i32 %gep_int3, 1*/
		main_lrphiiiiii_gep4 = main_signed_add_32_0;
end
always @(*) begin
/* main: %.lr.ph.i.i.i.i.i.i*/
/*   %gep4 = add i32 %gep_int3, 1*/
	main_lrphiiiiii_gep4_reg = main_lrphiiii_gep_reg;
end
always @(*) begin
	/* main: %.lr.ph.i.i.i.i.i.i*/
	/*   %28 = inttoptr i32 %gep4 to i8**/
		main_lrphiiiiii_28 = main_lrphiiiiii_gep4;
end
always @(posedge clk) begin
	/* main: %.lr.ph.i.i.i.i.i.i*/
	/*   %28 = inttoptr i32 %gep4 to i8**/
	if ((cur_state == LEGUP_F_main_BB_lrphiiiiii_23)) begin
		main_lrphiiiiii_28_reg <= main_lrphiiiiii_28;
		if (start == 1'b0 && ^(main_lrphiiiiii_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphiiiiii_28_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i.i.i.i.i.i*/
	/*   %gep_int5 = ptrtoint i8* %p2.02.i.i.i.i.i.i to i32*/
		main_lrphiiiiii_gep_int5 = main_lrphiiiiii_p202iiiiii_reg;
end
always @(posedge clk) begin
	/* main: %.lr.ph.i.i.i.i.i.i*/
	/*   %gep_int5 = ptrtoint i8* %p2.02.i.i.i.i.i.i to i32*/
	if ((cur_state == LEGUP_F_main_BB_lrphiiiiii_23)) begin
		main_lrphiiiiii_gep_int5_reg <= main_lrphiiiiii_gep_int5;
		if (start == 1'b0 && ^(main_lrphiiiiii_gep_int5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphiiiiii_gep_int5_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i.i.i.i.i.i*/
	/*   %gep6 = add i32 %gep_int5, 1*/
		main_lrphiiiiii_gep6 = main_signed_add_32_1;
end
always @(*) begin
/* main: %.lr.ph.i.i.i.i.i.i*/
/*   %gep6 = add i32 %gep_int5, 1*/
	main_lrphiiiiii_gep6_reg = main_lrphiiii_gep2_reg;
end
always @(*) begin
	/* main: %.lr.ph.i.i.i.i.i.i*/
	/*   %29 = inttoptr i32 %gep6 to i8**/
		main_lrphiiiiii_29 = main_lrphiiiiii_gep6;
end
always @(posedge clk) begin
	/* main: %.lr.ph.i.i.i.i.i.i*/
	/*   %29 = inttoptr i32 %gep6 to i8**/
	if ((cur_state == LEGUP_F_main_BB_lrphiiiiii_23)) begin
		main_lrphiiiiii_29_reg <= main_lrphiiiiii_29;
		if (start == 1'b0 && ^(main_lrphiiiiii_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphiiiiii_29_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i.i.i.i.i.i*/
	/*   %exitcond.i.i.i.i.i = icmp eq i8* %29, getelementptr inbounds ([2048 x i8]* @inRdbfr, i32 1, i32 0)*/
		main_lrphiiiiii_exitcondiiiii = (main_lrphiiiiii_29_reg == (`TAG_g_inRdbfr_a | (2048 * 32'd1)));
end
always @(posedge clk) begin
	/* main: %.lr.ph.i.i.i.i.i.i*/
	/*   %exitcond.i.i.i.i.i = icmp eq i8* %29, getelementptr inbounds ([2048 x i8]* @inRdbfr, i32 1, i32 0)*/
	if ((cur_state == LEGUP_F_main_BB_lrphiiiiii_24)) begin
		main_lrphiiiiii_exitcondiiiii_reg <= main_lrphiiiiii_exitcondiiiii;
		if (start == 1'b0 && ^(main_lrphiiiiii_exitcondiiiii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphiiiiii_exitcondiiiii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %Fill_Buffer.exit.i.i.i.i*/
	/*   %30 = phi i8* [ %25, %.preheader1.i.i.i.i ], [ getelementptr inbounds ([2048 x i8]* @ld_Rdbfr, i32 0, i32 0), %.lr.ph.i.i.i.i.i.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_preheader1iiii_22) & (memory_controller_waitrequest == 1'd0)) & (main_preheader1iiii_26 == 1'd1))) begin
		main_Fill_Bufferexitiiii_30 = main_preheader1iiii_25_reg;
	end
	/* main: %Fill_Buffer.exit.i.i.i.i*/
	/*   %30 = phi i8* [ %25, %.preheader1.i.i.i.i ], [ getelementptr inbounds ([2048 x i8]* @ld_Rdbfr, i32 0, i32 0), %.lr.ph.i.i.i.i.i.i ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_lrphiiiiii_26) & (memory_controller_waitrequest == 1'd0)) & (main_lrphiiiiii_exitcondiiiii_reg == 1'd1))) */ begin
		main_Fill_Bufferexitiiii_30 = `TAG_g_ld_Rdbfr_a;
	end
end
always @(posedge clk) begin
	/* main: %Fill_Buffer.exit.i.i.i.i*/
	/*   %30 = phi i8* [ %25, %.preheader1.i.i.i.i ], [ getelementptr inbounds ([2048 x i8]* @ld_Rdbfr, i32 0, i32 0), %.lr.ph.i.i.i.i.i.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_preheader1iiii_22) & (memory_controller_waitrequest == 1'd0)) & (main_preheader1iiii_26 == 1'd1))) begin
		main_Fill_Bufferexitiiii_30_reg <= main_Fill_Bufferexitiiii_30;
		if (start == 1'b0 && ^(main_Fill_Bufferexitiiii_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_Fill_Bufferexitiiii_30_reg"); $finish; end
	end
	/* main: %Fill_Buffer.exit.i.i.i.i*/
	/*   %30 = phi i8* [ %25, %.preheader1.i.i.i.i ], [ getelementptr inbounds ([2048 x i8]* @ld_Rdbfr, i32 0, i32 0), %.lr.ph.i.i.i.i.i.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_lrphiiiiii_26) & (memory_controller_waitrequest == 1'd0)) & (main_lrphiiiiii_exitcondiiiii_reg == 1'd1))) begin
		main_Fill_Bufferexitiiii_30_reg <= main_Fill_Bufferexitiiii_30;
		if (start == 1'b0 && ^(main_Fill_Bufferexitiiii_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_Fill_Bufferexitiiii_30_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %Fill_Buffer.exit.i.i.i.i*/
	/*   %gep_int7 = ptrtoint i8* %30 to i32*/
		main_Fill_Bufferexitiiii_gep_int7 = main_Fill_Bufferexitiiii_30_reg;
end
always @(posedge clk) begin
	/* main: %Fill_Buffer.exit.i.i.i.i*/
	/*   %gep_int7 = ptrtoint i8* %30 to i32*/
	if ((cur_state == LEGUP_F_main_BB_Fill_Bufferexitiiii_27)) begin
		main_Fill_Bufferexitiiii_gep_int7_reg <= main_Fill_Bufferexitiiii_gep_int7;
		if (start == 1'b0 && ^(main_Fill_Bufferexitiiii_gep_int7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_Fill_Bufferexitiiii_gep_int7_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %Fill_Buffer.exit.i.i.i.i*/
	/*   %gep8 = add i32 %gep_int7, 1*/
		main_Fill_Bufferexitiiii_gep8 = main_signed_add_32_0;
end
always @(*) begin
/* main: %Fill_Buffer.exit.i.i.i.i*/
/*   %gep8 = add i32 %gep_int7, 1*/
	main_Fill_Bufferexitiiii_gep8_reg = main_lrphiiii_gep_reg;
end
always @(*) begin
	/* main: %Fill_Buffer.exit.i.i.i.i*/
	/*   %31 = inttoptr i32 %gep8 to i8**/
		main_Fill_Bufferexitiiii_31 = main_Fill_Bufferexitiiii_gep8;
end
always @(posedge clk) begin
	/* main: %Fill_Buffer.exit.i.i.i.i*/
	/*   %31 = inttoptr i32 %gep8 to i8**/
	if ((cur_state == LEGUP_F_main_BB_Fill_Bufferexitiiii_27)) begin
		main_Fill_Bufferexitiiii_31_reg <= main_Fill_Bufferexitiiii_31;
		if (start == 1'b0 && ^(main_Fill_Bufferexitiiii_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_Fill_Bufferexitiiii_31_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %Fill_Buffer.exit.i.i.i.i*/
	/*   %32 = add nsw i32 %Incnt.1.i.i.i.i, 8*/
		main_Fill_Bufferexitiiii_32 = main_signed_add_32_1;
end
always @(*) begin
/* main: %Fill_Buffer.exit.i.i.i.i*/
/*   %32 = add nsw i32 %Incnt.1.i.i.i.i, 8*/
	main_Fill_Bufferexitiiii_32_reg = main_lrphiiii_gep2_reg;
end
always @(*) begin
	/* main: %Fill_Buffer.exit.i.i.i.i*/
	/*   %33 = icmp slt i32 %32, 25*/
		main_Fill_Bufferexitiiii_33 = ($signed(main_Fill_Bufferexitiiii_32) < $signed(32'd25));
end
always @(posedge clk) begin
	/* main: %Fill_Buffer.exit.i.i.i.i*/
	/*   %33 = icmp slt i32 %32, 25*/
	if ((cur_state == LEGUP_F_main_BB_Fill_Bufferexitiiii_27)) begin
		main_Fill_Bufferexitiiii_33_reg <= main_Fill_Bufferexitiiii_33;
		if (start == 1'b0 && ^(main_Fill_Bufferexitiiii_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_Fill_Bufferexitiiii_33_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.loopexit.i.i.i.i*/
	/*   %34 = lshr i32 %24, 3*/
		main_loopexitiiii_34 = (main_21_24_reg >>> (32'd3 % 32));
end
always @(posedge clk) begin
	/* main: %.loopexit.i.i.i.i*/
	/*   %34 = lshr i32 %24, 3*/
	if ((cur_state == LEGUP_F_main_BB_loopexitiiii_28)) begin
		main_loopexitiiii_34_reg <= main_loopexitiiii_34;
		if (start == 1'b0 && ^(main_loopexitiiii_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_loopexitiiii_34_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.loopexit.i.i.i.i*/
	/*   %35 = add i32 %34, 1*/
		main_loopexitiiii_35 = main_signed_add_32_0;
end
always @(*) begin
/* main: %.loopexit.i.i.i.i*/
/*   %35 = add i32 %34, 1*/
	main_loopexitiiii_35_reg = main_lrphiiii_gep_reg;
end
always @(*) begin
	/* main: %.loopexit.i.i.i.i*/
	/*   %gep_int9 = ptrtoint i8* %22 to i32*/
		main_loopexitiiii_gep_int9 = main_21_22_reg;
end
always @(posedge clk) begin
	/* main: %.loopexit.i.i.i.i*/
	/*   %gep_int9 = ptrtoint i8* %22 to i32*/
	if ((cur_state == LEGUP_F_main_BB_loopexitiiii_28)) begin
		main_loopexitiiii_gep_int9_reg <= main_loopexitiiii_gep_int9;
		if (start == 1'b0 && ^(main_loopexitiiii_gep_int9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_loopexitiiii_gep_int9_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.loopexit.i.i.i.i*/
	/*   %gep10 = add i32 %gep_int9, %35*/
		main_loopexitiiii_gep10 = main_signed_add_32_1;
end
always @(*) begin
/* main: %.loopexit.i.i.i.i*/
/*   %gep10 = add i32 %gep_int9, %35*/
	main_loopexitiiii_gep10_reg = main_lrphiiii_gep2_reg;
end
always @(*) begin
	/* main: %.loopexit.i.i.i.i*/
	/*   %scevgep30 = inttoptr i32 %gep10 to i8**/
		main_loopexitiiii_scevgep30 = main_loopexitiiii_gep10;
end
always @(posedge clk) begin
	/* main: %.loopexit.i.i.i.i*/
	/*   %scevgep30 = inttoptr i32 %gep10 to i8**/
	if ((cur_state == LEGUP_F_main_BB_loopexitiiii_28)) begin
		main_loopexitiiii_scevgep30_reg <= main_loopexitiiii_scevgep30;
		if (start == 1'b0 && ^(main_loopexitiiii_scevgep30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_loopexitiiii_scevgep30_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.loopexit.i.i.i.i*/
	/*   %36 = and i32 %24, -8*/
		main_loopexitiiii_36 = (main_21_24_reg & -32'd8);
end
always @(posedge clk) begin
	/* main: %.loopexit.i.i.i.i*/
	/*   %36 = and i32 %24, -8*/
	if ((cur_state == LEGUP_F_main_BB_loopexitiiii_28)) begin
		main_loopexitiiii_36_reg <= main_loopexitiiii_36;
		if (start == 1'b0 && ^(main_loopexitiiii_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_loopexitiiii_36_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.loopexit.i.i.i.i*/
	/*   %37 = add i32 -192, %18*/
		main_loopexitiiii_37 = main_signed_add_32_2;
end
always @(posedge clk) begin
	/* main: %.loopexit.i.i.i.i*/
	/*   %37 = add i32 -192, %18*/
	if ((cur_state == LEGUP_F_main_BB_loopexitiiii_28)) begin
		main_loopexitiiii_37_reg <= main_loopexitiiii_37;
		if (start == 1'b0 && ^(main_loopexitiiii_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_loopexitiiii_37_reg"); $finish; end
	end
	/* main: %43*/
	/*   %48 = add i32 %47, 45*/
	if ((cur_state == LEGUP_F_main_BB__43_35)) begin
		main_loopexitiiii_37_reg <= main_43_48;
		if (start == 1'b0 && ^(main_43_48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_loopexitiiii_37_reg"); $finish; end
	end
	/* main: %.loopexit.i.i20.i.i*/
	/*   %86 = add i32 %85, %84*/
	if ((cur_state == LEGUP_F_main_BB_loopexitii20ii_56)) begin
		main_loopexitiiii_37_reg <= main_loopexitii20ii_86;
		if (start == 1'b0 && ^(main_loopexitii20ii_86) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_loopexitiiii_37_reg"); $finish; end
	end
	/* main: %91*/
	/*   %96 = add i32 %95, 103*/
	if ((cur_state == LEGUP_F_main_BB__91_63)) begin
		main_loopexitiiii_37_reg <= main_91_96;
		if (start == 1'b0 && ^(main_91_96) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_loopexitiiii_37_reg"); $finish; end
	end
	/* main: %motion_vectors.exit*/
	/*   %120 = add nuw nsw i32 %110, %119*/
	if ((cur_state == LEGUP_F_main_BB_motion_vectorsexit_68)) begin
		main_loopexitiiii_37_reg <= main_motion_vectorsexit_120;
		if (start == 1'b0 && ^(main_motion_vectorsexit_120) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_loopexitiiii_37_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.loopexit.i.i.i.i*/
	/*   %38 = add i32 %37, %36*/
		main_loopexitiiii_38 = main_signed_add_32_6;
end
always @(posedge clk) begin
	/* main: %.loopexit.i.i.i.i*/
	/*   %38 = add i32 %37, %36*/
	if ((cur_state == LEGUP_F_main_BB_loopexitiiii_28)) begin
		main_loopexitiiii_38_reg <= main_loopexitiiii_38;
		if (start == 1'b0 && ^(main_loopexitiiii_38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_loopexitiiii_38_reg"); $finish; end
	end
	/* main: %43*/
	/*   %47 = add i32 %46, %45*/
	if ((cur_state == LEGUP_F_main_BB__43_35)) begin
		main_loopexitiiii_38_reg <= main_43_47;
		if (start == 1'b0 && ^(main_43_47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_loopexitiiii_38_reg"); $finish; end
	end
	/* main: %.loopexit.i.i20.i.i*/
	/*   %83 = add i32 %82, 1*/
	if ((cur_state == LEGUP_F_main_BB_loopexitii20ii_56)) begin
		main_loopexitiiii_38_reg <= main_loopexitii20ii_83;
		if (start == 1'b0 && ^(main_loopexitii20ii_83) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_loopexitiiii_38_reg"); $finish; end
	end
	/* main: %91*/
	/*   %95 = add i32 %94, %93*/
	if ((cur_state == LEGUP_F_main_BB__91_63)) begin
		main_loopexitiiii_38_reg <= main_91_95;
		if (start == 1'b0 && ^(main_91_95) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_loopexitiiii_38_reg"); $finish; end
	end
	/* main: %motion_vectors.exit*/
	/*   %121 = add nsw i32 %112, %120*/
	if ((cur_state == LEGUP_F_main_BB_motion_vectorsexit_68)) begin
		main_loopexitiiii_38_reg <= main_motion_vectorsexit_121;
		if (start == 1'b0 && ^(main_motion_vectorsexit_121) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_loopexitiiii_38_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.loopexit2.i.loopexit.i.i.i*/
	/*   %.lcssa2 = phi i8* [ %31, %Fill_Buffer.exit.i.i.i.i ]*/
		main_loopexit2iloopexitiii_lcssa2 = main_Fill_Bufferexitiiii_31;
end
always @(posedge clk) begin
	/* main: %.loopexit2.i.loopexit.i.i.i*/
	/*   %.lcssa2 = phi i8* [ %31, %Fill_Buffer.exit.i.i.i.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_Fill_Bufferexitiiii_27) & (memory_controller_waitrequest == 1'd0)) & (main_Fill_Bufferexitiiii_33 == 1'd0))) begin
		main_loopexit2iloopexitiii_lcssa2_reg <= main_loopexit2iloopexitiii_lcssa2;
		if (start == 1'b0 && ^(main_loopexit2iloopexitiii_lcssa2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_loopexit2iloopexitiii_lcssa2_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.loopexit2.i.loopexit.i.i.i*/
	/*   %39 = and i32 %24, -8*/
		main_loopexit2iloopexitiii_39 = (main_21_24_reg & -32'd8);
end
always @(posedge clk) begin
	/* main: %.loopexit2.i.loopexit.i.i.i*/
	/*   %39 = and i32 %24, -8*/
	if ((cur_state == LEGUP_F_main_BB_loopexit2iloopexitiii_30)) begin
		main_loopexit2iloopexitiii_39_reg <= main_loopexit2iloopexitiii_39;
		if (start == 1'b0 && ^(main_loopexit2iloopexitiii_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_loopexit2iloopexitiii_39_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.loopexit2.i.loopexit.i.i.i*/
	/*   %40 = add i32 -192, %18*/
		main_loopexit2iloopexitiii_40 = main_signed_add_32_1;
end
always @(*) begin
/* main: %.loopexit2.i.loopexit.i.i.i*/
/*   %40 = add i32 -192, %18*/
	main_loopexit2iloopexitiii_40_reg = main_lrphiiii_gep2_reg;
end
always @(*) begin
	/* main: %.loopexit2.i.loopexit.i.i.i*/
	/*   %41 = add i32 %40, %39*/
		main_loopexit2iloopexitiii_41 = main_signed_add_32_0;
end
always @(*) begin
/* main: %.loopexit2.i.loopexit.i.i.i*/
/*   %41 = add i32 %40, %39*/
	main_loopexit2iloopexitiii_41_reg = main_lrphiiii_gep_reg;
end
always @(*) begin
	/* main: %.loopexit2.i.i.i.i*/
	/*   %Incnt.2.i.i.i.i = phi i32 [ %38, %.loopexit.i.i.i.i ], [ %41, %.loopexit2.i.loopexit.i.i.i ]*/
	if (((cur_state == LEGUP_F_main_BB_loopexitiiii_29) & (memory_controller_waitrequest == 1'd0))) begin
		main_loopexit2iiii_Incnt2iiii = main_loopexitiiii_38_reg;
	end
	/* main: %.loopexit2.i.i.i.i*/
	/*   %Incnt.2.i.i.i.i = phi i32 [ %38, %.loopexit.i.i.i.i ], [ %41, %.loopexit2.i.loopexit.i.i.i ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_loopexit2iloopexitiii_31) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_loopexit2iiii_Incnt2iiii = main_loopexit2iloopexitiii_41_reg;
	end
end
always @(posedge clk) begin
	/* main: %.loopexit2.i.i.i.i*/
	/*   %Incnt.2.i.i.i.i = phi i32 [ %38, %.loopexit.i.i.i.i ], [ %41, %.loopexit2.i.loopexit.i.i.i ]*/
	if (((cur_state == LEGUP_F_main_BB_loopexitiiii_29) & (memory_controller_waitrequest == 1'd0))) begin
		main_loopexit2iiii_Incnt2iiii_reg <= main_loopexit2iiii_Incnt2iiii;
		if (start == 1'b0 && ^(main_loopexit2iiii_Incnt2iiii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_loopexit2iiii_Incnt2iiii_reg"); $finish; end
	end
	/* main: %.loopexit2.i.i.i.i*/
	/*   %Incnt.2.i.i.i.i = phi i32 [ %38, %.loopexit.i.i.i.i ], [ %41, %.loopexit2.i.loopexit.i.i.i ]*/
	if (((cur_state == LEGUP_F_main_BB_loopexit2iloopexitiii_31) & (memory_controller_waitrequest == 1'd0))) begin
		main_loopexit2iiii_Incnt2iiii_reg <= main_loopexit2iiii_Incnt2iiii;
		if (start == 1'b0 && ^(main_loopexit2iiii_Incnt2iiii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_loopexit2iiii_Incnt2iiii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %Get_Bits.exit.i.i*/
	/*   %42 = icmp sgt i32 %13, 0*/
		main_Get_Bitsexitii_42 = ($signed(main_Get_Bitsexiti_13_reg) > $signed(32'd0));
end
always @(posedge clk) begin
	/* main: %Get_Bits.exit.i.i*/
	/*   %42 = icmp sgt i32 %13, 0*/
	if ((cur_state == LEGUP_F_main_BB_Get_Bitsexitii_34)) begin
		main_Get_Bitsexitii_42_reg <= main_Get_Bitsexitii_42;
		if (start == 1'b0 && ^(main_Get_Bitsexitii_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_Get_Bitsexitii_42_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %43*/
	/*   %44 = add nsw i32 %13, -1*/
		main_43_44 = main_signed_add_32_0;
end
always @(*) begin
/* main: %43*/
/*   %44 = add nsw i32 %13, -1*/
	main_43_44_reg = main_lrphiiii_gep_reg;
end
always @(*) begin
	/* main: %43*/
	/*   %45 = shl i32 %44, 8*/
		main_43_45 = (main_43_44 <<< (32'd8 % 32));
end
always @(posedge clk) begin
	/* main: %43*/
	/*   %45 = shl i32 %44, 8*/
	if ((cur_state == LEGUP_F_main_BB__43_35)) begin
		main_43_45_reg <= main_43_45;
		if (start == 1'b0 && ^(main_43_45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_43_45_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %43*/
	/*   %46 = add i32 %17, 1*/
		main_43_46 = main_signed_add_32_1;
end
always @(*) begin
/* main: %43*/
/*   %46 = add i32 %17, 1*/
	main_43_46_reg = main_lrphiiii_gep2_reg;
end
always @(*) begin
	/* main: %43*/
	/*   %47 = add i32 %46, %45*/
		main_43_47 = main_signed_add_32_6;
end
always @(*) begin
/* main: %43*/
/*   %47 = add i32 %46, %45*/
	main_43_47_reg = main_loopexitiiii_38_reg;
end
always @(*) begin
	/* main: %43*/
	/*   %48 = add i32 %47, 45*/
		main_43_48 = main_signed_add_32_2;
end
always @(*) begin
/* main: %43*/
/*   %48 = add i32 %47, 45*/
	main_43_48_reg = main_loopexitiiii_37_reg;
end
always @(*) begin
	/* main: %43*/
	/*   %49 = icmp sge i32 %48, 4096*/
		main_43_49 = ($signed(main_43_48) >= $signed(32'd4096));
end
always @(posedge clk) begin
	/* main: %43*/
	/*   %49 = icmp sge i32 %48, 4096*/
	if ((cur_state == LEGUP_F_main_BB__43_35)) begin
		main_43_49_reg <= main_43_49;
		if (start == 1'b0 && ^(main_43_49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_43_49_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %43*/
	/*   %..i.i.i = select i1 %49, i32 0, i32 %48*/
		main_43_iii = (main_43_49 ? 32'd0 : main_43_48);
end
always @(posedge clk) begin
	/* main: %43*/
	/*   %..i.i.i = select i1 %49, i32 0, i32 %48*/
	if ((cur_state == LEGUP_F_main_BB__43_35)) begin
		main_43_iii_reg <= main_43_iii;
		if (start == 1'b0 && ^(main_43_iii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_43_iii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %50*/
	/*   %51 = icmp slt i32 %13, 0*/
		main_50_51 = ($signed(main_Get_Bitsexiti_13_reg) < $signed(32'd0));
end
always @(posedge clk) begin
	/* main: %50*/
	/*   %51 = icmp slt i32 %13, 0*/
	if ((cur_state == LEGUP_F_main_BB__50_36)) begin
		main_50_51_reg <= main_50_51;
		if (start == 1'b0 && ^(main_50_51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_50_51_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %52*/
	/*   %53 = xor i32 %13, -1*/
		main_52_53 = (main_Get_Bitsexiti_13_reg ^ -32'd1);
end
always @(posedge clk) begin
	/* main: %52*/
	/*   %53 = xor i32 %13, -1*/
	if ((cur_state == LEGUP_F_main_BB__52_37)) begin
		main_52_53_reg <= main_52_53;
		if (start == 1'b0 && ^(main_52_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_52_53_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %52*/
	/*   %54 = shl i32 %53, 8*/
		main_52_54 = (main_52_53 <<< (32'd8 % 32));
end
always @(posedge clk) begin
	/* main: %52*/
	/*   %54 = shl i32 %53, 8*/
	if ((cur_state == LEGUP_F_main_BB__52_37)) begin
		main_52_54_reg <= main_52_54;
		if (start == 1'b0 && ^(main_52_54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_52_54_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %52*/
	/*   %.neg1.i.i.i = xor i32 %17, -1*/
		main_52_neg1iii = (main_15_17_reg ^ -32'd1);
end
always @(posedge clk) begin
	/* main: %52*/
	/*   %.neg1.i.i.i = xor i32 %17, -1*/
	if ((cur_state == LEGUP_F_main_BB__52_37)) begin
		main_52_neg1iii_reg <= main_52_neg1iii;
		if (start == 1'b0 && ^(main_52_neg1iii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_52_neg1iii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %52*/
	/*   %.neg2.i.i.i = sub i32 %.neg1.i.i.i, %54*/
		main_52_neg2iii = main_signed_subtract_32_0;
end
always @(*) begin
/* main: %52*/
/*   %.neg2.i.i.i = sub i32 %.neg1.i.i.i, %54*/
	main_52_neg2iii_reg = main_15_19_reg;
end
always @(*) begin
	/* main: %52*/
	/*   %55 = add i32 %.neg2.i.i.i, 45*/
		main_52_55 = main_signed_add_32_0;
end
always @(*) begin
/* main: %52*/
/*   %55 = add i32 %.neg2.i.i.i, 45*/
	main_52_55_reg = main_lrphiiii_gep_reg;
end
always @(*) begin
	/* main: %52*/
	/*   %56 = icmp slt i32 %55, -4096*/
		main_52_56 = ($signed(main_52_55) < $signed(-32'd4096));
end
always @(posedge clk) begin
	/* main: %52*/
	/*   %56 = icmp slt i32 %55, -4096*/
	if ((cur_state == LEGUP_F_main_BB__52_37)) begin
		main_52_56_reg <= main_52_56;
		if (start == 1'b0 && ^(main_52_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_52_56_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %57*/
	/*   %58 = add nsw i32 %55, 8192*/
		main_57_58 = main_signed_add_32_0;
end
always @(posedge clk) begin
	/* main: %57*/
	/*   %58 = add nsw i32 %55, 8192*/
	if ((cur_state == LEGUP_F_main_BB__57_38)) begin
		main_57_58_reg <= main_57_58;
		if (start == 1'b0 && ^(main_57_58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_57_58_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %59*/
	/*   %60 = sub nsw i32 %55, 8192*/
		main_59_60 = main_signed_subtract_32_0;
end
always @(posedge clk) begin
	/* main: %59*/
	/*   %60 = sub nsw i32 %55, 8192*/
	if ((cur_state == LEGUP_F_main_BB__59_39)) begin
		main_59_60_reg <= main_59_60;
		if (start == 1'b0 && ^(main_59_60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_59_60_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %decode_motion_vector.exit.i.i*/
	/*   %vec.0.i.i.i = phi i32 [ %..i.i.i, %43 ], [ %58, %57 ], [ %60, %59 ], [ 45, %50 ], [ 45, %Get_Bits.exit.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_Get_Bitsexiti_14) & (memory_controller_waitrequest == 1'd0)) & (main_Get_Bitsexiti_14 == 1'd0))) begin
		main_decode_motion_vectorexitii_vec0iii = 32'd45;
	end
	/* main: %decode_motion_vector.exit.i.i*/
	/*   %vec.0.i.i.i = phi i32 [ %..i.i.i, %43 ], [ %58, %57 ], [ %60, %59 ], [ 45, %50 ], [ 45, %Get_Bits.exit.i ]*/
	else if (((cur_state == LEGUP_F_main_BB__43_35) & (memory_controller_waitrequest == 1'd0))) begin
		main_decode_motion_vectorexitii_vec0iii = main_43_iii;
	end
	/* main: %decode_motion_vector.exit.i.i*/
	/*   %vec.0.i.i.i = phi i32 [ %..i.i.i, %43 ], [ %58, %57 ], [ %60, %59 ], [ 45, %50 ], [ 45, %Get_Bits.exit.i ]*/
	else if ((((cur_state == LEGUP_F_main_BB__50_36) & (memory_controller_waitrequest == 1'd0)) & (main_50_51 == 1'd0))) begin
		main_decode_motion_vectorexitii_vec0iii = 32'd45;
	end
	/* main: %decode_motion_vector.exit.i.i*/
	/*   %vec.0.i.i.i = phi i32 [ %..i.i.i, %43 ], [ %58, %57 ], [ %60, %59 ], [ 45, %50 ], [ 45, %Get_Bits.exit.i ]*/
	else if (((cur_state == LEGUP_F_main_BB__57_38) & (memory_controller_waitrequest == 1'd0))) begin
		main_decode_motion_vectorexitii_vec0iii = main_57_58;
	end
	/* main: %decode_motion_vector.exit.i.i*/
	/*   %vec.0.i.i.i = phi i32 [ %..i.i.i, %43 ], [ %58, %57 ], [ %60, %59 ], [ 45, %50 ], [ 45, %Get_Bits.exit.i ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__59_39) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_decode_motion_vectorexitii_vec0iii = main_59_60;
	end
end
always @(posedge clk) begin
	/* main: %decode_motion_vector.exit.i.i*/
	/*   %vec.0.i.i.i = phi i32 [ %..i.i.i, %43 ], [ %58, %57 ], [ %60, %59 ], [ 45, %50 ], [ 45, %Get_Bits.exit.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_Get_Bitsexiti_14) & (memory_controller_waitrequest == 1'd0)) & (main_Get_Bitsexiti_14 == 1'd0))) begin
		main_decode_motion_vectorexitii_vec0iii_reg <= main_decode_motion_vectorexitii_vec0iii;
		if (start == 1'b0 && ^(main_decode_motion_vectorexitii_vec0iii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_decode_motion_vectorexitii_vec0iii_reg"); $finish; end
	end
	/* main: %decode_motion_vector.exit.i.i*/
	/*   %vec.0.i.i.i = phi i32 [ %..i.i.i, %43 ], [ %58, %57 ], [ %60, %59 ], [ 45, %50 ], [ 45, %Get_Bits.exit.i ]*/
	if (((cur_state == LEGUP_F_main_BB__43_35) & (memory_controller_waitrequest == 1'd0))) begin
		main_decode_motion_vectorexitii_vec0iii_reg <= main_decode_motion_vectorexitii_vec0iii;
		if (start == 1'b0 && ^(main_decode_motion_vectorexitii_vec0iii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_decode_motion_vectorexitii_vec0iii_reg"); $finish; end
	end
	/* main: %decode_motion_vector.exit.i.i*/
	/*   %vec.0.i.i.i = phi i32 [ %..i.i.i, %43 ], [ %58, %57 ], [ %60, %59 ], [ 45, %50 ], [ 45, %Get_Bits.exit.i ]*/
	if ((((cur_state == LEGUP_F_main_BB__50_36) & (memory_controller_waitrequest == 1'd0)) & (main_50_51 == 1'd0))) begin
		main_decode_motion_vectorexitii_vec0iii_reg <= main_decode_motion_vectorexitii_vec0iii;
		if (start == 1'b0 && ^(main_decode_motion_vectorexitii_vec0iii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_decode_motion_vectorexitii_vec0iii_reg"); $finish; end
	end
	/* main: %decode_motion_vector.exit.i.i*/
	/*   %vec.0.i.i.i = phi i32 [ %..i.i.i, %43 ], [ %58, %57 ], [ %60, %59 ], [ 45, %50 ], [ 45, %Get_Bits.exit.i ]*/
	if (((cur_state == LEGUP_F_main_BB__57_38) & (memory_controller_waitrequest == 1'd0))) begin
		main_decode_motion_vectorexitii_vec0iii_reg <= main_decode_motion_vectorexitii_vec0iii;
		if (start == 1'b0 && ^(main_decode_motion_vectorexitii_vec0iii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_decode_motion_vectorexitii_vec0iii_reg"); $finish; end
	end
	/* main: %decode_motion_vector.exit.i.i*/
	/*   %vec.0.i.i.i = phi i32 [ %..i.i.i, %43 ], [ %58, %57 ], [ %60, %59 ], [ 45, %50 ], [ 45, %Get_Bits.exit.i ]*/
	if (((cur_state == LEGUP_F_main_BB__59_39) & (memory_controller_waitrequest == 1'd0))) begin
		main_decode_motion_vectorexitii_vec0iii_reg <= main_decode_motion_vectorexitii_vec0iii;
		if (start == 1'b0 && ^(main_decode_motion_vectorexitii_vec0iii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_decode_motion_vectorexitii_vec0iii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %decode_motion_vector.exit.i.i*/
	/*   %61 = call i32 @Get_motion_code() #2*/
		main_decode_motion_vectorexitii_61 = Get_motion_code_return_val_reg;
end
always @(posedge clk) begin
	/* main: %decode_motion_vector.exit.i.i*/
	/*   %61 = call i32 @Get_motion_code() #2*/
	if ((cur_state == LEGUP_function_call_41)) begin
		main_decode_motion_vectorexitii_61_reg <= main_decode_motion_vectorexitii_61;
		if (start == 1'b0 && ^(main_decode_motion_vectorexitii_61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_decode_motion_vectorexitii_61_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %decode_motion_vector.exit.i.i*/
	/*   %62 = icmp ne i32 %61, 0*/
		main_decode_motion_vectorexitii_62 = (main_decode_motion_vectorexitii_61_reg != 32'd0);
end
always @(posedge clk) begin
	/* main: %decode_motion_vector.exit.i.i*/
	/*   %62 = icmp ne i32 %61, 0*/
	if ((cur_state == LEGUP_F_main_BB_decode_motion_vectorexitii_42)) begin
		main_decode_motion_vectorexitii_62_reg <= main_decode_motion_vectorexitii_62;
		if (start == 1'b0 && ^(main_decode_motion_vectorexitii_62) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_decode_motion_vectorexitii_62_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %63*/
	/*   %64 = load i32* @ld_Bfr, align 4, !tbaa !5*/
		main_63_64 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %63*/
	/*   %64 = load i32* @ld_Bfr, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__63_45)) begin
		main_63_64_reg <= main_63_64;
		if (start == 1'b0 && ^(main_63_64) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_63_64_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %63*/
	/*   %65 = lshr i32 %64, 24*/
		main_63_65 = (main_63_64 >>> (32'd24 % 32));
end
always @(posedge clk) begin
	/* main: %63*/
	/*   %65 = lshr i32 %64, 24*/
	if ((cur_state == LEGUP_F_main_BB__63_45)) begin
		main_63_65_reg <= main_63_65;
		if (start == 1'b0 && ^(main_63_65) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_63_65_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %63*/
	/*   %66 = load i32* @ld_Incnt, align 4, !tbaa !5*/
		main_63_66 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %63*/
	/*   %66 = load i32* @ld_Incnt, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__63_45)) begin
		main_63_66_reg <= main_63_66;
		if (start == 1'b0 && ^(main_63_66) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_63_66_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %63*/
	/*   %67 = sub nsw i32 %66, 200*/
		main_63_67 = main_signed_subtract_32_0;
end
always @(*) begin
/* main: %63*/
/*   %67 = sub nsw i32 %66, 200*/
	main_63_67_reg = main_15_19_reg;
end
always @(*) begin
	/* main: %63*/
	/*   %68 = icmp slt i32 %67, 25*/
		main_63_68 = ($signed(main_63_67) < $signed(32'd25));
end
always @(posedge clk) begin
	/* main: %63*/
	/*   %68 = icmp slt i32 %67, 25*/
	if ((cur_state == LEGUP_F_main_BB__63_45)) begin
		main_63_68_reg <= main_63_68;
		if (start == 1'b0 && ^(main_63_68) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_63_68_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %69*/
	/*   %70 = load i8** @ld_Rdptr, align 4, !tbaa !1*/
		main_69_70 = memory_controller_out_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
always @(posedge clk) begin
	/* main: %69*/
	/*   %70 = load i8** @ld_Rdptr, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__69_49)) begin
		main_69_70_reg <= main_69_70;
		if (start == 1'b0 && ^(main_69_70) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_69_70_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %69*/
	/*   %71 = icmp ult i8* %70, getelementptr inbounds ([2048 x i8]* @ld_Rdbfr, i32 0, i32 2044)*/
		main_69_71 = (main_69_70 < (`TAG_g_ld_Rdbfr_a | (1 * 32'd2044)));
end
always @(posedge clk) begin
	/* main: %69*/
	/*   %71 = icmp ult i8* %70, getelementptr inbounds ([2048 x i8]* @ld_Rdbfr, i32 0, i32 2044)*/
	if ((cur_state == LEGUP_F_main_BB__69_49)) begin
		main_69_71_reg <= main_69_71;
		if (start == 1'b0 && ^(main_69_71) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_69_71_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %69*/
	/*   %72 = sub i32 224, %66*/
		main_69_72 = main_signed_subtract_32_0;
end
always @(*) begin
/* main: %69*/
/*   %72 = sub i32 224, %66*/
	main_69_72_reg = main_21_24_reg;
end
always @(*) begin
	/* main: %.preheader1.i.i13.i.i*/
	/*   %73 = phi i8* [ %79, %Fill_Buffer.exit.i.i19.i.i ], [ %70, %69 ]*/
	if ((((cur_state == LEGUP_F_main_BB__69_49) & (memory_controller_waitrequest == 1'd0)) & (main_69_71 == 1'd0))) begin
		main_preheader1ii13ii_73 = main_69_70;
	end
	/* main: %.preheader1.i.i13.i.i*/
	/*   %73 = phi i8* [ %79, %Fill_Buffer.exit.i.i19.i.i ], [ %70, %69 ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_Fill_Bufferexitii19ii_55) & (memory_controller_waitrequest == 1'd0)) & (main_Fill_Bufferexitii19ii_81 == 1'd1))) */ begin
		main_preheader1ii13ii_73 = main_Fill_Bufferexitii19ii_79;
	end
end
always @(posedge clk) begin
	/* main: %.preheader1.i.i13.i.i*/
	/*   %73 = phi i8* [ %79, %Fill_Buffer.exit.i.i19.i.i ], [ %70, %69 ]*/
	if ((((cur_state == LEGUP_F_main_BB__69_49) & (memory_controller_waitrequest == 1'd0)) & (main_69_71 == 1'd0))) begin
		main_preheader1ii13ii_73_reg <= main_preheader1ii13ii_73;
		if (start == 1'b0 && ^(main_preheader1ii13ii_73) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader1ii13ii_73_reg"); $finish; end
	end
	/* main: %.preheader1.i.i13.i.i*/
	/*   %73 = phi i8* [ %79, %Fill_Buffer.exit.i.i19.i.i ], [ %70, %69 ]*/
	if ((((cur_state == LEGUP_F_main_BB_Fill_Bufferexitii19ii_55) & (memory_controller_waitrequest == 1'd0)) & (main_Fill_Bufferexitii19ii_81 == 1'd1))) begin
		main_preheader1ii13ii_73_reg <= main_preheader1ii13ii_73;
		if (start == 1'b0 && ^(main_preheader1ii13ii_73) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader1ii13ii_73_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader1.i.i13.i.i*/
	/*   %Incnt.1.i.i12.i.i = phi i32 [ %80, %Fill_Buffer.exit.i.i19.i.i ], [ %67, %69 ]*/
	if ((((cur_state == LEGUP_F_main_BB__69_49) & (memory_controller_waitrequest == 1'd0)) & (main_69_71 == 1'd0))) begin
		main_preheader1ii13ii_Incnt1ii12ii = main_63_67_reg;
	end
	/* main: %.preheader1.i.i13.i.i*/
	/*   %Incnt.1.i.i12.i.i = phi i32 [ %80, %Fill_Buffer.exit.i.i19.i.i ], [ %67, %69 ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_Fill_Bufferexitii19ii_55) & (memory_controller_waitrequest == 1'd0)) & (main_Fill_Bufferexitii19ii_81 == 1'd1))) */ begin
		main_preheader1ii13ii_Incnt1ii12ii = main_Fill_Bufferexitii19ii_80;
	end
end
always @(posedge clk) begin
	/* main: %.preheader1.i.i13.i.i*/
	/*   %Incnt.1.i.i12.i.i = phi i32 [ %80, %Fill_Buffer.exit.i.i19.i.i ], [ %67, %69 ]*/
	if ((((cur_state == LEGUP_F_main_BB__69_49) & (memory_controller_waitrequest == 1'd0)) & (main_69_71 == 1'd0))) begin
		main_preheader1ii13ii_Incnt1ii12ii_reg <= main_preheader1ii13ii_Incnt1ii12ii;
		if (start == 1'b0 && ^(main_preheader1ii13ii_Incnt1ii12ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader1ii13ii_Incnt1ii12ii_reg"); $finish; end
	end
	/* main: %.preheader1.i.i13.i.i*/
	/*   %Incnt.1.i.i12.i.i = phi i32 [ %80, %Fill_Buffer.exit.i.i19.i.i ], [ %67, %69 ]*/
	if ((((cur_state == LEGUP_F_main_BB_Fill_Bufferexitii19ii_55) & (memory_controller_waitrequest == 1'd0)) & (main_Fill_Bufferexitii19ii_81 == 1'd1))) begin
		main_preheader1ii13ii_Incnt1ii12ii_reg <= main_preheader1ii13ii_Incnt1ii12ii;
		if (start == 1'b0 && ^(main_preheader1ii13ii_Incnt1ii12ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader1ii13ii_Incnt1ii12ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader1.i.i13.i.i*/
	/*   %74 = icmp ult i8* %73, getelementptr inbounds ([2048 x i8]* @ld_Rdbfr, i32 1, i32 0)*/
		main_preheader1ii13ii_74 = (main_preheader1ii13ii_73_reg < (`TAG_g_ld_Rdbfr_a | (2048 * 32'd1)));
end
always @(posedge clk) begin
	/* main: %.preheader1.i.i13.i.i*/
	/*   %74 = icmp ult i8* %73, getelementptr inbounds ([2048 x i8]* @ld_Rdbfr, i32 1, i32 0)*/
	if ((cur_state == LEGUP_F_main_BB_preheader1ii13ii_50)) begin
		main_preheader1ii13ii_74_reg <= main_preheader1ii13ii_74;
		if (start == 1'b0 && ^(main_preheader1ii13ii_74) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader1ii13ii_74_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i.i.i.i17.i.i*/
	/*   %p2.02.i.i.i.i14.i.i = phi i8* [ %77, %.lr.ph.i.i.i.i17.i.i ], [ getelementptr inbounds ([2048 x i8]* @inRdbfr, i32 0, i32 0), %.preheader1.i.i13.i.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_preheader1ii13ii_50) & (memory_controller_waitrequest == 1'd0)) & (main_preheader1ii13ii_74 == 1'd0))) begin
		main_lrphiiii17ii_p202iiii14ii = `TAG_g_inRdbfr_a;
	end
	/* main: %.lr.ph.i.i.i.i17.i.i*/
	/*   %p2.02.i.i.i.i14.i.i = phi i8* [ %77, %.lr.ph.i.i.i.i17.i.i ], [ getelementptr inbounds ([2048 x i8]* @inRdbfr, i32 0, i32 0), %.preheader1.i.i13.i.i ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_lrphiiii17ii_54) & (memory_controller_waitrequest == 1'd0)) & (main_lrphiiii17ii_exitcondiii16ii_reg == 1'd0))) */ begin
		main_lrphiiii17ii_p202iiii14ii = main_lrphiiii17ii_77_reg;
	end
end
always @(posedge clk) begin
	/* main: %.lr.ph.i.i.i.i17.i.i*/
	/*   %p2.02.i.i.i.i14.i.i = phi i8* [ %77, %.lr.ph.i.i.i.i17.i.i ], [ getelementptr inbounds ([2048 x i8]* @inRdbfr, i32 0, i32 0), %.preheader1.i.i13.i.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_preheader1ii13ii_50) & (memory_controller_waitrequest == 1'd0)) & (main_preheader1ii13ii_74 == 1'd0))) begin
		main_lrphiiii17ii_p202iiii14ii_reg <= main_lrphiiii17ii_p202iiii14ii;
		if (start == 1'b0 && ^(main_lrphiiii17ii_p202iiii14ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphiiii17ii_p202iiii14ii_reg"); $finish; end
	end
	/* main: %.lr.ph.i.i.i.i17.i.i*/
	/*   %p2.02.i.i.i.i14.i.i = phi i8* [ %77, %.lr.ph.i.i.i.i17.i.i ], [ getelementptr inbounds ([2048 x i8]* @inRdbfr, i32 0, i32 0), %.preheader1.i.i13.i.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_lrphiiii17ii_54) & (memory_controller_waitrequest == 1'd0)) & (main_lrphiiii17ii_exitcondiii16ii_reg == 1'd0))) begin
		main_lrphiiii17ii_p202iiii14ii_reg <= main_lrphiiii17ii_p202iiii14ii;
		if (start == 1'b0 && ^(main_lrphiiii17ii_p202iiii14ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphiiii17ii_p202iiii14ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i.i.i.i17.i.i*/
	/*   %p1.01.i.i.i.i15.i.i = phi i8* [ %76, %.lr.ph.i.i.i.i17.i.i ], [ getelementptr inbounds ([2048 x i8]* @ld_Rdbfr, i32 0, i32 0), %.preheader1.i.i13.i.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_preheader1ii13ii_50) & (memory_controller_waitrequest == 1'd0)) & (main_preheader1ii13ii_74 == 1'd0))) begin
		main_lrphiiii17ii_p101iiii15ii = `TAG_g_ld_Rdbfr_a;
	end
	/* main: %.lr.ph.i.i.i.i17.i.i*/
	/*   %p1.01.i.i.i.i15.i.i = phi i8* [ %76, %.lr.ph.i.i.i.i17.i.i ], [ getelementptr inbounds ([2048 x i8]* @ld_Rdbfr, i32 0, i32 0), %.preheader1.i.i13.i.i ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_lrphiiii17ii_54) & (memory_controller_waitrequest == 1'd0)) & (main_lrphiiii17ii_exitcondiii16ii_reg == 1'd0))) */ begin
		main_lrphiiii17ii_p101iiii15ii = main_lrphiiii17ii_76_reg;
	end
end
always @(posedge clk) begin
	/* main: %.lr.ph.i.i.i.i17.i.i*/
	/*   %p1.01.i.i.i.i15.i.i = phi i8* [ %76, %.lr.ph.i.i.i.i17.i.i ], [ getelementptr inbounds ([2048 x i8]* @ld_Rdbfr, i32 0, i32 0), %.preheader1.i.i13.i.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_preheader1ii13ii_50) & (memory_controller_waitrequest == 1'd0)) & (main_preheader1ii13ii_74 == 1'd0))) begin
		main_lrphiiii17ii_p101iiii15ii_reg <= main_lrphiiii17ii_p101iiii15ii;
		if (start == 1'b0 && ^(main_lrphiiii17ii_p101iiii15ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphiiii17ii_p101iiii15ii_reg"); $finish; end
	end
	/* main: %.lr.ph.i.i.i.i17.i.i*/
	/*   %p1.01.i.i.i.i15.i.i = phi i8* [ %76, %.lr.ph.i.i.i.i17.i.i ], [ getelementptr inbounds ([2048 x i8]* @ld_Rdbfr, i32 0, i32 0), %.preheader1.i.i13.i.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_lrphiiii17ii_54) & (memory_controller_waitrequest == 1'd0)) & (main_lrphiiii17ii_exitcondiii16ii_reg == 1'd0))) begin
		main_lrphiiii17ii_p101iiii15ii_reg <= main_lrphiiii17ii_p101iiii15ii;
		if (start == 1'b0 && ^(main_lrphiiii17ii_p101iiii15ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphiiii17ii_p101iiii15ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i.i.i.i17.i.i*/
	/*   %75 = load i8* %p2.02.i.i.i.i14.i.i, align 1, !tbaa !7*/
		main_lrphiiii17ii_75 = memory_controller_out_a[7:0];
end
always @(posedge clk) begin
	/* main: %.lr.ph.i.i.i.i17.i.i*/
	/*   %75 = load i8* %p2.02.i.i.i.i14.i.i, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_main_BB_lrphiiii17ii_53)) begin
		main_lrphiiii17ii_75_reg <= main_lrphiiii17ii_75;
		if (start == 1'b0 && ^(main_lrphiiii17ii_75) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphiiii17ii_75_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i.i.i.i17.i.i*/
	/*   %gep_int11 = ptrtoint i8* %p1.01.i.i.i.i15.i.i to i32*/
		main_lrphiiii17ii_gep_int11 = main_lrphiiii17ii_p101iiii15ii_reg;
end
always @(posedge clk) begin
	/* main: %.lr.ph.i.i.i.i17.i.i*/
	/*   %gep_int11 = ptrtoint i8* %p1.01.i.i.i.i15.i.i to i32*/
	if ((cur_state == LEGUP_F_main_BB_lrphiiii17ii_51)) begin
		main_lrphiiii17ii_gep_int11_reg <= main_lrphiiii17ii_gep_int11;
		if (start == 1'b0 && ^(main_lrphiiii17ii_gep_int11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphiiii17ii_gep_int11_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i.i.i.i17.i.i*/
	/*   %gep12 = add i32 %gep_int11, 1*/
		main_lrphiiii17ii_gep12 = main_signed_add_32_0;
end
always @(*) begin
/* main: %.lr.ph.i.i.i.i17.i.i*/
/*   %gep12 = add i32 %gep_int11, 1*/
	main_lrphiiii17ii_gep12_reg = main_lrphiiii_gep_reg;
end
always @(*) begin
	/* main: %.lr.ph.i.i.i.i17.i.i*/
	/*   %76 = inttoptr i32 %gep12 to i8**/
		main_lrphiiii17ii_76 = main_lrphiiii17ii_gep12;
end
always @(posedge clk) begin
	/* main: %.lr.ph.i.i.i.i17.i.i*/
	/*   %76 = inttoptr i32 %gep12 to i8**/
	if ((cur_state == LEGUP_F_main_BB_lrphiiii17ii_51)) begin
		main_lrphiiii17ii_76_reg <= main_lrphiiii17ii_76;
		if (start == 1'b0 && ^(main_lrphiiii17ii_76) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphiiii17ii_76_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i.i.i.i17.i.i*/
	/*   %gep_int13 = ptrtoint i8* %p2.02.i.i.i.i14.i.i to i32*/
		main_lrphiiii17ii_gep_int13 = main_lrphiiii17ii_p202iiii14ii_reg;
end
always @(posedge clk) begin
	/* main: %.lr.ph.i.i.i.i17.i.i*/
	/*   %gep_int13 = ptrtoint i8* %p2.02.i.i.i.i14.i.i to i32*/
	if ((cur_state == LEGUP_F_main_BB_lrphiiii17ii_51)) begin
		main_lrphiiii17ii_gep_int13_reg <= main_lrphiiii17ii_gep_int13;
		if (start == 1'b0 && ^(main_lrphiiii17ii_gep_int13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphiiii17ii_gep_int13_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i.i.i.i17.i.i*/
	/*   %gep14 = add i32 %gep_int13, 1*/
		main_lrphiiii17ii_gep14 = main_signed_add_32_1;
end
always @(*) begin
/* main: %.lr.ph.i.i.i.i17.i.i*/
/*   %gep14 = add i32 %gep_int13, 1*/
	main_lrphiiii17ii_gep14_reg = main_lrphiiii_gep2_reg;
end
always @(*) begin
	/* main: %.lr.ph.i.i.i.i17.i.i*/
	/*   %77 = inttoptr i32 %gep14 to i8**/
		main_lrphiiii17ii_77 = main_lrphiiii17ii_gep14;
end
always @(posedge clk) begin
	/* main: %.lr.ph.i.i.i.i17.i.i*/
	/*   %77 = inttoptr i32 %gep14 to i8**/
	if ((cur_state == LEGUP_F_main_BB_lrphiiii17ii_51)) begin
		main_lrphiiii17ii_77_reg <= main_lrphiiii17ii_77;
		if (start == 1'b0 && ^(main_lrphiiii17ii_77) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphiiii17ii_77_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i.i.i.i17.i.i*/
	/*   %exitcond.i.i.i16.i.i = icmp eq i8* %77, getelementptr inbounds ([2048 x i8]* @inRdbfr, i32 1, i32 0)*/
		main_lrphiiii17ii_exitcondiii16ii = (main_lrphiiii17ii_77_reg == (`TAG_g_inRdbfr_a | (2048 * 32'd1)));
end
always @(posedge clk) begin
	/* main: %.lr.ph.i.i.i.i17.i.i*/
	/*   %exitcond.i.i.i16.i.i = icmp eq i8* %77, getelementptr inbounds ([2048 x i8]* @inRdbfr, i32 1, i32 0)*/
	if ((cur_state == LEGUP_F_main_BB_lrphiiii17ii_52)) begin
		main_lrphiiii17ii_exitcondiii16ii_reg <= main_lrphiiii17ii_exitcondiii16ii;
		if (start == 1'b0 && ^(main_lrphiiii17ii_exitcondiii16ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphiiii17ii_exitcondiii16ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %Fill_Buffer.exit.i.i19.i.i*/
	/*   %78 = phi i8* [ %73, %.preheader1.i.i13.i.i ], [ getelementptr inbounds ([2048 x i8]* @ld_Rdbfr, i32 0, i32 0), %.lr.ph.i.i.i.i17.i.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_preheader1ii13ii_50) & (memory_controller_waitrequest == 1'd0)) & (main_preheader1ii13ii_74 == 1'd1))) begin
		main_Fill_Bufferexitii19ii_78 = main_preheader1ii13ii_73_reg;
	end
	/* main: %Fill_Buffer.exit.i.i19.i.i*/
	/*   %78 = phi i8* [ %73, %.preheader1.i.i13.i.i ], [ getelementptr inbounds ([2048 x i8]* @ld_Rdbfr, i32 0, i32 0), %.lr.ph.i.i.i.i17.i.i ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_lrphiiii17ii_54) & (memory_controller_waitrequest == 1'd0)) & (main_lrphiiii17ii_exitcondiii16ii_reg == 1'd1))) */ begin
		main_Fill_Bufferexitii19ii_78 = `TAG_g_ld_Rdbfr_a;
	end
end
always @(posedge clk) begin
	/* main: %Fill_Buffer.exit.i.i19.i.i*/
	/*   %78 = phi i8* [ %73, %.preheader1.i.i13.i.i ], [ getelementptr inbounds ([2048 x i8]* @ld_Rdbfr, i32 0, i32 0), %.lr.ph.i.i.i.i17.i.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_preheader1ii13ii_50) & (memory_controller_waitrequest == 1'd0)) & (main_preheader1ii13ii_74 == 1'd1))) begin
		main_Fill_Bufferexitii19ii_78_reg <= main_Fill_Bufferexitii19ii_78;
		if (start == 1'b0 && ^(main_Fill_Bufferexitii19ii_78) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_Fill_Bufferexitii19ii_78_reg"); $finish; end
	end
	/* main: %Fill_Buffer.exit.i.i19.i.i*/
	/*   %78 = phi i8* [ %73, %.preheader1.i.i13.i.i ], [ getelementptr inbounds ([2048 x i8]* @ld_Rdbfr, i32 0, i32 0), %.lr.ph.i.i.i.i17.i.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_lrphiiii17ii_54) & (memory_controller_waitrequest == 1'd0)) & (main_lrphiiii17ii_exitcondiii16ii_reg == 1'd1))) begin
		main_Fill_Bufferexitii19ii_78_reg <= main_Fill_Bufferexitii19ii_78;
		if (start == 1'b0 && ^(main_Fill_Bufferexitii19ii_78) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_Fill_Bufferexitii19ii_78_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %Fill_Buffer.exit.i.i19.i.i*/
	/*   %gep_int15 = ptrtoint i8* %78 to i32*/
		main_Fill_Bufferexitii19ii_gep_int15 = main_Fill_Bufferexitii19ii_78_reg;
end
always @(posedge clk) begin
	/* main: %Fill_Buffer.exit.i.i19.i.i*/
	/*   %gep_int15 = ptrtoint i8* %78 to i32*/
	if ((cur_state == LEGUP_F_main_BB_Fill_Bufferexitii19ii_55)) begin
		main_Fill_Bufferexitii19ii_gep_int15_reg <= main_Fill_Bufferexitii19ii_gep_int15;
		if (start == 1'b0 && ^(main_Fill_Bufferexitii19ii_gep_int15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_Fill_Bufferexitii19ii_gep_int15_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %Fill_Buffer.exit.i.i19.i.i*/
	/*   %gep16 = add i32 %gep_int15, 1*/
		main_Fill_Bufferexitii19ii_gep16 = main_signed_add_32_0;
end
always @(*) begin
/* main: %Fill_Buffer.exit.i.i19.i.i*/
/*   %gep16 = add i32 %gep_int15, 1*/
	main_Fill_Bufferexitii19ii_gep16_reg = main_lrphiiii_gep_reg;
end
always @(*) begin
	/* main: %Fill_Buffer.exit.i.i19.i.i*/
	/*   %79 = inttoptr i32 %gep16 to i8**/
		main_Fill_Bufferexitii19ii_79 = main_Fill_Bufferexitii19ii_gep16;
end
always @(posedge clk) begin
	/* main: %Fill_Buffer.exit.i.i19.i.i*/
	/*   %79 = inttoptr i32 %gep16 to i8**/
	if ((cur_state == LEGUP_F_main_BB_Fill_Bufferexitii19ii_55)) begin
		main_Fill_Bufferexitii19ii_79_reg <= main_Fill_Bufferexitii19ii_79;
		if (start == 1'b0 && ^(main_Fill_Bufferexitii19ii_79) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_Fill_Bufferexitii19ii_79_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %Fill_Buffer.exit.i.i19.i.i*/
	/*   %80 = add nsw i32 %Incnt.1.i.i12.i.i, 8*/
		main_Fill_Bufferexitii19ii_80 = main_signed_add_32_1;
end
always @(*) begin
/* main: %Fill_Buffer.exit.i.i19.i.i*/
/*   %80 = add nsw i32 %Incnt.1.i.i12.i.i, 8*/
	main_Fill_Bufferexitii19ii_80_reg = main_lrphiiii_gep2_reg;
end
always @(*) begin
	/* main: %Fill_Buffer.exit.i.i19.i.i*/
	/*   %81 = icmp slt i32 %80, 25*/
		main_Fill_Bufferexitii19ii_81 = ($signed(main_Fill_Bufferexitii19ii_80) < $signed(32'd25));
end
always @(posedge clk) begin
	/* main: %Fill_Buffer.exit.i.i19.i.i*/
	/*   %81 = icmp slt i32 %80, 25*/
	if ((cur_state == LEGUP_F_main_BB_Fill_Bufferexitii19ii_55)) begin
		main_Fill_Bufferexitii19ii_81_reg <= main_Fill_Bufferexitii19ii_81;
		if (start == 1'b0 && ^(main_Fill_Bufferexitii19ii_81) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_Fill_Bufferexitii19ii_81_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.loopexit.i.i20.i.i*/
	/*   %82 = lshr i32 %72, 3*/
		main_loopexitii20ii_82 = (main_69_72_reg >>> (32'd3 % 32));
end
always @(posedge clk) begin
	/* main: %.loopexit.i.i20.i.i*/
	/*   %82 = lshr i32 %72, 3*/
	if ((cur_state == LEGUP_F_main_BB_loopexitii20ii_56)) begin
		main_loopexitii20ii_82_reg <= main_loopexitii20ii_82;
		if (start == 1'b0 && ^(main_loopexitii20ii_82) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_loopexitii20ii_82_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.loopexit.i.i20.i.i*/
	/*   %83 = add i32 %82, 1*/
		main_loopexitii20ii_83 = main_signed_add_32_6;
end
always @(*) begin
/* main: %.loopexit.i.i20.i.i*/
/*   %83 = add i32 %82, 1*/
	main_loopexitii20ii_83_reg = main_loopexitiiii_38_reg;
end
always @(*) begin
	/* main: %.loopexit.i.i20.i.i*/
	/*   %gep_int17 = ptrtoint i8* %70 to i32*/
		main_loopexitii20ii_gep_int17 = main_69_70_reg;
end
always @(posedge clk) begin
	/* main: %.loopexit.i.i20.i.i*/
	/*   %gep_int17 = ptrtoint i8* %70 to i32*/
	if ((cur_state == LEGUP_F_main_BB_loopexitii20ii_56)) begin
		main_loopexitii20ii_gep_int17_reg <= main_loopexitii20ii_gep_int17;
		if (start == 1'b0 && ^(main_loopexitii20ii_gep_int17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_loopexitii20ii_gep_int17_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.loopexit.i.i20.i.i*/
	/*   %gep18 = add i32 %gep_int17, %83*/
		main_loopexitii20ii_gep18 = main_signed_add_32_1;
end
always @(*) begin
/* main: %.loopexit.i.i20.i.i*/
/*   %gep18 = add i32 %gep_int17, %83*/
	main_loopexitii20ii_gep18_reg = main_lrphiiii_gep2_reg;
end
always @(*) begin
	/* main: %.loopexit.i.i20.i.i*/
	/*   %scevgep = inttoptr i32 %gep18 to i8**/
		main_loopexitii20ii_scevgep = main_loopexitii20ii_gep18;
end
always @(posedge clk) begin
	/* main: %.loopexit.i.i20.i.i*/
	/*   %scevgep = inttoptr i32 %gep18 to i8**/
	if ((cur_state == LEGUP_F_main_BB_loopexitii20ii_56)) begin
		main_loopexitii20ii_scevgep_reg <= main_loopexitii20ii_scevgep;
		if (start == 1'b0 && ^(main_loopexitii20ii_scevgep) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_loopexitii20ii_scevgep_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.loopexit.i.i20.i.i*/
	/*   %84 = and i32 %72, -8*/
		main_loopexitii20ii_84 = (main_69_72_reg & -32'd8);
end
always @(posedge clk) begin
	/* main: %.loopexit.i.i20.i.i*/
	/*   %84 = and i32 %72, -8*/
	if ((cur_state == LEGUP_F_main_BB_loopexitii20ii_56)) begin
		main_loopexitii20ii_84_reg <= main_loopexitii20ii_84;
		if (start == 1'b0 && ^(main_loopexitii20ii_84) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_loopexitii20ii_84_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.loopexit.i.i20.i.i*/
	/*   %85 = add i32 -192, %66*/
		main_loopexitii20ii_85 = main_signed_add_32_0;
end
always @(*) begin
/* main: %.loopexit.i.i20.i.i*/
/*   %85 = add i32 -192, %66*/
	main_loopexitii20ii_85_reg = main_lrphiiii_gep_reg;
end
always @(*) begin
	/* main: %.loopexit.i.i20.i.i*/
	/*   %86 = add i32 %85, %84*/
		main_loopexitii20ii_86 = main_signed_add_32_2;
end
always @(*) begin
/* main: %.loopexit.i.i20.i.i*/
/*   %86 = add i32 %85, %84*/
	main_loopexitii20ii_86_reg = main_loopexitiiii_37_reg;
end
always @(*) begin
	/* main: %.loopexit2.i.loopexit.i21.i.i*/
	/*   %.lcssa = phi i8* [ %79, %Fill_Buffer.exit.i.i19.i.i ]*/
		main_loopexit2iloopexiti21ii_lcssa = main_Fill_Bufferexitii19ii_79;
end
always @(posedge clk) begin
	/* main: %.loopexit2.i.loopexit.i21.i.i*/
	/*   %.lcssa = phi i8* [ %79, %Fill_Buffer.exit.i.i19.i.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_Fill_Bufferexitii19ii_55) & (memory_controller_waitrequest == 1'd0)) & (main_Fill_Bufferexitii19ii_81 == 1'd0))) begin
		main_loopexit2iloopexiti21ii_lcssa_reg <= main_loopexit2iloopexiti21ii_lcssa;
		if (start == 1'b0 && ^(main_loopexit2iloopexiti21ii_lcssa) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_loopexit2iloopexiti21ii_lcssa_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.loopexit2.i.loopexit.i21.i.i*/
	/*   %87 = and i32 %72, -8*/
		main_loopexit2iloopexiti21ii_87 = (main_69_72_reg & -32'd8);
end
always @(posedge clk) begin
	/* main: %.loopexit2.i.loopexit.i21.i.i*/
	/*   %87 = and i32 %72, -8*/
	if ((cur_state == LEGUP_F_main_BB_loopexit2iloopexiti21ii_58)) begin
		main_loopexit2iloopexiti21ii_87_reg <= main_loopexit2iloopexiti21ii_87;
		if (start == 1'b0 && ^(main_loopexit2iloopexiti21ii_87) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_loopexit2iloopexiti21ii_87_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.loopexit2.i.loopexit.i21.i.i*/
	/*   %88 = add i32 -192, %66*/
		main_loopexit2iloopexiti21ii_88 = main_signed_add_32_1;
end
always @(*) begin
/* main: %.loopexit2.i.loopexit.i21.i.i*/
/*   %88 = add i32 -192, %66*/
	main_loopexit2iloopexiti21ii_88_reg = main_lrphiiii_gep2_reg;
end
always @(*) begin
	/* main: %.loopexit2.i.loopexit.i21.i.i*/
	/*   %89 = add i32 %88, %87*/
		main_loopexit2iloopexiti21ii_89 = main_signed_add_32_0;
end
always @(*) begin
/* main: %.loopexit2.i.loopexit.i21.i.i*/
/*   %89 = add i32 %88, %87*/
	main_loopexit2iloopexiti21ii_89_reg = main_lrphiiii_gep_reg;
end
always @(*) begin
	/* main: %.loopexit2.i.i23.i.i*/
	/*   %Incnt.2.i.i22.i.i = phi i32 [ %86, %.loopexit.i.i20.i.i ], [ %89, %.loopexit2.i.loopexit.i21.i.i ]*/
	if (((cur_state == LEGUP_F_main_BB_loopexitii20ii_57) & (memory_controller_waitrequest == 1'd0))) begin
		main_loopexit2ii23ii_Incnt2ii22ii = main_loopexitii20ii_86_reg;
	end
	/* main: %.loopexit2.i.i23.i.i*/
	/*   %Incnt.2.i.i22.i.i = phi i32 [ %86, %.loopexit.i.i20.i.i ], [ %89, %.loopexit2.i.loopexit.i21.i.i ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_loopexit2iloopexiti21ii_59) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_loopexit2ii23ii_Incnt2ii22ii = main_loopexit2iloopexiti21ii_89_reg;
	end
end
always @(posedge clk) begin
	/* main: %.loopexit2.i.i23.i.i*/
	/*   %Incnt.2.i.i22.i.i = phi i32 [ %86, %.loopexit.i.i20.i.i ], [ %89, %.loopexit2.i.loopexit.i21.i.i ]*/
	if (((cur_state == LEGUP_F_main_BB_loopexitii20ii_57) & (memory_controller_waitrequest == 1'd0))) begin
		main_loopexit2ii23ii_Incnt2ii22ii_reg <= main_loopexit2ii23ii_Incnt2ii22ii;
		if (start == 1'b0 && ^(main_loopexit2ii23ii_Incnt2ii22ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_loopexit2ii23ii_Incnt2ii22ii_reg"); $finish; end
	end
	/* main: %.loopexit2.i.i23.i.i*/
	/*   %Incnt.2.i.i22.i.i = phi i32 [ %86, %.loopexit.i.i20.i.i ], [ %89, %.loopexit2.i.loopexit.i21.i.i ]*/
	if (((cur_state == LEGUP_F_main_BB_loopexit2iloopexiti21ii_59) & (memory_controller_waitrequest == 1'd0))) begin
		main_loopexit2ii23ii_Incnt2ii22ii_reg <= main_loopexit2ii23ii_Incnt2ii22ii;
		if (start == 1'b0 && ^(main_loopexit2ii23ii_Incnt2ii22ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_loopexit2ii23ii_Incnt2ii22ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %Get_Bits.exit24.i.i*/
	/*   %90 = icmp sgt i32 %61, 0*/
		main_Get_Bitsexit24ii_90 = ($signed(main_decode_motion_vectorexitii_61_reg) > $signed(32'd0));
end
always @(posedge clk) begin
	/* main: %Get_Bits.exit24.i.i*/
	/*   %90 = icmp sgt i32 %61, 0*/
	if ((cur_state == LEGUP_F_main_BB_Get_Bitsexit24ii_62)) begin
		main_Get_Bitsexit24ii_90_reg <= main_Get_Bitsexit24ii_90;
		if (start == 1'b0 && ^(main_Get_Bitsexit24ii_90) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_Get_Bitsexit24ii_90_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %91*/
	/*   %92 = add nsw i32 %61, -1*/
		main_91_92 = main_signed_add_32_0;
end
always @(*) begin
/* main: %91*/
/*   %92 = add nsw i32 %61, -1*/
	main_91_92_reg = main_lrphiiii_gep_reg;
end
always @(*) begin
	/* main: %91*/
	/*   %93 = shl i32 %92, 8*/
		main_91_93 = (main_91_92 <<< (32'd8 % 32));
end
always @(posedge clk) begin
	/* main: %91*/
	/*   %93 = shl i32 %92, 8*/
	if ((cur_state == LEGUP_F_main_BB__91_63)) begin
		main_91_93_reg <= main_91_93;
		if (start == 1'b0 && ^(main_91_93) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_91_93_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %91*/
	/*   %94 = add i32 %65, 1*/
		main_91_94 = main_signed_add_32_1;
end
always @(*) begin
/* main: %91*/
/*   %94 = add i32 %65, 1*/
	main_91_94_reg = main_lrphiiii_gep2_reg;
end
always @(*) begin
	/* main: %91*/
	/*   %95 = add i32 %94, %93*/
		main_91_95 = main_signed_add_32_6;
end
always @(*) begin
/* main: %91*/
/*   %95 = add i32 %94, %93*/
	main_91_95_reg = main_loopexitiiii_38_reg;
end
always @(*) begin
	/* main: %91*/
	/*   %96 = add i32 %95, 103*/
		main_91_96 = main_signed_add_32_2;
end
always @(*) begin
/* main: %91*/
/*   %96 = add i32 %95, 103*/
	main_91_96_reg = main_loopexitiiii_37_reg;
end
always @(*) begin
	/* main: %91*/
	/*   %97 = icmp sge i32 %96, 4096*/
		main_91_97 = ($signed(main_91_96) >= $signed(32'd4096));
end
always @(posedge clk) begin
	/* main: %91*/
	/*   %97 = icmp sge i32 %96, 4096*/
	if ((cur_state == LEGUP_F_main_BB__91_63)) begin
		main_91_97_reg <= main_91_97;
		if (start == 1'b0 && ^(main_91_97) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_91_97_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %91*/
	/*   %..i4.i.i = select i1 %97, i32 0, i32 %96*/
		main_91_i4ii = (main_91_97 ? 32'd0 : main_91_96);
end
always @(posedge clk) begin
	/* main: %91*/
	/*   %..i4.i.i = select i1 %97, i32 0, i32 %96*/
	if ((cur_state == LEGUP_F_main_BB__91_63)) begin
		main_91_i4ii_reg <= main_91_i4ii;
		if (start == 1'b0 && ^(main_91_i4ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_91_i4ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %98*/
	/*   %99 = icmp slt i32 %61, 0*/
		main_98_99 = ($signed(main_decode_motion_vectorexitii_61_reg) < $signed(32'd0));
end
always @(posedge clk) begin
	/* main: %98*/
	/*   %99 = icmp slt i32 %61, 0*/
	if ((cur_state == LEGUP_F_main_BB__98_64)) begin
		main_98_99_reg <= main_98_99;
		if (start == 1'b0 && ^(main_98_99) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_98_99_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %100*/
	/*   %101 = xor i32 %61, -1*/
		main_100_101 = (main_decode_motion_vectorexitii_61_reg ^ -32'd1);
end
always @(posedge clk) begin
	/* main: %100*/
	/*   %101 = xor i32 %61, -1*/
	if ((cur_state == LEGUP_F_main_BB__100_65)) begin
		main_100_101_reg <= main_100_101;
		if (start == 1'b0 && ^(main_100_101) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_100_101_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %100*/
	/*   %102 = shl i32 %101, 8*/
		main_100_102 = (main_100_101 <<< (32'd8 % 32));
end
always @(posedge clk) begin
	/* main: %100*/
	/*   %102 = shl i32 %101, 8*/
	if ((cur_state == LEGUP_F_main_BB__100_65)) begin
		main_100_102_reg <= main_100_102;
		if (start == 1'b0 && ^(main_100_102) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_100_102_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %100*/
	/*   %.neg1.i5.i.i = xor i32 %65, -1*/
		main_100_neg1i5ii = (main_63_65_reg ^ -32'd1);
end
always @(posedge clk) begin
	/* main: %100*/
	/*   %.neg1.i5.i.i = xor i32 %65, -1*/
	if ((cur_state == LEGUP_F_main_BB__100_65)) begin
		main_100_neg1i5ii_reg <= main_100_neg1i5ii;
		if (start == 1'b0 && ^(main_100_neg1i5ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_100_neg1i5ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %100*/
	/*   %.neg2.i6.i.i = sub i32 %.neg1.i5.i.i, %102*/
		main_100_neg2i6ii = main_signed_subtract_32_0;
end
always @(*) begin
/* main: %100*/
/*   %.neg2.i6.i.i = sub i32 %.neg1.i5.i.i, %102*/
	main_100_neg2i6ii_reg = main_15_19_reg;
end
always @(*) begin
	/* main: %100*/
	/*   %103 = add i32 %.neg2.i6.i.i, 103*/
		main_100_103 = main_signed_add_32_0;
end
always @(*) begin
/* main: %100*/
/*   %103 = add i32 %.neg2.i6.i.i, 103*/
	main_100_103_reg = main_lrphiiii_gep_reg;
end
always @(*) begin
	/* main: %100*/
	/*   %104 = icmp slt i32 %103, -4096*/
		main_100_104 = ($signed(main_100_103) < $signed(-32'd4096));
end
always @(posedge clk) begin
	/* main: %100*/
	/*   %104 = icmp slt i32 %103, -4096*/
	if ((cur_state == LEGUP_F_main_BB__100_65)) begin
		main_100_104_reg <= main_100_104;
		if (start == 1'b0 && ^(main_100_104) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_100_104_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %105*/
	/*   %106 = add nsw i32 %103, 8192*/
		main_105_106 = main_signed_add_32_0;
end
always @(posedge clk) begin
	/* main: %105*/
	/*   %106 = add nsw i32 %103, 8192*/
	if ((cur_state == LEGUP_F_main_BB__105_66)) begin
		main_105_106_reg <= main_105_106;
		if (start == 1'b0 && ^(main_105_106) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_105_106_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %107*/
	/*   %108 = sub nsw i32 %103, 8192*/
		main_107_108 = main_signed_subtract_32_0;
end
always @(posedge clk) begin
	/* main: %107*/
	/*   %108 = sub nsw i32 %103, 8192*/
	if ((cur_state == LEGUP_F_main_BB__107_67)) begin
		main_107_108_reg <= main_107_108;
		if (start == 1'b0 && ^(main_107_108) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_107_108_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %motion_vectors.exit*/
	/*   %vec.0.i7.i.i = phi i32 [ %..i4.i.i, %91 ], [ %106, %105 ], [ %108, %107 ], [ 103, %98 ], [ 103, %decode_motion_vector.exit.i.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_decode_motion_vectorexitii_42) & (memory_controller_waitrequest == 1'd0)) & (main_decode_motion_vectorexitii_62 == 1'd0))) begin
		main_motion_vectorsexit_vec0i7ii = 32'd103;
	end
	/* main: %motion_vectors.exit*/
	/*   %vec.0.i7.i.i = phi i32 [ %..i4.i.i, %91 ], [ %106, %105 ], [ %108, %107 ], [ 103, %98 ], [ 103, %decode_motion_vector.exit.i.i ]*/
	else if (((cur_state == LEGUP_F_main_BB__91_63) & (memory_controller_waitrequest == 1'd0))) begin
		main_motion_vectorsexit_vec0i7ii = main_91_i4ii;
	end
	/* main: %motion_vectors.exit*/
	/*   %vec.0.i7.i.i = phi i32 [ %..i4.i.i, %91 ], [ %106, %105 ], [ %108, %107 ], [ 103, %98 ], [ 103, %decode_motion_vector.exit.i.i ]*/
	else if ((((cur_state == LEGUP_F_main_BB__98_64) & (memory_controller_waitrequest == 1'd0)) & (main_98_99 == 1'd0))) begin
		main_motion_vectorsexit_vec0i7ii = 32'd103;
	end
	/* main: %motion_vectors.exit*/
	/*   %vec.0.i7.i.i = phi i32 [ %..i4.i.i, %91 ], [ %106, %105 ], [ %108, %107 ], [ 103, %98 ], [ 103, %decode_motion_vector.exit.i.i ]*/
	else if (((cur_state == LEGUP_F_main_BB__105_66) & (memory_controller_waitrequest == 1'd0))) begin
		main_motion_vectorsexit_vec0i7ii = main_105_106;
	end
	/* main: %motion_vectors.exit*/
	/*   %vec.0.i7.i.i = phi i32 [ %..i4.i.i, %91 ], [ %106, %105 ], [ %108, %107 ], [ 103, %98 ], [ 103, %decode_motion_vector.exit.i.i ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__107_67) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_motion_vectorsexit_vec0i7ii = main_107_108;
	end
end
always @(posedge clk) begin
	/* main: %motion_vectors.exit*/
	/*   %vec.0.i7.i.i = phi i32 [ %..i4.i.i, %91 ], [ %106, %105 ], [ %108, %107 ], [ 103, %98 ], [ 103, %decode_motion_vector.exit.i.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_decode_motion_vectorexitii_42) & (memory_controller_waitrequest == 1'd0)) & (main_decode_motion_vectorexitii_62 == 1'd0))) begin
		main_motion_vectorsexit_vec0i7ii_reg <= main_motion_vectorsexit_vec0i7ii;
		if (start == 1'b0 && ^(main_motion_vectorsexit_vec0i7ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_motion_vectorsexit_vec0i7ii_reg"); $finish; end
	end
	/* main: %motion_vectors.exit*/
	/*   %vec.0.i7.i.i = phi i32 [ %..i4.i.i, %91 ], [ %106, %105 ], [ %108, %107 ], [ 103, %98 ], [ 103, %decode_motion_vector.exit.i.i ]*/
	if (((cur_state == LEGUP_F_main_BB__91_63) & (memory_controller_waitrequest == 1'd0))) begin
		main_motion_vectorsexit_vec0i7ii_reg <= main_motion_vectorsexit_vec0i7ii;
		if (start == 1'b0 && ^(main_motion_vectorsexit_vec0i7ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_motion_vectorsexit_vec0i7ii_reg"); $finish; end
	end
	/* main: %motion_vectors.exit*/
	/*   %vec.0.i7.i.i = phi i32 [ %..i4.i.i, %91 ], [ %106, %105 ], [ %108, %107 ], [ 103, %98 ], [ 103, %decode_motion_vector.exit.i.i ]*/
	if ((((cur_state == LEGUP_F_main_BB__98_64) & (memory_controller_waitrequest == 1'd0)) & (main_98_99 == 1'd0))) begin
		main_motion_vectorsexit_vec0i7ii_reg <= main_motion_vectorsexit_vec0i7ii;
		if (start == 1'b0 && ^(main_motion_vectorsexit_vec0i7ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_motion_vectorsexit_vec0i7ii_reg"); $finish; end
	end
	/* main: %motion_vectors.exit*/
	/*   %vec.0.i7.i.i = phi i32 [ %..i4.i.i, %91 ], [ %106, %105 ], [ %108, %107 ], [ 103, %98 ], [ 103, %decode_motion_vector.exit.i.i ]*/
	if (((cur_state == LEGUP_F_main_BB__105_66) & (memory_controller_waitrequest == 1'd0))) begin
		main_motion_vectorsexit_vec0i7ii_reg <= main_motion_vectorsexit_vec0i7ii;
		if (start == 1'b0 && ^(main_motion_vectorsexit_vec0i7ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_motion_vectorsexit_vec0i7ii_reg"); $finish; end
	end
	/* main: %motion_vectors.exit*/
	/*   %vec.0.i7.i.i = phi i32 [ %..i4.i.i, %91 ], [ %106, %105 ], [ %108, %107 ], [ 103, %98 ], [ 103, %decode_motion_vector.exit.i.i ]*/
	if (((cur_state == LEGUP_F_main_BB__107_67) & (memory_controller_waitrequest == 1'd0))) begin
		main_motion_vectorsexit_vec0i7ii_reg <= main_motion_vectorsexit_vec0i7ii;
		if (start == 1'b0 && ^(main_motion_vectorsexit_vec0i7ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_motion_vectorsexit_vec0i7ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %motion_vectors.exit*/
	/*   %..i.i = shl i32 %vec.0.i7.i.i, 1*/
		main_motion_vectorsexit_ii = (main_motion_vectorsexit_vec0i7ii_reg <<< (32'd1 % 32));
end
always @(posedge clk) begin
	/* main: %motion_vectors.exit*/
	/*   %..i.i = shl i32 %vec.0.i7.i.i, 1*/
	if ((cur_state == LEGUP_F_main_BB_motion_vectorsexit_68)) begin
		main_motion_vectorsexit_ii_reg <= main_motion_vectorsexit_ii;
		if (start == 1'b0 && ^(main_motion_vectorsexit_ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_motion_vectorsexit_ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %motion_vectors.exit*/
	/*   %109 = icmp eq i32 %11, 0*/
		main_motion_vectorsexit_109 = (main_Get_Bitsexiti_11_reg == 32'd0);
end
always @(posedge clk) begin
	/* main: %motion_vectors.exit*/
	/*   %109 = icmp eq i32 %11, 0*/
	if ((cur_state == LEGUP_F_main_BB_motion_vectorsexit_68)) begin
		main_motion_vectorsexit_109_reg <= main_motion_vectorsexit_109;
		if (start == 1'b0 && ^(main_motion_vectorsexit_109) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_motion_vectorsexit_109_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %motion_vectors.exit*/
	/*   %110 = zext i1 %109 to i32*/
		main_motion_vectorsexit_110 = main_motion_vectorsexit_109;
end
always @(posedge clk) begin
	/* main: %motion_vectors.exit*/
	/*   %110 = zext i1 %109 to i32*/
	if ((cur_state == LEGUP_F_main_BB_motion_vectorsexit_68)) begin
		main_motion_vectorsexit_110_reg <= main_motion_vectorsexit_110;
		if (start == 1'b0 && ^(main_motion_vectorsexit_110) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_motion_vectorsexit_110_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %motion_vectors.exit*/
	/*   %111 = icmp eq i32 %vec.0.i.i.i, 1566*/
		main_motion_vectorsexit_111 = (main_decode_motion_vectorexitii_vec0iii_reg == 32'd1566);
end
always @(posedge clk) begin
	/* main: %motion_vectors.exit*/
	/*   %111 = icmp eq i32 %vec.0.i.i.i, 1566*/
	if ((cur_state == LEGUP_F_main_BB_motion_vectorsexit_68)) begin
		main_motion_vectorsexit_111_reg <= main_motion_vectorsexit_111;
		if (start == 1'b0 && ^(main_motion_vectorsexit_111) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_motion_vectorsexit_111_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %motion_vectors.exit*/
	/*   %112 = zext i1 %111 to i32*/
		main_motion_vectorsexit_112 = main_motion_vectorsexit_111;
end
always @(posedge clk) begin
	/* main: %motion_vectors.exit*/
	/*   %112 = zext i1 %111 to i32*/
	if ((cur_state == LEGUP_F_main_BB_motion_vectorsexit_68)) begin
		main_motion_vectorsexit_112_reg <= main_motion_vectorsexit_112;
		if (start == 1'b0 && ^(main_motion_vectorsexit_112) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_motion_vectorsexit_112_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %motion_vectors.exit*/
	/*   %113 = add nuw nsw i32 %112, %110*/
		main_motion_vectorsexit_113 = main_signed_add_32_0;
end
always @(*) begin
/* main: %motion_vectors.exit*/
/*   %113 = add nuw nsw i32 %112, %110*/
	main_motion_vectorsexit_113_reg = main_lrphiiii_gep_reg;
end
always @(*) begin
	/* main: %motion_vectors.exit*/
	/*   %114 = icmp eq i32 %..i.i, 206*/
		main_motion_vectorsexit_114 = (main_motion_vectorsexit_ii == 32'd206);
end
always @(posedge clk) begin
	/* main: %motion_vectors.exit*/
	/*   %114 = icmp eq i32 %..i.i, 206*/
	if ((cur_state == LEGUP_F_main_BB_motion_vectorsexit_68)) begin
		main_motion_vectorsexit_114_reg <= main_motion_vectorsexit_114;
		if (start == 1'b0 && ^(main_motion_vectorsexit_114) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_motion_vectorsexit_114_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %motion_vectors.exit*/
	/*   %115 = zext i1 %114 to i32*/
		main_motion_vectorsexit_115 = main_motion_vectorsexit_114;
end
always @(posedge clk) begin
	/* main: %motion_vectors.exit*/
	/*   %115 = zext i1 %114 to i32*/
	if ((cur_state == LEGUP_F_main_BB_motion_vectorsexit_68)) begin
		main_motion_vectorsexit_115_reg <= main_motion_vectorsexit_115;
		if (start == 1'b0 && ^(main_motion_vectorsexit_115) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_motion_vectorsexit_115_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %motion_vectors.exit*/
	/*   %116 = add nuw nsw i32 %115, %113*/
		main_motion_vectorsexit_116 = main_signed_add_32_1;
end
always @(*) begin
/* main: %motion_vectors.exit*/
/*   %116 = add nuw nsw i32 %115, %113*/
	main_motion_vectorsexit_116_reg = main_lrphiiii_gep2_reg;
end
always @(*) begin
	/* main: %motion_vectors.exit*/
	/*   %117 = add nuw nsw i32 1, %116*/
		main_motion_vectorsexit_117 = main_signed_add_32_5;
end
always @(posedge clk) begin
	/* main: %motion_vectors.exit*/
	/*   %117 = add nuw nsw i32 1, %116*/
	if ((cur_state == LEGUP_F_main_BB_motion_vectorsexit_68)) begin
		main_motion_vectorsexit_117_reg <= main_motion_vectorsexit_117;
		if (start == 1'b0 && ^(main_motion_vectorsexit_117) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_motion_vectorsexit_117_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %motion_vectors.exit*/
	/*   %118 = add nuw nsw i32 1, %117*/
		main_motion_vectorsexit_118 = main_signed_add_32_3;
end
always @(posedge clk) begin
	/* main: %motion_vectors.exit*/
	/*   %118 = add nuw nsw i32 1, %117*/
	if ((cur_state == LEGUP_F_main_BB_motion_vectorsexit_68)) begin
		main_motion_vectorsexit_118_reg <= main_motion_vectorsexit_118;
		if (start == 1'b0 && ^(main_motion_vectorsexit_118) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_motion_vectorsexit_118_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %motion_vectors.exit*/
	/*   %119 = add nuw nsw i32 1, %118*/
		main_motion_vectorsexit_119 = main_signed_add_32_4;
end
always @(posedge clk) begin
	/* main: %motion_vectors.exit*/
	/*   %119 = add nuw nsw i32 1, %118*/
	if ((cur_state == LEGUP_F_main_BB_motion_vectorsexit_68)) begin
		main_motion_vectorsexit_119_reg <= main_motion_vectorsexit_119;
		if (start == 1'b0 && ^(main_motion_vectorsexit_119) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_motion_vectorsexit_119_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %motion_vectors.exit*/
	/*   %120 = add nuw nsw i32 %110, %119*/
		main_motion_vectorsexit_120 = main_signed_add_32_2;
end
always @(*) begin
/* main: %motion_vectors.exit*/
/*   %120 = add nuw nsw i32 %110, %119*/
	main_motion_vectorsexit_120_reg = main_loopexitiiii_37_reg;
end
always @(*) begin
	/* main: %motion_vectors.exit*/
	/*   %121 = add nsw i32 %112, %120*/
		main_motion_vectorsexit_121 = main_signed_add_32_6;
end
always @(*) begin
/* main: %motion_vectors.exit*/
/*   %121 = add nsw i32 %112, %120*/
	main_motion_vectorsexit_121_reg = main_loopexitiiii_38_reg;
end
always @(*) begin
	/* main: %motion_vectors.exit*/
	/*   %122 = add nsw i32 %115, %121*/
		main_motion_vectorsexit_122 = main_signed_add_32_0;
end
always @(*) begin
/* main: %motion_vectors.exit*/
/*   %122 = add nsw i32 %115, %121*/
	main_motion_vectorsexit_122_reg = main_lrphiiii_gep_reg;
end
always @(*) begin
	/* main: %motion_vectors.exit*/
	/*   %123 = add nsw i32 1, %122*/
		main_motion_vectorsexit_123 = main_signed_add_32_1;
end
always @(*) begin
/* main: %motion_vectors.exit*/
/*   %123 = add nsw i32 1, %122*/
	main_motion_vectorsexit_123_reg = main_lrphiiii_gep2_reg;
end
always @(*) begin
	/* main: %motion_vectors.exit*/
	/*   %124 = add nsw i32 1, %123*/
		main_motion_vectorsexit_124 = main_signed_add_32_6;
end
always @(posedge clk) begin
	/* main: %motion_vectors.exit*/
	/*   %124 = add nsw i32 1, %123*/
	if ((cur_state == LEGUP_F_main_BB_motion_vectorsexit_69)) begin
		main_motion_vectorsexit_124_reg <= main_motion_vectorsexit_124;
		if (start == 1'b0 && ^(main_motion_vectorsexit_124) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_motion_vectorsexit_124_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %motion_vectors.exit*/
	/*   %125 = add nsw i32 1, %124*/
		main_motion_vectorsexit_125 = main_signed_add_32_2;
end
always @(posedge clk) begin
	/* main: %motion_vectors.exit*/
	/*   %125 = add nsw i32 1, %124*/
	if ((cur_state == LEGUP_F_main_BB_motion_vectorsexit_69)) begin
		main_motion_vectorsexit_125_reg <= main_motion_vectorsexit_125;
		if (start == 1'b0 && ^(main_motion_vectorsexit_125) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_motion_vectorsexit_125_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %motion_vectors.exit*/
	/*   %127 = icmp eq i32 %125, 12*/
		main_motion_vectorsexit_127 = (main_motion_vectorsexit_125 == 32'd12);
end
always @(posedge clk) begin
	/* main: %motion_vectors.exit*/
	/*   %127 = icmp eq i32 %125, 12*/
	if ((cur_state == LEGUP_F_main_BB_motion_vectorsexit_69)) begin
		main_motion_vectorsexit_127_reg <= main_motion_vectorsexit_127;
		if (start == 1'b0 && ^(main_motion_vectorsexit_127) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_motion_vectorsexit_127_reg"); $finish; end
	end
end
always @(posedge clk) begin
	/* main: %Get_Bits.exit.i*/
	/*   %13 = call i32 @Get_motion_code() #2*/
	if ((cur_state == LEGUP_F_main_BB_Get_Bitsexiti_12)) begin
		Get_motion_code_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_13)) begin
		Get_motion_code_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_start"); $finish; end
	end
	/* main: %decode_motion_vector.exit.i.i*/
	/*   %61 = call i32 @Get_motion_code() #2*/
	if ((cur_state == LEGUP_F_main_BB_decode_motion_vectorexitii_40)) begin
		Get_motion_code_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_41)) begin
		Get_motion_code_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_start"); $finish; end
	end
end
always @(*) begin
	Get_motion_code_finish_final = Get_motion_code_finish_reg;
end
always @(posedge clk) begin
	if ((reset | (cur_state == LEGUP_F_main_BB_Get_Bitsexiti_12))) begin
		Get_motion_code_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_finish_reg"); $finish; end
	end
	if (Get_motion_code_finish) begin
		Get_motion_code_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_finish_reg"); $finish; end
	end
	if ((reset | (cur_state == LEGUP_F_main_BB_decode_motion_vectorexitii_40))) begin
		Get_motion_code_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_finish_reg"); $finish; end
	end
	if (Get_motion_code_finish) begin
		Get_motion_code_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_finish_reg"); $finish; end
	end
end
always @(posedge clk) begin
	if ((reset | (cur_state == LEGUP_F_main_BB_Get_Bitsexiti_12))) begin
		Get_motion_code_return_val_reg <= 0;
		if (start == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_return_val_reg"); $finish; end
	end
	if (Get_motion_code_finish) begin
		Get_motion_code_return_val_reg <= Get_motion_code_return_val;
		if (start == 1'b0 && ^(Get_motion_code_return_val) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_return_val_reg"); $finish; end
	end
	if ((reset | (cur_state == LEGUP_F_main_BB_decode_motion_vectorexitii_40))) begin
		Get_motion_code_return_val_reg <= 0;
		if (start == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_return_val_reg"); $finish; end
	end
	if (Get_motion_code_finish) begin
		Get_motion_code_return_val_reg <= Get_motion_code_return_val;
		if (start == 1'b0 && ^(Get_motion_code_return_val) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_return_val_reg"); $finish; end
	end
end
always @(*) begin
	legup_function_call = 1'd0;
	/* main: %Get_Bits.exit.i*/
	/*   %13 = call i32 @Get_motion_code() #2*/
	if ((cur_state == LEGUP_function_call_13)) begin
		legup_function_call = 1'd1;
	end
	/* main: %decode_motion_vector.exit.i.i*/
	/*   %61 = call i32 @Get_motion_code() #2*/
	if ((cur_state == LEGUP_function_call_41)) begin
		legup_function_call = 1'd1;
	end
end
always @(*) begin
	/* main: %.lr.ph.i.i.i.i*/
	/*   %gep = add i32 %gep_int, 1*/
	if ((cur_state == LEGUP_F_main_BB_lrphiiii_4)) begin
		main_signed_add_32_0_op0 = main_lrphiiii_gep_int;
	end
	/* main: %.lr.ph.i.i.i.i.i.i*/
	/*   %gep4 = add i32 %gep_int3, 1*/
	else if ((cur_state == LEGUP_F_main_BB_lrphiiiiii_23)) begin
		main_signed_add_32_0_op0 = main_lrphiiiiii_gep_int3;
	end
	/* main: %Fill_Buffer.exit.i.i.i.i*/
	/*   %gep8 = add i32 %gep_int7, 1*/
	else if ((cur_state == LEGUP_F_main_BB_Fill_Bufferexitiiii_27)) begin
		main_signed_add_32_0_op0 = main_Fill_Bufferexitiiii_gep_int7;
	end
	/* main: %.loopexit.i.i.i.i*/
	/*   %35 = add i32 %34, 1*/
	else if ((cur_state == LEGUP_F_main_BB_loopexitiiii_28)) begin
		main_signed_add_32_0_op0 = main_loopexitiiii_34;
	end
	/* main: %.loopexit2.i.loopexit.i.i.i*/
	/*   %41 = add i32 %40, %39*/
	else if ((cur_state == LEGUP_F_main_BB_loopexit2iloopexitiii_30)) begin
		main_signed_add_32_0_op0 = main_loopexit2iloopexitiii_40;
	end
	/* main: %43*/
	/*   %44 = add nsw i32 %13, -1*/
	else if ((cur_state == LEGUP_F_main_BB__43_35)) begin
		main_signed_add_32_0_op0 = main_Get_Bitsexiti_13_reg;
	end
	/* main: %52*/
	/*   %55 = add i32 %.neg2.i.i.i, 45*/
	else if ((cur_state == LEGUP_F_main_BB__52_37)) begin
		main_signed_add_32_0_op0 = main_52_neg2iii;
	end
	/* main: %57*/
	/*   %58 = add nsw i32 %55, 8192*/
	else if ((cur_state == LEGUP_F_main_BB__57_38)) begin
		main_signed_add_32_0_op0 = main_52_55_reg;
	end
	/* main: %.lr.ph.i.i.i.i17.i.i*/
	/*   %gep12 = add i32 %gep_int11, 1*/
	else if ((cur_state == LEGUP_F_main_BB_lrphiiii17ii_51)) begin
		main_signed_add_32_0_op0 = main_lrphiiii17ii_gep_int11;
	end
	/* main: %Fill_Buffer.exit.i.i19.i.i*/
	/*   %gep16 = add i32 %gep_int15, 1*/
	else if ((cur_state == LEGUP_F_main_BB_Fill_Bufferexitii19ii_55)) begin
		main_signed_add_32_0_op0 = main_Fill_Bufferexitii19ii_gep_int15;
	end
	/* main: %.loopexit.i.i20.i.i*/
	/*   %85 = add i32 -192, %66*/
	else if ((cur_state == LEGUP_F_main_BB_loopexitii20ii_56)) begin
		main_signed_add_32_0_op0 = -32'd192;
	end
	/* main: %.loopexit2.i.loopexit.i21.i.i*/
	/*   %89 = add i32 %88, %87*/
	else if ((cur_state == LEGUP_F_main_BB_loopexit2iloopexiti21ii_58)) begin
		main_signed_add_32_0_op0 = main_loopexit2iloopexiti21ii_88;
	end
	/* main: %91*/
	/*   %92 = add nsw i32 %61, -1*/
	else if ((cur_state == LEGUP_F_main_BB__91_63)) begin
		main_signed_add_32_0_op0 = main_decode_motion_vectorexitii_61_reg;
	end
	/* main: %100*/
	/*   %103 = add i32 %.neg2.i6.i.i, 103*/
	else if ((cur_state == LEGUP_F_main_BB__100_65)) begin
		main_signed_add_32_0_op0 = main_100_neg2i6ii;
	end
	/* main: %105*/
	/*   %106 = add nsw i32 %103, 8192*/
	else if ((cur_state == LEGUP_F_main_BB__105_66)) begin
		main_signed_add_32_0_op0 = main_100_103_reg;
	end
	/* main: %motion_vectors.exit*/
	/*   %113 = add nuw nsw i32 %112, %110*/
	else if ((cur_state == LEGUP_F_main_BB_motion_vectorsexit_68)) begin
		main_signed_add_32_0_op0 = main_motion_vectorsexit_112;
	end
	/* main: %motion_vectors.exit*/
	/*   %122 = add nsw i32 %115, %121*/
	else /* if ((cur_state == LEGUP_F_main_BB_motion_vectorsexit_69)) */ begin
		main_signed_add_32_0_op0 = main_motion_vectorsexit_115_reg;
	end
end
always @(*) begin
	/* main: %.lr.ph.i.i.i.i*/
	/*   %gep = add i32 %gep_int, 1*/
	if ((cur_state == LEGUP_F_main_BB_lrphiiii_4)) begin
		main_signed_add_32_0_op1 = 32'd1;
	end
	/* main: %.lr.ph.i.i.i.i.i.i*/
	/*   %gep4 = add i32 %gep_int3, 1*/
	else if ((cur_state == LEGUP_F_main_BB_lrphiiiiii_23)) begin
		main_signed_add_32_0_op1 = 32'd1;
	end
	/* main: %Fill_Buffer.exit.i.i.i.i*/
	/*   %gep8 = add i32 %gep_int7, 1*/
	else if ((cur_state == LEGUP_F_main_BB_Fill_Bufferexitiiii_27)) begin
		main_signed_add_32_0_op1 = 32'd1;
	end
	/* main: %.loopexit.i.i.i.i*/
	/*   %35 = add i32 %34, 1*/
	else if ((cur_state == LEGUP_F_main_BB_loopexitiiii_28)) begin
		main_signed_add_32_0_op1 = 32'd1;
	end
	/* main: %.loopexit2.i.loopexit.i.i.i*/
	/*   %41 = add i32 %40, %39*/
	else if ((cur_state == LEGUP_F_main_BB_loopexit2iloopexitiii_30)) begin
		main_signed_add_32_0_op1 = main_loopexit2iloopexitiii_39;
	end
	/* main: %43*/
	/*   %44 = add nsw i32 %13, -1*/
	else if ((cur_state == LEGUP_F_main_BB__43_35)) begin
		main_signed_add_32_0_op1 = -32'd1;
	end
	/* main: %52*/
	/*   %55 = add i32 %.neg2.i.i.i, 45*/
	else if ((cur_state == LEGUP_F_main_BB__52_37)) begin
		main_signed_add_32_0_op1 = 32'd45;
	end
	/* main: %57*/
	/*   %58 = add nsw i32 %55, 8192*/
	else if ((cur_state == LEGUP_F_main_BB__57_38)) begin
		main_signed_add_32_0_op1 = 32'd8192;
	end
	/* main: %.lr.ph.i.i.i.i17.i.i*/
	/*   %gep12 = add i32 %gep_int11, 1*/
	else if ((cur_state == LEGUP_F_main_BB_lrphiiii17ii_51)) begin
		main_signed_add_32_0_op1 = 32'd1;
	end
	/* main: %Fill_Buffer.exit.i.i19.i.i*/
	/*   %gep16 = add i32 %gep_int15, 1*/
	else if ((cur_state == LEGUP_F_main_BB_Fill_Bufferexitii19ii_55)) begin
		main_signed_add_32_0_op1 = 32'd1;
	end
	/* main: %.loopexit.i.i20.i.i*/
	/*   %85 = add i32 -192, %66*/
	else if ((cur_state == LEGUP_F_main_BB_loopexitii20ii_56)) begin
		main_signed_add_32_0_op1 = main_63_66_reg;
	end
	/* main: %.loopexit2.i.loopexit.i21.i.i*/
	/*   %89 = add i32 %88, %87*/
	else if ((cur_state == LEGUP_F_main_BB_loopexit2iloopexiti21ii_58)) begin
		main_signed_add_32_0_op1 = main_loopexit2iloopexiti21ii_87;
	end
	/* main: %91*/
	/*   %92 = add nsw i32 %61, -1*/
	else if ((cur_state == LEGUP_F_main_BB__91_63)) begin
		main_signed_add_32_0_op1 = -32'd1;
	end
	/* main: %100*/
	/*   %103 = add i32 %.neg2.i6.i.i, 103*/
	else if ((cur_state == LEGUP_F_main_BB__100_65)) begin
		main_signed_add_32_0_op1 = 32'd103;
	end
	/* main: %105*/
	/*   %106 = add nsw i32 %103, 8192*/
	else if ((cur_state == LEGUP_F_main_BB__105_66)) begin
		main_signed_add_32_0_op1 = 32'd8192;
	end
	/* main: %motion_vectors.exit*/
	/*   %113 = add nuw nsw i32 %112, %110*/
	else if ((cur_state == LEGUP_F_main_BB_motion_vectorsexit_68)) begin
		main_signed_add_32_0_op1 = main_motion_vectorsexit_110;
	end
	/* main: %motion_vectors.exit*/
	/*   %122 = add nsw i32 %115, %121*/
	else /* if ((cur_state == LEGUP_F_main_BB_motion_vectorsexit_69)) */ begin
		main_signed_add_32_0_op1 = main_motion_vectorsexit_121_reg;
	end
end
always @(*) begin
	main_signed_add_32_0 = (main_signed_add_32_0_op0 + main_signed_add_32_0_op1);
end
always @(*) begin
	/* main: %.lr.ph.i.i.i.i*/
	/*   %gep2 = add i32 %gep_int1, 1*/
	if ((cur_state == LEGUP_F_main_BB_lrphiiii_4)) begin
		main_signed_add_32_1_op0 = main_lrphiiii_gep_int1;
	end
	/* main: %.lr.ph.i.i.i.i.i.i*/
	/*   %gep6 = add i32 %gep_int5, 1*/
	else if ((cur_state == LEGUP_F_main_BB_lrphiiiiii_23)) begin
		main_signed_add_32_1_op0 = main_lrphiiiiii_gep_int5;
	end
	/* main: %Fill_Buffer.exit.i.i.i.i*/
	/*   %32 = add nsw i32 %Incnt.1.i.i.i.i, 8*/
	else if ((cur_state == LEGUP_F_main_BB_Fill_Bufferexitiiii_27)) begin
		main_signed_add_32_1_op0 = main_preheader1iiii_Incnt1iiii_reg;
	end
	/* main: %.loopexit.i.i.i.i*/
	/*   %gep10 = add i32 %gep_int9, %35*/
	else if ((cur_state == LEGUP_F_main_BB_loopexitiiii_28)) begin
		main_signed_add_32_1_op0 = main_loopexitiiii_gep_int9;
	end
	/* main: %.loopexit2.i.loopexit.i.i.i*/
	/*   %40 = add i32 -192, %18*/
	else if ((cur_state == LEGUP_F_main_BB_loopexit2iloopexitiii_30)) begin
		main_signed_add_32_1_op0 = -32'd192;
	end
	/* main: %43*/
	/*   %46 = add i32 %17, 1*/
	else if ((cur_state == LEGUP_F_main_BB__43_35)) begin
		main_signed_add_32_1_op0 = main_15_17_reg;
	end
	/* main: %.lr.ph.i.i.i.i17.i.i*/
	/*   %gep14 = add i32 %gep_int13, 1*/
	else if ((cur_state == LEGUP_F_main_BB_lrphiiii17ii_51)) begin
		main_signed_add_32_1_op0 = main_lrphiiii17ii_gep_int13;
	end
	/* main: %Fill_Buffer.exit.i.i19.i.i*/
	/*   %80 = add nsw i32 %Incnt.1.i.i12.i.i, 8*/
	else if ((cur_state == LEGUP_F_main_BB_Fill_Bufferexitii19ii_55)) begin
		main_signed_add_32_1_op0 = main_preheader1ii13ii_Incnt1ii12ii_reg;
	end
	/* main: %.loopexit.i.i20.i.i*/
	/*   %gep18 = add i32 %gep_int17, %83*/
	else if ((cur_state == LEGUP_F_main_BB_loopexitii20ii_56)) begin
		main_signed_add_32_1_op0 = main_loopexitii20ii_gep_int17;
	end
	/* main: %.loopexit2.i.loopexit.i21.i.i*/
	/*   %88 = add i32 -192, %66*/
	else if ((cur_state == LEGUP_F_main_BB_loopexit2iloopexiti21ii_58)) begin
		main_signed_add_32_1_op0 = -32'd192;
	end
	/* main: %91*/
	/*   %94 = add i32 %65, 1*/
	else if ((cur_state == LEGUP_F_main_BB__91_63)) begin
		main_signed_add_32_1_op0 = main_63_65_reg;
	end
	/* main: %motion_vectors.exit*/
	/*   %116 = add nuw nsw i32 %115, %113*/
	else if ((cur_state == LEGUP_F_main_BB_motion_vectorsexit_68)) begin
		main_signed_add_32_1_op0 = main_motion_vectorsexit_115;
	end
	/* main: %motion_vectors.exit*/
	/*   %123 = add nsw i32 1, %122*/
	else /* if ((cur_state == LEGUP_F_main_BB_motion_vectorsexit_69)) */ begin
		main_signed_add_32_1_op0 = 32'd1;
	end
end
always @(*) begin
	/* main: %.lr.ph.i.i.i.i*/
	/*   %gep2 = add i32 %gep_int1, 1*/
	if ((cur_state == LEGUP_F_main_BB_lrphiiii_4)) begin
		main_signed_add_32_1_op1 = 32'd1;
	end
	/* main: %.lr.ph.i.i.i.i.i.i*/
	/*   %gep6 = add i32 %gep_int5, 1*/
	else if ((cur_state == LEGUP_F_main_BB_lrphiiiiii_23)) begin
		main_signed_add_32_1_op1 = 32'd1;
	end
	/* main: %Fill_Buffer.exit.i.i.i.i*/
	/*   %32 = add nsw i32 %Incnt.1.i.i.i.i, 8*/
	else if ((cur_state == LEGUP_F_main_BB_Fill_Bufferexitiiii_27)) begin
		main_signed_add_32_1_op1 = 32'd8;
	end
	/* main: %.loopexit.i.i.i.i*/
	/*   %gep10 = add i32 %gep_int9, %35*/
	else if ((cur_state == LEGUP_F_main_BB_loopexitiiii_28)) begin
		main_signed_add_32_1_op1 = main_loopexitiiii_35;
	end
	/* main: %.loopexit2.i.loopexit.i.i.i*/
	/*   %40 = add i32 -192, %18*/
	else if ((cur_state == LEGUP_F_main_BB_loopexit2iloopexitiii_30)) begin
		main_signed_add_32_1_op1 = main_15_18_reg;
	end
	/* main: %43*/
	/*   %46 = add i32 %17, 1*/
	else if ((cur_state == LEGUP_F_main_BB__43_35)) begin
		main_signed_add_32_1_op1 = 32'd1;
	end
	/* main: %.lr.ph.i.i.i.i17.i.i*/
	/*   %gep14 = add i32 %gep_int13, 1*/
	else if ((cur_state == LEGUP_F_main_BB_lrphiiii17ii_51)) begin
		main_signed_add_32_1_op1 = 32'd1;
	end
	/* main: %Fill_Buffer.exit.i.i19.i.i*/
	/*   %80 = add nsw i32 %Incnt.1.i.i12.i.i, 8*/
	else if ((cur_state == LEGUP_F_main_BB_Fill_Bufferexitii19ii_55)) begin
		main_signed_add_32_1_op1 = 32'd8;
	end
	/* main: %.loopexit.i.i20.i.i*/
	/*   %gep18 = add i32 %gep_int17, %83*/
	else if ((cur_state == LEGUP_F_main_BB_loopexitii20ii_56)) begin
		main_signed_add_32_1_op1 = main_loopexitii20ii_83;
	end
	/* main: %.loopexit2.i.loopexit.i21.i.i*/
	/*   %88 = add i32 -192, %66*/
	else if ((cur_state == LEGUP_F_main_BB_loopexit2iloopexiti21ii_58)) begin
		main_signed_add_32_1_op1 = main_63_66_reg;
	end
	/* main: %91*/
	/*   %94 = add i32 %65, 1*/
	else if ((cur_state == LEGUP_F_main_BB__91_63)) begin
		main_signed_add_32_1_op1 = 32'd1;
	end
	/* main: %motion_vectors.exit*/
	/*   %116 = add nuw nsw i32 %115, %113*/
	else if ((cur_state == LEGUP_F_main_BB_motion_vectorsexit_68)) begin
		main_signed_add_32_1_op1 = main_motion_vectorsexit_113;
	end
	/* main: %motion_vectors.exit*/
	/*   %123 = add nsw i32 1, %122*/
	else /* if ((cur_state == LEGUP_F_main_BB_motion_vectorsexit_69)) */ begin
		main_signed_add_32_1_op1 = main_motion_vectorsexit_122;
	end
end
always @(*) begin
	main_signed_add_32_1 = (main_signed_add_32_1_op0 + main_signed_add_32_1_op1);
end
always @(*) begin
	/* main: %15*/
	/*   %19 = sub nsw i32 %18, 200*/
	if ((cur_state == LEGUP_F_main_BB__15_17)) begin
		main_signed_subtract_32_0_op0 = main_15_18;
	end
	/* main: %21*/
	/*   %24 = sub i32 224, %18*/
	else if ((cur_state == LEGUP_F_main_BB__21_19)) begin
		main_signed_subtract_32_0_op0 = 32'd224;
	end
	/* main: %52*/
	/*   %.neg2.i.i.i = sub i32 %.neg1.i.i.i, %54*/
	else if ((cur_state == LEGUP_F_main_BB__52_37)) begin
		main_signed_subtract_32_0_op0 = main_52_neg1iii;
	end
	/* main: %59*/
	/*   %60 = sub nsw i32 %55, 8192*/
	else if ((cur_state == LEGUP_F_main_BB__59_39)) begin
		main_signed_subtract_32_0_op0 = main_52_55_reg;
	end
	/* main: %63*/
	/*   %67 = sub nsw i32 %66, 200*/
	else if ((cur_state == LEGUP_F_main_BB__63_45)) begin
		main_signed_subtract_32_0_op0 = main_63_66;
	end
	/* main: %69*/
	/*   %72 = sub i32 224, %66*/
	else if ((cur_state == LEGUP_F_main_BB__69_47)) begin
		main_signed_subtract_32_0_op0 = 32'd224;
	end
	/* main: %100*/
	/*   %.neg2.i6.i.i = sub i32 %.neg1.i5.i.i, %102*/
	else if ((cur_state == LEGUP_F_main_BB__100_65)) begin
		main_signed_subtract_32_0_op0 = main_100_neg1i5ii;
	end
	/* main: %107*/
	/*   %108 = sub nsw i32 %103, 8192*/
	else /* if ((cur_state == LEGUP_F_main_BB__107_67)) */ begin
		main_signed_subtract_32_0_op0 = main_100_103_reg;
	end
end
always @(*) begin
	/* main: %15*/
	/*   %19 = sub nsw i32 %18, 200*/
	if ((cur_state == LEGUP_F_main_BB__15_17)) begin
		main_signed_subtract_32_0_op1 = 32'd200;
	end
	/* main: %21*/
	/*   %24 = sub i32 224, %18*/
	else if ((cur_state == LEGUP_F_main_BB__21_19)) begin
		main_signed_subtract_32_0_op1 = main_15_18_reg;
	end
	/* main: %52*/
	/*   %.neg2.i.i.i = sub i32 %.neg1.i.i.i, %54*/
	else if ((cur_state == LEGUP_F_main_BB__52_37)) begin
		main_signed_subtract_32_0_op1 = main_52_54;
	end
	/* main: %59*/
	/*   %60 = sub nsw i32 %55, 8192*/
	else if ((cur_state == LEGUP_F_main_BB__59_39)) begin
		main_signed_subtract_32_0_op1 = 32'd8192;
	end
	/* main: %63*/
	/*   %67 = sub nsw i32 %66, 200*/
	else if ((cur_state == LEGUP_F_main_BB__63_45)) begin
		main_signed_subtract_32_0_op1 = 32'd200;
	end
	/* main: %69*/
	/*   %72 = sub i32 224, %66*/
	else if ((cur_state == LEGUP_F_main_BB__69_47)) begin
		main_signed_subtract_32_0_op1 = main_63_66_reg;
	end
	/* main: %100*/
	/*   %.neg2.i6.i.i = sub i32 %.neg1.i5.i.i, %102*/
	else if ((cur_state == LEGUP_F_main_BB__100_65)) begin
		main_signed_subtract_32_0_op1 = main_100_102;
	end
	/* main: %107*/
	/*   %108 = sub nsw i32 %103, 8192*/
	else /* if ((cur_state == LEGUP_F_main_BB__107_67)) */ begin
		main_signed_subtract_32_0_op1 = 32'd8192;
	end
end
always @(*) begin
	main_signed_subtract_32_0 = (main_signed_subtract_32_0_op0 - main_signed_subtract_32_0_op1);
end
always @(*) begin
	/* main: %.loopexit.i.i.i.i*/
	/*   %37 = add i32 -192, %18*/
	if ((cur_state == LEGUP_F_main_BB_loopexitiiii_28)) begin
		main_signed_add_32_2_op0 = -32'd192;
	end
	/* main: %43*/
	/*   %48 = add i32 %47, 45*/
	else if ((cur_state == LEGUP_F_main_BB__43_35)) begin
		main_signed_add_32_2_op0 = main_43_47;
	end
	/* main: %.loopexit.i.i20.i.i*/
	/*   %86 = add i32 %85, %84*/
	else if ((cur_state == LEGUP_F_main_BB_loopexitii20ii_56)) begin
		main_signed_add_32_2_op0 = main_loopexitii20ii_85;
	end
	/* main: %91*/
	/*   %96 = add i32 %95, 103*/
	else if ((cur_state == LEGUP_F_main_BB__91_63)) begin
		main_signed_add_32_2_op0 = main_91_95;
	end
	/* main: %motion_vectors.exit*/
	/*   %120 = add nuw nsw i32 %110, %119*/
	else if ((cur_state == LEGUP_F_main_BB_motion_vectorsexit_68)) begin
		main_signed_add_32_2_op0 = main_motion_vectorsexit_110;
	end
	/* main: %motion_vectors.exit*/
	/*   %125 = add nsw i32 1, %124*/
	else /* if ((cur_state == LEGUP_F_main_BB_motion_vectorsexit_69)) */ begin
		main_signed_add_32_2_op0 = 32'd1;
	end
end
always @(*) begin
	/* main: %.loopexit.i.i.i.i*/
	/*   %37 = add i32 -192, %18*/
	if ((cur_state == LEGUP_F_main_BB_loopexitiiii_28)) begin
		main_signed_add_32_2_op1 = main_15_18_reg;
	end
	/* main: %43*/
	/*   %48 = add i32 %47, 45*/
	else if ((cur_state == LEGUP_F_main_BB__43_35)) begin
		main_signed_add_32_2_op1 = 32'd45;
	end
	/* main: %.loopexit.i.i20.i.i*/
	/*   %86 = add i32 %85, %84*/
	else if ((cur_state == LEGUP_F_main_BB_loopexitii20ii_56)) begin
		main_signed_add_32_2_op1 = main_loopexitii20ii_84;
	end
	/* main: %91*/
	/*   %96 = add i32 %95, 103*/
	else if ((cur_state == LEGUP_F_main_BB__91_63)) begin
		main_signed_add_32_2_op1 = 32'd103;
	end
	/* main: %motion_vectors.exit*/
	/*   %120 = add nuw nsw i32 %110, %119*/
	else if ((cur_state == LEGUP_F_main_BB_motion_vectorsexit_68)) begin
		main_signed_add_32_2_op1 = main_motion_vectorsexit_119;
	end
	/* main: %motion_vectors.exit*/
	/*   %125 = add nsw i32 1, %124*/
	else /* if ((cur_state == LEGUP_F_main_BB_motion_vectorsexit_69)) */ begin
		main_signed_add_32_2_op1 = main_motion_vectorsexit_124;
	end
end
always @(*) begin
	main_signed_add_32_2 = (main_signed_add_32_2_op0 + main_signed_add_32_2_op1);
end
always @(*) begin
	/* main: %.loopexit.i.i.i.i*/
	/*   %38 = add i32 %37, %36*/
	if ((cur_state == LEGUP_F_main_BB_loopexitiiii_28)) begin
		main_signed_add_32_6_op0 = main_loopexitiiii_37;
	end
	/* main: %43*/
	/*   %47 = add i32 %46, %45*/
	else if ((cur_state == LEGUP_F_main_BB__43_35)) begin
		main_signed_add_32_6_op0 = main_43_46;
	end
	/* main: %.loopexit.i.i20.i.i*/
	/*   %83 = add i32 %82, 1*/
	else if ((cur_state == LEGUP_F_main_BB_loopexitii20ii_56)) begin
		main_signed_add_32_6_op0 = main_loopexitii20ii_82;
	end
	/* main: %91*/
	/*   %95 = add i32 %94, %93*/
	else if ((cur_state == LEGUP_F_main_BB__91_63)) begin
		main_signed_add_32_6_op0 = main_91_94;
	end
	/* main: %motion_vectors.exit*/
	/*   %121 = add nsw i32 %112, %120*/
	else if ((cur_state == LEGUP_F_main_BB_motion_vectorsexit_68)) begin
		main_signed_add_32_6_op0 = main_motion_vectorsexit_112;
	end
	/* main: %motion_vectors.exit*/
	/*   %124 = add nsw i32 1, %123*/
	else /* if ((cur_state == LEGUP_F_main_BB_motion_vectorsexit_69)) */ begin
		main_signed_add_32_6_op0 = 32'd1;
	end
end
always @(*) begin
	/* main: %.loopexit.i.i.i.i*/
	/*   %38 = add i32 %37, %36*/
	if ((cur_state == LEGUP_F_main_BB_loopexitiiii_28)) begin
		main_signed_add_32_6_op1 = main_loopexitiiii_36;
	end
	/* main: %43*/
	/*   %47 = add i32 %46, %45*/
	else if ((cur_state == LEGUP_F_main_BB__43_35)) begin
		main_signed_add_32_6_op1 = main_43_45;
	end
	/* main: %.loopexit.i.i20.i.i*/
	/*   %83 = add i32 %82, 1*/
	else if ((cur_state == LEGUP_F_main_BB_loopexitii20ii_56)) begin
		main_signed_add_32_6_op1 = 32'd1;
	end
	/* main: %91*/
	/*   %95 = add i32 %94, %93*/
	else if ((cur_state == LEGUP_F_main_BB__91_63)) begin
		main_signed_add_32_6_op1 = main_91_93;
	end
	/* main: %motion_vectors.exit*/
	/*   %121 = add nsw i32 %112, %120*/
	else if ((cur_state == LEGUP_F_main_BB_motion_vectorsexit_68)) begin
		main_signed_add_32_6_op1 = main_motion_vectorsexit_120;
	end
	/* main: %motion_vectors.exit*/
	/*   %124 = add nsw i32 1, %123*/
	else /* if ((cur_state == LEGUP_F_main_BB_motion_vectorsexit_69)) */ begin
		main_signed_add_32_6_op1 = main_motion_vectorsexit_123;
	end
end
always @(*) begin
	main_signed_add_32_6 = (main_signed_add_32_6_op0 + main_signed_add_32_6_op1);
end
always @(*) begin
	/* main: %motion_vectors.exit*/
	/*   %117 = add nuw nsw i32 1, %116*/
if (reset) begin main_signed_add_32_5_op0 = 0; end
		main_signed_add_32_5_op0 = 32'd1;
end
always @(*) begin
	/* main: %motion_vectors.exit*/
	/*   %117 = add nuw nsw i32 1, %116*/
		main_signed_add_32_5_op1 = main_motion_vectorsexit_116;
end
always @(*) begin
	main_signed_add_32_5 = (main_signed_add_32_5_op0 + main_signed_add_32_5_op1);
end
always @(*) begin
	/* main: %motion_vectors.exit*/
	/*   %118 = add nuw nsw i32 1, %117*/
if (reset) begin main_signed_add_32_3_op0 = 0; end
		main_signed_add_32_3_op0 = 32'd1;
end
always @(*) begin
	/* main: %motion_vectors.exit*/
	/*   %118 = add nuw nsw i32 1, %117*/
		main_signed_add_32_3_op1 = main_motion_vectorsexit_117;
end
always @(*) begin
	main_signed_add_32_3 = (main_signed_add_32_3_op0 + main_signed_add_32_3_op1);
end
always @(*) begin
	/* main: %motion_vectors.exit*/
	/*   %119 = add nuw nsw i32 1, %118*/
if (reset) begin main_signed_add_32_4_op0 = 0; end
		main_signed_add_32_4_op0 = 32'd1;
end
always @(*) begin
	/* main: %motion_vectors.exit*/
	/*   %119 = add nuw nsw i32 1, %118*/
		main_signed_add_32_4_op1 = main_motion_vectorsexit_118;
end
always @(*) begin
	main_signed_add_32_4 = (main_signed_add_32_4_op0 + main_signed_add_32_4_op1);
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		finish <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
	/* main: %132*/
	/*   ret i32 %125*/
	if ((cur_state == LEGUP_F_main_BB__132_72)) begin
		finish <= (memory_controller_waitrequest == 1'd0);
		if (start == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
end
always @(*) begin
	memory_controller_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_a = 1'd0;
	end
	/* main: %0*/
	/*   store i8* getelementptr inbounds ([2048 x i8]* @ld_Rdbfr, i32 1, i32 0), i8** @ld_Rdptr, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_1)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* @ld_Incnt, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__0_2)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.lr.ph.i.i.i.i*/
	/*   %1 = load i8* %p2.02.i.i.i.i, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_main_BB_lrphiiii_4)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.lr.ph.i.i.i.i*/
	/*   store i8 %1, i8* %p1.01.i.i.i.i, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_main_BB_lrphiiii_6)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %Get_Bits.exit.i*/
	/*   %4 = load i8* getelementptr inbounds ([2048 x i8]* @ld_Rdbfr, i32 0, i32 0), align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_main_BB_Get_Bitsexiti_8)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %Get_Bits.exit.i*/
	/*   %.pre1.i = load i8* getelementptr inbounds ([2048 x i8]* @ld_Rdbfr, i32 0, i32 2), align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_main_BB_Get_Bitsexiti_9)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %Get_Bits.exit.i*/
	/*   store i8* getelementptr inbounds ([2048 x i8]* @ld_Rdbfr, i32 0, i32 4), i8** @ld_Rdptr, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_Get_Bitsexiti_10)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %Get_Bits.exit.i*/
	/*   store i32 %12, i32* @ld_Bfr, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_Get_Bitsexiti_11)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %15*/
	/*   %16 = load i32* @ld_Bfr, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__15_15)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %15*/
	/*   store i32 undef, i32* @ld_Bfr, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__15_17)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %21*/
	/*   %22 = load i8** @ld_Rdptr, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__21_19)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.lr.ph.i.i.i.i.i.i*/
	/*   %27 = load i8* %p2.02.i.i.i.i.i.i, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_main_BB_lrphiiiiii_23)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.lr.ph.i.i.i.i.i.i*/
	/*   store i8 %27, i8* %p1.01.i.i.i.i.i.i, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_main_BB_lrphiiiiii_25)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.loopexit.i.i.i.i*/
	/*   store i8* %scevgep30, i8** @ld_Rdptr, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_loopexitiiii_28)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.loopexit2.i.loopexit.i.i.i*/
	/*   store i8* %.lcssa2, i8** @ld_Rdptr, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_loopexit2iloopexitiii_30)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.loopexit2.i.i.i.i*/
	/*   store i32 %Incnt.2.i.i.i.i, i32* @ld_Incnt, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_loopexit2iiii_32)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %63*/
	/*   %64 = load i32* @ld_Bfr, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__63_43)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %63*/
	/*   store i32 undef, i32* @ld_Bfr, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__63_45)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %69*/
	/*   %70 = load i8** @ld_Rdptr, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__69_47)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.lr.ph.i.i.i.i17.i.i*/
	/*   %75 = load i8* %p2.02.i.i.i.i14.i.i, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_main_BB_lrphiiii17ii_51)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.lr.ph.i.i.i.i17.i.i*/
	/*   store i8 %75, i8* %p1.01.i.i.i.i15.i.i, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_main_BB_lrphiiii17ii_53)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.loopexit.i.i20.i.i*/
	/*   store i8* %scevgep, i8** @ld_Rdptr, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_loopexitii20ii_56)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.loopexit2.i.loopexit.i21.i.i*/
	/*   store i8* %.lcssa, i8** @ld_Rdptr, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_loopexit2iloopexiti21ii_58)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.loopexit2.i.i23.i.i*/
	/*   store i32 %Incnt.2.i.i22.i.i, i32* @ld_Incnt, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_loopexit2ii23ii_60)) begin
		memory_controller_enable_a = 1'd1;
	end
end
always @(*) begin
	memory_controller_address_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_a = 1'd0;
	end
	/* main: %0*/
	/*   store i8* getelementptr inbounds ([2048 x i8]* @ld_Rdbfr, i32 1, i32 0), i8** @ld_Rdptr, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_1)) begin
		memory_controller_address_a = `TAG_g_ld_Rdptr_a;
	end
	/* main: %0*/
	/*   store i32 0, i32* @ld_Incnt, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__0_2)) begin
		memory_controller_address_a = `TAG_g_ld_Incnt_a;
	end
	/* main: %.lr.ph.i.i.i.i*/
	/*   %1 = load i8* %p2.02.i.i.i.i, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_main_BB_lrphiiii_4)) begin
		memory_controller_address_a = main_lrphiiii_p202iiii_reg;
	end
	/* main: %.lr.ph.i.i.i.i*/
	/*   store i8 %1, i8* %p1.01.i.i.i.i, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_main_BB_lrphiiii_6)) begin
		memory_controller_address_a = main_lrphiiii_p101iiii_reg;
	end
	/* main: %Get_Bits.exit.i*/
	/*   %4 = load i8* getelementptr inbounds ([2048 x i8]* @ld_Rdbfr, i32 0, i32 0), align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_main_BB_Get_Bitsexiti_8)) begin
		memory_controller_address_a = `TAG_g_ld_Rdbfr_a;
	end
	/* main: %Get_Bits.exit.i*/
	/*   %.pre1.i = load i8* getelementptr inbounds ([2048 x i8]* @ld_Rdbfr, i32 0, i32 2), align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_main_BB_Get_Bitsexiti_9)) begin
		memory_controller_address_a = (`TAG_g_ld_Rdbfr_a | (1 * 32'd2));
	end
	/* main: %Get_Bits.exit.i*/
	/*   store i8* getelementptr inbounds ([2048 x i8]* @ld_Rdbfr, i32 0, i32 4), i8** @ld_Rdptr, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_Get_Bitsexiti_10)) begin
		memory_controller_address_a = `TAG_g_ld_Rdptr_a;
	end
	/* main: %Get_Bits.exit.i*/
	/*   store i32 %12, i32* @ld_Bfr, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_Get_Bitsexiti_11)) begin
		memory_controller_address_a = `TAG_g_ld_Bfr_a;
	end
	/* main: %15*/
	/*   %16 = load i32* @ld_Bfr, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__15_15)) begin
		memory_controller_address_a = `TAG_g_ld_Bfr_a;
	end
	/* main: %15*/
	/*   store i32 undef, i32* @ld_Bfr, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__15_17)) begin
		memory_controller_address_a = `TAG_g_ld_Bfr_a;
	end
	/* main: %21*/
	/*   %22 = load i8** @ld_Rdptr, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__21_19)) begin
		memory_controller_address_a = `TAG_g_ld_Rdptr_a;
	end
	/* main: %.lr.ph.i.i.i.i.i.i*/
	/*   %27 = load i8* %p2.02.i.i.i.i.i.i, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_main_BB_lrphiiiiii_23)) begin
		memory_controller_address_a = main_lrphiiiiii_p202iiiiii_reg;
	end
	/* main: %.lr.ph.i.i.i.i.i.i*/
	/*   store i8 %27, i8* %p1.01.i.i.i.i.i.i, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_main_BB_lrphiiiiii_25)) begin
		memory_controller_address_a = main_lrphiiiiii_p101iiiiii_reg;
	end
	/* main: %.loopexit.i.i.i.i*/
	/*   store i8* %scevgep30, i8** @ld_Rdptr, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_loopexitiiii_28)) begin
		memory_controller_address_a = `TAG_g_ld_Rdptr_a;
	end
	/* main: %.loopexit2.i.loopexit.i.i.i*/
	/*   store i8* %.lcssa2, i8** @ld_Rdptr, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_loopexit2iloopexitiii_30)) begin
		memory_controller_address_a = `TAG_g_ld_Rdptr_a;
	end
	/* main: %.loopexit2.i.i.i.i*/
	/*   store i32 %Incnt.2.i.i.i.i, i32* @ld_Incnt, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_loopexit2iiii_32)) begin
		memory_controller_address_a = `TAG_g_ld_Incnt_a;
	end
	/* main: %63*/
	/*   %64 = load i32* @ld_Bfr, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__63_43)) begin
		memory_controller_address_a = `TAG_g_ld_Bfr_a;
	end
	/* main: %63*/
	/*   store i32 undef, i32* @ld_Bfr, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__63_45)) begin
		memory_controller_address_a = `TAG_g_ld_Bfr_a;
	end
	/* main: %69*/
	/*   %70 = load i8** @ld_Rdptr, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__69_47)) begin
		memory_controller_address_a = `TAG_g_ld_Rdptr_a;
	end
	/* main: %.lr.ph.i.i.i.i17.i.i*/
	/*   %75 = load i8* %p2.02.i.i.i.i14.i.i, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_main_BB_lrphiiii17ii_51)) begin
		memory_controller_address_a = main_lrphiiii17ii_p202iiii14ii_reg;
	end
	/* main: %.lr.ph.i.i.i.i17.i.i*/
	/*   store i8 %75, i8* %p1.01.i.i.i.i15.i.i, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_main_BB_lrphiiii17ii_53)) begin
		memory_controller_address_a = main_lrphiiii17ii_p101iiii15ii_reg;
	end
	/* main: %.loopexit.i.i20.i.i*/
	/*   store i8* %scevgep, i8** @ld_Rdptr, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_loopexitii20ii_56)) begin
		memory_controller_address_a = `TAG_g_ld_Rdptr_a;
	end
	/* main: %.loopexit2.i.loopexit.i21.i.i*/
	/*   store i8* %.lcssa, i8** @ld_Rdptr, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_loopexit2iloopexiti21ii_58)) begin
		memory_controller_address_a = `TAG_g_ld_Rdptr_a;
	end
	/* main: %.loopexit2.i.i23.i.i*/
	/*   store i32 %Incnt.2.i.i22.i.i, i32* @ld_Incnt, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_loopexit2ii23ii_60)) begin
		memory_controller_address_a = `TAG_g_ld_Incnt_a;
	end
end
always @(*) begin
	memory_controller_write_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %0*/
	/*   store i8* getelementptr inbounds ([2048 x i8]* @ld_Rdbfr, i32 1, i32 0), i8** @ld_Rdptr, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_1)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* @ld_Incnt, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__0_2)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %.lr.ph.i.i.i.i*/
	/*   %1 = load i8* %p2.02.i.i.i.i, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_main_BB_lrphiiii_4)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %.lr.ph.i.i.i.i*/
	/*   store i8 %1, i8* %p1.01.i.i.i.i, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_main_BB_lrphiiii_6)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %Get_Bits.exit.i*/
	/*   %4 = load i8* getelementptr inbounds ([2048 x i8]* @ld_Rdbfr, i32 0, i32 0), align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_main_BB_Get_Bitsexiti_8)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %Get_Bits.exit.i*/
	/*   %.pre1.i = load i8* getelementptr inbounds ([2048 x i8]* @ld_Rdbfr, i32 0, i32 2), align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_main_BB_Get_Bitsexiti_9)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %Get_Bits.exit.i*/
	/*   store i8* getelementptr inbounds ([2048 x i8]* @ld_Rdbfr, i32 0, i32 4), i8** @ld_Rdptr, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_Get_Bitsexiti_10)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %Get_Bits.exit.i*/
	/*   store i32 %12, i32* @ld_Bfr, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_Get_Bitsexiti_11)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %15*/
	/*   %16 = load i32* @ld_Bfr, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__15_15)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %15*/
	/*   store i32 undef, i32* @ld_Bfr, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__15_17)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %21*/
	/*   %22 = load i8** @ld_Rdptr, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__21_19)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %.lr.ph.i.i.i.i.i.i*/
	/*   %27 = load i8* %p2.02.i.i.i.i.i.i, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_main_BB_lrphiiiiii_23)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %.lr.ph.i.i.i.i.i.i*/
	/*   store i8 %27, i8* %p1.01.i.i.i.i.i.i, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_main_BB_lrphiiiiii_25)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %.loopexit.i.i.i.i*/
	/*   store i8* %scevgep30, i8** @ld_Rdptr, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_loopexitiiii_28)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %.loopexit2.i.loopexit.i.i.i*/
	/*   store i8* %.lcssa2, i8** @ld_Rdptr, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_loopexit2iloopexitiii_30)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %.loopexit2.i.i.i.i*/
	/*   store i32 %Incnt.2.i.i.i.i, i32* @ld_Incnt, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_loopexit2iiii_32)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %63*/
	/*   %64 = load i32* @ld_Bfr, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__63_43)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %63*/
	/*   store i32 undef, i32* @ld_Bfr, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__63_45)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %69*/
	/*   %70 = load i8** @ld_Rdptr, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__69_47)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %.lr.ph.i.i.i.i17.i.i*/
	/*   %75 = load i8* %p2.02.i.i.i.i14.i.i, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_main_BB_lrphiiii17ii_51)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %.lr.ph.i.i.i.i17.i.i*/
	/*   store i8 %75, i8* %p1.01.i.i.i.i15.i.i, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_main_BB_lrphiiii17ii_53)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %.loopexit.i.i20.i.i*/
	/*   store i8* %scevgep, i8** @ld_Rdptr, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_loopexitii20ii_56)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %.loopexit2.i.loopexit.i21.i.i*/
	/*   store i8* %.lcssa, i8** @ld_Rdptr, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_loopexit2iloopexiti21ii_58)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %.loopexit2.i.i23.i.i*/
	/*   store i32 %Incnt.2.i.i22.i.i, i32* @ld_Incnt, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_loopexit2ii23ii_60)) begin
		memory_controller_write_enable_a = 1'd1;
	end
end
always @(*) begin
	memory_controller_in_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_a = 1'd0;
	end
	/* main: %0*/
	/*   store i8* getelementptr inbounds ([2048 x i8]* @ld_Rdbfr, i32 1, i32 0), i8** @ld_Rdptr, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_1)) begin
		memory_controller_in_a = (`TAG_g_ld_Rdbfr_a | (2048 * 32'd1));
	end
	/* main: %0*/
	/*   store i32 0, i32* @ld_Incnt, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__0_2)) begin
		memory_controller_in_a = 32'd0;
	end
	/* main: %.lr.ph.i.i.i.i*/
	/*   store i8 %1, i8* %p1.01.i.i.i.i, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_main_BB_lrphiiii_6)) begin
		memory_controller_in_a = main_lrphiiii_1;
	end
	/* main: %Get_Bits.exit.i*/
	/*   store i8* getelementptr inbounds ([2048 x i8]* @ld_Rdbfr, i32 0, i32 4), i8** @ld_Rdptr, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_Get_Bitsexiti_10)) begin
		memory_controller_in_a = (`TAG_g_ld_Rdbfr_a | (1 * 32'd4));
	end
	/* main: %Get_Bits.exit.i*/
	/*   store i32 %12, i32* @ld_Bfr, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_Get_Bitsexiti_11)) begin
		memory_controller_in_a = main_Get_Bitsexiti_12;
	end
	/* main: %15*/
	/*   store i32 undef, i32* @ld_Bfr, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__15_17)) begin
		memory_controller_in_a = 0;
	end
	/* main: %.lr.ph.i.i.i.i.i.i*/
	/*   store i8 %27, i8* %p1.01.i.i.i.i.i.i, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_main_BB_lrphiiiiii_25)) begin
		memory_controller_in_a = main_lrphiiiiii_27;
	end
	/* main: %.loopexit.i.i.i.i*/
	/*   store i8* %scevgep30, i8** @ld_Rdptr, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_loopexitiiii_28)) begin
		memory_controller_in_a = main_loopexitiiii_scevgep30;
	end
	/* main: %.loopexit2.i.loopexit.i.i.i*/
	/*   store i8* %.lcssa2, i8** @ld_Rdptr, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_loopexit2iloopexitiii_30)) begin
		memory_controller_in_a = main_loopexit2iloopexitiii_lcssa2_reg;
	end
	/* main: %.loopexit2.i.i.i.i*/
	/*   store i32 %Incnt.2.i.i.i.i, i32* @ld_Incnt, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_loopexit2iiii_32)) begin
		memory_controller_in_a = main_loopexit2iiii_Incnt2iiii_reg;
	end
	/* main: %63*/
	/*   store i32 undef, i32* @ld_Bfr, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__63_45)) begin
		memory_controller_in_a = 0;
	end
	/* main: %.lr.ph.i.i.i.i17.i.i*/
	/*   store i8 %75, i8* %p1.01.i.i.i.i15.i.i, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_main_BB_lrphiiii17ii_53)) begin
		memory_controller_in_a = main_lrphiiii17ii_75;
	end
	/* main: %.loopexit.i.i20.i.i*/
	/*   store i8* %scevgep, i8** @ld_Rdptr, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_loopexitii20ii_56)) begin
		memory_controller_in_a = main_loopexitii20ii_scevgep;
	end
	/* main: %.loopexit2.i.loopexit.i21.i.i*/
	/*   store i8* %.lcssa, i8** @ld_Rdptr, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_loopexit2iloopexiti21ii_58)) begin
		memory_controller_in_a = main_loopexit2iloopexiti21ii_lcssa_reg;
	end
	/* main: %.loopexit2.i.i23.i.i*/
	/*   store i32 %Incnt.2.i.i22.i.i, i32* @ld_Incnt, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_loopexit2ii23ii_60)) begin
		memory_controller_in_a = main_loopexit2ii23ii_Incnt2ii22ii_reg;
	end
end
always @(*) begin
	memory_controller_size_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_a = 1'd0;
	end
	/* main: %0*/
	/*   store i8* getelementptr inbounds ([2048 x i8]* @ld_Rdbfr, i32 1, i32 0), i8** @ld_Rdptr, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_1)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* @ld_Incnt, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__0_2)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.lr.ph.i.i.i.i*/
	/*   %1 = load i8* %p2.02.i.i.i.i, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_main_BB_lrphiiii_4)) begin
		memory_controller_size_a = 2'd0;
	end
	/* main: %.lr.ph.i.i.i.i*/
	/*   store i8 %1, i8* %p1.01.i.i.i.i, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_main_BB_lrphiiii_6)) begin
		memory_controller_size_a = 2'd0;
	end
	/* main: %Get_Bits.exit.i*/
	/*   %4 = load i8* getelementptr inbounds ([2048 x i8]* @ld_Rdbfr, i32 0, i32 0), align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_main_BB_Get_Bitsexiti_8)) begin
		memory_controller_size_a = 2'd0;
	end
	/* main: %Get_Bits.exit.i*/
	/*   %.pre1.i = load i8* getelementptr inbounds ([2048 x i8]* @ld_Rdbfr, i32 0, i32 2), align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_main_BB_Get_Bitsexiti_9)) begin
		memory_controller_size_a = 2'd0;
	end
	/* main: %Get_Bits.exit.i*/
	/*   store i8* getelementptr inbounds ([2048 x i8]* @ld_Rdbfr, i32 0, i32 4), i8** @ld_Rdptr, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_Get_Bitsexiti_10)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %Get_Bits.exit.i*/
	/*   store i32 %12, i32* @ld_Bfr, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_Get_Bitsexiti_11)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %15*/
	/*   %16 = load i32* @ld_Bfr, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__15_15)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %15*/
	/*   store i32 undef, i32* @ld_Bfr, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__15_17)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %21*/
	/*   %22 = load i8** @ld_Rdptr, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__21_19)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.lr.ph.i.i.i.i.i.i*/
	/*   %27 = load i8* %p2.02.i.i.i.i.i.i, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_main_BB_lrphiiiiii_23)) begin
		memory_controller_size_a = 2'd0;
	end
	/* main: %.lr.ph.i.i.i.i.i.i*/
	/*   store i8 %27, i8* %p1.01.i.i.i.i.i.i, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_main_BB_lrphiiiiii_25)) begin
		memory_controller_size_a = 2'd0;
	end
	/* main: %.loopexit.i.i.i.i*/
	/*   store i8* %scevgep30, i8** @ld_Rdptr, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_loopexitiiii_28)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.loopexit2.i.loopexit.i.i.i*/
	/*   store i8* %.lcssa2, i8** @ld_Rdptr, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_loopexit2iloopexitiii_30)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.loopexit2.i.i.i.i*/
	/*   store i32 %Incnt.2.i.i.i.i, i32* @ld_Incnt, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_loopexit2iiii_32)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %63*/
	/*   %64 = load i32* @ld_Bfr, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__63_43)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %63*/
	/*   store i32 undef, i32* @ld_Bfr, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__63_45)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %69*/
	/*   %70 = load i8** @ld_Rdptr, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__69_47)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.lr.ph.i.i.i.i17.i.i*/
	/*   %75 = load i8* %p2.02.i.i.i.i14.i.i, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_main_BB_lrphiiii17ii_51)) begin
		memory_controller_size_a = 2'd0;
	end
	/* main: %.lr.ph.i.i.i.i17.i.i*/
	/*   store i8 %75, i8* %p1.01.i.i.i.i15.i.i, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_main_BB_lrphiiii17ii_53)) begin
		memory_controller_size_a = 2'd0;
	end
	/* main: %.loopexit.i.i20.i.i*/
	/*   store i8* %scevgep, i8** @ld_Rdptr, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_loopexitii20ii_56)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.loopexit2.i.loopexit.i21.i.i*/
	/*   store i8* %.lcssa, i8** @ld_Rdptr, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_loopexit2iloopexiti21ii_58)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.loopexit2.i.i23.i.i*/
	/*   store i32 %Incnt.2.i.i22.i.i, i32* @ld_Incnt, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_loopexit2ii23ii_60)) begin
		memory_controller_size_a = 2'd2;
	end
end
always @(*) begin
	memory_controller_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_b = 1'd0;
	end
	/* main: %0*/
	/*   store i32 68157440, i32* @ld_Bfr, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__0_1)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %Get_Bits.exit.i*/
	/*   %.pre.i = load i8* getelementptr inbounds ([2048 x i8]* @ld_Rdbfr, i32 0, i32 1), align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_main_BB_Get_Bitsexiti_8)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %Get_Bits.exit.i*/
	/*   %.pre2.i = load i8* getelementptr inbounds ([2048 x i8]* @ld_Rdbfr, i32 0, i32 3), align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_main_BB_Get_Bitsexiti_9)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %Get_Bits.exit.i*/
	/*   store i32 31, i32* @ld_Incnt, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_Get_Bitsexiti_10)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %15*/
	/*   %18 = load i32* @ld_Incnt, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__15_15)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %15*/
	/*   store i32 %19, i32* @ld_Incnt, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__15_17)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.loopexit.i.i.i.i*/
	/*   store i32 -1, i32* @ld_Bfr, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_loopexitiiii_28)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.loopexit2.i.loopexit.i.i.i*/
	/*   store i32 -1, i32* @ld_Bfr, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_loopexit2iloopexitiii_30)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %63*/
	/*   %66 = load i32* @ld_Incnt, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__63_43)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %63*/
	/*   store i32 %67, i32* @ld_Incnt, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__63_45)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.loopexit.i.i20.i.i*/
	/*   store i32 -1, i32* @ld_Bfr, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_loopexitii20ii_56)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.loopexit2.i.loopexit.i21.i.i*/
	/*   store i32 -1, i32* @ld_Bfr, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_loopexit2iloopexiti21ii_58)) begin
		memory_controller_enable_b = 1'd1;
	end
end
always @(*) begin
	memory_controller_address_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_b = 1'd0;
	end
	/* main: %0*/
	/*   store i32 68157440, i32* @ld_Bfr, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__0_1)) begin
		memory_controller_address_b = `TAG_g_ld_Bfr_a;
	end
	/* main: %Get_Bits.exit.i*/
	/*   %.pre.i = load i8* getelementptr inbounds ([2048 x i8]* @ld_Rdbfr, i32 0, i32 1), align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_main_BB_Get_Bitsexiti_8)) begin
		memory_controller_address_b = (`TAG_g_ld_Rdbfr_a | (1 * 32'd1));
	end
	/* main: %Get_Bits.exit.i*/
	/*   %.pre2.i = load i8* getelementptr inbounds ([2048 x i8]* @ld_Rdbfr, i32 0, i32 3), align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_main_BB_Get_Bitsexiti_9)) begin
		memory_controller_address_b = (`TAG_g_ld_Rdbfr_a | (1 * 32'd3));
	end
	/* main: %Get_Bits.exit.i*/
	/*   store i32 31, i32* @ld_Incnt, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_Get_Bitsexiti_10)) begin
		memory_controller_address_b = `TAG_g_ld_Incnt_a;
	end
	/* main: %15*/
	/*   %18 = load i32* @ld_Incnt, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__15_15)) begin
		memory_controller_address_b = `TAG_g_ld_Incnt_a;
	end
	/* main: %15*/
	/*   store i32 %19, i32* @ld_Incnt, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__15_17)) begin
		memory_controller_address_b = `TAG_g_ld_Incnt_a;
	end
	/* main: %.loopexit.i.i.i.i*/
	/*   store i32 -1, i32* @ld_Bfr, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_loopexitiiii_28)) begin
		memory_controller_address_b = `TAG_g_ld_Bfr_a;
	end
	/* main: %.loopexit2.i.loopexit.i.i.i*/
	/*   store i32 -1, i32* @ld_Bfr, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_loopexit2iloopexitiii_30)) begin
		memory_controller_address_b = `TAG_g_ld_Bfr_a;
	end
	/* main: %63*/
	/*   %66 = load i32* @ld_Incnt, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__63_43)) begin
		memory_controller_address_b = `TAG_g_ld_Incnt_a;
	end
	/* main: %63*/
	/*   store i32 %67, i32* @ld_Incnt, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__63_45)) begin
		memory_controller_address_b = `TAG_g_ld_Incnt_a;
	end
	/* main: %.loopexit.i.i20.i.i*/
	/*   store i32 -1, i32* @ld_Bfr, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_loopexitii20ii_56)) begin
		memory_controller_address_b = `TAG_g_ld_Bfr_a;
	end
	/* main: %.loopexit2.i.loopexit.i21.i.i*/
	/*   store i32 -1, i32* @ld_Bfr, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_loopexit2iloopexiti21ii_58)) begin
		memory_controller_address_b = `TAG_g_ld_Bfr_a;
	end
end
always @(*) begin
	memory_controller_write_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %0*/
	/*   store i32 68157440, i32* @ld_Bfr, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__0_1)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %Get_Bits.exit.i*/
	/*   %.pre.i = load i8* getelementptr inbounds ([2048 x i8]* @ld_Rdbfr, i32 0, i32 1), align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_main_BB_Get_Bitsexiti_8)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %Get_Bits.exit.i*/
	/*   %.pre2.i = load i8* getelementptr inbounds ([2048 x i8]* @ld_Rdbfr, i32 0, i32 3), align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_main_BB_Get_Bitsexiti_9)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %Get_Bits.exit.i*/
	/*   store i32 31, i32* @ld_Incnt, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_Get_Bitsexiti_10)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %15*/
	/*   %18 = load i32* @ld_Incnt, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__15_15)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %15*/
	/*   store i32 %19, i32* @ld_Incnt, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__15_17)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %.loopexit.i.i.i.i*/
	/*   store i32 -1, i32* @ld_Bfr, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_loopexitiiii_28)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %.loopexit2.i.loopexit.i.i.i*/
	/*   store i32 -1, i32* @ld_Bfr, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_loopexit2iloopexitiii_30)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %63*/
	/*   %66 = load i32* @ld_Incnt, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__63_43)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %63*/
	/*   store i32 %67, i32* @ld_Incnt, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__63_45)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %.loopexit.i.i20.i.i*/
	/*   store i32 -1, i32* @ld_Bfr, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_loopexitii20ii_56)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %.loopexit2.i.loopexit.i21.i.i*/
	/*   store i32 -1, i32* @ld_Bfr, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_loopexit2iloopexiti21ii_58)) begin
		memory_controller_write_enable_b = 1'd1;
	end
end
always @(*) begin
	memory_controller_in_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_b = 1'd0;
	end
	/* main: %0*/
	/*   store i32 68157440, i32* @ld_Bfr, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__0_1)) begin
		memory_controller_in_b = 32'd68157440;
	end
	/* main: %Get_Bits.exit.i*/
	/*   store i32 31, i32* @ld_Incnt, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_Get_Bitsexiti_10)) begin
		memory_controller_in_b = 32'd31;
	end
	/* main: %15*/
	/*   store i32 %19, i32* @ld_Incnt, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__15_17)) begin
		memory_controller_in_b = main_15_19;
	end
	/* main: %.loopexit.i.i.i.i*/
	/*   store i32 -1, i32* @ld_Bfr, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_loopexitiiii_28)) begin
		memory_controller_in_b = -32'd1;
	end
	/* main: %.loopexit2.i.loopexit.i.i.i*/
	/*   store i32 -1, i32* @ld_Bfr, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_loopexit2iloopexitiii_30)) begin
		memory_controller_in_b = -32'd1;
	end
	/* main: %63*/
	/*   store i32 %67, i32* @ld_Incnt, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__63_45)) begin
		memory_controller_in_b = main_63_67;
	end
	/* main: %.loopexit.i.i20.i.i*/
	/*   store i32 -1, i32* @ld_Bfr, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_loopexitii20ii_56)) begin
		memory_controller_in_b = -32'd1;
	end
	/* main: %.loopexit2.i.loopexit.i21.i.i*/
	/*   store i32 -1, i32* @ld_Bfr, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_loopexit2iloopexiti21ii_58)) begin
		memory_controller_in_b = -32'd1;
	end
end
always @(*) begin
	memory_controller_size_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_b = 1'd0;
	end
	/* main: %0*/
	/*   store i32 68157440, i32* @ld_Bfr, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__0_1)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %Get_Bits.exit.i*/
	/*   %.pre.i = load i8* getelementptr inbounds ([2048 x i8]* @ld_Rdbfr, i32 0, i32 1), align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_main_BB_Get_Bitsexiti_8)) begin
		memory_controller_size_b = 2'd0;
	end
	/* main: %Get_Bits.exit.i*/
	/*   %.pre2.i = load i8* getelementptr inbounds ([2048 x i8]* @ld_Rdbfr, i32 0, i32 3), align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_main_BB_Get_Bitsexiti_9)) begin
		memory_controller_size_b = 2'd0;
	end
	/* main: %Get_Bits.exit.i*/
	/*   store i32 31, i32* @ld_Incnt, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_Get_Bitsexiti_10)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %15*/
	/*   %18 = load i32* @ld_Incnt, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__15_15)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %15*/
	/*   store i32 %19, i32* @ld_Incnt, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__15_17)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.loopexit.i.i.i.i*/
	/*   store i32 -1, i32* @ld_Bfr, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_loopexitiiii_28)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.loopexit2.i.loopexit.i.i.i*/
	/*   store i32 -1, i32* @ld_Bfr, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_loopexit2iloopexitiii_30)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %63*/
	/*   %66 = load i32* @ld_Incnt, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__63_43)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %63*/
	/*   store i32 %67, i32* @ld_Incnt, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__63_45)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.loopexit.i.i20.i.i*/
	/*   store i32 -1, i32* @ld_Bfr, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_loopexitii20ii_56)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.loopexit2.i.loopexit.i21.i.i*/
	/*   store i32 -1, i32* @ld_Bfr, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_loopexit2iloopexiti21ii_58)) begin
		memory_controller_size_b = 2'd2;
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		return_val <= 0;
		if (start == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
	/* main: %132*/
	/*   ret i32 %125*/
	if ((cur_state == LEGUP_F_main_BB__132_72)) begin
		return_val <= main_motion_vectorsexit_125_reg;
		if (start == 1'b0 && ^(main_motion_vectorsexit_125_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
end

endmodule 
module ram_dual_port
(
	clk,
	clken,
	address_a,
	address_b,
	wren_a,
	wren_b,
	data_a,
	data_b,
	byteena_a,
	byteena_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED.mif";
parameter  width_be_a = 1'd0;
parameter  width_be_b = 1'd0;
parameter  latency = 1;

input  clk;
input  clken;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output wire [(width_a-1):0] q_a;
output wire [(width_b-1):0] q_b;
reg [(width_a-1):0] q_a_wire;
reg [(width_b-1):0] q_b_wire;
input  wren_a;
input  wren_b;
input [(width_a-1):0] data_a;
input [(width_b-1):0] data_b;
// byte enable is unsupported by inferred RAMs
input [width_be_a-1:0] byteena_a;
input [width_be_b-1:0] byteena_b;

(* ramstyle = "no_rw_check", ram_init_file = init_file *) reg [width_a-1:0] ram[numwords_a-1:0];

/* synthesis translate_off */
integer i;
ALTERA_MF_MEMORY_INITIALIZATION mem ();
reg [8*256:1] ram_ver_file;
initial begin
	if (init_file == "UNUSED.mif")
    begin
		for (i = 0; i < numwords_a; i = i + 1)
			ram[i] = 0;
    end
	else
    begin
        // modelsim can't read .mif files directly. So use Altera function to
        // convert them to .ver files
        mem.convert_to_ver_file(init_file, width_a, ram_ver_file);
        $readmemh(ram_ver_file, ram);
    end
end
/* synthesis translate_on */

always @ (posedge clk)
if (clken)
begin // Port A
if (wren_a)
begin
    ram[address_a] <= data_a;
    q_a_wire <= {width_a{1'bX}};
end
else
    q_a_wire <= ram[address_a];
end
always @ (posedge clk)
if (clken)
begin // Port b
if (wren_b)
begin
    ram[address_b] <= data_b;
    q_b_wire <= {width_b{1'bX}};
end
else
    q_b_wire <= ram[address_b];
end



integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
if (clken)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = (clken) ? q_a_reg[latency] : 0;
assign q_b = (clken) ? q_b_reg[latency] : 0;


endmodule
module rom_dual_port
(
	clk,
	clken,
	address_a,
	address_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED.mif";
parameter  latency = 1;

input  clk;
input  clken;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output wire [(width_a-1):0] q_a;
output wire [(width_b-1):0] q_b;
reg [(width_a-1):0] q_a_wire;
reg [(width_b-1):0] q_b_wire;

(* ramstyle = "no_rw_check", ram_init_file = init_file *) reg [width_a-1:0] ram[numwords_a-1:0];

/* synthesis translate_off */
integer i;
ALTERA_MF_MEMORY_INITIALIZATION mem ();
reg [8*256:1] ram_ver_file;
initial begin
	if (init_file == "UNUSED.mif")
    begin
		for (i = 0; i < numwords_a; i = i + 1)
			ram[i] = 0;
    end
	else
    begin
        // modelsim can't read .mif files directly. So use Altera function to
        // convert them to .ver files
        mem.convert_to_ver_file(init_file, width_a, ram_ver_file);
        $readmemh(ram_ver_file, ram);
    end
end
/* synthesis translate_on */

always @ (posedge clk)
if (clken)
begin
    q_a_wire <= ram[address_a];
    q_b_wire <= ram[address_b];
end



integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
if (clken)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = (clken) ? q_a_reg[latency] : 0;
assign q_b = (clken) ? q_b_reg[latency] : 0;


endmodule
// Adding code from verilog file: ../../../boards/Virtex6/ML605/top.v


module ML605 (
       USER_CLOCK,
	    KEY,
	    SW,	    
       LED,
       LEDG,
		UART_RXD,
		UART_TXD

	    );

   input USER_CLOCK;
   input [4:0] KEY;
   input [7:0] SW;
   output [7:0] LED;
   output [7:0] LEDG;
   wire CLOCK_50;

    input UART_RXD;
    output UART_TXD;    
	wire clk = CLOCK_50;
	wire go = ~KEY[1];



   wire 	reset = ~KEY[0];
   wire 	start;
   wire [31:0] 	return_val;
   reg  [31:0] 	return_val_reg;
   wire 	finish;
   wire [3:0]	state;
   
   reg [6:0]   hex0, hex1, hex2, hex3, hex4, hex5, hex6, hex7;

   assign CLOCK_50 = USER_CLOCK;
   assign LED = 0;
   
	always @ (*) begin
		hex7 <= return_val_reg[31:28];
		hex6 <= return_val_reg[27:24];
		hex5 <= return_val_reg[23:20];
		hex4 <= return_val_reg[19:16];
		hex3 <= return_val_reg[15:12];
		hex2 <= return_val_reg[11:8];
		hex1 <= return_val_reg[7:4];
		hex0 <= return_val_reg[3:0];
	end
assign UART_TXD = 1'b0;

    parameter s_WAIT = 3'b001, s_START = 3'b010, s_EXE = 3'b011,
                s_DONE = 3'b100;

    // state registers
    reg [3:0] y_Q, Y_D;

    assign LEDG[3:0] = y_Q;

    // next state
    always @(*)
    begin
        case (y_Q)
            s_WAIT: if (go) Y_D = s_START; else Y_D = y_Q;

            s_START: Y_D = s_EXE;

            s_EXE: if (!finish) Y_D = s_EXE; else Y_D = s_DONE;

            s_DONE: Y_D = s_DONE;

            default: Y_D = 3'bxxx;
        endcase
    end

    // current state
    always @(posedge clk)
    begin
        if (reset) // synchronous clear
            y_Q <= s_WAIT;
        else
            y_Q <= Y_D;
    end

    always @(posedge clk)
        if (y_Q == s_EXE && finish)
            return_val_reg <= return_val;
        else if (y_Q == s_DONE)
            return_val_reg <= return_val_reg;
        else
            return_val_reg <= 0;


    assign start = (y_Q == s_START);

   
   top top_inst (
      .clk (clk),
      .reset (reset),
      .finish (finish),
      .return_val (return_val),
        .start (start)

    );

   

endmodule

// Adding code from verilog file: ../../../boards/StratixIV/DE4/top.v


module de4 ( 
    	     OSC_50_BANK2, 
             BUTTON, 
             LED, 
    	     SEG0_D, 
    	     SEG1_D 
	     ); 
   input OSC_50_BANK2; 
   input [1:0] BUTTON; 
   output [6:0] SEG0_D; 
   output [6:0] SEG1_D; 
   output [7:0] LED; 
   
   de2 de2_inst ( 
		  .CLOCK_50 (OSC_50_BANK2), 
		  .LEDG (LED), 
		  .KEY (BUTTON), 
		  .SW (), 
		  .HEX0 (SEG0_D), 
		  .HEX1 (SEG1_D), 
		  .HEX2 (), 
		  .HEX3 (), 
		  .HEX4 (), 
		  .HEX5 (), 
		  .HEX6 (), 
		  .HEX7 () 
		  ); 
   
endmodule
// Adding code from verilog file: ../../../boards/CycloneII/DE2/top.v


module de2 (
	    CLOCK_50,
	    KEY,
	    SW,
	    HEX0,
	    HEX1,
	    HEX2,
	    HEX3,
	    HEX4,
	    HEX5,
	    HEX6,
	    HEX7,
	    LEDG,
		UART_RXD,
		UART_TXD

	    );

   input CLOCK_50;
   input [3:0] KEY;
   input [17:0] SW;
   output [6:0] HEX0, HEX1,  HEX2,  HEX3,  HEX4,  HEX5,  HEX6,  HEX7;
   reg [6:0] 	hex0, hex1, hex2, hex3, hex4, hex5, hex6, hex7;
   

   output [7:0] LEDG;
    input UART_RXD;
    output UART_TXD;    
	wire clk = CLOCK_50;
	wire go = ~KEY[1];



   wire 	reset = ~KEY[0];
   wire 	start;
   wire [31:0] 	return_val;
   reg  [31:0] 	return_val_reg;
   wire 	finish;
   wire [3:0]	state;

   hex_digits h7( .x(hex7), .hex_LEDs(HEX7));
   hex_digits h6( .x(hex6), .hex_LEDs(HEX6));
   hex_digits h5( .x(hex5), .hex_LEDs(HEX5));
   hex_digits h4( .x(hex4), .hex_LEDs(HEX4));
   hex_digits h3( .x(hex3), .hex_LEDs(HEX3));
   hex_digits h2( .x(hex2), .hex_LEDs(HEX2));
   hex_digits h1( .x(hex1), .hex_LEDs(HEX1));
   hex_digits h0( .x(hex0), .hex_LEDs(HEX0));
   
	always @ (*) begin
		hex7 <= return_val_reg[31:28];
		hex6 <= return_val_reg[27:24];
		hex5 <= return_val_reg[23:20];
		hex4 <= return_val_reg[19:16];
		hex3 <= return_val_reg[15:12];
		hex2 <= return_val_reg[11:8];
		hex1 <= return_val_reg[7:4];
		hex0 <= return_val_reg[3:0];
	end
assign UART_TXD = 1'b0;

    parameter s_WAIT = 3'b001, s_START = 3'b010, s_EXE = 3'b011,
                s_DONE = 3'b100;

    // state registers
    reg [3:0] y_Q, Y_D;

    assign LEDG[3:0] = y_Q;

    // next state
    always @(*)
    begin
        case (y_Q)
            s_WAIT: if (go) Y_D = s_START; else Y_D = y_Q;

            s_START: Y_D = s_EXE;

            s_EXE: if (!finish) Y_D = s_EXE; else Y_D = s_DONE;

            s_DONE: Y_D = s_DONE;

            default: Y_D = 3'bxxx;
        endcase
    end

    // current state
    always @(posedge clk)
    begin
        if (reset) // synchronous clear
            y_Q <= s_WAIT;
        else
            y_Q <= Y_D;
    end

    always @(posedge clk)
        if (y_Q == s_EXE && finish)
            return_val_reg <= return_val;
        else if (y_Q == s_DONE)
            return_val_reg <= return_val_reg;
        else
            return_val_reg <= 0;


    assign start = (y_Q == s_START);

   
   top top_inst (
      .clk (clk),
      .reset (reset),
      .finish (finish),
      .return_val (return_val),
        .start (start)

    );

endmodule

module circuit_start_control (
    go,
    control_key
);
    input control_key;
    output go;
    assign go = control_key;
endmodule
module hex_digits(x, hex_LEDs);
    input [3:0] x;
    output [6:0] hex_LEDs;
    
    assign hex_LEDs[0] = (~x[3] & ~x[2] & ~x[1] & x[0]) |
                            (~x[3] & x[2] & ~x[1] & ~x[0]) |
                            (x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & ~x[2] & x[1] & x[0]);
    assign hex_LEDs[1] = (~x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & x[1] & x[0]) |
                            (x[3] & x[2] & ~x[0]) |
                            (x[2] & x[1] & ~x[0]);
    assign hex_LEDs[2] = (x[3] & x[2] & ~x[0]) |
                            (x[3] & x[2] & x[1]) |
                            (~x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[3] = (~x[3] & ~x[2] & ~x[1] & x[0]) | 
                            (~x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (x[2] & x[1] & x[0]) | 
                            (x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[4] = (~x[3] & x[0]) |
                            (~x[3] & x[2] & ~x[1]) |
                            (~x[2] & ~x[1] & x[0]);
    assign hex_LEDs[5] = (~x[3] & ~x[2] & x[0]) | 
                            (~x[3] & ~x[2] & x[1]) | 
                            (~x[3] & x[1] & x[0]) | 
                            (x[3] & x[2] & ~x[1] & x[0]);
    assign hex_LEDs[6] = (~x[3] & ~x[2] & ~x[1]) | 
                            (x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (~x[3] & x[2] & x[1] & x[0]);
    
endmodule
`timescale 1 ns / 1 ns
module main_tb
(
);

reg  clk;
reg  reset;
reg  start;
reg  waitrequest;
wire [31:0] return_val;
wire  finish;


top top_inst (
	.clk (clk),
	.reset (reset),
	.start (start),
	.waitrequest (waitrequest),
	.finish (finish),
	.return_val (return_val)
);


// Local Rams



initial 
    clk = 0;
always @(clk)
    clk <= #10 ~clk;

initial begin
//$monitor("At t=%t clk=%b %b %b %b %d", $time, clk, reset, start, finish, return_val);
@(negedge clk);
reset <= 1;
@(negedge clk);
reset <= 0;
start <= 1;
@(negedge clk);
start <= 0;
end

always@(finish) begin
    if (finish == 1) begin
        $display("At t=%t clk=%b finish=%b return_val=%d", $time, clk, finish, return_val);
        $display("Cycles: %d", ($time-50)/20);
        $finish;
    end
end

initial begin
waitrequest <= 1;
@(negedge clk);
@(negedge clk);
waitrequest <= 0;
end


endmodule 

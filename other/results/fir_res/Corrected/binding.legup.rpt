//----------------------------------------------------------------------------//
// Generated by LegUp High-Level Synthesis Tool Version 4.0 (http://legup.org)
// Compiled: Sun Jul 26 12:56:54 2015
// University of Toronto
// For research and academic purposes only. Commercial use is prohibited.
// Please send bugs to: legup@eecg.toronto.edu
// Date: Sun Mar 31 03:12:40 2019
//----------------------------------------------------------------------------//

--------------------------------------------------------------------------------
Function: main
--------------------------------------------------------------------------------
Function unit type:           Number Required               
mem_dual_port                 1                             
signed_add_32                 15                            
signed_multiply_32            1                             
signed_subtract_32            1                             
--------------------------------------------------------------------------------
Function: legup_memset_4
--------------------------------------------------------------------------------
Function unit type:           Number Required               
mem_dual_port                 2                             
signed_add_32                 1                             

Running Bipartite Weighted Matching on function: legup_memset_4
State: LEGUP_F_legup_memset_4_BB__0
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
                                                  legup_memset_4_mem_dual_port_0legup_memset_4_mem_dual_port_1
  store i8* %m, i8** %1, align... (idx: 0)        0                             0                             
  store i8 %c1, i8* %2, align ... (idx: 1)        0                             0                             
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  legup_memset_4_mem_dual_port_0legup_memset_4_mem_dual_port_1
  store i8* %m, i8** %1, align... (idx: 0)        1                             0                             
  store i8 %c1, i8* %2, align ... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i8* %m, i8** %1, align... (idx: 0) -> legup_memset_4_mem_dual_port_0 (mux inputs: 1)
  store i8 %c1, i8* %2, align ... (idx: 1) -> legup_memset_4_mem_dual_port_1 (mux inputs: 1)
State: LEGUP_F_legup_memset_4_BB__0
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  store i32 %n, i32* %3, align... can share an output register with another operation already assigned to legup_memset_4_mem_dual_port_0
  store i32 %n, i32* %3, align... can share an output register with another operation already assigned to legup_memset_4_mem_dual_port_1
  %4 = load i8* %2, align 1 can share an output register with another operation already assigned to legup_memset_4_mem_dual_port_0
  %4 = load i8* %2, align 1 hey can share an input with another operation already assigned to legup_memset_4_mem_dual_port_1
  %4 = load i8* %2, align 1 can share an output register with another operation already assigned to legup_memset_4_mem_dual_port_1
                                                  legup_memset_4_mem_dual_port_0legup_memset_4_mem_dual_port_1
  store i32 %n, i32* %3, align... (idx: 0)        -5                            -5                            
  %4 = load i8* %2, align 1 (idx: 1)              -5                            -5                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  legup_memset_4_mem_dual_port_0legup_memset_4_mem_dual_port_1
  store i32 %n, i32* %3, align... (idx: 0)        1                             0                             
  %4 = load i8* %2, align 1 (idx: 1)              0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 %n, i32* %3, align... (idx: 0) -> legup_memset_4_mem_dual_port_0 (mux inputs: 2)
  %4 = load i8* %2, align 1 (idx: 1) -> legup_memset_4_mem_dual_port_1 (mux inputs: 1)
State: LEGUP_F_legup_memset_4_BB__0
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  store i32 %5, i32* %c, align... can share an output register with another operation already assigned to legup_memset_4_mem_dual_port_0
  store i32 %5, i32* %c, align... can share an output register with another operation already assigned to legup_memset_4_mem_dual_port_1
                                                  legup_memset_4_mem_dual_port_0legup_memset_4_mem_dual_port_1
  store i32 %5, i32* %c, align... (idx: 0)        -5                            -5                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  legup_memset_4_mem_dual_port_0legup_memset_4_mem_dual_port_1
  store i32 %5, i32* %c, align... (idx: 0)        1                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 %5, i32* %c, align... (idx: 0) -> legup_memset_4_mem_dual_port_0 (mux inputs: 4)
State: LEGUP_F_legup_memset_4_BB__0
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %6 = load i32* %c, align 4 hey can share an input with another operation already assigned to legup_memset_4_mem_dual_port_0
  %6 = load i32* %c, align 4 can share an output register with another operation already assigned to legup_memset_4_mem_dual_port_0
  %6 = load i32* %c, align 4 can share an output register with another operation already assigned to legup_memset_4_mem_dual_port_1
  %8 = load i32* %c, align 4 hey can share an input with another operation already assigned to legup_memset_4_mem_dual_port_0
  %8 = load i32* %c, align 4 can share an output register with another operation already assigned to legup_memset_4_mem_dual_port_0
  %8 = load i32* %c, align 4 can share an output register with another operation already assigned to legup_memset_4_mem_dual_port_1
                                                  legup_memset_4_mem_dual_port_0legup_memset_4_mem_dual_port_1
  %6 = load i32* %c, align 4 (idx: 0)             -5                            -5                            
  %8 = load i32* %c, align 4 (idx: 1)             -5                            -5                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  legup_memset_4_mem_dual_port_0legup_memset_4_mem_dual_port_1
  %6 = load i32* %c, align 4 (idx: 0)             1                             0                             
  %8 = load i32* %c, align 4 (idx: 1)             0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %6 = load i32* %c, align 4 (idx: 0) -> legup_memset_4_mem_dual_port_0 (mux inputs: 4)
  %8 = load i32* %c, align 4 (idx: 1) -> legup_memset_4_mem_dual_port_1 (mux inputs: 2)
State: LEGUP_F_legup_memset_4_BB__0
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  store i32 %9, i32* %c, align... hey can share an input with another operation already assigned to legup_memset_4_mem_dual_port_0
  store i32 %9, i32* %c, align... can share an output register with another operation already assigned to legup_memset_4_mem_dual_port_0
  store i32 %9, i32* %c, align... hey can share an input with another operation already assigned to legup_memset_4_mem_dual_port_1
  store i32 %9, i32* %c, align... can share an output register with another operation already assigned to legup_memset_4_mem_dual_port_1
                                                  legup_memset_4_mem_dual_port_0legup_memset_4_mem_dual_port_1
  store i32 %9, i32* %c, align... (idx: 0)        -5                            -5                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  legup_memset_4_mem_dual_port_0legup_memset_4_mem_dual_port_1
  store i32 %9, i32* %c, align... (idx: 0)        1                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 %9, i32* %c, align... (idx: 0) -> legup_memset_4_mem_dual_port_0 (mux inputs: 5)
State: LEGUP_F_legup_memset_4_BB__0
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %10 = load i32* %c, align 4 hey can share an input with another operation already assigned to legup_memset_4_mem_dual_port_0
  %10 = load i32* %c, align 4 can share an output register with another operation already assigned to legup_memset_4_mem_dual_port_0
  %10 = load i32* %c, align 4 hey can share an input with another operation already assigned to legup_memset_4_mem_dual_port_1
  %10 = load i32* %c, align 4 can share an output register with another operation already assigned to legup_memset_4_mem_dual_port_1
  %12 = load i32* %c, align 4 hey can share an input with another operation already assigned to legup_memset_4_mem_dual_port_0
  %12 = load i32* %c, align 4 can share an output register with another operation already assigned to legup_memset_4_mem_dual_port_0
  %12 = load i32* %c, align 4 hey can share an input with another operation already assigned to legup_memset_4_mem_dual_port_1
  %12 = load i32* %c, align 4 can share an output register with another operation already assigned to legup_memset_4_mem_dual_port_1
                                                  legup_memset_4_mem_dual_port_0legup_memset_4_mem_dual_port_1
  %10 = load i32* %c, align 4 (idx: 0)            -5                            -5                            
  %12 = load i32* %c, align 4 (idx: 1)            -5                            -5                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  legup_memset_4_mem_dual_port_0legup_memset_4_mem_dual_port_1
  %10 = load i32* %c, align 4 (idx: 0)            1                             0                             
  %12 = load i32* %c, align 4 (idx: 1)            0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %10 = load i32* %c, align 4 (idx: 0) -> legup_memset_4_mem_dual_port_0 (mux inputs: 5)
  %12 = load i32* %c, align 4 (idx: 1) -> legup_memset_4_mem_dual_port_1 (mux inputs: 2)
State: LEGUP_F_legup_memset_4_BB__0
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %14 = load i8** %1, align 4 hey can share an input with another operation already assigned to legup_memset_4_mem_dual_port_0
  %14 = load i8** %1, align 4 can share an output register with another operation already assigned to legup_memset_4_mem_dual_port_0
  %14 = load i8** %1, align 4 can share an output register with another operation already assigned to legup_memset_4_mem_dual_port_1
  %16 = load i32* %3, align 4 hey can share an input with another operation already assigned to legup_memset_4_mem_dual_port_0
  %16 = load i32* %3, align 4 can share an output register with another operation already assigned to legup_memset_4_mem_dual_port_0
  %16 = load i32* %3, align 4 can share an output register with another operation already assigned to legup_memset_4_mem_dual_port_1
                                                  legup_memset_4_mem_dual_port_0legup_memset_4_mem_dual_port_1
  %14 = load i8** %1, align 4 (idx: 0)            -5                            -5                            
  %16 = load i32* %3, align 4 (idx: 1)            -5                            -5                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  legup_memset_4_mem_dual_port_0legup_memset_4_mem_dual_port_1
  %14 = load i8** %1, align 4 (idx: 0)            1                             0                             
  %16 = load i32* %3, align 4 (idx: 1)            0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %14 = load i8** %1, align 4 (idx: 0) -> legup_memset_4_mem_dual_port_0 (mux inputs: 5)
  %16 = load i32* %3, align 4 (idx: 1) -> legup_memset_4_mem_dual_port_1 (mux inputs: 3)
State: LEGUP_F_legup_memset_4_BB__0
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  store i32 %13, i32* %c, alig... hey can share an input with another operation already assigned to legup_memset_4_mem_dual_port_0
  store i32 %13, i32* %c, alig... can share an output register with another operation already assigned to legup_memset_4_mem_dual_port_0
  store i32 %13, i32* %c, alig... hey can share an input with another operation already assigned to legup_memset_4_mem_dual_port_1
  store i32 %13, i32* %c, alig... can share an output register with another operation already assigned to legup_memset_4_mem_dual_port_1
                                                  legup_memset_4_mem_dual_port_0legup_memset_4_mem_dual_port_1
  store i32 %13, i32* %c, alig... (idx: 0)        -5                            -5                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  legup_memset_4_mem_dual_port_0legup_memset_4_mem_dual_port_1
  store i32 %13, i32* %c, alig... (idx: 0)        1                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 %13, i32* %c, alig... (idx: 0) -> legup_memset_4_mem_dual_port_0 (mux inputs: 6)
State: LEGUP_F_legup_memset_4_BB__0
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  store i32* %15, i32** %s, al... can share an output register with another operation already assigned to legup_memset_4_mem_dual_port_0
  store i32* %15, i32** %s, al... can share an output register with another operation already assigned to legup_memset_4_mem_dual_port_1
  store i32 %17, i32* %3, alig... hey can share an input with another operation already assigned to legup_memset_4_mem_dual_port_0
  store i32 %17, i32* %3, alig... can share an output register with another operation already assigned to legup_memset_4_mem_dual_port_0
  store i32 %17, i32* %3, alig... hey can share an input with another operation already assigned to legup_memset_4_mem_dual_port_1
  store i32 %17, i32* %3, alig... can share an output register with another operation already assigned to legup_memset_4_mem_dual_port_1
                                                  legup_memset_4_mem_dual_port_0legup_memset_4_mem_dual_port_1
  store i32* %15, i32** %s, al... (idx: 0)        -5                            -5                            
  store i32 %17, i32* %3, alig... (idx: 1)        -5                            -5                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  legup_memset_4_mem_dual_port_0legup_memset_4_mem_dual_port_1
  store i32* %15, i32** %s, al... (idx: 0)        1                             0                             
  store i32 %17, i32* %3, alig... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32* %15, i32** %s, al... (idx: 0) -> legup_memset_4_mem_dual_port_0 (mux inputs: 8)
  store i32 %17, i32* %3, alig... (idx: 1) -> legup_memset_4_mem_dual_port_1 (mux inputs: 4)
State: LEGUP_F_legup_memset_4_BB__18
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %19 = load i32* %3, align 4 hey can share an input with another operation already assigned to legup_memset_4_mem_dual_port_0
  %19 = load i32* %3, align 4 can share an output register with another operation already assigned to legup_memset_4_mem_dual_port_0
  %19 = load i32* %3, align 4 hey can share an input with another operation already assigned to legup_memset_4_mem_dual_port_1
  %19 = load i32* %3, align 4 can share an output register with another operation already assigned to legup_memset_4_mem_dual_port_1
                                                  legup_memset_4_mem_dual_port_0legup_memset_4_mem_dual_port_1
  %19 = load i32* %3, align 4 (idx: 0)            -5                            -5                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  legup_memset_4_mem_dual_port_0legup_memset_4_mem_dual_port_1
  %19 = load i32* %3, align 4 (idx: 0)            1                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %19 = load i32* %3, align 4 (idx: 0) -> legup_memset_4_mem_dual_port_0 (mux inputs: 8)
State: LEGUP_F_legup_memset_4_BB__18
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  store i32 %20, i32* %3, alig... hey can share an input with another operation already assigned to legup_memset_4_mem_dual_port_0
  store i32 %20, i32* %3, alig... can share an output register with another operation already assigned to legup_memset_4_mem_dual_port_0
  store i32 %20, i32* %3, alig... hey can share an input with another operation already assigned to legup_memset_4_mem_dual_port_1
  store i32 %20, i32* %3, alig... can share an output register with another operation already assigned to legup_memset_4_mem_dual_port_1
                                                  legup_memset_4_mem_dual_port_0legup_memset_4_mem_dual_port_1
  store i32 %20, i32* %3, alig... (idx: 0)        -5                            -5                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  legup_memset_4_mem_dual_port_0legup_memset_4_mem_dual_port_1
  store i32 %20, i32* %3, alig... (idx: 0)        1                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 %20, i32* %3, alig... (idx: 0) -> legup_memset_4_mem_dual_port_0 (mux inputs: 9)
State: LEGUP_F_legup_memset_4_BB__18
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
                                                  legup_memset_4_signed_add_32_0legup_memset_4_signed_add_32_1
  %20 = add i32 %19, -1 (idx: 0)                  11                            12                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  legup_memset_4_signed_add_32_0legup_memset_4_signed_add_32_1
  %20 = add i32 %19, -1 (idx: 0)                  1                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %20 = add i32 %19, -1 (idx: 0) -> legup_memset_4_signed_add_32_0 (mux inputs: 1)
State: LEGUP_F_legup_memset_4_BB__22
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %23 = load i32* %c, align 4 hey can share an input with another operation already assigned to legup_memset_4_mem_dual_port_0
  %23 = load i32* %c, align 4 can share an output register with another operation already assigned to legup_memset_4_mem_dual_port_0
  %23 = load i32* %c, align 4 hey can share an input with another operation already assigned to legup_memset_4_mem_dual_port_1
  %23 = load i32* %c, align 4 can share an output register with another operation already assigned to legup_memset_4_mem_dual_port_1
  %24 = load i32** %s, align 4 hey can share an input with another operation already assigned to legup_memset_4_mem_dual_port_0
  %24 = load i32** %s, align 4 can share an output register with another operation already assigned to legup_memset_4_mem_dual_port_0
  %24 = load i32** %s, align 4 can share an output register with another operation already assigned to legup_memset_4_mem_dual_port_1
                                                  legup_memset_4_mem_dual_port_0legup_memset_4_mem_dual_port_1
  %23 = load i32* %c, align 4 (idx: 0)            -5                            -5                            
  %24 = load i32** %s, align 4 (idx: 1)           -5                            -5                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  legup_memset_4_mem_dual_port_0legup_memset_4_mem_dual_port_1
  %23 = load i32* %c, align 4 (idx: 0)            1                             0                             
  %24 = load i32** %s, align 4 (idx: 1)           0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %23 = load i32* %c, align 4 (idx: 0) -> legup_memset_4_mem_dual_port_0 (mux inputs: 9)
  %24 = load i32** %s, align 4 (idx: 1) -> legup_memset_4_mem_dual_port_1 (mux inputs: 5)
State: LEGUP_F_legup_memset_4_BB__22
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  store i32* %25, i32** %s, al... hey can share an input with another operation already assigned to legup_memset_4_mem_dual_port_0
  store i32* %25, i32** %s, al... can share an output register with another operation already assigned to legup_memset_4_mem_dual_port_0
  store i32* %25, i32** %s, al... hey can share an input with another operation already assigned to legup_memset_4_mem_dual_port_1
  store i32* %25, i32** %s, al... can share an output register with another operation already assigned to legup_memset_4_mem_dual_port_1
  store i32 %23, i32* %24, ali... can share an output register with another operation already assigned to legup_memset_4_mem_dual_port_0
  store i32 %23, i32* %24, ali... can share an output register with another operation already assigned to legup_memset_4_mem_dual_port_1
                                                  legup_memset_4_mem_dual_port_0legup_memset_4_mem_dual_port_1
  store i32* %25, i32** %s, al... (idx: 0)        -5                            -5                            
  store i32 %23, i32* %24, ali... (idx: 1)        -5                            -5                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  legup_memset_4_mem_dual_port_0legup_memset_4_mem_dual_port_1
  store i32* %25, i32** %s, al... (idx: 0)        1                             0                             
  store i32 %23, i32* %24, ali... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32* %25, i32** %s, al... (idx: 0) -> legup_memset_4_mem_dual_port_0 (mux inputs: 10)
  store i32 %23, i32* %24, ali... (idx: 1) -> legup_memset_4_mem_dual_port_1 (mux inputs: 7)
State: LEGUP_F_legup_memset_4_BB__22
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %gep = add i32 %gep_int, 4 can share an output register with another operation already assigned to legup_memset_4_signed_add_32_0
                                                  legup_memset_4_signed_add_32_0legup_memset_4_signed_add_32_1
  %gep = add i32 %gep_int, 4 (idx: 0)             7                             11                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  legup_memset_4_signed_add_32_0legup_memset_4_signed_add_32_1
  %gep = add i32 %gep_int, 4 (idx: 0)             1                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %gep = add i32 %gep_int, 4 (idx: 0) -> legup_memset_4_signed_add_32_0 (mux inputs: 2)

Running Bipartite Weighted Matching on function: main
State: LEGUP_F_main_BB__0
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         
  %gep = add i32 %gep_int1, 56 (idx: 0)           0                             11                            110                           110                           110                           110                           110                           110                           110                           110                           110                           110                           110                           110                           110                           
  %gep3 = add i32 %gep_int2, 6... (idx: 1)        11                            0                             110                           110                           110                           110                           110                           110                           110                           110                           110                           110                           110                           110                           110                           
  %gep5 = add i32 %gep_int4, 5... (idx: 2)        11                            11                            110                           110                           110                           110                           110                           110                           110                           110                           110                           110                           110                           110                           110                           
  %gep7 = add i32 %gep_int6, 4... (idx: 3)        11                            11                            110                           110                           110                           110                           110                           110                           110                           110                           110                           110                           110                           110                           110                           
  %gep9 = add i32 %gep_int8, 4... (idx: 4)        11                            11                            110                           110                           110                           110                           110                           110                           110                           110                           110                           110                           110                           110                           110                           
  %gep11 = add i32 %gep_int10,... (idx: 5)        11                            11                            110                           110                           110                           110                           110                           110                           110                           110                           110                           110                           110                           110                           110                           
  %gep13 = add i32 %gep_int12,... (idx: 6)        11                            11                            110                           110                           110                           110                           110                           110                           110                           110                           110                           110                           110                           110                           110                           
  %gep15 = add i32 %gep_int14,... (idx: 7)        11                            11                            110                           110                           110                           110                           110                           110                           110                           110                           110                           110                           110                           110                           110                           
  %gep17 = add i32 %gep_int16,... (idx: 8)        11                            11                            110                           110                           110                           110                           110                           110                           110                           110                           110                           110                           110                           110                           110                           
  %gep19 = add i32 %gep_int18,... (idx: 9)        11                            11                            110                           110                           110                           110                           110                           110                           110                           110                           110                           110                           110                           110                           110                           
  %gep21 = add i32 %gep_int20,... (idx: 10)       11                            11                            110                           110                           110                           110                           110                           110                           110                           110                           110                           110                           110                           110                           110                           
  %gep23 = add i32 %gep_int22,... (idx: 11)       11                            11                            110                           110                           110                           110                           110                           110                           110                           110                           110                           110                           110                           110                           110                           
  %gep25 = add i32 %gep_int24,... (idx: 12)       11                            11                            110                           110                           110                           110                           110                           110                           110                           110                           110                           110                           110                           110                           110                           
  %gep27 = add i32 %gep_int26,... (idx: 13)       11                            11                            110                           110                           110                           110                           110                           110                           110                           110                           110                           110                           110                           110                           110                           
  %gep29 = add i32 %gep_int28,... (idx: 14)       11                            11                            110                           110                           110                           110                           110                           110                           110                           110                           110                           110                           110                           110                           110                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         
  %gep = add i32 %gep_int1, 56 (idx: 0)           1                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             
  %gep3 = add i32 %gep_int2, 6... (idx: 1)        0                             1                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             
  %gep5 = add i32 %gep_int4, 5... (idx: 2)        0                             0                             1                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             
  %gep7 = add i32 %gep_int6, 4... (idx: 3)        0                             0                             0                             1                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             
  %gep9 = add i32 %gep_int8, 4... (idx: 4)        0                             0                             0                             0                             1                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             
  %gep11 = add i32 %gep_int10,... (idx: 5)        0                             0                             0                             0                             0                             1                             0                             0                             0                             0                             0                             0                             0                             0                             0                             
  %gep13 = add i32 %gep_int12,... (idx: 6)        0                             0                             0                             0                             0                             0                             1                             0                             0                             0                             0                             0                             0                             0                             0                             
  %gep15 = add i32 %gep_int14,... (idx: 7)        0                             0                             0                             0                             0                             0                             0                             1                             0                             0                             0                             0                             0                             0                             0                             
  %gep17 = add i32 %gep_int16,... (idx: 8)        0                             0                             0                             0                             0                             0                             0                             0                             1                             0                             0                             0                             0                             0                             0                             
  %gep19 = add i32 %gep_int18,... (idx: 9)        0                             0                             0                             0                             0                             0                             0                             0                             0                             1                             0                             0                             0                             0                             0                             
  %gep21 = add i32 %gep_int20,... (idx: 10)       0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             1                             0                             0                             0                             0                             
  %gep23 = add i32 %gep_int22,... (idx: 11)       0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             1                             0                             0                             0                             
  %gep25 = add i32 %gep_int24,... (idx: 12)       0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             1                             0                             0                             
  %gep27 = add i32 %gep_int26,... (idx: 13)       0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             1                             0                             
  %gep29 = add i32 %gep_int28,... (idx: 14)       0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %gep = add i32 %gep_int1, 56 (idx: 0) -> main_signed_add_32_0 (mux inputs: 1)
  %gep3 = add i32 %gep_int2, 6... (idx: 1) -> main_signed_add_32_1 (mux inputs: 1)
  %gep5 = add i32 %gep_int4, 5... (idx: 2) -> main_signed_add_32_2 (mux inputs: 1)
  %gep7 = add i32 %gep_int6, 4... (idx: 3) -> main_signed_add_32_3 (mux inputs: 1)
  %gep9 = add i32 %gep_int8, 4... (idx: 4) -> main_signed_add_32_4 (mux inputs: 1)
  %gep11 = add i32 %gep_int10,... (idx: 5) -> main_signed_add_32_5 (mux inputs: 1)
  %gep13 = add i32 %gep_int12,... (idx: 6) -> main_signed_add_32_6 (mux inputs: 1)
  %gep15 = add i32 %gep_int14,... (idx: 7) -> main_signed_add_32_7 (mux inputs: 1)
  %gep17 = add i32 %gep_int16,... (idx: 8) -> main_signed_add_32_8 (mux inputs: 1)
  %gep19 = add i32 %gep_int18,... (idx: 9) -> main_signed_add_32_9 (mux inputs: 1)
  %gep21 = add i32 %gep_int20,... (idx: 10) -> main_signed_add_32_10 (mux inputs: 1)
  %gep23 = add i32 %gep_int22,... (idx: 11) -> main_signed_add_32_11 (mux inputs: 1)
  %gep25 = add i32 %gep_int24,... (idx: 12) -> main_signed_add_32_12 (mux inputs: 1)
  %gep27 = add i32 %gep_int26,... (idx: 13) -> main_signed_add_32_13 (mux inputs: 1)
  %gep29 = add i32 %gep_int28,... (idx: 14) -> main_signed_add_32_14 (mux inputs: 1)
State: LEGUP_F_main_BB__18
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
                                                  main_mem_dual_port_0          
  store i32 %33, i32* %4, alig... (idx: 0)        0                             
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          
  store i32 %33, i32* %4, alig... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 %33, i32* %4, alig... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 2)
State: LEGUP_F_main_BB__18
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  store i32 %32, i32* %3, alig... can share an output register with another operation already assigned to main_mem_dual_port_0
                                                  main_mem_dual_port_0          
  store i32 %32, i32* %3, alig... (idx: 0)        -5                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          
  store i32 %32, i32* %3, alig... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 %32, i32* %3, alig... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 4)
State: LEGUP_F_main_BB__18
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  store i32 %31, i32* %5, alig... can share an output register with another operation already assigned to main_mem_dual_port_0
                                                  main_mem_dual_port_0          
  store i32 %31, i32* %5, alig... (idx: 0)        -5                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          
  store i32 %31, i32* %5, alig... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 %31, i32* %5, alig... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 6)
State: LEGUP_F_main_BB__18
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  store i32 %30, i32* %6, alig... can share an output register with another operation already assigned to main_mem_dual_port_0
                                                  main_mem_dual_port_0          
  store i32 %30, i32* %6, alig... (idx: 0)        -5                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          
  store i32 %30, i32* %6, alig... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 %30, i32* %6, alig... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 8)
State: LEGUP_F_main_BB__18
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  store i32 %29, i32* %7, alig... can share an output register with another operation already assigned to main_mem_dual_port_0
                                                  main_mem_dual_port_0          
  store i32 %29, i32* %7, alig... (idx: 0)        -5                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          
  store i32 %29, i32* %7, alig... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 %29, i32* %7, alig... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 10)
State: LEGUP_F_main_BB__18
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  store i32 %28, i32* %8, alig... can share an output register with another operation already assigned to main_mem_dual_port_0
                                                  main_mem_dual_port_0          
  store i32 %28, i32* %8, alig... (idx: 0)        -5                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          
  store i32 %28, i32* %8, alig... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 %28, i32* %8, alig... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 12)
State: LEGUP_F_main_BB__18
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  store i32 %27, i32* %9, alig... can share an output register with another operation already assigned to main_mem_dual_port_0
                                                  main_mem_dual_port_0          
  store i32 %27, i32* %9, alig... (idx: 0)        -5                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          
  store i32 %27, i32* %9, alig... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 %27, i32* %9, alig... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 14)
State: LEGUP_F_main_BB__18
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  store i32 %26, i32* %10, ali... can share an output register with another operation already assigned to main_mem_dual_port_0
                                                  main_mem_dual_port_0          
  store i32 %26, i32* %10, ali... (idx: 0)        -5                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          
  store i32 %26, i32* %10, ali... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 %26, i32* %10, ali... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 16)
State: LEGUP_F_main_BB__18
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  store i32 %25, i32* %11, ali... can share an output register with another operation already assigned to main_mem_dual_port_0
                                                  main_mem_dual_port_0          
  store i32 %25, i32* %11, ali... (idx: 0)        -5                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          
  store i32 %25, i32* %11, ali... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 %25, i32* %11, ali... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 18)
State: LEGUP_F_main_BB__18
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  store i32 %24, i32* %12, ali... can share an output register with another operation already assigned to main_mem_dual_port_0
                                                  main_mem_dual_port_0          
  store i32 %24, i32* %12, ali... (idx: 0)        -5                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          
  store i32 %24, i32* %12, ali... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 %24, i32* %12, ali... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 20)
State: LEGUP_F_main_BB__18
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  store i32 %23, i32* %13, ali... can share an output register with another operation already assigned to main_mem_dual_port_0
                                                  main_mem_dual_port_0          
  store i32 %23, i32* %13, ali... (idx: 0)        -5                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          
  store i32 %23, i32* %13, ali... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 %23, i32* %13, ali... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 22)
State: LEGUP_F_main_BB__18
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  store i32 %22, i32* %14, ali... can share an output register with another operation already assigned to main_mem_dual_port_0
                                                  main_mem_dual_port_0          
  store i32 %22, i32* %14, ali... (idx: 0)        -5                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          
  store i32 %22, i32* %14, ali... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 %22, i32* %14, ali... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 24)
State: LEGUP_F_main_BB__18
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  store i32 %21, i32* %15, ali... can share an output register with another operation already assigned to main_mem_dual_port_0
                                                  main_mem_dual_port_0          
  store i32 %21, i32* %15, ali... (idx: 0)        -5                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          
  store i32 %21, i32* %15, ali... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 %21, i32* %15, ali... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 26)
State: LEGUP_F_main_BB__18
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  store i32 %20, i32* %16, ali... can share an output register with another operation already assigned to main_mem_dual_port_0
                                                  main_mem_dual_port_0          
  store i32 %20, i32* %16, ali... (idx: 0)        -5                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          
  store i32 %20, i32* %16, ali... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 %20, i32* %16, ali... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 28)
State: LEGUP_F_main_BB__18
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  store i32 %19, i32* %17, ali... can share an output register with another operation already assigned to main_mem_dual_port_0
                                                  main_mem_dual_port_0          
  store i32 %19, i32* %17, ali... (idx: 0)        -5                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          
  store i32 %19, i32* %17, ali... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 %19, i32* %17, ali... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 30)
State: LEGUP_F_main_BB__18
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  store i32 %i.03, i32* %2, al... can share an output register with another operation already assigned to main_mem_dual_port_0
                                                  main_mem_dual_port_0          
  store i32 %i.03, i32* %2, al... (idx: 0)        -5                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          
  store i32 %i.03, i32* %2, al... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 %i.03, i32* %2, al... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 32)
State: LEGUP_F_main_BB_preheaderipreheader
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %tmp.i1 = add i32 %33, %i.03 can share an output register with another operation already assigned to main_signed_add_32_0
  %tmp.i1 = add i32 %33, %i.03 can share an output register with another operation already assigned to main_signed_add_32_1
  %tmp.i1 = add i32 %33, %i.03 can share an output register with another operation already assigned to main_signed_add_32_2
  %tmp.i1 = add i32 %33, %i.03 can share an output register with another operation already assigned to main_signed_add_32_3
  %tmp.i1 = add i32 %33, %i.03 can share an output register with another operation already assigned to main_signed_add_32_4
  %tmp.i1 = add i32 %33, %i.03 can share an output register with another operation already assigned to main_signed_add_32_5
  %tmp.i1 = add i32 %33, %i.03 can share an output register with another operation already assigned to main_signed_add_32_6
  %tmp.i1 = add i32 %33, %i.03 can share an output register with another operation already assigned to main_signed_add_32_7
  %tmp.i1 = add i32 %33, %i.03 can share an output register with another operation already assigned to main_signed_add_32_8
  %tmp.i1 = add i32 %33, %i.03 can share an output register with another operation already assigned to main_signed_add_32_9
  %tmp.i1 = add i32 %33, %i.03 can share an output register with another operation already assigned to main_signed_add_32_10
  %tmp.i1 = add i32 %33, %i.03 can share an output register with another operation already assigned to main_signed_add_32_11
  %tmp.i1 = add i32 %33, %i.03 can share an output register with another operation already assigned to main_signed_add_32_12
  %tmp.i1 = add i32 %33, %i.03 can share an output register with another operation already assigned to main_signed_add_32_13
  %tmp.i1 = add i32 %33, %i.03 can share an output register with another operation already assigned to main_signed_add_32_14
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         
  %tmp.i1 = add i32 %33, %i.03 (idx: 0)           -5                            31                            116                           116                           116                           116                           116                           116                           116                           116                           116                           116                           116                           116                           116                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         
  %tmp.i1 = add i32 %33, %i.03 (idx: 0)           1                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %tmp.i1 = add i32 %33, %i.03 (idx: 0) -> main_signed_add_32_0 (mux inputs: 3)
State: LEGUP_F_main_BB_preheaderipreheader
Binding functional unit type: signed_multiply_32
Weight matrix for operation/function unit matching:
                                                  main_signed_multiply_32_0     
  %tmp1.i2 = mul i32 %tmp.i1, ... (idx: 0)        11                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_multiply_32_0     
  %tmp1.i2 = mul i32 %tmp.i1, ... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %tmp1.i2 = mul i32 %tmp.i1, ... (idx: 0) -> main_signed_multiply_32_0 (mux inputs: 1)
State: LEGUP_F_main_BB_preheaderipreheader
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %35 = add i32 %i.03, %tmp1.i... hey can share an input with another operation already assigned to main_signed_add_32_0
  %35 = add i32 %i.03, %tmp1.i... can share an output register with another operation already assigned to main_signed_add_32_0
  %35 = add i32 %i.03, %tmp1.i... can share an output register with another operation already assigned to main_signed_add_32_1
  %35 = add i32 %i.03, %tmp1.i... can share an output register with another operation already assigned to main_signed_add_32_2
  %35 = add i32 %i.03, %tmp1.i... can share an output register with another operation already assigned to main_signed_add_32_3
  %35 = add i32 %i.03, %tmp1.i... can share an output register with another operation already assigned to main_signed_add_32_4
  %35 = add i32 %i.03, %tmp1.i... can share an output register with another operation already assigned to main_signed_add_32_5
  %35 = add i32 %i.03, %tmp1.i... can share an output register with another operation already assigned to main_signed_add_32_6
  %35 = add i32 %i.03, %tmp1.i... can share an output register with another operation already assigned to main_signed_add_32_7
  %35 = add i32 %i.03, %tmp1.i... can share an output register with another operation already assigned to main_signed_add_32_8
  %35 = add i32 %i.03, %tmp1.i... can share an output register with another operation already assigned to main_signed_add_32_9
  %35 = add i32 %i.03, %tmp1.i... can share an output register with another operation already assigned to main_signed_add_32_10
  %35 = add i32 %i.03, %tmp1.i... can share an output register with another operation already assigned to main_signed_add_32_11
  %35 = add i32 %i.03, %tmp1.i... can share an output register with another operation already assigned to main_signed_add_32_12
  %35 = add i32 %i.03, %tmp1.i... can share an output register with another operation already assigned to main_signed_add_32_13
  %35 = add i32 %i.03, %tmp1.i... can share an output register with another operation already assigned to main_signed_add_32_14
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         
  %35 = add i32 %i.03, %tmp1.i... (idx: 0)        -5                            17                            116                           116                           116                           116                           116                           116                           116                           116                           116                           116                           116                           116                           116                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         
  %35 = add i32 %i.03, %tmp1.i... (idx: 0)        1                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %35 = add i32 %i.03, %tmp1.i... (idx: 0) -> main_signed_add_32_0 (mux inputs: 4)
State: LEGUP_F_main_BB__crit_edgei
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %43 = add i32 %37, %.pre.i can share an output register with another operation already assigned to main_signed_add_32_0
  %43 = add i32 %37, %.pre.i can share an output register with another operation already assigned to main_signed_add_32_1
  %43 = add i32 %37, %.pre.i can share an output register with another operation already assigned to main_signed_add_32_2
  %43 = add i32 %37, %.pre.i can share an output register with another operation already assigned to main_signed_add_32_3
  %43 = add i32 %37, %.pre.i can share an output register with another operation already assigned to main_signed_add_32_4
  %43 = add i32 %37, %.pre.i can share an output register with another operation already assigned to main_signed_add_32_5
  %43 = add i32 %37, %.pre.i can share an output register with another operation already assigned to main_signed_add_32_6
  %43 = add i32 %37, %.pre.i can share an output register with another operation already assigned to main_signed_add_32_7
  %43 = add i32 %37, %.pre.i can share an output register with another operation already assigned to main_signed_add_32_8
  %43 = add i32 %37, %.pre.i can share an output register with another operation already assigned to main_signed_add_32_9
  %43 = add i32 %37, %.pre.i can share an output register with another operation already assigned to main_signed_add_32_10
  %43 = add i32 %37, %.pre.i can share an output register with another operation already assigned to main_signed_add_32_11
  %43 = add i32 %37, %.pre.i can share an output register with another operation already assigned to main_signed_add_32_12
  %43 = add i32 %37, %.pre.i can share an output register with another operation already assigned to main_signed_add_32_13
  %43 = add i32 %37, %.pre.i can share an output register with another operation already assigned to main_signed_add_32_14
  %45 = add nsw i32 %36, 1 can share an output register with another operation already assigned to main_signed_add_32_0
  %45 = add nsw i32 %36, 1 can share an output register with another operation already assigned to main_signed_add_32_1
  %45 = add nsw i32 %36, 1 can share an output register with another operation already assigned to main_signed_add_32_2
  %45 = add nsw i32 %36, 1 can share an output register with another operation already assigned to main_signed_add_32_3
  %45 = add nsw i32 %36, 1 can share an output register with another operation already assigned to main_signed_add_32_4
  %45 = add nsw i32 %36, 1 can share an output register with another operation already assigned to main_signed_add_32_5
  %45 = add nsw i32 %36, 1 can share an output register with another operation already assigned to main_signed_add_32_6
  %45 = add nsw i32 %36, 1 can share an output register with another operation already assigned to main_signed_add_32_7
  %45 = add nsw i32 %36, 1 can share an output register with another operation already assigned to main_signed_add_32_8
  %45 = add nsw i32 %36, 1 can share an output register with another operation already assigned to main_signed_add_32_9
  %45 = add nsw i32 %36, 1 can share an output register with another operation already assigned to main_signed_add_32_10
  %45 = add nsw i32 %36, 1 can share an output register with another operation already assigned to main_signed_add_32_11
  %45 = add nsw i32 %36, 1 can share an output register with another operation already assigned to main_signed_add_32_12
  %45 = add nsw i32 %36, 1 can share an output register with another operation already assigned to main_signed_add_32_13
  %45 = add nsw i32 %36, 1 can share an output register with another operation already assigned to main_signed_add_32_14
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         
  %43 = add i32 %37, %.pre.i (idx: 0)             20                            18                            116                           116                           116                           116                           116                           116                           116                           116                           116                           116                           116                           116                           116                           
  %45 = add nsw i32 %36, 1 (idx: 1)               -5                            -5                            106                           106                           106                           106                           106                           106                           106                           106                           106                           106                           106                           106                           106                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         
  %43 = add i32 %37, %.pre.i (idx: 0)             0                             1                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             
  %45 = add nsw i32 %36, 1 (idx: 1)               1                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %45 = add nsw i32 %36, 1 (idx: 1) -> main_signed_add_32_0 (mux inputs: 5)
  %43 = add i32 %37, %.pre.i (idx: 0) -> main_signed_add_32_1 (mux inputs: 3)
State: LEGUP_F_main_BB__crit_edgei
Binding functional unit type: signed_subtract_32
Weight matrix for operation/function unit matching:
                                                  main_signed_subtract_32_0     
  %38 = sub i32 15, %36 (idx: 0)                  11                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_subtract_32_0     
  %38 = sub i32 15, %36 (idx: 0)                  1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %38 = sub i32 15, %36 (idx: 0) -> main_signed_subtract_32_0 (mux inputs: 1)
State: LEGUP_F_main_BB__crit_edgei
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %42 = load i32* %41, align 4... can share an output register with another operation already assigned to main_mem_dual_port_0
                                                  main_mem_dual_port_0          
  %42 = load i32* %41, align 4... (idx: 0)        -5                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          
  %42 = load i32* %41, align 4... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %42 = load i32* %41, align 4... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 33)
State: LEGUP_F_main_BB__crit_edgei
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %gep34 = add i32 %gep_int32,... can share an output register with another operation already assigned to main_signed_add_32_0
  %gep34 = add i32 %gep_int32,... can share an output register with another operation already assigned to main_signed_add_32_1
  %gep34 = add i32 %gep_int32,... can share an output register with another operation already assigned to main_signed_add_32_2
  %gep34 = add i32 %gep_int32,... can share an output register with another operation already assigned to main_signed_add_32_3
  %gep34 = add i32 %gep_int32,... can share an output register with another operation already assigned to main_signed_add_32_4
  %gep34 = add i32 %gep_int32,... can share an output register with another operation already assigned to main_signed_add_32_5
  %gep34 = add i32 %gep_int32,... can share an output register with another operation already assigned to main_signed_add_32_6
  %gep34 = add i32 %gep_int32,... can share an output register with another operation already assigned to main_signed_add_32_7
  %gep34 = add i32 %gep_int32,... can share an output register with another operation already assigned to main_signed_add_32_8
  %gep34 = add i32 %gep_int32,... can share an output register with another operation already assigned to main_signed_add_32_9
  %gep34 = add i32 %gep_int32,... can share an output register with another operation already assigned to main_signed_add_32_10
  %gep34 = add i32 %gep_int32,... can share an output register with another operation already assigned to main_signed_add_32_11
  %gep34 = add i32 %gep_int32,... can share an output register with another operation already assigned to main_signed_add_32_12
  %gep34 = add i32 %gep_int32,... can share an output register with another operation already assigned to main_signed_add_32_13
  %gep34 = add i32 %gep_int32,... can share an output register with another operation already assigned to main_signed_add_32_14
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         
  %gep34 = add i32 %gep_int32,... (idx: 0)        -5                            19                            116                           116                           116                           116                           116                           116                           116                           116                           116                           116                           116                           116                           116                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         
  %gep34 = add i32 %gep_int32,... (idx: 0)        1                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %gep34 = add i32 %gep_int32,... (idx: 0) -> main_signed_add_32_0 (mux inputs: 7)
State: LEGUP_F_main_BB__crit_edgei
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %40 = load i32* %39, align 4... can share an output register with another operation already assigned to main_mem_dual_port_0
                                                  main_mem_dual_port_0          
  %40 = load i32* %39, align 4... (idx: 0)        -5                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          
  %40 = load i32* %39, align 4... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %40 = load i32* %39, align 4... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 34)
State: LEGUP_F_main_BB__crit_edgei
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %gep31 = add i32 %gep_int30,... can share an output register with another operation already assigned to main_signed_add_32_0
  %gep31 = add i32 %gep_int30,... can share an output register with another operation already assigned to main_signed_add_32_1
  %gep31 = add i32 %gep_int30,... can share an output register with another operation already assigned to main_signed_add_32_2
  %gep31 = add i32 %gep_int30,... can share an output register with another operation already assigned to main_signed_add_32_3
  %gep31 = add i32 %gep_int30,... can share an output register with another operation already assigned to main_signed_add_32_4
  %gep31 = add i32 %gep_int30,... can share an output register with another operation already assigned to main_signed_add_32_5
  %gep31 = add i32 %gep_int30,... can share an output register with another operation already assigned to main_signed_add_32_6
  %gep31 = add i32 %gep_int30,... can share an output register with another operation already assigned to main_signed_add_32_7
  %gep31 = add i32 %gep_int30,... can share an output register with another operation already assigned to main_signed_add_32_8
  %gep31 = add i32 %gep_int30,... can share an output register with another operation already assigned to main_signed_add_32_9
  %gep31 = add i32 %gep_int30,... can share an output register with another operation already assigned to main_signed_add_32_10
  %gep31 = add i32 %gep_int30,... can share an output register with another operation already assigned to main_signed_add_32_11
  %gep31 = add i32 %gep_int30,... can share an output register with another operation already assigned to main_signed_add_32_12
  %gep31 = add i32 %gep_int30,... can share an output register with another operation already assigned to main_signed_add_32_13
  %gep31 = add i32 %gep_int30,... can share an output register with another operation already assigned to main_signed_add_32_14
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         
  %gep31 = add i32 %gep_int30,... (idx: 0)        -5                            19                            116                           116                           116                           116                           116                           116                           116                           116                           116                           116                           116                           116                           116                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         
  %gep31 = add i32 %gep_int30,... (idx: 0)        1                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %gep31 = add i32 %gep_int30,... (idx: 0) -> main_signed_add_32_0 (mux inputs: 9)
State: LEGUP_F_main_BB__crit_edgei
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %tmp.i = add i32 %40, %.pre.... can share an output register with another operation already assigned to main_signed_add_32_0
  %tmp.i = add i32 %40, %.pre.... hey can share an input with another operation already assigned to main_signed_add_32_1
  %tmp.i = add i32 %40, %.pre.... can share an output register with another operation already assigned to main_signed_add_32_1
  %tmp.i = add i32 %40, %.pre.... can share an output register with another operation already assigned to main_signed_add_32_2
  %tmp.i = add i32 %40, %.pre.... can share an output register with another operation already assigned to main_signed_add_32_3
  %tmp.i = add i32 %40, %.pre.... can share an output register with another operation already assigned to main_signed_add_32_4
  %tmp.i = add i32 %40, %.pre.... can share an output register with another operation already assigned to main_signed_add_32_5
  %tmp.i = add i32 %40, %.pre.... can share an output register with another operation already assigned to main_signed_add_32_6
  %tmp.i = add i32 %40, %.pre.... can share an output register with another operation already assigned to main_signed_add_32_7
  %tmp.i = add i32 %40, %.pre.... can share an output register with another operation already assigned to main_signed_add_32_8
  %tmp.i = add i32 %40, %.pre.... can share an output register with another operation already assigned to main_signed_add_32_9
  %tmp.i = add i32 %40, %.pre.... can share an output register with another operation already assigned to main_signed_add_32_10
  %tmp.i = add i32 %40, %.pre.... can share an output register with another operation already assigned to main_signed_add_32_11
  %tmp.i = add i32 %40, %.pre.... can share an output register with another operation already assigned to main_signed_add_32_12
  %tmp.i = add i32 %40, %.pre.... can share an output register with another operation already assigned to main_signed_add_32_13
  %tmp.i = add i32 %40, %.pre.... can share an output register with another operation already assigned to main_signed_add_32_14
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         
  %tmp.i = add i32 %40, %.pre.... (idx: 0)        26                            11                            116                           116                           116                           116                           116                           116                           116                           116                           116                           116                           116                           116                           116                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         
  %tmp.i = add i32 %40, %.pre.... (idx: 0)        0                             1                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %tmp.i = add i32 %40, %.pre.... (idx: 0) -> main_signed_add_32_1 (mux inputs: 4)
State: LEGUP_F_main_BB__crit_edgei
Binding functional unit type: signed_multiply_32
Weight matrix for operation/function unit matching:
  %tmp1.i = mul i32 %tmp.i, %4... can share an output register with another operation already assigned to main_signed_multiply_32_0
                                                  main_signed_multiply_32_0     
  %tmp1.i = mul i32 %tmp.i, %4... (idx: 0)        -5                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_multiply_32_0     
  %tmp1.i = mul i32 %tmp.i, %4... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %tmp1.i = mul i32 %tmp.i, %4... (idx: 0) -> main_signed_multiply_32_0 (mux inputs: 3)
State: LEGUP_F_main_BB__crit_edgei
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %44 = add i32 %43, %tmp1.i can share an output register with another operation already assigned to main_signed_add_32_0
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         
  %44 = add i32 %43, %tmp1.i (idx: 0)             -5                            25                            121                           121                           121                           121                           121                           121                           121                           121                           121                           121                           121                           121                           121                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         
  %44 = add i32 %43, %tmp1.i (idx: 0)             1                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %44 = add i32 %43, %tmp1.i (idx: 0) -> main_signed_add_32_0 (mux inputs: 11)
State: LEGUP_F_main_BB__crit_edgei_crit_edgei_crit_edge
Binding functional unit type: mem_dual_port
Weight matrix for operation/function unit matching:
  %.pre.i.pre = load i32* %.ph... can share an output register with another operation already assigned to main_mem_dual_port_0
                                                  main_mem_dual_port_0          
  %.pre.i.pre = load i32* %.ph... (idx: 0)        -5                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_mem_dual_port_0          
  %.pre.i.pre = load i32* %.ph... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %.pre.i.pre = load i32* %.ph... (idx: 0) -> main_mem_dual_port_0 (mux inputs: 35)
State: LEGUP_F_main_BB__crit_edgei_crit_edgei_crit_edge
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %gep37 = add i32 %gep_int35,... can share an output register with another operation already assigned to main_signed_add_32_0
  %gep37 = add i32 %gep_int35,... can share an output register with another operation already assigned to main_signed_add_32_1
  %gep37 = add i32 %gep_int35,... can share an output register with another operation already assigned to main_signed_add_32_2
  %gep37 = add i32 %gep_int35,... can share an output register with another operation already assigned to main_signed_add_32_3
  %gep37 = add i32 %gep_int35,... can share an output register with another operation already assigned to main_signed_add_32_4
  %gep37 = add i32 %gep_int35,... can share an output register with another operation already assigned to main_signed_add_32_5
  %gep37 = add i32 %gep_int35,... can share an output register with another operation already assigned to main_signed_add_32_6
  %gep37 = add i32 %gep_int35,... can share an output register with another operation already assigned to main_signed_add_32_7
  %gep37 = add i32 %gep_int35,... can share an output register with another operation already assigned to main_signed_add_32_8
  %gep37 = add i32 %gep_int35,... can share an output register with another operation already assigned to main_signed_add_32_9
  %gep37 = add i32 %gep_int35,... can share an output register with another operation already assigned to main_signed_add_32_10
  %gep37 = add i32 %gep_int35,... can share an output register with another operation already assigned to main_signed_add_32_11
  %gep37 = add i32 %gep_int35,... can share an output register with another operation already assigned to main_signed_add_32_12
  %gep37 = add i32 %gep_int35,... can share an output register with another operation already assigned to main_signed_add_32_13
  %gep37 = add i32 %gep_int35,... can share an output register with another operation already assigned to main_signed_add_32_14
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         
  %gep37 = add i32 %gep_int35,... (idx: 0)        -5                            20                            116                           116                           116                           116                           116                           116                           116                           116                           116                           116                           116                           116                           116                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         
  %gep37 = add i32 %gep_int35,... (idx: 0)        1                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %gep37 = add i32 %gep_int35,... (idx: 0) -> main_signed_add_32_0 (mux inputs: 13)
State: LEGUP_F_main_BB_FIRFilterStreamingexit
Binding functional unit type: signed_add_32
Weight matrix for operation/function unit matching:
  %46 = add i32 %.0.i, %total.... can share an output register with another operation already assigned to main_signed_add_32_0
  %46 = add i32 %.0.i, %total.... can share an output register with another operation already assigned to main_signed_add_32_1
  %47 = add nsw i32 %i.03, 1 hey can share an input with another operation already assigned to main_signed_add_32_0
  %47 = add nsw i32 %i.03, 1 can share an output register with another operation already assigned to main_signed_add_32_0
  %47 = add nsw i32 %i.03, 1 can share an output register with another operation already assigned to main_signed_add_32_1
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         
  %46 = add i32 %.0.i, %total.... (idx: 0)        -5                            21                            121                           121                           121                           121                           121                           121                           121                           121                           121                           121                           121                           121                           121                           
  %47 = add nsw i32 %i.03, 1 (idx: 1)             -5                            -5                            111                           111                           111                           111                           111                           111                           111                           111                           111                           111                           111                           111                           111                           
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_signed_add_32_0          main_signed_add_32_1          main_signed_add_32_2          main_signed_add_32_3          main_signed_add_32_4          main_signed_add_32_5          main_signed_add_32_6          main_signed_add_32_7          main_signed_add_32_8          main_signed_add_32_9          main_signed_add_32_10         main_signed_add_32_11         main_signed_add_32_12         main_signed_add_32_13         main_signed_add_32_14         
  %46 = add i32 %.0.i, %total.... (idx: 0)        1                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             
  %47 = add nsw i32 %i.03, 1 (idx: 1)             0                             1                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %46 = add i32 %.0.i, %total.... (idx: 0) -> main_signed_add_32_0 (mux inputs: 15)
  %47 = add nsw i32 %i.03, 1 (idx: 1) -> main_signed_add_32_1 (mux inputs: 5)

